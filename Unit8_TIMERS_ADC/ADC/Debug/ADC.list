
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000189c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080019cc  080019cc  000119cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a08  08001a08  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a08  08001a08  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a08  08001a08  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a08  08001a08  00011a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a0c  08001a0c  00011a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08001a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000006c  08001a7c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08001a7c  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005da0  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f96  00000000  00000000  00025e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000260  00000000  00000000  00026dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001d8  00000000  00000000  00027030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000320b  00000000  00000000  00027208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000038d2  00000000  00000000  0002a413  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000add0  00000000  00000000  0002dce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00038ab5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ab0  00000000  00000000  00038b30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000006c 	.word	0x2000006c
 800014c:	00000000 	.word	0x00000000
 8000150:	080019b4 	.word	0x080019b4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000070 	.word	0x20000070
 800016c:	080019b4 	.word	0x080019b4

08000170 <main>:
#include "STM32_TIMERS_DRIVER.h"
#include "stm32f103c6_USART_SRIVER.h"
uint16_t X;
uint8_t text[5];
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af04      	add	r7, sp, #16
	ADC_INIT(ADC1, ADC_STATE_START);
 8000176:	2101      	movs	r1, #1
 8000178:	4818      	ldr	r0, [pc, #96]	; (80001dc <main+0x6c>)
 800017a:	f000 fadb 	bl	8000734 <ADC_INIT>
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,8000000);
 800017e:	4b18      	ldr	r3, [pc, #96]	; (80001e0 <main+0x70>)
 8000180:	9302      	str	r3, [sp, #8]
 8000182:	2300      	movs	r3, #0
 8000184:	9301      	str	r3, [sp, #4]
 8000186:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800018a:	9300      	str	r3, [sp, #0]
 800018c:	2300      	movs	r3, #0
 800018e:	2200      	movs	r2, #0
 8000190:	210c      	movs	r1, #12
 8000192:	4814      	ldr	r0, [pc, #80]	; (80001e4 <main+0x74>)
 8000194:	f000 fc88 	bl	8000aa8 <USART_INIT>

	while(1){
		X=ADC_READ(ADC1, ADC_pin_PA1);
 8000198:	2101      	movs	r1, #1
 800019a:	4810      	ldr	r0, [pc, #64]	; (80001dc <main+0x6c>)
 800019c:	f000 fb28 	bl	80007f0 <ADC_READ>
 80001a0:	4603      	mov	r3, r0
 80001a2:	461a      	mov	r2, r3
 80001a4:	4b10      	ldr	r3, [pc, #64]	; (80001e8 <main+0x78>)
 80001a6:	801a      	strh	r2, [r3, #0]
		sprintf(text,"%d",X);
 80001a8:	4b0f      	ldr	r3, [pc, #60]	; (80001e8 <main+0x78>)
 80001aa:	881b      	ldrh	r3, [r3, #0]
 80001ac:	461a      	mov	r2, r3
 80001ae:	490f      	ldr	r1, [pc, #60]	; (80001ec <main+0x7c>)
 80001b0:	480f      	ldr	r0, [pc, #60]	; (80001f0 <main+0x80>)
 80001b2:	f000 ffed 	bl	8001190 <siprintf>
		USART_SEND_STRING(USART1,text);
 80001b6:	490e      	ldr	r1, [pc, #56]	; (80001f0 <main+0x80>)
 80001b8:	480a      	ldr	r0, [pc, #40]	; (80001e4 <main+0x74>)
 80001ba:	f000 fd59 	bl	8000c70 <USART_SEND_STRING>
		delay(100, U_ms,8000000);
 80001be:	4a08      	ldr	r2, [pc, #32]	; (80001e0 <main+0x70>)
 80001c0:	2100      	movs	r1, #0
 80001c2:	2064      	movs	r0, #100	; 0x64
 80001c4:	f000 f9b4 	bl	8000530 <delay>
		USART_SEND_STRING(USART1,"\n");
 80001c8:	490a      	ldr	r1, [pc, #40]	; (80001f4 <main+0x84>)
 80001ca:	4806      	ldr	r0, [pc, #24]	; (80001e4 <main+0x74>)
 80001cc:	f000 fd50 	bl	8000c70 <USART_SEND_STRING>
		delay(100, U_ms,8000000);
 80001d0:	4a03      	ldr	r2, [pc, #12]	; (80001e0 <main+0x70>)
 80001d2:	2100      	movs	r1, #0
 80001d4:	2064      	movs	r0, #100	; 0x64
 80001d6:	f000 f9ab 	bl	8000530 <delay>
		X=ADC_READ(ADC1, ADC_pin_PA1);
 80001da:	e7dd      	b.n	8000198 <main+0x28>
 80001dc:	40012400 	.word	0x40012400
 80001e0:	007a1200 	.word	0x007a1200
 80001e4:	40013800 	.word	0x40013800
 80001e8:	2000009e 	.word	0x2000009e
 80001ec:	080019cc 	.word	0x080019cc
 80001f0:	20000098 	.word	0x20000098
 80001f4:	080019d0 	.word	0x080019d0

080001f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b086      	sub	sp, #24
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000200:	4a14      	ldr	r2, [pc, #80]	; (8000254 <_sbrk+0x5c>)
 8000202:	4b15      	ldr	r3, [pc, #84]	; (8000258 <_sbrk+0x60>)
 8000204:	1ad3      	subs	r3, r2, r3
 8000206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000208:	697b      	ldr	r3, [r7, #20]
 800020a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <_sbrk+0x64>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d102      	bne.n	800021a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <_sbrk+0x64>)
 8000216:	4a12      	ldr	r2, [pc, #72]	; (8000260 <_sbrk+0x68>)
 8000218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800021a:	4b10      	ldr	r3, [pc, #64]	; (800025c <_sbrk+0x64>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4413      	add	r3, r2
 8000222:	693a      	ldr	r2, [r7, #16]
 8000224:	429a      	cmp	r2, r3
 8000226:	d207      	bcs.n	8000238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000228:	f000 ff88 	bl	800113c <__errno>
 800022c:	4602      	mov	r2, r0
 800022e:	230c      	movs	r3, #12
 8000230:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000232:	f04f 33ff 	mov.w	r3, #4294967295
 8000236:	e009      	b.n	800024c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <_sbrk+0x64>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <_sbrk+0x64>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4413      	add	r3, r2
 8000246:	4a05      	ldr	r2, [pc, #20]	; (800025c <_sbrk+0x64>)
 8000248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800024a:	68fb      	ldr	r3, [r7, #12]
}
 800024c:	4618      	mov	r0, r3
 800024e:	3718      	adds	r7, #24
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20002800 	.word	0x20002800
 8000258:	00000400 	.word	0x00000400
 800025c:	20000088 	.word	0x20000088
 8000260:	20000128 	.word	0x20000128

08000264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000266:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	; (80002a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	; (80002a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <LoopForever+0xe>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	; (80002b0 <LoopForever+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000292:	f000 ff59 	bl	8001148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ff6b 	bl	8000170 <main>

0800029a <LoopForever>:

LoopForever:
    b LoopForever
 800029a:	e7fe      	b.n	800029a <LoopForever>
  ldr   r0, =_estack
 800029c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80002a8:	08001a10 	.word	0x08001a10
  ldr r2, =_sbss
 80002ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80002b0:	20000124 	.word	0x20000124

080002b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC1_2_IRQHandler>

080002b6 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 80002b6:	b480      	push	{r7}
 80002b8:	b085      	sub	sp, #20
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	4603      	mov	r3, r0
 80002be:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 80002c0:	88fb      	ldrh	r3, [r7, #6]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <getposition+0x14>
		rval =0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 80002ca:	88fb      	ldrh	r3, [r7, #6]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d101      	bne.n	80002d4 <getposition+0x1e>
		rval =4;
 80002d0:	2304      	movs	r3, #4
 80002d2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d101      	bne.n	80002de <getposition+0x28>
		rval =8;
 80002da:	2308      	movs	r3, #8
 80002dc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 80002de:	88fb      	ldrh	r3, [r7, #6]
 80002e0:	2b03      	cmp	r3, #3
 80002e2:	d101      	bne.n	80002e8 <getposition+0x32>
		rval =12;
 80002e4:	230c      	movs	r3, #12
 80002e6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 80002e8:	88fb      	ldrh	r3, [r7, #6]
 80002ea:	2b04      	cmp	r3, #4
 80002ec:	d101      	bne.n	80002f2 <getposition+0x3c>
		rval =16;
 80002ee:	2310      	movs	r3, #16
 80002f0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 80002f2:	88fb      	ldrh	r3, [r7, #6]
 80002f4:	2b05      	cmp	r3, #5
 80002f6:	d101      	bne.n	80002fc <getposition+0x46>
		rval =20;
 80002f8:	2314      	movs	r3, #20
 80002fa:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 80002fc:	88fb      	ldrh	r3, [r7, #6]
 80002fe:	2b06      	cmp	r3, #6
 8000300:	d101      	bne.n	8000306 <getposition+0x50>
		rval =24;
 8000302:	2318      	movs	r3, #24
 8000304:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8000306:	88fb      	ldrh	r3, [r7, #6]
 8000308:	2b07      	cmp	r3, #7
 800030a:	d101      	bne.n	8000310 <getposition+0x5a>
		rval =28;
 800030c:	231c      	movs	r3, #28
 800030e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8000310:	88fb      	ldrh	r3, [r7, #6]
 8000312:	2b08      	cmp	r3, #8
 8000314:	d101      	bne.n	800031a <getposition+0x64>
		rval =0;
 8000316:	2300      	movs	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	2b09      	cmp	r3, #9
 800031e:	d101      	bne.n	8000324 <getposition+0x6e>
		rval =4;
 8000320:	2304      	movs	r3, #4
 8000322:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8000324:	88fb      	ldrh	r3, [r7, #6]
 8000326:	2b0a      	cmp	r3, #10
 8000328:	d101      	bne.n	800032e <getposition+0x78>
		rval =8;
 800032a:	2308      	movs	r3, #8
 800032c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 800032e:	88fb      	ldrh	r3, [r7, #6]
 8000330:	2b0b      	cmp	r3, #11
 8000332:	d101      	bne.n	8000338 <getposition+0x82>
		rval =12;
 8000334:	230c      	movs	r3, #12
 8000336:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8000338:	88fb      	ldrh	r3, [r7, #6]
 800033a:	2b0c      	cmp	r3, #12
 800033c:	d101      	bne.n	8000342 <getposition+0x8c>
		rval =16;
 800033e:	2310      	movs	r3, #16
 8000340:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 8000342:	88fb      	ldrh	r3, [r7, #6]
 8000344:	2b0d      	cmp	r3, #13
 8000346:	d101      	bne.n	800034c <getposition+0x96>
		rval =20;
 8000348:	2314      	movs	r3, #20
 800034a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 800034c:	88fb      	ldrh	r3, [r7, #6]
 800034e:	2b0e      	cmp	r3, #14
 8000350:	d101      	bne.n	8000356 <getposition+0xa0>
		rval =24;
 8000352:	2318      	movs	r3, #24
 8000354:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000356:	88fb      	ldrh	r3, [r7, #6]
 8000358:	2b0f      	cmp	r3, #15
 800035a:	d101      	bne.n	8000360 <getposition+0xaa>
		rval =28;
 800035c:	231c      	movs	r3, #28
 800035e:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000360:	7bfb      	ldrb	r3, [r7, #15]


}
 8000362:	4618      	mov	r0, r3
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	460b      	mov	r3, r1
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	4a69      	ldr	r2, [pc, #420]	; (8000524 <pinmode+0x1b8>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <pinmode+0x24>
		GPIOA_Clock_Enable();
 8000382:	4b69      	ldr	r3, [pc, #420]	; (8000528 <pinmode+0x1bc>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a68      	ldr	r2, [pc, #416]	; (8000528 <pinmode+0x1bc>)
 8000388:	f043 0304 	orr.w	r3, r3, #4
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	e010      	b.n	80003b2 <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	4a66      	ldr	r2, [pc, #408]	; (800052c <pinmode+0x1c0>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8000398:	4b63      	ldr	r3, [pc, #396]	; (8000528 <pinmode+0x1bc>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a62      	ldr	r2, [pc, #392]	; (8000528 <pinmode+0x1bc>)
 800039e:	f043 0308 	orr.w	r3, r3, #8
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	e005      	b.n	80003b2 <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 80003a6:	4b60      	ldr	r3, [pc, #384]	; (8000528 <pinmode+0x1bc>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a5f      	ldr	r2, [pc, #380]	; (8000528 <pinmode+0x1bc>)
 80003ac:	f043 0310 	orr.w	r3, r3, #16
 80003b0:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 80003b2:	897b      	ldrh	r3, [r7, #10]
 80003b4:	2b07      	cmp	r3, #7
 80003b6:	d856      	bhi.n	8000466 <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 80003b8:	897b      	ldrh	r3, [r7, #10]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff7b 	bl	80002b6 <getposition>
 80003c0:	4603      	mov	r3, r0
 80003c2:	461a      	mov	r2, r3
 80003c4:	230f      	movs	r3, #15
 80003c6:	4093      	lsls	r3, r2
 80003c8:	43da      	mvns	r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	401a      	ands	r2, r3
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b08      	cmp	r3, #8
 80003d8:	d002      	beq.n	80003e0 <pinmode+0x74>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b18      	cmp	r3, #24
 80003de:	d133      	bne.n	8000448 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b18      	cmp	r3, #24
 80003e4:	d117      	bne.n	8000416 <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 80003e6:	897b      	ldrh	r3, [r7, #10]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff64 	bl	80002b6 <getposition>
 80003ee:	4603      	mov	r3, r0
 80003f0:	461a      	mov	r2, r3
 80003f2:	2308      	movs	r3, #8
 80003f4:	fa03 f202 	lsl.w	r2, r3, r2
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	431a      	orrs	r2, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	897a      	ldrh	r2, [r7, #10]
 8000408:	2101      	movs	r1, #1
 800040a:	fa01 f202 	lsl.w	r2, r1, r2
 800040e:	431a      	orrs	r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000414:	e081      	b.n	800051a <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000416:	897b      	ldrh	r3, [r7, #10]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff ff4c 	bl	80002b6 <getposition>
 800041e:	4603      	mov	r3, r0
 8000420:	461a      	mov	r2, r3
 8000422:	2308      	movs	r3, #8
 8000424:	fa03 f202 	lsl.w	r2, r3, r2
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	431a      	orrs	r2, r3
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	897a      	ldrh	r2, [r7, #10]
 8000438:	2101      	movs	r1, #1
 800043a:	fa01 f202 	lsl.w	r2, r1, r2
 800043e:	43d2      	mvns	r2, r2
 8000440:	401a      	ands	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000446:	e068      	b.n	800051a <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 8000448:	897b      	ldrh	r3, [r7, #10]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff33 	bl	80002b6 <getposition>
 8000450:	4603      	mov	r3, r0
 8000452:	461a      	mov	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	fa03 f202 	lsl.w	r2, r3, r2
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	431a      	orrs	r2, r3
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	601a      	str	r2, [r3, #0]

	}



}
 8000464:	e059      	b.n	800051a <pinmode+0x1ae>
	else if(pin>7){
 8000466:	897b      	ldrh	r3, [r7, #10]
 8000468:	2b07      	cmp	r3, #7
 800046a:	d956      	bls.n	800051a <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 800046c:	897b      	ldrh	r3, [r7, #10]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff21 	bl	80002b6 <getposition>
 8000474:	4603      	mov	r3, r0
 8000476:	461a      	mov	r2, r3
 8000478:	230f      	movs	r3, #15
 800047a:	4093      	lsls	r3, r2
 800047c:	43da      	mvns	r2, r3
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	401a      	ands	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b08      	cmp	r3, #8
 800048c:	d002      	beq.n	8000494 <pinmode+0x128>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2b18      	cmp	r3, #24
 8000492:	d133      	bne.n	80004fc <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b18      	cmp	r3, #24
 8000498:	d117      	bne.n	80004ca <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800049a:	897b      	ldrh	r3, [r7, #10]
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ff0a 	bl	80002b6 <getposition>
 80004a2:	4603      	mov	r3, r0
 80004a4:	461a      	mov	r2, r3
 80004a6:	2308      	movs	r3, #8
 80004a8:	fa03 f202 	lsl.w	r2, r3, r2
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	431a      	orrs	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	897a      	ldrh	r2, [r7, #10]
 80004bc:	2101      	movs	r1, #1
 80004be:	fa01 f202 	lsl.w	r2, r1, r2
 80004c2:	431a      	orrs	r2, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80004c8:	e027      	b.n	800051a <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 80004ca:	897b      	ldrh	r3, [r7, #10]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff fef2 	bl	80002b6 <getposition>
 80004d2:	4603      	mov	r3, r0
 80004d4:	461a      	mov	r2, r3
 80004d6:	2308      	movs	r3, #8
 80004d8:	fa03 f202 	lsl.w	r2, r3, r2
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	431a      	orrs	r2, r3
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	897a      	ldrh	r2, [r7, #10]
 80004ec:	2101      	movs	r1, #1
 80004ee:	fa01 f202 	lsl.w	r2, r1, r2
 80004f2:	43d2      	mvns	r2, r2
 80004f4:	401a      	ands	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80004fa:	e00e      	b.n	800051a <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 80004fc:	897b      	ldrh	r3, [r7, #10]
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fed9 	bl	80002b6 <getposition>
 8000504:	4603      	mov	r3, r0
 8000506:	461a      	mov	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	fa03 f202 	lsl.w	r2, r3, r2
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	431a      	orrs	r2, r3
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	605a      	str	r2, [r3, #4]
}
 8000518:	e7ff      	b.n	800051a <pinmode+0x1ae>
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40010800 	.word	0x40010800
 8000528:	40021000 	.word	0x40021000
 800052c:	40010c00 	.word	0x40010c00

08000530 <delay>:

	TIMERx->TIMx_CR1 |=(1<<0);//enable the timer

}

void delay(uint16_t time,uint8_t U,uint32_t clk){
 8000530:	b480      	push	{r7}
 8000532:	b089      	sub	sp, #36	; 0x24
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	603a      	str	r2, [r7, #0]
 800053a:	80fb      	strh	r3, [r7, #6]
 800053c:	460b      	mov	r3, r1
 800053e:	717b      	strb	r3, [r7, #5]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 8000540:	4b4f      	ldr	r3, [pc, #316]	; (8000680 <delay+0x150>)
 8000542:	69db      	ldr	r3, [r3, #28]
 8000544:	4a4e      	ldr	r2, [pc, #312]	; (8000680 <delay+0x150>)
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 800054c:	4b4d      	ldr	r3, [pc, #308]	; (8000684 <delay+0x154>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	4b4c      	ldr	r3, [pc, #304]	; (8000684 <delay+0x154>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f022 0201 	bic.w	r2, r2, #1
 800055a:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 800055c:	2301      	movs	r3, #1
 800055e:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 8000564:	2301      	movs	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
	uint32_t unit =1000;
 8000568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056c:	613b      	str	r3, [r7, #16]
	uint8_t  increase=2;
 800056e:	2302      	movs	r3, #2
 8000570:	73fb      	strb	r3, [r7, #15]

	if (U == 0){
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d10d      	bne.n	8000594 <delay+0x64>
		unit = 1000;
 8000578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057c:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 100;
 800057e:	88fb      	ldrh	r3, [r7, #6]
 8000580:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000584:	4293      	cmp	r3, r2
 8000586:	d902      	bls.n	800058e <delay+0x5e>
 8000588:	2364      	movs	r3, #100	; 0x64
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e030      	b.n	80005f0 <delay+0xc0>
		else increase = 10;
 800058e:	230a      	movs	r3, #10
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e02d      	b.n	80005f0 <delay+0xc0>
	}
	else {
		unit = 1000000;
 8000594:	4b3c      	ldr	r3, [pc, #240]	; (8000688 <delay+0x158>)
 8000596:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 10;
 8000598:	88fb      	ldrh	r3, [r7, #6]
 800059a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800059e:	4293      	cmp	r3, r2
 80005a0:	d902      	bls.n	80005a8 <delay+0x78>
 80005a2:	230a      	movs	r3, #10
 80005a4:	73fb      	strb	r3, [r7, #15]
 80005a6:	e023      	b.n	80005f0 <delay+0xc0>
		else increase = 5;
 80005a8:	2305      	movs	r3, #5
 80005aa:	73fb      	strb	r3, [r7, #15]
	}

	while(user_flage==1){
 80005ac:	e020      	b.n	80005f0 <delay+0xc0>
		user_top = (clk/unit*time)/( user_pre );
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b6:	88fa      	ldrh	r2, [r7, #6]
 80005b8:	fb02 f203 	mul.w	r2, r2, r3
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c2:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 80005c4:	69bb      	ldr	r3, [r7, #24]
 80005c6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80005ca:	d30f      	bcc.n	80005ec <delay+0xbc>

			if(user_pre>65530){
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d905      	bls.n	80005e2 <delay+0xb2>
				user_pre=65530;
 80005d6:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 80005da:	617b      	str	r3, [r7, #20]
				user_flage=0;
 80005dc:	2300      	movs	r3, #0
 80005de:	77fb      	strb	r3, [r7, #31]
 80005e0:	e006      	b.n	80005f0 <delay+0xc0>
			}
			else user_pre+=increase;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	4413      	add	r3, r2
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	e001      	b.n	80005f0 <delay+0xc0>

		}
		else{
			user_flage=0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 80005f0:	7ffb      	ldrb	r3, [r7, #31]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d0db      	beq.n	80005ae <delay+0x7e>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <delay+0x154>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <delay+0x154>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f022 0201 	bic.w	r2, r2, #1
 8000604:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <delay+0x154>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <delay+0x154>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f042 0204 	orr.w	r2, r2, #4
 8000614:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <delay+0x154>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68da      	ldr	r2, [r3, #12]
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <delay+0x154>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f042 0201 	orr.w	r2, r2, #1
 8000624:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <delay+0x154>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	69ba      	ldr	r2, [r7, #24]
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <delay+0x154>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	3a01      	subs	r2, #1
 8000636:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <delay+0x154>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	695a      	ldr	r2, [r3, #20]
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <delay+0x154>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f042 0201 	orr.w	r2, r2, #1
 8000646:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <delay+0x154>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <delay+0x154>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f042 0201 	orr.w	r2, r2, #1
 8000656:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <delay+0x15c>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <delay+0x160>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <delay+0x160>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 800066a:	bf00      	nop
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <delay+0x15c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1fb      	bne.n	800066c <delay+0x13c>

	}
}
 8000674:	bf00      	nop
 8000676:	3724      	adds	r7, #36	; 0x24
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000
 8000684:	20000004 	.word	0x20000004
 8000688:	000f4240 	.word	0x000f4240
 800068c:	20000000 	.word	0x20000000
 8000690:	e000e100 	.word	0xe000e100

08000694 <TIM2_IRQHandler>:
		return X;
	}
}


void TIM2_IRQHandler(){
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <TIM2_IRQHandler+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	691a      	ldr	r2, [r3, #16]
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <TIM2_IRQHandler+0x34>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f022 0201 	bic.w	r2, r2, #1
 80006a6:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <TIM2_IRQHandler+0x38>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <TIM2_IRQHandler+0x34>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <TIM2_IRQHandler+0x34>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f022 0201 	bic.w	r2, r2, #1
 80006bc:	601a      	str	r2, [r3, #0]

}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000004 	.word	0x20000004
 80006cc:	20000000 	.word	0x20000000

080006d0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin10,LOW);
	ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <TIM3_IRQHandler+0x30>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <TIM3_IRQHandler+0x30>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f022 0201 	bic.w	r2, r2, #1
 80006e2:	601a      	str	r2, [r3, #0]
	ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <TIM3_IRQHandler+0x30>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	691a      	ldr	r2, [r3, #16]
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <TIM3_IRQHandler+0x30>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f022 0201 	bic.w	r2, r2, #1
 80006f2:	611a      	str	r2, [r3, #16]
	ISRcalback[0]();
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <TIM3_IRQHandler+0x34>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4798      	blx	r3
	//NVIC_TIM3_global_interrupt_Disable;
	//pinwrite(GPIOB, pin10,HIGH);
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000a8 	.word	0x200000a8
 8000704:	200000a0 	.word	0x200000a0

08000708 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <TIM4_IRQHandler+0x24>)
 800070e:	691b      	ldr	r3, [r3, #16]
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <TIM4_IRQHandler+0x24>)
 8000712:	f023 0301 	bic.w	r3, r3, #1
 8000716:	6113      	str	r3, [r2, #16]
	overflowtims++;
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <TIM4_IRQHandler+0x28>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	b29a      	uxth	r2, r3
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <TIM4_IRQHandler+0x28>)
 8000722:	801a      	strh	r2, [r3, #0]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40000800 	.word	0x40000800
 8000730:	2000008c 	.word	0x2000008c

08000734 <ADC_INIT>:
#include "stm32f103c6_ADC.h"


uint8_t flag_ADC_INIT=0;

void ADC_INIT(ADC_typeDef* ADCx,uint8_t ADC_STATE_){
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]

	if(ADC_STATE_==ADC_STATE_START){
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d132      	bne.n	80007ac <ADC_INIT+0x78>
		if(ADCx==ADC1){
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <ADC_INIT+0xac>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d106      	bne.n	800075c <ADC_INIT+0x28>
			ADC1_Clock_Enable();
 800074e:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <ADC_INIT+0xb0>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <ADC_INIT+0xb0>)
 8000754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	e009      	b.n	8000770 <ADC_INIT+0x3c>
		}
		else if(ADCx==ADC2){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <ADC_INIT+0xb4>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d105      	bne.n	8000770 <ADC_INIT+0x3c>
			ADC2_Clock_Enable();
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <ADC_INIT+0xb0>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <ADC_INIT+0xb0>)
 800076a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800076e:	6193      	str	r3, [r2, #24]
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f043 0201 	orr.w	r2, r3, #1
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	609a      	str	r2, [r3, #8]
		//		Bit 1 CONT: Continuous conversion
		//		This bit is set and cleared by software. If set conversion takes place continuously till this bit is
		//		reset.
		//		0: Single conversion mode
		//		1: Continuous conversion mode
		ADCx->ADC_CR2 &=~(1<<1);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f023 0202 	bic.w	r2, r3, #2
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	609a      	str	r2, [r3, #8]
		//		Bit 2 CAL: A/D Calibration
		//		This bit is set by software to start the calibration. It is reset by hardware after calibration is
		//		complete.
		//		0: Calibration completed
		//		1: Enable calibratio
		ADCx->ADC_CR2 |=(1<<2);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	f043 0204 	orr.w	r2, r3, #4
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	609a      	str	r2, [r3, #8]
		while(((ADCx->ADC_CR2>>2)&1)){};
 8000794:	bf00      	nop
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f8      	bne.n	8000796 <ADC_INIT+0x62>


		flag_ADC_INIT=1;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <ADC_INIT+0xb8>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
		ADC2_Clock_DESABLE();
		flag_ADC_INIT=0;
	}


}
 80007aa:	e014      	b.n	80007d6 <ADC_INIT+0xa2>
		ADCx->ADC_CR2 &=~(1<<0);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f023 0201 	bic.w	r2, r3, #1
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	609a      	str	r2, [r3, #8]
		ADC1_Clock_DESABLE();
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <ADC_INIT+0xb0>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <ADC_INIT+0xb0>)
 80007be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c2:	60d3      	str	r3, [r2, #12]
		ADC2_Clock_DESABLE();
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <ADC_INIT+0xb0>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <ADC_INIT+0xb0>)
 80007ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ce:	60d3      	str	r3, [r2, #12]
		flag_ADC_INIT=0;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <ADC_INIT+0xb8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	40012400 	.word	0x40012400
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40012800 	.word	0x40012800
 80007ec:	2000008e 	.word	0x2000008e

080007f0 <ADC_READ>:





uint16_t ADC_READ(ADC_typeDef* ADCx,uint8_t ADC_pin){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
	if(flag_ADC_INIT){
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <ADC_READ+0x74>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d029      	beq.n	8000858 <ADC_READ+0x68>

		if(ADC_pin>0b0111)
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b07      	cmp	r3, #7
 8000808:	d907      	bls.n	800081a <ADC_READ+0x2a>
			pinmode(GPIOA, ADC_pin, GPIO_MODE_ANALOG);
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	b29b      	uxth	r3, r3
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4815      	ldr	r0, [pc, #84]	; (8000868 <ADC_READ+0x78>)
 8000814:	f7ff fdaa 	bl	800036c <pinmode>
 8000818:	e006      	b.n	8000828 <ADC_READ+0x38>
		else
			pinmode(GPIOB, ADC_pin, GPIO_MODE_ANALOG);
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	b29b      	uxth	r3, r3
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	4812      	ldr	r0, [pc, #72]	; (800086c <ADC_READ+0x7c>)
 8000824:	f7ff fda2 	bl	800036c <pinmode>


		//Bits 4:0 SQ1[4:0]: first conversion in regular sequence
		ADCx->ADC_SQR3 |=(ADC_pin<<0);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	431a      	orrs	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	f043 0201 	orr.w	r2, r3, #1
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	609a      	str	r2, [r3, #8]
		//		Bit 1 EOC: End of conversion
		//		This bit is set by hardware at the end of a group channel conversion (regular or injected). It is
		//		cleared by software or by reading the ADC_DR.
		//		0: Conversion is not complete
		//		1: Conversion complete
		while(! ((ADCx->ADC_SR>>1)&1) ){};
 8000840:	bf00      	nop
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	085b      	lsrs	r3, r3, #1
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0f8      	beq.n	8000842 <ADC_READ+0x52>

		return((uint16_t)ADCx->ADC_DR);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	b29b      	uxth	r3, r3
 8000856:	e000      	b.n	800085a <ADC_READ+0x6a>

	}
	else{
		return 0;
 8000858:	2300      	movs	r3, #0
	}


}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000008e 	.word	0x2000008e
 8000868:	40010800 	.word	0x40010800
 800086c:	40010c00 	.word	0x40010c00

08000870 <EXTI0_IRQHandler>:
	Enable_NVIC(pin);
}



void EXTI0_IRQHandler(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <EXTI0_IRQHandler+0x1c>)
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <EXTI0_IRQHandler+0x1c>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <EXTI0_IRQHandler+0x20>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4798      	blx	r3
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40010400 	.word	0x40010400
 8000890:	200000ac 	.word	0x200000ac

08000894 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <EXTI1_IRQHandler+0x1c>)
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <EXTI1_IRQHandler+0x1c>)
 800089e:	f043 0302 	orr.w	r3, r3, #2
 80008a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <EXTI1_IRQHandler+0x20>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	4798      	blx	r3

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40010400 	.word	0x40010400
 80008b4:	200000ac 	.word	0x200000ac

080008b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <EXTI2_IRQHandler+0x1c>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <EXTI2_IRQHandler+0x1c>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <EXTI2_IRQHandler+0x20>)
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	4798      	blx	r3
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010400 	.word	0x40010400
 80008d8:	200000ac 	.word	0x200000ac

080008dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <EXTI3_IRQHandler+0x1c>)
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <EXTI3_IRQHandler+0x1c>)
 80008e6:	f043 0308 	orr.w	r3, r3, #8
 80008ea:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <EXTI3_IRQHandler+0x20>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	4798      	blx	r3
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40010400 	.word	0x40010400
 80008fc:	200000ac 	.word	0x200000ac

08000900 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <EXTI4_IRQHandler+0x1c>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <EXTI4_IRQHandler+0x1c>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <EXTI4_IRQHandler+0x20>)
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	4798      	blx	r3
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40010400 	.word	0x40010400
 8000920:	200000ac 	.word	0x200000ac

08000924 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5]();  }
 8000928:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	f003 0320 	and.w	r3, r3, #32
 8000930:	2b00      	cmp	r3, #0
 8000932:	d008      	beq.n	8000946 <EXTI9_5_IRQHandler+0x22>
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 800093a:	f043 0320 	orr.w	r3, r3, #32
 800093e:	6153      	str	r3, [r2, #20]
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <EXTI9_5_IRQHandler+0xa4>)
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6]();  }
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094e:	2b00      	cmp	r3, #0
 8000950:	d008      	beq.n	8000964 <EXTI9_5_IRQHandler+0x40>
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 8000958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095c:	6153      	str	r3, [r2, #20]
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <EXTI9_5_IRQHandler+0xa4>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7]();  }
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096c:	2b00      	cmp	r3, #0
 800096e:	d008      	beq.n	8000982 <EXTI9_5_IRQHandler+0x5e>
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 8000976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097a:	6153      	str	r3, [r2, #20]
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <EXTI9_5_IRQHandler+0xa4>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8]();  }
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800098a:	2b00      	cmp	r3, #0
 800098c:	d008      	beq.n	80009a0 <EXTI9_5_IRQHandler+0x7c>
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 8000994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000998:	6153      	str	r3, [r2, #20]
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <EXTI9_5_IRQHandler+0xa4>)
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9]();  }
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d008      	beq.n	80009be <EXTI9_5_IRQHandler+0x9a>
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <EXTI9_5_IRQHandler+0xa0>)
 80009b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b6:	6153      	str	r3, [r2, #20]
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <EXTI9_5_IRQHandler+0xa4>)
 80009ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009bc:	4798      	blx	r3
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40010400 	.word	0x40010400
 80009c8:	200000ac 	.word	0x200000ac

080009cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10]();  }
 80009d0:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d008      	beq.n	80009ee <EXTI15_10_IRQHandler+0x22>
 80009dc:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a29      	ldr	r2, [pc, #164]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 80009e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e6:	6153      	str	r3, [r2, #20]
 80009e8:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <EXTI15_10_IRQHandler+0xc0>)
 80009ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ec:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11]();  }
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d008      	beq.n	8000a0c <EXTI15_10_IRQHandler+0x40>
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a04:	6153      	str	r3, [r2, #20]
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <EXTI15_10_IRQHandler+0xc0>)
 8000a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12]();  }
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d008      	beq.n	8000a2a <EXTI15_10_IRQHandler+0x5e>
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	4a1a      	ldr	r2, [pc, #104]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a22:	6153      	str	r3, [r2, #20]
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <EXTI15_10_IRQHandler+0xc0>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13]();  }
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d008      	beq.n	8000a48 <EXTI15_10_IRQHandler+0x7c>
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a40:	6153      	str	r3, [r2, #20]
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <EXTI15_10_IRQHandler+0xc0>)
 8000a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a46:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14]();  }
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d008      	beq.n	8000a66 <EXTI15_10_IRQHandler+0x9a>
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5e:	6153      	str	r3, [r2, #20]
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <EXTI15_10_IRQHandler+0xc0>)
 8000a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a64:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15]();  }
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d008      	beq.n	8000a84 <EXTI15_10_IRQHandler+0xb8>
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <EXTI15_10_IRQHandler+0xbc>)
 8000a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <EXTI15_10_IRQHandler+0xc0>)
 8000a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a82:	4798      	blx	r3

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40010400 	.word	0x40010400
 8000a8c:	200000ac 	.word	0x200000ac

08000a90 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
	//slave only todo
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	//slave only todo
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <USART_INIT>:
//===============================================================
void send_string (){

}
//===============================================================
void USART_INIT(USART_typeDef* USARTx,uint32_t mode,uint32_t word_length,uint32_t stop_bits,uint32_t baud_rate,uint32_t parity,uint32_t CLCK){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	603b      	str	r3, [r7, #0]

	if(USARTx ==USART1){
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4a55      	ldr	r2, [pc, #340]	; (8000c10 <USART_INIT+0x168>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d11f      	bne.n	8000afe <USART_INIT+0x56>
		USART1_Clock_Enable();
 8000abe:	4b55      	ldr	r3, [pc, #340]	; (8000c14 <USART_INIT+0x16c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a54      	ldr	r2, [pc, #336]	; (8000c14 <USART_INIT+0x16c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();
 8000aca:	4b52      	ldr	r3, [pc, #328]	; (8000c14 <USART_INIT+0x16c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	4a51      	ldr	r2, [pc, #324]	; (8000c14 <USART_INIT+0x16c>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6193      	str	r3, [r2, #24]
		NVIC_USART1_interrupt_Enable;
 8000ad6:	4b50      	ldr	r3, [pc, #320]	; (8000c18 <USART_INIT+0x170>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a4f      	ldr	r2, [pc, #316]	; (8000c18 <USART_INIT+0x170>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin9,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8000ae2:	2209      	movs	r2, #9
 8000ae4:	2109      	movs	r1, #9
 8000ae6:	484d      	ldr	r0, [pc, #308]	; (8000c1c <USART_INIT+0x174>)
 8000ae8:	f7ff fc40 	bl	800036c <pinmode>
		//RX
		pinmode(GPIOA, pin10,GPIO_MODE_INTPUT_AF);
 8000aec:	2204      	movs	r2, #4
 8000aee:	210a      	movs	r1, #10
 8000af0:	484a      	ldr	r0, [pc, #296]	; (8000c1c <USART_INIT+0x174>)
 8000af2:	f7ff fc3b 	bl	800036c <pinmode>
		arr[0]=USART1;
 8000af6:	4b4a      	ldr	r3, [pc, #296]	; (8000c20 <USART_INIT+0x178>)
 8000af8:	4a45      	ldr	r2, [pc, #276]	; (8000c10 <USART_INIT+0x168>)
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	e042      	b.n	8000b84 <USART_INIT+0xdc>
	}
	else if(USARTx ==USART2){
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4a48      	ldr	r2, [pc, #288]	; (8000c24 <USART_INIT+0x17c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d11f      	bne.n	8000b46 <USART_INIT+0x9e>
		USART2_Clock_Enable();
 8000b06:	4b43      	ldr	r3, [pc, #268]	; (8000c14 <USART_INIT+0x16c>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a42      	ldr	r2, [pc, #264]	; (8000c14 <USART_INIT+0x16c>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();
 8000b12:	4b40      	ldr	r3, [pc, #256]	; (8000c14 <USART_INIT+0x16c>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a3f      	ldr	r2, [pc, #252]	; (8000c14 <USART_INIT+0x16c>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6193      	str	r3, [r2, #24]
		NVIC_USART2_interrupt_Enable;
 8000b1e:	4b3e      	ldr	r3, [pc, #248]	; (8000c18 <USART_INIT+0x170>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a3d      	ldr	r2, [pc, #244]	; (8000c18 <USART_INIT+0x170>)
 8000b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b28:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin2,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8000b2a:	2209      	movs	r2, #9
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	483b      	ldr	r0, [pc, #236]	; (8000c1c <USART_INIT+0x174>)
 8000b30:	f7ff fc1c 	bl	800036c <pinmode>
		//RX
		pinmode(GPIOA, pin3,GPIO_MODE_INTPUT_AF);
 8000b34:	2204      	movs	r2, #4
 8000b36:	2103      	movs	r1, #3
 8000b38:	4838      	ldr	r0, [pc, #224]	; (8000c1c <USART_INIT+0x174>)
 8000b3a:	f7ff fc17 	bl	800036c <pinmode>
		arr[1]=USART2;
 8000b3e:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <USART_INIT+0x178>)
 8000b40:	4a38      	ldr	r2, [pc, #224]	; (8000c24 <USART_INIT+0x17c>)
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	e01e      	b.n	8000b84 <USART_INIT+0xdc>
	}
	else{
		USART3_Clock_Enable();
 8000b46:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <USART_INIT+0x16c>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a32      	ldr	r2, [pc, #200]	; (8000c14 <USART_INIT+0x16c>)
 8000b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b50:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 8000b52:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <USART_INIT+0x16c>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4a2f      	ldr	r2, [pc, #188]	; (8000c14 <USART_INIT+0x16c>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6193      	str	r3, [r2, #24]
		NVIC_USART3_interrupt_Enable;
 8000b5e:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <USART_INIT+0x170>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a2d      	ldr	r2, [pc, #180]	; (8000c18 <USART_INIT+0x170>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8000b6a:	2209      	movs	r2, #9
 8000b6c:	210a      	movs	r1, #10
 8000b6e:	482e      	ldr	r0, [pc, #184]	; (8000c28 <USART_INIT+0x180>)
 8000b70:	f7ff fbfc 	bl	800036c <pinmode>
		//RX
		pinmode(GPIOB, pin11,GPIO_MODE_INTPUT_AF);
 8000b74:	2204      	movs	r2, #4
 8000b76:	210b      	movs	r1, #11
 8000b78:	482b      	ldr	r0, [pc, #172]	; (8000c28 <USART_INIT+0x180>)
 8000b7a:	f7ff fbf7 	bl	800036c <pinmode>
		arr[2]=USART3;
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <USART_INIT+0x178>)
 8000b80:	4a2a      	ldr	r2, [pc, #168]	; (8000c2c <USART_INIT+0x184>)
 8000b82:	609a      	str	r2, [r3, #8]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enabled
	USARTx->USART_CR1 |=(1<<13);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	60da      	str	r2, [r3, #12]
	//STEP 2
	//	Bit 12 M: Word length
	//	This bit determines the word length. It is set or cleared by software.
	//	0: 1 Start bit, 8 Data bits, n Stop bit
	//	1: 1 Start bit, 9 Data bits, n Stop bit
	USARTx->USART_CR1 |=word_length;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	431a      	orrs	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	60da      	str	r2, [r3, #12]
	//	These bits are used for programming the stop bits.
	//	00: 1 Stop bit
	//	01: 0.5 Stop bit
	//	10: 2 Stop bits
	//	11: 1.5 Stop bit
	USARTx->USART_CR2 |=stop_bits;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	691a      	ldr	r2, [r3, #16]
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
	//	2: When TE is set there is a 1 bit-time delay before the transmission starts.
	//	Bit 2 RE: Receiver enable
	//	This bit enables the receiver. It is set and cleared by software.
	//	0: Receiver is disabled
	//	1: Receiver is enabled and begins searching for a start bit
	USARTx->USART_CR1 |=mode;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	60da      	str	r2, [r3, #12]
	//	Bit 9 PS: Parity selection
	//	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	//	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	//	0: Even parity
	//	1: Odd parity
	USARTx->USART_CR1 |=parity;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	60da      	str	r2, [r3, #12]
	//	Bits 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV
	//	These 12 bits define the mantissa of the USART Divider (USARTDIV)
	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV
	//	These 4 bits define the fraction of the USART Divider (USARTDIV)

	uint16_t DIV_Mantissa =CLCK /(baud_rate*16);
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	82fb      	strh	r3, [r7, #22]
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <USART_INIT+0x188>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	8afa      	ldrh	r2, [r7, #22]
 8000be0:	2164      	movs	r1, #100	; 0x64
 8000be2:	fb01 f202 	mul.w	r2, r1, r2
 8000be6:	1a9b      	subs	r3, r3, r2
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <USART_INIT+0x188>)
 8000bec:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf0:	095b      	lsrs	r3, r3, #5
 8000bf2:	82bb      	strh	r3, [r7, #20]
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	011a      	lsls	r2, r3, #4
 8000bf8:	8abb      	ldrh	r3, [r7, #20]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	461a      	mov	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	609a      	str	r2, [r3, #8]


}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40013800 	.word	0x40013800
 8000c14:	40021000 	.word	0x40021000
 8000c18:	e000e104 	.word	0xe000e104
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	200000e8 	.word	0x200000e8
 8000c24:	40004400 	.word	0x40004400
 8000c28:	40010c00 	.word	0x40010c00
 8000c2c:	40004800 	.word	0x40004800
 8000c30:	51eb851f 	.word	0x51eb851f

08000c34 <USART_SEND>:
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	0b1b      	lsrs	r3, r3, #12
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d106      	bne.n	8000c5a <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 8000c58:	e004      	b.n	8000c64 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	605a      	str	r2, [r3, #4]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
	...

08000c70 <USART_SEND_STRING>:
		*data=arr_data_RES[2];
	}

}

void USART_SEND_STRING(USART_typeDef* USARTx,char* data){
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <USART_SEND_STRING+0x5c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d105      	bne.n	8000c8e <USART_SEND_STRING+0x1e>
		arr_data[0]=data;
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <USART_SEND_STRING+0x60>)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	6013      	str	r3, [r2, #0]
		arr[0]=USART1;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <USART_SEND_STRING+0x64>)
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <USART_SEND_STRING+0x5c>)
 8000c8c:	601a      	str	r2, [r3, #0]
	}
	if(USARTx==USART2){
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <USART_SEND_STRING+0x68>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d105      	bne.n	8000ca2 <USART_SEND_STRING+0x32>
		arr_data[1]=data;
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <USART_SEND_STRING+0x60>)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	6053      	str	r3, [r2, #4]
		arr[1]=USART2;
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <USART_SEND_STRING+0x64>)
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <USART_SEND_STRING+0x68>)
 8000ca0:	605a      	str	r2, [r3, #4]
	}
	if(USARTx==USART3){
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <USART_SEND_STRING+0x6c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d105      	bne.n	8000cb6 <USART_SEND_STRING+0x46>
		arr_data[2]=data;
 8000caa:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <USART_SEND_STRING+0x60>)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	6093      	str	r3, [r2, #8]
		arr[2]=USART3;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <USART_SEND_STRING+0x64>)
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <USART_SEND_STRING+0x6c>)
 8000cb4:	609a      	str	r2, [r3, #8]
	}
	//Bit 7 TXEIE: TXE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
	USARTx->USART_CR1 |=Transmit_data_register_empty;//open flage of interrupt
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60da      	str	r2, [r3, #12]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	40013800 	.word	0x40013800
 8000cd0:	200000fc 	.word	0x200000fc
 8000cd4:	200000e8 	.word	0x200000e8
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	40004800 	.word	0x40004800

08000ce0 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8000ce6:	4b56      	ldr	r3, [pc, #344]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	09db      	lsrs	r3, r3, #7
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d122      	bne.n	8000d3c <USART1_IRQHandler+0x5c>
 8000cf6:	4b52      	ldr	r3, [pc, #328]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	09db      	lsrs	r3, r3, #7
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d11a      	bne.n	8000d3c <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 8000d06:	4b4f      	ldr	r3, [pc, #316]	; (8000e44 <USART1_IRQHandler+0x164>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00d      	beq.n	8000d2c <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],arr_data[0]);
 8000d10:	4b4b      	ldr	r3, [pc, #300]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b4b      	ldr	r3, [pc, #300]	; (8000e44 <USART1_IRQHandler+0x164>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	f7ff ff8a 	bl	8000c34 <USART_SEND>
			++arr_data[0];
 8000d20:	4b48      	ldr	r3, [pc, #288]	; (8000e44 <USART1_IRQHandler+0x164>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	4a47      	ldr	r2, [pc, #284]	; (8000e44 <USART1_IRQHandler+0x164>)
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e007      	b.n	8000d3c <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 8000d2c:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d3a:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 8000d3c:	4b40      	ldr	r3, [pc, #256]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d166      	bne.n	8000e1a <USART1_IRQHandler+0x13a>
 8000d4c:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d15e      	bne.n	8000e1a <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 8000d5c:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	0b1b      	lsrs	r3, r3, #12
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d117      	bne.n	8000d9c <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8000d6c:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	0a9b      	lsrs	r3, r3, #10
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d108      	bne.n	8000d8e <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8000d7c:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <USART1_IRQHandler+0x168>)
 8000d8a:	801a      	strh	r2, [r3, #0]
 8000d8c:	e020      	b.n	8000dd0 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <USART1_IRQHandler+0x168>)
 8000d98:	801a      	strh	r2, [r3, #0]
 8000d9a:	e019      	b.n	8000dd0 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8000d9c:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	0a9b      	lsrs	r3, r3, #10
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d109      	bne.n	8000dc0 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <USART1_IRQHandler+0x168>)
 8000dbc:	801a      	strh	r2, [r3, #0]
 8000dbe:	e007      	b.n	8000dd0 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <USART1_IRQHandler+0x168>)
 8000dce:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <USART1_IRQHandler+0x16c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	e002      	b.n	8000de2 <USART1_IRQHandler+0x102>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3301      	adds	r3, #1
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000de8:	4293      	cmp	r3, r2
 8000dea:	ddf7      	ble.n	8000ddc <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0220 	bic.w	r2, r2, #32
 8000dfa:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <USART1_IRQHandler+0x170>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 0220 	bic.w	r2, r2, #32
 8000e18:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <USART1_IRQHandler+0x170>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <USART1_IRQHandler+0x160>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0220 	bic.w	r2, r2, #32
 8000e36:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200000e8 	.word	0x200000e8
 8000e44:	200000fc 	.word	0x200000fc
 8000e48:	200000f4 	.word	0x200000f4
 8000e4c:	20000108 	.word	0x20000108
 8000e50:	40013800 	.word	0x40013800

08000e54 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8000e5a:	4b56      	ldr	r3, [pc, #344]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	09db      	lsrs	r3, r3, #7
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d122      	bne.n	8000eb0 <USART2_IRQHandler+0x5c>
 8000e6a:	4b52      	ldr	r3, [pc, #328]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	09db      	lsrs	r3, r3, #7
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d11a      	bne.n	8000eb0 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 8000e7a:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <USART2_IRQHandler+0x164>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d00d      	beq.n	8000ea0 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],arr_data[1]);
 8000e84:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <USART2_IRQHandler+0x164>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4610      	mov	r0, r2
 8000e90:	f7ff fed0 	bl	8000c34 <USART_SEND>
			++arr_data[1];
 8000e94:	4b48      	ldr	r3, [pc, #288]	; (8000fb8 <USART2_IRQHandler+0x164>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a47      	ldr	r2, [pc, #284]	; (8000fb8 <USART2_IRQHandler+0x164>)
 8000e9c:	6053      	str	r3, [r2, #4]
 8000e9e:	e007      	b.n	8000eb0 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8000ea0:	4b44      	ldr	r3, [pc, #272]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eae:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8000eb0:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d166      	bne.n	8000f8e <USART2_IRQHandler+0x13a>
 8000ec0:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d15e      	bne.n	8000f8e <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	0b1b      	lsrs	r3, r3, #12
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d117      	bne.n	8000f10 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8000ee0:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	0a9b      	lsrs	r3, r3, #10
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d108      	bne.n	8000f02 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <USART2_IRQHandler+0x168>)
 8000efe:	805a      	strh	r2, [r3, #2]
 8000f00:	e020      	b.n	8000f44 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 8000f02:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <USART2_IRQHandler+0x168>)
 8000f0c:	805a      	strh	r2, [r3, #2]
 8000f0e:	e019      	b.n	8000f44 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8000f10:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	0a9b      	lsrs	r3, r3, #10
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d109      	bne.n	8000f34 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8000f20:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <USART2_IRQHandler+0x168>)
 8000f30:	805a      	strh	r2, [r3, #2]
 8000f32:	e007      	b.n	8000f44 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <USART2_IRQHandler+0x168>)
 8000f42:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <USART2_IRQHandler+0x16c>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	e002      	b.n	8000f56 <USART2_IRQHandler+0x102>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3301      	adds	r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	ddf7      	ble.n	8000f50 <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f022 0220 	bic.w	r2, r2, #32
 8000f6e:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <USART2_IRQHandler+0x170>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f022 0220 	bic.w	r2, r2, #32
 8000f8c:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <USART2_IRQHandler+0x170>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <USART2_IRQHandler+0x160>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f022 0220 	bic.w	r2, r2, #32
 8000faa:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000e8 	.word	0x200000e8
 8000fb8:	200000fc 	.word	0x200000fc
 8000fbc:	200000f4 	.word	0x200000f4
 8000fc0:	20000108 	.word	0x20000108
 8000fc4:	40004400 	.word	0x40004400

08000fc8 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8000fce:	4b56      	ldr	r3, [pc, #344]	; (8001128 <USART3_IRQHandler+0x160>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	09db      	lsrs	r3, r3, #7
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d122      	bne.n	8001024 <USART3_IRQHandler+0x5c>
 8000fde:	4b52      	ldr	r3, [pc, #328]	; (8001128 <USART3_IRQHandler+0x160>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	09db      	lsrs	r3, r3, #7
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d11a      	bne.n	8001024 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 8000fee:	4b4f      	ldr	r3, [pc, #316]	; (800112c <USART3_IRQHandler+0x164>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00d      	beq.n	8001014 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],arr_data[2]);
 8000ff8:	4b4b      	ldr	r3, [pc, #300]	; (8001128 <USART3_IRQHandler+0x160>)
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	; (800112c <USART3_IRQHandler+0x164>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4619      	mov	r1, r3
 8001002:	4610      	mov	r0, r2
 8001004:	f7ff fe16 	bl	8000c34 <USART_SEND>
			++arr_data[2];
 8001008:	4b48      	ldr	r3, [pc, #288]	; (800112c <USART3_IRQHandler+0x164>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	3301      	adds	r3, #1
 800100e:	4a47      	ldr	r2, [pc, #284]	; (800112c <USART3_IRQHandler+0x164>)
 8001010:	6093      	str	r3, [r2, #8]
 8001012:	e007      	b.n	8001024 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 8001014:	4b44      	ldr	r3, [pc, #272]	; (8001128 <USART3_IRQHandler+0x160>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	4b43      	ldr	r3, [pc, #268]	; (8001128 <USART3_IRQHandler+0x160>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001022:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 8001024:	4b40      	ldr	r3, [pc, #256]	; (8001128 <USART3_IRQHandler+0x160>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b01      	cmp	r3, #1
 8001032:	d166      	bne.n	8001102 <USART3_IRQHandler+0x13a>
 8001034:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <USART3_IRQHandler+0x160>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b01      	cmp	r3, #1
 8001042:	d15e      	bne.n	8001102 <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 8001044:	4b38      	ldr	r3, [pc, #224]	; (8001128 <USART3_IRQHandler+0x160>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	0b1b      	lsrs	r3, r3, #12
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b01      	cmp	r3, #1
 8001052:	d117      	bne.n	8001084 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8001054:	4b34      	ldr	r3, [pc, #208]	; (8001128 <USART3_IRQHandler+0x160>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	0a9b      	lsrs	r3, r3, #10
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	d108      	bne.n	8001076 <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <USART3_IRQHandler+0x160>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	b29b      	uxth	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	b29a      	uxth	r2, r3
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <USART3_IRQHandler+0x168>)
 8001072:	809a      	strh	r2, [r3, #4]
 8001074:	e020      	b.n	80010b8 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <USART3_IRQHandler+0x160>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <USART3_IRQHandler+0x168>)
 8001080:	809a      	strh	r2, [r3, #4]
 8001082:	e019      	b.n	80010b8 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <USART3_IRQHandler+0x160>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	0a9b      	lsrs	r3, r3, #10
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b01      	cmp	r3, #1
 8001092:	d109      	bne.n	80010a8 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <USART3_IRQHandler+0x160>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	b29b      	uxth	r3, r3
 800109c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <USART3_IRQHandler+0x168>)
 80010a4:	809a      	strh	r2, [r3, #4]
 80010a6:	e007      	b.n	80010b8 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <USART3_IRQHandler+0x160>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <USART3_IRQHandler+0x168>)
 80010b6:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <USART3_IRQHandler+0x16c>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	e002      	b.n	80010ca <USART3_IRQHandler+0x102>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3301      	adds	r3, #1
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80010d0:	4293      	cmp	r3, r2
 80010d2:	ddf7      	ble.n	80010c4 <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <USART3_IRQHandler+0x160>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <USART3_IRQHandler+0x160>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f022 0220 	bic.w	r2, r2, #32
 80010e2:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <USART3_IRQHandler+0x160>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <USART3_IRQHandler+0x170>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <USART3_IRQHandler+0x160>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <USART3_IRQHandler+0x160>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f022 0220 	bic.w	r2, r2, #32
 8001100:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <USART3_IRQHandler+0x160>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <USART3_IRQHandler+0x170>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	b29b      	uxth	r3, r3
 800110e:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <USART3_IRQHandler+0x160>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <USART3_IRQHandler+0x160>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f022 0220 	bic.w	r2, r2, #32
 800111e:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200000e8 	.word	0x200000e8
 800112c:	200000fc 	.word	0x200000fc
 8001130:	200000f4 	.word	0x200000f4
 8001134:	20000108 	.word	0x20000108
 8001138:	40004800 	.word	0x40004800

0800113c <__errno>:
 800113c:	4b01      	ldr	r3, [pc, #4]	; (8001144 <__errno+0x8>)
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008

08001148 <__libc_init_array>:
 8001148:	b570      	push	{r4, r5, r6, lr}
 800114a:	2500      	movs	r5, #0
 800114c:	4e0c      	ldr	r6, [pc, #48]	; (8001180 <__libc_init_array+0x38>)
 800114e:	4c0d      	ldr	r4, [pc, #52]	; (8001184 <__libc_init_array+0x3c>)
 8001150:	1ba4      	subs	r4, r4, r6
 8001152:	10a4      	asrs	r4, r4, #2
 8001154:	42a5      	cmp	r5, r4
 8001156:	d109      	bne.n	800116c <__libc_init_array+0x24>
 8001158:	f000 fc2c 	bl	80019b4 <_init>
 800115c:	2500      	movs	r5, #0
 800115e:	4e0a      	ldr	r6, [pc, #40]	; (8001188 <__libc_init_array+0x40>)
 8001160:	4c0a      	ldr	r4, [pc, #40]	; (800118c <__libc_init_array+0x44>)
 8001162:	1ba4      	subs	r4, r4, r6
 8001164:	10a4      	asrs	r4, r4, #2
 8001166:	42a5      	cmp	r5, r4
 8001168:	d105      	bne.n	8001176 <__libc_init_array+0x2e>
 800116a:	bd70      	pop	{r4, r5, r6, pc}
 800116c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001170:	4798      	blx	r3
 8001172:	3501      	adds	r5, #1
 8001174:	e7ee      	b.n	8001154 <__libc_init_array+0xc>
 8001176:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800117a:	4798      	blx	r3
 800117c:	3501      	adds	r5, #1
 800117e:	e7f2      	b.n	8001166 <__libc_init_array+0x1e>
 8001180:	08001a08 	.word	0x08001a08
 8001184:	08001a08 	.word	0x08001a08
 8001188:	08001a08 	.word	0x08001a08
 800118c:	08001a0c 	.word	0x08001a0c

08001190 <siprintf>:
 8001190:	b40e      	push	{r1, r2, r3}
 8001192:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001196:	b500      	push	{lr}
 8001198:	b09c      	sub	sp, #112	; 0x70
 800119a:	ab1d      	add	r3, sp, #116	; 0x74
 800119c:	9002      	str	r0, [sp, #8]
 800119e:	9006      	str	r0, [sp, #24]
 80011a0:	9107      	str	r1, [sp, #28]
 80011a2:	9104      	str	r1, [sp, #16]
 80011a4:	4808      	ldr	r0, [pc, #32]	; (80011c8 <siprintf+0x38>)
 80011a6:	4909      	ldr	r1, [pc, #36]	; (80011cc <siprintf+0x3c>)
 80011a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80011ac:	9105      	str	r1, [sp, #20]
 80011ae:	6800      	ldr	r0, [r0, #0]
 80011b0:	a902      	add	r1, sp, #8
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	f000 f8e6 	bl	8001384 <_svfiprintf_r>
 80011b8:	2200      	movs	r2, #0
 80011ba:	9b02      	ldr	r3, [sp, #8]
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	b01c      	add	sp, #112	; 0x70
 80011c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80011c4:	b003      	add	sp, #12
 80011c6:	4770      	bx	lr
 80011c8:	20000008 	.word	0x20000008
 80011cc:	ffff0208 	.word	0xffff0208

080011d0 <_malloc_r>:
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	1ccd      	adds	r5, r1, #3
 80011d4:	f025 0503 	bic.w	r5, r5, #3
 80011d8:	3508      	adds	r5, #8
 80011da:	2d0c      	cmp	r5, #12
 80011dc:	bf38      	it	cc
 80011de:	250c      	movcc	r5, #12
 80011e0:	2d00      	cmp	r5, #0
 80011e2:	4606      	mov	r6, r0
 80011e4:	db01      	blt.n	80011ea <_malloc_r+0x1a>
 80011e6:	42a9      	cmp	r1, r5
 80011e8:	d903      	bls.n	80011f2 <_malloc_r+0x22>
 80011ea:	230c      	movs	r3, #12
 80011ec:	6033      	str	r3, [r6, #0]
 80011ee:	2000      	movs	r0, #0
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
 80011f2:	f000 fb89 	bl	8001908 <__malloc_lock>
 80011f6:	4a21      	ldr	r2, [pc, #132]	; (800127c <_malloc_r+0xac>)
 80011f8:	6814      	ldr	r4, [r2, #0]
 80011fa:	4621      	mov	r1, r4
 80011fc:	b991      	cbnz	r1, 8001224 <_malloc_r+0x54>
 80011fe:	4c20      	ldr	r4, [pc, #128]	; (8001280 <_malloc_r+0xb0>)
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	b91b      	cbnz	r3, 800120c <_malloc_r+0x3c>
 8001204:	4630      	mov	r0, r6
 8001206:	f000 fb3d 	bl	8001884 <_sbrk_r>
 800120a:	6020      	str	r0, [r4, #0]
 800120c:	4629      	mov	r1, r5
 800120e:	4630      	mov	r0, r6
 8001210:	f000 fb38 	bl	8001884 <_sbrk_r>
 8001214:	1c43      	adds	r3, r0, #1
 8001216:	d124      	bne.n	8001262 <_malloc_r+0x92>
 8001218:	230c      	movs	r3, #12
 800121a:	4630      	mov	r0, r6
 800121c:	6033      	str	r3, [r6, #0]
 800121e:	f000 fb74 	bl	800190a <__malloc_unlock>
 8001222:	e7e4      	b.n	80011ee <_malloc_r+0x1e>
 8001224:	680b      	ldr	r3, [r1, #0]
 8001226:	1b5b      	subs	r3, r3, r5
 8001228:	d418      	bmi.n	800125c <_malloc_r+0x8c>
 800122a:	2b0b      	cmp	r3, #11
 800122c:	d90f      	bls.n	800124e <_malloc_r+0x7e>
 800122e:	600b      	str	r3, [r1, #0]
 8001230:	18cc      	adds	r4, r1, r3
 8001232:	50cd      	str	r5, [r1, r3]
 8001234:	4630      	mov	r0, r6
 8001236:	f000 fb68 	bl	800190a <__malloc_unlock>
 800123a:	f104 000b 	add.w	r0, r4, #11
 800123e:	1d23      	adds	r3, r4, #4
 8001240:	f020 0007 	bic.w	r0, r0, #7
 8001244:	1ac3      	subs	r3, r0, r3
 8001246:	d0d3      	beq.n	80011f0 <_malloc_r+0x20>
 8001248:	425a      	negs	r2, r3
 800124a:	50e2      	str	r2, [r4, r3]
 800124c:	e7d0      	b.n	80011f0 <_malloc_r+0x20>
 800124e:	684b      	ldr	r3, [r1, #4]
 8001250:	428c      	cmp	r4, r1
 8001252:	bf16      	itet	ne
 8001254:	6063      	strne	r3, [r4, #4]
 8001256:	6013      	streq	r3, [r2, #0]
 8001258:	460c      	movne	r4, r1
 800125a:	e7eb      	b.n	8001234 <_malloc_r+0x64>
 800125c:	460c      	mov	r4, r1
 800125e:	6849      	ldr	r1, [r1, #4]
 8001260:	e7cc      	b.n	80011fc <_malloc_r+0x2c>
 8001262:	1cc4      	adds	r4, r0, #3
 8001264:	f024 0403 	bic.w	r4, r4, #3
 8001268:	42a0      	cmp	r0, r4
 800126a:	d005      	beq.n	8001278 <_malloc_r+0xa8>
 800126c:	1a21      	subs	r1, r4, r0
 800126e:	4630      	mov	r0, r6
 8001270:	f000 fb08 	bl	8001884 <_sbrk_r>
 8001274:	3001      	adds	r0, #1
 8001276:	d0cf      	beq.n	8001218 <_malloc_r+0x48>
 8001278:	6025      	str	r5, [r4, #0]
 800127a:	e7db      	b.n	8001234 <_malloc_r+0x64>
 800127c:	20000090 	.word	0x20000090
 8001280:	20000094 	.word	0x20000094

08001284 <_realloc_r>:
 8001284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001286:	4607      	mov	r7, r0
 8001288:	4614      	mov	r4, r2
 800128a:	460e      	mov	r6, r1
 800128c:	b921      	cbnz	r1, 8001298 <_realloc_r+0x14>
 800128e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001292:	4611      	mov	r1, r2
 8001294:	f7ff bf9c 	b.w	80011d0 <_malloc_r>
 8001298:	b922      	cbnz	r2, 80012a4 <_realloc_r+0x20>
 800129a:	f000 fb37 	bl	800190c <_free_r>
 800129e:	4625      	mov	r5, r4
 80012a0:	4628      	mov	r0, r5
 80012a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a4:	f000 fb7e 	bl	80019a4 <_malloc_usable_size_r>
 80012a8:	42a0      	cmp	r0, r4
 80012aa:	d20f      	bcs.n	80012cc <_realloc_r+0x48>
 80012ac:	4621      	mov	r1, r4
 80012ae:	4638      	mov	r0, r7
 80012b0:	f7ff ff8e 	bl	80011d0 <_malloc_r>
 80012b4:	4605      	mov	r5, r0
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d0f2      	beq.n	80012a0 <_realloc_r+0x1c>
 80012ba:	4631      	mov	r1, r6
 80012bc:	4622      	mov	r2, r4
 80012be:	f000 faff 	bl	80018c0 <memcpy>
 80012c2:	4631      	mov	r1, r6
 80012c4:	4638      	mov	r0, r7
 80012c6:	f000 fb21 	bl	800190c <_free_r>
 80012ca:	e7e9      	b.n	80012a0 <_realloc_r+0x1c>
 80012cc:	4635      	mov	r5, r6
 80012ce:	e7e7      	b.n	80012a0 <_realloc_r+0x1c>

080012d0 <__ssputs_r>:
 80012d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012d4:	688e      	ldr	r6, [r1, #8]
 80012d6:	4682      	mov	sl, r0
 80012d8:	429e      	cmp	r6, r3
 80012da:	460c      	mov	r4, r1
 80012dc:	4690      	mov	r8, r2
 80012de:	4699      	mov	r9, r3
 80012e0:	d837      	bhi.n	8001352 <__ssputs_r+0x82>
 80012e2:	898a      	ldrh	r2, [r1, #12]
 80012e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80012e8:	d031      	beq.n	800134e <__ssputs_r+0x7e>
 80012ea:	2302      	movs	r3, #2
 80012ec:	6825      	ldr	r5, [r4, #0]
 80012ee:	6909      	ldr	r1, [r1, #16]
 80012f0:	1a6f      	subs	r7, r5, r1
 80012f2:	6965      	ldr	r5, [r4, #20]
 80012f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80012f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80012fc:	f109 0301 	add.w	r3, r9, #1
 8001300:	443b      	add	r3, r7
 8001302:	429d      	cmp	r5, r3
 8001304:	bf38      	it	cc
 8001306:	461d      	movcc	r5, r3
 8001308:	0553      	lsls	r3, r2, #21
 800130a:	d530      	bpl.n	800136e <__ssputs_r+0x9e>
 800130c:	4629      	mov	r1, r5
 800130e:	f7ff ff5f 	bl	80011d0 <_malloc_r>
 8001312:	4606      	mov	r6, r0
 8001314:	b950      	cbnz	r0, 800132c <__ssputs_r+0x5c>
 8001316:	230c      	movs	r3, #12
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f8ca 3000 	str.w	r3, [sl]
 8001320:	89a3      	ldrh	r3, [r4, #12]
 8001322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001326:	81a3      	strh	r3, [r4, #12]
 8001328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800132c:	463a      	mov	r2, r7
 800132e:	6921      	ldr	r1, [r4, #16]
 8001330:	f000 fac6 	bl	80018c0 <memcpy>
 8001334:	89a3      	ldrh	r3, [r4, #12]
 8001336:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800133a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133e:	81a3      	strh	r3, [r4, #12]
 8001340:	6126      	str	r6, [r4, #16]
 8001342:	443e      	add	r6, r7
 8001344:	6026      	str	r6, [r4, #0]
 8001346:	464e      	mov	r6, r9
 8001348:	6165      	str	r5, [r4, #20]
 800134a:	1bed      	subs	r5, r5, r7
 800134c:	60a5      	str	r5, [r4, #8]
 800134e:	454e      	cmp	r6, r9
 8001350:	d900      	bls.n	8001354 <__ssputs_r+0x84>
 8001352:	464e      	mov	r6, r9
 8001354:	4632      	mov	r2, r6
 8001356:	4641      	mov	r1, r8
 8001358:	6820      	ldr	r0, [r4, #0]
 800135a:	f000 fabc 	bl	80018d6 <memmove>
 800135e:	68a3      	ldr	r3, [r4, #8]
 8001360:	2000      	movs	r0, #0
 8001362:	1b9b      	subs	r3, r3, r6
 8001364:	60a3      	str	r3, [r4, #8]
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	441e      	add	r6, r3
 800136a:	6026      	str	r6, [r4, #0]
 800136c:	e7dc      	b.n	8001328 <__ssputs_r+0x58>
 800136e:	462a      	mov	r2, r5
 8001370:	f7ff ff88 	bl	8001284 <_realloc_r>
 8001374:	4606      	mov	r6, r0
 8001376:	2800      	cmp	r0, #0
 8001378:	d1e2      	bne.n	8001340 <__ssputs_r+0x70>
 800137a:	6921      	ldr	r1, [r4, #16]
 800137c:	4650      	mov	r0, sl
 800137e:	f000 fac5 	bl	800190c <_free_r>
 8001382:	e7c8      	b.n	8001316 <__ssputs_r+0x46>

08001384 <_svfiprintf_r>:
 8001384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001388:	461d      	mov	r5, r3
 800138a:	898b      	ldrh	r3, [r1, #12]
 800138c:	b09d      	sub	sp, #116	; 0x74
 800138e:	061f      	lsls	r7, r3, #24
 8001390:	4680      	mov	r8, r0
 8001392:	460c      	mov	r4, r1
 8001394:	4616      	mov	r6, r2
 8001396:	d50f      	bpl.n	80013b8 <_svfiprintf_r+0x34>
 8001398:	690b      	ldr	r3, [r1, #16]
 800139a:	b96b      	cbnz	r3, 80013b8 <_svfiprintf_r+0x34>
 800139c:	2140      	movs	r1, #64	; 0x40
 800139e:	f7ff ff17 	bl	80011d0 <_malloc_r>
 80013a2:	6020      	str	r0, [r4, #0]
 80013a4:	6120      	str	r0, [r4, #16]
 80013a6:	b928      	cbnz	r0, 80013b4 <_svfiprintf_r+0x30>
 80013a8:	230c      	movs	r3, #12
 80013aa:	f8c8 3000 	str.w	r3, [r8]
 80013ae:	f04f 30ff 	mov.w	r0, #4294967295
 80013b2:	e0c8      	b.n	8001546 <_svfiprintf_r+0x1c2>
 80013b4:	2340      	movs	r3, #64	; 0x40
 80013b6:	6163      	str	r3, [r4, #20]
 80013b8:	2300      	movs	r3, #0
 80013ba:	9309      	str	r3, [sp, #36]	; 0x24
 80013bc:	2320      	movs	r3, #32
 80013be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80013c2:	2330      	movs	r3, #48	; 0x30
 80013c4:	f04f 0b01 	mov.w	fp, #1
 80013c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80013cc:	9503      	str	r5, [sp, #12]
 80013ce:	4637      	mov	r7, r6
 80013d0:	463d      	mov	r5, r7
 80013d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80013d6:	b10b      	cbz	r3, 80013dc <_svfiprintf_r+0x58>
 80013d8:	2b25      	cmp	r3, #37	; 0x25
 80013da:	d13e      	bne.n	800145a <_svfiprintf_r+0xd6>
 80013dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80013e0:	d00b      	beq.n	80013fa <_svfiprintf_r+0x76>
 80013e2:	4653      	mov	r3, sl
 80013e4:	4632      	mov	r2, r6
 80013e6:	4621      	mov	r1, r4
 80013e8:	4640      	mov	r0, r8
 80013ea:	f7ff ff71 	bl	80012d0 <__ssputs_r>
 80013ee:	3001      	adds	r0, #1
 80013f0:	f000 80a4 	beq.w	800153c <_svfiprintf_r+0x1b8>
 80013f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013f6:	4453      	add	r3, sl
 80013f8:	9309      	str	r3, [sp, #36]	; 0x24
 80013fa:	783b      	ldrb	r3, [r7, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 809d 	beq.w	800153c <_svfiprintf_r+0x1b8>
 8001402:	2300      	movs	r3, #0
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800140c:	9304      	str	r3, [sp, #16]
 800140e:	9307      	str	r3, [sp, #28]
 8001410:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001414:	931a      	str	r3, [sp, #104]	; 0x68
 8001416:	462f      	mov	r7, r5
 8001418:	2205      	movs	r2, #5
 800141a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800141e:	4850      	ldr	r0, [pc, #320]	; (8001560 <_svfiprintf_r+0x1dc>)
 8001420:	f000 fa40 	bl	80018a4 <memchr>
 8001424:	9b04      	ldr	r3, [sp, #16]
 8001426:	b9d0      	cbnz	r0, 800145e <_svfiprintf_r+0xda>
 8001428:	06d9      	lsls	r1, r3, #27
 800142a:	bf44      	itt	mi
 800142c:	2220      	movmi	r2, #32
 800142e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001432:	071a      	lsls	r2, r3, #28
 8001434:	bf44      	itt	mi
 8001436:	222b      	movmi	r2, #43	; 0x2b
 8001438:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800143c:	782a      	ldrb	r2, [r5, #0]
 800143e:	2a2a      	cmp	r2, #42	; 0x2a
 8001440:	d015      	beq.n	800146e <_svfiprintf_r+0xea>
 8001442:	462f      	mov	r7, r5
 8001444:	2000      	movs	r0, #0
 8001446:	250a      	movs	r5, #10
 8001448:	9a07      	ldr	r2, [sp, #28]
 800144a:	4639      	mov	r1, r7
 800144c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001450:	3b30      	subs	r3, #48	; 0x30
 8001452:	2b09      	cmp	r3, #9
 8001454:	d94d      	bls.n	80014f2 <_svfiprintf_r+0x16e>
 8001456:	b1b8      	cbz	r0, 8001488 <_svfiprintf_r+0x104>
 8001458:	e00f      	b.n	800147a <_svfiprintf_r+0xf6>
 800145a:	462f      	mov	r7, r5
 800145c:	e7b8      	b.n	80013d0 <_svfiprintf_r+0x4c>
 800145e:	4a40      	ldr	r2, [pc, #256]	; (8001560 <_svfiprintf_r+0x1dc>)
 8001460:	463d      	mov	r5, r7
 8001462:	1a80      	subs	r0, r0, r2
 8001464:	fa0b f000 	lsl.w	r0, fp, r0
 8001468:	4318      	orrs	r0, r3
 800146a:	9004      	str	r0, [sp, #16]
 800146c:	e7d3      	b.n	8001416 <_svfiprintf_r+0x92>
 800146e:	9a03      	ldr	r2, [sp, #12]
 8001470:	1d11      	adds	r1, r2, #4
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	9103      	str	r1, [sp, #12]
 8001476:	2a00      	cmp	r2, #0
 8001478:	db01      	blt.n	800147e <_svfiprintf_r+0xfa>
 800147a:	9207      	str	r2, [sp, #28]
 800147c:	e004      	b.n	8001488 <_svfiprintf_r+0x104>
 800147e:	4252      	negs	r2, r2
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	9207      	str	r2, [sp, #28]
 8001486:	9304      	str	r3, [sp, #16]
 8001488:	783b      	ldrb	r3, [r7, #0]
 800148a:	2b2e      	cmp	r3, #46	; 0x2e
 800148c:	d10c      	bne.n	80014a8 <_svfiprintf_r+0x124>
 800148e:	787b      	ldrb	r3, [r7, #1]
 8001490:	2b2a      	cmp	r3, #42	; 0x2a
 8001492:	d133      	bne.n	80014fc <_svfiprintf_r+0x178>
 8001494:	9b03      	ldr	r3, [sp, #12]
 8001496:	3702      	adds	r7, #2
 8001498:	1d1a      	adds	r2, r3, #4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	9203      	str	r2, [sp, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	bfb8      	it	lt
 80014a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80014a6:	9305      	str	r3, [sp, #20]
 80014a8:	4d2e      	ldr	r5, [pc, #184]	; (8001564 <_svfiprintf_r+0x1e0>)
 80014aa:	2203      	movs	r2, #3
 80014ac:	7839      	ldrb	r1, [r7, #0]
 80014ae:	4628      	mov	r0, r5
 80014b0:	f000 f9f8 	bl	80018a4 <memchr>
 80014b4:	b138      	cbz	r0, 80014c6 <_svfiprintf_r+0x142>
 80014b6:	2340      	movs	r3, #64	; 0x40
 80014b8:	1b40      	subs	r0, r0, r5
 80014ba:	fa03 f000 	lsl.w	r0, r3, r0
 80014be:	9b04      	ldr	r3, [sp, #16]
 80014c0:	3701      	adds	r7, #1
 80014c2:	4303      	orrs	r3, r0
 80014c4:	9304      	str	r3, [sp, #16]
 80014c6:	7839      	ldrb	r1, [r7, #0]
 80014c8:	2206      	movs	r2, #6
 80014ca:	4827      	ldr	r0, [pc, #156]	; (8001568 <_svfiprintf_r+0x1e4>)
 80014cc:	1c7e      	adds	r6, r7, #1
 80014ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80014d2:	f000 f9e7 	bl	80018a4 <memchr>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d038      	beq.n	800154c <_svfiprintf_r+0x1c8>
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <_svfiprintf_r+0x1e8>)
 80014dc:	bb13      	cbnz	r3, 8001524 <_svfiprintf_r+0x1a0>
 80014de:	9b03      	ldr	r3, [sp, #12]
 80014e0:	3307      	adds	r3, #7
 80014e2:	f023 0307 	bic.w	r3, r3, #7
 80014e6:	3308      	adds	r3, #8
 80014e8:	9303      	str	r3, [sp, #12]
 80014ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014ec:	444b      	add	r3, r9
 80014ee:	9309      	str	r3, [sp, #36]	; 0x24
 80014f0:	e76d      	b.n	80013ce <_svfiprintf_r+0x4a>
 80014f2:	fb05 3202 	mla	r2, r5, r2, r3
 80014f6:	2001      	movs	r0, #1
 80014f8:	460f      	mov	r7, r1
 80014fa:	e7a6      	b.n	800144a <_svfiprintf_r+0xc6>
 80014fc:	2300      	movs	r3, #0
 80014fe:	250a      	movs	r5, #10
 8001500:	4619      	mov	r1, r3
 8001502:	3701      	adds	r7, #1
 8001504:	9305      	str	r3, [sp, #20]
 8001506:	4638      	mov	r0, r7
 8001508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800150c:	3a30      	subs	r2, #48	; 0x30
 800150e:	2a09      	cmp	r2, #9
 8001510:	d903      	bls.n	800151a <_svfiprintf_r+0x196>
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0c8      	beq.n	80014a8 <_svfiprintf_r+0x124>
 8001516:	9105      	str	r1, [sp, #20]
 8001518:	e7c6      	b.n	80014a8 <_svfiprintf_r+0x124>
 800151a:	fb05 2101 	mla	r1, r5, r1, r2
 800151e:	2301      	movs	r3, #1
 8001520:	4607      	mov	r7, r0
 8001522:	e7f0      	b.n	8001506 <_svfiprintf_r+0x182>
 8001524:	ab03      	add	r3, sp, #12
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4622      	mov	r2, r4
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <_svfiprintf_r+0x1ec>)
 800152c:	a904      	add	r1, sp, #16
 800152e:	4640      	mov	r0, r8
 8001530:	f3af 8000 	nop.w
 8001534:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001538:	4681      	mov	r9, r0
 800153a:	d1d6      	bne.n	80014ea <_svfiprintf_r+0x166>
 800153c:	89a3      	ldrh	r3, [r4, #12]
 800153e:	065b      	lsls	r3, r3, #25
 8001540:	f53f af35 	bmi.w	80013ae <_svfiprintf_r+0x2a>
 8001544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001546:	b01d      	add	sp, #116	; 0x74
 8001548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800154c:	ab03      	add	r3, sp, #12
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4622      	mov	r2, r4
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <_svfiprintf_r+0x1ec>)
 8001554:	a904      	add	r1, sp, #16
 8001556:	4640      	mov	r0, r8
 8001558:	f000 f882 	bl	8001660 <_printf_i>
 800155c:	e7ea      	b.n	8001534 <_svfiprintf_r+0x1b0>
 800155e:	bf00      	nop
 8001560:	080019d2 	.word	0x080019d2
 8001564:	080019d8 	.word	0x080019d8
 8001568:	080019dc 	.word	0x080019dc
 800156c:	00000000 	.word	0x00000000
 8001570:	080012d1 	.word	0x080012d1

08001574 <_printf_common>:
 8001574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001578:	4691      	mov	r9, r2
 800157a:	461f      	mov	r7, r3
 800157c:	688a      	ldr	r2, [r1, #8]
 800157e:	690b      	ldr	r3, [r1, #16]
 8001580:	4606      	mov	r6, r0
 8001582:	4293      	cmp	r3, r2
 8001584:	bfb8      	it	lt
 8001586:	4613      	movlt	r3, r2
 8001588:	f8c9 3000 	str.w	r3, [r9]
 800158c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001590:	460c      	mov	r4, r1
 8001592:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001596:	b112      	cbz	r2, 800159e <_printf_common+0x2a>
 8001598:	3301      	adds	r3, #1
 800159a:	f8c9 3000 	str.w	r3, [r9]
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	0699      	lsls	r1, r3, #26
 80015a2:	bf42      	ittt	mi
 80015a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80015a8:	3302      	addmi	r3, #2
 80015aa:	f8c9 3000 	strmi.w	r3, [r9]
 80015ae:	6825      	ldr	r5, [r4, #0]
 80015b0:	f015 0506 	ands.w	r5, r5, #6
 80015b4:	d107      	bne.n	80015c6 <_printf_common+0x52>
 80015b6:	f104 0a19 	add.w	sl, r4, #25
 80015ba:	68e3      	ldr	r3, [r4, #12]
 80015bc:	f8d9 2000 	ldr.w	r2, [r9]
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	42ab      	cmp	r3, r5
 80015c4:	dc29      	bgt.n	800161a <_printf_common+0xa6>
 80015c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80015ca:	6822      	ldr	r2, [r4, #0]
 80015cc:	3300      	adds	r3, #0
 80015ce:	bf18      	it	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	0692      	lsls	r2, r2, #26
 80015d4:	d42e      	bmi.n	8001634 <_printf_common+0xc0>
 80015d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015da:	4639      	mov	r1, r7
 80015dc:	4630      	mov	r0, r6
 80015de:	47c0      	blx	r8
 80015e0:	3001      	adds	r0, #1
 80015e2:	d021      	beq.n	8001628 <_printf_common+0xb4>
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	68e5      	ldr	r5, [r4, #12]
 80015e8:	f003 0306 	and.w	r3, r3, #6
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	bf18      	it	ne
 80015f0:	2500      	movne	r5, #0
 80015f2:	f8d9 2000 	ldr.w	r2, [r9]
 80015f6:	f04f 0900 	mov.w	r9, #0
 80015fa:	bf08      	it	eq
 80015fc:	1aad      	subeq	r5, r5, r2
 80015fe:	68a3      	ldr	r3, [r4, #8]
 8001600:	6922      	ldr	r2, [r4, #16]
 8001602:	bf08      	it	eq
 8001604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001608:	4293      	cmp	r3, r2
 800160a:	bfc4      	itt	gt
 800160c:	1a9b      	subgt	r3, r3, r2
 800160e:	18ed      	addgt	r5, r5, r3
 8001610:	341a      	adds	r4, #26
 8001612:	454d      	cmp	r5, r9
 8001614:	d11a      	bne.n	800164c <_printf_common+0xd8>
 8001616:	2000      	movs	r0, #0
 8001618:	e008      	b.n	800162c <_printf_common+0xb8>
 800161a:	2301      	movs	r3, #1
 800161c:	4652      	mov	r2, sl
 800161e:	4639      	mov	r1, r7
 8001620:	4630      	mov	r0, r6
 8001622:	47c0      	blx	r8
 8001624:	3001      	adds	r0, #1
 8001626:	d103      	bne.n	8001630 <_printf_common+0xbc>
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001630:	3501      	adds	r5, #1
 8001632:	e7c2      	b.n	80015ba <_printf_common+0x46>
 8001634:	2030      	movs	r0, #48	; 0x30
 8001636:	18e1      	adds	r1, r4, r3
 8001638:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001642:	4422      	add	r2, r4
 8001644:	3302      	adds	r3, #2
 8001646:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800164a:	e7c4      	b.n	80015d6 <_printf_common+0x62>
 800164c:	2301      	movs	r3, #1
 800164e:	4622      	mov	r2, r4
 8001650:	4639      	mov	r1, r7
 8001652:	4630      	mov	r0, r6
 8001654:	47c0      	blx	r8
 8001656:	3001      	adds	r0, #1
 8001658:	d0e6      	beq.n	8001628 <_printf_common+0xb4>
 800165a:	f109 0901 	add.w	r9, r9, #1
 800165e:	e7d8      	b.n	8001612 <_printf_common+0x9e>

08001660 <_printf_i>:
 8001660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001664:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001668:	460c      	mov	r4, r1
 800166a:	7e09      	ldrb	r1, [r1, #24]
 800166c:	b085      	sub	sp, #20
 800166e:	296e      	cmp	r1, #110	; 0x6e
 8001670:	4617      	mov	r7, r2
 8001672:	4606      	mov	r6, r0
 8001674:	4698      	mov	r8, r3
 8001676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001678:	f000 80b3 	beq.w	80017e2 <_printf_i+0x182>
 800167c:	d822      	bhi.n	80016c4 <_printf_i+0x64>
 800167e:	2963      	cmp	r1, #99	; 0x63
 8001680:	d036      	beq.n	80016f0 <_printf_i+0x90>
 8001682:	d80a      	bhi.n	800169a <_printf_i+0x3a>
 8001684:	2900      	cmp	r1, #0
 8001686:	f000 80b9 	beq.w	80017fc <_printf_i+0x19c>
 800168a:	2958      	cmp	r1, #88	; 0x58
 800168c:	f000 8083 	beq.w	8001796 <_printf_i+0x136>
 8001690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001694:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001698:	e032      	b.n	8001700 <_printf_i+0xa0>
 800169a:	2964      	cmp	r1, #100	; 0x64
 800169c:	d001      	beq.n	80016a2 <_printf_i+0x42>
 800169e:	2969      	cmp	r1, #105	; 0x69
 80016a0:	d1f6      	bne.n	8001690 <_printf_i+0x30>
 80016a2:	6820      	ldr	r0, [r4, #0]
 80016a4:	6813      	ldr	r3, [r2, #0]
 80016a6:	0605      	lsls	r5, r0, #24
 80016a8:	f103 0104 	add.w	r1, r3, #4
 80016ac:	d52a      	bpl.n	8001704 <_printf_i+0xa4>
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6011      	str	r1, [r2, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da03      	bge.n	80016be <_printf_i+0x5e>
 80016b6:	222d      	movs	r2, #45	; 0x2d
 80016b8:	425b      	negs	r3, r3
 80016ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80016be:	486f      	ldr	r0, [pc, #444]	; (800187c <_printf_i+0x21c>)
 80016c0:	220a      	movs	r2, #10
 80016c2:	e039      	b.n	8001738 <_printf_i+0xd8>
 80016c4:	2973      	cmp	r1, #115	; 0x73
 80016c6:	f000 809d 	beq.w	8001804 <_printf_i+0x1a4>
 80016ca:	d808      	bhi.n	80016de <_printf_i+0x7e>
 80016cc:	296f      	cmp	r1, #111	; 0x6f
 80016ce:	d020      	beq.n	8001712 <_printf_i+0xb2>
 80016d0:	2970      	cmp	r1, #112	; 0x70
 80016d2:	d1dd      	bne.n	8001690 <_printf_i+0x30>
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	f043 0320 	orr.w	r3, r3, #32
 80016da:	6023      	str	r3, [r4, #0]
 80016dc:	e003      	b.n	80016e6 <_printf_i+0x86>
 80016de:	2975      	cmp	r1, #117	; 0x75
 80016e0:	d017      	beq.n	8001712 <_printf_i+0xb2>
 80016e2:	2978      	cmp	r1, #120	; 0x78
 80016e4:	d1d4      	bne.n	8001690 <_printf_i+0x30>
 80016e6:	2378      	movs	r3, #120	; 0x78
 80016e8:	4865      	ldr	r0, [pc, #404]	; (8001880 <_printf_i+0x220>)
 80016ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80016ee:	e055      	b.n	800179c <_printf_i+0x13c>
 80016f0:	6813      	ldr	r3, [r2, #0]
 80016f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016f6:	1d19      	adds	r1, r3, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6011      	str	r1, [r2, #0]
 80016fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001700:	2301      	movs	r3, #1
 8001702:	e08c      	b.n	800181e <_printf_i+0x1be>
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f010 0f40 	tst.w	r0, #64	; 0x40
 800170a:	6011      	str	r1, [r2, #0]
 800170c:	bf18      	it	ne
 800170e:	b21b      	sxthne	r3, r3
 8001710:	e7cf      	b.n	80016b2 <_printf_i+0x52>
 8001712:	6813      	ldr	r3, [r2, #0]
 8001714:	6825      	ldr	r5, [r4, #0]
 8001716:	1d18      	adds	r0, r3, #4
 8001718:	6010      	str	r0, [r2, #0]
 800171a:	0628      	lsls	r0, r5, #24
 800171c:	d501      	bpl.n	8001722 <_printf_i+0xc2>
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	e002      	b.n	8001728 <_printf_i+0xc8>
 8001722:	0668      	lsls	r0, r5, #25
 8001724:	d5fb      	bpl.n	800171e <_printf_i+0xbe>
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	296f      	cmp	r1, #111	; 0x6f
 800172a:	bf14      	ite	ne
 800172c:	220a      	movne	r2, #10
 800172e:	2208      	moveq	r2, #8
 8001730:	4852      	ldr	r0, [pc, #328]	; (800187c <_printf_i+0x21c>)
 8001732:	2100      	movs	r1, #0
 8001734:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001738:	6865      	ldr	r5, [r4, #4]
 800173a:	2d00      	cmp	r5, #0
 800173c:	60a5      	str	r5, [r4, #8]
 800173e:	f2c0 8095 	blt.w	800186c <_printf_i+0x20c>
 8001742:	6821      	ldr	r1, [r4, #0]
 8001744:	f021 0104 	bic.w	r1, r1, #4
 8001748:	6021      	str	r1, [r4, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d13d      	bne.n	80017ca <_printf_i+0x16a>
 800174e:	2d00      	cmp	r5, #0
 8001750:	f040 808e 	bne.w	8001870 <_printf_i+0x210>
 8001754:	4665      	mov	r5, ip
 8001756:	2a08      	cmp	r2, #8
 8001758:	d10b      	bne.n	8001772 <_printf_i+0x112>
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	07db      	lsls	r3, r3, #31
 800175e:	d508      	bpl.n	8001772 <_printf_i+0x112>
 8001760:	6923      	ldr	r3, [r4, #16]
 8001762:	6862      	ldr	r2, [r4, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	bfde      	ittt	le
 8001768:	2330      	movle	r3, #48	; 0x30
 800176a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800176e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001772:	ebac 0305 	sub.w	r3, ip, r5
 8001776:	6123      	str	r3, [r4, #16]
 8001778:	f8cd 8000 	str.w	r8, [sp]
 800177c:	463b      	mov	r3, r7
 800177e:	aa03      	add	r2, sp, #12
 8001780:	4621      	mov	r1, r4
 8001782:	4630      	mov	r0, r6
 8001784:	f7ff fef6 	bl	8001574 <_printf_common>
 8001788:	3001      	adds	r0, #1
 800178a:	d14d      	bne.n	8001828 <_printf_i+0x1c8>
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	b005      	add	sp, #20
 8001792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001796:	4839      	ldr	r0, [pc, #228]	; (800187c <_printf_i+0x21c>)
 8001798:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800179c:	6813      	ldr	r3, [r2, #0]
 800179e:	6821      	ldr	r1, [r4, #0]
 80017a0:	1d1d      	adds	r5, r3, #4
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6015      	str	r5, [r2, #0]
 80017a6:	060a      	lsls	r2, r1, #24
 80017a8:	d50b      	bpl.n	80017c2 <_printf_i+0x162>
 80017aa:	07ca      	lsls	r2, r1, #31
 80017ac:	bf44      	itt	mi
 80017ae:	f041 0120 	orrmi.w	r1, r1, #32
 80017b2:	6021      	strmi	r1, [r4, #0]
 80017b4:	b91b      	cbnz	r3, 80017be <_printf_i+0x15e>
 80017b6:	6822      	ldr	r2, [r4, #0]
 80017b8:	f022 0220 	bic.w	r2, r2, #32
 80017bc:	6022      	str	r2, [r4, #0]
 80017be:	2210      	movs	r2, #16
 80017c0:	e7b7      	b.n	8001732 <_printf_i+0xd2>
 80017c2:	064d      	lsls	r5, r1, #25
 80017c4:	bf48      	it	mi
 80017c6:	b29b      	uxthmi	r3, r3
 80017c8:	e7ef      	b.n	80017aa <_printf_i+0x14a>
 80017ca:	4665      	mov	r5, ip
 80017cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80017d0:	fb02 3311 	mls	r3, r2, r1, r3
 80017d4:	5cc3      	ldrb	r3, [r0, r3]
 80017d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80017da:	460b      	mov	r3, r1
 80017dc:	2900      	cmp	r1, #0
 80017de:	d1f5      	bne.n	80017cc <_printf_i+0x16c>
 80017e0:	e7b9      	b.n	8001756 <_printf_i+0xf6>
 80017e2:	6813      	ldr	r3, [r2, #0]
 80017e4:	6825      	ldr	r5, [r4, #0]
 80017e6:	1d18      	adds	r0, r3, #4
 80017e8:	6961      	ldr	r1, [r4, #20]
 80017ea:	6010      	str	r0, [r2, #0]
 80017ec:	0628      	lsls	r0, r5, #24
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	d501      	bpl.n	80017f6 <_printf_i+0x196>
 80017f2:	6019      	str	r1, [r3, #0]
 80017f4:	e002      	b.n	80017fc <_printf_i+0x19c>
 80017f6:	066a      	lsls	r2, r5, #25
 80017f8:	d5fb      	bpl.n	80017f2 <_printf_i+0x192>
 80017fa:	8019      	strh	r1, [r3, #0]
 80017fc:	2300      	movs	r3, #0
 80017fe:	4665      	mov	r5, ip
 8001800:	6123      	str	r3, [r4, #16]
 8001802:	e7b9      	b.n	8001778 <_printf_i+0x118>
 8001804:	6813      	ldr	r3, [r2, #0]
 8001806:	1d19      	adds	r1, r3, #4
 8001808:	6011      	str	r1, [r2, #0]
 800180a:	681d      	ldr	r5, [r3, #0]
 800180c:	6862      	ldr	r2, [r4, #4]
 800180e:	2100      	movs	r1, #0
 8001810:	4628      	mov	r0, r5
 8001812:	f000 f847 	bl	80018a4 <memchr>
 8001816:	b108      	cbz	r0, 800181c <_printf_i+0x1bc>
 8001818:	1b40      	subs	r0, r0, r5
 800181a:	6060      	str	r0, [r4, #4]
 800181c:	6863      	ldr	r3, [r4, #4]
 800181e:	6123      	str	r3, [r4, #16]
 8001820:	2300      	movs	r3, #0
 8001822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001826:	e7a7      	b.n	8001778 <_printf_i+0x118>
 8001828:	6923      	ldr	r3, [r4, #16]
 800182a:	462a      	mov	r2, r5
 800182c:	4639      	mov	r1, r7
 800182e:	4630      	mov	r0, r6
 8001830:	47c0      	blx	r8
 8001832:	3001      	adds	r0, #1
 8001834:	d0aa      	beq.n	800178c <_printf_i+0x12c>
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	079b      	lsls	r3, r3, #30
 800183a:	d413      	bmi.n	8001864 <_printf_i+0x204>
 800183c:	68e0      	ldr	r0, [r4, #12]
 800183e:	9b03      	ldr	r3, [sp, #12]
 8001840:	4298      	cmp	r0, r3
 8001842:	bfb8      	it	lt
 8001844:	4618      	movlt	r0, r3
 8001846:	e7a3      	b.n	8001790 <_printf_i+0x130>
 8001848:	2301      	movs	r3, #1
 800184a:	464a      	mov	r2, r9
 800184c:	4639      	mov	r1, r7
 800184e:	4630      	mov	r0, r6
 8001850:	47c0      	blx	r8
 8001852:	3001      	adds	r0, #1
 8001854:	d09a      	beq.n	800178c <_printf_i+0x12c>
 8001856:	3501      	adds	r5, #1
 8001858:	68e3      	ldr	r3, [r4, #12]
 800185a:	9a03      	ldr	r2, [sp, #12]
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	42ab      	cmp	r3, r5
 8001860:	dcf2      	bgt.n	8001848 <_printf_i+0x1e8>
 8001862:	e7eb      	b.n	800183c <_printf_i+0x1dc>
 8001864:	2500      	movs	r5, #0
 8001866:	f104 0919 	add.w	r9, r4, #25
 800186a:	e7f5      	b.n	8001858 <_printf_i+0x1f8>
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1ac      	bne.n	80017ca <_printf_i+0x16a>
 8001870:	7803      	ldrb	r3, [r0, #0]
 8001872:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001876:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800187a:	e76c      	b.n	8001756 <_printf_i+0xf6>
 800187c:	080019e3 	.word	0x080019e3
 8001880:	080019f4 	.word	0x080019f4

08001884 <_sbrk_r>:
 8001884:	b538      	push	{r3, r4, r5, lr}
 8001886:	2300      	movs	r3, #0
 8001888:	4c05      	ldr	r4, [pc, #20]	; (80018a0 <_sbrk_r+0x1c>)
 800188a:	4605      	mov	r5, r0
 800188c:	4608      	mov	r0, r1
 800188e:	6023      	str	r3, [r4, #0]
 8001890:	f7fe fcb2 	bl	80001f8 <_sbrk>
 8001894:	1c43      	adds	r3, r0, #1
 8001896:	d102      	bne.n	800189e <_sbrk_r+0x1a>
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	b103      	cbz	r3, 800189e <_sbrk_r+0x1a>
 800189c:	602b      	str	r3, [r5, #0]
 800189e:	bd38      	pop	{r3, r4, r5, pc}
 80018a0:	20000120 	.word	0x20000120

080018a4 <memchr>:
 80018a4:	b510      	push	{r4, lr}
 80018a6:	b2c9      	uxtb	r1, r1
 80018a8:	4402      	add	r2, r0
 80018aa:	4290      	cmp	r0, r2
 80018ac:	4603      	mov	r3, r0
 80018ae:	d101      	bne.n	80018b4 <memchr+0x10>
 80018b0:	2300      	movs	r3, #0
 80018b2:	e003      	b.n	80018bc <memchr+0x18>
 80018b4:	781c      	ldrb	r4, [r3, #0]
 80018b6:	3001      	adds	r0, #1
 80018b8:	428c      	cmp	r4, r1
 80018ba:	d1f6      	bne.n	80018aa <memchr+0x6>
 80018bc:	4618      	mov	r0, r3
 80018be:	bd10      	pop	{r4, pc}

080018c0 <memcpy>:
 80018c0:	b510      	push	{r4, lr}
 80018c2:	1e43      	subs	r3, r0, #1
 80018c4:	440a      	add	r2, r1
 80018c6:	4291      	cmp	r1, r2
 80018c8:	d100      	bne.n	80018cc <memcpy+0xc>
 80018ca:	bd10      	pop	{r4, pc}
 80018cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018d4:	e7f7      	b.n	80018c6 <memcpy+0x6>

080018d6 <memmove>:
 80018d6:	4288      	cmp	r0, r1
 80018d8:	b510      	push	{r4, lr}
 80018da:	eb01 0302 	add.w	r3, r1, r2
 80018de:	d807      	bhi.n	80018f0 <memmove+0x1a>
 80018e0:	1e42      	subs	r2, r0, #1
 80018e2:	4299      	cmp	r1, r3
 80018e4:	d00a      	beq.n	80018fc <memmove+0x26>
 80018e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80018ee:	e7f8      	b.n	80018e2 <memmove+0xc>
 80018f0:	4283      	cmp	r3, r0
 80018f2:	d9f5      	bls.n	80018e0 <memmove+0xa>
 80018f4:	1881      	adds	r1, r0, r2
 80018f6:	1ad2      	subs	r2, r2, r3
 80018f8:	42d3      	cmn	r3, r2
 80018fa:	d100      	bne.n	80018fe <memmove+0x28>
 80018fc:	bd10      	pop	{r4, pc}
 80018fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001902:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001906:	e7f7      	b.n	80018f8 <memmove+0x22>

08001908 <__malloc_lock>:
 8001908:	4770      	bx	lr

0800190a <__malloc_unlock>:
 800190a:	4770      	bx	lr

0800190c <_free_r>:
 800190c:	b538      	push	{r3, r4, r5, lr}
 800190e:	4605      	mov	r5, r0
 8001910:	2900      	cmp	r1, #0
 8001912:	d043      	beq.n	800199c <_free_r+0x90>
 8001914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001918:	1f0c      	subs	r4, r1, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	bfb8      	it	lt
 800191e:	18e4      	addlt	r4, r4, r3
 8001920:	f7ff fff2 	bl	8001908 <__malloc_lock>
 8001924:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <_free_r+0x94>)
 8001926:	6813      	ldr	r3, [r2, #0]
 8001928:	4610      	mov	r0, r2
 800192a:	b933      	cbnz	r3, 800193a <_free_r+0x2e>
 800192c:	6063      	str	r3, [r4, #4]
 800192e:	6014      	str	r4, [r2, #0]
 8001930:	4628      	mov	r0, r5
 8001932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001936:	f7ff bfe8 	b.w	800190a <__malloc_unlock>
 800193a:	42a3      	cmp	r3, r4
 800193c:	d90b      	bls.n	8001956 <_free_r+0x4a>
 800193e:	6821      	ldr	r1, [r4, #0]
 8001940:	1862      	adds	r2, r4, r1
 8001942:	4293      	cmp	r3, r2
 8001944:	bf01      	itttt	eq
 8001946:	681a      	ldreq	r2, [r3, #0]
 8001948:	685b      	ldreq	r3, [r3, #4]
 800194a:	1852      	addeq	r2, r2, r1
 800194c:	6022      	streq	r2, [r4, #0]
 800194e:	6063      	str	r3, [r4, #4]
 8001950:	6004      	str	r4, [r0, #0]
 8001952:	e7ed      	b.n	8001930 <_free_r+0x24>
 8001954:	4613      	mov	r3, r2
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	b10a      	cbz	r2, 800195e <_free_r+0x52>
 800195a:	42a2      	cmp	r2, r4
 800195c:	d9fa      	bls.n	8001954 <_free_r+0x48>
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	1858      	adds	r0, r3, r1
 8001962:	42a0      	cmp	r0, r4
 8001964:	d10b      	bne.n	800197e <_free_r+0x72>
 8001966:	6820      	ldr	r0, [r4, #0]
 8001968:	4401      	add	r1, r0
 800196a:	1858      	adds	r0, r3, r1
 800196c:	4282      	cmp	r2, r0
 800196e:	6019      	str	r1, [r3, #0]
 8001970:	d1de      	bne.n	8001930 <_free_r+0x24>
 8001972:	6810      	ldr	r0, [r2, #0]
 8001974:	6852      	ldr	r2, [r2, #4]
 8001976:	4401      	add	r1, r0
 8001978:	6019      	str	r1, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	e7d8      	b.n	8001930 <_free_r+0x24>
 800197e:	d902      	bls.n	8001986 <_free_r+0x7a>
 8001980:	230c      	movs	r3, #12
 8001982:	602b      	str	r3, [r5, #0]
 8001984:	e7d4      	b.n	8001930 <_free_r+0x24>
 8001986:	6820      	ldr	r0, [r4, #0]
 8001988:	1821      	adds	r1, r4, r0
 800198a:	428a      	cmp	r2, r1
 800198c:	bf01      	itttt	eq
 800198e:	6811      	ldreq	r1, [r2, #0]
 8001990:	6852      	ldreq	r2, [r2, #4]
 8001992:	1809      	addeq	r1, r1, r0
 8001994:	6021      	streq	r1, [r4, #0]
 8001996:	6062      	str	r2, [r4, #4]
 8001998:	605c      	str	r4, [r3, #4]
 800199a:	e7c9      	b.n	8001930 <_free_r+0x24>
 800199c:	bd38      	pop	{r3, r4, r5, pc}
 800199e:	bf00      	nop
 80019a0:	20000090 	.word	0x20000090

080019a4 <_malloc_usable_size_r>:
 80019a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019a8:	1f18      	subs	r0, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bfbc      	itt	lt
 80019ae:	580b      	ldrlt	r3, [r1, r0]
 80019b0:	18c0      	addlt	r0, r0, r3
 80019b2:	4770      	bx	lr

080019b4 <_init>:
 80019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b6:	bf00      	nop
 80019b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ba:	bc08      	pop	{r3}
 80019bc:	469e      	mov	lr, r3
 80019be:	4770      	bx	lr

080019c0 <_fini>:
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	bf00      	nop
 80019c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c6:	bc08      	pop	{r3}
 80019c8:	469e      	mov	lr, r3
 80019ca:	4770      	bx	lr
