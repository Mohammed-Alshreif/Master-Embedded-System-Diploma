#include "MPU6050.h"
#include "stm32f103c6_USART_SRIVER.h"
#include "STM32_TIMERS_DRIVER.h"
#include "math.h"
#define clk 8000000

char buf[4];
uint8_t data[6];
float Accel_X_RAW = 0;
float Accel_Y_RAW = 0;
float Accel_Z_RAW = 0;

int16_t Gyro_X_RAW = 0;
int16_t Gyro_Y_RAW = 0;
int16_t Gyro_Z_RAW = 0;

float GxL, GyL, GzL, Gx, Gy, Gz;

float elapsedTime, currentTime, previousTime;
float accAngleX, accAngleY, gyroAngleX, gyroAngleY, gyroAngleZ,yaw,roll,pitch;
int main(void)
{
	MPU6050_init(clk);
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_9, stop_bits_2, baud_rate_9600, parity_even,8000000);

	/* Loop forever */
	while(1){
		TIME_CALCULATION(8000000, TIMER_START);
		previousTime = currentTime;


		MPU6050_read(ACCEL_XOUT_H_REG, data, 6);

		Accel_X_RAW = (int16_t)(data[0] << 8 | data [1]) / 16384.0;
		Accel_Y_RAW = (int16_t)(data[2] << 8 | data [3]) / 16384.0;
		Accel_Z_RAW = (int16_t)(data[4] << 8 | data [5]) / 16384.0;

		accAngleX = (atan(Accel_Y_RAW / sqrt(pow(Accel_X_RAW, 2) + pow(Accel_Z_RAW, 2))) * 180 / 3.14) - 0.58; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
		accAngleY = (atan(-1 * Accel_X_RAW / sqrt(pow(Accel_Y_RAW, 2) + pow(Accel_Z_RAW, 2))) * 180 / 3.14) + 1.58; // AccErrorY ~(-1.58)


		MPU6050_read(GYRO_XOUT_H_REG, data, 6);
		Gyro_X_RAW = (int16_t)(data[0] << 8 | data [1]);
		Gyro_Y_RAW = (int16_t)(data[2] << 8 | data [3]);
		Gyro_Z_RAW = (int16_t)(data[4] << 8 | data [5]);

		/*** convert the RAW values into dps (Â°/s)
			     we have to divide according to the Full scale value set in FS_SEL
			     I have configured FS_SEL = 0. So I am dividing by 131.0
			     for more details check GYRO_CONFIG Register              ****/

		Gx = Gyro_X_RAW/131.0;
		Gy = Gyro_Y_RAW/131.0;
		Gz = Gyro_Z_RAW/131.0;

		gyroAngleX = gyroAngleX + Gx * elapsedTime; // deg/s * s = deg
		gyroAngleY = gyroAngleY + Gy * elapsedTime;
		yaw =  yaw + Gz * elapsedTime;

		roll = 0.96 * gyroAngleX + 0.04 * accAngleX;
		pitch = 0.96 * gyroAngleY + 0.04 * accAngleY;

		sprintf (buf, "%d", (int)gyroAngleY);
		USART_SEND_STRING(USART1,buf);

		for(int i=0;i<1000;i++);
		USART_SEND_STRING(USART1," \n");
		for(int i=0;i<100;i++);
		currentTime=TIME_CALCULATION(8000000, TIMER_STOP);
		elapsedTime = (currentTime - previousTime) / 1000;
	}
}
