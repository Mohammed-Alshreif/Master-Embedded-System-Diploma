
MPU6050.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004300  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004430  08004430  00014430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004500  08004500  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08004500  08004500  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004500  08004500  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000088  08004590  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08004590  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d8d  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000124d  00000000  00000000  00026e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002e0  00000000  00000000  00028090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000248  00000000  00000000  00028370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001b4a  00000000  00000000  000285b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004420  00000000  00000000  0002a102  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ba77  00000000  00000000  0002e522  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00039f99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001174  00000000  00000000  0003a014  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000088 	.word	0x20000088
 800014c:	00000000 	.word	0x00000000
 8000150:	08004418 	.word	0x08004418

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000008c 	.word	0x2000008c
 800016c:	08004418 	.word	0x08004418

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2f>:
 8000a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a50:	bf24      	itt	cs
 8000a52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5a:	d90d      	bls.n	8000a78 <__aeabi_d2f+0x30>
 8000a5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a70:	bf08      	it	eq
 8000a72:	f020 0001 	biceq.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a7c:	d121      	bne.n	8000ac2 <__aeabi_d2f+0x7a>
 8000a7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a82:	bfbc      	itt	lt
 8000a84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	4770      	bxlt	lr
 8000a8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a92:	f1c2 0218 	rsb	r2, r2, #24
 8000a96:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa2:	bf18      	it	ne
 8000aa4:	f040 0001 	orrne.w	r0, r0, #1
 8000aa8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab4:	ea40 000c 	orr.w	r0, r0, ip
 8000ab8:	fa23 f302 	lsr.w	r3, r3, r2
 8000abc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac0:	e7cc      	b.n	8000a5c <__aeabi_d2f+0x14>
 8000ac2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac6:	d107      	bne.n	8000ad8 <__aeabi_d2f+0x90>
 8000ac8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000acc:	bf1e      	ittt	ne
 8000ace:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ad6:	4770      	bxne	lr
 8000ad8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_frsub>:
 8000ae8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	e002      	b.n	8000af4 <__addsf3>
 8000aee:	bf00      	nop

08000af0 <__aeabi_fsub>:
 8000af0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af4 <__addsf3>:
 8000af4:	0042      	lsls	r2, r0, #1
 8000af6:	bf1f      	itttt	ne
 8000af8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000afc:	ea92 0f03 	teqne	r2, r3
 8000b00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b08:	d06a      	beq.n	8000be0 <__addsf3+0xec>
 8000b0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b12:	bfc1      	itttt	gt
 8000b14:	18d2      	addgt	r2, r2, r3
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	4048      	eorgt	r0, r1
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	bfb8      	it	lt
 8000b1e:	425b      	neglt	r3, r3
 8000b20:	2b19      	cmp	r3, #25
 8000b22:	bf88      	it	hi
 8000b24:	4770      	bxhi	lr
 8000b26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b42:	bf18      	it	ne
 8000b44:	4249      	negne	r1, r1
 8000b46:	ea92 0f03 	teq	r2, r3
 8000b4a:	d03f      	beq.n	8000bcc <__addsf3+0xd8>
 8000b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b50:	fa41 fc03 	asr.w	ip, r1, r3
 8000b54:	eb10 000c 	adds.w	r0, r0, ip
 8000b58:	f1c3 0320 	rsb	r3, r3, #32
 8000b5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	d502      	bpl.n	8000b6c <__addsf3+0x78>
 8000b66:	4249      	negs	r1, r1
 8000b68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b70:	d313      	bcc.n	8000b9a <__addsf3+0xa6>
 8000b72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b76:	d306      	bcc.n	8000b86 <__addsf3+0x92>
 8000b78:	0840      	lsrs	r0, r0, #1
 8000b7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7e:	f102 0201 	add.w	r2, r2, #1
 8000b82:	2afe      	cmp	r2, #254	; 0xfe
 8000b84:	d251      	bcs.n	8000c2a <__addsf3+0x136>
 8000b86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8e:	bf08      	it	eq
 8000b90:	f020 0001 	biceq.w	r0, r0, #1
 8000b94:	ea40 0003 	orr.w	r0, r0, r3
 8000b98:	4770      	bx	lr
 8000b9a:	0049      	lsls	r1, r1, #1
 8000b9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ba0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba8:	d1ed      	bne.n	8000b86 <__addsf3+0x92>
 8000baa:	fab0 fc80 	clz	ip, r0
 8000bae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bba:	bfaa      	itet	ge
 8000bbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc0:	4252      	neglt	r2, r2
 8000bc2:	4318      	orrge	r0, r3
 8000bc4:	bfbc      	itt	lt
 8000bc6:	40d0      	lsrlt	r0, r2
 8000bc8:	4318      	orrlt	r0, r3
 8000bca:	4770      	bx	lr
 8000bcc:	f092 0f00 	teq	r2, #0
 8000bd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd4:	bf06      	itte	eq
 8000bd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bda:	3201      	addeq	r2, #1
 8000bdc:	3b01      	subne	r3, #1
 8000bde:	e7b5      	b.n	8000b4c <__addsf3+0x58>
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d021      	beq.n	8000c34 <__addsf3+0x140>
 8000bf0:	ea92 0f03 	teq	r2, r3
 8000bf4:	d004      	beq.n	8000c00 <__addsf3+0x10c>
 8000bf6:	f092 0f00 	teq	r2, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	4608      	moveq	r0, r1
 8000bfe:	4770      	bx	lr
 8000c00:	ea90 0f01 	teq	r0, r1
 8000c04:	bf1c      	itt	ne
 8000c06:	2000      	movne	r0, #0
 8000c08:	4770      	bxne	lr
 8000c0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c0e:	d104      	bne.n	8000c1a <__addsf3+0x126>
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	bf28      	it	cs
 8000c14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c18:	4770      	bx	lr
 8000c1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c1e:	bf3c      	itt	cc
 8000c20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bxcc	lr
 8000c26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	4770      	bx	lr
 8000c34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c38:	bf16      	itet	ne
 8000c3a:	4608      	movne	r0, r1
 8000c3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c40:	4601      	movne	r1, r0
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	bf06      	itte	eq
 8000c46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4a:	ea90 0f01 	teqeq	r0, r1
 8000c4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_ui2f>:
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e004      	b.n	8000c64 <__aeabi_i2f+0x8>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_i2f>:
 8000c5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c60:	bf48      	it	mi
 8000c62:	4240      	negmi	r0, r0
 8000c64:	ea5f 0c00 	movs.w	ip, r0
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c70:	4601      	mov	r1, r0
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	e01c      	b.n	8000cb2 <__aeabi_l2f+0x2a>

08000c78 <__aeabi_ul2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e00a      	b.n	8000c9c <__aeabi_l2f+0x14>
 8000c86:	bf00      	nop

08000c88 <__aeabi_l2f>:
 8000c88:	ea50 0201 	orrs.w	r2, r0, r1
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c94:	d502      	bpl.n	8000c9c <__aeabi_l2f+0x14>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	ea5f 0c01 	movs.w	ip, r1
 8000ca0:	bf02      	ittt	eq
 8000ca2:	4684      	moveq	ip, r0
 8000ca4:	4601      	moveq	r1, r0
 8000ca6:	2000      	moveq	r0, #0
 8000ca8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cac:	bf08      	it	eq
 8000cae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cb6:	fabc f28c 	clz	r2, ip
 8000cba:	3a08      	subs	r2, #8
 8000cbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc0:	db10      	blt.n	8000ce4 <__aeabi_l2f+0x5c>
 8000cc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	f020 0001 	biceq.w	r0, r0, #1
 8000ce2:	4770      	bx	lr
 8000ce4:	f102 0220 	add.w	r2, r2, #32
 8000ce8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_f2iz>:
 8000d04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d08:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d0c:	d30f      	bcc.n	8000d2e <__aeabi_f2iz+0x2a>
 8000d0e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d12:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d16:	d90d      	bls.n	8000d34 <__aeabi_f2iz+0x30>
 8000d18:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d20:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d24:	fa23 f002 	lsr.w	r0, r3, r2
 8000d28:	bf18      	it	ne
 8000d2a:	4240      	negne	r0, r0
 8000d2c:	4770      	bx	lr
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	4770      	bx	lr
 8000d34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d38:	d101      	bne.n	8000d3e <__aeabi_f2iz+0x3a>
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	d105      	bne.n	8000d4a <__aeabi_f2iz+0x46>
 8000d3e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d48:	4770      	bx	lr
 8000d4a:	f04f 0000 	mov.w	r0, #0
 8000d4e:	4770      	bx	lr

08000d50 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <getposition+0x14>
		rval =0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d101      	bne.n	8000d6e <getposition+0x1e>
		rval =4;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d101      	bne.n	8000d78 <getposition+0x28>
		rval =8;
 8000d74:	2308      	movs	r3, #8
 8000d76:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d101      	bne.n	8000d82 <getposition+0x32>
		rval =12;
 8000d7e:	230c      	movs	r3, #12
 8000d80:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d101      	bne.n	8000d8c <getposition+0x3c>
		rval =16;
 8000d88:	2310      	movs	r3, #16
 8000d8a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	2b05      	cmp	r3, #5
 8000d90:	d101      	bne.n	8000d96 <getposition+0x46>
		rval =20;
 8000d92:	2314      	movs	r3, #20
 8000d94:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	2b06      	cmp	r3, #6
 8000d9a:	d101      	bne.n	8000da0 <getposition+0x50>
		rval =24;
 8000d9c:	2318      	movs	r3, #24
 8000d9e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	2b07      	cmp	r3, #7
 8000da4:	d101      	bne.n	8000daa <getposition+0x5a>
		rval =28;
 8000da6:	231c      	movs	r3, #28
 8000da8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d101      	bne.n	8000db4 <getposition+0x64>
		rval =0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	2b09      	cmp	r3, #9
 8000db8:	d101      	bne.n	8000dbe <getposition+0x6e>
		rval =4;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	2b0a      	cmp	r3, #10
 8000dc2:	d101      	bne.n	8000dc8 <getposition+0x78>
		rval =8;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	2b0b      	cmp	r3, #11
 8000dcc:	d101      	bne.n	8000dd2 <getposition+0x82>
		rval =12;
 8000dce:	230c      	movs	r3, #12
 8000dd0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	2b0c      	cmp	r3, #12
 8000dd6:	d101      	bne.n	8000ddc <getposition+0x8c>
		rval =16;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	2b0d      	cmp	r3, #13
 8000de0:	d101      	bne.n	8000de6 <getposition+0x96>
		rval =20;
 8000de2:	2314      	movs	r3, #20
 8000de4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	2b0e      	cmp	r3, #14
 8000dea:	d101      	bne.n	8000df0 <getposition+0xa0>
		rval =24;
 8000dec:	2318      	movs	r3, #24
 8000dee:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	2b0f      	cmp	r3, #15
 8000df4:	d101      	bne.n	8000dfa <getposition+0xaa>
		rval =28;
 8000df6:	231c      	movs	r3, #28
 8000df8:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]


}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
	...

08000e08 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	460b      	mov	r3, r1
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4a69      	ldr	r2, [pc, #420]	; (8000fc0 <pinmode+0x1b8>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d106      	bne.n	8000e2c <pinmode+0x24>
		GPIOA_Clock_Enable();
 8000e1e:	4b69      	ldr	r3, [pc, #420]	; (8000fc4 <pinmode+0x1bc>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a68      	ldr	r2, [pc, #416]	; (8000fc4 <pinmode+0x1bc>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6193      	str	r3, [r2, #24]
 8000e2a:	e010      	b.n	8000e4e <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4a66      	ldr	r2, [pc, #408]	; (8000fc8 <pinmode+0x1c0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d106      	bne.n	8000e42 <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8000e34:	4b63      	ldr	r3, [pc, #396]	; (8000fc4 <pinmode+0x1bc>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a62      	ldr	r2, [pc, #392]	; (8000fc4 <pinmode+0x1bc>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	e005      	b.n	8000e4e <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 8000e42:	4b60      	ldr	r3, [pc, #384]	; (8000fc4 <pinmode+0x1bc>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a5f      	ldr	r2, [pc, #380]	; (8000fc4 <pinmode+0x1bc>)
 8000e48:	f043 0310 	orr.w	r3, r3, #16
 8000e4c:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8000e4e:	897b      	ldrh	r3, [r7, #10]
 8000e50:	2b07      	cmp	r3, #7
 8000e52:	d856      	bhi.n	8000f02 <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 8000e54:	897b      	ldrh	r3, [r7, #10]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff7a 	bl	8000d50 <getposition>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	230f      	movs	r3, #15
 8000e62:	4093      	lsls	r3, r2
 8000e64:	43da      	mvns	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b08      	cmp	r3, #8
 8000e74:	d002      	beq.n	8000e7c <pinmode+0x74>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b18      	cmp	r3, #24
 8000e7a:	d133      	bne.n	8000ee4 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b18      	cmp	r3, #24
 8000e80:	d117      	bne.n	8000eb2 <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000e82:	897b      	ldrh	r3, [r7, #10]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff63 	bl	8000d50 <getposition>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	2308      	movs	r3, #8
 8000e90:	fa03 f202 	lsl.w	r2, r3, r2
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	897a      	ldrh	r2, [r7, #10]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000eb0:	e081      	b.n	8000fb6 <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000eb2:	897b      	ldrh	r3, [r7, #10]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff4b 	bl	8000d50 <getposition>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	fa03 f202 	lsl.w	r2, r3, r2
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	897a      	ldrh	r2, [r7, #10]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	43d2      	mvns	r2, r2
 8000edc:	401a      	ands	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000ee2:	e068      	b.n	8000fb6 <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 8000ee4:	897b      	ldrh	r3, [r7, #10]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff32 	bl	8000d50 <getposition>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	fa03 f202 	lsl.w	r2, r3, r2
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	601a      	str	r2, [r3, #0]

	}



}
 8000f00:	e059      	b.n	8000fb6 <pinmode+0x1ae>
	else if(pin>7){
 8000f02:	897b      	ldrh	r3, [r7, #10]
 8000f04:	2b07      	cmp	r3, #7
 8000f06:	d956      	bls.n	8000fb6 <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 8000f08:	897b      	ldrh	r3, [r7, #10]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff20 	bl	8000d50 <getposition>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461a      	mov	r2, r3
 8000f14:	230f      	movs	r3, #15
 8000f16:	4093      	lsls	r3, r2
 8000f18:	43da      	mvns	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	d002      	beq.n	8000f30 <pinmode+0x128>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b18      	cmp	r3, #24
 8000f2e:	d133      	bne.n	8000f98 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b18      	cmp	r3, #24
 8000f34:	d117      	bne.n	8000f66 <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000f36:	897b      	ldrh	r3, [r7, #10]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff09 	bl	8000d50 <getposition>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	2308      	movs	r3, #8
 8000f44:	fa03 f202 	lsl.w	r2, r3, r2
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	897a      	ldrh	r2, [r7, #10]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000f64:	e027      	b.n	8000fb6 <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000f66:	897b      	ldrh	r3, [r7, #10]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fef1 	bl	8000d50 <getposition>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	2308      	movs	r3, #8
 8000f74:	fa03 f202 	lsl.w	r2, r3, r2
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	897a      	ldrh	r2, [r7, #10]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	43d2      	mvns	r2, r2
 8000f90:	401a      	ands	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000f96:	e00e      	b.n	8000fb6 <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8000f98:	897b      	ldrh	r3, [r7, #10]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fed8 	bl	8000d50 <getposition>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	fa03 f202 	lsl.w	r2, r3, r2
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	605a      	str	r2, [r3, #4]
}
 8000fb4:	e7ff      	b.n	8000fb6 <pinmode+0x1ae>
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010c00 	.word	0x40010c00

08000fcc <MPU6050_init>:
 */


#include "MPU6050.h"

void MPU6050_init(uint32_t clk){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	I2C_INIT(I2C1,clk);
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	481f      	ldr	r0, [pc, #124]	; (8001054 <MPU6050_init+0x88>)
 8000fd8:	f000 f89a 	bl	8001110 <I2C_INIT>
	uint8_t check[2]={0,0};
 8000fdc:	2300      	movs	r3, #0
 8000fde:	733b      	strb	r3, [r7, #12]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	737b      	strb	r3, [r7, #13]
	uint8_t Data=0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	72fb      	strb	r3, [r7, #11]
	MPU6050_read(WHO_AM_I_REG, check, 1);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2201      	movs	r2, #1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	2075      	movs	r0, #117	; 0x75
 8000ff2:	f000 f867 	bl	80010c4 <MPU6050_read>
	if(check[0] !=104){
 8000ff6:	7b3b      	ldrb	r3, [r7, #12]
 8000ff8:	2b68      	cmp	r3, #104	; 0x68
 8000ffa:	d000      	beq.n	8000ffe <MPU6050_init+0x32>
		while(1);
 8000ffc:	e7fe      	b.n	8000ffc <MPU6050_init+0x30>
	}
	if(check[0]==104){ //work corect so we will init it
 8000ffe:	7b3b      	ldrb	r3, [r7, #12]
 8001000:	2b68      	cmp	r3, #104	; 0x68
 8001002:	d123      	bne.n	800104c <MPU6050_init+0x80>



		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register

		Data = 0x05;
 8001004:	2305      	movs	r3, #5
 8001006:	72fb      	strb	r3, [r7, #11]
		MPU6050_write(0x1A, &Data, 1);
 8001008:	f107 030b 	add.w	r3, r7, #11
 800100c:	2201      	movs	r2, #1
 800100e:	4619      	mov	r1, r3
 8001010:	201a      	movs	r0, #26
 8001012:	f000 f821 	bl	8001058 <MPU6050_write>
		//		Data = 0x07;
		//		MPU6050_write(SMPLRT_DIV_REG, &Data, 1);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x10;
 8001016:	2310      	movs	r3, #16
 8001018:	72fb      	strb	r3, [r7, #11]
		MPU6050_write(ACCEL_CONFIG_REG, &Data, 1);
 800101a:	f107 030b 	add.w	r3, r7, #11
 800101e:	2201      	movs	r2, #1
 8001020:	4619      	mov	r1, r3
 8001022:	201c      	movs	r0, #28
 8001024:	f000 f818 	bl	8001058 <MPU6050_write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x08;
 8001028:	2308      	movs	r3, #8
 800102a:	72fb      	strb	r3, [r7, #11]
		MPU6050_write(GYRO_CONFIG_REG, &Data, 1);
 800102c:	f107 030b 	add.w	r3, r7, #11
 8001030:	2201      	movs	r2, #1
 8001032:	4619      	mov	r1, r3
 8001034:	201b      	movs	r0, #27
 8001036:	f000 f80f 	bl	8001058 <MPU6050_write>


		Data = 0x00;
 800103a:	2300      	movs	r3, #0
 800103c:	72fb      	strb	r3, [r7, #11]
		MPU6050_write(PWR_MGMT_1_REG, &Data, 1);
 800103e:	f107 030b 	add.w	r3, r7, #11
 8001042:	2201      	movs	r2, #1
 8001044:	4619      	mov	r1, r3
 8001046:	206b      	movs	r0, #107	; 0x6b
 8001048:	f000 f806 	bl	8001058 <MPU6050_write>

	}
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40005400 	.word	0x40005400

08001058 <MPU6050_write>:

void MPU6050_write(uint8_t register_addres, uint8_t *data, uint8_t Data_Length){
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af02      	add	r7, sp, #8
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]

	uint8_t i=0;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[3];
	buffer[0] = (uint8_t)(register_addres);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	733b      	strb	r3, [r7, #12]


	for( i =1 ; i< (Data_Length+1) ; i++){
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e00d      	b.n	8001092 <MPU6050_write+0x3a>

		buffer[i]= data[i-1];
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	3b01      	subs	r3, #1
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	441a      	add	r2, r3
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	f107 0110 	add.w	r1, r7, #16
 8001086:	440b      	add	r3, r1
 8001088:	f803 2c04 	strb.w	r2, [r3, #-4]
	for( i =1 ; i< (Data_Length+1) ; i++){
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	3301      	adds	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	3301      	adds	r3, #1
 8001098:	429a      	cmp	r2, r3
 800109a:	dbec      	blt.n	8001076 <MPU6050_write+0x1e>
	}

	I2C_Master_Send(I2C1, buffer, Data_Length+1, MPU6050_addres, WithStop, Start);
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	3301      	adds	r3, #1
 80010a0:	461a      	mov	r2, r3
 80010a2:	f107 010c 	add.w	r1, r7, #12
 80010a6:	2300      	movs	r3, #0
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	2300      	movs	r3, #0
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2368      	movs	r3, #104	; 0x68
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <MPU6050_write+0x68>)
 80010b2:	f000 f8d1 	bl	8001258 <I2C_Master_Send>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40005400 	.word	0x40005400

080010c4 <MPU6050_read>:

void MPU6050_read(uint16_t register_addres, uint8_t *data, uint8_t Data_Length){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	80fb      	strh	r3, [r7, #6]
 80010d0:	4613      	mov	r3, r2
 80010d2:	717b      	strb	r3, [r7, #5]

	uint8_t buffer[2];
	buffer[0] = (uint8_t)(register_addres);
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	733b      	strb	r3, [r7, #12]
	I2C_Master_Send(I2C1, buffer, 1, MPU6050_addres, WithoutStop, Start);
 80010da:	f107 010c 	add.w	r1, r7, #12
 80010de:	2300      	movs	r3, #0
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2368      	movs	r3, #104	; 0x68
 80010e8:	2201      	movs	r2, #1
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <MPU6050_read+0x48>)
 80010ec:	f000 f8b4 	bl	8001258 <I2C_Master_Send>
	I2C_Master_Recive(I2C1, data, Data_Length, MPU6050_addres, WithStop, RepeatedSart);
 80010f0:	797a      	ldrb	r2, [r7, #5]
 80010f2:	2301      	movs	r3, #1
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	2300      	movs	r3, #0
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2368      	movs	r3, #104	; 0x68
 80010fc:	6839      	ldr	r1, [r7, #0]
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <MPU6050_read+0x48>)
 8001100:	f000 f8fc 	bl	80012fc <I2C_Master_Recive>
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40005400 	.word	0x40005400

08001110 <I2C_INIT>:
#include "STM32_I2C_DRIVER.h"
//SM 100K
//master only
//no stretch

void I2C_INIT(I2C_TypeDef* I2Cx,uint32_t APB_clock){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	if(I2Cx==I2C1){
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a3a      	ldr	r2, [pc, #232]	; (8001208 <I2C_INIT+0xf8>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d116      	bne.n	8001150 <I2C_INIT+0x40>
		I2C1_Clock_Enable();
 8001122:	4b3a      	ldr	r3, [pc, #232]	; (800120c <I2C_INIT+0xfc>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a39      	ldr	r2, [pc, #228]	; (800120c <I2C_INIT+0xfc>)
 8001128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800112c:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <I2C_INIT+0xfc>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a36      	ldr	r2, [pc, #216]	; (800120c <I2C_INIT+0xfc>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	6193      	str	r3, [r2, #24]
		//PB6 I2C SCL
		//PB7 IC2 SDA
		pinmode(GPIOB, pin6,GPIO_MODE_OUTPUT_AF_Open_drain_Speed10);
 800113a:	220d      	movs	r2, #13
 800113c:	2106      	movs	r1, #6
 800113e:	4834      	ldr	r0, [pc, #208]	; (8001210 <I2C_INIT+0x100>)
 8001140:	f7ff fe62 	bl	8000e08 <pinmode>
		pinmode(GPIOB, pin7,GPIO_MODE_OUTPUT_AF_Open_drain_Speed10);
 8001144:	220d      	movs	r2, #13
 8001146:	2107      	movs	r1, #7
 8001148:	4831      	ldr	r0, [pc, #196]	; (8001210 <I2C_INIT+0x100>)
 800114a:	f7ff fe5d 	bl	8000e08 <pinmode>
 800114e:	e019      	b.n	8001184 <I2C_INIT+0x74>

	}
	else if(I2Cx==I2C2){
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a30      	ldr	r2, [pc, #192]	; (8001214 <I2C_INIT+0x104>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d115      	bne.n	8001184 <I2C_INIT+0x74>
		I2C2_Clock_Enable();
 8001158:	4b2c      	ldr	r3, [pc, #176]	; (800120c <I2C_INIT+0xfc>)
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	4a2b      	ldr	r2, [pc, #172]	; (800120c <I2C_INIT+0xfc>)
 800115e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001162:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <I2C_INIT+0xfc>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a28      	ldr	r2, [pc, #160]	; (800120c <I2C_INIT+0xfc>)
 800116a:	f043 0308 	orr.w	r3, r3, #8
 800116e:	6193      	str	r3, [r2, #24]
		//PB10 I2C SCL
		//PB11 IC2 SDA
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_Open_drain_Speed10);
 8001170:	220d      	movs	r2, #13
 8001172:	210a      	movs	r1, #10
 8001174:	4826      	ldr	r0, [pc, #152]	; (8001210 <I2C_INIT+0x100>)
 8001176:	f7ff fe47 	bl	8000e08 <pinmode>
		pinmode(GPIOB, pin11,GPIO_MODE_OUTPUT_AF_Open_drain_Speed10);
 800117a:	220d      	movs	r2, #13
 800117c:	210b      	movs	r1, #11
 800117e:	4824      	ldr	r0, [pc, #144]	; (8001210 <I2C_INIT+0x100>)
 8001180:	f7ff fe42 	bl	8000e08 <pinmode>
	}

	//• Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	//Bits 5:0 FREQ[5:0]: Peripheral clock frequency
	I2Cx->CR2 &=~(0b111111<<0);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |=((APB_clock/1000000)<<0);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	4920      	ldr	r1, [pc, #128]	; (8001218 <I2C_INIT+0x108>)
 8001198:	fba1 1303 	umull	r1, r3, r1, r3
 800119c:	0c9b      	lsrs	r3, r3, #18
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	605a      	str	r2, [r3, #4]
	//Bits 11:0 CCR[11:0]: Clock control register in Fm/Sm mode (Master mode)
	//• Configure the clock control registers
	I2Cx->CCR &=~(0b11111111111<<0);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011ac:	f023 0307 	bic.w	r3, r3, #7
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	61d3      	str	r3, [r2, #28]
	I2Cx->CCR |=((APB_clock/1000)/(2*100));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69da      	ldr	r2, [r3, #28]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	099b      	lsrs	r3, r3, #6
 80011bc:	4917      	ldr	r1, [pc, #92]	; (800121c <I2C_INIT+0x10c>)
 80011be:	fba1 1303 	umull	r1, r3, r1, r3
 80011c2:	099b      	lsrs	r3, r3, #6
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	61da      	str	r2, [r3, #28]
	//• Configure the rise time register
	//Bits 5:0 TRISE[5:0]: Maximum rise time in Fm/Sm mode (Master mode)
	I2Cx->TRISE &=(0b111111<<0);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	621a      	str	r2, [r3, #32]
	I2Cx->TRISE |=(((APB_clock/1000000)/2)+1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1a      	ldr	r2, [r3, #32]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	490e      	ldr	r1, [pc, #56]	; (8001218 <I2C_INIT+0x108>)
 80011de:	fba1 1303 	umull	r1, r3, r1, r3
 80011e2:	0cdb      	lsrs	r3, r3, #19
 80011e4:	3301      	adds	r3, #1
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	621a      	str	r2, [r3, #32]

	I2C_Acknowledge(I2Cx,ENABLE);
 80011ec:	2101      	movs	r1, #1
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f99b 	bl	800152a <I2C_Acknowledge>
	//• Program the I2C_CR1 register to enable the peripheral
	//Bit 0 PE: Peripheral enable
	I2Cx->CR1|=(1<<0);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f043 0201 	orr.w	r2, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	601a      	str	r2, [r3, #0]

}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40005400 	.word	0x40005400
 800120c:	40021000 	.word	0x40021000
 8001210:	40010c00 	.word	0x40010c00
 8001214:	40005800 	.word	0x40005800
 8001218:	431bde83 	.word	0x431bde83
 800121c:	053e2d63 	.word	0x053e2d63

08001220 <I2C_Start_PIT>:
void I2C_Start_PIT(I2C_TypeDef* I2Cx,Repeated_Start Start){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]

	if(Start !=RepeatedSart){
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d007      	beq.n	8001242 <I2C_Start_PIT+0x22>
		//check the buss
		while(I2C_GetFlagStatus(I2Cx,I2C_FLAG_BUSY));
 8001232:	bf00      	nop
 8001234:	2100      	movs	r1, #0
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f8c4 	bl	80013c4 <I2C_GetFlagStatus>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f8      	bne.n	8001234 <I2C_Start_PIT+0x14>

	}
	//Bit 8 START: Start generation
	I2Cx->CR1 |=(1<<8);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <I2C_Master_Send>:

void I2C_Master_Send(I2C_TypeDef* I2Cx,uint8_t* data, uint32_t dataLen,uint16_t devAdd,Stop_Condition Stop , Repeated_Start start){
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	807b      	strh	r3, [r7, #2]
	int i=0;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
	I2C_Start_PIT(I2Cx,start);//start
 800126a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff ffd5 	bl	8001220 <I2C_Start_PIT>
	while(!I2C_GetFlagStatus(I2Cx, EV5));//Start condition generated.
 8001276:	bf00      	nop
 8001278:	2101      	movs	r1, #1
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 f8a2 	bl	80013c4 <I2C_GetFlagStatus>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f8      	beq.n	8001278 <I2C_Master_Send+0x20>
	I2C_SEND_ADRRESS(I2Cx, devAdd, i2c_direction_Write);
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2200      	movs	r2, #0
 800128c:	4619      	mov	r1, r3
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 f928 	bl	80014e4 <I2C_SEND_ADRRESS>
	//2.Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while( !(I2C_GetFlagStatus( I2Cx, EV6)));
 8001294:	bf00      	nop
 8001296:	2102      	movs	r1, #2
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 f893 	bl	80013c4 <I2C_GetFlagStatus>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f8      	beq.n	8001296 <I2C_Master_Send+0x3e>

	while( !(I2C_GetFlagStatus( I2Cx, MASTER_BYTE_TRANSMITING)));//Busy MSL TXE TRA
 80012a4:	bf00      	nop
 80012a6:	4914      	ldr	r1, [pc, #80]	; (80012f8 <I2C_Master_Send+0xa0>)
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f88b 	bl	80013c4 <I2C_GetFlagStatus>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f8      	beq.n	80012a6 <I2C_Master_Send+0x4e>
	for(;i<dataLen;i++){
 80012b4:	e011      	b.n	80012da <I2C_Master_Send+0x82>
		I2Cx->DR=data[i];
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	611a      	str	r2, [r3, #16]
		while(!(I2C_GetFlagStatus( I2Cx, EV8)));
 80012c4:	bf00      	nop
 80012c6:	2103      	movs	r1, #3
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 f87b 	bl	80013c4 <I2C_GetFlagStatus>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f8      	beq.n	80012c6 <I2C_Master_Send+0x6e>
	for(;i<dataLen;i++){
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d8e9      	bhi.n	80012b6 <I2C_Master_Send+0x5e>
	}
	if(Stop == WithStop){
 80012e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <I2C_Master_Send+0x98>
		//Send Stop Condition
		I2C_Stop_PIT(I2Cx);
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f90e 	bl	800150c <I2C_Stop_PIT>
	}

}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	00070080 	.word	0x00070080

080012fc <I2C_Master_Recive>:
void I2C_Master_Recive(I2C_TypeDef* I2Cx,uint8_t* data, uint32_t dataLen,uint16_t devAdd,Stop_Condition Stop , Repeated_Start start){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	807b      	strh	r3, [r7, #2]

	int i=dataLen;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	617b      	str	r3, [r7, #20]
	I2C_Acknowledge(I2Cx,ENABLE);
 800130e:	2101      	movs	r1, #1
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f000 f90a 	bl	800152a <I2C_Acknowledge>
	I2C_Start_PIT(I2Cx,start);//start
 8001316:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800131a:	4619      	mov	r1, r3
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f7ff ff7f 	bl	8001220 <I2C_Start_PIT>

	while(!I2C_GetFlagStatus(I2Cx, EV5));//Start condition generated.
 8001322:	bf00      	nop
 8001324:	2101      	movs	r1, #1
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f84c 	bl	80013c4 <I2C_GetFlagStatus>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f8      	beq.n	8001324 <I2C_Master_Recive+0x28>

	I2C_SEND_ADRRESS(I2Cx, devAdd, i2c_direction_Read);
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2201      	movs	r2, #1
 8001338:	4619      	mov	r1, r3
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 f8d2 	bl	80014e4 <I2C_SEND_ADRRESS>
	//2.Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while( !(I2C_GetFlagStatus( I2Cx, EV6)));
 8001340:	bf00      	nop
 8001342:	2102      	movs	r1, #2
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f000 f83d 	bl	80013c4 <I2C_GetFlagStatus>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f8      	beq.n	8001342 <I2C_Master_Recive+0x46>

	if(dataLen<=1){
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d804      	bhi.n	8001360 <I2C_Master_Recive+0x64>
		I2C_Acknowledge(I2Cx,DISABLE);
 8001356:	2100      	movs	r1, #0
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 f8e6 	bl	800152a <I2C_Acknowledge>
 800135e:	e01e      	b.n	800139e <I2C_Master_Recive+0xa2>
	}
	else{
		I2C_Acknowledge(I2Cx,ENABLE);
 8001360:	2101      	movs	r1, #1
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 f8e1 	bl	800152a <I2C_Acknowledge>
	}

	for(;i>=1;i--){
 8001368:	e019      	b.n	800139e <I2C_Master_Recive+0xa2>
		while( !(I2C_GetFlagStatus( I2Cx, EV7)));
 800136a:	bf00      	nop
 800136c:	2106      	movs	r1, #6
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 f828 	bl	80013c4 <I2C_GetFlagStatus>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f8      	beq.n	800136c <I2C_Master_Recive+0x70>
		*data = I2Cx->DR ;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	701a      	strb	r2, [r3, #0]
		++data;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3301      	adds	r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
		if(i==2){
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d103      	bne.n	8001398 <I2C_Master_Recive+0x9c>
				I2C_Acknowledge(I2Cx,DISABLE);
 8001390:	2100      	movs	r1, #0
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 f8c9 	bl	800152a <I2C_Acknowledge>
	for(;i>=1;i--){
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3b01      	subs	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dce2      	bgt.n	800136a <I2C_Master_Recive+0x6e>
			}
	}

	//I2C_Acknowledge(I2Cx,DISABLE);
	I2C_Acknowledge(I2Cx,ENABLE);
 80013a4:	2101      	movs	r1, #1
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 f8bf 	bl	800152a <I2C_Acknowledge>
	if(Stop == WithStop){
 80013ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <I2C_Master_Recive+0xbe>
		//Send Stop Condition
		I2C_Stop_PIT(I2Cx);
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f000 f8a9 	bl	800150c <I2C_Stop_PIT>
	}

	//I2C_Acknowledge(I2Cx,ENABLE);
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <I2C_GetFlagStatus>:



FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status Flag)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	FlagStatus bitstatus = RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	77fb      	strb	r3, [r7, #31]
	volatile uint32_t dummy_Read;
	uint32_t flag1 = 0 ,flag2 =0 , lastevent =0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]


	switch(Flag)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d806      	bhi.n	80013f2 <I2C_GetFlagStatus+0x2e>
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d235      	bcs.n	8001454 <I2C_GetFlagStatus+0x90>
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d017      	beq.n	800141c <I2C_GetFlagStatus+0x58>
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d821      	bhi.n	8001434 <I2C_GetFlagStatus+0x70>
 80013f0:	e007      	b.n	8001402 <I2C_GetFlagStatus+0x3e>
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d048      	beq.n	8001488 <I2C_GetFlagStatus+0xc4>
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d339      	bcc.n	800146e <I2C_GetFlagStatus+0xaa>
 80013fa:	4a39      	ldr	r2, [pc, #228]	; (80014e0 <I2C_GetFlagStatus+0x11c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d050      	beq.n	80014a2 <I2C_GetFlagStatus+0xde>
 8001400:	e067      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0).

		if(((I2Cx->SR2)>>1) & 1 )
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	085b      	lsrs	r3, r3, #1
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <I2C_GetFlagStatus+0x52>
			bitstatus = SET;
 8001410:	2301      	movs	r3, #1
 8001412:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8001414:	e05d      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	77fb      	strb	r3, [r7, #31]
		break;
 800141a:	e05a      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0		the interface is disabled (PE=0).

		if( (I2Cx->SR1>>0) & 1 )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <I2C_GetFlagStatus+0x6a>
			bitstatus = SET;
 8001428:	2301      	movs	r3, #1
 800142a:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 800142c:	e051      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	77fb      	strb	r3, [r7, #31]
		break;
 8001432:	e04e      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
		//			0: No end of address transmission
		//			1: End of address transmission
		//			– For 10-bit addressing, the bit is set after the ACK of the 2nd byte.
		//			– For 7-bit addressing, the bit is set after the ACK of the byte.
		//			Note: ADDR is not set after a NACK reception
		if( (I2Cx->SR1>>1) & 1 )
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	085b      	lsrs	r3, r3, #1
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <I2C_GetFlagStatus+0x84>
			bitstatus = SET;
 8001442:	2301      	movs	r3, #1
 8001444:	77fb      	strb	r3, [r7, #31]
 8001446:	e001      	b.n	800144c <I2C_GetFlagStatus+0x88>
		else
			bitstatus = RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	77fb      	strb	r3, [r7, #31]
		dummy_Read = I2Cx->SR2;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	60fb      	str	r3, [r7, #12]

		break;
 8001452:	e03e      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
		//				– Cleared by software writing to the DR register or by hardware after a start or a stop condition
		//				or when PE=0.
		//				TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
		//				Note: TxE is not cleared by writing the first data being transmitted, or by writing data when
		//				BTF is set, as in both cases the data register is still empty
		if( (I2Cx->SR1>>7) & 1 )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	09db      	lsrs	r3, r3, #7
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <I2C_GetFlagStatus+0xa4>
			bitstatus = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;


		break;
 8001466:	e034      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	77fb      	strb	r3, [r7, #31]
		break;
 800146c:	e031      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
		//					– Cleared by software reading SR1 followed by either a read or write in the DR register or by
		//					hardware after a start or a stop condition in transmission or when PE=0.
		//					Note: The BTF bit is not set after a NACK reception
		//					The BTF bit is not set if next byte to be transmitted is the PEC (TRA=1 in I2C_SR2
		//					register and PEC=1 in I2C_CR1 register)
		if( (I2Cx->SR1>>2) & 1 )
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <I2C_GetFlagStatus+0xbe>
			bitstatus = SET;
 800147c:	2301      	movs	r3, #1
 800147e:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;


		break;
 8001480:	e027      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	77fb      	strb	r3, [r7, #31]
		break;
 8001486:	e024      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
		//					– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		//					– Cleared by software reading or writing the DR register or by hardware when PE=0.
		//					RxNE is not set in case of ARLO event.
		//					Note: RxNE is not cleared by reading data when BTF is set, as the data register is still full

		if( (I2Cx->SR1>>6) & 1 )
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	099b      	lsrs	r3, r3, #6
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <I2C_GetFlagStatus+0xd8>
			bitstatus = SET;
 8001496:	2301      	movs	r3, #1
 8001498:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;


		break;
 800149a:	e01a      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	77fb      	strb	r3, [r7, #31]
		break;
 80014a0:	e017      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
	}
	case MASTER_BYTE_TRANSMITING:
	{

		/*Read The I2Cx Statu Register*/
		flag1 = I2Cx->SR1;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	617b      	str	r3, [r7, #20]
		flag2 = flag2<<16;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	041b      	lsls	r3, r3, #16
 80014b2:	617b      	str	r3, [r7, #20]
		/*Get the last Event value from I2C Statu Register*/
		lastevent = (flag1 | flag2) & ((uint32_t) 0xffffffff);
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
		//Check whether lastevent contain THE I2C_EVENT
		if((lastevent & MASTER_BYTE_TRANSMITING) == MASTER_BYTE_TRANSMITING)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <I2C_GetFlagStatus+0x11c>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <I2C_GetFlagStatus+0x11c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d102      	bne.n	80014ce <I2C_GetFlagStatus+0x10a>
			bitstatus = SET;
 80014c8:	2301      	movs	r3, #1
 80014ca:	77fb      	strb	r3, [r7, #31]
 80014cc:	e001      	b.n	80014d2 <I2C_GetFlagStatus+0x10e>
		else
			bitstatus = RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	77fb      	strb	r3, [r7, #31]
	}
	}
	return bitstatus;
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3724      	adds	r7, #36	; 0x24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	00070080 	.word	0x00070080

080014e4 <I2C_SEND_ADRRESS>:

void I2C_SEND_ADRRESS(I2C_TypeDef* I2Cx,uint8_t address,uint8_t i2c_direction){
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
 80014f0:	4613      	mov	r3, r2
 80014f2:	70bb      	strb	r3, [r7, #2]

	I2Cx->DR = (address << 1 | i2c_direction);
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	005a      	lsls	r2, r3, #1
 80014f8:	78bb      	ldrb	r3, [r7, #2]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	611a      	str	r2, [r3, #16]

}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <I2C_Stop_PIT>:
void I2C_Stop_PIT(I2C_TypeDef* I2Cx){
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	//	0: No Stop generation.
	//	1: Stop generation after the current byte transfer or after the current Start condition is sent.
	//	In Slave mode:
	//	0: No Stop generation.
	//	1: Release the SCL and SDA lines after the current byte transfer
	I2Cx->CR1 |= (1<<9);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	601a      	str	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <I2C_Acknowledge>:

void I2C_Acknowledge(I2C_TypeDef *I2Cx,FunctionalState State)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	70fb      	strb	r3, [r7, #3]
	//	Bit 10 ACK: Acknowledge enable
	//	This bit is set and cleared by software and cleared by hardware when PE=0.
	//	0: No acknowledge returned
	//	1: Acknowledge returned after a byte is received (matched address or data)

	if(State != DISABLE)
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <I2C_Acknowledge+0x20>
	{
		/*Generate Stop Condition*/
		I2Cx->CR1 |= (1<<10);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	601a      	str	r2, [r3, #0]
	else
	{
		/*Disable  Stop Condition Generation*/
		I2Cx->CR1 &= ~(1<<10);
	}
}
 8001548:	e005      	b.n	8001556 <I2C_Acknowledge+0x2c>
		I2Cx->CR1 &= ~(1<<10);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	601a      	str	r2, [r3, #0]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <delay>:

}


//=======================================================================================
void delay(uint16_t time,uint8_t U,uint32_t clk){
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	603a      	str	r2, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	460b      	mov	r3, r1
 800156e:	717b      	strb	r3, [r7, #5]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 8001570:	4b4f      	ldr	r3, [pc, #316]	; (80016b0 <delay+0x150>)
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	4a4e      	ldr	r2, [pc, #312]	; (80016b0 <delay+0x150>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 800157c:	4b4d      	ldr	r3, [pc, #308]	; (80016b4 <delay+0x154>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <delay+0x154>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 800158c:	2301      	movs	r3, #1
 800158e:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 8001594:	2301      	movs	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
	uint32_t unit =1000;
 8001598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159c:	613b      	str	r3, [r7, #16]
	uint8_t  increase=2;
 800159e:	2302      	movs	r3, #2
 80015a0:	73fb      	strb	r3, [r7, #15]

	if (U == 0){
 80015a2:	797b      	ldrb	r3, [r7, #5]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10d      	bne.n	80015c4 <delay+0x64>
		unit = 1000;
 80015a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ac:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 100;
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d902      	bls.n	80015be <delay+0x5e>
 80015b8:	2364      	movs	r3, #100	; 0x64
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	e030      	b.n	8001620 <delay+0xc0>
		else increase = 10;
 80015be:	230a      	movs	r3, #10
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	e02d      	b.n	8001620 <delay+0xc0>
	}
	else {
		unit = 1000000;
 80015c4:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <delay+0x158>)
 80015c6:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 10;
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d902      	bls.n	80015d8 <delay+0x78>
 80015d2:	230a      	movs	r3, #10
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	e023      	b.n	8001620 <delay+0xc0>
		else increase = 5;
 80015d8:	2305      	movs	r3, #5
 80015da:	73fb      	strb	r3, [r7, #15]
	}

	while(user_flage==1){
 80015dc:	e020      	b.n	8001620 <delay+0xc0>
		user_top = (clk/unit*time)/( user_pre );
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	fb02 f203 	mul.w	r2, r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80015fa:	d30f      	bcc.n	800161c <delay+0xbc>

			if(user_pre>65530){
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001602:	4293      	cmp	r3, r2
 8001604:	d905      	bls.n	8001612 <delay+0xb2>
				user_pre=65530;
 8001606:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800160a:	617b      	str	r3, [r7, #20]
				user_flage=0;
 800160c:	2300      	movs	r3, #0
 800160e:	77fb      	strb	r3, [r7, #31]
 8001610:	e006      	b.n	8001620 <delay+0xc0>
			}
			else user_pre+=increase;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	4413      	add	r3, r2
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e001      	b.n	8001620 <delay+0xc0>

		}
		else{
			user_flage=0;
 800161c:	2300      	movs	r3, #0
 800161e:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 8001620:	7ffb      	ldrb	r3, [r7, #31]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d0db      	beq.n	80015de <delay+0x7e>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001626:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <delay+0x154>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <delay+0x154>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <delay+0x154>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <delay+0x154>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0204 	orr.w	r2, r2, #4
 8001644:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <delay+0x154>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <delay+0x154>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0201 	orr.w	r2, r2, #1
 8001654:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <delay+0x154>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <delay+0x154>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	3a01      	subs	r2, #1
 8001666:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <delay+0x154>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <delay+0x154>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0201 	orr.w	r2, r2, #1
 8001676:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <delay+0x154>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <delay+0x154>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <delay+0x15c>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <delay+0x160>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <delay+0x160>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 800169a:	bf00      	nop
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <delay+0x15c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1fb      	bne.n	800169c <delay+0x13c>

	}
}
 80016a4:	bf00      	nop
 80016a6:	3724      	adds	r7, #36	; 0x24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	2000001c 	.word	0x2000001c
 80016b8:	000f4240 	.word	0x000f4240
 80016bc:	20000018 	.word	0x20000018
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 80016d2:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <SPWM_timer_INIT+0x100>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b3a      	ldr	r3, [pc, #232]	; (80017c4 <SPWM_timer_INIT+0x100>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d12f      	bne.n	8001748 <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 80016e8:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <SPWM_timer_INIT+0x100>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699a      	ldr	r2, [r3, #24]
 80016ee:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <SPWM_timer_INIT+0x100>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016f6:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 80016f8:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <SPWM_timer_INIT+0x100>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	699a      	ldr	r2, [r3, #24]
 80016fe:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <SPWM_timer_INIT+0x100>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001706:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <SPWM_timer_INIT+0x100>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <SPWM_timer_INIT+0x100>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0208 	orr.w	r2, r2, #8
 8001716:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <SPWM_timer_INIT+0x100>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699a      	ldr	r2, [r3, #24]
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <SPWM_timer_INIT+0x100>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001726:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8001728:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <SPWM_timer_INIT+0x100>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6a1a      	ldr	r2, [r3, #32]
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <SPWM_timer_INIT+0x100>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0210 	orr.w	r2, r2, #16
 8001736:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8001738:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <SPWM_timer_INIT+0x100>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6a1a      	ldr	r2, [r3, #32]
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <SPWM_timer_INIT+0x100>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <SPWM_timer_INIT+0x100>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <SPWM_timer_INIT+0x100>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001756:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <SPWM_timer_INIT+0x100>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <SPWM_timer_INIT+0x100>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <SPWM_timer_INIT+0x100>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <SPWM_timer_INIT+0x100>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <SPWM_timer_INIT+0x100>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <SPWM_timer_INIT+0x100>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001786:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <SPWM_timer_INIT+0x100>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <SPWM_timer_INIT+0x100>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <SPWM_timer_INIT+0x100>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <SPWM_timer_INIT+0x100>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <SPWM_timer_INIT+0x100>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SPWM_timer_INIT+0x100>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000000 	.word	0x20000000

080017c8 <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <TIM2_IRQHandler+0x34>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <TIM2_IRQHandler+0x34>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <TIM2_IRQHandler+0x38>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <TIM2_IRQHandler+0x34>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <TIM2_IRQHandler+0x34>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	2000001c 	.word	0x2000001c
 8001800:	20000018 	.word	0x20000018

08001804 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin10,LOW);
	ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <TIM3_IRQHandler+0x30>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <TIM3_IRQHandler+0x30>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0201 	bic.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]
	ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <TIM3_IRQHandler+0x30>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <TIM3_IRQHandler+0x30>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	611a      	str	r2, [r3, #16]
	ISRcalback[0]();
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <TIM3_IRQHandler+0x34>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4798      	blx	r3
	//NVIC_TIM3_global_interrupt_Disable;
	//pinwrite(GPIOB, pin10,HIGH);
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200000d4 	.word	0x200000d4
 8001838:	200000c8 	.word	0x200000c8

0800183c <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <TIM4_IRQHandler+0x24>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <TIM4_IRQHandler+0x24>)
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	6113      	str	r3, [r2, #16]
	overflowtims++;
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <TIM4_IRQHandler+0x28>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <TIM4_IRQHandler+0x28>)
 8001856:	801a      	strh	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40000800 	.word	0x40000800
 8001864:	200000a6 	.word	0x200000a6

08001868 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 800186c:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <TIM1_UP_IRQHandler+0x17c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <TIM1_UP_IRQHandler+0x180>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d911      	bls.n	800189c <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 8001878:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <TIM1_UP_IRQHandler+0x184>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
		flage1=0;
 800187e:	4b5c      	ldr	r3, [pc, #368]	; (80019f0 <TIM1_UP_IRQHandler+0x188>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 8001884:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <TIM1_UP_IRQHandler+0x180>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a5a      	ldr	r2, [pc, #360]	; (80019f4 <TIM1_UP_IRQHandler+0x18c>)
 800188a:	7812      	ldrb	r2, [r2, #0]
 800188c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001890:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <TIM1_UP_IRQHandler+0x180>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4413      	add	r3, r2
 8001896:	4a53      	ldr	r2, [pc, #332]	; (80019e4 <TIM1_UP_IRQHandler+0x17c>)
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e018      	b.n	80018ce <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 800189c:	4b51      	ldr	r3, [pc, #324]	; (80019e4 <TIM1_UP_IRQHandler+0x17c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b63      	cmp	r3, #99	; 0x63
 80018a2:	d814      	bhi.n	80018ce <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 80018a4:	4b51      	ldr	r3, [pc, #324]	; (80019ec <TIM1_UP_IRQHandler+0x184>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
		flage1=1;
 80018aa:	4b51      	ldr	r3, [pc, #324]	; (80019f0 <TIM1_UP_IRQHandler+0x188>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 80018b0:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <TIM1_UP_IRQHandler+0x190>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b4f      	ldr	r3, [pc, #316]	; (80019f8 <TIM1_UP_IRQHandler+0x190>)
 80018bc:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 80018be:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <TIM1_UP_IRQHandler+0x180>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a4c      	ldr	r2, [pc, #304]	; (80019f4 <TIM1_UP_IRQHandler+0x18c>)
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80018ca:	4a46      	ldr	r2, [pc, #280]	; (80019e4 <TIM1_UP_IRQHandler+0x17c>)
 80018cc:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 80018ce:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <TIM1_UP_IRQHandler+0x190>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d110      	bne.n	80018f8 <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 80018d6:	4b49      	ldr	r3, [pc, #292]	; (80019fc <TIM1_UP_IRQHandler+0x194>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6a1a      	ldr	r2, [r3, #32]
 80018dc:	4b47      	ldr	r3, [pc, #284]	; (80019fc <TIM1_UP_IRQHandler+0x194>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 80018e6:	4b45      	ldr	r3, [pc, #276]	; (80019fc <TIM1_UP_IRQHandler+0x194>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <TIM1_UP_IRQHandler+0x194>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0210 	orr.w	r2, r2, #16
 80018f4:	621a      	str	r2, [r3, #32]
 80018f6:	e013      	b.n	8001920 <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 80018f8:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <TIM1_UP_IRQHandler+0x190>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10f      	bne.n	8001920 <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 8001900:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <TIM1_UP_IRQHandler+0x194>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6a1a      	ldr	r2, [r3, #32]
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <TIM1_UP_IRQHandler+0x194>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0210 	bic.w	r2, r2, #16
 800190e:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 8001910:	4b3a      	ldr	r3, [pc, #232]	; (80019fc <TIM1_UP_IRQHandler+0x194>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6a1a      	ldr	r2, [r3, #32]
 8001916:	4b39      	ldr	r3, [pc, #228]	; (80019fc <TIM1_UP_IRQHandler+0x194>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 8001920:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <TIM1_UP_IRQHandler+0x188>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d11c      	bne.n	8001962 <TIM1_UP_IRQHandler+0xfa>
 8001928:	4b30      	ldr	r3, [pc, #192]	; (80019ec <TIM1_UP_IRQHandler+0x184>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d118      	bne.n	8001962 <TIM1_UP_IRQHandler+0xfa>
		top=c;
 8001930:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <TIM1_UP_IRQHandler+0x198>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a2c      	ldr	r2, [pc, #176]	; (80019e8 <TIM1_UP_IRQHandler+0x180>)
 8001936:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8001938:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <TIM1_UP_IRQHandler+0x19c>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <TIM1_UP_IRQHandler+0x17c>)
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <TIM1_UP_IRQHandler+0x180>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2301      	movs	r3, #1
 8001946:	f7ff febd 	bl	80016c4 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <TIM1_UP_IRQHandler+0x180>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a29      	ldr	r2, [pc, #164]	; (80019f4 <TIM1_UP_IRQHandler+0x18c>)
 8001950:	7812      	ldrb	r2, [r2, #0]
 8001952:	fbb3 f2f2 	udiv	r2, r3, r2
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <TIM1_UP_IRQHandler+0x17c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <TIM1_UP_IRQHandler+0x17c>)
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e035      	b.n	80019ce <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <TIM1_UP_IRQHandler+0x184>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d129      	bne.n	80019be <TIM1_UP_IRQHandler+0x156>
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <TIM1_UP_IRQHandler+0x188>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d125      	bne.n	80019be <TIM1_UP_IRQHandler+0x156>
		top=c;
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <TIM1_UP_IRQHandler+0x198>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <TIM1_UP_IRQHandler+0x180>)
 8001978:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <TIM1_UP_IRQHandler+0x17c>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <TIM1_UP_IRQHandler+0x180>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	491c      	ldr	r1, [pc, #112]	; (80019f4 <TIM1_UP_IRQHandler+0x18c>)
 8001984:	7809      	ldrb	r1, [r1, #0]
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <TIM1_UP_IRQHandler+0x17c>)
 800198e:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8001990:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <TIM1_UP_IRQHandler+0x19c>)
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <TIM1_UP_IRQHandler+0x17c>)
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <TIM1_UP_IRQHandler+0x180>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2301      	movs	r3, #1
 800199e:	f7ff fe91 	bl	80016c4 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <TIM1_UP_IRQHandler+0x180>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <TIM1_UP_IRQHandler+0x18c>)
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <TIM1_UP_IRQHandler+0x17c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d10b      	bne.n	80019ce <TIM1_UP_IRQHandler+0x166>
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <TIM1_UP_IRQHandler+0x17c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e007      	b.n	80019ce <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <TIM1_UP_IRQHandler+0x194>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <TIM1_UP_IRQHandler+0x194>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0201 	bic.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <TIM1_UP_IRQHandler+0x194>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <TIM1_UP_IRQHandler+0x194>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	611a      	str	r2, [r3, #16]
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000014 	.word	0x20000014
 80019e8:	20000008 	.word	0x20000008
 80019ec:	200000a4 	.word	0x200000a4
 80019f0:	20000004 	.word	0x20000004
 80019f4:	200000d0 	.word	0x200000d0
 80019f8:	20000005 	.word	0x20000005
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000010 	.word	0x20000010
 8001a04:	2000000c 	.word	0x2000000c

08001a08 <EXTI0_IRQHandler>:
	Enable_NVIC(pin);
}



void EXTI0_IRQHandler(void){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <EXTI0_IRQHandler+0x1c>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <EXTI0_IRQHandler+0x1c>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <EXTI0_IRQHandler+0x20>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4798      	blx	r3
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40010400 	.word	0x40010400
 8001a28:	200000d8 	.word	0x200000d8

08001a2c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <EXTI1_IRQHandler+0x1c>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <EXTI1_IRQHandler+0x1c>)
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <EXTI1_IRQHandler+0x20>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4798      	blx	r3

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40010400 	.word	0x40010400
 8001a4c:	200000d8 	.word	0x200000d8

08001a50 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <EXTI2_IRQHandler+0x1c>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <EXTI2_IRQHandler+0x1c>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <EXTI2_IRQHandler+0x20>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4798      	blx	r3
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40010400 	.word	0x40010400
 8001a70:	200000d8 	.word	0x200000d8

08001a74 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <EXTI3_IRQHandler+0x1c>)
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <EXTI3_IRQHandler+0x1c>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <EXTI3_IRQHandler+0x20>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4798      	blx	r3
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40010400 	.word	0x40010400
 8001a94:	200000d8 	.word	0x200000d8

08001a98 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <EXTI4_IRQHandler+0x1c>)
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <EXTI4_IRQHandler+0x1c>)
 8001aa2:	f043 0310 	orr.w	r3, r3, #16
 8001aa6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <EXTI4_IRQHandler+0x20>)
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	4798      	blx	r3
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40010400 	.word	0x40010400
 8001ab8:	200000d8 	.word	0x200000d8

08001abc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5]();  }
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f003 0320 	and.w	r3, r3, #32
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <EXTI9_5_IRQHandler+0x22>
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	4a22      	ldr	r2, [pc, #136]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001ad2:	f043 0320 	orr.w	r3, r3, #32
 8001ad6:	6153      	str	r3, [r2, #20]
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <EXTI9_5_IRQHandler+0xa4>)
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6]();  }
 8001ade:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d008      	beq.n	8001afc <EXTI9_5_IRQHandler+0x40>
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af4:	6153      	str	r3, [r2, #20]
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <EXTI9_5_IRQHandler+0xa4>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7]();  }
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <EXTI9_5_IRQHandler+0x5e>
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b12:	6153      	str	r3, [r2, #20]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <EXTI9_5_IRQHandler+0xa4>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8]();  }
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d008      	beq.n	8001b38 <EXTI9_5_IRQHandler+0x7c>
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6153      	str	r3, [r2, #20]
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <EXTI9_5_IRQHandler+0xa4>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9]();  }
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <EXTI9_5_IRQHandler+0x9a>
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <EXTI9_5_IRQHandler+0xa0>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4e:	6153      	str	r3, [r2, #20]
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <EXTI9_5_IRQHandler+0xa4>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	4798      	blx	r3
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40010400 	.word	0x40010400
 8001b60:	200000d8 	.word	0x200000d8

08001b64 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10]();  }
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <EXTI15_10_IRQHandler+0x22>
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7e:	6153      	str	r3, [r2, #20]
 8001b80:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <EXTI15_10_IRQHandler+0xc0>)
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11]();  }
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <EXTI15_10_IRQHandler+0x40>
 8001b92:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	4a22      	ldr	r2, [pc, #136]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b9c:	6153      	str	r3, [r2, #20]
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <EXTI15_10_IRQHandler+0xc0>)
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12]();  }
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <EXTI15_10_IRQHandler+0x5e>
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	4a1a      	ldr	r2, [pc, #104]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001bb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bba:	6153      	str	r3, [r2, #20]
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <EXTI15_10_IRQHandler+0xc0>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13]();  }
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d008      	beq.n	8001be0 <EXTI15_10_IRQHandler+0x7c>
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001bd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bd8:	6153      	str	r3, [r2, #20]
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <EXTI15_10_IRQHandler+0xc0>)
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14]();  }
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <EXTI15_10_IRQHandler+0x9a>
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf6:	6153      	str	r3, [r2, #20]
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <EXTI15_10_IRQHandler+0xc0>)
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15]();  }
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d008      	beq.n	8001c1c <EXTI15_10_IRQHandler+0xb8>
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <EXTI15_10_IRQHandler+0xbc>)
 8001c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c14:	6153      	str	r3, [r2, #20]
 8001c16:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <EXTI15_10_IRQHandler+0xc0>)
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	4798      	blx	r3

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40010400 	.word	0x40010400
 8001c24:	200000d8 	.word	0x200000d8

08001c28 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
	//slave only todo
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
	//slave only todo
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <USART_INIT>:
//===============================================================
void send_string (){

}
//===============================================================
void USART_INIT(USART_typeDef* USARTx,uint32_t mode,uint32_t word_length,uint32_t stop_bits,uint32_t baud_rate,uint32_t parity,uint32_t CLCK){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]

	if(USARTx ==USART1){
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4a55      	ldr	r2, [pc, #340]	; (8001da8 <USART_INIT+0x168>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d11f      	bne.n	8001c96 <USART_INIT+0x56>
		USART1_Clock_Enable();
 8001c56:	4b55      	ldr	r3, [pc, #340]	; (8001dac <USART_INIT+0x16c>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	4a54      	ldr	r2, [pc, #336]	; (8001dac <USART_INIT+0x16c>)
 8001c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c60:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();
 8001c62:	4b52      	ldr	r3, [pc, #328]	; (8001dac <USART_INIT+0x16c>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	4a51      	ldr	r2, [pc, #324]	; (8001dac <USART_INIT+0x16c>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6193      	str	r3, [r2, #24]
		NVIC_USART1_interrupt_Enable;
 8001c6e:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <USART_INIT+0x170>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a4f      	ldr	r2, [pc, #316]	; (8001db0 <USART_INIT+0x170>)
 8001c74:	f043 0320 	orr.w	r3, r3, #32
 8001c78:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin9,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8001c7a:	2209      	movs	r2, #9
 8001c7c:	2109      	movs	r1, #9
 8001c7e:	484d      	ldr	r0, [pc, #308]	; (8001db4 <USART_INIT+0x174>)
 8001c80:	f7ff f8c2 	bl	8000e08 <pinmode>
		//RX
		pinmode(GPIOA, pin10,GPIO_MODE_INTPUT_AF);
 8001c84:	2204      	movs	r2, #4
 8001c86:	210a      	movs	r1, #10
 8001c88:	484a      	ldr	r0, [pc, #296]	; (8001db4 <USART_INIT+0x174>)
 8001c8a:	f7ff f8bd 	bl	8000e08 <pinmode>
		arr[0]=USART1;
 8001c8e:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <USART_INIT+0x178>)
 8001c90:	4a45      	ldr	r2, [pc, #276]	; (8001da8 <USART_INIT+0x168>)
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e042      	b.n	8001d1c <USART_INIT+0xdc>
	}
	else if(USARTx ==USART2){
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <USART_INIT+0x17c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d11f      	bne.n	8001cde <USART_INIT+0x9e>
		USART2_Clock_Enable();
 8001c9e:	4b43      	ldr	r3, [pc, #268]	; (8001dac <USART_INIT+0x16c>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a42      	ldr	r2, [pc, #264]	; (8001dac <USART_INIT+0x16c>)
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();
 8001caa:	4b40      	ldr	r3, [pc, #256]	; (8001dac <USART_INIT+0x16c>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	4a3f      	ldr	r2, [pc, #252]	; (8001dac <USART_INIT+0x16c>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	6193      	str	r3, [r2, #24]
		NVIC_USART2_interrupt_Enable;
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <USART_INIT+0x170>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a3d      	ldr	r2, [pc, #244]	; (8001db0 <USART_INIT+0x170>)
 8001cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc0:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin2,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8001cc2:	2209      	movs	r2, #9
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	483b      	ldr	r0, [pc, #236]	; (8001db4 <USART_INIT+0x174>)
 8001cc8:	f7ff f89e 	bl	8000e08 <pinmode>
		//RX
		pinmode(GPIOA, pin3,GPIO_MODE_INTPUT_AF);
 8001ccc:	2204      	movs	r2, #4
 8001cce:	2103      	movs	r1, #3
 8001cd0:	4838      	ldr	r0, [pc, #224]	; (8001db4 <USART_INIT+0x174>)
 8001cd2:	f7ff f899 	bl	8000e08 <pinmode>
		arr[1]=USART2;
 8001cd6:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <USART_INIT+0x178>)
 8001cd8:	4a38      	ldr	r2, [pc, #224]	; (8001dbc <USART_INIT+0x17c>)
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	e01e      	b.n	8001d1c <USART_INIT+0xdc>
	}
	else{
		USART3_Clock_Enable();
 8001cde:	4b33      	ldr	r3, [pc, #204]	; (8001dac <USART_INIT+0x16c>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a32      	ldr	r2, [pc, #200]	; (8001dac <USART_INIT+0x16c>)
 8001ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce8:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 8001cea:	4b30      	ldr	r3, [pc, #192]	; (8001dac <USART_INIT+0x16c>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	4a2f      	ldr	r2, [pc, #188]	; (8001dac <USART_INIT+0x16c>)
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	6193      	str	r3, [r2, #24]
		NVIC_USART3_interrupt_Enable;
 8001cf6:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <USART_INIT+0x170>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a2d      	ldr	r2, [pc, #180]	; (8001db0 <USART_INIT+0x170>)
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8001d02:	2209      	movs	r2, #9
 8001d04:	210a      	movs	r1, #10
 8001d06:	482e      	ldr	r0, [pc, #184]	; (8001dc0 <USART_INIT+0x180>)
 8001d08:	f7ff f87e 	bl	8000e08 <pinmode>
		//RX
		pinmode(GPIOB, pin11,GPIO_MODE_INTPUT_AF);
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	210b      	movs	r1, #11
 8001d10:	482b      	ldr	r0, [pc, #172]	; (8001dc0 <USART_INIT+0x180>)
 8001d12:	f7ff f879 	bl	8000e08 <pinmode>
		arr[2]=USART3;
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <USART_INIT+0x178>)
 8001d18:	4a2a      	ldr	r2, [pc, #168]	; (8001dc4 <USART_INIT+0x184>)
 8001d1a:	609a      	str	r2, [r3, #8]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enabled
	USARTx->USART_CR1 |=(1<<13);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	60da      	str	r2, [r3, #12]
	//STEP 2
	//	Bit 12 M: Word length
	//	This bit determines the word length. It is set or cleared by software.
	//	0: 1 Start bit, 8 Data bits, n Stop bit
	//	1: 1 Start bit, 9 Data bits, n Stop bit
	USARTx->USART_CR1 |=word_length;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	60da      	str	r2, [r3, #12]
	//	These bits are used for programming the stop bits.
	//	00: 1 Stop bit
	//	01: 0.5 Stop bit
	//	10: 2 Stop bits
	//	11: 1.5 Stop bit
	USARTx->USART_CR2 |=stop_bits;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
	//	2: When TE is set there is a 1 bit-time delay before the transmission starts.
	//	Bit 2 RE: Receiver enable
	//	This bit enables the receiver. It is set and cleared by software.
	//	0: Receiver is disabled
	//	1: Receiver is enabled and begins searching for a start bit
	USARTx->USART_CR1 |=mode;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	60da      	str	r2, [r3, #12]
	//	Bit 9 PS: Parity selection
	//	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	//	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	//	0: Even parity
	//	1: Odd parity
	USARTx->USART_CR1 |=parity;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	431a      	orrs	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	60da      	str	r2, [r3, #12]
	//	Bits 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV
	//	These 12 bits define the mantissa of the USART Divider (USARTDIV)
	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV
	//	These 4 bits define the fraction of the USART Divider (USARTDIV)

	uint16_t DIV_Mantissa =CLCK /(baud_rate*16);
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	82fb      	strh	r3, [r7, #22]
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <USART_INIT+0x188>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	8afa      	ldrh	r2, [r7, #22]
 8001d78:	2164      	movs	r1, #100	; 0x64
 8001d7a:	fb01 f202 	mul.w	r2, r1, r2
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <USART_INIT+0x188>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	82bb      	strh	r3, [r7, #20]
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );
 8001d8c:	8afb      	ldrh	r3, [r7, #22]
 8001d8e:	011a      	lsls	r2, r3, #4
 8001d90:	8abb      	ldrh	r3, [r7, #20]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	4313      	orrs	r3, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	609a      	str	r2, [r3, #8]


}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40013800 	.word	0x40013800
 8001dac:	40021000 	.word	0x40021000
 8001db0:	e000e104 	.word	0xe000e104
 8001db4:	40010800 	.word	0x40010800
 8001db8:	20000114 	.word	0x20000114
 8001dbc:	40004400 	.word	0x40004400
 8001dc0:	40010c00 	.word	0x40010c00
 8001dc4:	40004800 	.word	0x40004800
 8001dc8:	51eb851f 	.word	0x51eb851f

08001dcc <USART_SEND>:
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	0b1b      	lsrs	r3, r3, #12
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d106      	bne.n	8001df2 <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 8001df0:	e004      	b.n	8001dfc <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	605a      	str	r2, [r3, #4]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
	...

08001e08 <USART_SEND_STRING>:
		*data=arr_data_RES[2];
	}

}

void USART_SEND_STRING(USART_typeDef* USARTx,uint8_t* data){
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <USART_SEND_STRING+0x5c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d105      	bne.n	8001e26 <USART_SEND_STRING+0x1e>
		arr_data[0]=data;
 8001e1a:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <USART_SEND_STRING+0x60>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6013      	str	r3, [r2, #0]
		arr[0]=USART1;
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <USART_SEND_STRING+0x64>)
 8001e22:	4a10      	ldr	r2, [pc, #64]	; (8001e64 <USART_SEND_STRING+0x5c>)
 8001e24:	601a      	str	r2, [r3, #0]
	}
	if(USARTx==USART2){
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <USART_SEND_STRING+0x68>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d105      	bne.n	8001e3a <USART_SEND_STRING+0x32>
		arr_data[1]=data;
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <USART_SEND_STRING+0x60>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6053      	str	r3, [r2, #4]
		arr[1]=USART2;
 8001e34:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <USART_SEND_STRING+0x64>)
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <USART_SEND_STRING+0x68>)
 8001e38:	605a      	str	r2, [r3, #4]
	}
	if(USARTx==USART3){
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <USART_SEND_STRING+0x6c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d105      	bne.n	8001e4e <USART_SEND_STRING+0x46>
		arr_data[2]=data;
 8001e42:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <USART_SEND_STRING+0x60>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	6093      	str	r3, [r2, #8]
		arr[2]=USART3;
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <USART_SEND_STRING+0x64>)
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <USART_SEND_STRING+0x6c>)
 8001e4c:	609a      	str	r2, [r3, #8]
	}
	//Bit 7 TXEIE: TXE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
	USARTx->USART_CR1 |=Transmit_data_register_empty;//open flage of interrupt
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60da      	str	r2, [r3, #12]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	40013800 	.word	0x40013800
 8001e68:	20000128 	.word	0x20000128
 8001e6c:	20000114 	.word	0x20000114
 8001e70:	40004400 	.word	0x40004400
 8001e74:	40004800 	.word	0x40004800

08001e78 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8001e7e:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	09db      	lsrs	r3, r3, #7
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d122      	bne.n	8001ed4 <USART1_IRQHandler+0x5c>
 8001e8e:	4b52      	ldr	r3, [pc, #328]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	09db      	lsrs	r3, r3, #7
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d11a      	bne.n	8001ed4 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 8001e9e:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <USART1_IRQHandler+0x164>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00d      	beq.n	8001ec4 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 8001ea8:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <USART1_IRQHandler+0x164>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f7ff ff8a 	bl	8001dcc <USART_SEND>
			++arr_data[0];
 8001eb8:	4b48      	ldr	r3, [pc, #288]	; (8001fdc <USART1_IRQHandler+0x164>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4a47      	ldr	r2, [pc, #284]	; (8001fdc <USART1_IRQHandler+0x164>)
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e007      	b.n	8001ed4 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 8001ec4:	4b44      	ldr	r3, [pc, #272]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ed2:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 8001ed4:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d166      	bne.n	8001fb2 <USART1_IRQHandler+0x13a>
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d15e      	bne.n	8001fb2 <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 8001ef4:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	0b1b      	lsrs	r3, r3, #12
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d117      	bne.n	8001f34 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8001f04:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	0a9b      	lsrs	r3, r3, #10
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d108      	bne.n	8001f26 <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <USART1_IRQHandler+0x168>)
 8001f22:	801a      	strh	r2, [r3, #0]
 8001f24:	e020      	b.n	8001f68 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 8001f26:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <USART1_IRQHandler+0x168>)
 8001f30:	801a      	strh	r2, [r3, #0]
 8001f32:	e019      	b.n	8001f68 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8001f34:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	0a9b      	lsrs	r3, r3, #10
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d109      	bne.n	8001f58 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <USART1_IRQHandler+0x168>)
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	e007      	b.n	8001f68 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8001f58:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <USART1_IRQHandler+0x168>)
 8001f66:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <USART1_IRQHandler+0x16c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	e002      	b.n	8001f7a <USART1_IRQHandler+0x102>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3301      	adds	r3, #1
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001f80:	4293      	cmp	r3, r2
 8001f82:	ddf7      	ble.n	8001f74 <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0220 	bic.w	r2, r2, #32
 8001f92:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <USART1_IRQHandler+0x170>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0220 	bic.w	r2, r2, #32
 8001fb0:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <USART1_IRQHandler+0x170>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <USART1_IRQHandler+0x160>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0220 	bic.w	r2, r2, #32
 8001fce:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000114 	.word	0x20000114
 8001fdc:	20000128 	.word	0x20000128
 8001fe0:	20000120 	.word	0x20000120
 8001fe4:	20000134 	.word	0x20000134
 8001fe8:	40013800 	.word	0x40013800

08001fec <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8001ff2:	4b56      	ldr	r3, [pc, #344]	; (800214c <USART2_IRQHandler+0x160>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	09db      	lsrs	r3, r3, #7
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d122      	bne.n	8002048 <USART2_IRQHandler+0x5c>
 8002002:	4b52      	ldr	r3, [pc, #328]	; (800214c <USART2_IRQHandler+0x160>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	09db      	lsrs	r3, r3, #7
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d11a      	bne.n	8002048 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 8002012:	4b4f      	ldr	r3, [pc, #316]	; (8002150 <USART2_IRQHandler+0x164>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00d      	beq.n	8002038 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 800201c:	4b4b      	ldr	r3, [pc, #300]	; (800214c <USART2_IRQHandler+0x160>)
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <USART2_IRQHandler+0x164>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f7ff fed0 	bl	8001dcc <USART_SEND>
			++arr_data[1];
 800202c:	4b48      	ldr	r3, [pc, #288]	; (8002150 <USART2_IRQHandler+0x164>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	3301      	adds	r3, #1
 8002032:	4a47      	ldr	r2, [pc, #284]	; (8002150 <USART2_IRQHandler+0x164>)
 8002034:	6053      	str	r3, [r2, #4]
 8002036:	e007      	b.n	8002048 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8002038:	4b44      	ldr	r3, [pc, #272]	; (800214c <USART2_IRQHandler+0x160>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	4b43      	ldr	r3, [pc, #268]	; (800214c <USART2_IRQHandler+0x160>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002046:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8002048:	4b40      	ldr	r3, [pc, #256]	; (800214c <USART2_IRQHandler+0x160>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b01      	cmp	r3, #1
 8002056:	d166      	bne.n	8002126 <USART2_IRQHandler+0x13a>
 8002058:	4b3c      	ldr	r3, [pc, #240]	; (800214c <USART2_IRQHandler+0x160>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d15e      	bne.n	8002126 <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 8002068:	4b38      	ldr	r3, [pc, #224]	; (800214c <USART2_IRQHandler+0x160>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	0b1b      	lsrs	r3, r3, #12
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d117      	bne.n	80020a8 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8002078:	4b34      	ldr	r3, [pc, #208]	; (800214c <USART2_IRQHandler+0x160>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	0a9b      	lsrs	r3, r3, #10
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d108      	bne.n	800209a <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <USART2_IRQHandler+0x160>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	b29b      	uxth	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	b29a      	uxth	r2, r3
 8002094:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <USART2_IRQHandler+0x168>)
 8002096:	805a      	strh	r2, [r3, #2]
 8002098:	e020      	b.n	80020dc <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <USART2_IRQHandler+0x160>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <USART2_IRQHandler+0x168>)
 80020a4:	805a      	strh	r2, [r3, #2]
 80020a6:	e019      	b.n	80020dc <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <USART2_IRQHandler+0x160>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	0a9b      	lsrs	r3, r3, #10
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d109      	bne.n	80020cc <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 80020b8:	4b24      	ldr	r3, [pc, #144]	; (800214c <USART2_IRQHandler+0x160>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b23      	ldr	r3, [pc, #140]	; (8002154 <USART2_IRQHandler+0x168>)
 80020c8:	805a      	strh	r2, [r3, #2]
 80020ca:	e007      	b.n	80020dc <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <USART2_IRQHandler+0x160>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <USART2_IRQHandler+0x168>)
 80020da:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 80020dc:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <USART2_IRQHandler+0x16c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	e002      	b.n	80020ee <USART2_IRQHandler+0x102>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3301      	adds	r3, #1
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020f4:	4293      	cmp	r3, r2
 80020f6:	ddf7      	ble.n	80020e8 <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <USART2_IRQHandler+0x160>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <USART2_IRQHandler+0x160>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f022 0220 	bic.w	r2, r2, #32
 8002106:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 8002108:	4b10      	ldr	r3, [pc, #64]	; (800214c <USART2_IRQHandler+0x160>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <USART2_IRQHandler+0x170>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	b29b      	uxth	r3, r3
 8002114:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <USART2_IRQHandler+0x160>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <USART2_IRQHandler+0x160>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f022 0220 	bic.w	r2, r2, #32
 8002124:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <USART2_IRQHandler+0x160>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <USART2_IRQHandler+0x170>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	b29b      	uxth	r3, r3
 8002132:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <USART2_IRQHandler+0x160>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <USART2_IRQHandler+0x160>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f022 0220 	bic.w	r2, r2, #32
 8002142:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000114 	.word	0x20000114
 8002150:	20000128 	.word	0x20000128
 8002154:	20000120 	.word	0x20000120
 8002158:	20000134 	.word	0x20000134
 800215c:	40004400 	.word	0x40004400

08002160 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8002166:	4b56      	ldr	r3, [pc, #344]	; (80022c0 <USART3_IRQHandler+0x160>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	09db      	lsrs	r3, r3, #7
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b01      	cmp	r3, #1
 8002174:	d122      	bne.n	80021bc <USART3_IRQHandler+0x5c>
 8002176:	4b52      	ldr	r3, [pc, #328]	; (80022c0 <USART3_IRQHandler+0x160>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	09db      	lsrs	r3, r3, #7
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d11a      	bne.n	80021bc <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 8002186:	4b4f      	ldr	r3, [pc, #316]	; (80022c4 <USART3_IRQHandler+0x164>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00d      	beq.n	80021ac <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 8002190:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <USART3_IRQHandler+0x160>)
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	4b4b      	ldr	r3, [pc, #300]	; (80022c4 <USART3_IRQHandler+0x164>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f7ff fe16 	bl	8001dcc <USART_SEND>
			++arr_data[2];
 80021a0:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <USART3_IRQHandler+0x164>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	3301      	adds	r3, #1
 80021a6:	4a47      	ldr	r2, [pc, #284]	; (80022c4 <USART3_IRQHandler+0x164>)
 80021a8:	6093      	str	r3, [r2, #8]
 80021aa:	e007      	b.n	80021bc <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 80021ac:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <USART3_IRQHandler+0x160>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <USART3_IRQHandler+0x160>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ba:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 80021bc:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <USART3_IRQHandler+0x160>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d166      	bne.n	800229a <USART3_IRQHandler+0x13a>
 80021cc:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <USART3_IRQHandler+0x160>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d15e      	bne.n	800229a <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 80021dc:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <USART3_IRQHandler+0x160>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	0b1b      	lsrs	r3, r3, #12
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d117      	bne.n	800221c <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <USART3_IRQHandler+0x160>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	0a9b      	lsrs	r3, r3, #10
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d108      	bne.n	800220e <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 80021fc:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <USART3_IRQHandler+0x160>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	b29b      	uxth	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	b29a      	uxth	r2, r3
 8002208:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <USART3_IRQHandler+0x168>)
 800220a:	809a      	strh	r2, [r3, #4]
 800220c:	e020      	b.n	8002250 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <USART3_IRQHandler+0x160>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	b29a      	uxth	r2, r3
 8002216:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <USART3_IRQHandler+0x168>)
 8002218:	809a      	strh	r2, [r3, #4]
 800221a:	e019      	b.n	8002250 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 800221c:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <USART3_IRQHandler+0x160>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	0a9b      	lsrs	r3, r3, #10
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d109      	bne.n	8002240 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 800222c:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <USART3_IRQHandler+0x160>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	b29b      	uxth	r3, r3
 8002234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002238:	b29a      	uxth	r2, r3
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <USART3_IRQHandler+0x168>)
 800223c:	809a      	strh	r2, [r3, #4]
 800223e:	e007      	b.n	8002250 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <USART3_IRQHandler+0x160>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	b29b      	uxth	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	b29a      	uxth	r2, r3
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <USART3_IRQHandler+0x168>)
 800224e:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 8002250:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <USART3_IRQHandler+0x16c>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	e002      	b.n	8002262 <USART3_IRQHandler+0x102>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3301      	adds	r3, #1
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002268:	4293      	cmp	r3, r2
 800226a:	ddf7      	ble.n	800225c <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <USART3_IRQHandler+0x160>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <USART3_IRQHandler+0x160>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f022 0220 	bic.w	r2, r2, #32
 800227a:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 800227c:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <USART3_IRQHandler+0x160>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <USART3_IRQHandler+0x170>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	b29b      	uxth	r3, r3
 8002288:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <USART3_IRQHandler+0x160>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <USART3_IRQHandler+0x160>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f022 0220 	bic.w	r2, r2, #32
 8002298:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <USART3_IRQHandler+0x160>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <USART3_IRQHandler+0x170>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <USART3_IRQHandler+0x160>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <USART3_IRQHandler+0x160>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f022 0220 	bic.w	r2, r2, #32
 80022b6:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000114 	.word	0x20000114
 80022c4:	20000128 	.word	0x20000128
 80022c8:	20000120 	.word	0x20000120
 80022cc:	20000134 	.word	0x20000134
 80022d0:	40004800 	.word	0x40004800
 80022d4:	00000000 	.word	0x00000000

080022d8 <main>:
float GxL, GyL, GzL, Gx, Gy, Gz;

float elapsedTime, currentTime, previousTime;
float accAngleX, accAngleY, gyroAngleX, gyroAngleY, gyroAngleZ,yaw,roll,pitch;
int main(void)
{
 80022d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af04      	add	r7, sp, #16
	MPU6050_init(clk);
 80022e0:	48c1      	ldr	r0, [pc, #772]	; (80025e8 <main+0x310>)
 80022e2:	f7fe fe73 	bl	8000fcc <MPU6050_init>
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_9, stop_bits_2, baud_rate_9600, parity_even,8000000);
 80022e6:	4bc0      	ldr	r3, [pc, #768]	; (80025e8 <main+0x310>)
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022fe:	210c      	movs	r1, #12
 8002300:	48ba      	ldr	r0, [pc, #744]	; (80025ec <main+0x314>)
 8002302:	f7ff fc9d 	bl	8001c40 <USART_INIT>

	/* Loop forever */
	while(1){
		Data1 = 0x00;
 8002306:	4bba      	ldr	r3, [pc, #744]	; (80025f0 <main+0x318>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
		MPU6050_write(PWR_MGMT_1_REG, &Data1, 1);
 800230c:	2201      	movs	r2, #1
 800230e:	49b8      	ldr	r1, [pc, #736]	; (80025f0 <main+0x318>)
 8002310:	206b      	movs	r0, #107	; 0x6b
 8002312:	f7fe fea1 	bl	8001058 <MPU6050_write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register

		Data1 = 0x05;
 8002316:	4bb6      	ldr	r3, [pc, #728]	; (80025f0 <main+0x318>)
 8002318:	2205      	movs	r2, #5
 800231a:	701a      	strb	r2, [r3, #0]
		MPU6050_write(0x1A, &Data1, 1);
 800231c:	2201      	movs	r2, #1
 800231e:	49b4      	ldr	r1, [pc, #720]	; (80025f0 <main+0x318>)
 8002320:	201a      	movs	r0, #26
 8002322:	f7fe fe99 	bl	8001058 <MPU6050_write>
		//		Data = 0x07;
		//		MPU6050_write(SMPLRT_DIV_REG, &Data, 1);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data1 = 0x10;
 8002326:	4bb2      	ldr	r3, [pc, #712]	; (80025f0 <main+0x318>)
 8002328:	2210      	movs	r2, #16
 800232a:	701a      	strb	r2, [r3, #0]
		MPU6050_write(ACCEL_CONFIG_REG, &Data1, 1);
 800232c:	2201      	movs	r2, #1
 800232e:	49b0      	ldr	r1, [pc, #704]	; (80025f0 <main+0x318>)
 8002330:	201c      	movs	r0, #28
 8002332:	f7fe fe91 	bl	8001058 <MPU6050_write>

		MPU6050_read(ACCEL_XOUT_H_REG, data, 6);
 8002336:	2206      	movs	r2, #6
 8002338:	49ae      	ldr	r1, [pc, #696]	; (80025f4 <main+0x31c>)
 800233a:	203b      	movs	r0, #59	; 0x3b
 800233c:	f7fe fec2 	bl	80010c4 <MPU6050_read>
		Accel_X_RAW = ((int16_t)(data[0] << 8 | data [1])*10) / 4096;
 8002340:	4bac      	ldr	r3, [pc, #688]	; (80025f4 <main+0x31c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	b21a      	sxth	r2, r3
 8002348:	4baa      	ldr	r3, [pc, #680]	; (80025f4 <main+0x31c>)
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	b21b      	sxth	r3, r3
 800234e:	4313      	orrs	r3, r2
 8002350:	b21b      	sxth	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	da01      	bge.n	8002364 <main+0x8c>
 8002360:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002364:	131b      	asrs	r3, r3, #12
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fc78 	bl	8000c5c <__aeabi_i2f>
 800236c:	4602      	mov	r2, r0
 800236e:	4ba2      	ldr	r3, [pc, #648]	; (80025f8 <main+0x320>)
 8002370:	601a      	str	r2, [r3, #0]
		Accel_Y_RAW = ((int16_t)(data[2] << 8 | data [3])*10) / 4096;
 8002372:	4ba0      	ldr	r3, [pc, #640]	; (80025f4 <main+0x31c>)
 8002374:	789b      	ldrb	r3, [r3, #2]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	b21a      	sxth	r2, r3
 800237a:	4b9e      	ldr	r3, [pc, #632]	; (80025f4 <main+0x31c>)
 800237c:	78db      	ldrb	r3, [r3, #3]
 800237e:	b21b      	sxth	r3, r3
 8002380:	4313      	orrs	r3, r2
 8002382:	b21b      	sxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	da01      	bge.n	8002396 <main+0xbe>
 8002392:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002396:	131b      	asrs	r3, r3, #12
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe fc5f 	bl	8000c5c <__aeabi_i2f>
 800239e:	4602      	mov	r2, r0
 80023a0:	4b96      	ldr	r3, [pc, #600]	; (80025fc <main+0x324>)
 80023a2:	601a      	str	r2, [r3, #0]
		Accel_Z_RAW = ((int16_t)(data[4] << 8 | data [5])*10) / 4096;
 80023a4:	4b93      	ldr	r3, [pc, #588]	; (80025f4 <main+0x31c>)
 80023a6:	791b      	ldrb	r3, [r3, #4]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	b21a      	sxth	r2, r3
 80023ac:	4b91      	ldr	r3, [pc, #580]	; (80025f4 <main+0x31c>)
 80023ae:	795b      	ldrb	r3, [r3, #5]
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da01      	bge.n	80023c8 <main+0xf0>
 80023c4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80023c8:	131b      	asrs	r3, r3, #12
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fc46 	bl	8000c5c <__aeabi_i2f>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b8b      	ldr	r3, [pc, #556]	; (8002600 <main+0x328>)
 80023d4:	601a      	str	r2, [r3, #0]

		accAngleX = (atan(Accel_Y_RAW / sqrt(pow(Accel_X_RAW, 2) + pow(Accel_Z_RAW, 2))) * 180 / 3.14) - 0.58; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
 80023d6:	4b89      	ldr	r3, [pc, #548]	; (80025fc <main+0x324>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f82c 	bl	8000438 <__aeabi_f2d>
 80023e0:	4604      	mov	r4, r0
 80023e2:	460d      	mov	r5, r1
 80023e4:	4b84      	ldr	r3, [pc, #528]	; (80025f8 <main+0x320>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f825 	bl	8000438 <__aeabi_f2d>
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023f6:	f000 ff95 	bl	8003324 <pow>
 80023fa:	4680      	mov	r8, r0
 80023fc:	4689      	mov	r9, r1
 80023fe:	4b80      	ldr	r3, [pc, #512]	; (8002600 <main+0x328>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f818 	bl	8000438 <__aeabi_f2d>
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002410:	f000 ff88 	bl	8003324 <pow>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4640      	mov	r0, r8
 800241a:	4649      	mov	r1, r9
 800241c:	f7fd feae 	bl	800017c <__adddf3>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f001 f8d8 	bl	80035dc <sqrt>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4620      	mov	r0, r4
 8002432:	4629      	mov	r1, r5
 8002434:	f7fe f982 	bl	800073c <__aeabi_ddiv>
 8002438:	4603      	mov	r3, r0
 800243a:	460c      	mov	r4, r1
 800243c:	4618      	mov	r0, r3
 800243e:	4621      	mov	r1, r4
 8002440:	f000 fde2 	bl	8003008 <atan>
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	4b6e      	ldr	r3, [pc, #440]	; (8002604 <main+0x32c>)
 800244a:	f7fe f84d 	bl	80004e8 <__aeabi_dmul>
 800244e:	4603      	mov	r3, r0
 8002450:	460c      	mov	r4, r1
 8002452:	4618      	mov	r0, r3
 8002454:	4621      	mov	r1, r4
 8002456:	a35c      	add	r3, pc, #368	; (adr r3, 80025c8 <main+0x2f0>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f96e 	bl	800073c <__aeabi_ddiv>
 8002460:	4603      	mov	r3, r0
 8002462:	460c      	mov	r4, r1
 8002464:	4618      	mov	r0, r3
 8002466:	4621      	mov	r1, r4
 8002468:	a359      	add	r3, pc, #356	; (adr r3, 80025d0 <main+0x2f8>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	f7fd fe83 	bl	8000178 <__aeabi_dsub>
 8002472:	4603      	mov	r3, r0
 8002474:	460c      	mov	r4, r1
 8002476:	4618      	mov	r0, r3
 8002478:	4621      	mov	r1, r4
 800247a:	f7fe fae5 	bl	8000a48 <__aeabi_d2f>
 800247e:	4602      	mov	r2, r0
 8002480:	4b61      	ldr	r3, [pc, #388]	; (8002608 <main+0x330>)
 8002482:	601a      	str	r2, [r3, #0]
		accAngleY = (atan(-1 * Accel_X_RAW / sqrt(pow(Accel_Y_RAW, 2) + pow(Accel_Z_RAW, 2))) * 180 / 3.14) + 1.58; // AccErrorY ~(-1.58)
 8002484:	4b5c      	ldr	r3, [pc, #368]	; (80025f8 <main+0x320>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800248c:	4618      	mov	r0, r3
 800248e:	f7fd ffd3 	bl	8000438 <__aeabi_f2d>
 8002492:	4604      	mov	r4, r0
 8002494:	460d      	mov	r5, r1
 8002496:	4b59      	ldr	r3, [pc, #356]	; (80025fc <main+0x324>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fd ffcc 	bl	8000438 <__aeabi_f2d>
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024a8:	f000 ff3c 	bl	8003324 <pow>
 80024ac:	4680      	mov	r8, r0
 80024ae:	4689      	mov	r9, r1
 80024b0:	4b53      	ldr	r3, [pc, #332]	; (8002600 <main+0x328>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fd ffbf 	bl	8000438 <__aeabi_f2d>
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024c2:	f000 ff2f 	bl	8003324 <pow>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4640      	mov	r0, r8
 80024cc:	4649      	mov	r1, r9
 80024ce:	f7fd fe55 	bl	800017c <__adddf3>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4610      	mov	r0, r2
 80024d8:	4619      	mov	r1, r3
 80024da:	f001 f87f 	bl	80035dc <sqrt>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4620      	mov	r0, r4
 80024e4:	4629      	mov	r1, r5
 80024e6:	f7fe f929 	bl	800073c <__aeabi_ddiv>
 80024ea:	4603      	mov	r3, r0
 80024ec:	460c      	mov	r4, r1
 80024ee:	4618      	mov	r0, r3
 80024f0:	4621      	mov	r1, r4
 80024f2:	f000 fd89 	bl	8003008 <atan>
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	4b42      	ldr	r3, [pc, #264]	; (8002604 <main+0x32c>)
 80024fc:	f7fd fff4 	bl	80004e8 <__aeabi_dmul>
 8002500:	4603      	mov	r3, r0
 8002502:	460c      	mov	r4, r1
 8002504:	4618      	mov	r0, r3
 8002506:	4621      	mov	r1, r4
 8002508:	a32f      	add	r3, pc, #188	; (adr r3, 80025c8 <main+0x2f0>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe f915 	bl	800073c <__aeabi_ddiv>
 8002512:	4603      	mov	r3, r0
 8002514:	460c      	mov	r4, r1
 8002516:	4618      	mov	r0, r3
 8002518:	4621      	mov	r1, r4
 800251a:	a32f      	add	r3, pc, #188	; (adr r3, 80025d8 <main+0x300>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	f7fd fe2c 	bl	800017c <__adddf3>
 8002524:	4603      	mov	r3, r0
 8002526:	460c      	mov	r4, r1
 8002528:	4618      	mov	r0, r3
 800252a:	4621      	mov	r1, r4
 800252c:	f7fe fa8c 	bl	8000a48 <__aeabi_d2f>
 8002530:	4602      	mov	r2, r0
 8002532:	4b36      	ldr	r3, [pc, #216]	; (800260c <main+0x334>)
 8002534:	601a      	str	r2, [r3, #0]


		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data1 = 0x08;
 8002536:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <main+0x318>)
 8002538:	2208      	movs	r2, #8
 800253a:	701a      	strb	r2, [r3, #0]
		MPU6050_write(GYRO_CONFIG_REG, &Data1, 1);
 800253c:	2201      	movs	r2, #1
 800253e:	492c      	ldr	r1, [pc, #176]	; (80025f0 <main+0x318>)
 8002540:	201b      	movs	r0, #27
 8002542:	f7fe fd89 	bl	8001058 <MPU6050_write>


		MPU6050_read(GYRO_XOUT_H_REG, data, 6);
 8002546:	2206      	movs	r2, #6
 8002548:	492a      	ldr	r1, [pc, #168]	; (80025f4 <main+0x31c>)
 800254a:	2043      	movs	r0, #67	; 0x43
 800254c:	f7fe fdba 	bl	80010c4 <MPU6050_read>
		Gyro_X_RAW = (int16_t)(data[0] << 8 | data [1]);
 8002550:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <main+0x31c>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	b21a      	sxth	r2, r3
 8002558:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <main+0x31c>)
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	b21b      	sxth	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	b21a      	sxth	r2, r3
 8002562:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <main+0x338>)
 8002564:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW = (int16_t)(data[2] << 8 | data [3]);
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <main+0x31c>)
 8002568:	789b      	ldrb	r3, [r3, #2]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	b21a      	sxth	r2, r3
 800256e:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <main+0x31c>)
 8002570:	78db      	ldrb	r3, [r3, #3]
 8002572:	b21b      	sxth	r3, r3
 8002574:	4313      	orrs	r3, r2
 8002576:	b21a      	sxth	r2, r3
 8002578:	4b26      	ldr	r3, [pc, #152]	; (8002614 <main+0x33c>)
 800257a:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW = (int16_t)(data[4] << 8 | data [5]);
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <main+0x31c>)
 800257e:	791b      	ldrb	r3, [r3, #4]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	b21a      	sxth	r2, r3
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <main+0x31c>)
 8002586:	795b      	ldrb	r3, [r3, #5]
 8002588:	b21b      	sxth	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	b21a      	sxth	r2, r3
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <main+0x340>)
 8002590:	801a      	strh	r2, [r3, #0]
		Gx = Gyro_X_RAW/65.5;
 8002592:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <main+0x338>)
 8002594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd ff3b 	bl	8000414 <__aeabi_i2d>
 800259e:	a310      	add	r3, pc, #64	; (adr r3, 80025e0 <main+0x308>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fe f8ca 	bl	800073c <__aeabi_ddiv>
 80025a8:	4603      	mov	r3, r0
 80025aa:	460c      	mov	r4, r1
 80025ac:	4618      	mov	r0, r3
 80025ae:	4621      	mov	r1, r4
 80025b0:	f7fe fa4a 	bl	8000a48 <__aeabi_d2f>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <main+0x344>)
 80025b8:	601a      	str	r2, [r3, #0]
		Gy = Gyro_Y_RAW/65.5;
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <main+0x33c>)
 80025bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ff27 	bl	8000414 <__aeabi_i2d>
 80025c6:	e02b      	b.n	8002620 <main+0x348>
 80025c8:	51eb851f 	.word	0x51eb851f
 80025cc:	40091eb8 	.word	0x40091eb8
 80025d0:	28f5c28f 	.word	0x28f5c28f
 80025d4:	3fe28f5c 	.word	0x3fe28f5c
 80025d8:	147ae148 	.word	0x147ae148
 80025dc:	3ff947ae 	.word	0x3ff947ae
 80025e0:	00000000 	.word	0x00000000
 80025e4:	40506000 	.word	0x40506000
 80025e8:	007a1200 	.word	0x007a1200
 80025ec:	40013800 	.word	0x40013800
 80025f0:	2000015c 	.word	0x2000015c
 80025f4:	20000170 	.word	0x20000170
 80025f8:	200000a8 	.word	0x200000a8
 80025fc:	200000ac 	.word	0x200000ac
 8002600:	200000b0 	.word	0x200000b0
 8002604:	40668000 	.word	0x40668000
 8002608:	20000154 	.word	0x20000154
 800260c:	20000168 	.word	0x20000168
 8002610:	200000b4 	.word	0x200000b4
 8002614:	200000b6 	.word	0x200000b6
 8002618:	200000b8 	.word	0x200000b8
 800261c:	2000014c 	.word	0x2000014c
 8002620:	a31f      	add	r3, pc, #124	; (adr r3, 80026a0 <main+0x3c8>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f7fe f889 	bl	800073c <__aeabi_ddiv>
 800262a:	4603      	mov	r3, r0
 800262c:	460c      	mov	r4, r1
 800262e:	4618      	mov	r0, r3
 8002630:	4621      	mov	r1, r4
 8002632:	f7fe fa09 	bl	8000a48 <__aeabi_d2f>
 8002636:	4602      	mov	r2, r0
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <main+0x3d0>)
 800263a:	601a      	str	r2, [r3, #0]
		Gz = Gyro_Z_RAW/65.5;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <main+0x3d4>)
 800263e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd fee6 	bl	8000414 <__aeabi_i2d>
 8002648:	a315      	add	r3, pc, #84	; (adr r3, 80026a0 <main+0x3c8>)
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	f7fe f875 	bl	800073c <__aeabi_ddiv>
 8002652:	4603      	mov	r3, r0
 8002654:	460c      	mov	r4, r1
 8002656:	4618      	mov	r0, r3
 8002658:	4621      	mov	r1, r4
 800265a:	f7fe f9f5 	bl	8000a48 <__aeabi_d2f>
 800265e:	4602      	mov	r2, r0
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <main+0x3d8>)
 8002662:	601a      	str	r2, [r3, #0]





		sprintf (buf, "%d", (int)accAngleX);
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <main+0x3dc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fb4b 	bl	8000d04 <__aeabi_f2iz>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	4911      	ldr	r1, [pc, #68]	; (80026b8 <main+0x3e0>)
 8002674:	4811      	ldr	r0, [pc, #68]	; (80026bc <main+0x3e4>)
 8002676:	f000 f8b3 	bl	80027e0 <siprintf>
		USART_SEND_STRING(USART1,buf);
 800267a:	4910      	ldr	r1, [pc, #64]	; (80026bc <main+0x3e4>)
 800267c:	4810      	ldr	r0, [pc, #64]	; (80026c0 <main+0x3e8>)
 800267e:	f7ff fbc3 	bl	8001e08 <USART_SEND_STRING>
		delay(3, U_ms, clk);
 8002682:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <main+0x3ec>)
 8002684:	2100      	movs	r1, #0
 8002686:	2003      	movs	r0, #3
 8002688:	f7fe ff6a 	bl	8001560 <delay>
		USART_SEND_STRING(USART1," \n");
 800268c:	490e      	ldr	r1, [pc, #56]	; (80026c8 <main+0x3f0>)
 800268e:	480c      	ldr	r0, [pc, #48]	; (80026c0 <main+0x3e8>)
 8002690:	f7ff fbba 	bl	8001e08 <USART_SEND_STRING>
		delay(1, U_ms, clk);
 8002694:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <main+0x3ec>)
 8002696:	2100      	movs	r1, #0
 8002698:	2001      	movs	r0, #1
 800269a:	f7fe ff61 	bl	8001560 <delay>
		Data1 = 0x00;
 800269e:	e632      	b.n	8002306 <main+0x2e>
 80026a0:	00000000 	.word	0x00000000
 80026a4:	40506000 	.word	0x40506000
 80026a8:	20000164 	.word	0x20000164
 80026ac:	200000b8 	.word	0x200000b8
 80026b0:	20000194 	.word	0x20000194
 80026b4:	20000154 	.word	0x20000154
 80026b8:	08004430 	.word	0x08004430
 80026bc:	20000180 	.word	0x20000180
 80026c0:	40013800 	.word	0x40013800
 80026c4:	007a1200 	.word	0x007a1200
 80026c8:	08004434 	.word	0x08004434

080026cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <_sbrk+0x5c>)
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <_sbrk+0x60>)
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <_sbrk+0x64>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <_sbrk+0x68>)
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d207      	bcs.n	800270c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026fc:	f000 f846 	bl	800278c <__errno>
 8002700:	4602      	mov	r2, r0
 8002702:	230c      	movs	r3, #12
 8002704:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e009      	b.n	8002720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <_sbrk+0x64>)
 800271c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20005000 	.word	0x20005000
 800272c:	00000400 	.word	0x00000400
 8002730:	200000bc 	.word	0x200000bc
 8002734:	200001a8 	.word	0x200001a8

08002738 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002738:	480d      	ldr	r0, [pc, #52]	; (8002770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800273a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800273c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002740:	480c      	ldr	r0, [pc, #48]	; (8002774 <LoopForever+0x6>)
  ldr r1, =_edata
 8002742:	490d      	ldr	r1, [pc, #52]	; (8002778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <LoopForever+0xe>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002748:	e002      	b.n	8002750 <LoopCopyDataInit>

0800274a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800274a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800274c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274e:	3304      	adds	r3, #4

08002750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002754:	d3f9      	bcc.n	800274a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002758:	4c0a      	ldr	r4, [pc, #40]	; (8002784 <LoopForever+0x16>)
  movs r3, #0
 800275a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800275c:	e001      	b.n	8002762 <LoopFillZerobss>

0800275e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002760:	3204      	adds	r2, #4

08002762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002764:	d3fb      	bcc.n	800275e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002766:	f000 f817 	bl	8002798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800276a:	f7ff fdb5 	bl	80022d8 <main>

0800276e <LoopForever>:

LoopForever:
    b LoopForever
 800276e:	e7fe      	b.n	800276e <LoopForever>
  ldr   r0, =_estack
 8002770:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002778:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800277c:	08004508 	.word	0x08004508
  ldr r2, =_sbss
 8002780:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002784:	200001a4 	.word	0x200001a4

08002788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002788:	e7fe      	b.n	8002788 <ADC1_2_IRQHandler>
	...

0800278c <__errno>:
 800278c:	4b01      	ldr	r3, [pc, #4]	; (8002794 <__errno+0x8>)
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000020 	.word	0x20000020

08002798 <__libc_init_array>:
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	2500      	movs	r5, #0
 800279c:	4e0c      	ldr	r6, [pc, #48]	; (80027d0 <__libc_init_array+0x38>)
 800279e:	4c0d      	ldr	r4, [pc, #52]	; (80027d4 <__libc_init_array+0x3c>)
 80027a0:	1ba4      	subs	r4, r4, r6
 80027a2:	10a4      	asrs	r4, r4, #2
 80027a4:	42a5      	cmp	r5, r4
 80027a6:	d109      	bne.n	80027bc <__libc_init_array+0x24>
 80027a8:	f001 fe36 	bl	8004418 <_init>
 80027ac:	2500      	movs	r5, #0
 80027ae:	4e0a      	ldr	r6, [pc, #40]	; (80027d8 <__libc_init_array+0x40>)
 80027b0:	4c0a      	ldr	r4, [pc, #40]	; (80027dc <__libc_init_array+0x44>)
 80027b2:	1ba4      	subs	r4, r4, r6
 80027b4:	10a4      	asrs	r4, r4, #2
 80027b6:	42a5      	cmp	r5, r4
 80027b8:	d105      	bne.n	80027c6 <__libc_init_array+0x2e>
 80027ba:	bd70      	pop	{r4, r5, r6, pc}
 80027bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027c0:	4798      	blx	r3
 80027c2:	3501      	adds	r5, #1
 80027c4:	e7ee      	b.n	80027a4 <__libc_init_array+0xc>
 80027c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027ca:	4798      	blx	r3
 80027cc:	3501      	adds	r5, #1
 80027ce:	e7f2      	b.n	80027b6 <__libc_init_array+0x1e>
 80027d0:	08004500 	.word	0x08004500
 80027d4:	08004500 	.word	0x08004500
 80027d8:	08004500 	.word	0x08004500
 80027dc:	08004504 	.word	0x08004504

080027e0 <siprintf>:
 80027e0:	b40e      	push	{r1, r2, r3}
 80027e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027e6:	b500      	push	{lr}
 80027e8:	b09c      	sub	sp, #112	; 0x70
 80027ea:	ab1d      	add	r3, sp, #116	; 0x74
 80027ec:	9002      	str	r0, [sp, #8]
 80027ee:	9006      	str	r0, [sp, #24]
 80027f0:	9107      	str	r1, [sp, #28]
 80027f2:	9104      	str	r1, [sp, #16]
 80027f4:	4808      	ldr	r0, [pc, #32]	; (8002818 <siprintf+0x38>)
 80027f6:	4909      	ldr	r1, [pc, #36]	; (800281c <siprintf+0x3c>)
 80027f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80027fc:	9105      	str	r1, [sp, #20]
 80027fe:	6800      	ldr	r0, [r0, #0]
 8002800:	a902      	add	r1, sp, #8
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	f000 f8e6 	bl	80029d4 <_svfiprintf_r>
 8002808:	2200      	movs	r2, #0
 800280a:	9b02      	ldr	r3, [sp, #8]
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	b01c      	add	sp, #112	; 0x70
 8002810:	f85d eb04 	ldr.w	lr, [sp], #4
 8002814:	b003      	add	sp, #12
 8002816:	4770      	bx	lr
 8002818:	20000020 	.word	0x20000020
 800281c:	ffff0208 	.word	0xffff0208

08002820 <_malloc_r>:
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	1ccd      	adds	r5, r1, #3
 8002824:	f025 0503 	bic.w	r5, r5, #3
 8002828:	3508      	adds	r5, #8
 800282a:	2d0c      	cmp	r5, #12
 800282c:	bf38      	it	cc
 800282e:	250c      	movcc	r5, #12
 8002830:	2d00      	cmp	r5, #0
 8002832:	4606      	mov	r6, r0
 8002834:	db01      	blt.n	800283a <_malloc_r+0x1a>
 8002836:	42a9      	cmp	r1, r5
 8002838:	d903      	bls.n	8002842 <_malloc_r+0x22>
 800283a:	230c      	movs	r3, #12
 800283c:	6033      	str	r3, [r6, #0]
 800283e:	2000      	movs	r0, #0
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 8002842:	f000 fb89 	bl	8002f58 <__malloc_lock>
 8002846:	4a21      	ldr	r2, [pc, #132]	; (80028cc <_malloc_r+0xac>)
 8002848:	6814      	ldr	r4, [r2, #0]
 800284a:	4621      	mov	r1, r4
 800284c:	b991      	cbnz	r1, 8002874 <_malloc_r+0x54>
 800284e:	4c20      	ldr	r4, [pc, #128]	; (80028d0 <_malloc_r+0xb0>)
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	b91b      	cbnz	r3, 800285c <_malloc_r+0x3c>
 8002854:	4630      	mov	r0, r6
 8002856:	f000 fb3d 	bl	8002ed4 <_sbrk_r>
 800285a:	6020      	str	r0, [r4, #0]
 800285c:	4629      	mov	r1, r5
 800285e:	4630      	mov	r0, r6
 8002860:	f000 fb38 	bl	8002ed4 <_sbrk_r>
 8002864:	1c43      	adds	r3, r0, #1
 8002866:	d124      	bne.n	80028b2 <_malloc_r+0x92>
 8002868:	230c      	movs	r3, #12
 800286a:	4630      	mov	r0, r6
 800286c:	6033      	str	r3, [r6, #0]
 800286e:	f000 fb74 	bl	8002f5a <__malloc_unlock>
 8002872:	e7e4      	b.n	800283e <_malloc_r+0x1e>
 8002874:	680b      	ldr	r3, [r1, #0]
 8002876:	1b5b      	subs	r3, r3, r5
 8002878:	d418      	bmi.n	80028ac <_malloc_r+0x8c>
 800287a:	2b0b      	cmp	r3, #11
 800287c:	d90f      	bls.n	800289e <_malloc_r+0x7e>
 800287e:	600b      	str	r3, [r1, #0]
 8002880:	18cc      	adds	r4, r1, r3
 8002882:	50cd      	str	r5, [r1, r3]
 8002884:	4630      	mov	r0, r6
 8002886:	f000 fb68 	bl	8002f5a <__malloc_unlock>
 800288a:	f104 000b 	add.w	r0, r4, #11
 800288e:	1d23      	adds	r3, r4, #4
 8002890:	f020 0007 	bic.w	r0, r0, #7
 8002894:	1ac3      	subs	r3, r0, r3
 8002896:	d0d3      	beq.n	8002840 <_malloc_r+0x20>
 8002898:	425a      	negs	r2, r3
 800289a:	50e2      	str	r2, [r4, r3]
 800289c:	e7d0      	b.n	8002840 <_malloc_r+0x20>
 800289e:	684b      	ldr	r3, [r1, #4]
 80028a0:	428c      	cmp	r4, r1
 80028a2:	bf16      	itet	ne
 80028a4:	6063      	strne	r3, [r4, #4]
 80028a6:	6013      	streq	r3, [r2, #0]
 80028a8:	460c      	movne	r4, r1
 80028aa:	e7eb      	b.n	8002884 <_malloc_r+0x64>
 80028ac:	460c      	mov	r4, r1
 80028ae:	6849      	ldr	r1, [r1, #4]
 80028b0:	e7cc      	b.n	800284c <_malloc_r+0x2c>
 80028b2:	1cc4      	adds	r4, r0, #3
 80028b4:	f024 0403 	bic.w	r4, r4, #3
 80028b8:	42a0      	cmp	r0, r4
 80028ba:	d005      	beq.n	80028c8 <_malloc_r+0xa8>
 80028bc:	1a21      	subs	r1, r4, r0
 80028be:	4630      	mov	r0, r6
 80028c0:	f000 fb08 	bl	8002ed4 <_sbrk_r>
 80028c4:	3001      	adds	r0, #1
 80028c6:	d0cf      	beq.n	8002868 <_malloc_r+0x48>
 80028c8:	6025      	str	r5, [r4, #0]
 80028ca:	e7db      	b.n	8002884 <_malloc_r+0x64>
 80028cc:	200000c0 	.word	0x200000c0
 80028d0:	200000c4 	.word	0x200000c4

080028d4 <_realloc_r>:
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	4607      	mov	r7, r0
 80028d8:	4614      	mov	r4, r2
 80028da:	460e      	mov	r6, r1
 80028dc:	b921      	cbnz	r1, 80028e8 <_realloc_r+0x14>
 80028de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80028e2:	4611      	mov	r1, r2
 80028e4:	f7ff bf9c 	b.w	8002820 <_malloc_r>
 80028e8:	b922      	cbnz	r2, 80028f4 <_realloc_r+0x20>
 80028ea:	f000 fb37 	bl	8002f5c <_free_r>
 80028ee:	4625      	mov	r5, r4
 80028f0:	4628      	mov	r0, r5
 80028f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028f4:	f000 fb7e 	bl	8002ff4 <_malloc_usable_size_r>
 80028f8:	42a0      	cmp	r0, r4
 80028fa:	d20f      	bcs.n	800291c <_realloc_r+0x48>
 80028fc:	4621      	mov	r1, r4
 80028fe:	4638      	mov	r0, r7
 8002900:	f7ff ff8e 	bl	8002820 <_malloc_r>
 8002904:	4605      	mov	r5, r0
 8002906:	2800      	cmp	r0, #0
 8002908:	d0f2      	beq.n	80028f0 <_realloc_r+0x1c>
 800290a:	4631      	mov	r1, r6
 800290c:	4622      	mov	r2, r4
 800290e:	f000 faff 	bl	8002f10 <memcpy>
 8002912:	4631      	mov	r1, r6
 8002914:	4638      	mov	r0, r7
 8002916:	f000 fb21 	bl	8002f5c <_free_r>
 800291a:	e7e9      	b.n	80028f0 <_realloc_r+0x1c>
 800291c:	4635      	mov	r5, r6
 800291e:	e7e7      	b.n	80028f0 <_realloc_r+0x1c>

08002920 <__ssputs_r>:
 8002920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002924:	688e      	ldr	r6, [r1, #8]
 8002926:	4682      	mov	sl, r0
 8002928:	429e      	cmp	r6, r3
 800292a:	460c      	mov	r4, r1
 800292c:	4690      	mov	r8, r2
 800292e:	4699      	mov	r9, r3
 8002930:	d837      	bhi.n	80029a2 <__ssputs_r+0x82>
 8002932:	898a      	ldrh	r2, [r1, #12]
 8002934:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002938:	d031      	beq.n	800299e <__ssputs_r+0x7e>
 800293a:	2302      	movs	r3, #2
 800293c:	6825      	ldr	r5, [r4, #0]
 800293e:	6909      	ldr	r1, [r1, #16]
 8002940:	1a6f      	subs	r7, r5, r1
 8002942:	6965      	ldr	r5, [r4, #20]
 8002944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002948:	fb95 f5f3 	sdiv	r5, r5, r3
 800294c:	f109 0301 	add.w	r3, r9, #1
 8002950:	443b      	add	r3, r7
 8002952:	429d      	cmp	r5, r3
 8002954:	bf38      	it	cc
 8002956:	461d      	movcc	r5, r3
 8002958:	0553      	lsls	r3, r2, #21
 800295a:	d530      	bpl.n	80029be <__ssputs_r+0x9e>
 800295c:	4629      	mov	r1, r5
 800295e:	f7ff ff5f 	bl	8002820 <_malloc_r>
 8002962:	4606      	mov	r6, r0
 8002964:	b950      	cbnz	r0, 800297c <__ssputs_r+0x5c>
 8002966:	230c      	movs	r3, #12
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	f8ca 3000 	str.w	r3, [sl]
 8002970:	89a3      	ldrh	r3, [r4, #12]
 8002972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002976:	81a3      	strh	r3, [r4, #12]
 8002978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800297c:	463a      	mov	r2, r7
 800297e:	6921      	ldr	r1, [r4, #16]
 8002980:	f000 fac6 	bl	8002f10 <memcpy>
 8002984:	89a3      	ldrh	r3, [r4, #12]
 8002986:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800298a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298e:	81a3      	strh	r3, [r4, #12]
 8002990:	6126      	str	r6, [r4, #16]
 8002992:	443e      	add	r6, r7
 8002994:	6026      	str	r6, [r4, #0]
 8002996:	464e      	mov	r6, r9
 8002998:	6165      	str	r5, [r4, #20]
 800299a:	1bed      	subs	r5, r5, r7
 800299c:	60a5      	str	r5, [r4, #8]
 800299e:	454e      	cmp	r6, r9
 80029a0:	d900      	bls.n	80029a4 <__ssputs_r+0x84>
 80029a2:	464e      	mov	r6, r9
 80029a4:	4632      	mov	r2, r6
 80029a6:	4641      	mov	r1, r8
 80029a8:	6820      	ldr	r0, [r4, #0]
 80029aa:	f000 fabc 	bl	8002f26 <memmove>
 80029ae:	68a3      	ldr	r3, [r4, #8]
 80029b0:	2000      	movs	r0, #0
 80029b2:	1b9b      	subs	r3, r3, r6
 80029b4:	60a3      	str	r3, [r4, #8]
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	441e      	add	r6, r3
 80029ba:	6026      	str	r6, [r4, #0]
 80029bc:	e7dc      	b.n	8002978 <__ssputs_r+0x58>
 80029be:	462a      	mov	r2, r5
 80029c0:	f7ff ff88 	bl	80028d4 <_realloc_r>
 80029c4:	4606      	mov	r6, r0
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d1e2      	bne.n	8002990 <__ssputs_r+0x70>
 80029ca:	6921      	ldr	r1, [r4, #16]
 80029cc:	4650      	mov	r0, sl
 80029ce:	f000 fac5 	bl	8002f5c <_free_r>
 80029d2:	e7c8      	b.n	8002966 <__ssputs_r+0x46>

080029d4 <_svfiprintf_r>:
 80029d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d8:	461d      	mov	r5, r3
 80029da:	898b      	ldrh	r3, [r1, #12]
 80029dc:	b09d      	sub	sp, #116	; 0x74
 80029de:	061f      	lsls	r7, r3, #24
 80029e0:	4680      	mov	r8, r0
 80029e2:	460c      	mov	r4, r1
 80029e4:	4616      	mov	r6, r2
 80029e6:	d50f      	bpl.n	8002a08 <_svfiprintf_r+0x34>
 80029e8:	690b      	ldr	r3, [r1, #16]
 80029ea:	b96b      	cbnz	r3, 8002a08 <_svfiprintf_r+0x34>
 80029ec:	2140      	movs	r1, #64	; 0x40
 80029ee:	f7ff ff17 	bl	8002820 <_malloc_r>
 80029f2:	6020      	str	r0, [r4, #0]
 80029f4:	6120      	str	r0, [r4, #16]
 80029f6:	b928      	cbnz	r0, 8002a04 <_svfiprintf_r+0x30>
 80029f8:	230c      	movs	r3, #12
 80029fa:	f8c8 3000 	str.w	r3, [r8]
 80029fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002a02:	e0c8      	b.n	8002b96 <_svfiprintf_r+0x1c2>
 8002a04:	2340      	movs	r3, #64	; 0x40
 8002a06:	6163      	str	r3, [r4, #20]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a12:	2330      	movs	r3, #48	; 0x30
 8002a14:	f04f 0b01 	mov.w	fp, #1
 8002a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a1c:	9503      	str	r5, [sp, #12]
 8002a1e:	4637      	mov	r7, r6
 8002a20:	463d      	mov	r5, r7
 8002a22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002a26:	b10b      	cbz	r3, 8002a2c <_svfiprintf_r+0x58>
 8002a28:	2b25      	cmp	r3, #37	; 0x25
 8002a2a:	d13e      	bne.n	8002aaa <_svfiprintf_r+0xd6>
 8002a2c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002a30:	d00b      	beq.n	8002a4a <_svfiprintf_r+0x76>
 8002a32:	4653      	mov	r3, sl
 8002a34:	4632      	mov	r2, r6
 8002a36:	4621      	mov	r1, r4
 8002a38:	4640      	mov	r0, r8
 8002a3a:	f7ff ff71 	bl	8002920 <__ssputs_r>
 8002a3e:	3001      	adds	r0, #1
 8002a40:	f000 80a4 	beq.w	8002b8c <_svfiprintf_r+0x1b8>
 8002a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a46:	4453      	add	r3, sl
 8002a48:	9309      	str	r3, [sp, #36]	; 0x24
 8002a4a:	783b      	ldrb	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 809d 	beq.w	8002b8c <_svfiprintf_r+0x1b8>
 8002a52:	2300      	movs	r3, #0
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a5c:	9304      	str	r3, [sp, #16]
 8002a5e:	9307      	str	r3, [sp, #28]
 8002a60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a64:	931a      	str	r3, [sp, #104]	; 0x68
 8002a66:	462f      	mov	r7, r5
 8002a68:	2205      	movs	r2, #5
 8002a6a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002a6e:	4850      	ldr	r0, [pc, #320]	; (8002bb0 <_svfiprintf_r+0x1dc>)
 8002a70:	f000 fa40 	bl	8002ef4 <memchr>
 8002a74:	9b04      	ldr	r3, [sp, #16]
 8002a76:	b9d0      	cbnz	r0, 8002aae <_svfiprintf_r+0xda>
 8002a78:	06d9      	lsls	r1, r3, #27
 8002a7a:	bf44      	itt	mi
 8002a7c:	2220      	movmi	r2, #32
 8002a7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a82:	071a      	lsls	r2, r3, #28
 8002a84:	bf44      	itt	mi
 8002a86:	222b      	movmi	r2, #43	; 0x2b
 8002a88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a8c:	782a      	ldrb	r2, [r5, #0]
 8002a8e:	2a2a      	cmp	r2, #42	; 0x2a
 8002a90:	d015      	beq.n	8002abe <_svfiprintf_r+0xea>
 8002a92:	462f      	mov	r7, r5
 8002a94:	2000      	movs	r0, #0
 8002a96:	250a      	movs	r5, #10
 8002a98:	9a07      	ldr	r2, [sp, #28]
 8002a9a:	4639      	mov	r1, r7
 8002a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002aa0:	3b30      	subs	r3, #48	; 0x30
 8002aa2:	2b09      	cmp	r3, #9
 8002aa4:	d94d      	bls.n	8002b42 <_svfiprintf_r+0x16e>
 8002aa6:	b1b8      	cbz	r0, 8002ad8 <_svfiprintf_r+0x104>
 8002aa8:	e00f      	b.n	8002aca <_svfiprintf_r+0xf6>
 8002aaa:	462f      	mov	r7, r5
 8002aac:	e7b8      	b.n	8002a20 <_svfiprintf_r+0x4c>
 8002aae:	4a40      	ldr	r2, [pc, #256]	; (8002bb0 <_svfiprintf_r+0x1dc>)
 8002ab0:	463d      	mov	r5, r7
 8002ab2:	1a80      	subs	r0, r0, r2
 8002ab4:	fa0b f000 	lsl.w	r0, fp, r0
 8002ab8:	4318      	orrs	r0, r3
 8002aba:	9004      	str	r0, [sp, #16]
 8002abc:	e7d3      	b.n	8002a66 <_svfiprintf_r+0x92>
 8002abe:	9a03      	ldr	r2, [sp, #12]
 8002ac0:	1d11      	adds	r1, r2, #4
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	9103      	str	r1, [sp, #12]
 8002ac6:	2a00      	cmp	r2, #0
 8002ac8:	db01      	blt.n	8002ace <_svfiprintf_r+0xfa>
 8002aca:	9207      	str	r2, [sp, #28]
 8002acc:	e004      	b.n	8002ad8 <_svfiprintf_r+0x104>
 8002ace:	4252      	negs	r2, r2
 8002ad0:	f043 0302 	orr.w	r3, r3, #2
 8002ad4:	9207      	str	r2, [sp, #28]
 8002ad6:	9304      	str	r3, [sp, #16]
 8002ad8:	783b      	ldrb	r3, [r7, #0]
 8002ada:	2b2e      	cmp	r3, #46	; 0x2e
 8002adc:	d10c      	bne.n	8002af8 <_svfiprintf_r+0x124>
 8002ade:	787b      	ldrb	r3, [r7, #1]
 8002ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae2:	d133      	bne.n	8002b4c <_svfiprintf_r+0x178>
 8002ae4:	9b03      	ldr	r3, [sp, #12]
 8002ae6:	3702      	adds	r7, #2
 8002ae8:	1d1a      	adds	r2, r3, #4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	9203      	str	r2, [sp, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bfb8      	it	lt
 8002af2:	f04f 33ff 	movlt.w	r3, #4294967295
 8002af6:	9305      	str	r3, [sp, #20]
 8002af8:	4d2e      	ldr	r5, [pc, #184]	; (8002bb4 <_svfiprintf_r+0x1e0>)
 8002afa:	2203      	movs	r2, #3
 8002afc:	7839      	ldrb	r1, [r7, #0]
 8002afe:	4628      	mov	r0, r5
 8002b00:	f000 f9f8 	bl	8002ef4 <memchr>
 8002b04:	b138      	cbz	r0, 8002b16 <_svfiprintf_r+0x142>
 8002b06:	2340      	movs	r3, #64	; 0x40
 8002b08:	1b40      	subs	r0, r0, r5
 8002b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8002b0e:	9b04      	ldr	r3, [sp, #16]
 8002b10:	3701      	adds	r7, #1
 8002b12:	4303      	orrs	r3, r0
 8002b14:	9304      	str	r3, [sp, #16]
 8002b16:	7839      	ldrb	r1, [r7, #0]
 8002b18:	2206      	movs	r2, #6
 8002b1a:	4827      	ldr	r0, [pc, #156]	; (8002bb8 <_svfiprintf_r+0x1e4>)
 8002b1c:	1c7e      	adds	r6, r7, #1
 8002b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b22:	f000 f9e7 	bl	8002ef4 <memchr>
 8002b26:	2800      	cmp	r0, #0
 8002b28:	d038      	beq.n	8002b9c <_svfiprintf_r+0x1c8>
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <_svfiprintf_r+0x1e8>)
 8002b2c:	bb13      	cbnz	r3, 8002b74 <_svfiprintf_r+0x1a0>
 8002b2e:	9b03      	ldr	r3, [sp, #12]
 8002b30:	3307      	adds	r3, #7
 8002b32:	f023 0307 	bic.w	r3, r3, #7
 8002b36:	3308      	adds	r3, #8
 8002b38:	9303      	str	r3, [sp, #12]
 8002b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b3c:	444b      	add	r3, r9
 8002b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8002b40:	e76d      	b.n	8002a1e <_svfiprintf_r+0x4a>
 8002b42:	fb05 3202 	mla	r2, r5, r2, r3
 8002b46:	2001      	movs	r0, #1
 8002b48:	460f      	mov	r7, r1
 8002b4a:	e7a6      	b.n	8002a9a <_svfiprintf_r+0xc6>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	250a      	movs	r5, #10
 8002b50:	4619      	mov	r1, r3
 8002b52:	3701      	adds	r7, #1
 8002b54:	9305      	str	r3, [sp, #20]
 8002b56:	4638      	mov	r0, r7
 8002b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b5c:	3a30      	subs	r2, #48	; 0x30
 8002b5e:	2a09      	cmp	r2, #9
 8002b60:	d903      	bls.n	8002b6a <_svfiprintf_r+0x196>
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0c8      	beq.n	8002af8 <_svfiprintf_r+0x124>
 8002b66:	9105      	str	r1, [sp, #20]
 8002b68:	e7c6      	b.n	8002af8 <_svfiprintf_r+0x124>
 8002b6a:	fb05 2101 	mla	r1, r5, r1, r2
 8002b6e:	2301      	movs	r3, #1
 8002b70:	4607      	mov	r7, r0
 8002b72:	e7f0      	b.n	8002b56 <_svfiprintf_r+0x182>
 8002b74:	ab03      	add	r3, sp, #12
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4622      	mov	r2, r4
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <_svfiprintf_r+0x1ec>)
 8002b7c:	a904      	add	r1, sp, #16
 8002b7e:	4640      	mov	r0, r8
 8002b80:	f3af 8000 	nop.w
 8002b84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002b88:	4681      	mov	r9, r0
 8002b8a:	d1d6      	bne.n	8002b3a <_svfiprintf_r+0x166>
 8002b8c:	89a3      	ldrh	r3, [r4, #12]
 8002b8e:	065b      	lsls	r3, r3, #25
 8002b90:	f53f af35 	bmi.w	80029fe <_svfiprintf_r+0x2a>
 8002b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b96:	b01d      	add	sp, #116	; 0x74
 8002b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b9c:	ab03      	add	r3, sp, #12
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <_svfiprintf_r+0x1ec>)
 8002ba4:	a904      	add	r1, sp, #16
 8002ba6:	4640      	mov	r0, r8
 8002ba8:	f000 f882 	bl	8002cb0 <_printf_i>
 8002bac:	e7ea      	b.n	8002b84 <_svfiprintf_r+0x1b0>
 8002bae:	bf00      	nop
 8002bb0:	08004437 	.word	0x08004437
 8002bb4:	0800443d 	.word	0x0800443d
 8002bb8:	08004441 	.word	0x08004441
 8002bbc:	00000000 	.word	0x00000000
 8002bc0:	08002921 	.word	0x08002921

08002bc4 <_printf_common>:
 8002bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc8:	4691      	mov	r9, r2
 8002bca:	461f      	mov	r7, r3
 8002bcc:	688a      	ldr	r2, [r1, #8]
 8002bce:	690b      	ldr	r3, [r1, #16]
 8002bd0:	4606      	mov	r6, r0
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	bfb8      	it	lt
 8002bd6:	4613      	movlt	r3, r2
 8002bd8:	f8c9 3000 	str.w	r3, [r9]
 8002bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002be0:	460c      	mov	r4, r1
 8002be2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002be6:	b112      	cbz	r2, 8002bee <_printf_common+0x2a>
 8002be8:	3301      	adds	r3, #1
 8002bea:	f8c9 3000 	str.w	r3, [r9]
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	0699      	lsls	r1, r3, #26
 8002bf2:	bf42      	ittt	mi
 8002bf4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002bf8:	3302      	addmi	r3, #2
 8002bfa:	f8c9 3000 	strmi.w	r3, [r9]
 8002bfe:	6825      	ldr	r5, [r4, #0]
 8002c00:	f015 0506 	ands.w	r5, r5, #6
 8002c04:	d107      	bne.n	8002c16 <_printf_common+0x52>
 8002c06:	f104 0a19 	add.w	sl, r4, #25
 8002c0a:	68e3      	ldr	r3, [r4, #12]
 8002c0c:	f8d9 2000 	ldr.w	r2, [r9]
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	42ab      	cmp	r3, r5
 8002c14:	dc29      	bgt.n	8002c6a <_printf_common+0xa6>
 8002c16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c1a:	6822      	ldr	r2, [r4, #0]
 8002c1c:	3300      	adds	r3, #0
 8002c1e:	bf18      	it	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	0692      	lsls	r2, r2, #26
 8002c24:	d42e      	bmi.n	8002c84 <_printf_common+0xc0>
 8002c26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c2a:	4639      	mov	r1, r7
 8002c2c:	4630      	mov	r0, r6
 8002c2e:	47c0      	blx	r8
 8002c30:	3001      	adds	r0, #1
 8002c32:	d021      	beq.n	8002c78 <_printf_common+0xb4>
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	68e5      	ldr	r5, [r4, #12]
 8002c38:	f003 0306 	and.w	r3, r3, #6
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	bf18      	it	ne
 8002c40:	2500      	movne	r5, #0
 8002c42:	f8d9 2000 	ldr.w	r2, [r9]
 8002c46:	f04f 0900 	mov.w	r9, #0
 8002c4a:	bf08      	it	eq
 8002c4c:	1aad      	subeq	r5, r5, r2
 8002c4e:	68a3      	ldr	r3, [r4, #8]
 8002c50:	6922      	ldr	r2, [r4, #16]
 8002c52:	bf08      	it	eq
 8002c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	bfc4      	itt	gt
 8002c5c:	1a9b      	subgt	r3, r3, r2
 8002c5e:	18ed      	addgt	r5, r5, r3
 8002c60:	341a      	adds	r4, #26
 8002c62:	454d      	cmp	r5, r9
 8002c64:	d11a      	bne.n	8002c9c <_printf_common+0xd8>
 8002c66:	2000      	movs	r0, #0
 8002c68:	e008      	b.n	8002c7c <_printf_common+0xb8>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	4652      	mov	r2, sl
 8002c6e:	4639      	mov	r1, r7
 8002c70:	4630      	mov	r0, r6
 8002c72:	47c0      	blx	r8
 8002c74:	3001      	adds	r0, #1
 8002c76:	d103      	bne.n	8002c80 <_printf_common+0xbc>
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c80:	3501      	adds	r5, #1
 8002c82:	e7c2      	b.n	8002c0a <_printf_common+0x46>
 8002c84:	2030      	movs	r0, #48	; 0x30
 8002c86:	18e1      	adds	r1, r4, r3
 8002c88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c92:	4422      	add	r2, r4
 8002c94:	3302      	adds	r3, #2
 8002c96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c9a:	e7c4      	b.n	8002c26 <_printf_common+0x62>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	4639      	mov	r1, r7
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	47c0      	blx	r8
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	d0e6      	beq.n	8002c78 <_printf_common+0xb4>
 8002caa:	f109 0901 	add.w	r9, r9, #1
 8002cae:	e7d8      	b.n	8002c62 <_printf_common+0x9e>

08002cb0 <_printf_i>:
 8002cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002cb8:	460c      	mov	r4, r1
 8002cba:	7e09      	ldrb	r1, [r1, #24]
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	296e      	cmp	r1, #110	; 0x6e
 8002cc0:	4617      	mov	r7, r2
 8002cc2:	4606      	mov	r6, r0
 8002cc4:	4698      	mov	r8, r3
 8002cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002cc8:	f000 80b3 	beq.w	8002e32 <_printf_i+0x182>
 8002ccc:	d822      	bhi.n	8002d14 <_printf_i+0x64>
 8002cce:	2963      	cmp	r1, #99	; 0x63
 8002cd0:	d036      	beq.n	8002d40 <_printf_i+0x90>
 8002cd2:	d80a      	bhi.n	8002cea <_printf_i+0x3a>
 8002cd4:	2900      	cmp	r1, #0
 8002cd6:	f000 80b9 	beq.w	8002e4c <_printf_i+0x19c>
 8002cda:	2958      	cmp	r1, #88	; 0x58
 8002cdc:	f000 8083 	beq.w	8002de6 <_printf_i+0x136>
 8002ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ce4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002ce8:	e032      	b.n	8002d50 <_printf_i+0xa0>
 8002cea:	2964      	cmp	r1, #100	; 0x64
 8002cec:	d001      	beq.n	8002cf2 <_printf_i+0x42>
 8002cee:	2969      	cmp	r1, #105	; 0x69
 8002cf0:	d1f6      	bne.n	8002ce0 <_printf_i+0x30>
 8002cf2:	6820      	ldr	r0, [r4, #0]
 8002cf4:	6813      	ldr	r3, [r2, #0]
 8002cf6:	0605      	lsls	r5, r0, #24
 8002cf8:	f103 0104 	add.w	r1, r3, #4
 8002cfc:	d52a      	bpl.n	8002d54 <_printf_i+0xa4>
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6011      	str	r1, [r2, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	da03      	bge.n	8002d0e <_printf_i+0x5e>
 8002d06:	222d      	movs	r2, #45	; 0x2d
 8002d08:	425b      	negs	r3, r3
 8002d0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d0e:	486f      	ldr	r0, [pc, #444]	; (8002ecc <_printf_i+0x21c>)
 8002d10:	220a      	movs	r2, #10
 8002d12:	e039      	b.n	8002d88 <_printf_i+0xd8>
 8002d14:	2973      	cmp	r1, #115	; 0x73
 8002d16:	f000 809d 	beq.w	8002e54 <_printf_i+0x1a4>
 8002d1a:	d808      	bhi.n	8002d2e <_printf_i+0x7e>
 8002d1c:	296f      	cmp	r1, #111	; 0x6f
 8002d1e:	d020      	beq.n	8002d62 <_printf_i+0xb2>
 8002d20:	2970      	cmp	r1, #112	; 0x70
 8002d22:	d1dd      	bne.n	8002ce0 <_printf_i+0x30>
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	f043 0320 	orr.w	r3, r3, #32
 8002d2a:	6023      	str	r3, [r4, #0]
 8002d2c:	e003      	b.n	8002d36 <_printf_i+0x86>
 8002d2e:	2975      	cmp	r1, #117	; 0x75
 8002d30:	d017      	beq.n	8002d62 <_printf_i+0xb2>
 8002d32:	2978      	cmp	r1, #120	; 0x78
 8002d34:	d1d4      	bne.n	8002ce0 <_printf_i+0x30>
 8002d36:	2378      	movs	r3, #120	; 0x78
 8002d38:	4865      	ldr	r0, [pc, #404]	; (8002ed0 <_printf_i+0x220>)
 8002d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d3e:	e055      	b.n	8002dec <_printf_i+0x13c>
 8002d40:	6813      	ldr	r3, [r2, #0]
 8002d42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d46:	1d19      	adds	r1, r3, #4
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6011      	str	r1, [r2, #0]
 8002d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d50:	2301      	movs	r3, #1
 8002d52:	e08c      	b.n	8002e6e <_printf_i+0x1be>
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d5a:	6011      	str	r1, [r2, #0]
 8002d5c:	bf18      	it	ne
 8002d5e:	b21b      	sxthne	r3, r3
 8002d60:	e7cf      	b.n	8002d02 <_printf_i+0x52>
 8002d62:	6813      	ldr	r3, [r2, #0]
 8002d64:	6825      	ldr	r5, [r4, #0]
 8002d66:	1d18      	adds	r0, r3, #4
 8002d68:	6010      	str	r0, [r2, #0]
 8002d6a:	0628      	lsls	r0, r5, #24
 8002d6c:	d501      	bpl.n	8002d72 <_printf_i+0xc2>
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	e002      	b.n	8002d78 <_printf_i+0xc8>
 8002d72:	0668      	lsls	r0, r5, #25
 8002d74:	d5fb      	bpl.n	8002d6e <_printf_i+0xbe>
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	296f      	cmp	r1, #111	; 0x6f
 8002d7a:	bf14      	ite	ne
 8002d7c:	220a      	movne	r2, #10
 8002d7e:	2208      	moveq	r2, #8
 8002d80:	4852      	ldr	r0, [pc, #328]	; (8002ecc <_printf_i+0x21c>)
 8002d82:	2100      	movs	r1, #0
 8002d84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d88:	6865      	ldr	r5, [r4, #4]
 8002d8a:	2d00      	cmp	r5, #0
 8002d8c:	60a5      	str	r5, [r4, #8]
 8002d8e:	f2c0 8095 	blt.w	8002ebc <_printf_i+0x20c>
 8002d92:	6821      	ldr	r1, [r4, #0]
 8002d94:	f021 0104 	bic.w	r1, r1, #4
 8002d98:	6021      	str	r1, [r4, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d13d      	bne.n	8002e1a <_printf_i+0x16a>
 8002d9e:	2d00      	cmp	r5, #0
 8002da0:	f040 808e 	bne.w	8002ec0 <_printf_i+0x210>
 8002da4:	4665      	mov	r5, ip
 8002da6:	2a08      	cmp	r2, #8
 8002da8:	d10b      	bne.n	8002dc2 <_printf_i+0x112>
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	07db      	lsls	r3, r3, #31
 8002dae:	d508      	bpl.n	8002dc2 <_printf_i+0x112>
 8002db0:	6923      	ldr	r3, [r4, #16]
 8002db2:	6862      	ldr	r2, [r4, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	bfde      	ittt	le
 8002db8:	2330      	movle	r3, #48	; 0x30
 8002dba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002dbe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002dc2:	ebac 0305 	sub.w	r3, ip, r5
 8002dc6:	6123      	str	r3, [r4, #16]
 8002dc8:	f8cd 8000 	str.w	r8, [sp]
 8002dcc:	463b      	mov	r3, r7
 8002dce:	aa03      	add	r2, sp, #12
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	f7ff fef6 	bl	8002bc4 <_printf_common>
 8002dd8:	3001      	adds	r0, #1
 8002dda:	d14d      	bne.n	8002e78 <_printf_i+0x1c8>
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	b005      	add	sp, #20
 8002de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002de6:	4839      	ldr	r0, [pc, #228]	; (8002ecc <_printf_i+0x21c>)
 8002de8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002dec:	6813      	ldr	r3, [r2, #0]
 8002dee:	6821      	ldr	r1, [r4, #0]
 8002df0:	1d1d      	adds	r5, r3, #4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6015      	str	r5, [r2, #0]
 8002df6:	060a      	lsls	r2, r1, #24
 8002df8:	d50b      	bpl.n	8002e12 <_printf_i+0x162>
 8002dfa:	07ca      	lsls	r2, r1, #31
 8002dfc:	bf44      	itt	mi
 8002dfe:	f041 0120 	orrmi.w	r1, r1, #32
 8002e02:	6021      	strmi	r1, [r4, #0]
 8002e04:	b91b      	cbnz	r3, 8002e0e <_printf_i+0x15e>
 8002e06:	6822      	ldr	r2, [r4, #0]
 8002e08:	f022 0220 	bic.w	r2, r2, #32
 8002e0c:	6022      	str	r2, [r4, #0]
 8002e0e:	2210      	movs	r2, #16
 8002e10:	e7b7      	b.n	8002d82 <_printf_i+0xd2>
 8002e12:	064d      	lsls	r5, r1, #25
 8002e14:	bf48      	it	mi
 8002e16:	b29b      	uxthmi	r3, r3
 8002e18:	e7ef      	b.n	8002dfa <_printf_i+0x14a>
 8002e1a:	4665      	mov	r5, ip
 8002e1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e20:	fb02 3311 	mls	r3, r2, r1, r3
 8002e24:	5cc3      	ldrb	r3, [r0, r3]
 8002e26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	2900      	cmp	r1, #0
 8002e2e:	d1f5      	bne.n	8002e1c <_printf_i+0x16c>
 8002e30:	e7b9      	b.n	8002da6 <_printf_i+0xf6>
 8002e32:	6813      	ldr	r3, [r2, #0]
 8002e34:	6825      	ldr	r5, [r4, #0]
 8002e36:	1d18      	adds	r0, r3, #4
 8002e38:	6961      	ldr	r1, [r4, #20]
 8002e3a:	6010      	str	r0, [r2, #0]
 8002e3c:	0628      	lsls	r0, r5, #24
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	d501      	bpl.n	8002e46 <_printf_i+0x196>
 8002e42:	6019      	str	r1, [r3, #0]
 8002e44:	e002      	b.n	8002e4c <_printf_i+0x19c>
 8002e46:	066a      	lsls	r2, r5, #25
 8002e48:	d5fb      	bpl.n	8002e42 <_printf_i+0x192>
 8002e4a:	8019      	strh	r1, [r3, #0]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	4665      	mov	r5, ip
 8002e50:	6123      	str	r3, [r4, #16]
 8002e52:	e7b9      	b.n	8002dc8 <_printf_i+0x118>
 8002e54:	6813      	ldr	r3, [r2, #0]
 8002e56:	1d19      	adds	r1, r3, #4
 8002e58:	6011      	str	r1, [r2, #0]
 8002e5a:	681d      	ldr	r5, [r3, #0]
 8002e5c:	6862      	ldr	r2, [r4, #4]
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4628      	mov	r0, r5
 8002e62:	f000 f847 	bl	8002ef4 <memchr>
 8002e66:	b108      	cbz	r0, 8002e6c <_printf_i+0x1bc>
 8002e68:	1b40      	subs	r0, r0, r5
 8002e6a:	6060      	str	r0, [r4, #4]
 8002e6c:	6863      	ldr	r3, [r4, #4]
 8002e6e:	6123      	str	r3, [r4, #16]
 8002e70:	2300      	movs	r3, #0
 8002e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e76:	e7a7      	b.n	8002dc8 <_printf_i+0x118>
 8002e78:	6923      	ldr	r3, [r4, #16]
 8002e7a:	462a      	mov	r2, r5
 8002e7c:	4639      	mov	r1, r7
 8002e7e:	4630      	mov	r0, r6
 8002e80:	47c0      	blx	r8
 8002e82:	3001      	adds	r0, #1
 8002e84:	d0aa      	beq.n	8002ddc <_printf_i+0x12c>
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	079b      	lsls	r3, r3, #30
 8002e8a:	d413      	bmi.n	8002eb4 <_printf_i+0x204>
 8002e8c:	68e0      	ldr	r0, [r4, #12]
 8002e8e:	9b03      	ldr	r3, [sp, #12]
 8002e90:	4298      	cmp	r0, r3
 8002e92:	bfb8      	it	lt
 8002e94:	4618      	movlt	r0, r3
 8002e96:	e7a3      	b.n	8002de0 <_printf_i+0x130>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	464a      	mov	r2, r9
 8002e9c:	4639      	mov	r1, r7
 8002e9e:	4630      	mov	r0, r6
 8002ea0:	47c0      	blx	r8
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	d09a      	beq.n	8002ddc <_printf_i+0x12c>
 8002ea6:	3501      	adds	r5, #1
 8002ea8:	68e3      	ldr	r3, [r4, #12]
 8002eaa:	9a03      	ldr	r2, [sp, #12]
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	42ab      	cmp	r3, r5
 8002eb0:	dcf2      	bgt.n	8002e98 <_printf_i+0x1e8>
 8002eb2:	e7eb      	b.n	8002e8c <_printf_i+0x1dc>
 8002eb4:	2500      	movs	r5, #0
 8002eb6:	f104 0919 	add.w	r9, r4, #25
 8002eba:	e7f5      	b.n	8002ea8 <_printf_i+0x1f8>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ac      	bne.n	8002e1a <_printf_i+0x16a>
 8002ec0:	7803      	ldrb	r3, [r0, #0]
 8002ec2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ec6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002eca:	e76c      	b.n	8002da6 <_printf_i+0xf6>
 8002ecc:	08004448 	.word	0x08004448
 8002ed0:	08004459 	.word	0x08004459

08002ed4 <_sbrk_r>:
 8002ed4:	b538      	push	{r3, r4, r5, lr}
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	4c05      	ldr	r4, [pc, #20]	; (8002ef0 <_sbrk_r+0x1c>)
 8002eda:	4605      	mov	r5, r0
 8002edc:	4608      	mov	r0, r1
 8002ede:	6023      	str	r3, [r4, #0]
 8002ee0:	f7ff fbf4 	bl	80026cc <_sbrk>
 8002ee4:	1c43      	adds	r3, r0, #1
 8002ee6:	d102      	bne.n	8002eee <_sbrk_r+0x1a>
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	b103      	cbz	r3, 8002eee <_sbrk_r+0x1a>
 8002eec:	602b      	str	r3, [r5, #0]
 8002eee:	bd38      	pop	{r3, r4, r5, pc}
 8002ef0:	200001a0 	.word	0x200001a0

08002ef4 <memchr>:
 8002ef4:	b510      	push	{r4, lr}
 8002ef6:	b2c9      	uxtb	r1, r1
 8002ef8:	4402      	add	r2, r0
 8002efa:	4290      	cmp	r0, r2
 8002efc:	4603      	mov	r3, r0
 8002efe:	d101      	bne.n	8002f04 <memchr+0x10>
 8002f00:	2300      	movs	r3, #0
 8002f02:	e003      	b.n	8002f0c <memchr+0x18>
 8002f04:	781c      	ldrb	r4, [r3, #0]
 8002f06:	3001      	adds	r0, #1
 8002f08:	428c      	cmp	r4, r1
 8002f0a:	d1f6      	bne.n	8002efa <memchr+0x6>
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd10      	pop	{r4, pc}

08002f10 <memcpy>:
 8002f10:	b510      	push	{r4, lr}
 8002f12:	1e43      	subs	r3, r0, #1
 8002f14:	440a      	add	r2, r1
 8002f16:	4291      	cmp	r1, r2
 8002f18:	d100      	bne.n	8002f1c <memcpy+0xc>
 8002f1a:	bd10      	pop	{r4, pc}
 8002f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f24:	e7f7      	b.n	8002f16 <memcpy+0x6>

08002f26 <memmove>:
 8002f26:	4288      	cmp	r0, r1
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	eb01 0302 	add.w	r3, r1, r2
 8002f2e:	d807      	bhi.n	8002f40 <memmove+0x1a>
 8002f30:	1e42      	subs	r2, r0, #1
 8002f32:	4299      	cmp	r1, r3
 8002f34:	d00a      	beq.n	8002f4c <memmove+0x26>
 8002f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f3a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002f3e:	e7f8      	b.n	8002f32 <memmove+0xc>
 8002f40:	4283      	cmp	r3, r0
 8002f42:	d9f5      	bls.n	8002f30 <memmove+0xa>
 8002f44:	1881      	adds	r1, r0, r2
 8002f46:	1ad2      	subs	r2, r2, r3
 8002f48:	42d3      	cmn	r3, r2
 8002f4a:	d100      	bne.n	8002f4e <memmove+0x28>
 8002f4c:	bd10      	pop	{r4, pc}
 8002f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002f56:	e7f7      	b.n	8002f48 <memmove+0x22>

08002f58 <__malloc_lock>:
 8002f58:	4770      	bx	lr

08002f5a <__malloc_unlock>:
 8002f5a:	4770      	bx	lr

08002f5c <_free_r>:
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	4605      	mov	r5, r0
 8002f60:	2900      	cmp	r1, #0
 8002f62:	d043      	beq.n	8002fec <_free_r+0x90>
 8002f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f68:	1f0c      	subs	r4, r1, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bfb8      	it	lt
 8002f6e:	18e4      	addlt	r4, r4, r3
 8002f70:	f7ff fff2 	bl	8002f58 <__malloc_lock>
 8002f74:	4a1e      	ldr	r2, [pc, #120]	; (8002ff0 <_free_r+0x94>)
 8002f76:	6813      	ldr	r3, [r2, #0]
 8002f78:	4610      	mov	r0, r2
 8002f7a:	b933      	cbnz	r3, 8002f8a <_free_r+0x2e>
 8002f7c:	6063      	str	r3, [r4, #4]
 8002f7e:	6014      	str	r4, [r2, #0]
 8002f80:	4628      	mov	r0, r5
 8002f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f86:	f7ff bfe8 	b.w	8002f5a <__malloc_unlock>
 8002f8a:	42a3      	cmp	r3, r4
 8002f8c:	d90b      	bls.n	8002fa6 <_free_r+0x4a>
 8002f8e:	6821      	ldr	r1, [r4, #0]
 8002f90:	1862      	adds	r2, r4, r1
 8002f92:	4293      	cmp	r3, r2
 8002f94:	bf01      	itttt	eq
 8002f96:	681a      	ldreq	r2, [r3, #0]
 8002f98:	685b      	ldreq	r3, [r3, #4]
 8002f9a:	1852      	addeq	r2, r2, r1
 8002f9c:	6022      	streq	r2, [r4, #0]
 8002f9e:	6063      	str	r3, [r4, #4]
 8002fa0:	6004      	str	r4, [r0, #0]
 8002fa2:	e7ed      	b.n	8002f80 <_free_r+0x24>
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	b10a      	cbz	r2, 8002fae <_free_r+0x52>
 8002faa:	42a2      	cmp	r2, r4
 8002fac:	d9fa      	bls.n	8002fa4 <_free_r+0x48>
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	1858      	adds	r0, r3, r1
 8002fb2:	42a0      	cmp	r0, r4
 8002fb4:	d10b      	bne.n	8002fce <_free_r+0x72>
 8002fb6:	6820      	ldr	r0, [r4, #0]
 8002fb8:	4401      	add	r1, r0
 8002fba:	1858      	adds	r0, r3, r1
 8002fbc:	4282      	cmp	r2, r0
 8002fbe:	6019      	str	r1, [r3, #0]
 8002fc0:	d1de      	bne.n	8002f80 <_free_r+0x24>
 8002fc2:	6810      	ldr	r0, [r2, #0]
 8002fc4:	6852      	ldr	r2, [r2, #4]
 8002fc6:	4401      	add	r1, r0
 8002fc8:	6019      	str	r1, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	e7d8      	b.n	8002f80 <_free_r+0x24>
 8002fce:	d902      	bls.n	8002fd6 <_free_r+0x7a>
 8002fd0:	230c      	movs	r3, #12
 8002fd2:	602b      	str	r3, [r5, #0]
 8002fd4:	e7d4      	b.n	8002f80 <_free_r+0x24>
 8002fd6:	6820      	ldr	r0, [r4, #0]
 8002fd8:	1821      	adds	r1, r4, r0
 8002fda:	428a      	cmp	r2, r1
 8002fdc:	bf01      	itttt	eq
 8002fde:	6811      	ldreq	r1, [r2, #0]
 8002fe0:	6852      	ldreq	r2, [r2, #4]
 8002fe2:	1809      	addeq	r1, r1, r0
 8002fe4:	6021      	streq	r1, [r4, #0]
 8002fe6:	6062      	str	r2, [r4, #4]
 8002fe8:	605c      	str	r4, [r3, #4]
 8002fea:	e7c9      	b.n	8002f80 <_free_r+0x24>
 8002fec:	bd38      	pop	{r3, r4, r5, pc}
 8002fee:	bf00      	nop
 8002ff0:	200000c0 	.word	0x200000c0

08002ff4 <_malloc_usable_size_r>:
 8002ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ff8:	1f18      	subs	r0, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bfbc      	itt	lt
 8002ffe:	580b      	ldrlt	r3, [r1, r0]
 8003000:	18c0      	addlt	r0, r0, r3
 8003002:	4770      	bx	lr
 8003004:	0000      	movs	r0, r0
	...

08003008 <atan>:
 8003008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800300c:	4bb6      	ldr	r3, [pc, #728]	; (80032e8 <atan+0x2e0>)
 800300e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003012:	429e      	cmp	r6, r3
 8003014:	4604      	mov	r4, r0
 8003016:	460d      	mov	r5, r1
 8003018:	468b      	mov	fp, r1
 800301a:	dd17      	ble.n	800304c <atan+0x44>
 800301c:	4bb3      	ldr	r3, [pc, #716]	; (80032ec <atan+0x2e4>)
 800301e:	429e      	cmp	r6, r3
 8003020:	dc01      	bgt.n	8003026 <atan+0x1e>
 8003022:	d109      	bne.n	8003038 <atan+0x30>
 8003024:	b140      	cbz	r0, 8003038 <atan+0x30>
 8003026:	4622      	mov	r2, r4
 8003028:	462b      	mov	r3, r5
 800302a:	4620      	mov	r0, r4
 800302c:	4629      	mov	r1, r5
 800302e:	f7fd f8a5 	bl	800017c <__adddf3>
 8003032:	4604      	mov	r4, r0
 8003034:	460d      	mov	r5, r1
 8003036:	e005      	b.n	8003044 <atan+0x3c>
 8003038:	f1bb 0f00 	cmp.w	fp, #0
 800303c:	4cac      	ldr	r4, [pc, #688]	; (80032f0 <atan+0x2e8>)
 800303e:	f340 8121 	ble.w	8003284 <atan+0x27c>
 8003042:	4dac      	ldr	r5, [pc, #688]	; (80032f4 <atan+0x2ec>)
 8003044:	4620      	mov	r0, r4
 8003046:	4629      	mov	r1, r5
 8003048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800304c:	4baa      	ldr	r3, [pc, #680]	; (80032f8 <atan+0x2f0>)
 800304e:	429e      	cmp	r6, r3
 8003050:	dc11      	bgt.n	8003076 <atan+0x6e>
 8003052:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8003056:	429e      	cmp	r6, r3
 8003058:	dc0a      	bgt.n	8003070 <atan+0x68>
 800305a:	a38b      	add	r3, pc, #556	; (adr r3, 8003288 <atan+0x280>)
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f7fd f88c 	bl	800017c <__adddf3>
 8003064:	2200      	movs	r2, #0
 8003066:	4ba5      	ldr	r3, [pc, #660]	; (80032fc <atan+0x2f4>)
 8003068:	f7fd fcce 	bl	8000a08 <__aeabi_dcmpgt>
 800306c:	2800      	cmp	r0, #0
 800306e:	d1e9      	bne.n	8003044 <atan+0x3c>
 8003070:	f04f 3aff 	mov.w	sl, #4294967295
 8003074:	e027      	b.n	80030c6 <atan+0xbe>
 8003076:	f000 f951 	bl	800331c <fabs>
 800307a:	4ba1      	ldr	r3, [pc, #644]	; (8003300 <atan+0x2f8>)
 800307c:	4604      	mov	r4, r0
 800307e:	429e      	cmp	r6, r3
 8003080:	460d      	mov	r5, r1
 8003082:	f300 80b8 	bgt.w	80031f6 <atan+0x1ee>
 8003086:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800308a:	429e      	cmp	r6, r3
 800308c:	f300 809c 	bgt.w	80031c8 <atan+0x1c0>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	f7fd f872 	bl	800017c <__adddf3>
 8003098:	2200      	movs	r2, #0
 800309a:	4b98      	ldr	r3, [pc, #608]	; (80032fc <atan+0x2f4>)
 800309c:	f7fd f86c 	bl	8000178 <__aeabi_dsub>
 80030a0:	2200      	movs	r2, #0
 80030a2:	4606      	mov	r6, r0
 80030a4:	460f      	mov	r7, r1
 80030a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030aa:	4620      	mov	r0, r4
 80030ac:	4629      	mov	r1, r5
 80030ae:	f7fd f865 	bl	800017c <__adddf3>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4630      	mov	r0, r6
 80030b8:	4639      	mov	r1, r7
 80030ba:	f7fd fb3f 	bl	800073c <__aeabi_ddiv>
 80030be:	f04f 0a00 	mov.w	sl, #0
 80030c2:	4604      	mov	r4, r0
 80030c4:	460d      	mov	r5, r1
 80030c6:	4622      	mov	r2, r4
 80030c8:	462b      	mov	r3, r5
 80030ca:	4620      	mov	r0, r4
 80030cc:	4629      	mov	r1, r5
 80030ce:	f7fd fa0b 	bl	80004e8 <__aeabi_dmul>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4680      	mov	r8, r0
 80030d8:	4689      	mov	r9, r1
 80030da:	f7fd fa05 	bl	80004e8 <__aeabi_dmul>
 80030de:	a36c      	add	r3, pc, #432	; (adr r3, 8003290 <atan+0x288>)
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	4606      	mov	r6, r0
 80030e6:	460f      	mov	r7, r1
 80030e8:	f7fd f9fe 	bl	80004e8 <__aeabi_dmul>
 80030ec:	a36a      	add	r3, pc, #424	; (adr r3, 8003298 <atan+0x290>)
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f7fd f843 	bl	800017c <__adddf3>
 80030f6:	4632      	mov	r2, r6
 80030f8:	463b      	mov	r3, r7
 80030fa:	f7fd f9f5 	bl	80004e8 <__aeabi_dmul>
 80030fe:	a368      	add	r3, pc, #416	; (adr r3, 80032a0 <atan+0x298>)
 8003100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003104:	f7fd f83a 	bl	800017c <__adddf3>
 8003108:	4632      	mov	r2, r6
 800310a:	463b      	mov	r3, r7
 800310c:	f7fd f9ec 	bl	80004e8 <__aeabi_dmul>
 8003110:	a365      	add	r3, pc, #404	; (adr r3, 80032a8 <atan+0x2a0>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f7fd f831 	bl	800017c <__adddf3>
 800311a:	4632      	mov	r2, r6
 800311c:	463b      	mov	r3, r7
 800311e:	f7fd f9e3 	bl	80004e8 <__aeabi_dmul>
 8003122:	a363      	add	r3, pc, #396	; (adr r3, 80032b0 <atan+0x2a8>)
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f7fd f828 	bl	800017c <__adddf3>
 800312c:	4632      	mov	r2, r6
 800312e:	463b      	mov	r3, r7
 8003130:	f7fd f9da 	bl	80004e8 <__aeabi_dmul>
 8003134:	a360      	add	r3, pc, #384	; (adr r3, 80032b8 <atan+0x2b0>)
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f7fd f81f 	bl	800017c <__adddf3>
 800313e:	4642      	mov	r2, r8
 8003140:	464b      	mov	r3, r9
 8003142:	f7fd f9d1 	bl	80004e8 <__aeabi_dmul>
 8003146:	a35e      	add	r3, pc, #376	; (adr r3, 80032c0 <atan+0x2b8>)
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	4680      	mov	r8, r0
 800314e:	4689      	mov	r9, r1
 8003150:	4630      	mov	r0, r6
 8003152:	4639      	mov	r1, r7
 8003154:	f7fd f9c8 	bl	80004e8 <__aeabi_dmul>
 8003158:	a35b      	add	r3, pc, #364	; (adr r3, 80032c8 <atan+0x2c0>)
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	f7fd f80b 	bl	8000178 <__aeabi_dsub>
 8003162:	4632      	mov	r2, r6
 8003164:	463b      	mov	r3, r7
 8003166:	f7fd f9bf 	bl	80004e8 <__aeabi_dmul>
 800316a:	a359      	add	r3, pc, #356	; (adr r3, 80032d0 <atan+0x2c8>)
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f7fd f802 	bl	8000178 <__aeabi_dsub>
 8003174:	4632      	mov	r2, r6
 8003176:	463b      	mov	r3, r7
 8003178:	f7fd f9b6 	bl	80004e8 <__aeabi_dmul>
 800317c:	a356      	add	r3, pc, #344	; (adr r3, 80032d8 <atan+0x2d0>)
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	f7fc fff9 	bl	8000178 <__aeabi_dsub>
 8003186:	4632      	mov	r2, r6
 8003188:	463b      	mov	r3, r7
 800318a:	f7fd f9ad 	bl	80004e8 <__aeabi_dmul>
 800318e:	a354      	add	r3, pc, #336	; (adr r3, 80032e0 <atan+0x2d8>)
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	f7fc fff0 	bl	8000178 <__aeabi_dsub>
 8003198:	4632      	mov	r2, r6
 800319a:	463b      	mov	r3, r7
 800319c:	f7fd f9a4 	bl	80004e8 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4640      	mov	r0, r8
 80031a6:	4649      	mov	r1, r9
 80031a8:	f7fc ffe8 	bl	800017c <__adddf3>
 80031ac:	4622      	mov	r2, r4
 80031ae:	462b      	mov	r3, r5
 80031b0:	f7fd f99a 	bl	80004e8 <__aeabi_dmul>
 80031b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	d144      	bne.n	8003248 <atan+0x240>
 80031be:	4620      	mov	r0, r4
 80031c0:	4629      	mov	r1, r5
 80031c2:	f7fc ffd9 	bl	8000178 <__aeabi_dsub>
 80031c6:	e734      	b.n	8003032 <atan+0x2a>
 80031c8:	2200      	movs	r2, #0
 80031ca:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <atan+0x2f4>)
 80031cc:	f7fc ffd4 	bl	8000178 <__aeabi_dsub>
 80031d0:	2200      	movs	r2, #0
 80031d2:	4606      	mov	r6, r0
 80031d4:	460f      	mov	r7, r1
 80031d6:	4b49      	ldr	r3, [pc, #292]	; (80032fc <atan+0x2f4>)
 80031d8:	4620      	mov	r0, r4
 80031da:	4629      	mov	r1, r5
 80031dc:	f7fc ffce 	bl	800017c <__adddf3>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4630      	mov	r0, r6
 80031e6:	4639      	mov	r1, r7
 80031e8:	f7fd faa8 	bl	800073c <__aeabi_ddiv>
 80031ec:	f04f 0a01 	mov.w	sl, #1
 80031f0:	4604      	mov	r4, r0
 80031f2:	460d      	mov	r5, r1
 80031f4:	e767      	b.n	80030c6 <atan+0xbe>
 80031f6:	4b43      	ldr	r3, [pc, #268]	; (8003304 <atan+0x2fc>)
 80031f8:	429e      	cmp	r6, r3
 80031fa:	dc1a      	bgt.n	8003232 <atan+0x22a>
 80031fc:	2200      	movs	r2, #0
 80031fe:	4b42      	ldr	r3, [pc, #264]	; (8003308 <atan+0x300>)
 8003200:	f7fc ffba 	bl	8000178 <__aeabi_dsub>
 8003204:	2200      	movs	r2, #0
 8003206:	4606      	mov	r6, r0
 8003208:	460f      	mov	r7, r1
 800320a:	4b3f      	ldr	r3, [pc, #252]	; (8003308 <atan+0x300>)
 800320c:	4620      	mov	r0, r4
 800320e:	4629      	mov	r1, r5
 8003210:	f7fd f96a 	bl	80004e8 <__aeabi_dmul>
 8003214:	2200      	movs	r2, #0
 8003216:	4b39      	ldr	r3, [pc, #228]	; (80032fc <atan+0x2f4>)
 8003218:	f7fc ffb0 	bl	800017c <__adddf3>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4630      	mov	r0, r6
 8003222:	4639      	mov	r1, r7
 8003224:	f7fd fa8a 	bl	800073c <__aeabi_ddiv>
 8003228:	f04f 0a02 	mov.w	sl, #2
 800322c:	4604      	mov	r4, r0
 800322e:	460d      	mov	r5, r1
 8003230:	e749      	b.n	80030c6 <atan+0xbe>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	2000      	movs	r0, #0
 8003238:	4934      	ldr	r1, [pc, #208]	; (800330c <atan+0x304>)
 800323a:	f7fd fa7f 	bl	800073c <__aeabi_ddiv>
 800323e:	f04f 0a03 	mov.w	sl, #3
 8003242:	4604      	mov	r4, r0
 8003244:	460d      	mov	r5, r1
 8003246:	e73e      	b.n	80030c6 <atan+0xbe>
 8003248:	4b31      	ldr	r3, [pc, #196]	; (8003310 <atan+0x308>)
 800324a:	4e32      	ldr	r6, [pc, #200]	; (8003314 <atan+0x30c>)
 800324c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8003250:	4456      	add	r6, sl
 8003252:	449a      	add	sl, r3
 8003254:	e9da 2300 	ldrd	r2, r3, [sl]
 8003258:	f7fc ff8e 	bl	8000178 <__aeabi_dsub>
 800325c:	4622      	mov	r2, r4
 800325e:	462b      	mov	r3, r5
 8003260:	f7fc ff8a 	bl	8000178 <__aeabi_dsub>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	e9d6 0100 	ldrd	r0, r1, [r6]
 800326c:	f7fc ff84 	bl	8000178 <__aeabi_dsub>
 8003270:	f1bb 0f00 	cmp.w	fp, #0
 8003274:	4604      	mov	r4, r0
 8003276:	460d      	mov	r5, r1
 8003278:	f6bf aee4 	bge.w	8003044 <atan+0x3c>
 800327c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003280:	461d      	mov	r5, r3
 8003282:	e6df      	b.n	8003044 <atan+0x3c>
 8003284:	4d24      	ldr	r5, [pc, #144]	; (8003318 <atan+0x310>)
 8003286:	e6dd      	b.n	8003044 <atan+0x3c>
 8003288:	8800759c 	.word	0x8800759c
 800328c:	7e37e43c 	.word	0x7e37e43c
 8003290:	e322da11 	.word	0xe322da11
 8003294:	3f90ad3a 	.word	0x3f90ad3a
 8003298:	24760deb 	.word	0x24760deb
 800329c:	3fa97b4b 	.word	0x3fa97b4b
 80032a0:	a0d03d51 	.word	0xa0d03d51
 80032a4:	3fb10d66 	.word	0x3fb10d66
 80032a8:	c54c206e 	.word	0xc54c206e
 80032ac:	3fb745cd 	.word	0x3fb745cd
 80032b0:	920083ff 	.word	0x920083ff
 80032b4:	3fc24924 	.word	0x3fc24924
 80032b8:	5555550d 	.word	0x5555550d
 80032bc:	3fd55555 	.word	0x3fd55555
 80032c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80032c4:	bfa2b444 	.word	0xbfa2b444
 80032c8:	52defd9a 	.word	0x52defd9a
 80032cc:	3fadde2d 	.word	0x3fadde2d
 80032d0:	af749a6d 	.word	0xaf749a6d
 80032d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80032d8:	fe231671 	.word	0xfe231671
 80032dc:	3fbc71c6 	.word	0x3fbc71c6
 80032e0:	9998ebc4 	.word	0x9998ebc4
 80032e4:	3fc99999 	.word	0x3fc99999
 80032e8:	440fffff 	.word	0x440fffff
 80032ec:	7ff00000 	.word	0x7ff00000
 80032f0:	54442d18 	.word	0x54442d18
 80032f4:	3ff921fb 	.word	0x3ff921fb
 80032f8:	3fdbffff 	.word	0x3fdbffff
 80032fc:	3ff00000 	.word	0x3ff00000
 8003300:	3ff2ffff 	.word	0x3ff2ffff
 8003304:	40037fff 	.word	0x40037fff
 8003308:	3ff80000 	.word	0x3ff80000
 800330c:	bff00000 	.word	0xbff00000
 8003310:	08004490 	.word	0x08004490
 8003314:	08004470 	.word	0x08004470
 8003318:	bff921fb 	.word	0xbff921fb

0800331c <fabs>:
 800331c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003320:	4619      	mov	r1, r3
 8003322:	4770      	bx	lr

08003324 <pow>:
 8003324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003328:	b08f      	sub	sp, #60	; 0x3c
 800332a:	461d      	mov	r5, r3
 800332c:	4680      	mov	r8, r0
 800332e:	4689      	mov	r9, r1
 8003330:	4614      	mov	r4, r2
 8003332:	f000 f9a9 	bl	8003688 <__ieee754_pow>
 8003336:	4fa1      	ldr	r7, [pc, #644]	; (80035bc <pow+0x298>)
 8003338:	e9cd 0100 	strd	r0, r1, [sp]
 800333c:	f997 3000 	ldrsb.w	r3, [r7]
 8003340:	463e      	mov	r6, r7
 8003342:	9302      	str	r3, [sp, #8]
 8003344:	3301      	adds	r3, #1
 8003346:	d05f      	beq.n	8003408 <pow+0xe4>
 8003348:	4622      	mov	r2, r4
 800334a:	462b      	mov	r3, r5
 800334c:	4620      	mov	r0, r4
 800334e:	4629      	mov	r1, r5
 8003350:	f7fd fb64 	bl	8000a1c <__aeabi_dcmpun>
 8003354:	4682      	mov	sl, r0
 8003356:	2800      	cmp	r0, #0
 8003358:	d156      	bne.n	8003408 <pow+0xe4>
 800335a:	4642      	mov	r2, r8
 800335c:	464b      	mov	r3, r9
 800335e:	4640      	mov	r0, r8
 8003360:	4649      	mov	r1, r9
 8003362:	f7fd fb5b 	bl	8000a1c <__aeabi_dcmpun>
 8003366:	9003      	str	r0, [sp, #12]
 8003368:	b1e8      	cbz	r0, 80033a6 <pow+0x82>
 800336a:	2200      	movs	r2, #0
 800336c:	2300      	movs	r3, #0
 800336e:	4620      	mov	r0, r4
 8003370:	4629      	mov	r1, r5
 8003372:	f7fd fb21 	bl	80009b8 <__aeabi_dcmpeq>
 8003376:	2800      	cmp	r0, #0
 8003378:	d046      	beq.n	8003408 <pow+0xe4>
 800337a:	2301      	movs	r3, #1
 800337c:	2200      	movs	r2, #0
 800337e:	9304      	str	r3, [sp, #16]
 8003380:	4b8f      	ldr	r3, [pc, #572]	; (80035c0 <pow+0x29c>)
 8003382:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003386:	9305      	str	r3, [sp, #20]
 8003388:	4b8e      	ldr	r3, [pc, #568]	; (80035c4 <pow+0x2a0>)
 800338a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800338e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003392:	9b02      	ldr	r3, [sp, #8]
 8003394:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d031      	beq.n	8003400 <pow+0xdc>
 800339c:	a804      	add	r0, sp, #16
 800339e:	f000 ff2f 	bl	8004200 <matherr>
 80033a2:	bb38      	cbnz	r0, 80033f4 <pow+0xd0>
 80033a4:	e058      	b.n	8003458 <pow+0x134>
 80033a6:	f04f 0a00 	mov.w	sl, #0
 80033aa:	f04f 0b00 	mov.w	fp, #0
 80033ae:	4652      	mov	r2, sl
 80033b0:	465b      	mov	r3, fp
 80033b2:	4640      	mov	r0, r8
 80033b4:	4649      	mov	r1, r9
 80033b6:	f7fd faff 	bl	80009b8 <__aeabi_dcmpeq>
 80033ba:	2800      	cmp	r0, #0
 80033bc:	d051      	beq.n	8003462 <pow+0x13e>
 80033be:	4652      	mov	r2, sl
 80033c0:	465b      	mov	r3, fp
 80033c2:	4620      	mov	r0, r4
 80033c4:	4629      	mov	r1, r5
 80033c6:	f7fd faf7 	bl	80009b8 <__aeabi_dcmpeq>
 80033ca:	4606      	mov	r6, r0
 80033cc:	b308      	cbz	r0, 8003412 <pow+0xee>
 80033ce:	2301      	movs	r3, #1
 80033d0:	9304      	str	r3, [sp, #16]
 80033d2:	4b7b      	ldr	r3, [pc, #492]	; (80035c0 <pow+0x29c>)
 80033d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80033d8:	9305      	str	r3, [sp, #20]
 80033da:	9b03      	ldr	r3, [sp, #12]
 80033dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80033e0:	930c      	str	r3, [sp, #48]	; 0x30
 80033e2:	9b02      	ldr	r3, [sp, #8]
 80033e4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0d7      	beq.n	800339c <pow+0x78>
 80033ec:	2200      	movs	r2, #0
 80033ee:	4b75      	ldr	r3, [pc, #468]	; (80035c4 <pow+0x2a0>)
 80033f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80033f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033f6:	b11b      	cbz	r3, 8003400 <pow+0xdc>
 80033f8:	f7ff f9c8 	bl	800278c <__errno>
 80033fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033fe:	6003      	str	r3, [r0, #0]
 8003400:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8003404:	e9cd 3400 	strd	r3, r4, [sp]
 8003408:	e9dd 0100 	ldrd	r0, r1, [sp]
 800340c:	b00f      	add	sp, #60	; 0x3c
 800340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003412:	4620      	mov	r0, r4
 8003414:	4629      	mov	r1, r5
 8003416:	f000 feed 	bl	80041f4 <finite>
 800341a:	2800      	cmp	r0, #0
 800341c:	d0f4      	beq.n	8003408 <pow+0xe4>
 800341e:	4652      	mov	r2, sl
 8003420:	465b      	mov	r3, fp
 8003422:	4620      	mov	r0, r4
 8003424:	4629      	mov	r1, r5
 8003426:	f7fd fad1 	bl	80009cc <__aeabi_dcmplt>
 800342a:	2800      	cmp	r0, #0
 800342c:	d0ec      	beq.n	8003408 <pow+0xe4>
 800342e:	2301      	movs	r3, #1
 8003430:	9304      	str	r3, [sp, #16]
 8003432:	4b63      	ldr	r3, [pc, #396]	; (80035c0 <pow+0x29c>)
 8003434:	960c      	str	r6, [sp, #48]	; 0x30
 8003436:	9305      	str	r3, [sp, #20]
 8003438:	f997 3000 	ldrsb.w	r3, [r7]
 800343c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003440:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003444:	b913      	cbnz	r3, 800344c <pow+0x128>
 8003446:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800344a:	e7a7      	b.n	800339c <pow+0x78>
 800344c:	2000      	movs	r0, #0
 800344e:	495e      	ldr	r1, [pc, #376]	; (80035c8 <pow+0x2a4>)
 8003450:	2b02      	cmp	r3, #2
 8003452:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003456:	d1a1      	bne.n	800339c <pow+0x78>
 8003458:	f7ff f998 	bl	800278c <__errno>
 800345c:	2321      	movs	r3, #33	; 0x21
 800345e:	6003      	str	r3, [r0, #0]
 8003460:	e7c8      	b.n	80033f4 <pow+0xd0>
 8003462:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003466:	f000 fec5 	bl	80041f4 <finite>
 800346a:	9002      	str	r0, [sp, #8]
 800346c:	2800      	cmp	r0, #0
 800346e:	d177      	bne.n	8003560 <pow+0x23c>
 8003470:	4640      	mov	r0, r8
 8003472:	4649      	mov	r1, r9
 8003474:	f000 febe 	bl	80041f4 <finite>
 8003478:	2800      	cmp	r0, #0
 800347a:	d071      	beq.n	8003560 <pow+0x23c>
 800347c:	4620      	mov	r0, r4
 800347e:	4629      	mov	r1, r5
 8003480:	f000 feb8 	bl	80041f4 <finite>
 8003484:	2800      	cmp	r0, #0
 8003486:	d06b      	beq.n	8003560 <pow+0x23c>
 8003488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f7fd fac4 	bl	8000a1c <__aeabi_dcmpun>
 8003494:	f997 7000 	ldrsb.w	r7, [r7]
 8003498:	4b49      	ldr	r3, [pc, #292]	; (80035c0 <pow+0x29c>)
 800349a:	b1a0      	cbz	r0, 80034c6 <pow+0x1a2>
 800349c:	2201      	movs	r2, #1
 800349e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80034a2:	9b02      	ldr	r3, [sp, #8]
 80034a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80034a8:	930c      	str	r3, [sp, #48]	; 0x30
 80034aa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80034ae:	2f00      	cmp	r7, #0
 80034b0:	d0c9      	beq.n	8003446 <pow+0x122>
 80034b2:	4652      	mov	r2, sl
 80034b4:	465b      	mov	r3, fp
 80034b6:	4650      	mov	r0, sl
 80034b8:	4659      	mov	r1, fp
 80034ba:	f7fd f93f 	bl	800073c <__aeabi_ddiv>
 80034be:	2f02      	cmp	r7, #2
 80034c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80034c4:	e7c7      	b.n	8003456 <pow+0x132>
 80034c6:	2203      	movs	r2, #3
 80034c8:	900c      	str	r0, [sp, #48]	; 0x30
 80034ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80034ce:	4620      	mov	r0, r4
 80034d0:	4629      	mov	r1, r5
 80034d2:	2200      	movs	r2, #0
 80034d4:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <pow+0x2a8>)
 80034d6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80034da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80034de:	f7fd f803 	bl	80004e8 <__aeabi_dmul>
 80034e2:	4604      	mov	r4, r0
 80034e4:	460d      	mov	r5, r1
 80034e6:	bb17      	cbnz	r7, 800352e <pow+0x20a>
 80034e8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80034ec:	4b38      	ldr	r3, [pc, #224]	; (80035d0 <pow+0x2ac>)
 80034ee:	4640      	mov	r0, r8
 80034f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80034f4:	4649      	mov	r1, r9
 80034f6:	4652      	mov	r2, sl
 80034f8:	465b      	mov	r3, fp
 80034fa:	f7fd fa67 	bl	80009cc <__aeabi_dcmplt>
 80034fe:	2800      	cmp	r0, #0
 8003500:	d054      	beq.n	80035ac <pow+0x288>
 8003502:	4620      	mov	r0, r4
 8003504:	4629      	mov	r1, r5
 8003506:	f000 fe83 	bl	8004210 <rint>
 800350a:	4622      	mov	r2, r4
 800350c:	462b      	mov	r3, r5
 800350e:	f7fd fa53 	bl	80009b8 <__aeabi_dcmpeq>
 8003512:	b920      	cbnz	r0, 800351e <pow+0x1fa>
 8003514:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003518:	4b2e      	ldr	r3, [pc, #184]	; (80035d4 <pow+0x2b0>)
 800351a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800351e:	f996 3000 	ldrsb.w	r3, [r6]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d142      	bne.n	80035ac <pow+0x288>
 8003526:	f7ff f931 	bl	800278c <__errno>
 800352a:	2322      	movs	r3, #34	; 0x22
 800352c:	e797      	b.n	800345e <pow+0x13a>
 800352e:	2200      	movs	r2, #0
 8003530:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <pow+0x2b4>)
 8003532:	4640      	mov	r0, r8
 8003534:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003538:	4649      	mov	r1, r9
 800353a:	4652      	mov	r2, sl
 800353c:	465b      	mov	r3, fp
 800353e:	f7fd fa45 	bl	80009cc <__aeabi_dcmplt>
 8003542:	2800      	cmp	r0, #0
 8003544:	d0eb      	beq.n	800351e <pow+0x1fa>
 8003546:	4620      	mov	r0, r4
 8003548:	4629      	mov	r1, r5
 800354a:	f000 fe61 	bl	8004210 <rint>
 800354e:	4622      	mov	r2, r4
 8003550:	462b      	mov	r3, r5
 8003552:	f7fd fa31 	bl	80009b8 <__aeabi_dcmpeq>
 8003556:	2800      	cmp	r0, #0
 8003558:	d1e1      	bne.n	800351e <pow+0x1fa>
 800355a:	2200      	movs	r2, #0
 800355c:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <pow+0x2a4>)
 800355e:	e7dc      	b.n	800351a <pow+0x1f6>
 8003560:	2200      	movs	r2, #0
 8003562:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003566:	2300      	movs	r3, #0
 8003568:	f7fd fa26 	bl	80009b8 <__aeabi_dcmpeq>
 800356c:	2800      	cmp	r0, #0
 800356e:	f43f af4b 	beq.w	8003408 <pow+0xe4>
 8003572:	4640      	mov	r0, r8
 8003574:	4649      	mov	r1, r9
 8003576:	f000 fe3d 	bl	80041f4 <finite>
 800357a:	2800      	cmp	r0, #0
 800357c:	f43f af44 	beq.w	8003408 <pow+0xe4>
 8003580:	4620      	mov	r0, r4
 8003582:	4629      	mov	r1, r5
 8003584:	f000 fe36 	bl	80041f4 <finite>
 8003588:	2800      	cmp	r0, #0
 800358a:	f43f af3d 	beq.w	8003408 <pow+0xe4>
 800358e:	2304      	movs	r3, #4
 8003590:	9304      	str	r3, [sp, #16]
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <pow+0x29c>)
 8003594:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003598:	9305      	str	r3, [sp, #20]
 800359a:	2300      	movs	r3, #0
 800359c:	2400      	movs	r4, #0
 800359e:	930c      	str	r3, [sp, #48]	; 0x30
 80035a0:	2300      	movs	r3, #0
 80035a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80035a6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80035aa:	e7b8      	b.n	800351e <pow+0x1fa>
 80035ac:	a804      	add	r0, sp, #16
 80035ae:	f000 fe27 	bl	8004200 <matherr>
 80035b2:	2800      	cmp	r0, #0
 80035b4:	f47f af1e 	bne.w	80033f4 <pow+0xd0>
 80035b8:	e7b5      	b.n	8003526 <pow+0x202>
 80035ba:	bf00      	nop
 80035bc:	20000084 	.word	0x20000084
 80035c0:	080044b0 	.word	0x080044b0
 80035c4:	3ff00000 	.word	0x3ff00000
 80035c8:	fff00000 	.word	0xfff00000
 80035cc:	3fe00000 	.word	0x3fe00000
 80035d0:	47efffff 	.word	0x47efffff
 80035d4:	c7efffff 	.word	0xc7efffff
 80035d8:	7ff00000 	.word	0x7ff00000

080035dc <sqrt>:
 80035dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e0:	b08b      	sub	sp, #44	; 0x2c
 80035e2:	4604      	mov	r4, r0
 80035e4:	460d      	mov	r5, r1
 80035e6:	f000 fd59 	bl	800409c <__ieee754_sqrt>
 80035ea:	4b24      	ldr	r3, [pc, #144]	; (800367c <sqrt+0xa0>)
 80035ec:	4680      	mov	r8, r0
 80035ee:	f993 a000 	ldrsb.w	sl, [r3]
 80035f2:	4689      	mov	r9, r1
 80035f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80035f8:	d02b      	beq.n	8003652 <sqrt+0x76>
 80035fa:	4622      	mov	r2, r4
 80035fc:	462b      	mov	r3, r5
 80035fe:	4620      	mov	r0, r4
 8003600:	4629      	mov	r1, r5
 8003602:	f7fd fa0b 	bl	8000a1c <__aeabi_dcmpun>
 8003606:	4683      	mov	fp, r0
 8003608:	bb18      	cbnz	r0, 8003652 <sqrt+0x76>
 800360a:	2600      	movs	r6, #0
 800360c:	2700      	movs	r7, #0
 800360e:	4632      	mov	r2, r6
 8003610:	463b      	mov	r3, r7
 8003612:	4620      	mov	r0, r4
 8003614:	4629      	mov	r1, r5
 8003616:	f7fd f9d9 	bl	80009cc <__aeabi_dcmplt>
 800361a:	b1d0      	cbz	r0, 8003652 <sqrt+0x76>
 800361c:	2301      	movs	r3, #1
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	4b17      	ldr	r3, [pc, #92]	; (8003680 <sqrt+0xa4>)
 8003622:	f8cd b020 	str.w	fp, [sp, #32]
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800362c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003630:	f1ba 0f00 	cmp.w	sl, #0
 8003634:	d112      	bne.n	800365c <sqrt+0x80>
 8003636:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800363a:	4668      	mov	r0, sp
 800363c:	f000 fde0 	bl	8004200 <matherr>
 8003640:	b1b8      	cbz	r0, 8003672 <sqrt+0x96>
 8003642:	9b08      	ldr	r3, [sp, #32]
 8003644:	b11b      	cbz	r3, 800364e <sqrt+0x72>
 8003646:	f7ff f8a1 	bl	800278c <__errno>
 800364a:	9b08      	ldr	r3, [sp, #32]
 800364c:	6003      	str	r3, [r0, #0]
 800364e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003652:	4640      	mov	r0, r8
 8003654:	4649      	mov	r1, r9
 8003656:	b00b      	add	sp, #44	; 0x2c
 8003658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800365c:	4632      	mov	r2, r6
 800365e:	463b      	mov	r3, r7
 8003660:	4630      	mov	r0, r6
 8003662:	4639      	mov	r1, r7
 8003664:	f7fd f86a 	bl	800073c <__aeabi_ddiv>
 8003668:	f1ba 0f02 	cmp.w	sl, #2
 800366c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003670:	d1e3      	bne.n	800363a <sqrt+0x5e>
 8003672:	f7ff f88b 	bl	800278c <__errno>
 8003676:	2321      	movs	r3, #33	; 0x21
 8003678:	6003      	str	r3, [r0, #0]
 800367a:	e7e2      	b.n	8003642 <sqrt+0x66>
 800367c:	20000084 	.word	0x20000084
 8003680:	080044b4 	.word	0x080044b4
 8003684:	00000000 	.word	0x00000000

08003688 <__ieee754_pow>:
 8003688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368c:	b091      	sub	sp, #68	; 0x44
 800368e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003692:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8003696:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800369a:	ea55 0302 	orrs.w	r3, r5, r2
 800369e:	4607      	mov	r7, r0
 80036a0:	4688      	mov	r8, r1
 80036a2:	f000 84b7 	beq.w	8004014 <__ieee754_pow+0x98c>
 80036a6:	4b80      	ldr	r3, [pc, #512]	; (80038a8 <__ieee754_pow+0x220>)
 80036a8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80036ac:	429c      	cmp	r4, r3
 80036ae:	4689      	mov	r9, r1
 80036b0:	4682      	mov	sl, r0
 80036b2:	dc09      	bgt.n	80036c8 <__ieee754_pow+0x40>
 80036b4:	d103      	bne.n	80036be <__ieee754_pow+0x36>
 80036b6:	b938      	cbnz	r0, 80036c8 <__ieee754_pow+0x40>
 80036b8:	42a5      	cmp	r5, r4
 80036ba:	dc0d      	bgt.n	80036d8 <__ieee754_pow+0x50>
 80036bc:	e001      	b.n	80036c2 <__ieee754_pow+0x3a>
 80036be:	429d      	cmp	r5, r3
 80036c0:	dc02      	bgt.n	80036c8 <__ieee754_pow+0x40>
 80036c2:	429d      	cmp	r5, r3
 80036c4:	d10e      	bne.n	80036e4 <__ieee754_pow+0x5c>
 80036c6:	b16a      	cbz	r2, 80036e4 <__ieee754_pow+0x5c>
 80036c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80036cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80036d0:	ea54 030a 	orrs.w	r3, r4, sl
 80036d4:	f000 849e 	beq.w	8004014 <__ieee754_pow+0x98c>
 80036d8:	4874      	ldr	r0, [pc, #464]	; (80038ac <__ieee754_pow+0x224>)
 80036da:	b011      	add	sp, #68	; 0x44
 80036dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e0:	f000 bd90 	b.w	8004204 <nan>
 80036e4:	f1b9 0f00 	cmp.w	r9, #0
 80036e8:	da53      	bge.n	8003792 <__ieee754_pow+0x10a>
 80036ea:	4b71      	ldr	r3, [pc, #452]	; (80038b0 <__ieee754_pow+0x228>)
 80036ec:	429d      	cmp	r5, r3
 80036ee:	dc4e      	bgt.n	800378e <__ieee754_pow+0x106>
 80036f0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80036f4:	429d      	cmp	r5, r3
 80036f6:	dd4c      	ble.n	8003792 <__ieee754_pow+0x10a>
 80036f8:	152b      	asrs	r3, r5, #20
 80036fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80036fe:	2b14      	cmp	r3, #20
 8003700:	dd28      	ble.n	8003754 <__ieee754_pow+0xcc>
 8003702:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003706:	fa22 f103 	lsr.w	r1, r2, r3
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	4293      	cmp	r3, r2
 8003710:	d13f      	bne.n	8003792 <__ieee754_pow+0x10a>
 8003712:	f001 0101 	and.w	r1, r1, #1
 8003716:	f1c1 0302 	rsb	r3, r1, #2
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2a00      	cmp	r2, #0
 800371e:	d15c      	bne.n	80037da <__ieee754_pow+0x152>
 8003720:	4b61      	ldr	r3, [pc, #388]	; (80038a8 <__ieee754_pow+0x220>)
 8003722:	429d      	cmp	r5, r3
 8003724:	d126      	bne.n	8003774 <__ieee754_pow+0xec>
 8003726:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800372a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800372e:	ea53 030a 	orrs.w	r3, r3, sl
 8003732:	f000 846f 	beq.w	8004014 <__ieee754_pow+0x98c>
 8003736:	4b5f      	ldr	r3, [pc, #380]	; (80038b4 <__ieee754_pow+0x22c>)
 8003738:	429c      	cmp	r4, r3
 800373a:	dd2c      	ble.n	8003796 <__ieee754_pow+0x10e>
 800373c:	2e00      	cmp	r6, #0
 800373e:	f280 846f 	bge.w	8004020 <__ieee754_pow+0x998>
 8003742:	f04f 0b00 	mov.w	fp, #0
 8003746:	f04f 0c00 	mov.w	ip, #0
 800374a:	4658      	mov	r0, fp
 800374c:	4661      	mov	r1, ip
 800374e:	b011      	add	sp, #68	; 0x44
 8003750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003754:	2a00      	cmp	r2, #0
 8003756:	d13e      	bne.n	80037d6 <__ieee754_pow+0x14e>
 8003758:	f1c3 0314 	rsb	r3, r3, #20
 800375c:	fa45 f103 	asr.w	r1, r5, r3
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	42ab      	cmp	r3, r5
 8003766:	f040 8463 	bne.w	8004030 <__ieee754_pow+0x9a8>
 800376a:	f001 0101 	and.w	r1, r1, #1
 800376e:	f1c1 0302 	rsb	r3, r1, #2
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <__ieee754_pow+0x230>)
 8003776:	429d      	cmp	r5, r3
 8003778:	d114      	bne.n	80037a4 <__ieee754_pow+0x11c>
 800377a:	2e00      	cmp	r6, #0
 800377c:	f280 8454 	bge.w	8004028 <__ieee754_pow+0x9a0>
 8003780:	463a      	mov	r2, r7
 8003782:	4643      	mov	r3, r8
 8003784:	2000      	movs	r0, #0
 8003786:	494c      	ldr	r1, [pc, #304]	; (80038b8 <__ieee754_pow+0x230>)
 8003788:	f7fc ffd8 	bl	800073c <__aeabi_ddiv>
 800378c:	e013      	b.n	80037b6 <__ieee754_pow+0x12e>
 800378e:	2302      	movs	r3, #2
 8003790:	e7c3      	b.n	800371a <__ieee754_pow+0x92>
 8003792:	2300      	movs	r3, #0
 8003794:	e7c1      	b.n	800371a <__ieee754_pow+0x92>
 8003796:	2e00      	cmp	r6, #0
 8003798:	dad3      	bge.n	8003742 <__ieee754_pow+0xba>
 800379a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800379e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80037a2:	e7d2      	b.n	800374a <__ieee754_pow+0xc2>
 80037a4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80037a8:	d108      	bne.n	80037bc <__ieee754_pow+0x134>
 80037aa:	463a      	mov	r2, r7
 80037ac:	4643      	mov	r3, r8
 80037ae:	4638      	mov	r0, r7
 80037b0:	4641      	mov	r1, r8
 80037b2:	f7fc fe99 	bl	80004e8 <__aeabi_dmul>
 80037b6:	4683      	mov	fp, r0
 80037b8:	468c      	mov	ip, r1
 80037ba:	e7c6      	b.n	800374a <__ieee754_pow+0xc2>
 80037bc:	4b3f      	ldr	r3, [pc, #252]	; (80038bc <__ieee754_pow+0x234>)
 80037be:	429e      	cmp	r6, r3
 80037c0:	d10b      	bne.n	80037da <__ieee754_pow+0x152>
 80037c2:	f1b9 0f00 	cmp.w	r9, #0
 80037c6:	db08      	blt.n	80037da <__ieee754_pow+0x152>
 80037c8:	4638      	mov	r0, r7
 80037ca:	4641      	mov	r1, r8
 80037cc:	b011      	add	sp, #68	; 0x44
 80037ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d2:	f000 bc63 	b.w	800409c <__ieee754_sqrt>
 80037d6:	2300      	movs	r3, #0
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	4638      	mov	r0, r7
 80037dc:	4641      	mov	r1, r8
 80037de:	f7ff fd9d 	bl	800331c <fabs>
 80037e2:	4683      	mov	fp, r0
 80037e4:	468c      	mov	ip, r1
 80037e6:	f1ba 0f00 	cmp.w	sl, #0
 80037ea:	d12b      	bne.n	8003844 <__ieee754_pow+0x1bc>
 80037ec:	b124      	cbz	r4, 80037f8 <__ieee754_pow+0x170>
 80037ee:	4b32      	ldr	r3, [pc, #200]	; (80038b8 <__ieee754_pow+0x230>)
 80037f0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d125      	bne.n	8003844 <__ieee754_pow+0x1bc>
 80037f8:	2e00      	cmp	r6, #0
 80037fa:	da07      	bge.n	800380c <__ieee754_pow+0x184>
 80037fc:	465a      	mov	r2, fp
 80037fe:	4663      	mov	r3, ip
 8003800:	2000      	movs	r0, #0
 8003802:	492d      	ldr	r1, [pc, #180]	; (80038b8 <__ieee754_pow+0x230>)
 8003804:	f7fc ff9a 	bl	800073c <__aeabi_ddiv>
 8003808:	4683      	mov	fp, r0
 800380a:	468c      	mov	ip, r1
 800380c:	f1b9 0f00 	cmp.w	r9, #0
 8003810:	da9b      	bge.n	800374a <__ieee754_pow+0xc2>
 8003812:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003816:	9b00      	ldr	r3, [sp, #0]
 8003818:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800381c:	4323      	orrs	r3, r4
 800381e:	d108      	bne.n	8003832 <__ieee754_pow+0x1aa>
 8003820:	465a      	mov	r2, fp
 8003822:	4663      	mov	r3, ip
 8003824:	4658      	mov	r0, fp
 8003826:	4661      	mov	r1, ip
 8003828:	f7fc fca6 	bl	8000178 <__aeabi_dsub>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	e7aa      	b.n	8003788 <__ieee754_pow+0x100>
 8003832:	9b00      	ldr	r3, [sp, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d188      	bne.n	800374a <__ieee754_pow+0xc2>
 8003838:	4658      	mov	r0, fp
 800383a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800383e:	4683      	mov	fp, r0
 8003840:	469c      	mov	ip, r3
 8003842:	e782      	b.n	800374a <__ieee754_pow+0xc2>
 8003844:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8003848:	f109 33ff 	add.w	r3, r9, #4294967295
 800384c:	930d      	str	r3, [sp, #52]	; 0x34
 800384e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003850:	9b00      	ldr	r3, [sp, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	d104      	bne.n	8003860 <__ieee754_pow+0x1d8>
 8003856:	463a      	mov	r2, r7
 8003858:	4643      	mov	r3, r8
 800385a:	4638      	mov	r0, r7
 800385c:	4641      	mov	r1, r8
 800385e:	e7e3      	b.n	8003828 <__ieee754_pow+0x1a0>
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <__ieee754_pow+0x238>)
 8003862:	429d      	cmp	r5, r3
 8003864:	f340 80fe 	ble.w	8003a64 <__ieee754_pow+0x3dc>
 8003868:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800386c:	429d      	cmp	r5, r3
 800386e:	dd0b      	ble.n	8003888 <__ieee754_pow+0x200>
 8003870:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <__ieee754_pow+0x22c>)
 8003872:	429c      	cmp	r4, r3
 8003874:	dc0e      	bgt.n	8003894 <__ieee754_pow+0x20c>
 8003876:	2e00      	cmp	r6, #0
 8003878:	f6bf af63 	bge.w	8003742 <__ieee754_pow+0xba>
 800387c:	a308      	add	r3, pc, #32	; (adr r3, 80038a0 <__ieee754_pow+0x218>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	e794      	b.n	80037b2 <__ieee754_pow+0x12a>
 8003888:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <__ieee754_pow+0x23c>)
 800388a:	429c      	cmp	r4, r3
 800388c:	ddf3      	ble.n	8003876 <__ieee754_pow+0x1ee>
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <__ieee754_pow+0x230>)
 8003890:	429c      	cmp	r4, r3
 8003892:	dd19      	ble.n	80038c8 <__ieee754_pow+0x240>
 8003894:	2e00      	cmp	r6, #0
 8003896:	dcf1      	bgt.n	800387c <__ieee754_pow+0x1f4>
 8003898:	e753      	b.n	8003742 <__ieee754_pow+0xba>
 800389a:	bf00      	nop
 800389c:	f3af 8000 	nop.w
 80038a0:	8800759c 	.word	0x8800759c
 80038a4:	7e37e43c 	.word	0x7e37e43c
 80038a8:	7ff00000 	.word	0x7ff00000
 80038ac:	0800443c 	.word	0x0800443c
 80038b0:	433fffff 	.word	0x433fffff
 80038b4:	3fefffff 	.word	0x3fefffff
 80038b8:	3ff00000 	.word	0x3ff00000
 80038bc:	3fe00000 	.word	0x3fe00000
 80038c0:	41e00000 	.word	0x41e00000
 80038c4:	3feffffe 	.word	0x3feffffe
 80038c8:	4661      	mov	r1, ip
 80038ca:	2200      	movs	r2, #0
 80038cc:	4b60      	ldr	r3, [pc, #384]	; (8003a50 <__ieee754_pow+0x3c8>)
 80038ce:	4658      	mov	r0, fp
 80038d0:	f7fc fc52 	bl	8000178 <__aeabi_dsub>
 80038d4:	a354      	add	r3, pc, #336	; (adr r3, 8003a28 <__ieee754_pow+0x3a0>)
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	4604      	mov	r4, r0
 80038dc:	460d      	mov	r5, r1
 80038de:	f7fc fe03 	bl	80004e8 <__aeabi_dmul>
 80038e2:	a353      	add	r3, pc, #332	; (adr r3, 8003a30 <__ieee754_pow+0x3a8>)
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	4606      	mov	r6, r0
 80038ea:	460f      	mov	r7, r1
 80038ec:	4620      	mov	r0, r4
 80038ee:	4629      	mov	r1, r5
 80038f0:	f7fc fdfa 	bl	80004e8 <__aeabi_dmul>
 80038f4:	2200      	movs	r2, #0
 80038f6:	4682      	mov	sl, r0
 80038f8:	468b      	mov	fp, r1
 80038fa:	4b56      	ldr	r3, [pc, #344]	; (8003a54 <__ieee754_pow+0x3cc>)
 80038fc:	4620      	mov	r0, r4
 80038fe:	4629      	mov	r1, r5
 8003900:	f7fc fdf2 	bl	80004e8 <__aeabi_dmul>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	a14b      	add	r1, pc, #300	; (adr r1, 8003a38 <__ieee754_pow+0x3b0>)
 800390a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800390e:	f7fc fc33 	bl	8000178 <__aeabi_dsub>
 8003912:	4622      	mov	r2, r4
 8003914:	462b      	mov	r3, r5
 8003916:	f7fc fde7 	bl	80004e8 <__aeabi_dmul>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	2000      	movs	r0, #0
 8003920:	494d      	ldr	r1, [pc, #308]	; (8003a58 <__ieee754_pow+0x3d0>)
 8003922:	f7fc fc29 	bl	8000178 <__aeabi_dsub>
 8003926:	4622      	mov	r2, r4
 8003928:	462b      	mov	r3, r5
 800392a:	4680      	mov	r8, r0
 800392c:	4689      	mov	r9, r1
 800392e:	4620      	mov	r0, r4
 8003930:	4629      	mov	r1, r5
 8003932:	f7fc fdd9 	bl	80004e8 <__aeabi_dmul>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4640      	mov	r0, r8
 800393c:	4649      	mov	r1, r9
 800393e:	f7fc fdd3 	bl	80004e8 <__aeabi_dmul>
 8003942:	a33f      	add	r3, pc, #252	; (adr r3, 8003a40 <__ieee754_pow+0x3b8>)
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f7fc fdce 	bl	80004e8 <__aeabi_dmul>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4650      	mov	r0, sl
 8003952:	4659      	mov	r1, fp
 8003954:	f7fc fc10 	bl	8000178 <__aeabi_dsub>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4604      	mov	r4, r0
 800395e:	460d      	mov	r5, r1
 8003960:	4630      	mov	r0, r6
 8003962:	4639      	mov	r1, r7
 8003964:	f7fc fc0a 	bl	800017c <__adddf3>
 8003968:	2000      	movs	r0, #0
 800396a:	468b      	mov	fp, r1
 800396c:	4682      	mov	sl, r0
 800396e:	4632      	mov	r2, r6
 8003970:	463b      	mov	r3, r7
 8003972:	f7fc fc01 	bl	8000178 <__aeabi_dsub>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4620      	mov	r0, r4
 800397c:	4629      	mov	r1, r5
 800397e:	f7fc fbfb 	bl	8000178 <__aeabi_dsub>
 8003982:	9b00      	ldr	r3, [sp, #0]
 8003984:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003986:	3b01      	subs	r3, #1
 8003988:	4313      	orrs	r3, r2
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	bf0c      	ite	eq
 8003990:	4c32      	ldreq	r4, [pc, #200]	; (8003a5c <__ieee754_pow+0x3d4>)
 8003992:	4c2f      	ldrne	r4, [pc, #188]	; (8003a50 <__ieee754_pow+0x3c8>)
 8003994:	4606      	mov	r6, r0
 8003996:	e9cd 3400 	strd	r3, r4, [sp]
 800399a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800399e:	2400      	movs	r4, #0
 80039a0:	460f      	mov	r7, r1
 80039a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039a6:	4622      	mov	r2, r4
 80039a8:	462b      	mov	r3, r5
 80039aa:	f7fc fbe5 	bl	8000178 <__aeabi_dsub>
 80039ae:	4652      	mov	r2, sl
 80039b0:	465b      	mov	r3, fp
 80039b2:	f7fc fd99 	bl	80004e8 <__aeabi_dmul>
 80039b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80039ba:	4680      	mov	r8, r0
 80039bc:	4689      	mov	r9, r1
 80039be:	4630      	mov	r0, r6
 80039c0:	4639      	mov	r1, r7
 80039c2:	f7fc fd91 	bl	80004e8 <__aeabi_dmul>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4640      	mov	r0, r8
 80039cc:	4649      	mov	r1, r9
 80039ce:	f7fc fbd5 	bl	800017c <__adddf3>
 80039d2:	4622      	mov	r2, r4
 80039d4:	462b      	mov	r3, r5
 80039d6:	4680      	mov	r8, r0
 80039d8:	4689      	mov	r9, r1
 80039da:	4650      	mov	r0, sl
 80039dc:	4659      	mov	r1, fp
 80039de:	f7fc fd83 	bl	80004e8 <__aeabi_dmul>
 80039e2:	4604      	mov	r4, r0
 80039e4:	460d      	mov	r5, r1
 80039e6:	460b      	mov	r3, r1
 80039e8:	4602      	mov	r2, r0
 80039ea:	4649      	mov	r1, r9
 80039ec:	4640      	mov	r0, r8
 80039ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80039f2:	f7fc fbc3 	bl	800017c <__adddf3>
 80039f6:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <__ieee754_pow+0x3d8>)
 80039f8:	4682      	mov	sl, r0
 80039fa:	4299      	cmp	r1, r3
 80039fc:	460f      	mov	r7, r1
 80039fe:	460e      	mov	r6, r1
 8003a00:	f340 82e1 	ble.w	8003fc6 <__ieee754_pow+0x93e>
 8003a04:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003a08:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003a0c:	4303      	orrs	r3, r0
 8003a0e:	f000 81db 	beq.w	8003dc8 <__ieee754_pow+0x740>
 8003a12:	a30d      	add	r3, pc, #52	; (adr r3, 8003a48 <__ieee754_pow+0x3c0>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a1c:	f7fc fd64 	bl	80004e8 <__aeabi_dmul>
 8003a20:	a309      	add	r3, pc, #36	; (adr r3, 8003a48 <__ieee754_pow+0x3c0>)
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	e6c4      	b.n	80037b2 <__ieee754_pow+0x12a>
 8003a28:	60000000 	.word	0x60000000
 8003a2c:	3ff71547 	.word	0x3ff71547
 8003a30:	f85ddf44 	.word	0xf85ddf44
 8003a34:	3e54ae0b 	.word	0x3e54ae0b
 8003a38:	55555555 	.word	0x55555555
 8003a3c:	3fd55555 	.word	0x3fd55555
 8003a40:	652b82fe 	.word	0x652b82fe
 8003a44:	3ff71547 	.word	0x3ff71547
 8003a48:	8800759c 	.word	0x8800759c
 8003a4c:	7e37e43c 	.word	0x7e37e43c
 8003a50:	3ff00000 	.word	0x3ff00000
 8003a54:	3fd00000 	.word	0x3fd00000
 8003a58:	3fe00000 	.word	0x3fe00000
 8003a5c:	bff00000 	.word	0xbff00000
 8003a60:	408fffff 	.word	0x408fffff
 8003a64:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	da08      	bge.n	8003a80 <__ieee754_pow+0x3f8>
 8003a6e:	4658      	mov	r0, fp
 8003a70:	4bcd      	ldr	r3, [pc, #820]	; (8003da8 <__ieee754_pow+0x720>)
 8003a72:	4661      	mov	r1, ip
 8003a74:	f7fc fd38 	bl	80004e8 <__aeabi_dmul>
 8003a78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003a7c:	4683      	mov	fp, r0
 8003a7e:	460c      	mov	r4, r1
 8003a80:	1523      	asrs	r3, r4, #20
 8003a82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003a86:	4413      	add	r3, r2
 8003a88:	930c      	str	r3, [sp, #48]	; 0x30
 8003a8a:	4bc8      	ldr	r3, [pc, #800]	; (8003dac <__ieee754_pow+0x724>)
 8003a8c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003a90:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003a94:	429c      	cmp	r4, r3
 8003a96:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003a9a:	dd08      	ble.n	8003aae <__ieee754_pow+0x426>
 8003a9c:	4bc4      	ldr	r3, [pc, #784]	; (8003db0 <__ieee754_pow+0x728>)
 8003a9e:	429c      	cmp	r4, r3
 8003aa0:	f340 815b 	ble.w	8003d5a <__ieee754_pow+0x6d2>
 8003aa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003aa6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003aaa:	3301      	adds	r3, #1
 8003aac:	930c      	str	r3, [sp, #48]	; 0x30
 8003aae:	f04f 0800 	mov.w	r8, #0
 8003ab2:	4658      	mov	r0, fp
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	4bbf      	ldr	r3, [pc, #764]	; (8003db4 <__ieee754_pow+0x72c>)
 8003ab8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8003abc:	444b      	add	r3, r9
 8003abe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ac2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4623      	mov	r3, r4
 8003aca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ace:	f7fc fb53 	bl	8000178 <__aeabi_dsub>
 8003ad2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ad6:	4606      	mov	r6, r0
 8003ad8:	460f      	mov	r7, r1
 8003ada:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ade:	f7fc fb4d 	bl	800017c <__adddf3>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	49b3      	ldr	r1, [pc, #716]	; (8003db8 <__ieee754_pow+0x730>)
 8003aea:	f7fc fe27 	bl	800073c <__aeabi_ddiv>
 8003aee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4630      	mov	r0, r6
 8003af8:	4639      	mov	r1, r7
 8003afa:	f7fc fcf5 	bl	80004e8 <__aeabi_dmul>
 8003afe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b02:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003b06:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	106d      	asrs	r5, r5, #1
 8003b10:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003b14:	9304      	str	r3, [sp, #16]
 8003b16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003b1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003b1e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8003b22:	4650      	mov	r0, sl
 8003b24:	4659      	mov	r1, fp
 8003b26:	4614      	mov	r4, r2
 8003b28:	461d      	mov	r5, r3
 8003b2a:	f7fc fcdd 	bl	80004e8 <__aeabi_dmul>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4630      	mov	r0, r6
 8003b34:	4639      	mov	r1, r7
 8003b36:	f7fc fb1f 	bl	8000178 <__aeabi_dsub>
 8003b3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b3e:	4606      	mov	r6, r0
 8003b40:	460f      	mov	r7, r1
 8003b42:	4620      	mov	r0, r4
 8003b44:	4629      	mov	r1, r5
 8003b46:	f7fc fb17 	bl	8000178 <__aeabi_dsub>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b52:	f7fc fb11 	bl	8000178 <__aeabi_dsub>
 8003b56:	4652      	mov	r2, sl
 8003b58:	465b      	mov	r3, fp
 8003b5a:	f7fc fcc5 	bl	80004e8 <__aeabi_dmul>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4630      	mov	r0, r6
 8003b64:	4639      	mov	r1, r7
 8003b66:	f7fc fb07 	bl	8000178 <__aeabi_dsub>
 8003b6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003b6e:	f7fc fcbb 	bl	80004e8 <__aeabi_dmul>
 8003b72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f7fc fcb3 	bl	80004e8 <__aeabi_dmul>
 8003b82:	a377      	add	r3, pc, #476	; (adr r3, 8003d60 <__ieee754_pow+0x6d8>)
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	4604      	mov	r4, r0
 8003b8a:	460d      	mov	r5, r1
 8003b8c:	f7fc fcac 	bl	80004e8 <__aeabi_dmul>
 8003b90:	a375      	add	r3, pc, #468	; (adr r3, 8003d68 <__ieee754_pow+0x6e0>)
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f7fc faf1 	bl	800017c <__adddf3>
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	f7fc fca3 	bl	80004e8 <__aeabi_dmul>
 8003ba2:	a373      	add	r3, pc, #460	; (adr r3, 8003d70 <__ieee754_pow+0x6e8>)
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f7fc fae8 	bl	800017c <__adddf3>
 8003bac:	4622      	mov	r2, r4
 8003bae:	462b      	mov	r3, r5
 8003bb0:	f7fc fc9a 	bl	80004e8 <__aeabi_dmul>
 8003bb4:	a370      	add	r3, pc, #448	; (adr r3, 8003d78 <__ieee754_pow+0x6f0>)
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f7fc fadf 	bl	800017c <__adddf3>
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	462b      	mov	r3, r5
 8003bc2:	f7fc fc91 	bl	80004e8 <__aeabi_dmul>
 8003bc6:	a36e      	add	r3, pc, #440	; (adr r3, 8003d80 <__ieee754_pow+0x6f8>)
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f7fc fad6 	bl	800017c <__adddf3>
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	f7fc fc88 	bl	80004e8 <__aeabi_dmul>
 8003bd8:	a36b      	add	r3, pc, #428	; (adr r3, 8003d88 <__ieee754_pow+0x700>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f7fc facd 	bl	800017c <__adddf3>
 8003be2:	4622      	mov	r2, r4
 8003be4:	4606      	mov	r6, r0
 8003be6:	460f      	mov	r7, r1
 8003be8:	462b      	mov	r3, r5
 8003bea:	4620      	mov	r0, r4
 8003bec:	4629      	mov	r1, r5
 8003bee:	f7fc fc7b 	bl	80004e8 <__aeabi_dmul>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	4639      	mov	r1, r7
 8003bfa:	f7fc fc75 	bl	80004e8 <__aeabi_dmul>
 8003bfe:	4604      	mov	r4, r0
 8003c00:	460d      	mov	r5, r1
 8003c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c06:	4652      	mov	r2, sl
 8003c08:	465b      	mov	r3, fp
 8003c0a:	f7fc fab7 	bl	800017c <__adddf3>
 8003c0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c12:	f7fc fc69 	bl	80004e8 <__aeabi_dmul>
 8003c16:	4622      	mov	r2, r4
 8003c18:	462b      	mov	r3, r5
 8003c1a:	f7fc faaf 	bl	800017c <__adddf3>
 8003c1e:	4652      	mov	r2, sl
 8003c20:	4606      	mov	r6, r0
 8003c22:	460f      	mov	r7, r1
 8003c24:	465b      	mov	r3, fp
 8003c26:	4650      	mov	r0, sl
 8003c28:	4659      	mov	r1, fp
 8003c2a:	f7fc fc5d 	bl	80004e8 <__aeabi_dmul>
 8003c2e:	2200      	movs	r2, #0
 8003c30:	4b62      	ldr	r3, [pc, #392]	; (8003dbc <__ieee754_pow+0x734>)
 8003c32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003c36:	f7fc faa1 	bl	800017c <__adddf3>
 8003c3a:	4632      	mov	r2, r6
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	f7fc fa9d 	bl	800017c <__adddf3>
 8003c42:	9804      	ldr	r0, [sp, #16]
 8003c44:	460d      	mov	r5, r1
 8003c46:	4604      	mov	r4, r0
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4650      	mov	r0, sl
 8003c4e:	4659      	mov	r1, fp
 8003c50:	f7fc fc4a 	bl	80004e8 <__aeabi_dmul>
 8003c54:	2200      	movs	r2, #0
 8003c56:	4682      	mov	sl, r0
 8003c58:	468b      	mov	fp, r1
 8003c5a:	4b58      	ldr	r3, [pc, #352]	; (8003dbc <__ieee754_pow+0x734>)
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	4629      	mov	r1, r5
 8003c60:	f7fc fa8a 	bl	8000178 <__aeabi_dsub>
 8003c64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c68:	f7fc fa86 	bl	8000178 <__aeabi_dsub>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4630      	mov	r0, r6
 8003c72:	4639      	mov	r1, r7
 8003c74:	f7fc fa80 	bl	8000178 <__aeabi_dsub>
 8003c78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c7c:	f7fc fc34 	bl	80004e8 <__aeabi_dmul>
 8003c80:	4622      	mov	r2, r4
 8003c82:	4606      	mov	r6, r0
 8003c84:	460f      	mov	r7, r1
 8003c86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003c8a:	462b      	mov	r3, r5
 8003c8c:	f7fc fc2c 	bl	80004e8 <__aeabi_dmul>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4630      	mov	r0, r6
 8003c96:	4639      	mov	r1, r7
 8003c98:	f7fc fa70 	bl	800017c <__adddf3>
 8003c9c:	4606      	mov	r6, r0
 8003c9e:	460f      	mov	r7, r1
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4650      	mov	r0, sl
 8003ca6:	4659      	mov	r1, fp
 8003ca8:	f7fc fa68 	bl	800017c <__adddf3>
 8003cac:	a338      	add	r3, pc, #224	; (adr r3, 8003d90 <__ieee754_pow+0x708>)
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	9804      	ldr	r0, [sp, #16]
 8003cb4:	460d      	mov	r5, r1
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	f7fc fc16 	bl	80004e8 <__aeabi_dmul>
 8003cbc:	4652      	mov	r2, sl
 8003cbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003cc2:	465b      	mov	r3, fp
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	f7fc fa56 	bl	8000178 <__aeabi_dsub>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	4639      	mov	r1, r7
 8003cd4:	f7fc fa50 	bl	8000178 <__aeabi_dsub>
 8003cd8:	a32f      	add	r3, pc, #188	; (adr r3, 8003d98 <__ieee754_pow+0x710>)
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	f7fc fc03 	bl	80004e8 <__aeabi_dmul>
 8003ce2:	a32f      	add	r3, pc, #188	; (adr r3, 8003da0 <__ieee754_pow+0x718>)
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	4606      	mov	r6, r0
 8003cea:	460f      	mov	r7, r1
 8003cec:	4620      	mov	r0, r4
 8003cee:	4629      	mov	r1, r5
 8003cf0:	f7fc fbfa 	bl	80004e8 <__aeabi_dmul>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4630      	mov	r0, r6
 8003cfa:	4639      	mov	r1, r7
 8003cfc:	f7fc fa3e 	bl	800017c <__adddf3>
 8003d00:	4b2f      	ldr	r3, [pc, #188]	; (8003dc0 <__ieee754_pow+0x738>)
 8003d02:	444b      	add	r3, r9
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f7fc fa38 	bl	800017c <__adddf3>
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003d10:	460d      	mov	r5, r1
 8003d12:	f7fc fb7f 	bl	8000414 <__aeabi_i2d>
 8003d16:	4606      	mov	r6, r0
 8003d18:	460f      	mov	r7, r1
 8003d1a:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <__ieee754_pow+0x73c>)
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	444b      	add	r3, r9
 8003d20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d24:	462b      	mov	r3, r5
 8003d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d2a:	f7fc fa27 	bl	800017c <__adddf3>
 8003d2e:	4642      	mov	r2, r8
 8003d30:	464b      	mov	r3, r9
 8003d32:	f7fc fa23 	bl	800017c <__adddf3>
 8003d36:	4632      	mov	r2, r6
 8003d38:	463b      	mov	r3, r7
 8003d3a:	f7fc fa1f 	bl	800017c <__adddf3>
 8003d3e:	9804      	ldr	r0, [sp, #16]
 8003d40:	4632      	mov	r2, r6
 8003d42:	463b      	mov	r3, r7
 8003d44:	4682      	mov	sl, r0
 8003d46:	468b      	mov	fp, r1
 8003d48:	f7fc fa16 	bl	8000178 <__aeabi_dsub>
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	f7fc fa12 	bl	8000178 <__aeabi_dsub>
 8003d54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d58:	e60b      	b.n	8003972 <__ieee754_pow+0x2ea>
 8003d5a:	f04f 0801 	mov.w	r8, #1
 8003d5e:	e6a8      	b.n	8003ab2 <__ieee754_pow+0x42a>
 8003d60:	4a454eef 	.word	0x4a454eef
 8003d64:	3fca7e28 	.word	0x3fca7e28
 8003d68:	93c9db65 	.word	0x93c9db65
 8003d6c:	3fcd864a 	.word	0x3fcd864a
 8003d70:	a91d4101 	.word	0xa91d4101
 8003d74:	3fd17460 	.word	0x3fd17460
 8003d78:	518f264d 	.word	0x518f264d
 8003d7c:	3fd55555 	.word	0x3fd55555
 8003d80:	db6fabff 	.word	0xdb6fabff
 8003d84:	3fdb6db6 	.word	0x3fdb6db6
 8003d88:	33333303 	.word	0x33333303
 8003d8c:	3fe33333 	.word	0x3fe33333
 8003d90:	e0000000 	.word	0xe0000000
 8003d94:	3feec709 	.word	0x3feec709
 8003d98:	dc3a03fd 	.word	0xdc3a03fd
 8003d9c:	3feec709 	.word	0x3feec709
 8003da0:	145b01f5 	.word	0x145b01f5
 8003da4:	be3e2fe0 	.word	0xbe3e2fe0
 8003da8:	43400000 	.word	0x43400000
 8003dac:	0003988e 	.word	0x0003988e
 8003db0:	000bb679 	.word	0x000bb679
 8003db4:	080044c0 	.word	0x080044c0
 8003db8:	3ff00000 	.word	0x3ff00000
 8003dbc:	40080000 	.word	0x40080000
 8003dc0:	080044e0 	.word	0x080044e0
 8003dc4:	080044d0 	.word	0x080044d0
 8003dc8:	a39b      	add	r3, pc, #620	; (adr r3, 8004038 <__ieee754_pow+0x9b0>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	4640      	mov	r0, r8
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	f7fc f9d3 	bl	800017c <__adddf3>
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ddc:	462b      	mov	r3, r5
 8003dde:	4650      	mov	r0, sl
 8003de0:	4639      	mov	r1, r7
 8003de2:	f7fc f9c9 	bl	8000178 <__aeabi_dsub>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dee:	f7fc fe0b 	bl	8000a08 <__aeabi_dcmpgt>
 8003df2:	2800      	cmp	r0, #0
 8003df4:	f47f ae0d 	bne.w	8003a12 <__ieee754_pow+0x38a>
 8003df8:	4aa3      	ldr	r2, [pc, #652]	; (8004088 <__ieee754_pow+0xa00>)
 8003dfa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	f340 8103 	ble.w	800400a <__ieee754_pow+0x982>
 8003e04:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003e08:	2000      	movs	r0, #0
 8003e0a:	151b      	asrs	r3, r3, #20
 8003e0c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003e10:	fa4a f303 	asr.w	r3, sl, r3
 8003e14:	4433      	add	r3, r6
 8003e16:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003e1a:	4f9c      	ldr	r7, [pc, #624]	; (800408c <__ieee754_pow+0xa04>)
 8003e1c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003e20:	4117      	asrs	r7, r2
 8003e22:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003e26:	ea23 0107 	bic.w	r1, r3, r7
 8003e2a:	f1c2 0214 	rsb	r2, r2, #20
 8003e2e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003e32:	fa4a fa02 	asr.w	sl, sl, r2
 8003e36:	2e00      	cmp	r6, #0
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	4629      	mov	r1, r5
 8003e40:	bfb8      	it	lt
 8003e42:	f1ca 0a00 	rsblt	sl, sl, #0
 8003e46:	f7fc f997 	bl	8000178 <__aeabi_dsub>
 8003e4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e52:	4642      	mov	r2, r8
 8003e54:	464b      	mov	r3, r9
 8003e56:	f7fc f991 	bl	800017c <__adddf3>
 8003e5a:	a379      	add	r3, pc, #484	; (adr r3, 8004040 <__ieee754_pow+0x9b8>)
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	2000      	movs	r0, #0
 8003e62:	460d      	mov	r5, r1
 8003e64:	4604      	mov	r4, r0
 8003e66:	f7fc fb3f 	bl	80004e8 <__aeabi_dmul>
 8003e6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e6e:	4606      	mov	r6, r0
 8003e70:	460f      	mov	r7, r1
 8003e72:	4620      	mov	r0, r4
 8003e74:	4629      	mov	r1, r5
 8003e76:	f7fc f97f 	bl	8000178 <__aeabi_dsub>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4640      	mov	r0, r8
 8003e80:	4649      	mov	r1, r9
 8003e82:	f7fc f979 	bl	8000178 <__aeabi_dsub>
 8003e86:	a370      	add	r3, pc, #448	; (adr r3, 8004048 <__ieee754_pow+0x9c0>)
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f7fc fb2c 	bl	80004e8 <__aeabi_dmul>
 8003e90:	a36f      	add	r3, pc, #444	; (adr r3, 8004050 <__ieee754_pow+0x9c8>)
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	4680      	mov	r8, r0
 8003e98:	4689      	mov	r9, r1
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	f7fc fb23 	bl	80004e8 <__aeabi_dmul>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4640      	mov	r0, r8
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	f7fc f967 	bl	800017c <__adddf3>
 8003eae:	4604      	mov	r4, r0
 8003eb0:	460d      	mov	r5, r1
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	4639      	mov	r1, r7
 8003eba:	f7fc f95f 	bl	800017c <__adddf3>
 8003ebe:	4632      	mov	r2, r6
 8003ec0:	463b      	mov	r3, r7
 8003ec2:	4680      	mov	r8, r0
 8003ec4:	4689      	mov	r9, r1
 8003ec6:	f7fc f957 	bl	8000178 <__aeabi_dsub>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4620      	mov	r0, r4
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	f7fc f951 	bl	8000178 <__aeabi_dsub>
 8003ed6:	4642      	mov	r2, r8
 8003ed8:	4606      	mov	r6, r0
 8003eda:	460f      	mov	r7, r1
 8003edc:	464b      	mov	r3, r9
 8003ede:	4640      	mov	r0, r8
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	f7fc fb01 	bl	80004e8 <__aeabi_dmul>
 8003ee6:	a35c      	add	r3, pc, #368	; (adr r3, 8004058 <__ieee754_pow+0x9d0>)
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	4604      	mov	r4, r0
 8003eee:	460d      	mov	r5, r1
 8003ef0:	f7fc fafa 	bl	80004e8 <__aeabi_dmul>
 8003ef4:	a35a      	add	r3, pc, #360	; (adr r3, 8004060 <__ieee754_pow+0x9d8>)
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f7fc f93d 	bl	8000178 <__aeabi_dsub>
 8003efe:	4622      	mov	r2, r4
 8003f00:	462b      	mov	r3, r5
 8003f02:	f7fc faf1 	bl	80004e8 <__aeabi_dmul>
 8003f06:	a358      	add	r3, pc, #352	; (adr r3, 8004068 <__ieee754_pow+0x9e0>)
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f7fc f936 	bl	800017c <__adddf3>
 8003f10:	4622      	mov	r2, r4
 8003f12:	462b      	mov	r3, r5
 8003f14:	f7fc fae8 	bl	80004e8 <__aeabi_dmul>
 8003f18:	a355      	add	r3, pc, #340	; (adr r3, 8004070 <__ieee754_pow+0x9e8>)
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f7fc f92b 	bl	8000178 <__aeabi_dsub>
 8003f22:	4622      	mov	r2, r4
 8003f24:	462b      	mov	r3, r5
 8003f26:	f7fc fadf 	bl	80004e8 <__aeabi_dmul>
 8003f2a:	a353      	add	r3, pc, #332	; (adr r3, 8004078 <__ieee754_pow+0x9f0>)
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f7fc f924 	bl	800017c <__adddf3>
 8003f34:	4622      	mov	r2, r4
 8003f36:	462b      	mov	r3, r5
 8003f38:	f7fc fad6 	bl	80004e8 <__aeabi_dmul>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4640      	mov	r0, r8
 8003f42:	4649      	mov	r1, r9
 8003f44:	f7fc f918 	bl	8000178 <__aeabi_dsub>
 8003f48:	4604      	mov	r4, r0
 8003f4a:	460d      	mov	r5, r1
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4640      	mov	r0, r8
 8003f52:	4649      	mov	r1, r9
 8003f54:	f7fc fac8 	bl	80004e8 <__aeabi_dmul>
 8003f58:	2200      	movs	r2, #0
 8003f5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f62:	4620      	mov	r0, r4
 8003f64:	4629      	mov	r1, r5
 8003f66:	f7fc f907 	bl	8000178 <__aeabi_dsub>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f72:	f7fc fbe3 	bl	800073c <__aeabi_ddiv>
 8003f76:	4632      	mov	r2, r6
 8003f78:	4604      	mov	r4, r0
 8003f7a:	460d      	mov	r5, r1
 8003f7c:	463b      	mov	r3, r7
 8003f7e:	4640      	mov	r0, r8
 8003f80:	4649      	mov	r1, r9
 8003f82:	f7fc fab1 	bl	80004e8 <__aeabi_dmul>
 8003f86:	4632      	mov	r2, r6
 8003f88:	463b      	mov	r3, r7
 8003f8a:	f7fc f8f7 	bl	800017c <__adddf3>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4620      	mov	r0, r4
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7fc f8ef 	bl	8000178 <__aeabi_dsub>
 8003f9a:	4642      	mov	r2, r8
 8003f9c:	464b      	mov	r3, r9
 8003f9e:	f7fc f8eb 	bl	8000178 <__aeabi_dsub>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	4939      	ldr	r1, [pc, #228]	; (8004090 <__ieee754_pow+0xa08>)
 8003faa:	f7fc f8e5 	bl	8000178 <__aeabi_dsub>
 8003fae:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003fb2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003fb6:	da2b      	bge.n	8004010 <__ieee754_pow+0x988>
 8003fb8:	4652      	mov	r2, sl
 8003fba:	f000 f9b5 	bl	8004328 <scalbn>
 8003fbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003fc2:	f7ff bbf6 	b.w	80037b2 <__ieee754_pow+0x12a>
 8003fc6:	4b33      	ldr	r3, [pc, #204]	; (8004094 <__ieee754_pow+0xa0c>)
 8003fc8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003fcc:	429f      	cmp	r7, r3
 8003fce:	f77f af13 	ble.w	8003df8 <__ieee754_pow+0x770>
 8003fd2:	4b31      	ldr	r3, [pc, #196]	; (8004098 <__ieee754_pow+0xa10>)
 8003fd4:	440b      	add	r3, r1
 8003fd6:	4303      	orrs	r3, r0
 8003fd8:	d00b      	beq.n	8003ff2 <__ieee754_pow+0x96a>
 8003fda:	a329      	add	r3, pc, #164	; (adr r3, 8004080 <__ieee754_pow+0x9f8>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fe4:	f7fc fa80 	bl	80004e8 <__aeabi_dmul>
 8003fe8:	a325      	add	r3, pc, #148	; (adr r3, 8004080 <__ieee754_pow+0x9f8>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f7ff bbe0 	b.w	80037b2 <__ieee754_pow+0x12a>
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	f7fc f8bf 	bl	8000178 <__aeabi_dsub>
 8003ffa:	4642      	mov	r2, r8
 8003ffc:	464b      	mov	r3, r9
 8003ffe:	f7fc fcf9 	bl	80009f4 <__aeabi_dcmpge>
 8004002:	2800      	cmp	r0, #0
 8004004:	f43f aef8 	beq.w	8003df8 <__ieee754_pow+0x770>
 8004008:	e7e7      	b.n	8003fda <__ieee754_pow+0x952>
 800400a:	f04f 0a00 	mov.w	sl, #0
 800400e:	e71e      	b.n	8003e4e <__ieee754_pow+0x7c6>
 8004010:	4621      	mov	r1, r4
 8004012:	e7d4      	b.n	8003fbe <__ieee754_pow+0x936>
 8004014:	f04f 0b00 	mov.w	fp, #0
 8004018:	f8df c074 	ldr.w	ip, [pc, #116]	; 8004090 <__ieee754_pow+0xa08>
 800401c:	f7ff bb95 	b.w	800374a <__ieee754_pow+0xc2>
 8004020:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004024:	f7ff bb91 	b.w	800374a <__ieee754_pow+0xc2>
 8004028:	4638      	mov	r0, r7
 800402a:	4641      	mov	r1, r8
 800402c:	f7ff bbc3 	b.w	80037b6 <__ieee754_pow+0x12e>
 8004030:	9200      	str	r2, [sp, #0]
 8004032:	f7ff bb9f 	b.w	8003774 <__ieee754_pow+0xec>
 8004036:	bf00      	nop
 8004038:	652b82fe 	.word	0x652b82fe
 800403c:	3c971547 	.word	0x3c971547
 8004040:	00000000 	.word	0x00000000
 8004044:	3fe62e43 	.word	0x3fe62e43
 8004048:	fefa39ef 	.word	0xfefa39ef
 800404c:	3fe62e42 	.word	0x3fe62e42
 8004050:	0ca86c39 	.word	0x0ca86c39
 8004054:	be205c61 	.word	0xbe205c61
 8004058:	72bea4d0 	.word	0x72bea4d0
 800405c:	3e663769 	.word	0x3e663769
 8004060:	c5d26bf1 	.word	0xc5d26bf1
 8004064:	3ebbbd41 	.word	0x3ebbbd41
 8004068:	af25de2c 	.word	0xaf25de2c
 800406c:	3f11566a 	.word	0x3f11566a
 8004070:	16bebd93 	.word	0x16bebd93
 8004074:	3f66c16c 	.word	0x3f66c16c
 8004078:	5555553e 	.word	0x5555553e
 800407c:	3fc55555 	.word	0x3fc55555
 8004080:	c2f8f359 	.word	0xc2f8f359
 8004084:	01a56e1f 	.word	0x01a56e1f
 8004088:	3fe00000 	.word	0x3fe00000
 800408c:	000fffff 	.word	0x000fffff
 8004090:	3ff00000 	.word	0x3ff00000
 8004094:	4090cbff 	.word	0x4090cbff
 8004098:	3f6f3400 	.word	0x3f6f3400

0800409c <__ieee754_sqrt>:
 800409c:	4b54      	ldr	r3, [pc, #336]	; (80041f0 <__ieee754_sqrt+0x154>)
 800409e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a2:	438b      	bics	r3, r1
 80040a4:	4606      	mov	r6, r0
 80040a6:	460d      	mov	r5, r1
 80040a8:	460a      	mov	r2, r1
 80040aa:	460c      	mov	r4, r1
 80040ac:	d10f      	bne.n	80040ce <__ieee754_sqrt+0x32>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	f7fc fa19 	bl	80004e8 <__aeabi_dmul>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4630      	mov	r0, r6
 80040bc:	4629      	mov	r1, r5
 80040be:	f7fc f85d 	bl	800017c <__adddf3>
 80040c2:	4606      	mov	r6, r0
 80040c4:	460d      	mov	r5, r1
 80040c6:	4630      	mov	r0, r6
 80040c8:	4629      	mov	r1, r5
 80040ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ce:	2900      	cmp	r1, #0
 80040d0:	4607      	mov	r7, r0
 80040d2:	4603      	mov	r3, r0
 80040d4:	dc0e      	bgt.n	80040f4 <__ieee754_sqrt+0x58>
 80040d6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80040da:	ea5c 0707 	orrs.w	r7, ip, r7
 80040de:	d0f2      	beq.n	80040c6 <__ieee754_sqrt+0x2a>
 80040e0:	b141      	cbz	r1, 80040f4 <__ieee754_sqrt+0x58>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	f7fc f847 	bl	8000178 <__aeabi_dsub>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	f7fc fb25 	bl	800073c <__aeabi_ddiv>
 80040f2:	e7e6      	b.n	80040c2 <__ieee754_sqrt+0x26>
 80040f4:	1512      	asrs	r2, r2, #20
 80040f6:	d074      	beq.n	80041e2 <__ieee754_sqrt+0x146>
 80040f8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80040fc:	07d5      	lsls	r5, r2, #31
 80040fe:	f04f 0500 	mov.w	r5, #0
 8004102:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004106:	bf48      	it	mi
 8004108:	0fd9      	lsrmi	r1, r3, #31
 800410a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800410e:	bf44      	itt	mi
 8004110:	005b      	lslmi	r3, r3, #1
 8004112:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8004116:	1051      	asrs	r1, r2, #1
 8004118:	0fda      	lsrs	r2, r3, #31
 800411a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800411e:	4628      	mov	r0, r5
 8004120:	2216      	movs	r2, #22
 8004122:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	1987      	adds	r7, r0, r6
 800412a:	42a7      	cmp	r7, r4
 800412c:	bfde      	ittt	le
 800412e:	19b8      	addle	r0, r7, r6
 8004130:	1be4      	suble	r4, r4, r7
 8004132:	19ad      	addle	r5, r5, r6
 8004134:	0fdf      	lsrs	r7, r3, #31
 8004136:	3a01      	subs	r2, #1
 8004138:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800413c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004140:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004144:	d1f0      	bne.n	8004128 <__ieee754_sqrt+0x8c>
 8004146:	f04f 0c20 	mov.w	ip, #32
 800414a:	4696      	mov	lr, r2
 800414c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004150:	4284      	cmp	r4, r0
 8004152:	eb06 070e 	add.w	r7, r6, lr
 8004156:	dc02      	bgt.n	800415e <__ieee754_sqrt+0xc2>
 8004158:	d112      	bne.n	8004180 <__ieee754_sqrt+0xe4>
 800415a:	429f      	cmp	r7, r3
 800415c:	d810      	bhi.n	8004180 <__ieee754_sqrt+0xe4>
 800415e:	2f00      	cmp	r7, #0
 8004160:	eb07 0e06 	add.w	lr, r7, r6
 8004164:	da42      	bge.n	80041ec <__ieee754_sqrt+0x150>
 8004166:	f1be 0f00 	cmp.w	lr, #0
 800416a:	db3f      	blt.n	80041ec <__ieee754_sqrt+0x150>
 800416c:	f100 0801 	add.w	r8, r0, #1
 8004170:	1a24      	subs	r4, r4, r0
 8004172:	4640      	mov	r0, r8
 8004174:	429f      	cmp	r7, r3
 8004176:	bf88      	it	hi
 8004178:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800417c:	1bdb      	subs	r3, r3, r7
 800417e:	4432      	add	r2, r6
 8004180:	0064      	lsls	r4, r4, #1
 8004182:	f1bc 0c01 	subs.w	ip, ip, #1
 8004186:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800418a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800418e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004192:	d1dd      	bne.n	8004150 <__ieee754_sqrt+0xb4>
 8004194:	4323      	orrs	r3, r4
 8004196:	d006      	beq.n	80041a6 <__ieee754_sqrt+0x10a>
 8004198:	1c54      	adds	r4, r2, #1
 800419a:	bf0b      	itete	eq
 800419c:	4662      	moveq	r2, ip
 800419e:	3201      	addne	r2, #1
 80041a0:	3501      	addeq	r5, #1
 80041a2:	f022 0201 	bicne.w	r2, r2, #1
 80041a6:	106b      	asrs	r3, r5, #1
 80041a8:	0852      	lsrs	r2, r2, #1
 80041aa:	07e8      	lsls	r0, r5, #31
 80041ac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80041b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80041b4:	bf48      	it	mi
 80041b6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80041ba:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80041be:	4616      	mov	r6, r2
 80041c0:	e781      	b.n	80040c6 <__ieee754_sqrt+0x2a>
 80041c2:	0adc      	lsrs	r4, r3, #11
 80041c4:	3915      	subs	r1, #21
 80041c6:	055b      	lsls	r3, r3, #21
 80041c8:	2c00      	cmp	r4, #0
 80041ca:	d0fa      	beq.n	80041c2 <__ieee754_sqrt+0x126>
 80041cc:	02e6      	lsls	r6, r4, #11
 80041ce:	d50a      	bpl.n	80041e6 <__ieee754_sqrt+0x14a>
 80041d0:	f1c2 0020 	rsb	r0, r2, #32
 80041d4:	fa23 f000 	lsr.w	r0, r3, r0
 80041d8:	1e55      	subs	r5, r2, #1
 80041da:	4093      	lsls	r3, r2
 80041dc:	4304      	orrs	r4, r0
 80041de:	1b4a      	subs	r2, r1, r5
 80041e0:	e78a      	b.n	80040f8 <__ieee754_sqrt+0x5c>
 80041e2:	4611      	mov	r1, r2
 80041e4:	e7f0      	b.n	80041c8 <__ieee754_sqrt+0x12c>
 80041e6:	0064      	lsls	r4, r4, #1
 80041e8:	3201      	adds	r2, #1
 80041ea:	e7ef      	b.n	80041cc <__ieee754_sqrt+0x130>
 80041ec:	4680      	mov	r8, r0
 80041ee:	e7bf      	b.n	8004170 <__ieee754_sqrt+0xd4>
 80041f0:	7ff00000 	.word	0x7ff00000

080041f4 <finite>:
 80041f4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80041f8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80041fc:	0fc0      	lsrs	r0, r0, #31
 80041fe:	4770      	bx	lr

08004200 <matherr>:
 8004200:	2000      	movs	r0, #0
 8004202:	4770      	bx	lr

08004204 <nan>:
 8004204:	2000      	movs	r0, #0
 8004206:	4901      	ldr	r1, [pc, #4]	; (800420c <nan+0x8>)
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	7ff80000 	.word	0x7ff80000

08004210 <rint>:
 8004210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004212:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004216:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800421a:	f1bc 0f13 	cmp.w	ip, #19
 800421e:	4604      	mov	r4, r0
 8004220:	460d      	mov	r5, r1
 8004222:	460b      	mov	r3, r1
 8004224:	4606      	mov	r6, r0
 8004226:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800422a:	dc5a      	bgt.n	80042e2 <rint+0xd2>
 800422c:	f1bc 0f00 	cmp.w	ip, #0
 8004230:	da2b      	bge.n	800428a <rint+0x7a>
 8004232:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004236:	4302      	orrs	r2, r0
 8004238:	d023      	beq.n	8004282 <rint+0x72>
 800423a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800423e:	4302      	orrs	r2, r0
 8004240:	4256      	negs	r6, r2
 8004242:	4316      	orrs	r6, r2
 8004244:	0c4b      	lsrs	r3, r1, #17
 8004246:	0b36      	lsrs	r6, r6, #12
 8004248:	4934      	ldr	r1, [pc, #208]	; (800431c <rint+0x10c>)
 800424a:	045b      	lsls	r3, r3, #17
 800424c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8004250:	ea46 0503 	orr.w	r5, r6, r3
 8004254:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8004258:	4602      	mov	r2, r0
 800425a:	462b      	mov	r3, r5
 800425c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8004260:	4620      	mov	r0, r4
 8004262:	4629      	mov	r1, r5
 8004264:	f7fb ff8a 	bl	800017c <__adddf3>
 8004268:	e9cd 0100 	strd	r0, r1, [sp]
 800426c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004270:	462b      	mov	r3, r5
 8004272:	4622      	mov	r2, r4
 8004274:	f7fb ff80 	bl	8000178 <__aeabi_dsub>
 8004278:	4604      	mov	r4, r0
 800427a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800427e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8004282:	4620      	mov	r0, r4
 8004284:	4629      	mov	r1, r5
 8004286:	b003      	add	sp, #12
 8004288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428a:	4a25      	ldr	r2, [pc, #148]	; (8004320 <rint+0x110>)
 800428c:	fa42 f20c 	asr.w	r2, r2, ip
 8004290:	4011      	ands	r1, r2
 8004292:	4301      	orrs	r1, r0
 8004294:	d0f5      	beq.n	8004282 <rint+0x72>
 8004296:	0852      	lsrs	r2, r2, #1
 8004298:	ea05 0102 	and.w	r1, r5, r2
 800429c:	ea50 0601 	orrs.w	r6, r0, r1
 80042a0:	d00c      	beq.n	80042bc <rint+0xac>
 80042a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042a6:	f1bc 0f13 	cmp.w	ip, #19
 80042aa:	bf0c      	ite	eq
 80042ac:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80042b0:	2600      	movne	r6, #0
 80042b2:	ea25 0202 	bic.w	r2, r5, r2
 80042b6:	fa43 f30c 	asr.w	r3, r3, ip
 80042ba:	4313      	orrs	r3, r2
 80042bc:	4917      	ldr	r1, [pc, #92]	; (800431c <rint+0x10c>)
 80042be:	4632      	mov	r2, r6
 80042c0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80042c4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042c8:	4620      	mov	r0, r4
 80042ca:	4629      	mov	r1, r5
 80042cc:	f7fb ff56 	bl	800017c <__adddf3>
 80042d0:	e9cd 0100 	strd	r0, r1, [sp]
 80042d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042d8:	4622      	mov	r2, r4
 80042da:	462b      	mov	r3, r5
 80042dc:	f7fb ff4c 	bl	8000178 <__aeabi_dsub>
 80042e0:	e008      	b.n	80042f4 <rint+0xe4>
 80042e2:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 80042e6:	dd08      	ble.n	80042fa <rint+0xea>
 80042e8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80042ec:	d1c9      	bne.n	8004282 <rint+0x72>
 80042ee:	4602      	mov	r2, r0
 80042f0:	f7fb ff44 	bl	800017c <__adddf3>
 80042f4:	4604      	mov	r4, r0
 80042f6:	460d      	mov	r5, r1
 80042f8:	e7c3      	b.n	8004282 <rint+0x72>
 80042fa:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 80042fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004302:	40ca      	lsrs	r2, r1
 8004304:	4210      	tst	r0, r2
 8004306:	d0bc      	beq.n	8004282 <rint+0x72>
 8004308:	0852      	lsrs	r2, r2, #1
 800430a:	4210      	tst	r0, r2
 800430c:	bf1f      	itttt	ne
 800430e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8004312:	ea20 0202 	bicne.w	r2, r0, r2
 8004316:	410e      	asrne	r6, r1
 8004318:	4316      	orrne	r6, r2
 800431a:	e7cf      	b.n	80042bc <rint+0xac>
 800431c:	080044f0 	.word	0x080044f0
 8004320:	000fffff 	.word	0x000fffff
 8004324:	00000000 	.word	0x00000000

08004328 <scalbn>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	4616      	mov	r6, r2
 800432c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004330:	4604      	mov	r4, r0
 8004332:	460d      	mov	r5, r1
 8004334:	460b      	mov	r3, r1
 8004336:	b982      	cbnz	r2, 800435a <scalbn+0x32>
 8004338:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800433c:	4303      	orrs	r3, r0
 800433e:	d034      	beq.n	80043aa <scalbn+0x82>
 8004340:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <scalbn+0xd0>)
 8004342:	2200      	movs	r2, #0
 8004344:	f7fc f8d0 	bl	80004e8 <__aeabi_dmul>
 8004348:	4b2c      	ldr	r3, [pc, #176]	; (80043fc <scalbn+0xd4>)
 800434a:	4604      	mov	r4, r0
 800434c:	429e      	cmp	r6, r3
 800434e:	460d      	mov	r5, r1
 8004350:	da0d      	bge.n	800436e <scalbn+0x46>
 8004352:	a325      	add	r3, pc, #148	; (adr r3, 80043e8 <scalbn+0xc0>)
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	e01c      	b.n	8004394 <scalbn+0x6c>
 800435a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800435e:	42ba      	cmp	r2, r7
 8004360:	d109      	bne.n	8004376 <scalbn+0x4e>
 8004362:	4602      	mov	r2, r0
 8004364:	f7fb ff0a 	bl	800017c <__adddf3>
 8004368:	4604      	mov	r4, r0
 800436a:	460d      	mov	r5, r1
 800436c:	e01d      	b.n	80043aa <scalbn+0x82>
 800436e:	460b      	mov	r3, r1
 8004370:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004374:	3a36      	subs	r2, #54	; 0x36
 8004376:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800437a:	4432      	add	r2, r6
 800437c:	428a      	cmp	r2, r1
 800437e:	dd0c      	ble.n	800439a <scalbn+0x72>
 8004380:	4622      	mov	r2, r4
 8004382:	462b      	mov	r3, r5
 8004384:	a11a      	add	r1, pc, #104	; (adr r1, 80043f0 <scalbn+0xc8>)
 8004386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800438a:	f000 f83b 	bl	8004404 <copysign>
 800438e:	a318      	add	r3, pc, #96	; (adr r3, 80043f0 <scalbn+0xc8>)
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f7fc f8a8 	bl	80004e8 <__aeabi_dmul>
 8004398:	e7e6      	b.n	8004368 <scalbn+0x40>
 800439a:	2a00      	cmp	r2, #0
 800439c:	dd08      	ble.n	80043b0 <scalbn+0x88>
 800439e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80043a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80043a6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80043aa:	4620      	mov	r0, r4
 80043ac:	4629      	mov	r1, r5
 80043ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80043b4:	da0b      	bge.n	80043ce <scalbn+0xa6>
 80043b6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80043ba:	429e      	cmp	r6, r3
 80043bc:	4622      	mov	r2, r4
 80043be:	462b      	mov	r3, r5
 80043c0:	dce0      	bgt.n	8004384 <scalbn+0x5c>
 80043c2:	a109      	add	r1, pc, #36	; (adr r1, 80043e8 <scalbn+0xc0>)
 80043c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043c8:	f000 f81c 	bl	8004404 <copysign>
 80043cc:	e7c1      	b.n	8004352 <scalbn+0x2a>
 80043ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80043d2:	3236      	adds	r2, #54	; 0x36
 80043d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80043d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80043dc:	4620      	mov	r0, r4
 80043de:	4629      	mov	r1, r5
 80043e0:	2200      	movs	r2, #0
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <scalbn+0xd8>)
 80043e4:	e7d6      	b.n	8004394 <scalbn+0x6c>
 80043e6:	bf00      	nop
 80043e8:	c2f8f359 	.word	0xc2f8f359
 80043ec:	01a56e1f 	.word	0x01a56e1f
 80043f0:	8800759c 	.word	0x8800759c
 80043f4:	7e37e43c 	.word	0x7e37e43c
 80043f8:	43500000 	.word	0x43500000
 80043fc:	ffff3cb0 	.word	0xffff3cb0
 8004400:	3c900000 	.word	0x3c900000

08004404 <copysign>:
 8004404:	b530      	push	{r4, r5, lr}
 8004406:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800440a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800440e:	ea42 0503 	orr.w	r5, r2, r3
 8004412:	4629      	mov	r1, r5
 8004414:	bd30      	pop	{r4, r5, pc}
	...

08004418 <_init>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr

08004424 <_fini>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	bf00      	nop
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr
