
timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ac  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002318  08002318  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002318  08002318  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002318  08002318  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002318  08002318  00012318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800231c  0800231c  0001231c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000006c  0800238c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0800238c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051de  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000dfc  00000000  00000000  00025273  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000240  00000000  00000000  00026070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001c8  00000000  00000000  000262b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000143b  00000000  00000000  00026478  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000358e  00000000  00000000  000278b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ae9f  00000000  00000000  0002ae41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00035ce0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a70  00000000  00000000  00035d5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000006c 	.word	0x2000006c
 800014c:	00000000 	.word	0x00000000
 8000150:	080022c4 	.word	0x080022c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000070 	.word	0x20000070
 800016c:	080022c4 	.word	0x080022c4

08000170 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d101      	bne.n	8000184 <getposition+0x14>
		rval =0;
 8000180:	2300      	movs	r3, #0
 8000182:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8000184:	88fb      	ldrh	r3, [r7, #6]
 8000186:	2b01      	cmp	r3, #1
 8000188:	d101      	bne.n	800018e <getposition+0x1e>
		rval =4;
 800018a:	2304      	movs	r3, #4
 800018c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 800018e:	88fb      	ldrh	r3, [r7, #6]
 8000190:	2b02      	cmp	r3, #2
 8000192:	d101      	bne.n	8000198 <getposition+0x28>
		rval =8;
 8000194:	2308      	movs	r3, #8
 8000196:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8000198:	88fb      	ldrh	r3, [r7, #6]
 800019a:	2b03      	cmp	r3, #3
 800019c:	d101      	bne.n	80001a2 <getposition+0x32>
		rval =12;
 800019e:	230c      	movs	r3, #12
 80001a0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 80001a2:	88fb      	ldrh	r3, [r7, #6]
 80001a4:	2b04      	cmp	r3, #4
 80001a6:	d101      	bne.n	80001ac <getposition+0x3c>
		rval =16;
 80001a8:	2310      	movs	r3, #16
 80001aa:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 80001ac:	88fb      	ldrh	r3, [r7, #6]
 80001ae:	2b05      	cmp	r3, #5
 80001b0:	d101      	bne.n	80001b6 <getposition+0x46>
		rval =20;
 80001b2:	2314      	movs	r3, #20
 80001b4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 80001b6:	88fb      	ldrh	r3, [r7, #6]
 80001b8:	2b06      	cmp	r3, #6
 80001ba:	d101      	bne.n	80001c0 <getposition+0x50>
		rval =24;
 80001bc:	2318      	movs	r3, #24
 80001be:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 80001c0:	88fb      	ldrh	r3, [r7, #6]
 80001c2:	2b07      	cmp	r3, #7
 80001c4:	d101      	bne.n	80001ca <getposition+0x5a>
		rval =28;
 80001c6:	231c      	movs	r3, #28
 80001c8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 80001ca:	88fb      	ldrh	r3, [r7, #6]
 80001cc:	2b08      	cmp	r3, #8
 80001ce:	d101      	bne.n	80001d4 <getposition+0x64>
		rval =0;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 80001d4:	88fb      	ldrh	r3, [r7, #6]
 80001d6:	2b09      	cmp	r3, #9
 80001d8:	d101      	bne.n	80001de <getposition+0x6e>
		rval =4;
 80001da:	2304      	movs	r3, #4
 80001dc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 80001de:	88fb      	ldrh	r3, [r7, #6]
 80001e0:	2b0a      	cmp	r3, #10
 80001e2:	d101      	bne.n	80001e8 <getposition+0x78>
		rval =8;
 80001e4:	2308      	movs	r3, #8
 80001e6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 80001e8:	88fb      	ldrh	r3, [r7, #6]
 80001ea:	2b0b      	cmp	r3, #11
 80001ec:	d101      	bne.n	80001f2 <getposition+0x82>
		rval =12;
 80001ee:	230c      	movs	r3, #12
 80001f0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 80001f2:	88fb      	ldrh	r3, [r7, #6]
 80001f4:	2b0c      	cmp	r3, #12
 80001f6:	d101      	bne.n	80001fc <getposition+0x8c>
		rval =16;
 80001f8:	2310      	movs	r3, #16
 80001fa:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 80001fc:	88fb      	ldrh	r3, [r7, #6]
 80001fe:	2b0d      	cmp	r3, #13
 8000200:	d101      	bne.n	8000206 <getposition+0x96>
		rval =20;
 8000202:	2314      	movs	r3, #20
 8000204:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 8000206:	88fb      	ldrh	r3, [r7, #6]
 8000208:	2b0e      	cmp	r3, #14
 800020a:	d101      	bne.n	8000210 <getposition+0xa0>
		rval =24;
 800020c:	2318      	movs	r3, #24
 800020e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000210:	88fb      	ldrh	r3, [r7, #6]
 8000212:	2b0f      	cmp	r3, #15
 8000214:	d101      	bne.n	800021a <getposition+0xaa>
		rval =28;
 8000216:	231c      	movs	r3, #28
 8000218:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 800021a:	7bfb      	ldrb	r3, [r7, #15]


}
 800021c:	4618      	mov	r0, r3
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr

08000226 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000226:	b580      	push	{r7, lr}
 8000228:	b084      	sub	sp, #16
 800022a:	af00      	add	r7, sp, #0
 800022c:	60f8      	str	r0, [r7, #12]
 800022e:	460b      	mov	r3, r1
 8000230:	607a      	str	r2, [r7, #4]
 8000232:	817b      	strh	r3, [r7, #10]

	if(pin<8){
 8000234:	897b      	ldrh	r3, [r7, #10]
 8000236:	2b07      	cmp	r3, #7
 8000238:	d856      	bhi.n	80002e8 <pinmode+0xc2>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 800023a:	897b      	ldrh	r3, [r7, #10]
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff97 	bl	8000170 <getposition>
 8000242:	4603      	mov	r3, r0
 8000244:	461a      	mov	r2, r3
 8000246:	230f      	movs	r3, #15
 8000248:	4093      	lsls	r3, r2
 800024a:	43da      	mvns	r2, r3
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	401a      	ands	r2, r3
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2b08      	cmp	r3, #8
 800025a:	d002      	beq.n	8000262 <pinmode+0x3c>
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b18      	cmp	r3, #24
 8000260:	d133      	bne.n	80002ca <pinmode+0xa4>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b18      	cmp	r3, #24
 8000266:	d117      	bne.n	8000298 <pinmode+0x72>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000268:	897b      	ldrh	r3, [r7, #10]
 800026a:	4618      	mov	r0, r3
 800026c:	f7ff ff80 	bl	8000170 <getposition>
 8000270:	4603      	mov	r3, r0
 8000272:	461a      	mov	r2, r3
 8000274:	2308      	movs	r3, #8
 8000276:	fa03 f202 	lsl.w	r2, r3, r2
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	431a      	orrs	r2, r3
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	897a      	ldrh	r2, [r7, #10]
 800028a:	2101      	movs	r1, #1
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	431a      	orrs	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000296:	e081      	b.n	800039c <pinmode+0x176>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000298:	897b      	ldrh	r3, [r7, #10]
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ff68 	bl	8000170 <getposition>
 80002a0:	4603      	mov	r3, r0
 80002a2:	461a      	mov	r2, r3
 80002a4:	2308      	movs	r3, #8
 80002a6:	fa03 f202 	lsl.w	r2, r3, r2
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	431a      	orrs	r2, r3
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	897a      	ldrh	r2, [r7, #10]
 80002ba:	2101      	movs	r1, #1
 80002bc:	fa01 f202 	lsl.w	r2, r1, r2
 80002c0:	43d2      	mvns	r2, r2
 80002c2:	401a      	ands	r2, r3
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80002c8:	e068      	b.n	800039c <pinmode+0x176>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 80002ca:	897b      	ldrh	r3, [r7, #10]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff4f 	bl	8000170 <getposition>
 80002d2:	4603      	mov	r3, r0
 80002d4:	461a      	mov	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	fa03 f202 	lsl.w	r2, r3, r2
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	431a      	orrs	r2, r3
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	601a      	str	r2, [r3, #0]

	}



}
 80002e6:	e059      	b.n	800039c <pinmode+0x176>
	else if(pin>7){
 80002e8:	897b      	ldrh	r3, [r7, #10]
 80002ea:	2b07      	cmp	r3, #7
 80002ec:	d956      	bls.n	800039c <pinmode+0x176>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 80002ee:	897b      	ldrh	r3, [r7, #10]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff3d 	bl	8000170 <getposition>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	230f      	movs	r3, #15
 80002fc:	4093      	lsls	r3, r2
 80002fe:	43da      	mvns	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	401a      	ands	r2, r3
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b08      	cmp	r3, #8
 800030e:	d002      	beq.n	8000316 <pinmode+0xf0>
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b18      	cmp	r3, #24
 8000314:	d133      	bne.n	800037e <pinmode+0x158>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b18      	cmp	r3, #24
 800031a:	d117      	bne.n	800034c <pinmode+0x126>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800031c:	897b      	ldrh	r3, [r7, #10]
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff26 	bl	8000170 <getposition>
 8000324:	4603      	mov	r3, r0
 8000326:	461a      	mov	r2, r3
 8000328:	2308      	movs	r3, #8
 800032a:	fa03 f202 	lsl.w	r2, r3, r2
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	431a      	orrs	r2, r3
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	897a      	ldrh	r2, [r7, #10]
 800033e:	2101      	movs	r1, #1
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	431a      	orrs	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800034a:	e027      	b.n	800039c <pinmode+0x176>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800034c:	897b      	ldrh	r3, [r7, #10]
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ff0e 	bl	8000170 <getposition>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	2308      	movs	r3, #8
 800035a:	fa03 f202 	lsl.w	r2, r3, r2
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	431a      	orrs	r2, r3
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	897a      	ldrh	r2, [r7, #10]
 800036e:	2101      	movs	r1, #1
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	43d2      	mvns	r2, r2
 8000376:	401a      	ands	r2, r3
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800037c:	e00e      	b.n	800039c <pinmode+0x176>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 800037e:	897b      	ldrh	r3, [r7, #10]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff fef5 	bl	8000170 <getposition>
 8000386:	4603      	mov	r3, r0
 8000388:	461a      	mov	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	fa03 f202 	lsl.w	r2, r3, r2
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	431a      	orrs	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	605a      	str	r2, [r3, #4]
}
 800039a:	e7ff      	b.n	800039c <pinmode+0x176>
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_typeDef* GPIOx,uint16_t pin,uint8_t status){
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	460b      	mov	r3, r1
 80003ae:	807b      	strh	r3, [r7, #2]
 80003b0:	4613      	mov	r3, r2
 80003b2:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 80003b4:	787b      	ldrb	r3, [r7, #1]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d009      	beq.n	80003ce <pinwrite+0x2a>
		GPIOx->GPIOx_ODR |=(1<<pin);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	887a      	ldrh	r2, [r7, #2]
 80003c0:	2101      	movs	r1, #1
 80003c2:	fa01 f202 	lsl.w	r2, r1, r2
 80003c6:	431a      	orrs	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->GPIOx_ODR &=~(1<<pin);

}
 80003cc:	e009      	b.n	80003e2 <pinwrite+0x3e>
	else GPIOx->GPIOx_ODR &=~(1<<pin);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	68db      	ldr	r3, [r3, #12]
 80003d2:	887a      	ldrh	r2, [r7, #2]
 80003d4:	2101      	movs	r1, #1
 80003d6:	fa01 f202 	lsl.w	r2, r1, r2
 80003da:	43d2      	mvns	r2, r2
 80003dc:	401a      	ands	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	60da      	str	r2, [r3, #12]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr

080003ec <delay>:

	TIMERx->TIMx_CR1 |=(1<<0);//enable the timer

}

void delay(uint16_t time,uint8_t U,uint32_t clk){
 80003ec:	b480      	push	{r7}
 80003ee:	b089      	sub	sp, #36	; 0x24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	603a      	str	r2, [r7, #0]
 80003f6:	80fb      	strh	r3, [r7, #6]
 80003f8:	460b      	mov	r3, r1
 80003fa:	717b      	strb	r3, [r7, #5]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 80003fc:	4b4f      	ldr	r3, [pc, #316]	; (800053c <delay+0x150>)
 80003fe:	69db      	ldr	r3, [r3, #28]
 8000400:	4a4e      	ldr	r2, [pc, #312]	; (800053c <delay+0x150>)
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8000408:	4b4d      	ldr	r3, [pc, #308]	; (8000540 <delay+0x154>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	4b4c      	ldr	r3, [pc, #304]	; (8000540 <delay+0x154>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f022 0201 	bic.w	r2, r2, #1
 8000416:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8000418:	2301      	movs	r3, #1
 800041a:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 8000420:	2301      	movs	r3, #1
 8000422:	617b      	str	r3, [r7, #20]
	uint32_t unit =1000;
 8000424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000428:	613b      	str	r3, [r7, #16]
	uint8_t  increase=2;
 800042a:	2302      	movs	r3, #2
 800042c:	73fb      	strb	r3, [r7, #15]

	if (U == 0){
 800042e:	797b      	ldrb	r3, [r7, #5]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d10d      	bne.n	8000450 <delay+0x64>
		unit = 1000;
 8000434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000438:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 100;
 800043a:	88fb      	ldrh	r3, [r7, #6]
 800043c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000440:	4293      	cmp	r3, r2
 8000442:	d902      	bls.n	800044a <delay+0x5e>
 8000444:	2364      	movs	r3, #100	; 0x64
 8000446:	73fb      	strb	r3, [r7, #15]
 8000448:	e030      	b.n	80004ac <delay+0xc0>
		else increase = 10;
 800044a:	230a      	movs	r3, #10
 800044c:	73fb      	strb	r3, [r7, #15]
 800044e:	e02d      	b.n	80004ac <delay+0xc0>
	}
	else {
		unit = 1000000;
 8000450:	4b3c      	ldr	r3, [pc, #240]	; (8000544 <delay+0x158>)
 8000452:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 10;
 8000454:	88fb      	ldrh	r3, [r7, #6]
 8000456:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800045a:	4293      	cmp	r3, r2
 800045c:	d902      	bls.n	8000464 <delay+0x78>
 800045e:	230a      	movs	r3, #10
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	e023      	b.n	80004ac <delay+0xc0>
		else increase = 5;
 8000464:	2305      	movs	r3, #5
 8000466:	73fb      	strb	r3, [r7, #15]
	}

	while(user_flage==1){
 8000468:	e020      	b.n	80004ac <delay+0xc0>
		user_top = (clk/unit*time)/( user_pre );
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	693b      	ldr	r3, [r7, #16]
 800046e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000472:	88fa      	ldrh	r2, [r7, #6]
 8000474:	fb02 f203 	mul.w	r2, r2, r3
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	fbb2 f3f3 	udiv	r3, r2, r3
 800047e:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000486:	d30f      	bcc.n	80004a8 <delay+0xbc>

			if(user_pre>65530){
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800048e:	4293      	cmp	r3, r2
 8000490:	d905      	bls.n	800049e <delay+0xb2>
				user_pre=65530;
 8000492:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8000496:	617b      	str	r3, [r7, #20]
				user_flage=0;
 8000498:	2300      	movs	r3, #0
 800049a:	77fb      	strb	r3, [r7, #31]
 800049c:	e006      	b.n	80004ac <delay+0xc0>
			}
			else user_pre+=increase;
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	697a      	ldr	r2, [r7, #20]
 80004a2:	4413      	add	r3, r2
 80004a4:	617b      	str	r3, [r7, #20]
 80004a6:	e001      	b.n	80004ac <delay+0xc0>

		}
		else{
			user_flage=0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 80004ac:	7ffb      	ldrb	r3, [r7, #31]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d0db      	beq.n	800046a <delay+0x7e>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80004b2:	4b23      	ldr	r3, [pc, #140]	; (8000540 <delay+0x154>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b21      	ldr	r3, [pc, #132]	; (8000540 <delay+0x154>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f022 0201 	bic.w	r2, r2, #1
 80004c0:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 80004c2:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <delay+0x154>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <delay+0x154>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f042 0204 	orr.w	r2, r2, #4
 80004d0:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 80004d2:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <delay+0x154>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	68da      	ldr	r2, [r3, #12]
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <delay+0x154>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f042 0201 	orr.w	r2, r2, #1
 80004e0:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 80004e2:	4b17      	ldr	r3, [pc, #92]	; (8000540 <delay+0x154>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	69ba      	ldr	r2, [r7, #24]
 80004e8:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <delay+0x154>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	697a      	ldr	r2, [r7, #20]
 80004f0:	3a01      	subs	r2, #1
 80004f2:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <delay+0x154>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	695a      	ldr	r2, [r3, #20]
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <delay+0x154>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f042 0201 	orr.w	r2, r2, #1
 8000502:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <delay+0x154>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <delay+0x154>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f042 0201 	orr.w	r2, r2, #1
 8000512:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <delay+0x15c>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <delay+0x160>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <delay+0x160>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000524:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 8000526:	bf00      	nop
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <delay+0x15c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1fb      	bne.n	8000528 <delay+0x13c>

	}
}
 8000530:	bf00      	nop
 8000532:	3724      	adds	r7, #36	; 0x24
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000
 8000540:	20000004 	.word	0x20000004
 8000544:	000f4240 	.word	0x000f4240
 8000548:	20000000 	.word	0x20000000
 800054c:	e000e100 	.word	0xe000e100

08000550 <TIME_CALCULATION>:

	NVIC_TIM3_global_interrupt_Enable;

}

uint32_t TIME_CALCULATION(uint32_t clk,uint8_t TIMER_ST){
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	70fb      	strb	r3, [r7, #3]
	if(TIMER_ST==TIMER_START){
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d132      	bne.n	80005c8 <TIME_CALCULATION+0x78>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 8000562:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <TIME_CALCULATION+0xd0>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a2e      	ldr	r2, [pc, #184]	; (8000620 <TIME_CALCULATION+0xd0>)
 8000568:	f043 0304 	orr.w	r3, r3, #4
 800056c:	61d3      	str	r3, [r2, #28]
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 800056e:	4b2d      	ldr	r3, [pc, #180]	; (8000624 <TIME_CALCULATION+0xd4>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2c      	ldr	r2, [pc, #176]	; (8000624 <TIME_CALCULATION+0xd4>)
 8000574:	f023 0301 	bic.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_CR1  |=(1<<2);
 800057a:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <TIME_CALCULATION+0xd4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a29      	ldr	r2, [pc, #164]	; (8000624 <TIME_CALCULATION+0xd4>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_DIER |=(1<<0);//Update interrupt enable
 8000586:	4b27      	ldr	r3, [pc, #156]	; (8000624 <TIME_CALCULATION+0xd4>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	4a26      	ldr	r2, [pc, #152]	; (8000624 <TIME_CALCULATION+0xd4>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	60d3      	str	r3, [r2, #12]

		TIM4->TIMx_ARR=64000;//peak value 8ms of freq=8000000hz
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <TIME_CALCULATION+0xd4>)
 8000594:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000598:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM4->TIMx_PSC=0;//prescaller
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <TIME_CALCULATION+0xd4>)
 800059c:	2200      	movs	r2, #0
 800059e:	629a      	str	r2, [r3, #40]	; 0x28

		TIM4->TIMx_EGR |=(1<<0);//Bit 0 UG: Update generation
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <TIME_CALCULATION+0xd4>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a1f      	ldr	r2, [pc, #124]	; (8000624 <TIME_CALCULATION+0xd4>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6153      	str	r3, [r2, #20]

		TIM4->TIMx_CR1 |=(1<<0);//enable the timer
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <TIME_CALCULATION+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <TIME_CALCULATION+0xd4>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6013      	str	r3, [r2, #0]
		NVIC_TIM4_global_interrupt_Enable;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <TIME_CALCULATION+0xd8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <TIME_CALCULATION+0xd8>)
 80005be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80005c2:	6013      	str	r3, [r2, #0]
		return 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	e025      	b.n	8000614 <TIME_CALCULATION+0xc4>
	}
	else {
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <TIME_CALCULATION+0xd4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a15      	ldr	r2, [pc, #84]	; (8000624 <TIME_CALCULATION+0xd4>)
 80005ce:	f023 0301 	bic.w	r3, r3, #1
 80005d2:	6013      	str	r3, [r2, #0]
		timer_ticks=TIM4->TIMx_CNT;
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <TIME_CALCULATION+0xd4>)
 80005d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d8:	b29a      	uxth	r2, r3
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <TIME_CALCULATION+0xdc>)
 80005dc:	801a      	strh	r2, [r3, #0]
		uint32_t X=((timer_ticks+(overflowtims*64000))/(clk/1000000));
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <TIME_CALCULATION+0xdc>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <TIME_CALCULATION+0xe0>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 80005ee:	fb03 f301 	mul.w	r3, r3, r1
 80005f2:	4413      	add	r3, r2
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <TIME_CALCULATION+0xe4>)
 80005fa:	fba2 2303 	umull	r2, r3, r2, r3
 80005fe:	0c9b      	lsrs	r3, r3, #18
 8000600:	fbb1 f3f3 	udiv	r3, r1, r3
 8000604:	60fb      	str	r3, [r7, #12]
		overflowtims=0;
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <TIME_CALCULATION+0xe0>)
 8000608:	2200      	movs	r2, #0
 800060a:	801a      	strh	r2, [r3, #0]
		timer_ticks=0;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <TIME_CALCULATION+0xdc>)
 800060e:	2200      	movs	r2, #0
 8000610:	801a      	strh	r2, [r3, #0]
		return X;
 8000612:	68fb      	ldr	r3, [r7, #12]
	}
}
 8000614:	4618      	mov	r0, r3
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000
 8000624:	40000800 	.word	0x40000800
 8000628:	e000e100 	.word	0xe000e100
 800062c:	2000008a 	.word	0x2000008a
 8000630:	20000088 	.word	0x20000088
 8000634:	431bde83 	.word	0x431bde83

08000638 <TIM2_IRQHandler>:


void TIM2_IRQHandler(){
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <TIM2_IRQHandler+0x34>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	691a      	ldr	r2, [r3, #16]
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <TIM2_IRQHandler+0x34>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f022 0201 	bic.w	r2, r2, #1
 800064a:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <TIM2_IRQHandler+0x38>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <TIM2_IRQHandler+0x34>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <TIM2_IRQHandler+0x34>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f022 0201 	bic.w	r2, r2, #1
 8000660:	601a      	str	r2, [r3, #0]

}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000004 	.word	0x20000004
 8000670:	20000000 	.word	0x20000000

08000674 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin10,LOW);
	ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <TIM3_IRQHandler+0x30>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <TIM3_IRQHandler+0x30>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f022 0201 	bic.w	r2, r2, #1
 8000686:	601a      	str	r2, [r3, #0]
	ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <TIM3_IRQHandler+0x30>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	691a      	ldr	r2, [r3, #16]
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <TIM3_IRQHandler+0x30>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f022 0201 	bic.w	r2, r2, #1
 8000696:	611a      	str	r2, [r3, #16]
	ISRcalback[0]();
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <TIM3_IRQHandler+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4798      	blx	r3
	//NVIC_TIM3_global_interrupt_Disable;
	//pinwrite(GPIOB, pin10,HIGH);
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000a4 	.word	0x200000a4
 80006a8:	2000009c 	.word	0x2000009c

080006ac <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <TIM4_IRQHandler+0x24>)
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <TIM4_IRQHandler+0x24>)
 80006b6:	f023 0301 	bic.w	r3, r3, #1
 80006ba:	6113      	str	r3, [r2, #16]
	overflowtims++;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <TIM4_IRQHandler+0x28>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <TIM4_IRQHandler+0x28>)
 80006c6:	801a      	strh	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	40000800 	.word	0x40000800
 80006d4:	20000088 	.word	0x20000088

080006d8 <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	2b0f      	cmp	r3, #15
 80006e6:	d854      	bhi.n	8000792 <Enable_NVIC+0xba>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <Enable_NVIC+0x18>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000731 	.word	0x08000731
 80006f4:	0800073f 	.word	0x0800073f
 80006f8:	0800074d 	.word	0x0800074d
 80006fc:	0800075b 	.word	0x0800075b
 8000700:	08000769 	.word	0x08000769
 8000704:	08000777 	.word	0x08000777
 8000708:	08000777 	.word	0x08000777
 800070c:	08000777 	.word	0x08000777
 8000710:	08000777 	.word	0x08000777
 8000714:	08000777 	.word	0x08000777
 8000718:	08000785 	.word	0x08000785
 800071c:	08000785 	.word	0x08000785
 8000720:	08000785 	.word	0x08000785
 8000724:	08000785 	.word	0x08000785
 8000728:	08000785 	.word	0x08000785
 800072c:	08000785 	.word	0x08000785
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <Enable_NVIC+0xc4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a19      	ldr	r2, [pc, #100]	; (800079c <Enable_NVIC+0xc4>)
 8000736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800073a:	6013      	str	r3, [r2, #0]
		break;
 800073c:	e029      	b.n	8000792 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <Enable_NVIC+0xc4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <Enable_NVIC+0xc4>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6013      	str	r3, [r2, #0]
		break;
 800074a:	e022      	b.n	8000792 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <Enable_NVIC+0xc4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a12      	ldr	r2, [pc, #72]	; (800079c <Enable_NVIC+0xc4>)
 8000752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000756:	6013      	str	r3, [r2, #0]
		break;
 8000758:	e01b      	b.n	8000792 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <Enable_NVIC+0xc4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <Enable_NVIC+0xc4>)
 8000760:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000764:	6013      	str	r3, [r2, #0]
		break;
 8000766:	e014      	b.n	8000792 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <Enable_NVIC+0xc4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <Enable_NVIC+0xc4>)
 800076e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000772:	6013      	str	r3, [r2, #0]
		break;
 8000774:	e00d      	b.n	8000792 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <Enable_NVIC+0xc4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <Enable_NVIC+0xc4>)
 800077c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000780:	6013      	str	r3, [r2, #0]
		break;
 8000782:	e006      	b.n	8000792 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <Enable_NVIC+0xc8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <Enable_NVIC+0xc8>)
 800078a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078e:	6013      	str	r3, [r2, #0]
		break;
 8000790:	bf00      	nop
	}


}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000e104 	.word	0xe000e104

080007a4 <EXTI>:
 * @param [in]      -function_addres : app ISR function
 * @retval          - none
 * Note             -
 *================================================================ */

void EXTI(GPIO_typeDef* PORTx ,uint16_t pin,uint16_t triggercase,void (*function_addres) (void)){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	460b      	mov	r3, r1
 80007b0:	817b      	strh	r3, [r7, #10]
 80007b2:	4613      	mov	r3, r2
 80007b4:	813b      	strh	r3, [r7, #8]

	pinmode(PORTx,pin,GPIO_MODE_INTPUT_AF);//set pin to _INTPUT_AF
 80007b6:	897b      	ldrh	r3, [r7, #10]
 80007b8:	2204      	movs	r2, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f7ff fd32 	bl	8000226 <pinmode>
		//	0000: PA[x] pin
		//	0001: PB[x] pin
		//	0010: PC[x] pin
		//	0011: PD[x] pin

		switch(pin){
 80007c2:	897b      	ldrh	r3, [r7, #10]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	f200 8385 	bhi.w	8000ed4 <EXTI+0x730>
 80007ca:	a201      	add	r2, pc, #4	; (adr r2, 80007d0 <EXTI+0x2c>)
 80007cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d0:	08000811 	.word	0x08000811
 80007d4:	08000877 	.word	0x08000877
 80007d8:	080008dd 	.word	0x080008dd
 80007dc:	08000943 	.word	0x08000943
 80007e0:	080009a9 	.word	0x080009a9
 80007e4:	08000a0f 	.word	0x08000a0f
 80007e8:	08000a89 	.word	0x08000a89
 80007ec:	08000aef 	.word	0x08000aef
 80007f0:	08000b55 	.word	0x08000b55
 80007f4:	08000bbb 	.word	0x08000bbb
 80007f8:	08000c21 	.word	0x08000c21
 80007fc:	08000c87 	.word	0x08000c87
 8000800:	08000d03 	.word	0x08000d03
 8000804:	08000d69 	.word	0x08000d69
 8000808:	08000dcf 	.word	0x08000dcf
 800080c:	08000e33 	.word	0x08000e33
		case pin0:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<0);
 8000810:	4b92      	ldr	r3, [pc, #584]	; (8000a5c <EXTI+0x2b8>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	4a91      	ldr	r2, [pc, #580]	; (8000a5c <EXTI+0x2b8>)
 8000816:	f023 030f 	bic.w	r3, r3, #15
 800081a:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<0);}
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4a90      	ldr	r2, [pc, #576]	; (8000a60 <EXTI+0x2bc>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d106      	bne.n	8000832 <EXTI+0x8e>
 8000824:	4b8d      	ldr	r3, [pc, #564]	; (8000a5c <EXTI+0x2b8>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	4a8c      	ldr	r2, [pc, #560]	; (8000a5c <EXTI+0x2b8>)
 800082a:	f023 030f 	bic.w	r3, r3, #15
 800082e:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}

			break;
 8000830:	e331      	b.n	8000e96 <EXTI+0x6f2>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4a8b      	ldr	r2, [pc, #556]	; (8000a64 <EXTI+0x2c0>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <EXTI+0xa4>
 800083a:	4b88      	ldr	r3, [pc, #544]	; (8000a5c <EXTI+0x2b8>)
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	4a87      	ldr	r2, [pc, #540]	; (8000a5c <EXTI+0x2b8>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6093      	str	r3, [r2, #8]
			break;
 8000846:	e326      	b.n	8000e96 <EXTI+0x6f2>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	4a87      	ldr	r2, [pc, #540]	; (8000a68 <EXTI+0x2c4>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d106      	bne.n	800085e <EXTI+0xba>
 8000850:	4b82      	ldr	r3, [pc, #520]	; (8000a5c <EXTI+0x2b8>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	4a81      	ldr	r2, [pc, #516]	; (8000a5c <EXTI+0x2b8>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	6093      	str	r3, [r2, #8]
			break;
 800085c:	e31b      	b.n	8000e96 <EXTI+0x6f2>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4a82      	ldr	r2, [pc, #520]	; (8000a6c <EXTI+0x2c8>)
 8000862:	4293      	cmp	r3, r2
 8000864:	f040 8317 	bne.w	8000e96 <EXTI+0x6f2>
 8000868:	4b7c      	ldr	r3, [pc, #496]	; (8000a5c <EXTI+0x2b8>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	4a7b      	ldr	r2, [pc, #492]	; (8000a5c <EXTI+0x2b8>)
 800086e:	f043 0303 	orr.w	r3, r3, #3
 8000872:	6093      	str	r3, [r2, #8]
			break;
 8000874:	e30f      	b.n	8000e96 <EXTI+0x6f2>
		case pin1:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<4);
 8000876:	4b79      	ldr	r3, [pc, #484]	; (8000a5c <EXTI+0x2b8>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	4a78      	ldr	r2, [pc, #480]	; (8000a5c <EXTI+0x2b8>)
 800087c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000880:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<4);}
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4a76      	ldr	r2, [pc, #472]	; (8000a60 <EXTI+0x2bc>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d106      	bne.n	8000898 <EXTI+0xf4>
 800088a:	4b74      	ldr	r3, [pc, #464]	; (8000a5c <EXTI+0x2b8>)
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	4a73      	ldr	r2, [pc, #460]	; (8000a5c <EXTI+0x2b8>)
 8000890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000894:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}

			break;
 8000896:	e300      	b.n	8000e9a <EXTI+0x6f6>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4a72      	ldr	r2, [pc, #456]	; (8000a64 <EXTI+0x2c0>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d106      	bne.n	80008ae <EXTI+0x10a>
 80008a0:	4b6e      	ldr	r3, [pc, #440]	; (8000a5c <EXTI+0x2b8>)
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	4a6d      	ldr	r2, [pc, #436]	; (8000a5c <EXTI+0x2b8>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	6093      	str	r3, [r2, #8]
			break;
 80008ac:	e2f5      	b.n	8000e9a <EXTI+0x6f6>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	4a6d      	ldr	r2, [pc, #436]	; (8000a68 <EXTI+0x2c4>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d106      	bne.n	80008c4 <EXTI+0x120>
 80008b6:	4b69      	ldr	r3, [pc, #420]	; (8000a5c <EXTI+0x2b8>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	4a68      	ldr	r2, [pc, #416]	; (8000a5c <EXTI+0x2b8>)
 80008bc:	f043 0320 	orr.w	r3, r3, #32
 80008c0:	6093      	str	r3, [r2, #8]
			break;
 80008c2:	e2ea      	b.n	8000e9a <EXTI+0x6f6>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4a69      	ldr	r2, [pc, #420]	; (8000a6c <EXTI+0x2c8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	f040 82e6 	bne.w	8000e9a <EXTI+0x6f6>
 80008ce:	4b63      	ldr	r3, [pc, #396]	; (8000a5c <EXTI+0x2b8>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	4a62      	ldr	r2, [pc, #392]	; (8000a5c <EXTI+0x2b8>)
 80008d4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80008d8:	6093      	str	r3, [r2, #8]
			break;
 80008da:	e2de      	b.n	8000e9a <EXTI+0x6f6>
		case pin2:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<8);
 80008dc:	4b5f      	ldr	r3, [pc, #380]	; (8000a5c <EXTI+0x2b8>)
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	4a5e      	ldr	r2, [pc, #376]	; (8000a5c <EXTI+0x2b8>)
 80008e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80008e6:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<8);}
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4a5d      	ldr	r2, [pc, #372]	; (8000a60 <EXTI+0x2bc>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d106      	bne.n	80008fe <EXTI+0x15a>
 80008f0:	4b5a      	ldr	r3, [pc, #360]	; (8000a5c <EXTI+0x2b8>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	4a59      	ldr	r2, [pc, #356]	; (8000a5c <EXTI+0x2b8>)
 80008f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80008fa:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}

			break;
 80008fc:	e2cf      	b.n	8000e9e <EXTI+0x6fa>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	4a58      	ldr	r2, [pc, #352]	; (8000a64 <EXTI+0x2c0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d106      	bne.n	8000914 <EXTI+0x170>
 8000906:	4b55      	ldr	r3, [pc, #340]	; (8000a5c <EXTI+0x2b8>)
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	4a54      	ldr	r2, [pc, #336]	; (8000a5c <EXTI+0x2b8>)
 800090c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000910:	6093      	str	r3, [r2, #8]
			break;
 8000912:	e2c4      	b.n	8000e9e <EXTI+0x6fa>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4a54      	ldr	r2, [pc, #336]	; (8000a68 <EXTI+0x2c4>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d106      	bne.n	800092a <EXTI+0x186>
 800091c:	4b4f      	ldr	r3, [pc, #316]	; (8000a5c <EXTI+0x2b8>)
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	4a4e      	ldr	r2, [pc, #312]	; (8000a5c <EXTI+0x2b8>)
 8000922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000926:	6093      	str	r3, [r2, #8]
			break;
 8000928:	e2b9      	b.n	8000e9e <EXTI+0x6fa>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4a4f      	ldr	r2, [pc, #316]	; (8000a6c <EXTI+0x2c8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	f040 82b5 	bne.w	8000e9e <EXTI+0x6fa>
 8000934:	4b49      	ldr	r3, [pc, #292]	; (8000a5c <EXTI+0x2b8>)
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	4a48      	ldr	r2, [pc, #288]	; (8000a5c <EXTI+0x2b8>)
 800093a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800093e:	6093      	str	r3, [r2, #8]
			break;
 8000940:	e2ad      	b.n	8000e9e <EXTI+0x6fa>
		case pin3:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<12);
 8000942:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <EXTI+0x2b8>)
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	4a45      	ldr	r2, [pc, #276]	; (8000a5c <EXTI+0x2b8>)
 8000948:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800094c:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<12);}
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4a43      	ldr	r2, [pc, #268]	; (8000a60 <EXTI+0x2bc>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d106      	bne.n	8000964 <EXTI+0x1c0>
 8000956:	4b41      	ldr	r3, [pc, #260]	; (8000a5c <EXTI+0x2b8>)
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	4a40      	ldr	r2, [pc, #256]	; (8000a5c <EXTI+0x2b8>)
 800095c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000960:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}

			break;
 8000962:	e29e      	b.n	8000ea2 <EXTI+0x6fe>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4a3f      	ldr	r2, [pc, #252]	; (8000a64 <EXTI+0x2c0>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d106      	bne.n	800097a <EXTI+0x1d6>
 800096c:	4b3b      	ldr	r3, [pc, #236]	; (8000a5c <EXTI+0x2b8>)
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	4a3a      	ldr	r2, [pc, #232]	; (8000a5c <EXTI+0x2b8>)
 8000972:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000976:	6093      	str	r3, [r2, #8]
			break;
 8000978:	e293      	b.n	8000ea2 <EXTI+0x6fe>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4a3a      	ldr	r2, [pc, #232]	; (8000a68 <EXTI+0x2c4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d106      	bne.n	8000990 <EXTI+0x1ec>
 8000982:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <EXTI+0x2b8>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4a35      	ldr	r2, [pc, #212]	; (8000a5c <EXTI+0x2b8>)
 8000988:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800098c:	6093      	str	r3, [r2, #8]
			break;
 800098e:	e288      	b.n	8000ea2 <EXTI+0x6fe>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4a36      	ldr	r2, [pc, #216]	; (8000a6c <EXTI+0x2c8>)
 8000994:	4293      	cmp	r3, r2
 8000996:	f040 8284 	bne.w	8000ea2 <EXTI+0x6fe>
 800099a:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <EXTI+0x2b8>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	4a2f      	ldr	r2, [pc, #188]	; (8000a5c <EXTI+0x2b8>)
 80009a0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80009a4:	6093      	str	r3, [r2, #8]
			break;
 80009a6:	e27c      	b.n	8000ea2 <EXTI+0x6fe>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin4:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<0);
 80009a8:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <EXTI+0x2b8>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	4a2b      	ldr	r2, [pc, #172]	; (8000a5c <EXTI+0x2b8>)
 80009ae:	f023 030f 	bic.w	r3, r3, #15
 80009b2:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<0);}
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <EXTI+0x2bc>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d106      	bne.n	80009ca <EXTI+0x226>
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <EXTI+0x2b8>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	4a26      	ldr	r2, [pc, #152]	; (8000a5c <EXTI+0x2b8>)
 80009c2:	f023 030f 	bic.w	r3, r3, #15
 80009c6:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}

			break;
 80009c8:	e26d      	b.n	8000ea6 <EXTI+0x702>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4a25      	ldr	r2, [pc, #148]	; (8000a64 <EXTI+0x2c0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d106      	bne.n	80009e0 <EXTI+0x23c>
 80009d2:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <EXTI+0x2b8>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <EXTI+0x2b8>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	60d3      	str	r3, [r2, #12]
			break;
 80009de:	e262      	b.n	8000ea6 <EXTI+0x702>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4a21      	ldr	r2, [pc, #132]	; (8000a68 <EXTI+0x2c4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d106      	bne.n	80009f6 <EXTI+0x252>
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <EXTI+0x2b8>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <EXTI+0x2b8>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	60d3      	str	r3, [r2, #12]
			break;
 80009f4:	e257      	b.n	8000ea6 <EXTI+0x702>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <EXTI+0x2c8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	f040 8253 	bne.w	8000ea6 <EXTI+0x702>
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <EXTI+0x2b8>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <EXTI+0x2b8>)
 8000a06:	f043 0303 	orr.w	r3, r3, #3
 8000a0a:	60d3      	str	r3, [r2, #12]
			break;
 8000a0c:	e24b      	b.n	8000ea6 <EXTI+0x702>
		case pin5:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<4);
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <EXTI+0x2b8>)
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <EXTI+0x2b8>)
 8000a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a18:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<4);}
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <EXTI+0x2bc>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d106      	bne.n	8000a30 <EXTI+0x28c>
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <EXTI+0x2b8>)
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <EXTI+0x2b8>)
 8000a28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a2c:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}

			break;
 8000a2e:	e23c      	b.n	8000eaa <EXTI+0x706>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <EXTI+0x2c0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d106      	bne.n	8000a46 <EXTI+0x2a2>
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <EXTI+0x2b8>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <EXTI+0x2b8>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	60d3      	str	r3, [r2, #12]
			break;
 8000a44:	e231      	b.n	8000eaa <EXTI+0x706>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <EXTI+0x2c4>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d110      	bne.n	8000a70 <EXTI+0x2cc>
 8000a4e:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <EXTI+0x2b8>)
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	4a02      	ldr	r2, [pc, #8]	; (8000a5c <EXTI+0x2b8>)
 8000a54:	f043 0320 	orr.w	r3, r3, #32
 8000a58:	60d3      	str	r3, [r2, #12]
			break;
 8000a5a:	e226      	b.n	8000eaa <EXTI+0x706>
 8000a5c:	40010000 	.word	0x40010000
 8000a60:	40010800 	.word	0x40010800
 8000a64:	40010c00 	.word	0x40010c00
 8000a68:	40011000 	.word	0x40011000
 8000a6c:	40011400 	.word	0x40011400
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4a93      	ldr	r2, [pc, #588]	; (8000cc0 <EXTI+0x51c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	f040 8218 	bne.w	8000eaa <EXTI+0x706>
 8000a7a:	4b92      	ldr	r3, [pc, #584]	; (8000cc4 <EXTI+0x520>)
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	4a91      	ldr	r2, [pc, #580]	; (8000cc4 <EXTI+0x520>)
 8000a80:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000a84:	60d3      	str	r3, [r2, #12]
			break;
 8000a86:	e210      	b.n	8000eaa <EXTI+0x706>
		case pin6:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<8);
 8000a88:	4b8e      	ldr	r3, [pc, #568]	; (8000cc4 <EXTI+0x520>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	4a8d      	ldr	r2, [pc, #564]	; (8000cc4 <EXTI+0x520>)
 8000a8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a92:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<8);}
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4a8c      	ldr	r2, [pc, #560]	; (8000cc8 <EXTI+0x524>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d106      	bne.n	8000aaa <EXTI+0x306>
 8000a9c:	4b89      	ldr	r3, [pc, #548]	; (8000cc4 <EXTI+0x520>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4a88      	ldr	r2, [pc, #544]	; (8000cc4 <EXTI+0x520>)
 8000aa2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000aa6:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}

			break;
 8000aa8:	e201      	b.n	8000eae <EXTI+0x70a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4a87      	ldr	r2, [pc, #540]	; (8000ccc <EXTI+0x528>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d106      	bne.n	8000ac0 <EXTI+0x31c>
 8000ab2:	4b84      	ldr	r3, [pc, #528]	; (8000cc4 <EXTI+0x520>)
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	4a83      	ldr	r2, [pc, #524]	; (8000cc4 <EXTI+0x520>)
 8000ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abc:	60d3      	str	r3, [r2, #12]
			break;
 8000abe:	e1f6      	b.n	8000eae <EXTI+0x70a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4a83      	ldr	r2, [pc, #524]	; (8000cd0 <EXTI+0x52c>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d106      	bne.n	8000ad6 <EXTI+0x332>
 8000ac8:	4b7e      	ldr	r3, [pc, #504]	; (8000cc4 <EXTI+0x520>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	4a7d      	ldr	r2, [pc, #500]	; (8000cc4 <EXTI+0x520>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	60d3      	str	r3, [r2, #12]
			break;
 8000ad4:	e1eb      	b.n	8000eae <EXTI+0x70a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4a79      	ldr	r2, [pc, #484]	; (8000cc0 <EXTI+0x51c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	f040 81e7 	bne.w	8000eae <EXTI+0x70a>
 8000ae0:	4b78      	ldr	r3, [pc, #480]	; (8000cc4 <EXTI+0x520>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	4a77      	ldr	r2, [pc, #476]	; (8000cc4 <EXTI+0x520>)
 8000ae6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000aea:	60d3      	str	r3, [r2, #12]
			break;
 8000aec:	e1df      	b.n	8000eae <EXTI+0x70a>
		case pin7:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<12);
 8000aee:	4b75      	ldr	r3, [pc, #468]	; (8000cc4 <EXTI+0x520>)
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	4a74      	ldr	r2, [pc, #464]	; (8000cc4 <EXTI+0x520>)
 8000af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000af8:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<12);}
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4a72      	ldr	r2, [pc, #456]	; (8000cc8 <EXTI+0x524>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d106      	bne.n	8000b10 <EXTI+0x36c>
 8000b02:	4b70      	ldr	r3, [pc, #448]	; (8000cc4 <EXTI+0x520>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	4a6f      	ldr	r2, [pc, #444]	; (8000cc4 <EXTI+0x520>)
 8000b08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000b0c:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}

			break;
 8000b0e:	e1d0      	b.n	8000eb2 <EXTI+0x70e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4a6e      	ldr	r2, [pc, #440]	; (8000ccc <EXTI+0x528>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d106      	bne.n	8000b26 <EXTI+0x382>
 8000b18:	4b6a      	ldr	r3, [pc, #424]	; (8000cc4 <EXTI+0x520>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	4a69      	ldr	r2, [pc, #420]	; (8000cc4 <EXTI+0x520>)
 8000b1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b22:	60d3      	str	r3, [r2, #12]
			break;
 8000b24:	e1c5      	b.n	8000eb2 <EXTI+0x70e>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4a69      	ldr	r2, [pc, #420]	; (8000cd0 <EXTI+0x52c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d106      	bne.n	8000b3c <EXTI+0x398>
 8000b2e:	4b65      	ldr	r3, [pc, #404]	; (8000cc4 <EXTI+0x520>)
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	4a64      	ldr	r2, [pc, #400]	; (8000cc4 <EXTI+0x520>)
 8000b34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b38:	60d3      	str	r3, [r2, #12]
			break;
 8000b3a:	e1ba      	b.n	8000eb2 <EXTI+0x70e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4a60      	ldr	r2, [pc, #384]	; (8000cc0 <EXTI+0x51c>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	f040 81b6 	bne.w	8000eb2 <EXTI+0x70e>
 8000b46:	4b5f      	ldr	r3, [pc, #380]	; (8000cc4 <EXTI+0x520>)
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	4a5e      	ldr	r2, [pc, #376]	; (8000cc4 <EXTI+0x520>)
 8000b4c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000b50:	60d3      	str	r3, [r2, #12]
			break;
 8000b52:	e1ae      	b.n	8000eb2 <EXTI+0x70e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin8:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<0);
 8000b54:	4b5b      	ldr	r3, [pc, #364]	; (8000cc4 <EXTI+0x520>)
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	4a5a      	ldr	r2, [pc, #360]	; (8000cc4 <EXTI+0x520>)
 8000b5a:	f023 030f 	bic.w	r3, r3, #15
 8000b5e:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<0);}
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4a59      	ldr	r2, [pc, #356]	; (8000cc8 <EXTI+0x524>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d106      	bne.n	8000b76 <EXTI+0x3d2>
 8000b68:	4b56      	ldr	r3, [pc, #344]	; (8000cc4 <EXTI+0x520>)
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	4a55      	ldr	r2, [pc, #340]	; (8000cc4 <EXTI+0x520>)
 8000b6e:	f023 030f 	bic.w	r3, r3, #15
 8000b72:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}

			break;
 8000b74:	e19f      	b.n	8000eb6 <EXTI+0x712>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4a54      	ldr	r2, [pc, #336]	; (8000ccc <EXTI+0x528>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d106      	bne.n	8000b8c <EXTI+0x3e8>
 8000b7e:	4b51      	ldr	r3, [pc, #324]	; (8000cc4 <EXTI+0x520>)
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	4a50      	ldr	r2, [pc, #320]	; (8000cc4 <EXTI+0x520>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6113      	str	r3, [r2, #16]
			break;
 8000b8a:	e194      	b.n	8000eb6 <EXTI+0x712>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4a50      	ldr	r2, [pc, #320]	; (8000cd0 <EXTI+0x52c>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d106      	bne.n	8000ba2 <EXTI+0x3fe>
 8000b94:	4b4b      	ldr	r3, [pc, #300]	; (8000cc4 <EXTI+0x520>)
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	4a4a      	ldr	r2, [pc, #296]	; (8000cc4 <EXTI+0x520>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	6113      	str	r3, [r2, #16]
			break;
 8000ba0:	e189      	b.n	8000eb6 <EXTI+0x712>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4a46      	ldr	r2, [pc, #280]	; (8000cc0 <EXTI+0x51c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	f040 8185 	bne.w	8000eb6 <EXTI+0x712>
 8000bac:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <EXTI+0x520>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a44      	ldr	r2, [pc, #272]	; (8000cc4 <EXTI+0x520>)
 8000bb2:	f043 0303 	orr.w	r3, r3, #3
 8000bb6:	6113      	str	r3, [r2, #16]
			break;
 8000bb8:	e17d      	b.n	8000eb6 <EXTI+0x712>
		case pin9:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<4);
 8000bba:	4b42      	ldr	r3, [pc, #264]	; (8000cc4 <EXTI+0x520>)
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	4a41      	ldr	r2, [pc, #260]	; (8000cc4 <EXTI+0x520>)
 8000bc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bc4:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<4);}
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4a3f      	ldr	r2, [pc, #252]	; (8000cc8 <EXTI+0x524>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d106      	bne.n	8000bdc <EXTI+0x438>
 8000bce:	4b3d      	ldr	r3, [pc, #244]	; (8000cc4 <EXTI+0x520>)
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	4a3c      	ldr	r2, [pc, #240]	; (8000cc4 <EXTI+0x520>)
 8000bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bd8:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}

			break;
 8000bda:	e16e      	b.n	8000eba <EXTI+0x716>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4a3b      	ldr	r2, [pc, #236]	; (8000ccc <EXTI+0x528>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d106      	bne.n	8000bf2 <EXTI+0x44e>
 8000be4:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <EXTI+0x520>)
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	4a36      	ldr	r2, [pc, #216]	; (8000cc4 <EXTI+0x520>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6113      	str	r3, [r2, #16]
			break;
 8000bf0:	e163      	b.n	8000eba <EXTI+0x716>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4a36      	ldr	r2, [pc, #216]	; (8000cd0 <EXTI+0x52c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d106      	bne.n	8000c08 <EXTI+0x464>
 8000bfa:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <EXTI+0x520>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <EXTI+0x520>)
 8000c00:	f043 0320 	orr.w	r3, r3, #32
 8000c04:	6113      	str	r3, [r2, #16]
			break;
 8000c06:	e158      	b.n	8000eba <EXTI+0x716>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4a2d      	ldr	r2, [pc, #180]	; (8000cc0 <EXTI+0x51c>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	f040 8154 	bne.w	8000eba <EXTI+0x716>
 8000c12:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <EXTI+0x520>)
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	4a2b      	ldr	r2, [pc, #172]	; (8000cc4 <EXTI+0x520>)
 8000c18:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000c1c:	6113      	str	r3, [r2, #16]
			break;
 8000c1e:	e14c      	b.n	8000eba <EXTI+0x716>
		case pin10:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<8);
 8000c20:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <EXTI+0x520>)
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	4a27      	ldr	r2, [pc, #156]	; (8000cc4 <EXTI+0x520>)
 8000c26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c2a:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<8);}
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4a26      	ldr	r2, [pc, #152]	; (8000cc8 <EXTI+0x524>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d106      	bne.n	8000c42 <EXTI+0x49e>
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <EXTI+0x520>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <EXTI+0x520>)
 8000c3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c3e:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}

			break;
 8000c40:	e13d      	b.n	8000ebe <EXTI+0x71a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <EXTI+0x528>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d106      	bne.n	8000c58 <EXTI+0x4b4>
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <EXTI+0x520>)
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <EXTI+0x520>)
 8000c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c54:	6113      	str	r3, [r2, #16]
			break;
 8000c56:	e132      	b.n	8000ebe <EXTI+0x71a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <EXTI+0x52c>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d106      	bne.n	8000c6e <EXTI+0x4ca>
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <EXTI+0x520>)
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <EXTI+0x520>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6113      	str	r3, [r2, #16]
			break;
 8000c6c:	e127      	b.n	8000ebe <EXTI+0x71a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <EXTI+0x51c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	f040 8123 	bne.w	8000ebe <EXTI+0x71a>
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <EXTI+0x520>)
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <EXTI+0x520>)
 8000c7e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000c82:	6113      	str	r3, [r2, #16]
			break;
 8000c84:	e11b      	b.n	8000ebe <EXTI+0x71a>
		case pin11:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<12);
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <EXTI+0x520>)
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <EXTI+0x520>)
 8000c8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000c90:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<12);}
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <EXTI+0x524>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d106      	bne.n	8000ca8 <EXTI+0x504>
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <EXTI+0x520>)
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <EXTI+0x520>)
 8000ca0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000ca4:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}

			break;
 8000ca6:	e10c      	b.n	8000ec2 <EXTI+0x71e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <EXTI+0x528>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d111      	bne.n	8000cd4 <EXTI+0x530>
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <EXTI+0x520>)
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <EXTI+0x520>)
 8000cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cba:	6113      	str	r3, [r2, #16]
			break;
 8000cbc:	e101      	b.n	8000ec2 <EXTI+0x71e>
 8000cbe:	bf00      	nop
 8000cc0:	40011400 	.word	0x40011400
 8000cc4:	40010000 	.word	0x40010000
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	40011000 	.word	0x40011000
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4a98      	ldr	r2, [pc, #608]	; (8000f38 <EXTI+0x794>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d106      	bne.n	8000cea <EXTI+0x546>
 8000cdc:	4b97      	ldr	r3, [pc, #604]	; (8000f3c <EXTI+0x798>)
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	4a96      	ldr	r2, [pc, #600]	; (8000f3c <EXTI+0x798>)
 8000ce2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ce6:	6113      	str	r3, [r2, #16]
			break;
 8000ce8:	e0eb      	b.n	8000ec2 <EXTI+0x71e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4a94      	ldr	r2, [pc, #592]	; (8000f40 <EXTI+0x79c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	f040 80e7 	bne.w	8000ec2 <EXTI+0x71e>
 8000cf4:	4b91      	ldr	r3, [pc, #580]	; (8000f3c <EXTI+0x798>)
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	4a90      	ldr	r2, [pc, #576]	; (8000f3c <EXTI+0x798>)
 8000cfa:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000cfe:	6113      	str	r3, [r2, #16]
			break;
 8000d00:	e0df      	b.n	8000ec2 <EXTI+0x71e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin12:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<0);
 8000d02:	4b8e      	ldr	r3, [pc, #568]	; (8000f3c <EXTI+0x798>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a8d      	ldr	r2, [pc, #564]	; (8000f3c <EXTI+0x798>)
 8000d08:	f023 030f 	bic.w	r3, r3, #15
 8000d0c:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<0);}
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4a8c      	ldr	r2, [pc, #560]	; (8000f44 <EXTI+0x7a0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d106      	bne.n	8000d24 <EXTI+0x580>
 8000d16:	4b89      	ldr	r3, [pc, #548]	; (8000f3c <EXTI+0x798>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4a88      	ldr	r2, [pc, #544]	; (8000f3c <EXTI+0x798>)
 8000d1c:	f023 030f 	bic.w	r3, r3, #15
 8000d20:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}

			break;
 8000d22:	e0d0      	b.n	8000ec6 <EXTI+0x722>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4a88      	ldr	r2, [pc, #544]	; (8000f48 <EXTI+0x7a4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d106      	bne.n	8000d3a <EXTI+0x596>
 8000d2c:	4b83      	ldr	r3, [pc, #524]	; (8000f3c <EXTI+0x798>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	4a82      	ldr	r2, [pc, #520]	; (8000f3c <EXTI+0x798>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6153      	str	r3, [r2, #20]
			break;
 8000d38:	e0c5      	b.n	8000ec6 <EXTI+0x722>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4a7e      	ldr	r2, [pc, #504]	; (8000f38 <EXTI+0x794>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d106      	bne.n	8000d50 <EXTI+0x5ac>
 8000d42:	4b7e      	ldr	r3, [pc, #504]	; (8000f3c <EXTI+0x798>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a7d      	ldr	r2, [pc, #500]	; (8000f3c <EXTI+0x798>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6153      	str	r3, [r2, #20]
			break;
 8000d4e:	e0ba      	b.n	8000ec6 <EXTI+0x722>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4a7b      	ldr	r2, [pc, #492]	; (8000f40 <EXTI+0x79c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	f040 80b6 	bne.w	8000ec6 <EXTI+0x722>
 8000d5a:	4b78      	ldr	r3, [pc, #480]	; (8000f3c <EXTI+0x798>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a77      	ldr	r2, [pc, #476]	; (8000f3c <EXTI+0x798>)
 8000d60:	f043 0303 	orr.w	r3, r3, #3
 8000d64:	6153      	str	r3, [r2, #20]
			break;
 8000d66:	e0ae      	b.n	8000ec6 <EXTI+0x722>
		case pin13:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<4);
 8000d68:	4b74      	ldr	r3, [pc, #464]	; (8000f3c <EXTI+0x798>)
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	4a73      	ldr	r2, [pc, #460]	; (8000f3c <EXTI+0x798>)
 8000d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d72:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<4);}
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4a73      	ldr	r2, [pc, #460]	; (8000f44 <EXTI+0x7a0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d106      	bne.n	8000d8a <EXTI+0x5e6>
 8000d7c:	4b6f      	ldr	r3, [pc, #444]	; (8000f3c <EXTI+0x798>)
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	4a6e      	ldr	r2, [pc, #440]	; (8000f3c <EXTI+0x798>)
 8000d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d86:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}

			break;
 8000d88:	e09f      	b.n	8000eca <EXTI+0x726>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4a6e      	ldr	r2, [pc, #440]	; (8000f48 <EXTI+0x7a4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d106      	bne.n	8000da0 <EXTI+0x5fc>
 8000d92:	4b6a      	ldr	r3, [pc, #424]	; (8000f3c <EXTI+0x798>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	4a69      	ldr	r2, [pc, #420]	; (8000f3c <EXTI+0x798>)
 8000d98:	f043 0310 	orr.w	r3, r3, #16
 8000d9c:	6153      	str	r3, [r2, #20]
			break;
 8000d9e:	e094      	b.n	8000eca <EXTI+0x726>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4a65      	ldr	r2, [pc, #404]	; (8000f38 <EXTI+0x794>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d106      	bne.n	8000db6 <EXTI+0x612>
 8000da8:	4b64      	ldr	r3, [pc, #400]	; (8000f3c <EXTI+0x798>)
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	4a63      	ldr	r2, [pc, #396]	; (8000f3c <EXTI+0x798>)
 8000dae:	f043 0320 	orr.w	r3, r3, #32
 8000db2:	6153      	str	r3, [r2, #20]
			break;
 8000db4:	e089      	b.n	8000eca <EXTI+0x726>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4a61      	ldr	r2, [pc, #388]	; (8000f40 <EXTI+0x79c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	f040 8085 	bne.w	8000eca <EXTI+0x726>
 8000dc0:	4b5e      	ldr	r3, [pc, #376]	; (8000f3c <EXTI+0x798>)
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	4a5d      	ldr	r2, [pc, #372]	; (8000f3c <EXTI+0x798>)
 8000dc6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000dca:	6153      	str	r3, [r2, #20]
			break;
 8000dcc:	e07d      	b.n	8000eca <EXTI+0x726>
		case pin14:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<8);
 8000dce:	4b5b      	ldr	r3, [pc, #364]	; (8000f3c <EXTI+0x798>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4a5a      	ldr	r2, [pc, #360]	; (8000f3c <EXTI+0x798>)
 8000dd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000dd8:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<8);}
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4a59      	ldr	r2, [pc, #356]	; (8000f44 <EXTI+0x7a0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d106      	bne.n	8000df0 <EXTI+0x64c>
 8000de2:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <EXTI+0x798>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a55      	ldr	r2, [pc, #340]	; (8000f3c <EXTI+0x798>)
 8000de8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000dec:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}

			break;
 8000dee:	e06e      	b.n	8000ece <EXTI+0x72a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4a55      	ldr	r2, [pc, #340]	; (8000f48 <EXTI+0x7a4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d106      	bne.n	8000e06 <EXTI+0x662>
 8000df8:	4b50      	ldr	r3, [pc, #320]	; (8000f3c <EXTI+0x798>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	4a4f      	ldr	r2, [pc, #316]	; (8000f3c <EXTI+0x798>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6153      	str	r3, [r2, #20]
			break;
 8000e04:	e063      	b.n	8000ece <EXTI+0x72a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4a4b      	ldr	r2, [pc, #300]	; (8000f38 <EXTI+0x794>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d106      	bne.n	8000e1c <EXTI+0x678>
 8000e0e:	4b4b      	ldr	r3, [pc, #300]	; (8000f3c <EXTI+0x798>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	4a4a      	ldr	r2, [pc, #296]	; (8000f3c <EXTI+0x798>)
 8000e14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e18:	6153      	str	r3, [r2, #20]
			break;
 8000e1a:	e058      	b.n	8000ece <EXTI+0x72a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4a48      	ldr	r2, [pc, #288]	; (8000f40 <EXTI+0x79c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d154      	bne.n	8000ece <EXTI+0x72a>
 8000e24:	4b45      	ldr	r3, [pc, #276]	; (8000f3c <EXTI+0x798>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	4a44      	ldr	r2, [pc, #272]	; (8000f3c <EXTI+0x798>)
 8000e2a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e2e:	6153      	str	r3, [r2, #20]
			break;
 8000e30:	e04d      	b.n	8000ece <EXTI+0x72a>
		case pin15:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<12);
 8000e32:	4b42      	ldr	r3, [pc, #264]	; (8000f3c <EXTI+0x798>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a41      	ldr	r2, [pc, #260]	; (8000f3c <EXTI+0x798>)
 8000e38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000e3c:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<12);}
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4a40      	ldr	r2, [pc, #256]	; (8000f44 <EXTI+0x7a0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d106      	bne.n	8000e54 <EXTI+0x6b0>
 8000e46:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <EXTI+0x798>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	4a3c      	ldr	r2, [pc, #240]	; (8000f3c <EXTI+0x798>)
 8000e4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000e50:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}

			break;
 8000e52:	e03e      	b.n	8000ed2 <EXTI+0x72e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4a3c      	ldr	r2, [pc, #240]	; (8000f48 <EXTI+0x7a4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d106      	bne.n	8000e6a <EXTI+0x6c6>
 8000e5c:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <EXTI+0x798>)
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	4a36      	ldr	r2, [pc, #216]	; (8000f3c <EXTI+0x798>)
 8000e62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e66:	6153      	str	r3, [r2, #20]
			break;
 8000e68:	e033      	b.n	8000ed2 <EXTI+0x72e>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4a32      	ldr	r2, [pc, #200]	; (8000f38 <EXTI+0x794>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d106      	bne.n	8000e80 <EXTI+0x6dc>
 8000e72:	4b32      	ldr	r3, [pc, #200]	; (8000f3c <EXTI+0x798>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <EXTI+0x798>)
 8000e78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e7c:	6153      	str	r3, [r2, #20]
			break;
 8000e7e:	e028      	b.n	8000ed2 <EXTI+0x72e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4a2f      	ldr	r2, [pc, #188]	; (8000f40 <EXTI+0x79c>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d124      	bne.n	8000ed2 <EXTI+0x72e>
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <EXTI+0x798>)
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	4a2b      	ldr	r2, [pc, #172]	; (8000f3c <EXTI+0x798>)
 8000e8e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000e92:	6153      	str	r3, [r2, #20]
			break;
 8000e94:	e01d      	b.n	8000ed2 <EXTI+0x72e>
			break;
 8000e96:	bf00      	nop
 8000e98:	e01c      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000e9a:	bf00      	nop
 8000e9c:	e01a      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000e9e:	bf00      	nop
 8000ea0:	e018      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000ea2:	bf00      	nop
 8000ea4:	e016      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000ea6:	bf00      	nop
 8000ea8:	e014      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000eaa:	bf00      	nop
 8000eac:	e012      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000eae:	bf00      	nop
 8000eb0:	e010      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000eb2:	bf00      	nop
 8000eb4:	e00e      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000eb6:	bf00      	nop
 8000eb8:	e00c      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000eba:	bf00      	nop
 8000ebc:	e00a      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000ebe:	bf00      	nop
 8000ec0:	e008      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000ec2:	bf00      	nop
 8000ec4:	e006      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000ec6:	bf00      	nop
 8000ec8:	e004      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000eca:	bf00      	nop
 8000ecc:	e002      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000ece:	bf00      	nop
 8000ed0:	e000      	b.n	8000ed4 <EXTI+0x730>
			break;
 8000ed2:	bf00      	nop
		}
	//================================================
	//3- Update Rising or Falling Register
	EXIT->EXTI_RTSR &=~(1<<pin);
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <EXTI+0x7a8>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	897a      	ldrh	r2, [r7, #10]
 8000eda:	2101      	movs	r1, #1
 8000edc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee0:	43d2      	mvns	r2, r2
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <EXTI+0x7a8>)
 8000ee6:	400b      	ands	r3, r1
 8000ee8:	6093      	str	r3, [r2, #8]
	EXIT->EXTI_FTSR &=~(1<<pin);
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <EXTI+0x7a8>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	897a      	ldrh	r2, [r7, #10]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef6:	43d2      	mvns	r2, r2
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <EXTI+0x7a8>)
 8000efc:	400b      	ands	r3, r1
 8000efe:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 8000f00:	893b      	ldrh	r3, [r7, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10a      	bne.n	8000f1c <EXTI+0x778>
		EXIT->EXTI_RTSR |= (1<<pin);
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <EXTI+0x7a8>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	897a      	ldrh	r2, [r7, #10]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	4611      	mov	r1, r2
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <EXTI+0x7a8>)
 8000f16:	430b      	orrs	r3, r1
 8000f18:	6093      	str	r3, [r2, #8]
 8000f1a:	e02d      	b.n	8000f78 <EXTI+0x7d4>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 8000f1c:	893b      	ldrh	r3, [r7, #8]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d116      	bne.n	8000f50 <EXTI+0x7ac>
		EXIT->EXTI_FTSR |= (1<<pin);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <EXTI+0x7a8>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	897a      	ldrh	r2, [r7, #10]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <EXTI+0x7a8>)
 8000f32:	430b      	orrs	r3, r1
 8000f34:	60d3      	str	r3, [r2, #12]
 8000f36:	e01f      	b.n	8000f78 <EXTI+0x7d4>
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	40011400 	.word	0x40011400
 8000f44:	40010800 	.word	0x40010800
 8000f48:	40010c00 	.word	0x40010c00
 8000f4c:	40010400 	.word	0x40010400
	}
	else{
		EXIT->EXTI_RTSR |= (1<<pin);
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <EXTI+0x804>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	897a      	ldrh	r2, [r7, #10]
 8000f56:	2101      	movs	r1, #1
 8000f58:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <EXTI+0x804>)
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6093      	str	r3, [r2, #8]
		EXIT->EXTI_FTSR |= (1<<pin);
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <EXTI+0x804>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	897a      	ldrh	r2, [r7, #10]
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f70:	4611      	mov	r1, r2
 8000f72:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <EXTI+0x804>)
 8000f74:	430b      	orrs	r3, r1
 8000f76:	60d3      	str	r3, [r2, #12]
	}
	//4- Update IRQ Handling callback
	GP_IRQ_Callback[pin] =function_addres;
 8000f78:	897b      	ldrh	r3, [r7, #10]
 8000f7a:	490c      	ldr	r1, [pc, #48]	; (8000fac <EXTI+0x808>)
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	EXIT->EXTI_IMR |=(1<<pin);
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <EXTI+0x804>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	897a      	ldrh	r2, [r7, #10]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <EXTI+0x804>)
 8000f92:	430b      	orrs	r3, r1
 8000f94:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 8000f96:	897b      	ldrh	r3, [r7, #10]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fb9d 	bl	80006d8 <Enable_NVIC>
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40010400 	.word	0x40010400
 8000fac:	200000a8 	.word	0x200000a8

08000fb0 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <EXTI0_IRQHandler+0x1c>)
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <EXTI0_IRQHandler+0x1c>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <EXTI0_IRQHandler+0x20>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4798      	blx	r3
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40010400 	.word	0x40010400
 8000fd0:	200000a8 	.word	0x200000a8

08000fd4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <EXTI1_IRQHandler+0x1c>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <EXTI1_IRQHandler+0x1c>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <EXTI1_IRQHandler+0x20>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	4798      	blx	r3

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40010400 	.word	0x40010400
 8000ff4:	200000a8 	.word	0x200000a8

08000ff8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <EXTI2_IRQHandler+0x1c>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <EXTI2_IRQHandler+0x1c>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <EXTI2_IRQHandler+0x20>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4798      	blx	r3
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40010400 	.word	0x40010400
 8001018:	200000a8 	.word	0x200000a8

0800101c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <EXTI3_IRQHandler+0x1c>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <EXTI3_IRQHandler+0x1c>)
 8001026:	f043 0308 	orr.w	r3, r3, #8
 800102a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <EXTI3_IRQHandler+0x20>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	4798      	blx	r3
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40010400 	.word	0x40010400
 800103c:	200000a8 	.word	0x200000a8

08001040 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <EXTI4_IRQHandler+0x1c>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <EXTI4_IRQHandler+0x1c>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <EXTI4_IRQHandler+0x20>)
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	4798      	blx	r3
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40010400 	.word	0x40010400
 8001060:	200000a8 	.word	0x200000a8

08001064 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5]();  }
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	2b00      	cmp	r3, #0
 8001072:	d008      	beq.n	8001086 <EXTI9_5_IRQHandler+0x22>
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	4a22      	ldr	r2, [pc, #136]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 800107a:	f043 0320 	orr.w	r3, r3, #32
 800107e:	6153      	str	r3, [r2, #20]
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <EXTI9_5_IRQHandler+0xa4>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6]();  }
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108e:	2b00      	cmp	r3, #0
 8001090:	d008      	beq.n	80010a4 <EXTI9_5_IRQHandler+0x40>
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 8001098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800109c:	6153      	str	r3, [r2, #20]
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <EXTI9_5_IRQHandler+0xa4>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7]();  }
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d008      	beq.n	80010c2 <EXTI9_5_IRQHandler+0x5e>
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 80010b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ba:	6153      	str	r3, [r2, #20]
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <EXTI9_5_IRQHandler+0xa4>)
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8]();  }
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d008      	beq.n	80010e0 <EXTI9_5_IRQHandler+0x7c>
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 80010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <EXTI9_5_IRQHandler+0xa4>)
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9]();  }
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <EXTI9_5_IRQHandler+0x9a>
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <EXTI9_5_IRQHandler+0xa0>)
 80010f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f6:	6153      	str	r3, [r2, #20]
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <EXTI9_5_IRQHandler+0xa4>)
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	4798      	blx	r3
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40010400 	.word	0x40010400
 8001108:	200000a8 	.word	0x200000a8

0800110c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10]();  }
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <EXTI15_10_IRQHandler+0x22>
 800111c:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	4a29      	ldr	r2, [pc, #164]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 8001122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001126:	6153      	str	r3, [r2, #20]
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <EXTI15_10_IRQHandler+0xc0>)
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11]();  }
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <EXTI15_10_IRQHandler+0x40>
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 8001140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001144:	6153      	str	r3, [r2, #20]
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <EXTI15_10_IRQHandler+0xc0>)
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12]();  }
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d008      	beq.n	800116a <EXTI15_10_IRQHandler+0x5e>
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 800115e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001162:	6153      	str	r3, [r2, #20]
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <EXTI15_10_IRQHandler+0xc0>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13]();  }
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d008      	beq.n	8001188 <EXTI15_10_IRQHandler+0x7c>
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 800117c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <EXTI15_10_IRQHandler+0xc0>)
 8001184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001186:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14]();  }
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d008      	beq.n	80011a6 <EXTI15_10_IRQHandler+0x9a>
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 800119a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119e:	6153      	str	r3, [r2, #20]
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <EXTI15_10_IRQHandler+0xc0>)
 80011a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a4:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15]();  }
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <EXTI15_10_IRQHandler+0xb8>
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <EXTI15_10_IRQHandler+0xbc>)
 80011b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011bc:	6153      	str	r3, [r2, #20]
 80011be:	4b03      	ldr	r3, [pc, #12]	; (80011cc <EXTI15_10_IRQHandler+0xc0>)
 80011c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c2:	4798      	blx	r3

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40010400 	.word	0x40010400
 80011cc:	200000a8 	.word	0x200000a8

080011d0 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
	//slave only todo
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	//slave only todo
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <USART_INIT>:
//===============================================================
void send_string (){

}
//===============================================================
void USART_INIT(USART_typeDef* USARTx,uint32_t mode,uint32_t word_length,uint32_t stop_bits,uint32_t baud_rate,uint32_t parity,uint32_t CLCK){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]

	if(USARTx ==USART1){
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4a55      	ldr	r2, [pc, #340]	; (8001350 <USART_INIT+0x168>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d11f      	bne.n	800123e <USART_INIT+0x56>
		USART1_Clock_Enable();
 80011fe:	4b55      	ldr	r3, [pc, #340]	; (8001354 <USART_INIT+0x16c>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4a54      	ldr	r2, [pc, #336]	; (8001354 <USART_INIT+0x16c>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();
 800120a:	4b52      	ldr	r3, [pc, #328]	; (8001354 <USART_INIT+0x16c>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4a51      	ldr	r2, [pc, #324]	; (8001354 <USART_INIT+0x16c>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6193      	str	r3, [r2, #24]
		NVIC_USART1_interrupt_Enable;
 8001216:	4b50      	ldr	r3, [pc, #320]	; (8001358 <USART_INIT+0x170>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a4f      	ldr	r2, [pc, #316]	; (8001358 <USART_INIT+0x170>)
 800121c:	f043 0320 	orr.w	r3, r3, #32
 8001220:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin9,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8001222:	2209      	movs	r2, #9
 8001224:	2109      	movs	r1, #9
 8001226:	484d      	ldr	r0, [pc, #308]	; (800135c <USART_INIT+0x174>)
 8001228:	f7fe fffd 	bl	8000226 <pinmode>
		//RX
		pinmode(GPIOA, pin10,GPIO_MODE_INTPUT_AF);
 800122c:	2204      	movs	r2, #4
 800122e:	210a      	movs	r1, #10
 8001230:	484a      	ldr	r0, [pc, #296]	; (800135c <USART_INIT+0x174>)
 8001232:	f7fe fff8 	bl	8000226 <pinmode>
		arr[0]=USART1;
 8001236:	4b4a      	ldr	r3, [pc, #296]	; (8001360 <USART_INIT+0x178>)
 8001238:	4a45      	ldr	r2, [pc, #276]	; (8001350 <USART_INIT+0x168>)
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e042      	b.n	80012c4 <USART_INIT+0xdc>
	}
	else if(USARTx ==USART2){
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4a48      	ldr	r2, [pc, #288]	; (8001364 <USART_INIT+0x17c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d11f      	bne.n	8001286 <USART_INIT+0x9e>
		USART2_Clock_Enable();
 8001246:	4b43      	ldr	r3, [pc, #268]	; (8001354 <USART_INIT+0x16c>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a42      	ldr	r2, [pc, #264]	; (8001354 <USART_INIT+0x16c>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();
 8001252:	4b40      	ldr	r3, [pc, #256]	; (8001354 <USART_INIT+0x16c>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	4a3f      	ldr	r2, [pc, #252]	; (8001354 <USART_INIT+0x16c>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6193      	str	r3, [r2, #24]
		NVIC_USART2_interrupt_Enable;
 800125e:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <USART_INIT+0x170>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a3d      	ldr	r2, [pc, #244]	; (8001358 <USART_INIT+0x170>)
 8001264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001268:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin2,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 800126a:	2209      	movs	r2, #9
 800126c:	2102      	movs	r1, #2
 800126e:	483b      	ldr	r0, [pc, #236]	; (800135c <USART_INIT+0x174>)
 8001270:	f7fe ffd9 	bl	8000226 <pinmode>
		//RX
		pinmode(GPIOA, pin3,GPIO_MODE_INTPUT_AF);
 8001274:	2204      	movs	r2, #4
 8001276:	2103      	movs	r1, #3
 8001278:	4838      	ldr	r0, [pc, #224]	; (800135c <USART_INIT+0x174>)
 800127a:	f7fe ffd4 	bl	8000226 <pinmode>
		arr[1]=USART2;
 800127e:	4b38      	ldr	r3, [pc, #224]	; (8001360 <USART_INIT+0x178>)
 8001280:	4a38      	ldr	r2, [pc, #224]	; (8001364 <USART_INIT+0x17c>)
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	e01e      	b.n	80012c4 <USART_INIT+0xdc>
	}
	else{
		USART3_Clock_Enable();
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <USART_INIT+0x16c>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a32      	ldr	r2, [pc, #200]	; (8001354 <USART_INIT+0x16c>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 8001292:	4b30      	ldr	r3, [pc, #192]	; (8001354 <USART_INIT+0x16c>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a2f      	ldr	r2, [pc, #188]	; (8001354 <USART_INIT+0x16c>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6193      	str	r3, [r2, #24]
		NVIC_USART3_interrupt_Enable;
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <USART_INIT+0x170>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a2d      	ldr	r2, [pc, #180]	; (8001358 <USART_INIT+0x170>)
 80012a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a8:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 80012aa:	2209      	movs	r2, #9
 80012ac:	210a      	movs	r1, #10
 80012ae:	482e      	ldr	r0, [pc, #184]	; (8001368 <USART_INIT+0x180>)
 80012b0:	f7fe ffb9 	bl	8000226 <pinmode>
		//RX
		pinmode(GPIOB, pin11,GPIO_MODE_INTPUT_AF);
 80012b4:	2204      	movs	r2, #4
 80012b6:	210b      	movs	r1, #11
 80012b8:	482b      	ldr	r0, [pc, #172]	; (8001368 <USART_INIT+0x180>)
 80012ba:	f7fe ffb4 	bl	8000226 <pinmode>
		arr[2]=USART3;
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <USART_INIT+0x178>)
 80012c0:	4a2a      	ldr	r2, [pc, #168]	; (800136c <USART_INIT+0x184>)
 80012c2:	609a      	str	r2, [r3, #8]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enabled
	USARTx->USART_CR1 |=(1<<13);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	60da      	str	r2, [r3, #12]
	//STEP 2
	//	Bit 12 M: Word length
	//	This bit determines the word length. It is set or cleared by software.
	//	0: 1 Start bit, 8 Data bits, n Stop bit
	//	1: 1 Start bit, 9 Data bits, n Stop bit
	USARTx->USART_CR1 |=word_length;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	60da      	str	r2, [r3, #12]
	//	These bits are used for programming the stop bits.
	//	00: 1 Stop bit
	//	01: 0.5 Stop bit
	//	10: 2 Stop bits
	//	11: 1.5 Stop bit
	USARTx->USART_CR2 |=stop_bits;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	611a      	str	r2, [r3, #16]
	//	2: When TE is set there is a 1 bit-time delay before the transmission starts.
	//	Bit 2 RE: Receiver enable
	//	This bit enables the receiver. It is set and cleared by software.
	//	0: Receiver is disabled
	//	1: Receiver is enabled and begins searching for a start bit
	USARTx->USART_CR1 |=mode;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	60da      	str	r2, [r3, #12]
	//	Bit 9 PS: Parity selection
	//	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	//	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	//	0: Even parity
	//	1: Odd parity
	USARTx->USART_CR1 |=parity;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	431a      	orrs	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	60da      	str	r2, [r3, #12]
	//	Bits 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV
	//	These 12 bits define the mantissa of the USART Divider (USARTDIV)
	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV
	//	These 4 bits define the fraction of the USART Divider (USARTDIV)

	uint16_t DIV_Mantissa =CLCK /(baud_rate*16);
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	82fb      	strh	r3, [r7, #22]
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	4a17      	ldr	r2, [pc, #92]	; (8001370 <USART_INIT+0x188>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	8afa      	ldrh	r2, [r7, #22]
 8001320:	2164      	movs	r1, #100	; 0x64
 8001322:	fb01 f202 	mul.w	r2, r1, r2
 8001326:	1a9b      	subs	r3, r3, r2
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <USART_INIT+0x188>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	82bb      	strh	r3, [r7, #20]
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );
 8001334:	8afb      	ldrh	r3, [r7, #22]
 8001336:	011a      	lsls	r2, r3, #4
 8001338:	8abb      	ldrh	r3, [r7, #20]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	4313      	orrs	r3, r2
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	609a      	str	r2, [r3, #8]


}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40013800 	.word	0x40013800
 8001354:	40021000 	.word	0x40021000
 8001358:	e000e104 	.word	0xe000e104
 800135c:	40010800 	.word	0x40010800
 8001360:	200000e4 	.word	0x200000e4
 8001364:	40004400 	.word	0x40004400
 8001368:	40010c00 	.word	0x40010c00
 800136c:	40004800 	.word	0x40004800
 8001370:	51eb851f 	.word	0x51eb851f

08001374 <USART_SEND>:
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	0b1b      	lsrs	r3, r3, #12
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b01      	cmp	r3, #1
 800138a:	d106      	bne.n	800139a <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 8001398:	e004      	b.n	80013a4 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
	...

080013b0 <USART_SEND_STRING>:
		*data=arr_data_RES[2];
	}

}

void USART_SEND_STRING(USART_typeDef* USARTx,char* data){
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a13      	ldr	r2, [pc, #76]	; (800140c <USART_SEND_STRING+0x5c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d105      	bne.n	80013ce <USART_SEND_STRING+0x1e>
		arr_data[0]=data;
 80013c2:	4a13      	ldr	r2, [pc, #76]	; (8001410 <USART_SEND_STRING+0x60>)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	6013      	str	r3, [r2, #0]
		arr[0]=USART1;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <USART_SEND_STRING+0x64>)
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <USART_SEND_STRING+0x5c>)
 80013cc:	601a      	str	r2, [r3, #0]
	}
	if(USARTx==USART2){
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a11      	ldr	r2, [pc, #68]	; (8001418 <USART_SEND_STRING+0x68>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d105      	bne.n	80013e2 <USART_SEND_STRING+0x32>
		arr_data[1]=data;
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <USART_SEND_STRING+0x60>)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	6053      	str	r3, [r2, #4]
		arr[1]=USART2;
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <USART_SEND_STRING+0x64>)
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <USART_SEND_STRING+0x68>)
 80013e0:	605a      	str	r2, [r3, #4]
	}
	if(USARTx==USART3){
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <USART_SEND_STRING+0x6c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d105      	bne.n	80013f6 <USART_SEND_STRING+0x46>
		arr_data[2]=data;
 80013ea:	4a09      	ldr	r2, [pc, #36]	; (8001410 <USART_SEND_STRING+0x60>)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	6093      	str	r3, [r2, #8]
		arr[2]=USART3;
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <USART_SEND_STRING+0x64>)
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <USART_SEND_STRING+0x6c>)
 80013f4:	609a      	str	r2, [r3, #8]
	}
	//Bit 7 TXEIE: TXE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
	USARTx->USART_CR1 |=Transmit_data_register_empty;//open flage of interrupt
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60da      	str	r2, [r3, #12]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	40013800 	.word	0x40013800
 8001410:	200000f8 	.word	0x200000f8
 8001414:	200000e4 	.word	0x200000e4
 8001418:	40004400 	.word	0x40004400
 800141c:	40004800 	.word	0x40004800

08001420 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8001426:	4b56      	ldr	r3, [pc, #344]	; (8001580 <USART1_IRQHandler+0x160>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	09db      	lsrs	r3, r3, #7
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b01      	cmp	r3, #1
 8001434:	d122      	bne.n	800147c <USART1_IRQHandler+0x5c>
 8001436:	4b52      	ldr	r3, [pc, #328]	; (8001580 <USART1_IRQHandler+0x160>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	09db      	lsrs	r3, r3, #7
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b01      	cmp	r3, #1
 8001444:	d11a      	bne.n	800147c <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 8001446:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <USART1_IRQHandler+0x164>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00d      	beq.n	800146c <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],arr_data[0]);
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <USART1_IRQHandler+0x160>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <USART1_IRQHandler+0x164>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f7ff ff8a 	bl	8001374 <USART_SEND>
			++arr_data[0];
 8001460:	4b48      	ldr	r3, [pc, #288]	; (8001584 <USART1_IRQHandler+0x164>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	4a47      	ldr	r2, [pc, #284]	; (8001584 <USART1_IRQHandler+0x164>)
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e007      	b.n	800147c <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 800146c:	4b44      	ldr	r3, [pc, #272]	; (8001580 <USART1_IRQHandler+0x160>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <USART1_IRQHandler+0x160>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800147a:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 800147c:	4b40      	ldr	r3, [pc, #256]	; (8001580 <USART1_IRQHandler+0x160>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d166      	bne.n	800155a <USART1_IRQHandler+0x13a>
 800148c:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <USART1_IRQHandler+0x160>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b01      	cmp	r3, #1
 800149a:	d15e      	bne.n	800155a <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 800149c:	4b38      	ldr	r3, [pc, #224]	; (8001580 <USART1_IRQHandler+0x160>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	0b1b      	lsrs	r3, r3, #12
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d117      	bne.n	80014dc <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <USART1_IRQHandler+0x160>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	0a9b      	lsrs	r3, r3, #10
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d108      	bne.n	80014ce <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <USART1_IRQHandler+0x160>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <USART1_IRQHandler+0x168>)
 80014ca:	801a      	strh	r2, [r3, #0]
 80014cc:	e020      	b.n	8001510 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <USART1_IRQHandler+0x160>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <USART1_IRQHandler+0x168>)
 80014d8:	801a      	strh	r2, [r3, #0]
 80014da:	e019      	b.n	8001510 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <USART1_IRQHandler+0x160>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	0a9b      	lsrs	r3, r3, #10
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d109      	bne.n	8001500 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <USART1_IRQHandler+0x160>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <USART1_IRQHandler+0x168>)
 80014fc:	801a      	strh	r2, [r3, #0]
 80014fe:	e007      	b.n	8001510 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <USART1_IRQHandler+0x160>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	b29b      	uxth	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <USART1_IRQHandler+0x168>)
 800150e:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <USART1_IRQHandler+0x16c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	e002      	b.n	8001522 <USART1_IRQHandler+0x102>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3301      	adds	r3, #1
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001528:	4293      	cmp	r3, r2
 800152a:	ddf7      	ble.n	800151c <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <USART1_IRQHandler+0x160>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <USART1_IRQHandler+0x160>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0220 	bic.w	r2, r2, #32
 800153a:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <USART1_IRQHandler+0x160>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <USART1_IRQHandler+0x170>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	b29b      	uxth	r3, r3
 8001548:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <USART1_IRQHandler+0x160>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <USART1_IRQHandler+0x160>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0220 	bic.w	r2, r2, #32
 8001558:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <USART1_IRQHandler+0x160>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <USART1_IRQHandler+0x170>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	b29b      	uxth	r3, r3
 8001566:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <USART1_IRQHandler+0x160>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <USART1_IRQHandler+0x160>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0220 	bic.w	r2, r2, #32
 8001576:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200000e4 	.word	0x200000e4
 8001584:	200000f8 	.word	0x200000f8
 8001588:	200000f0 	.word	0x200000f0
 800158c:	20000104 	.word	0x20000104
 8001590:	40013800 	.word	0x40013800

08001594 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800159a:	4b56      	ldr	r3, [pc, #344]	; (80016f4 <USART2_IRQHandler+0x160>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	09db      	lsrs	r3, r3, #7
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d122      	bne.n	80015f0 <USART2_IRQHandler+0x5c>
 80015aa:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <USART2_IRQHandler+0x160>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	09db      	lsrs	r3, r3, #7
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d11a      	bne.n	80015f0 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 80015ba:	4b4f      	ldr	r3, [pc, #316]	; (80016f8 <USART2_IRQHandler+0x164>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00d      	beq.n	80015e0 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],arr_data[1]);
 80015c4:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <USART2_IRQHandler+0x160>)
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <USART2_IRQHandler+0x164>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff fed0 	bl	8001374 <USART_SEND>
			++arr_data[1];
 80015d4:	4b48      	ldr	r3, [pc, #288]	; (80016f8 <USART2_IRQHandler+0x164>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a47      	ldr	r2, [pc, #284]	; (80016f8 <USART2_IRQHandler+0x164>)
 80015dc:	6053      	str	r3, [r2, #4]
 80015de:	e007      	b.n	80015f0 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 80015e0:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <USART2_IRQHandler+0x160>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <USART2_IRQHandler+0x160>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ee:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 80015f0:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <USART2_IRQHandler+0x160>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d166      	bne.n	80016ce <USART2_IRQHandler+0x13a>
 8001600:	4b3c      	ldr	r3, [pc, #240]	; (80016f4 <USART2_IRQHandler+0x160>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b01      	cmp	r3, #1
 800160e:	d15e      	bne.n	80016ce <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 8001610:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <USART2_IRQHandler+0x160>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	0b1b      	lsrs	r3, r3, #12
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d117      	bne.n	8001650 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8001620:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <USART2_IRQHandler+0x160>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	0a9b      	lsrs	r3, r3, #10
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <USART2_IRQHandler+0x160>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	b29b      	uxth	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <USART2_IRQHandler+0x168>)
 800163e:	805a      	strh	r2, [r3, #2]
 8001640:	e020      	b.n	8001684 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <USART2_IRQHandler+0x160>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	b29a      	uxth	r2, r3
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <USART2_IRQHandler+0x168>)
 800164c:	805a      	strh	r2, [r3, #2]
 800164e:	e019      	b.n	8001684 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <USART2_IRQHandler+0x160>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	0a9b      	lsrs	r3, r3, #10
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b01      	cmp	r3, #1
 800165e:	d109      	bne.n	8001674 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <USART2_IRQHandler+0x160>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	b29b      	uxth	r3, r3
 8001668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <USART2_IRQHandler+0x168>)
 8001670:	805a      	strh	r2, [r3, #2]
 8001672:	e007      	b.n	8001684 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <USART2_IRQHandler+0x160>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	b29b      	uxth	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <USART2_IRQHandler+0x168>)
 8001682:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <USART2_IRQHandler+0x16c>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	e002      	b.n	8001696 <USART2_IRQHandler+0x102>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3301      	adds	r3, #1
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800169c:	4293      	cmp	r3, r2
 800169e:	ddf7      	ble.n	8001690 <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <USART2_IRQHandler+0x160>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <USART2_IRQHandler+0x160>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f022 0220 	bic.w	r2, r2, #32
 80016ae:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <USART2_IRQHandler+0x160>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <USART2_IRQHandler+0x170>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <USART2_IRQHandler+0x160>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <USART2_IRQHandler+0x160>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f022 0220 	bic.w	r2, r2, #32
 80016cc:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <USART2_IRQHandler+0x160>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <USART2_IRQHandler+0x170>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <USART2_IRQHandler+0x160>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <USART2_IRQHandler+0x160>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f022 0220 	bic.w	r2, r2, #32
 80016ea:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200000e4 	.word	0x200000e4
 80016f8:	200000f8 	.word	0x200000f8
 80016fc:	200000f0 	.word	0x200000f0
 8001700:	20000104 	.word	0x20000104
 8001704:	40004400 	.word	0x40004400

08001708 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800170e:	4b56      	ldr	r3, [pc, #344]	; (8001868 <USART3_IRQHandler+0x160>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	09db      	lsrs	r3, r3, #7
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b01      	cmp	r3, #1
 800171c:	d122      	bne.n	8001764 <USART3_IRQHandler+0x5c>
 800171e:	4b52      	ldr	r3, [pc, #328]	; (8001868 <USART3_IRQHandler+0x160>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	09db      	lsrs	r3, r3, #7
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b01      	cmp	r3, #1
 800172c:	d11a      	bne.n	8001764 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 800172e:	4b4f      	ldr	r3, [pc, #316]	; (800186c <USART3_IRQHandler+0x164>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00d      	beq.n	8001754 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],arr_data[2]);
 8001738:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <USART3_IRQHandler+0x160>)
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	4b4b      	ldr	r3, [pc, #300]	; (800186c <USART3_IRQHandler+0x164>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f7ff fe16 	bl	8001374 <USART_SEND>
			++arr_data[2];
 8001748:	4b48      	ldr	r3, [pc, #288]	; (800186c <USART3_IRQHandler+0x164>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	3301      	adds	r3, #1
 800174e:	4a47      	ldr	r2, [pc, #284]	; (800186c <USART3_IRQHandler+0x164>)
 8001750:	6093      	str	r3, [r2, #8]
 8001752:	e007      	b.n	8001764 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 8001754:	4b44      	ldr	r3, [pc, #272]	; (8001868 <USART3_IRQHandler+0x160>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	4b43      	ldr	r3, [pc, #268]	; (8001868 <USART3_IRQHandler+0x160>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001762:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 8001764:	4b40      	ldr	r3, [pc, #256]	; (8001868 <USART3_IRQHandler+0x160>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b01      	cmp	r3, #1
 8001772:	d166      	bne.n	8001842 <USART3_IRQHandler+0x13a>
 8001774:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <USART3_IRQHandler+0x160>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b01      	cmp	r3, #1
 8001782:	d15e      	bne.n	8001842 <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 8001784:	4b38      	ldr	r3, [pc, #224]	; (8001868 <USART3_IRQHandler+0x160>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	0b1b      	lsrs	r3, r3, #12
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b01      	cmp	r3, #1
 8001792:	d117      	bne.n	80017c4 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8001794:	4b34      	ldr	r3, [pc, #208]	; (8001868 <USART3_IRQHandler+0x160>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	0a9b      	lsrs	r3, r3, #10
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d108      	bne.n	80017b6 <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 80017a4:	4b30      	ldr	r3, [pc, #192]	; (8001868 <USART3_IRQHandler+0x160>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <USART3_IRQHandler+0x168>)
 80017b2:	809a      	strh	r2, [r3, #4]
 80017b4:	e020      	b.n	80017f8 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 80017b6:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <USART3_IRQHandler+0x160>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <USART3_IRQHandler+0x168>)
 80017c0:	809a      	strh	r2, [r3, #4]
 80017c2:	e019      	b.n	80017f8 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <USART3_IRQHandler+0x160>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	0a9b      	lsrs	r3, r3, #10
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d109      	bne.n	80017e8 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <USART3_IRQHandler+0x160>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <USART3_IRQHandler+0x168>)
 80017e4:	809a      	strh	r2, [r3, #4]
 80017e6:	e007      	b.n	80017f8 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <USART3_IRQHandler+0x160>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <USART3_IRQHandler+0x168>)
 80017f6:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <USART3_IRQHandler+0x16c>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	e002      	b.n	800180a <USART3_IRQHandler+0x102>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3301      	adds	r3, #1
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001810:	4293      	cmp	r3, r2
 8001812:	ddf7      	ble.n	8001804 <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <USART3_IRQHandler+0x160>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <USART3_IRQHandler+0x160>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f022 0220 	bic.w	r2, r2, #32
 8001822:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <USART3_IRQHandler+0x160>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <USART3_IRQHandler+0x170>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	b29b      	uxth	r3, r3
 8001830:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <USART3_IRQHandler+0x160>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <USART3_IRQHandler+0x160>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f022 0220 	bic.w	r2, r2, #32
 8001840:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <USART3_IRQHandler+0x160>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <USART3_IRQHandler+0x170>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	b29b      	uxth	r3, r3
 800184e:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <USART3_IRQHandler+0x160>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <USART3_IRQHandler+0x160>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f022 0220 	bic.w	r2, r2, #32
 800185e:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200000e4 	.word	0x200000e4
 800186c:	200000f8 	.word	0x200000f8
 8001870:	200000f0 	.word	0x200000f0
 8001874:	20000104 	.word	0x20000104
 8001878:	40004800 	.word	0x40004800

0800187c <echo>:
#define clk 8000000

char text [5];
uint32_t X=0,time;
uint8_t flag_ehco=0;
void echo(){
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	if(flag_ehco==0){
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <echo+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d107      	bne.n	8001898 <echo+0x1c>
		TIME_CALCULATION(clk, TIMER_START);
 8001888:	2101      	movs	r1, #1
 800188a:	4813      	ldr	r0, [pc, #76]	; (80018d8 <echo+0x5c>)
 800188c:	f7fe fe60 	bl	8000550 <TIME_CALCULATION>
		flag_ehco=1;
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <echo+0x58>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
		sprintf(text,"%d",((time*170)/10000));
		USART_SEND_STRING(USART1,text);
		flag_ehco=0;
	}

}
 8001896:	e01b      	b.n	80018d0 <echo+0x54>
		time=TIME_CALCULATION(clk, TIMER_STOP);
 8001898:	2100      	movs	r1, #0
 800189a:	480f      	ldr	r0, [pc, #60]	; (80018d8 <echo+0x5c>)
 800189c:	f7fe fe58 	bl	8000550 <TIME_CALCULATION>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <echo+0x60>)
 80018a4:	601a      	str	r2, [r3, #0]
		sprintf(text,"%d",((time*170)/10000));
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <echo+0x60>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	22aa      	movs	r2, #170	; 0xaa
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <echo+0x64>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0b5b      	lsrs	r3, r3, #13
 80018b8:	461a      	mov	r2, r3
 80018ba:	490a      	ldr	r1, [pc, #40]	; (80018e4 <echo+0x68>)
 80018bc:	480a      	ldr	r0, [pc, #40]	; (80018e8 <echo+0x6c>)
 80018be:	f000 f8ef 	bl	8001aa0 <siprintf>
		USART_SEND_STRING(USART1,text);
 80018c2:	4909      	ldr	r1, [pc, #36]	; (80018e8 <echo+0x6c>)
 80018c4:	4809      	ldr	r0, [pc, #36]	; (80018ec <echo+0x70>)
 80018c6:	f7ff fd73 	bl	80013b0 <USART_SEND_STRING>
		flag_ehco=0;
 80018ca:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <echo+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000008c 	.word	0x2000008c
 80018d8:	007a1200 	.word	0x007a1200
 80018dc:	20000124 	.word	0x20000124
 80018e0:	d1b71759 	.word	0xd1b71759
 80018e4:	080022dc 	.word	0x080022dc
 80018e8:	2000011c 	.word	0x2000011c
 80018ec:	40013800 	.word	0x40013800

080018f0 <main>:

int main (){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af04      	add	r7, sp, #16
	GPIOA_Clock_Enable();
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <main+0x80>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <main+0x80>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6193      	str	r3, [r2, #24]
	GPIOB_Clock_Enable();
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <main+0x80>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a1a      	ldr	r2, [pc, #104]	; (8001970 <main+0x80>)
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	6193      	str	r3, [r2, #24]
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,clk);
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <main+0x84>)
 8001910:	9302      	str	r3, [sp, #8]
 8001912:	2300      	movs	r3, #0
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2300      	movs	r3, #0
 800191e:	2200      	movs	r2, #0
 8001920:	210c      	movs	r1, #12
 8001922:	4815      	ldr	r0, [pc, #84]	; (8001978 <main+0x88>)
 8001924:	f7ff fc60 	bl	80011e8 <USART_INIT>
	pinmode(GPIOB, pin11,GPIO_MODE_OUTPUT_push_pull_Speed2);//trigr
 8001928:	2202      	movs	r2, #2
 800192a:	210b      	movs	r1, #11
 800192c:	4813      	ldr	r0, [pc, #76]	; (800197c <main+0x8c>)
 800192e:	f7fe fc7a 	bl	8000226 <pinmode>
	EXTI(GPIOA,pin1,EXTI_Trigger_RisingAndFalling,echo);//echo
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <main+0x90>)
 8001934:	2202      	movs	r2, #2
 8001936:	2101      	movs	r1, #1
 8001938:	4812      	ldr	r0, [pc, #72]	; (8001984 <main+0x94>)
 800193a:	f7fe ff33 	bl	80007a4 <EXTI>
	while(1){
		pinwrite(GPIOB, pin11,HIGH);
 800193e:	2201      	movs	r2, #1
 8001940:	210b      	movs	r1, #11
 8001942:	480e      	ldr	r0, [pc, #56]	; (800197c <main+0x8c>)
 8001944:	f7fe fd2e 	bl	80003a4 <pinwrite>
		delay(10, U_ms, clk);
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <main+0x84>)
 800194a:	2100      	movs	r1, #0
 800194c:	200a      	movs	r0, #10
 800194e:	f7fe fd4d 	bl	80003ec <delay>
		pinwrite(GPIOB, pin11,LOW);
 8001952:	2200      	movs	r2, #0
 8001954:	210b      	movs	r1, #11
 8001956:	4809      	ldr	r0, [pc, #36]	; (800197c <main+0x8c>)
 8001958:	f7fe fd24 	bl	80003a4 <pinwrite>
		USART_SEND_STRING(USART1,"\n");
 800195c:	490a      	ldr	r1, [pc, #40]	; (8001988 <main+0x98>)
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <main+0x88>)
 8001960:	f7ff fd26 	bl	80013b0 <USART_SEND_STRING>
		delay(200,U_ms,clk);
 8001964:	4a03      	ldr	r2, [pc, #12]	; (8001974 <main+0x84>)
 8001966:	2100      	movs	r1, #0
 8001968:	20c8      	movs	r0, #200	; 0xc8
 800196a:	f7fe fd3f 	bl	80003ec <delay>
		pinwrite(GPIOB, pin11,HIGH);
 800196e:	e7e6      	b.n	800193e <main+0x4e>
 8001970:	40021000 	.word	0x40021000
 8001974:	007a1200 	.word	0x007a1200
 8001978:	40013800 	.word	0x40013800
 800197c:	40010c00 	.word	0x40010c00
 8001980:	0800187d 	.word	0x0800187d
 8001984:	40010800 	.word	0x40010800
 8001988:	080022e0 	.word	0x080022e0

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f000 f846 	bl	8001a4c <__errno>
 80019c0:	4602      	mov	r2, r0
 80019c2:	230c      	movs	r3, #12
 80019c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20002800 	.word	0x20002800
 80019ec:	00000400 	.word	0x00000400
 80019f0:	20000090 	.word	0x20000090
 80019f4:	20000130 	.word	0x20000130

080019f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f8:	480d      	ldr	r0, [pc, #52]	; (8001a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a02:	490d      	ldr	r1, [pc, #52]	; (8001a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <LoopForever+0xe>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a18:	4c0a      	ldr	r4, [pc, #40]	; (8001a44 <LoopForever+0x16>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a26:	f000 f817 	bl	8001a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a2a:	f7ff ff61 	bl	80018f0 <main>

08001a2e <LoopForever>:

LoopForever:
    b LoopForever
 8001a2e:	e7fe      	b.n	8001a2e <LoopForever>
  ldr   r0, =_estack
 8001a30:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a3c:	08002320 	.word	0x08002320
  ldr r2, =_sbss
 8001a40:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a44:	2000012c 	.word	0x2000012c

08001a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_2_IRQHandler>
	...

08001a4c <__errno>:
 8001a4c:	4b01      	ldr	r3, [pc, #4]	; (8001a54 <__errno+0x8>)
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008

08001a58 <__libc_init_array>:
 8001a58:	b570      	push	{r4, r5, r6, lr}
 8001a5a:	2500      	movs	r5, #0
 8001a5c:	4e0c      	ldr	r6, [pc, #48]	; (8001a90 <__libc_init_array+0x38>)
 8001a5e:	4c0d      	ldr	r4, [pc, #52]	; (8001a94 <__libc_init_array+0x3c>)
 8001a60:	1ba4      	subs	r4, r4, r6
 8001a62:	10a4      	asrs	r4, r4, #2
 8001a64:	42a5      	cmp	r5, r4
 8001a66:	d109      	bne.n	8001a7c <__libc_init_array+0x24>
 8001a68:	f000 fc2c 	bl	80022c4 <_init>
 8001a6c:	2500      	movs	r5, #0
 8001a6e:	4e0a      	ldr	r6, [pc, #40]	; (8001a98 <__libc_init_array+0x40>)
 8001a70:	4c0a      	ldr	r4, [pc, #40]	; (8001a9c <__libc_init_array+0x44>)
 8001a72:	1ba4      	subs	r4, r4, r6
 8001a74:	10a4      	asrs	r4, r4, #2
 8001a76:	42a5      	cmp	r5, r4
 8001a78:	d105      	bne.n	8001a86 <__libc_init_array+0x2e>
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a80:	4798      	blx	r3
 8001a82:	3501      	adds	r5, #1
 8001a84:	e7ee      	b.n	8001a64 <__libc_init_array+0xc>
 8001a86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a8a:	4798      	blx	r3
 8001a8c:	3501      	adds	r5, #1
 8001a8e:	e7f2      	b.n	8001a76 <__libc_init_array+0x1e>
 8001a90:	08002318 	.word	0x08002318
 8001a94:	08002318 	.word	0x08002318
 8001a98:	08002318 	.word	0x08002318
 8001a9c:	0800231c 	.word	0x0800231c

08001aa0 <siprintf>:
 8001aa0:	b40e      	push	{r1, r2, r3}
 8001aa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001aa6:	b500      	push	{lr}
 8001aa8:	b09c      	sub	sp, #112	; 0x70
 8001aaa:	ab1d      	add	r3, sp, #116	; 0x74
 8001aac:	9002      	str	r0, [sp, #8]
 8001aae:	9006      	str	r0, [sp, #24]
 8001ab0:	9107      	str	r1, [sp, #28]
 8001ab2:	9104      	str	r1, [sp, #16]
 8001ab4:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <siprintf+0x38>)
 8001ab6:	4909      	ldr	r1, [pc, #36]	; (8001adc <siprintf+0x3c>)
 8001ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8001abc:	9105      	str	r1, [sp, #20]
 8001abe:	6800      	ldr	r0, [r0, #0]
 8001ac0:	a902      	add	r1, sp, #8
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	f000 f8e6 	bl	8001c94 <_svfiprintf_r>
 8001ac8:	2200      	movs	r2, #0
 8001aca:	9b02      	ldr	r3, [sp, #8]
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	b01c      	add	sp, #112	; 0x70
 8001ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ad4:	b003      	add	sp, #12
 8001ad6:	4770      	bx	lr
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	ffff0208 	.word	0xffff0208

08001ae0 <_malloc_r>:
 8001ae0:	b570      	push	{r4, r5, r6, lr}
 8001ae2:	1ccd      	adds	r5, r1, #3
 8001ae4:	f025 0503 	bic.w	r5, r5, #3
 8001ae8:	3508      	adds	r5, #8
 8001aea:	2d0c      	cmp	r5, #12
 8001aec:	bf38      	it	cc
 8001aee:	250c      	movcc	r5, #12
 8001af0:	2d00      	cmp	r5, #0
 8001af2:	4606      	mov	r6, r0
 8001af4:	db01      	blt.n	8001afa <_malloc_r+0x1a>
 8001af6:	42a9      	cmp	r1, r5
 8001af8:	d903      	bls.n	8001b02 <_malloc_r+0x22>
 8001afa:	230c      	movs	r3, #12
 8001afc:	6033      	str	r3, [r6, #0]
 8001afe:	2000      	movs	r0, #0
 8001b00:	bd70      	pop	{r4, r5, r6, pc}
 8001b02:	f000 fb89 	bl	8002218 <__malloc_lock>
 8001b06:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <_malloc_r+0xac>)
 8001b08:	6814      	ldr	r4, [r2, #0]
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	b991      	cbnz	r1, 8001b34 <_malloc_r+0x54>
 8001b0e:	4c20      	ldr	r4, [pc, #128]	; (8001b90 <_malloc_r+0xb0>)
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	b91b      	cbnz	r3, 8001b1c <_malloc_r+0x3c>
 8001b14:	4630      	mov	r0, r6
 8001b16:	f000 fb3d 	bl	8002194 <_sbrk_r>
 8001b1a:	6020      	str	r0, [r4, #0]
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	4630      	mov	r0, r6
 8001b20:	f000 fb38 	bl	8002194 <_sbrk_r>
 8001b24:	1c43      	adds	r3, r0, #1
 8001b26:	d124      	bne.n	8001b72 <_malloc_r+0x92>
 8001b28:	230c      	movs	r3, #12
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	6033      	str	r3, [r6, #0]
 8001b2e:	f000 fb74 	bl	800221a <__malloc_unlock>
 8001b32:	e7e4      	b.n	8001afe <_malloc_r+0x1e>
 8001b34:	680b      	ldr	r3, [r1, #0]
 8001b36:	1b5b      	subs	r3, r3, r5
 8001b38:	d418      	bmi.n	8001b6c <_malloc_r+0x8c>
 8001b3a:	2b0b      	cmp	r3, #11
 8001b3c:	d90f      	bls.n	8001b5e <_malloc_r+0x7e>
 8001b3e:	600b      	str	r3, [r1, #0]
 8001b40:	18cc      	adds	r4, r1, r3
 8001b42:	50cd      	str	r5, [r1, r3]
 8001b44:	4630      	mov	r0, r6
 8001b46:	f000 fb68 	bl	800221a <__malloc_unlock>
 8001b4a:	f104 000b 	add.w	r0, r4, #11
 8001b4e:	1d23      	adds	r3, r4, #4
 8001b50:	f020 0007 	bic.w	r0, r0, #7
 8001b54:	1ac3      	subs	r3, r0, r3
 8001b56:	d0d3      	beq.n	8001b00 <_malloc_r+0x20>
 8001b58:	425a      	negs	r2, r3
 8001b5a:	50e2      	str	r2, [r4, r3]
 8001b5c:	e7d0      	b.n	8001b00 <_malloc_r+0x20>
 8001b5e:	684b      	ldr	r3, [r1, #4]
 8001b60:	428c      	cmp	r4, r1
 8001b62:	bf16      	itet	ne
 8001b64:	6063      	strne	r3, [r4, #4]
 8001b66:	6013      	streq	r3, [r2, #0]
 8001b68:	460c      	movne	r4, r1
 8001b6a:	e7eb      	b.n	8001b44 <_malloc_r+0x64>
 8001b6c:	460c      	mov	r4, r1
 8001b6e:	6849      	ldr	r1, [r1, #4]
 8001b70:	e7cc      	b.n	8001b0c <_malloc_r+0x2c>
 8001b72:	1cc4      	adds	r4, r0, #3
 8001b74:	f024 0403 	bic.w	r4, r4, #3
 8001b78:	42a0      	cmp	r0, r4
 8001b7a:	d005      	beq.n	8001b88 <_malloc_r+0xa8>
 8001b7c:	1a21      	subs	r1, r4, r0
 8001b7e:	4630      	mov	r0, r6
 8001b80:	f000 fb08 	bl	8002194 <_sbrk_r>
 8001b84:	3001      	adds	r0, #1
 8001b86:	d0cf      	beq.n	8001b28 <_malloc_r+0x48>
 8001b88:	6025      	str	r5, [r4, #0]
 8001b8a:	e7db      	b.n	8001b44 <_malloc_r+0x64>
 8001b8c:	20000094 	.word	0x20000094
 8001b90:	20000098 	.word	0x20000098

08001b94 <_realloc_r>:
 8001b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b96:	4607      	mov	r7, r0
 8001b98:	4614      	mov	r4, r2
 8001b9a:	460e      	mov	r6, r1
 8001b9c:	b921      	cbnz	r1, 8001ba8 <_realloc_r+0x14>
 8001b9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	f7ff bf9c 	b.w	8001ae0 <_malloc_r>
 8001ba8:	b922      	cbnz	r2, 8001bb4 <_realloc_r+0x20>
 8001baa:	f000 fb37 	bl	800221c <_free_r>
 8001bae:	4625      	mov	r5, r4
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bb4:	f000 fb7e 	bl	80022b4 <_malloc_usable_size_r>
 8001bb8:	42a0      	cmp	r0, r4
 8001bba:	d20f      	bcs.n	8001bdc <_realloc_r+0x48>
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	4638      	mov	r0, r7
 8001bc0:	f7ff ff8e 	bl	8001ae0 <_malloc_r>
 8001bc4:	4605      	mov	r5, r0
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	d0f2      	beq.n	8001bb0 <_realloc_r+0x1c>
 8001bca:	4631      	mov	r1, r6
 8001bcc:	4622      	mov	r2, r4
 8001bce:	f000 faff 	bl	80021d0 <memcpy>
 8001bd2:	4631      	mov	r1, r6
 8001bd4:	4638      	mov	r0, r7
 8001bd6:	f000 fb21 	bl	800221c <_free_r>
 8001bda:	e7e9      	b.n	8001bb0 <_realloc_r+0x1c>
 8001bdc:	4635      	mov	r5, r6
 8001bde:	e7e7      	b.n	8001bb0 <_realloc_r+0x1c>

08001be0 <__ssputs_r>:
 8001be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001be4:	688e      	ldr	r6, [r1, #8]
 8001be6:	4682      	mov	sl, r0
 8001be8:	429e      	cmp	r6, r3
 8001bea:	460c      	mov	r4, r1
 8001bec:	4690      	mov	r8, r2
 8001bee:	4699      	mov	r9, r3
 8001bf0:	d837      	bhi.n	8001c62 <__ssputs_r+0x82>
 8001bf2:	898a      	ldrh	r2, [r1, #12]
 8001bf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001bf8:	d031      	beq.n	8001c5e <__ssputs_r+0x7e>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	6825      	ldr	r5, [r4, #0]
 8001bfe:	6909      	ldr	r1, [r1, #16]
 8001c00:	1a6f      	subs	r7, r5, r1
 8001c02:	6965      	ldr	r5, [r4, #20]
 8001c04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c08:	fb95 f5f3 	sdiv	r5, r5, r3
 8001c0c:	f109 0301 	add.w	r3, r9, #1
 8001c10:	443b      	add	r3, r7
 8001c12:	429d      	cmp	r5, r3
 8001c14:	bf38      	it	cc
 8001c16:	461d      	movcc	r5, r3
 8001c18:	0553      	lsls	r3, r2, #21
 8001c1a:	d530      	bpl.n	8001c7e <__ssputs_r+0x9e>
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	f7ff ff5f 	bl	8001ae0 <_malloc_r>
 8001c22:	4606      	mov	r6, r0
 8001c24:	b950      	cbnz	r0, 8001c3c <__ssputs_r+0x5c>
 8001c26:	230c      	movs	r3, #12
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f8ca 3000 	str.w	r3, [sl]
 8001c30:	89a3      	ldrh	r3, [r4, #12]
 8001c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c36:	81a3      	strh	r3, [r4, #12]
 8001c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c3c:	463a      	mov	r2, r7
 8001c3e:	6921      	ldr	r1, [r4, #16]
 8001c40:	f000 fac6 	bl	80021d0 <memcpy>
 8001c44:	89a3      	ldrh	r3, [r4, #12]
 8001c46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4e:	81a3      	strh	r3, [r4, #12]
 8001c50:	6126      	str	r6, [r4, #16]
 8001c52:	443e      	add	r6, r7
 8001c54:	6026      	str	r6, [r4, #0]
 8001c56:	464e      	mov	r6, r9
 8001c58:	6165      	str	r5, [r4, #20]
 8001c5a:	1bed      	subs	r5, r5, r7
 8001c5c:	60a5      	str	r5, [r4, #8]
 8001c5e:	454e      	cmp	r6, r9
 8001c60:	d900      	bls.n	8001c64 <__ssputs_r+0x84>
 8001c62:	464e      	mov	r6, r9
 8001c64:	4632      	mov	r2, r6
 8001c66:	4641      	mov	r1, r8
 8001c68:	6820      	ldr	r0, [r4, #0]
 8001c6a:	f000 fabc 	bl	80021e6 <memmove>
 8001c6e:	68a3      	ldr	r3, [r4, #8]
 8001c70:	2000      	movs	r0, #0
 8001c72:	1b9b      	subs	r3, r3, r6
 8001c74:	60a3      	str	r3, [r4, #8]
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	441e      	add	r6, r3
 8001c7a:	6026      	str	r6, [r4, #0]
 8001c7c:	e7dc      	b.n	8001c38 <__ssputs_r+0x58>
 8001c7e:	462a      	mov	r2, r5
 8001c80:	f7ff ff88 	bl	8001b94 <_realloc_r>
 8001c84:	4606      	mov	r6, r0
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d1e2      	bne.n	8001c50 <__ssputs_r+0x70>
 8001c8a:	6921      	ldr	r1, [r4, #16]
 8001c8c:	4650      	mov	r0, sl
 8001c8e:	f000 fac5 	bl	800221c <_free_r>
 8001c92:	e7c8      	b.n	8001c26 <__ssputs_r+0x46>

08001c94 <_svfiprintf_r>:
 8001c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c98:	461d      	mov	r5, r3
 8001c9a:	898b      	ldrh	r3, [r1, #12]
 8001c9c:	b09d      	sub	sp, #116	; 0x74
 8001c9e:	061f      	lsls	r7, r3, #24
 8001ca0:	4680      	mov	r8, r0
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	4616      	mov	r6, r2
 8001ca6:	d50f      	bpl.n	8001cc8 <_svfiprintf_r+0x34>
 8001ca8:	690b      	ldr	r3, [r1, #16]
 8001caa:	b96b      	cbnz	r3, 8001cc8 <_svfiprintf_r+0x34>
 8001cac:	2140      	movs	r1, #64	; 0x40
 8001cae:	f7ff ff17 	bl	8001ae0 <_malloc_r>
 8001cb2:	6020      	str	r0, [r4, #0]
 8001cb4:	6120      	str	r0, [r4, #16]
 8001cb6:	b928      	cbnz	r0, 8001cc4 <_svfiprintf_r+0x30>
 8001cb8:	230c      	movs	r3, #12
 8001cba:	f8c8 3000 	str.w	r3, [r8]
 8001cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc2:	e0c8      	b.n	8001e56 <_svfiprintf_r+0x1c2>
 8001cc4:	2340      	movs	r3, #64	; 0x40
 8001cc6:	6163      	str	r3, [r4, #20]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9309      	str	r3, [sp, #36]	; 0x24
 8001ccc:	2320      	movs	r3, #32
 8001cce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cd2:	2330      	movs	r3, #48	; 0x30
 8001cd4:	f04f 0b01 	mov.w	fp, #1
 8001cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cdc:	9503      	str	r5, [sp, #12]
 8001cde:	4637      	mov	r7, r6
 8001ce0:	463d      	mov	r5, r7
 8001ce2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001ce6:	b10b      	cbz	r3, 8001cec <_svfiprintf_r+0x58>
 8001ce8:	2b25      	cmp	r3, #37	; 0x25
 8001cea:	d13e      	bne.n	8001d6a <_svfiprintf_r+0xd6>
 8001cec:	ebb7 0a06 	subs.w	sl, r7, r6
 8001cf0:	d00b      	beq.n	8001d0a <_svfiprintf_r+0x76>
 8001cf2:	4653      	mov	r3, sl
 8001cf4:	4632      	mov	r2, r6
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	4640      	mov	r0, r8
 8001cfa:	f7ff ff71 	bl	8001be0 <__ssputs_r>
 8001cfe:	3001      	adds	r0, #1
 8001d00:	f000 80a4 	beq.w	8001e4c <_svfiprintf_r+0x1b8>
 8001d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d06:	4453      	add	r3, sl
 8001d08:	9309      	str	r3, [sp, #36]	; 0x24
 8001d0a:	783b      	ldrb	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 809d 	beq.w	8001e4c <_svfiprintf_r+0x1b8>
 8001d12:	2300      	movs	r3, #0
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d1c:	9304      	str	r3, [sp, #16]
 8001d1e:	9307      	str	r3, [sp, #28]
 8001d20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d24:	931a      	str	r3, [sp, #104]	; 0x68
 8001d26:	462f      	mov	r7, r5
 8001d28:	2205      	movs	r2, #5
 8001d2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001d2e:	4850      	ldr	r0, [pc, #320]	; (8001e70 <_svfiprintf_r+0x1dc>)
 8001d30:	f000 fa40 	bl	80021b4 <memchr>
 8001d34:	9b04      	ldr	r3, [sp, #16]
 8001d36:	b9d0      	cbnz	r0, 8001d6e <_svfiprintf_r+0xda>
 8001d38:	06d9      	lsls	r1, r3, #27
 8001d3a:	bf44      	itt	mi
 8001d3c:	2220      	movmi	r2, #32
 8001d3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d42:	071a      	lsls	r2, r3, #28
 8001d44:	bf44      	itt	mi
 8001d46:	222b      	movmi	r2, #43	; 0x2b
 8001d48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d4c:	782a      	ldrb	r2, [r5, #0]
 8001d4e:	2a2a      	cmp	r2, #42	; 0x2a
 8001d50:	d015      	beq.n	8001d7e <_svfiprintf_r+0xea>
 8001d52:	462f      	mov	r7, r5
 8001d54:	2000      	movs	r0, #0
 8001d56:	250a      	movs	r5, #10
 8001d58:	9a07      	ldr	r2, [sp, #28]
 8001d5a:	4639      	mov	r1, r7
 8001d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d60:	3b30      	subs	r3, #48	; 0x30
 8001d62:	2b09      	cmp	r3, #9
 8001d64:	d94d      	bls.n	8001e02 <_svfiprintf_r+0x16e>
 8001d66:	b1b8      	cbz	r0, 8001d98 <_svfiprintf_r+0x104>
 8001d68:	e00f      	b.n	8001d8a <_svfiprintf_r+0xf6>
 8001d6a:	462f      	mov	r7, r5
 8001d6c:	e7b8      	b.n	8001ce0 <_svfiprintf_r+0x4c>
 8001d6e:	4a40      	ldr	r2, [pc, #256]	; (8001e70 <_svfiprintf_r+0x1dc>)
 8001d70:	463d      	mov	r5, r7
 8001d72:	1a80      	subs	r0, r0, r2
 8001d74:	fa0b f000 	lsl.w	r0, fp, r0
 8001d78:	4318      	orrs	r0, r3
 8001d7a:	9004      	str	r0, [sp, #16]
 8001d7c:	e7d3      	b.n	8001d26 <_svfiprintf_r+0x92>
 8001d7e:	9a03      	ldr	r2, [sp, #12]
 8001d80:	1d11      	adds	r1, r2, #4
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	9103      	str	r1, [sp, #12]
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	db01      	blt.n	8001d8e <_svfiprintf_r+0xfa>
 8001d8a:	9207      	str	r2, [sp, #28]
 8001d8c:	e004      	b.n	8001d98 <_svfiprintf_r+0x104>
 8001d8e:	4252      	negs	r2, r2
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	9207      	str	r2, [sp, #28]
 8001d96:	9304      	str	r3, [sp, #16]
 8001d98:	783b      	ldrb	r3, [r7, #0]
 8001d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8001d9c:	d10c      	bne.n	8001db8 <_svfiprintf_r+0x124>
 8001d9e:	787b      	ldrb	r3, [r7, #1]
 8001da0:	2b2a      	cmp	r3, #42	; 0x2a
 8001da2:	d133      	bne.n	8001e0c <_svfiprintf_r+0x178>
 8001da4:	9b03      	ldr	r3, [sp, #12]
 8001da6:	3702      	adds	r7, #2
 8001da8:	1d1a      	adds	r2, r3, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	9203      	str	r2, [sp, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bfb8      	it	lt
 8001db2:	f04f 33ff 	movlt.w	r3, #4294967295
 8001db6:	9305      	str	r3, [sp, #20]
 8001db8:	4d2e      	ldr	r5, [pc, #184]	; (8001e74 <_svfiprintf_r+0x1e0>)
 8001dba:	2203      	movs	r2, #3
 8001dbc:	7839      	ldrb	r1, [r7, #0]
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	f000 f9f8 	bl	80021b4 <memchr>
 8001dc4:	b138      	cbz	r0, 8001dd6 <_svfiprintf_r+0x142>
 8001dc6:	2340      	movs	r3, #64	; 0x40
 8001dc8:	1b40      	subs	r0, r0, r5
 8001dca:	fa03 f000 	lsl.w	r0, r3, r0
 8001dce:	9b04      	ldr	r3, [sp, #16]
 8001dd0:	3701      	adds	r7, #1
 8001dd2:	4303      	orrs	r3, r0
 8001dd4:	9304      	str	r3, [sp, #16]
 8001dd6:	7839      	ldrb	r1, [r7, #0]
 8001dd8:	2206      	movs	r2, #6
 8001dda:	4827      	ldr	r0, [pc, #156]	; (8001e78 <_svfiprintf_r+0x1e4>)
 8001ddc:	1c7e      	adds	r6, r7, #1
 8001dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001de2:	f000 f9e7 	bl	80021b4 <memchr>
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d038      	beq.n	8001e5c <_svfiprintf_r+0x1c8>
 8001dea:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <_svfiprintf_r+0x1e8>)
 8001dec:	bb13      	cbnz	r3, 8001e34 <_svfiprintf_r+0x1a0>
 8001dee:	9b03      	ldr	r3, [sp, #12]
 8001df0:	3307      	adds	r3, #7
 8001df2:	f023 0307 	bic.w	r3, r3, #7
 8001df6:	3308      	adds	r3, #8
 8001df8:	9303      	str	r3, [sp, #12]
 8001dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dfc:	444b      	add	r3, r9
 8001dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8001e00:	e76d      	b.n	8001cde <_svfiprintf_r+0x4a>
 8001e02:	fb05 3202 	mla	r2, r5, r2, r3
 8001e06:	2001      	movs	r0, #1
 8001e08:	460f      	mov	r7, r1
 8001e0a:	e7a6      	b.n	8001d5a <_svfiprintf_r+0xc6>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	250a      	movs	r5, #10
 8001e10:	4619      	mov	r1, r3
 8001e12:	3701      	adds	r7, #1
 8001e14:	9305      	str	r3, [sp, #20]
 8001e16:	4638      	mov	r0, r7
 8001e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e1c:	3a30      	subs	r2, #48	; 0x30
 8001e1e:	2a09      	cmp	r2, #9
 8001e20:	d903      	bls.n	8001e2a <_svfiprintf_r+0x196>
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0c8      	beq.n	8001db8 <_svfiprintf_r+0x124>
 8001e26:	9105      	str	r1, [sp, #20]
 8001e28:	e7c6      	b.n	8001db8 <_svfiprintf_r+0x124>
 8001e2a:	fb05 2101 	mla	r1, r5, r1, r2
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4607      	mov	r7, r0
 8001e32:	e7f0      	b.n	8001e16 <_svfiprintf_r+0x182>
 8001e34:	ab03      	add	r3, sp, #12
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4622      	mov	r2, r4
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <_svfiprintf_r+0x1ec>)
 8001e3c:	a904      	add	r1, sp, #16
 8001e3e:	4640      	mov	r0, r8
 8001e40:	f3af 8000 	nop.w
 8001e44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e48:	4681      	mov	r9, r0
 8001e4a:	d1d6      	bne.n	8001dfa <_svfiprintf_r+0x166>
 8001e4c:	89a3      	ldrh	r3, [r4, #12]
 8001e4e:	065b      	lsls	r3, r3, #25
 8001e50:	f53f af35 	bmi.w	8001cbe <_svfiprintf_r+0x2a>
 8001e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e56:	b01d      	add	sp, #116	; 0x74
 8001e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e5c:	ab03      	add	r3, sp, #12
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	4622      	mov	r2, r4
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_svfiprintf_r+0x1ec>)
 8001e64:	a904      	add	r1, sp, #16
 8001e66:	4640      	mov	r0, r8
 8001e68:	f000 f882 	bl	8001f70 <_printf_i>
 8001e6c:	e7ea      	b.n	8001e44 <_svfiprintf_r+0x1b0>
 8001e6e:	bf00      	nop
 8001e70:	080022e2 	.word	0x080022e2
 8001e74:	080022e8 	.word	0x080022e8
 8001e78:	080022ec 	.word	0x080022ec
 8001e7c:	00000000 	.word	0x00000000
 8001e80:	08001be1 	.word	0x08001be1

08001e84 <_printf_common>:
 8001e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e88:	4691      	mov	r9, r2
 8001e8a:	461f      	mov	r7, r3
 8001e8c:	688a      	ldr	r2, [r1, #8]
 8001e8e:	690b      	ldr	r3, [r1, #16]
 8001e90:	4606      	mov	r6, r0
 8001e92:	4293      	cmp	r3, r2
 8001e94:	bfb8      	it	lt
 8001e96:	4613      	movlt	r3, r2
 8001e98:	f8c9 3000 	str.w	r3, [r9]
 8001e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ea0:	460c      	mov	r4, r1
 8001ea2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ea6:	b112      	cbz	r2, 8001eae <_printf_common+0x2a>
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f8c9 3000 	str.w	r3, [r9]
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	0699      	lsls	r1, r3, #26
 8001eb2:	bf42      	ittt	mi
 8001eb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001eb8:	3302      	addmi	r3, #2
 8001eba:	f8c9 3000 	strmi.w	r3, [r9]
 8001ebe:	6825      	ldr	r5, [r4, #0]
 8001ec0:	f015 0506 	ands.w	r5, r5, #6
 8001ec4:	d107      	bne.n	8001ed6 <_printf_common+0x52>
 8001ec6:	f104 0a19 	add.w	sl, r4, #25
 8001eca:	68e3      	ldr	r3, [r4, #12]
 8001ecc:	f8d9 2000 	ldr.w	r2, [r9]
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	42ab      	cmp	r3, r5
 8001ed4:	dc29      	bgt.n	8001f2a <_printf_common+0xa6>
 8001ed6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001eda:	6822      	ldr	r2, [r4, #0]
 8001edc:	3300      	adds	r3, #0
 8001ede:	bf18      	it	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	0692      	lsls	r2, r2, #26
 8001ee4:	d42e      	bmi.n	8001f44 <_printf_common+0xc0>
 8001ee6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001eea:	4639      	mov	r1, r7
 8001eec:	4630      	mov	r0, r6
 8001eee:	47c0      	blx	r8
 8001ef0:	3001      	adds	r0, #1
 8001ef2:	d021      	beq.n	8001f38 <_printf_common+0xb4>
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	68e5      	ldr	r5, [r4, #12]
 8001ef8:	f003 0306 	and.w	r3, r3, #6
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	bf18      	it	ne
 8001f00:	2500      	movne	r5, #0
 8001f02:	f8d9 2000 	ldr.w	r2, [r9]
 8001f06:	f04f 0900 	mov.w	r9, #0
 8001f0a:	bf08      	it	eq
 8001f0c:	1aad      	subeq	r5, r5, r2
 8001f0e:	68a3      	ldr	r3, [r4, #8]
 8001f10:	6922      	ldr	r2, [r4, #16]
 8001f12:	bf08      	it	eq
 8001f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	bfc4      	itt	gt
 8001f1c:	1a9b      	subgt	r3, r3, r2
 8001f1e:	18ed      	addgt	r5, r5, r3
 8001f20:	341a      	adds	r4, #26
 8001f22:	454d      	cmp	r5, r9
 8001f24:	d11a      	bne.n	8001f5c <_printf_common+0xd8>
 8001f26:	2000      	movs	r0, #0
 8001f28:	e008      	b.n	8001f3c <_printf_common+0xb8>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	4652      	mov	r2, sl
 8001f2e:	4639      	mov	r1, r7
 8001f30:	4630      	mov	r0, r6
 8001f32:	47c0      	blx	r8
 8001f34:	3001      	adds	r0, #1
 8001f36:	d103      	bne.n	8001f40 <_printf_common+0xbc>
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f40:	3501      	adds	r5, #1
 8001f42:	e7c2      	b.n	8001eca <_printf_common+0x46>
 8001f44:	2030      	movs	r0, #48	; 0x30
 8001f46:	18e1      	adds	r1, r4, r3
 8001f48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f52:	4422      	add	r2, r4
 8001f54:	3302      	adds	r3, #2
 8001f56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f5a:	e7c4      	b.n	8001ee6 <_printf_common+0x62>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	4622      	mov	r2, r4
 8001f60:	4639      	mov	r1, r7
 8001f62:	4630      	mov	r0, r6
 8001f64:	47c0      	blx	r8
 8001f66:	3001      	adds	r0, #1
 8001f68:	d0e6      	beq.n	8001f38 <_printf_common+0xb4>
 8001f6a:	f109 0901 	add.w	r9, r9, #1
 8001f6e:	e7d8      	b.n	8001f22 <_printf_common+0x9e>

08001f70 <_printf_i>:
 8001f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001f78:	460c      	mov	r4, r1
 8001f7a:	7e09      	ldrb	r1, [r1, #24]
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	296e      	cmp	r1, #110	; 0x6e
 8001f80:	4617      	mov	r7, r2
 8001f82:	4606      	mov	r6, r0
 8001f84:	4698      	mov	r8, r3
 8001f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001f88:	f000 80b3 	beq.w	80020f2 <_printf_i+0x182>
 8001f8c:	d822      	bhi.n	8001fd4 <_printf_i+0x64>
 8001f8e:	2963      	cmp	r1, #99	; 0x63
 8001f90:	d036      	beq.n	8002000 <_printf_i+0x90>
 8001f92:	d80a      	bhi.n	8001faa <_printf_i+0x3a>
 8001f94:	2900      	cmp	r1, #0
 8001f96:	f000 80b9 	beq.w	800210c <_printf_i+0x19c>
 8001f9a:	2958      	cmp	r1, #88	; 0x58
 8001f9c:	f000 8083 	beq.w	80020a6 <_printf_i+0x136>
 8001fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fa4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001fa8:	e032      	b.n	8002010 <_printf_i+0xa0>
 8001faa:	2964      	cmp	r1, #100	; 0x64
 8001fac:	d001      	beq.n	8001fb2 <_printf_i+0x42>
 8001fae:	2969      	cmp	r1, #105	; 0x69
 8001fb0:	d1f6      	bne.n	8001fa0 <_printf_i+0x30>
 8001fb2:	6820      	ldr	r0, [r4, #0]
 8001fb4:	6813      	ldr	r3, [r2, #0]
 8001fb6:	0605      	lsls	r5, r0, #24
 8001fb8:	f103 0104 	add.w	r1, r3, #4
 8001fbc:	d52a      	bpl.n	8002014 <_printf_i+0xa4>
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6011      	str	r1, [r2, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	da03      	bge.n	8001fce <_printf_i+0x5e>
 8001fc6:	222d      	movs	r2, #45	; 0x2d
 8001fc8:	425b      	negs	r3, r3
 8001fca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001fce:	486f      	ldr	r0, [pc, #444]	; (800218c <_printf_i+0x21c>)
 8001fd0:	220a      	movs	r2, #10
 8001fd2:	e039      	b.n	8002048 <_printf_i+0xd8>
 8001fd4:	2973      	cmp	r1, #115	; 0x73
 8001fd6:	f000 809d 	beq.w	8002114 <_printf_i+0x1a4>
 8001fda:	d808      	bhi.n	8001fee <_printf_i+0x7e>
 8001fdc:	296f      	cmp	r1, #111	; 0x6f
 8001fde:	d020      	beq.n	8002022 <_printf_i+0xb2>
 8001fe0:	2970      	cmp	r1, #112	; 0x70
 8001fe2:	d1dd      	bne.n	8001fa0 <_printf_i+0x30>
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	f043 0320 	orr.w	r3, r3, #32
 8001fea:	6023      	str	r3, [r4, #0]
 8001fec:	e003      	b.n	8001ff6 <_printf_i+0x86>
 8001fee:	2975      	cmp	r1, #117	; 0x75
 8001ff0:	d017      	beq.n	8002022 <_printf_i+0xb2>
 8001ff2:	2978      	cmp	r1, #120	; 0x78
 8001ff4:	d1d4      	bne.n	8001fa0 <_printf_i+0x30>
 8001ff6:	2378      	movs	r3, #120	; 0x78
 8001ff8:	4865      	ldr	r0, [pc, #404]	; (8002190 <_printf_i+0x220>)
 8001ffa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001ffe:	e055      	b.n	80020ac <_printf_i+0x13c>
 8002000:	6813      	ldr	r3, [r2, #0]
 8002002:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002006:	1d19      	adds	r1, r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6011      	str	r1, [r2, #0]
 800200c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002010:	2301      	movs	r3, #1
 8002012:	e08c      	b.n	800212e <_printf_i+0x1be>
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f010 0f40 	tst.w	r0, #64	; 0x40
 800201a:	6011      	str	r1, [r2, #0]
 800201c:	bf18      	it	ne
 800201e:	b21b      	sxthne	r3, r3
 8002020:	e7cf      	b.n	8001fc2 <_printf_i+0x52>
 8002022:	6813      	ldr	r3, [r2, #0]
 8002024:	6825      	ldr	r5, [r4, #0]
 8002026:	1d18      	adds	r0, r3, #4
 8002028:	6010      	str	r0, [r2, #0]
 800202a:	0628      	lsls	r0, r5, #24
 800202c:	d501      	bpl.n	8002032 <_printf_i+0xc2>
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	e002      	b.n	8002038 <_printf_i+0xc8>
 8002032:	0668      	lsls	r0, r5, #25
 8002034:	d5fb      	bpl.n	800202e <_printf_i+0xbe>
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	296f      	cmp	r1, #111	; 0x6f
 800203a:	bf14      	ite	ne
 800203c:	220a      	movne	r2, #10
 800203e:	2208      	moveq	r2, #8
 8002040:	4852      	ldr	r0, [pc, #328]	; (800218c <_printf_i+0x21c>)
 8002042:	2100      	movs	r1, #0
 8002044:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002048:	6865      	ldr	r5, [r4, #4]
 800204a:	2d00      	cmp	r5, #0
 800204c:	60a5      	str	r5, [r4, #8]
 800204e:	f2c0 8095 	blt.w	800217c <_printf_i+0x20c>
 8002052:	6821      	ldr	r1, [r4, #0]
 8002054:	f021 0104 	bic.w	r1, r1, #4
 8002058:	6021      	str	r1, [r4, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d13d      	bne.n	80020da <_printf_i+0x16a>
 800205e:	2d00      	cmp	r5, #0
 8002060:	f040 808e 	bne.w	8002180 <_printf_i+0x210>
 8002064:	4665      	mov	r5, ip
 8002066:	2a08      	cmp	r2, #8
 8002068:	d10b      	bne.n	8002082 <_printf_i+0x112>
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	07db      	lsls	r3, r3, #31
 800206e:	d508      	bpl.n	8002082 <_printf_i+0x112>
 8002070:	6923      	ldr	r3, [r4, #16]
 8002072:	6862      	ldr	r2, [r4, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	bfde      	ittt	le
 8002078:	2330      	movle	r3, #48	; 0x30
 800207a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800207e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002082:	ebac 0305 	sub.w	r3, ip, r5
 8002086:	6123      	str	r3, [r4, #16]
 8002088:	f8cd 8000 	str.w	r8, [sp]
 800208c:	463b      	mov	r3, r7
 800208e:	aa03      	add	r2, sp, #12
 8002090:	4621      	mov	r1, r4
 8002092:	4630      	mov	r0, r6
 8002094:	f7ff fef6 	bl	8001e84 <_printf_common>
 8002098:	3001      	adds	r0, #1
 800209a:	d14d      	bne.n	8002138 <_printf_i+0x1c8>
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	b005      	add	sp, #20
 80020a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020a6:	4839      	ldr	r0, [pc, #228]	; (800218c <_printf_i+0x21c>)
 80020a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80020ac:	6813      	ldr	r3, [r2, #0]
 80020ae:	6821      	ldr	r1, [r4, #0]
 80020b0:	1d1d      	adds	r5, r3, #4
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6015      	str	r5, [r2, #0]
 80020b6:	060a      	lsls	r2, r1, #24
 80020b8:	d50b      	bpl.n	80020d2 <_printf_i+0x162>
 80020ba:	07ca      	lsls	r2, r1, #31
 80020bc:	bf44      	itt	mi
 80020be:	f041 0120 	orrmi.w	r1, r1, #32
 80020c2:	6021      	strmi	r1, [r4, #0]
 80020c4:	b91b      	cbnz	r3, 80020ce <_printf_i+0x15e>
 80020c6:	6822      	ldr	r2, [r4, #0]
 80020c8:	f022 0220 	bic.w	r2, r2, #32
 80020cc:	6022      	str	r2, [r4, #0]
 80020ce:	2210      	movs	r2, #16
 80020d0:	e7b7      	b.n	8002042 <_printf_i+0xd2>
 80020d2:	064d      	lsls	r5, r1, #25
 80020d4:	bf48      	it	mi
 80020d6:	b29b      	uxthmi	r3, r3
 80020d8:	e7ef      	b.n	80020ba <_printf_i+0x14a>
 80020da:	4665      	mov	r5, ip
 80020dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80020e0:	fb02 3311 	mls	r3, r2, r1, r3
 80020e4:	5cc3      	ldrb	r3, [r0, r3]
 80020e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80020ea:	460b      	mov	r3, r1
 80020ec:	2900      	cmp	r1, #0
 80020ee:	d1f5      	bne.n	80020dc <_printf_i+0x16c>
 80020f0:	e7b9      	b.n	8002066 <_printf_i+0xf6>
 80020f2:	6813      	ldr	r3, [r2, #0]
 80020f4:	6825      	ldr	r5, [r4, #0]
 80020f6:	1d18      	adds	r0, r3, #4
 80020f8:	6961      	ldr	r1, [r4, #20]
 80020fa:	6010      	str	r0, [r2, #0]
 80020fc:	0628      	lsls	r0, r5, #24
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	d501      	bpl.n	8002106 <_printf_i+0x196>
 8002102:	6019      	str	r1, [r3, #0]
 8002104:	e002      	b.n	800210c <_printf_i+0x19c>
 8002106:	066a      	lsls	r2, r5, #25
 8002108:	d5fb      	bpl.n	8002102 <_printf_i+0x192>
 800210a:	8019      	strh	r1, [r3, #0]
 800210c:	2300      	movs	r3, #0
 800210e:	4665      	mov	r5, ip
 8002110:	6123      	str	r3, [r4, #16]
 8002112:	e7b9      	b.n	8002088 <_printf_i+0x118>
 8002114:	6813      	ldr	r3, [r2, #0]
 8002116:	1d19      	adds	r1, r3, #4
 8002118:	6011      	str	r1, [r2, #0]
 800211a:	681d      	ldr	r5, [r3, #0]
 800211c:	6862      	ldr	r2, [r4, #4]
 800211e:	2100      	movs	r1, #0
 8002120:	4628      	mov	r0, r5
 8002122:	f000 f847 	bl	80021b4 <memchr>
 8002126:	b108      	cbz	r0, 800212c <_printf_i+0x1bc>
 8002128:	1b40      	subs	r0, r0, r5
 800212a:	6060      	str	r0, [r4, #4]
 800212c:	6863      	ldr	r3, [r4, #4]
 800212e:	6123      	str	r3, [r4, #16]
 8002130:	2300      	movs	r3, #0
 8002132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002136:	e7a7      	b.n	8002088 <_printf_i+0x118>
 8002138:	6923      	ldr	r3, [r4, #16]
 800213a:	462a      	mov	r2, r5
 800213c:	4639      	mov	r1, r7
 800213e:	4630      	mov	r0, r6
 8002140:	47c0      	blx	r8
 8002142:	3001      	adds	r0, #1
 8002144:	d0aa      	beq.n	800209c <_printf_i+0x12c>
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	079b      	lsls	r3, r3, #30
 800214a:	d413      	bmi.n	8002174 <_printf_i+0x204>
 800214c:	68e0      	ldr	r0, [r4, #12]
 800214e:	9b03      	ldr	r3, [sp, #12]
 8002150:	4298      	cmp	r0, r3
 8002152:	bfb8      	it	lt
 8002154:	4618      	movlt	r0, r3
 8002156:	e7a3      	b.n	80020a0 <_printf_i+0x130>
 8002158:	2301      	movs	r3, #1
 800215a:	464a      	mov	r2, r9
 800215c:	4639      	mov	r1, r7
 800215e:	4630      	mov	r0, r6
 8002160:	47c0      	blx	r8
 8002162:	3001      	adds	r0, #1
 8002164:	d09a      	beq.n	800209c <_printf_i+0x12c>
 8002166:	3501      	adds	r5, #1
 8002168:	68e3      	ldr	r3, [r4, #12]
 800216a:	9a03      	ldr	r2, [sp, #12]
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	42ab      	cmp	r3, r5
 8002170:	dcf2      	bgt.n	8002158 <_printf_i+0x1e8>
 8002172:	e7eb      	b.n	800214c <_printf_i+0x1dc>
 8002174:	2500      	movs	r5, #0
 8002176:	f104 0919 	add.w	r9, r4, #25
 800217a:	e7f5      	b.n	8002168 <_printf_i+0x1f8>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ac      	bne.n	80020da <_printf_i+0x16a>
 8002180:	7803      	ldrb	r3, [r0, #0]
 8002182:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002186:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800218a:	e76c      	b.n	8002066 <_printf_i+0xf6>
 800218c:	080022f3 	.word	0x080022f3
 8002190:	08002304 	.word	0x08002304

08002194 <_sbrk_r>:
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	2300      	movs	r3, #0
 8002198:	4c05      	ldr	r4, [pc, #20]	; (80021b0 <_sbrk_r+0x1c>)
 800219a:	4605      	mov	r5, r0
 800219c:	4608      	mov	r0, r1
 800219e:	6023      	str	r3, [r4, #0]
 80021a0:	f7ff fbf4 	bl	800198c <_sbrk>
 80021a4:	1c43      	adds	r3, r0, #1
 80021a6:	d102      	bne.n	80021ae <_sbrk_r+0x1a>
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	b103      	cbz	r3, 80021ae <_sbrk_r+0x1a>
 80021ac:	602b      	str	r3, [r5, #0]
 80021ae:	bd38      	pop	{r3, r4, r5, pc}
 80021b0:	20000128 	.word	0x20000128

080021b4 <memchr>:
 80021b4:	b510      	push	{r4, lr}
 80021b6:	b2c9      	uxtb	r1, r1
 80021b8:	4402      	add	r2, r0
 80021ba:	4290      	cmp	r0, r2
 80021bc:	4603      	mov	r3, r0
 80021be:	d101      	bne.n	80021c4 <memchr+0x10>
 80021c0:	2300      	movs	r3, #0
 80021c2:	e003      	b.n	80021cc <memchr+0x18>
 80021c4:	781c      	ldrb	r4, [r3, #0]
 80021c6:	3001      	adds	r0, #1
 80021c8:	428c      	cmp	r4, r1
 80021ca:	d1f6      	bne.n	80021ba <memchr+0x6>
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd10      	pop	{r4, pc}

080021d0 <memcpy>:
 80021d0:	b510      	push	{r4, lr}
 80021d2:	1e43      	subs	r3, r0, #1
 80021d4:	440a      	add	r2, r1
 80021d6:	4291      	cmp	r1, r2
 80021d8:	d100      	bne.n	80021dc <memcpy+0xc>
 80021da:	bd10      	pop	{r4, pc}
 80021dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021e4:	e7f7      	b.n	80021d6 <memcpy+0x6>

080021e6 <memmove>:
 80021e6:	4288      	cmp	r0, r1
 80021e8:	b510      	push	{r4, lr}
 80021ea:	eb01 0302 	add.w	r3, r1, r2
 80021ee:	d807      	bhi.n	8002200 <memmove+0x1a>
 80021f0:	1e42      	subs	r2, r0, #1
 80021f2:	4299      	cmp	r1, r3
 80021f4:	d00a      	beq.n	800220c <memmove+0x26>
 80021f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80021fe:	e7f8      	b.n	80021f2 <memmove+0xc>
 8002200:	4283      	cmp	r3, r0
 8002202:	d9f5      	bls.n	80021f0 <memmove+0xa>
 8002204:	1881      	adds	r1, r0, r2
 8002206:	1ad2      	subs	r2, r2, r3
 8002208:	42d3      	cmn	r3, r2
 800220a:	d100      	bne.n	800220e <memmove+0x28>
 800220c:	bd10      	pop	{r4, pc}
 800220e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002212:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002216:	e7f7      	b.n	8002208 <memmove+0x22>

08002218 <__malloc_lock>:
 8002218:	4770      	bx	lr

0800221a <__malloc_unlock>:
 800221a:	4770      	bx	lr

0800221c <_free_r>:
 800221c:	b538      	push	{r3, r4, r5, lr}
 800221e:	4605      	mov	r5, r0
 8002220:	2900      	cmp	r1, #0
 8002222:	d043      	beq.n	80022ac <_free_r+0x90>
 8002224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002228:	1f0c      	subs	r4, r1, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	bfb8      	it	lt
 800222e:	18e4      	addlt	r4, r4, r3
 8002230:	f7ff fff2 	bl	8002218 <__malloc_lock>
 8002234:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <_free_r+0x94>)
 8002236:	6813      	ldr	r3, [r2, #0]
 8002238:	4610      	mov	r0, r2
 800223a:	b933      	cbnz	r3, 800224a <_free_r+0x2e>
 800223c:	6063      	str	r3, [r4, #4]
 800223e:	6014      	str	r4, [r2, #0]
 8002240:	4628      	mov	r0, r5
 8002242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002246:	f7ff bfe8 	b.w	800221a <__malloc_unlock>
 800224a:	42a3      	cmp	r3, r4
 800224c:	d90b      	bls.n	8002266 <_free_r+0x4a>
 800224e:	6821      	ldr	r1, [r4, #0]
 8002250:	1862      	adds	r2, r4, r1
 8002252:	4293      	cmp	r3, r2
 8002254:	bf01      	itttt	eq
 8002256:	681a      	ldreq	r2, [r3, #0]
 8002258:	685b      	ldreq	r3, [r3, #4]
 800225a:	1852      	addeq	r2, r2, r1
 800225c:	6022      	streq	r2, [r4, #0]
 800225e:	6063      	str	r3, [r4, #4]
 8002260:	6004      	str	r4, [r0, #0]
 8002262:	e7ed      	b.n	8002240 <_free_r+0x24>
 8002264:	4613      	mov	r3, r2
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	b10a      	cbz	r2, 800226e <_free_r+0x52>
 800226a:	42a2      	cmp	r2, r4
 800226c:	d9fa      	bls.n	8002264 <_free_r+0x48>
 800226e:	6819      	ldr	r1, [r3, #0]
 8002270:	1858      	adds	r0, r3, r1
 8002272:	42a0      	cmp	r0, r4
 8002274:	d10b      	bne.n	800228e <_free_r+0x72>
 8002276:	6820      	ldr	r0, [r4, #0]
 8002278:	4401      	add	r1, r0
 800227a:	1858      	adds	r0, r3, r1
 800227c:	4282      	cmp	r2, r0
 800227e:	6019      	str	r1, [r3, #0]
 8002280:	d1de      	bne.n	8002240 <_free_r+0x24>
 8002282:	6810      	ldr	r0, [r2, #0]
 8002284:	6852      	ldr	r2, [r2, #4]
 8002286:	4401      	add	r1, r0
 8002288:	6019      	str	r1, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	e7d8      	b.n	8002240 <_free_r+0x24>
 800228e:	d902      	bls.n	8002296 <_free_r+0x7a>
 8002290:	230c      	movs	r3, #12
 8002292:	602b      	str	r3, [r5, #0]
 8002294:	e7d4      	b.n	8002240 <_free_r+0x24>
 8002296:	6820      	ldr	r0, [r4, #0]
 8002298:	1821      	adds	r1, r4, r0
 800229a:	428a      	cmp	r2, r1
 800229c:	bf01      	itttt	eq
 800229e:	6811      	ldreq	r1, [r2, #0]
 80022a0:	6852      	ldreq	r2, [r2, #4]
 80022a2:	1809      	addeq	r1, r1, r0
 80022a4:	6021      	streq	r1, [r4, #0]
 80022a6:	6062      	str	r2, [r4, #4]
 80022a8:	605c      	str	r4, [r3, #4]
 80022aa:	e7c9      	b.n	8002240 <_free_r+0x24>
 80022ac:	bd38      	pop	{r3, r4, r5, pc}
 80022ae:	bf00      	nop
 80022b0:	20000094 	.word	0x20000094

080022b4 <_malloc_usable_size_r>:
 80022b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022b8:	1f18      	subs	r0, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bfbc      	itt	lt
 80022be:	580b      	ldrlt	r3, [r1, r0]
 80022c0:	18c0      	addlt	r0, r0, r3
 80022c2:	4770      	bx	lr

080022c4 <_init>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	bf00      	nop
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr

080022d0 <_fini>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	bf00      	nop
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr
