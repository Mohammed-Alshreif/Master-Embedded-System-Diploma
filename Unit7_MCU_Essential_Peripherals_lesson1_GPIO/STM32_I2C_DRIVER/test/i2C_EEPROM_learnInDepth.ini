// Simulation of I2C1 Memory (Slave)

MAP 0x70000000, 0x7000FFFF READ WRITE        // Map User Memory region

DEFINE int SADR                              // Slave Address

signal void I2C1MEMORY (void) {
  unsigned long adr;

	
	printf("\r\n \r\n \r\n ===================================================================\r\n");
	printf("@learn-in-depth.com   E2PROM act as I2C SLAVE  (unit8 lesson 7) lab \r\n");
	printf("Prepared by Eng.Keroles Shenouda (eng.keroles.karam@gmail.com)\r\n");
	printf("===================================================================\r\n \r\n \r\n ");
  adr = 0x70000000;
  while (1) {
		 printf("LEARN-IN-Depth.com_E2PROM: _|--- Idle State Wait for data from Microcontroller  \r\n");
    wwatch (I2C1_OUT);                        // Wait for data from Microcontroller
    while (I2C1_OUT == 0x0100) {              // START detected
			printf("LEARN-IN-Depth.com_E2PROM: START detected ==========\r\n");
      wwatch (I2C1_OUT);                      // Wait for data from Microcontroller
      if (I2C1_OUT > 0xFF) continue;
      if ((I2C1_OUT >> 1) != SADR) continue;  // test if Slave is addressed
			I2C1_IN = 0xFF00;                       // ACK to Microcontroller
			printf("LEARN-IN-Depth.com_E2PROM: Slave Address (0x%x) Matched E2Prom Address (0x2A) \r\n",(I2C1_OUT >> 1));
			printf("LEARN-IN-Depth.com_E2PROM: Send Ack to the Master \r\n");
      if (I2C1_OUT & 1) {                     // Slave Read
				printf("LEARN-IN-Depth.com_E2PROM: Master Read From E2PROM \r\n");
				wwatch (I2C1_IN);                  // Wait for data from Microcontroller
        while (1) {
					printf("LEARN-IN-Depth.com_E2PROM: Read from  Memory Address=%X  data=%x \r\n",adr, _RBYTE(adr));
          I2C1_IN = _RBYTE(adr);              // Read Byte from Memory
          adr++;                             // Increment Address
          wwatch (I2C1_OUT);                  // Wait for ACK from Microcontroller
          if (I2C1_OUT != 0xFF00) break;
        }
      }
      else {                                 // Slave Write
        wwatch (I2C1_OUT);                    // Wait for data from Microcontroller
				printf("LEARN-IN-Depth.com_E2PROM: Master Write To E2PROM \r\n");
        if (I2C1_OUT > 0xFF) continue;
				adr = 0 ;
        adr = (I2C1_OUT<<8) | 0x70000000;          // Set Memory upper Address
				I2C1_IN = 0xFF00;                     // ACK to Microcontroller
				printf("LEARN-IN-Depth.com_E2PROM: Send ACK \r\n");
				wwatch (I2C1_OUT);                    // Wait for data from Microcontroller
				adr |= I2C1_OUT ;          // Set Memory lower Address
				printf("LEARN-IN-Depth.com_E2PROM: Acess Memory Address=%X \r\n",(adr - 0x70000000));
        I2C1_IN = 0xFF00;                     // ACK to Microcontroller
				printf("LEARN-IN-Depth.com_E2PROM: Send ACK \r\n");
        while (1) {
          wwatch (I2C1_OUT);                  // Wait for data from Microcontroller
						printf("LEARN-IN-Depth.com_E2PROM: I2C1_OUT=0x%x \r\n",I2C1_OUT);
          if (I2C1_OUT > 0xFF) { 				printf("LEARN-IN-Depth.com_E2PROM: break  \r\n"); break; }
          _WBYTE (adr, I2C1_OUT);             // Store Byte in Memory
					printf("LEARN-IN-Depth.com_E2PROM: Write Data=%X \r\n",I2C1_OUT);
          adr++;                             // Increment Address
          I2C1_IN = 0xFF00;                   // ACK to Microcontroller
					printf("LEARN-IN-Depth.com_E2PROM: Send ACK \r\n");
        }
      }
    }
  }
}


SADR = 0x2A
I2C1Memory()     // Start the signal function