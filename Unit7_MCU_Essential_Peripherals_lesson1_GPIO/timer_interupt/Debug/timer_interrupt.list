
timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000234c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800247c  0800247c  0001247c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b8  080024b8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080024b8  080024b8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024b8  080024b8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024b8  080024b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080024c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000006c  0800252c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0800252c  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005270  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e1d  00000000  00000000  00025305  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000268  00000000  00000000  00026128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001f0  00000000  00000000  00026390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000013d0  00000000  00000000  00026580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000035bd  00000000  00000000  00027950  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ab90  00000000  00000000  0002af0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00035a9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b08  00000000  00000000  00035b18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000006c 	.word	0x2000006c
 800014c:	00000000 	.word	0x00000000
 8000150:	08002464 	.word	0x08002464

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000070 	.word	0x20000070
 800016c:	08002464 	.word	0x08002464

08000170 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d101      	bne.n	8000184 <getposition+0x14>
		rval =0;
 8000180:	2300      	movs	r3, #0
 8000182:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8000184:	88fb      	ldrh	r3, [r7, #6]
 8000186:	2b01      	cmp	r3, #1
 8000188:	d101      	bne.n	800018e <getposition+0x1e>
		rval =4;
 800018a:	2304      	movs	r3, #4
 800018c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 800018e:	88fb      	ldrh	r3, [r7, #6]
 8000190:	2b02      	cmp	r3, #2
 8000192:	d101      	bne.n	8000198 <getposition+0x28>
		rval =8;
 8000194:	2308      	movs	r3, #8
 8000196:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8000198:	88fb      	ldrh	r3, [r7, #6]
 800019a:	2b03      	cmp	r3, #3
 800019c:	d101      	bne.n	80001a2 <getposition+0x32>
		rval =12;
 800019e:	230c      	movs	r3, #12
 80001a0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 80001a2:	88fb      	ldrh	r3, [r7, #6]
 80001a4:	2b04      	cmp	r3, #4
 80001a6:	d101      	bne.n	80001ac <getposition+0x3c>
		rval =16;
 80001a8:	2310      	movs	r3, #16
 80001aa:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 80001ac:	88fb      	ldrh	r3, [r7, #6]
 80001ae:	2b05      	cmp	r3, #5
 80001b0:	d101      	bne.n	80001b6 <getposition+0x46>
		rval =20;
 80001b2:	2314      	movs	r3, #20
 80001b4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 80001b6:	88fb      	ldrh	r3, [r7, #6]
 80001b8:	2b06      	cmp	r3, #6
 80001ba:	d101      	bne.n	80001c0 <getposition+0x50>
		rval =24;
 80001bc:	2318      	movs	r3, #24
 80001be:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 80001c0:	88fb      	ldrh	r3, [r7, #6]
 80001c2:	2b07      	cmp	r3, #7
 80001c4:	d101      	bne.n	80001ca <getposition+0x5a>
		rval =28;
 80001c6:	231c      	movs	r3, #28
 80001c8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 80001ca:	88fb      	ldrh	r3, [r7, #6]
 80001cc:	2b08      	cmp	r3, #8
 80001ce:	d101      	bne.n	80001d4 <getposition+0x64>
		rval =0;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 80001d4:	88fb      	ldrh	r3, [r7, #6]
 80001d6:	2b09      	cmp	r3, #9
 80001d8:	d101      	bne.n	80001de <getposition+0x6e>
		rval =4;
 80001da:	2304      	movs	r3, #4
 80001dc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 80001de:	88fb      	ldrh	r3, [r7, #6]
 80001e0:	2b0a      	cmp	r3, #10
 80001e2:	d101      	bne.n	80001e8 <getposition+0x78>
		rval =8;
 80001e4:	2308      	movs	r3, #8
 80001e6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 80001e8:	88fb      	ldrh	r3, [r7, #6]
 80001ea:	2b0b      	cmp	r3, #11
 80001ec:	d101      	bne.n	80001f2 <getposition+0x82>
		rval =12;
 80001ee:	230c      	movs	r3, #12
 80001f0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 80001f2:	88fb      	ldrh	r3, [r7, #6]
 80001f4:	2b0c      	cmp	r3, #12
 80001f6:	d101      	bne.n	80001fc <getposition+0x8c>
		rval =16;
 80001f8:	2310      	movs	r3, #16
 80001fa:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 80001fc:	88fb      	ldrh	r3, [r7, #6]
 80001fe:	2b0d      	cmp	r3, #13
 8000200:	d101      	bne.n	8000206 <getposition+0x96>
		rval =20;
 8000202:	2314      	movs	r3, #20
 8000204:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 8000206:	88fb      	ldrh	r3, [r7, #6]
 8000208:	2b0e      	cmp	r3, #14
 800020a:	d101      	bne.n	8000210 <getposition+0xa0>
		rval =24;
 800020c:	2318      	movs	r3, #24
 800020e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000210:	88fb      	ldrh	r3, [r7, #6]
 8000212:	2b0f      	cmp	r3, #15
 8000214:	d101      	bne.n	800021a <getposition+0xaa>
		rval =28;
 8000216:	231c      	movs	r3, #28
 8000218:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 800021a:	7bfb      	ldrb	r3, [r7, #15]


}
 800021c:	4618      	mov	r0, r3
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr

08000226 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000226:	b580      	push	{r7, lr}
 8000228:	b084      	sub	sp, #16
 800022a:	af00      	add	r7, sp, #0
 800022c:	60f8      	str	r0, [r7, #12]
 800022e:	460b      	mov	r3, r1
 8000230:	607a      	str	r2, [r7, #4]
 8000232:	817b      	strh	r3, [r7, #10]

	if(pin<8){
 8000234:	897b      	ldrh	r3, [r7, #10]
 8000236:	2b07      	cmp	r3, #7
 8000238:	d856      	bhi.n	80002e8 <pinmode+0xc2>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 800023a:	897b      	ldrh	r3, [r7, #10]
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff97 	bl	8000170 <getposition>
 8000242:	4603      	mov	r3, r0
 8000244:	461a      	mov	r2, r3
 8000246:	230f      	movs	r3, #15
 8000248:	4093      	lsls	r3, r2
 800024a:	43da      	mvns	r2, r3
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	401a      	ands	r2, r3
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2b08      	cmp	r3, #8
 800025a:	d002      	beq.n	8000262 <pinmode+0x3c>
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b18      	cmp	r3, #24
 8000260:	d133      	bne.n	80002ca <pinmode+0xa4>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b18      	cmp	r3, #24
 8000266:	d117      	bne.n	8000298 <pinmode+0x72>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000268:	897b      	ldrh	r3, [r7, #10]
 800026a:	4618      	mov	r0, r3
 800026c:	f7ff ff80 	bl	8000170 <getposition>
 8000270:	4603      	mov	r3, r0
 8000272:	461a      	mov	r2, r3
 8000274:	2308      	movs	r3, #8
 8000276:	fa03 f202 	lsl.w	r2, r3, r2
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	431a      	orrs	r2, r3
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	897a      	ldrh	r2, [r7, #10]
 800028a:	2101      	movs	r1, #1
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	431a      	orrs	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000296:	e081      	b.n	800039c <pinmode+0x176>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000298:	897b      	ldrh	r3, [r7, #10]
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ff68 	bl	8000170 <getposition>
 80002a0:	4603      	mov	r3, r0
 80002a2:	461a      	mov	r2, r3
 80002a4:	2308      	movs	r3, #8
 80002a6:	fa03 f202 	lsl.w	r2, r3, r2
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	431a      	orrs	r2, r3
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	897a      	ldrh	r2, [r7, #10]
 80002ba:	2101      	movs	r1, #1
 80002bc:	fa01 f202 	lsl.w	r2, r1, r2
 80002c0:	43d2      	mvns	r2, r2
 80002c2:	401a      	ands	r2, r3
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80002c8:	e068      	b.n	800039c <pinmode+0x176>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 80002ca:	897b      	ldrh	r3, [r7, #10]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff4f 	bl	8000170 <getposition>
 80002d2:	4603      	mov	r3, r0
 80002d4:	461a      	mov	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	fa03 f202 	lsl.w	r2, r3, r2
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	431a      	orrs	r2, r3
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	601a      	str	r2, [r3, #0]

	}



}
 80002e6:	e059      	b.n	800039c <pinmode+0x176>
	else if(pin>7){
 80002e8:	897b      	ldrh	r3, [r7, #10]
 80002ea:	2b07      	cmp	r3, #7
 80002ec:	d956      	bls.n	800039c <pinmode+0x176>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 80002ee:	897b      	ldrh	r3, [r7, #10]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff3d 	bl	8000170 <getposition>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	230f      	movs	r3, #15
 80002fc:	4093      	lsls	r3, r2
 80002fe:	43da      	mvns	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	401a      	ands	r2, r3
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b08      	cmp	r3, #8
 800030e:	d002      	beq.n	8000316 <pinmode+0xf0>
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b18      	cmp	r3, #24
 8000314:	d133      	bne.n	800037e <pinmode+0x158>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b18      	cmp	r3, #24
 800031a:	d117      	bne.n	800034c <pinmode+0x126>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800031c:	897b      	ldrh	r3, [r7, #10]
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff26 	bl	8000170 <getposition>
 8000324:	4603      	mov	r3, r0
 8000326:	461a      	mov	r2, r3
 8000328:	2308      	movs	r3, #8
 800032a:	fa03 f202 	lsl.w	r2, r3, r2
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	431a      	orrs	r2, r3
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	897a      	ldrh	r2, [r7, #10]
 800033e:	2101      	movs	r1, #1
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	431a      	orrs	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800034a:	e027      	b.n	800039c <pinmode+0x176>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800034c:	897b      	ldrh	r3, [r7, #10]
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ff0e 	bl	8000170 <getposition>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	2308      	movs	r3, #8
 800035a:	fa03 f202 	lsl.w	r2, r3, r2
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	431a      	orrs	r2, r3
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	897a      	ldrh	r2, [r7, #10]
 800036e:	2101      	movs	r1, #1
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	43d2      	mvns	r2, r2
 8000376:	401a      	ands	r2, r3
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800037c:	e00e      	b.n	800039c <pinmode+0x176>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 800037e:	897b      	ldrh	r3, [r7, #10]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff fef5 	bl	8000170 <getposition>
 8000386:	4603      	mov	r3, r0
 8000388:	461a      	mov	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	fa03 f202 	lsl.w	r2, r3, r2
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	431a      	orrs	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	605a      	str	r2, [r3, #4]
}
 800039a:	e7ff      	b.n	800039c <pinmode+0x176>
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_typeDef* GPIOx,uint16_t pin,uint8_t status){
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	460b      	mov	r3, r1
 80003ae:	807b      	strh	r3, [r7, #2]
 80003b0:	4613      	mov	r3, r2
 80003b2:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 80003b4:	787b      	ldrb	r3, [r7, #1]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d009      	beq.n	80003ce <pinwrite+0x2a>
		GPIOx->GPIOx_ODR |=(1<<pin);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	887a      	ldrh	r2, [r7, #2]
 80003c0:	2101      	movs	r1, #1
 80003c2:	fa01 f202 	lsl.w	r2, r1, r2
 80003c6:	431a      	orrs	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->GPIOx_ODR &=~(1<<pin);

}
 80003cc:	e009      	b.n	80003e2 <pinwrite+0x3e>
	else GPIOx->GPIOx_ODR &=~(1<<pin);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	68db      	ldr	r3, [r3, #12]
 80003d2:	887a      	ldrh	r2, [r7, #2]
 80003d4:	2101      	movs	r1, #1
 80003d6:	fa01 f202 	lsl.w	r2, r1, r2
 80003da:	43d2      	mvns	r2, r2
 80003dc:	401a      	ands	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	60da      	str	r2, [r3, #12]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr

080003ec <TogglePin>:
uint16_t READ_PORT(GPIO_typeDef* GPIOx){

	return GPIOx->GPIOx_IDR;
}

void TogglePin(GPIO_typeDef* GPIOx, uint16_t pin){
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIOx_ODR ^=(1<<pin);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	887a      	ldrh	r2, [r7, #2]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f202 	lsl.w	r2, r1, r2
 8000404:	405a      	eors	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	60da      	str	r2, [r3, #12]
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr

08000414 <delay>:

	TIMERx->TIMx_CR1 |=(1<<0);//enable the timer

}

void delay(uint16_t time,uint8_t U,uint32_t clk){
 8000414:	b480      	push	{r7}
 8000416:	b089      	sub	sp, #36	; 0x24
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	603a      	str	r2, [r7, #0]
 800041e:	80fb      	strh	r3, [r7, #6]
 8000420:	460b      	mov	r3, r1
 8000422:	717b      	strb	r3, [r7, #5]
	TIMER2_CLOCK_Enable();//enable timer2 clock
 8000424:	4b4f      	ldr	r3, [pc, #316]	; (8000564 <delay+0x150>)
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	4a4e      	ldr	r2, [pc, #312]	; (8000564 <delay+0x150>)
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	61d3      	str	r3, [r2, #28]
	delay_TIMER->TIMx_CR1 &=~(1<<0);
 8000430:	4b4d      	ldr	r3, [pc, #308]	; (8000568 <delay+0x154>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	4b4c      	ldr	r3, [pc, #304]	; (8000568 <delay+0x154>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f022 0201 	bic.w	r2, r2, #1
 800043e:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8000440:	2301      	movs	r3, #1
 8000442:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 8000448:	2301      	movs	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
	uint32_t unit =1000;
 800044c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000450:	613b      	str	r3, [r7, #16]
	uint8_t  increase=2;
 8000452:	2302      	movs	r3, #2
 8000454:	73fb      	strb	r3, [r7, #15]

	if (U == 0){
 8000456:	797b      	ldrb	r3, [r7, #5]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d10d      	bne.n	8000478 <delay+0x64>
		unit = 1000;
 800045c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000460:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 100;
 8000462:	88fb      	ldrh	r3, [r7, #6]
 8000464:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000468:	4293      	cmp	r3, r2
 800046a:	d902      	bls.n	8000472 <delay+0x5e>
 800046c:	2364      	movs	r3, #100	; 0x64
 800046e:	73fb      	strb	r3, [r7, #15]
 8000470:	e030      	b.n	80004d4 <delay+0xc0>
		else increase = 10;
 8000472:	230a      	movs	r3, #10
 8000474:	73fb      	strb	r3, [r7, #15]
 8000476:	e02d      	b.n	80004d4 <delay+0xc0>
	}
	else {
		unit = 1000000;
 8000478:	4b3c      	ldr	r3, [pc, #240]	; (800056c <delay+0x158>)
 800047a:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 10;
 800047c:	88fb      	ldrh	r3, [r7, #6]
 800047e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000482:	4293      	cmp	r3, r2
 8000484:	d902      	bls.n	800048c <delay+0x78>
 8000486:	230a      	movs	r3, #10
 8000488:	73fb      	strb	r3, [r7, #15]
 800048a:	e023      	b.n	80004d4 <delay+0xc0>
		else increase = 5;
 800048c:	2305      	movs	r3, #5
 800048e:	73fb      	strb	r3, [r7, #15]
	}

	while(user_flage==1){
 8000490:	e020      	b.n	80004d4 <delay+0xc0>
		user_top = (clk/unit*time)/( user_pre );
 8000492:	683a      	ldr	r2, [r7, #0]
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	fbb2 f3f3 	udiv	r3, r2, r3
 800049a:	88fa      	ldrh	r2, [r7, #6]
 800049c:	fb02 f203 	mul.w	r2, r2, r3
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004a6:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 80004a8:	69bb      	ldr	r3, [r7, #24]
 80004aa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80004ae:	d30f      	bcc.n	80004d0 <delay+0xbc>

			if(user_pre>65530){
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d905      	bls.n	80004c6 <delay+0xb2>
				user_pre=65530;
 80004ba:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 80004be:	617b      	str	r3, [r7, #20]
				user_flage=0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	77fb      	strb	r3, [r7, #31]
 80004c4:	e006      	b.n	80004d4 <delay+0xc0>
			}
			else user_pre+=increase;
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	4413      	add	r3, r2
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	e001      	b.n	80004d4 <delay+0xc0>

		}
		else{
			user_flage=0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 80004d4:	7ffb      	ldrb	r3, [r7, #31]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d0db      	beq.n	8000492 <delay+0x7e>
		}
	}
	delay_TIMER->TIMx_CR1 &=~(1<<0);
 80004da:	4b23      	ldr	r3, [pc, #140]	; (8000568 <delay+0x154>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b21      	ldr	r3, [pc, #132]	; (8000568 <delay+0x154>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f022 0201 	bic.w	r2, r2, #1
 80004e8:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);
 80004ea:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <delay+0x154>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <delay+0x154>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f042 0204 	orr.w	r2, r2, #4
 80004f8:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <delay+0x154>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	68da      	ldr	r2, [r3, #12]
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <delay+0x154>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f042 0201 	orr.w	r2, r2, #1
 8000508:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <delay+0x154>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	69ba      	ldr	r2, [r7, #24]
 8000510:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <delay+0x154>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	697a      	ldr	r2, [r7, #20]
 8000518:	3a01      	subs	r2, #1
 800051a:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <delay+0x154>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <delay+0x154>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f042 0201 	orr.w	r2, r2, #1
 800052a:	615a      	str	r2, [r3, #20]
	//		0: No action
	//		1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
	//		counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//		the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//		value (TIMx_ARR) if DIR=1 (downcounting).
	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <delay+0x154>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <delay+0x154>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f042 0201 	orr.w	r2, r2, #1
 800053a:	601a      	str	r2, [r3, #0]
	delay_flag=1;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <delay+0x15c>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <delay+0x160>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <delay+0x160>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 800054e:	bf00      	nop
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <delay+0x15c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d1fb      	bne.n	8000550 <delay+0x13c>

	}
}
 8000558:	bf00      	nop
 800055a:	3724      	adds	r7, #36	; 0x24
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000
 8000568:	20000004 	.word	0x20000004
 800056c:	000f4240 	.word	0x000f4240
 8000570:	20000000 	.word	0x20000000
 8000574:	e000e100 	.word	0xe000e100

08000578 <TIME_CALCULATION>:

	NVIC_TIM3_global_interrupt_Enable;

}

uint32_t TIME_CALCULATION(uint32_t clk,uint8_t TIMER_ST){
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
	if(TIMER_ST==TIMER_START){
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d132      	bne.n	80005f0 <TIME_CALCULATION+0x78>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 800058a:	4b2f      	ldr	r3, [pc, #188]	; (8000648 <TIME_CALCULATION+0xd0>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a2e      	ldr	r2, [pc, #184]	; (8000648 <TIME_CALCULATION+0xd0>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	61d3      	str	r3, [r2, #28]
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 8000596:	4b2d      	ldr	r3, [pc, #180]	; (800064c <TIME_CALCULATION+0xd4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a2c      	ldr	r2, [pc, #176]	; (800064c <TIME_CALCULATION+0xd4>)
 800059c:	f023 0301 	bic.w	r3, r3, #1
 80005a0:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_CR1  |=(1<<2);
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <TIME_CALCULATION+0xd4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a29      	ldr	r2, [pc, #164]	; (800064c <TIME_CALCULATION+0xd4>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_DIER |=(1<<0);//Update interrupt enable
 80005ae:	4b27      	ldr	r3, [pc, #156]	; (800064c <TIME_CALCULATION+0xd4>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	4a26      	ldr	r2, [pc, #152]	; (800064c <TIME_CALCULATION+0xd4>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	60d3      	str	r3, [r2, #12]

		TIM4->TIMx_ARR=64000;//peak value 8ms of freq=8000000hz
 80005ba:	4b24      	ldr	r3, [pc, #144]	; (800064c <TIME_CALCULATION+0xd4>)
 80005bc:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM4->TIMx_PSC=0;//prescaller
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <TIME_CALCULATION+0xd4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28

		TIM4->TIMx_EGR |=(1<<0);//		Bit 0 UG: Update generation
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <TIME_CALCULATION+0xd4>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a1f      	ldr	r2, [pc, #124]	; (800064c <TIME_CALCULATION+0xd4>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6153      	str	r3, [r2, #20]

		TIM4->TIMx_CR1 |=(1<<0);//enable the timer
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <TIME_CALCULATION+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a1c      	ldr	r2, [pc, #112]	; (800064c <TIME_CALCULATION+0xd4>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]
		NVIC_TIM4_global_interrupt_Enable;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <TIME_CALCULATION+0xd8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1a      	ldr	r2, [pc, #104]	; (8000650 <TIME_CALCULATION+0xd8>)
 80005e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80005ea:	6013      	str	r3, [r2, #0]
		return 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	e025      	b.n	800063c <TIME_CALCULATION+0xc4>
	}
	else {
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <TIME_CALCULATION+0xd4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a15      	ldr	r2, [pc, #84]	; (800064c <TIME_CALCULATION+0xd4>)
 80005f6:	f023 0301 	bic.w	r3, r3, #1
 80005fa:	6013      	str	r3, [r2, #0]
		timer_ticks=TIM4->TIMx_CNT;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <TIME_CALCULATION+0xd4>)
 80005fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000600:	b29a      	uxth	r2, r3
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <TIME_CALCULATION+0xdc>)
 8000604:	801a      	strh	r2, [r3, #0]
		uint32_t X=((timer_ticks+(overflowtims*64000))/(clk/1000000));
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <TIME_CALCULATION+0xdc>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <TIME_CALCULATION+0xe0>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8000616:	fb03 f301 	mul.w	r3, r3, r1
 800061a:	4413      	add	r3, r2
 800061c:	4619      	mov	r1, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <TIME_CALCULATION+0xe4>)
 8000622:	fba2 2303 	umull	r2, r3, r2, r3
 8000626:	0c9b      	lsrs	r3, r3, #18
 8000628:	fbb1 f3f3 	udiv	r3, r1, r3
 800062c:	60fb      	str	r3, [r7, #12]
		overflowtims=0;
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <TIME_CALCULATION+0xe0>)
 8000630:	2200      	movs	r2, #0
 8000632:	801a      	strh	r2, [r3, #0]
		timer_ticks=0;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <TIME_CALCULATION+0xdc>)
 8000636:	2200      	movs	r2, #0
 8000638:	801a      	strh	r2, [r3, #0]
		return X;
 800063a:	68fb      	ldr	r3, [r7, #12]
	}
}
 800063c:	4618      	mov	r0, r3
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000
 800064c:	40000800 	.word	0x40000800
 8000650:	e000e100 	.word	0xe000e100
 8000654:	2000008a 	.word	0x2000008a
 8000658:	20000088 	.word	0x20000088
 800065c:	431bde83 	.word	0x431bde83

08000660 <TIM2_IRQHandler>:


void TIM2_IRQHandler(){
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <TIM2_IRQHandler+0x34>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	691a      	ldr	r2, [r3, #16]
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <TIM2_IRQHandler+0x34>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f022 0201 	bic.w	r2, r2, #1
 8000672:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <TIM2_IRQHandler+0x38>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <TIM2_IRQHandler+0x34>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <TIM2_IRQHandler+0x34>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f022 0201 	bic.w	r2, r2, #1
 8000688:	601a      	str	r2, [r3, #0]

}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000004 	.word	0x20000004
 8000698:	20000000 	.word	0x20000000

0800069c <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin10,LOW);
	ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <TIM3_IRQHandler+0x30>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <TIM3_IRQHandler+0x30>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f022 0201 	bic.w	r2, r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
	ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <TIM3_IRQHandler+0x30>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	691a      	ldr	r2, [r3, #16]
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <TIM3_IRQHandler+0x30>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f022 0201 	bic.w	r2, r2, #1
 80006be:	611a      	str	r2, [r3, #16]
	ISRcalback[0]();
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <TIM3_IRQHandler+0x34>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4798      	blx	r3
	//NVIC_TIM3_global_interrupt_Disable;
	//pinwrite(GPIOB, pin10,HIGH);
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000ac 	.word	0x200000ac
 80006d0:	200000a4 	.word	0x200000a4

080006d4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <TIM4_IRQHandler+0x24>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <TIM4_IRQHandler+0x24>)
 80006de:	f023 0301 	bic.w	r3, r3, #1
 80006e2:	6113      	str	r3, [r2, #16]
	overflowtims++;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <TIM4_IRQHandler+0x28>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <TIM4_IRQHandler+0x28>)
 80006ee:	801a      	strh	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	40000800 	.word	0x40000800
 80006fc:	20000088 	.word	0x20000088

08000700 <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d854      	bhi.n	80007ba <Enable_NVIC+0xba>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <Enable_NVIC+0x18>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000759 	.word	0x08000759
 800071c:	08000767 	.word	0x08000767
 8000720:	08000775 	.word	0x08000775
 8000724:	08000783 	.word	0x08000783
 8000728:	08000791 	.word	0x08000791
 800072c:	0800079f 	.word	0x0800079f
 8000730:	0800079f 	.word	0x0800079f
 8000734:	0800079f 	.word	0x0800079f
 8000738:	0800079f 	.word	0x0800079f
 800073c:	0800079f 	.word	0x0800079f
 8000740:	080007ad 	.word	0x080007ad
 8000744:	080007ad 	.word	0x080007ad
 8000748:	080007ad 	.word	0x080007ad
 800074c:	080007ad 	.word	0x080007ad
 8000750:	080007ad 	.word	0x080007ad
 8000754:	080007ad 	.word	0x080007ad
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <Enable_NVIC+0xc4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <Enable_NVIC+0xc4>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000762:	6013      	str	r3, [r2, #0]
		break;
 8000764:	e029      	b.n	80007ba <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <Enable_NVIC+0xc4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a16      	ldr	r2, [pc, #88]	; (80007c4 <Enable_NVIC+0xc4>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6013      	str	r3, [r2, #0]
		break;
 8000772:	e022      	b.n	80007ba <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <Enable_NVIC+0xc4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <Enable_NVIC+0xc4>)
 800077a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800077e:	6013      	str	r3, [r2, #0]
		break;
 8000780:	e01b      	b.n	80007ba <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <Enable_NVIC+0xc4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <Enable_NVIC+0xc4>)
 8000788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800078c:	6013      	str	r3, [r2, #0]
		break;
 800078e:	e014      	b.n	80007ba <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <Enable_NVIC+0xc4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <Enable_NVIC+0xc4>)
 8000796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800079a:	6013      	str	r3, [r2, #0]
		break;
 800079c:	e00d      	b.n	80007ba <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <Enable_NVIC+0xc4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <Enable_NVIC+0xc4>)
 80007a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007a8:	6013      	str	r3, [r2, #0]
		break;
 80007aa:	e006      	b.n	80007ba <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <Enable_NVIC+0xc8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <Enable_NVIC+0xc8>)
 80007b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b6:	6013      	str	r3, [r2, #0]
		break;
 80007b8:	bf00      	nop
	}


}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000e104 	.word	0xe000e104

080007cc <EXTI>:
 * @param [in]      -function_addres : app ISR function
 * @retval          - none
 * Note             -
 *================================================================ */

void EXTI(GPIO_typeDef* PORTx ,uint16_t pin,uint16_t triggercase,void *function_addres(void)){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	460b      	mov	r3, r1
 80007d8:	817b      	strh	r3, [r7, #10]
 80007da:	4613      	mov	r3, r2
 80007dc:	813b      	strh	r3, [r7, #8]

	pinmode(PORTx,pin,GPIO_MODE_INTPUT_AF);//set pin to _INTPUT_AF
 80007de:	897b      	ldrh	r3, [r7, #10]
 80007e0:	2204      	movs	r2, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f7ff fd1e 	bl	8000226 <pinmode>
		//	0000: PA[x] pin
		//	0001: PB[x] pin
		//	0010: PC[x] pin
		//	0011: PD[x] pin

		switch(pin){
 80007ea:	897b      	ldrh	r3, [r7, #10]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	f200 8385 	bhi.w	8000efc <EXTI+0x730>
 80007f2:	a201      	add	r2, pc, #4	; (adr r2, 80007f8 <EXTI+0x2c>)
 80007f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f8:	08000839 	.word	0x08000839
 80007fc:	0800089f 	.word	0x0800089f
 8000800:	08000905 	.word	0x08000905
 8000804:	0800096b 	.word	0x0800096b
 8000808:	080009d1 	.word	0x080009d1
 800080c:	08000a37 	.word	0x08000a37
 8000810:	08000ab1 	.word	0x08000ab1
 8000814:	08000b17 	.word	0x08000b17
 8000818:	08000b7d 	.word	0x08000b7d
 800081c:	08000be3 	.word	0x08000be3
 8000820:	08000c49 	.word	0x08000c49
 8000824:	08000caf 	.word	0x08000caf
 8000828:	08000d2b 	.word	0x08000d2b
 800082c:	08000d91 	.word	0x08000d91
 8000830:	08000df7 	.word	0x08000df7
 8000834:	08000e5b 	.word	0x08000e5b
		case pin0:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<0);
 8000838:	4b92      	ldr	r3, [pc, #584]	; (8000a84 <EXTI+0x2b8>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	4a91      	ldr	r2, [pc, #580]	; (8000a84 <EXTI+0x2b8>)
 800083e:	f023 030f 	bic.w	r3, r3, #15
 8000842:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<0);}
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4a90      	ldr	r2, [pc, #576]	; (8000a88 <EXTI+0x2bc>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d106      	bne.n	800085a <EXTI+0x8e>
 800084c:	4b8d      	ldr	r3, [pc, #564]	; (8000a84 <EXTI+0x2b8>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	4a8c      	ldr	r2, [pc, #560]	; (8000a84 <EXTI+0x2b8>)
 8000852:	f023 030f 	bic.w	r3, r3, #15
 8000856:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}

			break;
 8000858:	e331      	b.n	8000ebe <EXTI+0x6f2>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4a8b      	ldr	r2, [pc, #556]	; (8000a8c <EXTI+0x2c0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <EXTI+0xa4>
 8000862:	4b88      	ldr	r3, [pc, #544]	; (8000a84 <EXTI+0x2b8>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	4a87      	ldr	r2, [pc, #540]	; (8000a84 <EXTI+0x2b8>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6093      	str	r3, [r2, #8]
			break;
 800086e:	e326      	b.n	8000ebe <EXTI+0x6f2>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4a87      	ldr	r2, [pc, #540]	; (8000a90 <EXTI+0x2c4>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d106      	bne.n	8000886 <EXTI+0xba>
 8000878:	4b82      	ldr	r3, [pc, #520]	; (8000a84 <EXTI+0x2b8>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	4a81      	ldr	r2, [pc, #516]	; (8000a84 <EXTI+0x2b8>)
 800087e:	f043 0302 	orr.w	r3, r3, #2
 8000882:	6093      	str	r3, [r2, #8]
			break;
 8000884:	e31b      	b.n	8000ebe <EXTI+0x6f2>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	4a82      	ldr	r2, [pc, #520]	; (8000a94 <EXTI+0x2c8>)
 800088a:	4293      	cmp	r3, r2
 800088c:	f040 8317 	bne.w	8000ebe <EXTI+0x6f2>
 8000890:	4b7c      	ldr	r3, [pc, #496]	; (8000a84 <EXTI+0x2b8>)
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	4a7b      	ldr	r2, [pc, #492]	; (8000a84 <EXTI+0x2b8>)
 8000896:	f043 0303 	orr.w	r3, r3, #3
 800089a:	6093      	str	r3, [r2, #8]
			break;
 800089c:	e30f      	b.n	8000ebe <EXTI+0x6f2>
		case pin1:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<4);
 800089e:	4b79      	ldr	r3, [pc, #484]	; (8000a84 <EXTI+0x2b8>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	4a78      	ldr	r2, [pc, #480]	; (8000a84 <EXTI+0x2b8>)
 80008a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008a8:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<4);}
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	4a76      	ldr	r2, [pc, #472]	; (8000a88 <EXTI+0x2bc>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d106      	bne.n	80008c0 <EXTI+0xf4>
 80008b2:	4b74      	ldr	r3, [pc, #464]	; (8000a84 <EXTI+0x2b8>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	4a73      	ldr	r2, [pc, #460]	; (8000a84 <EXTI+0x2b8>)
 80008b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008bc:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}

			break;
 80008be:	e300      	b.n	8000ec2 <EXTI+0x6f6>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4a72      	ldr	r2, [pc, #456]	; (8000a8c <EXTI+0x2c0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d106      	bne.n	80008d6 <EXTI+0x10a>
 80008c8:	4b6e      	ldr	r3, [pc, #440]	; (8000a84 <EXTI+0x2b8>)
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	4a6d      	ldr	r2, [pc, #436]	; (8000a84 <EXTI+0x2b8>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6093      	str	r3, [r2, #8]
			break;
 80008d4:	e2f5      	b.n	8000ec2 <EXTI+0x6f6>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4a6d      	ldr	r2, [pc, #436]	; (8000a90 <EXTI+0x2c4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d106      	bne.n	80008ec <EXTI+0x120>
 80008de:	4b69      	ldr	r3, [pc, #420]	; (8000a84 <EXTI+0x2b8>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	4a68      	ldr	r2, [pc, #416]	; (8000a84 <EXTI+0x2b8>)
 80008e4:	f043 0320 	orr.w	r3, r3, #32
 80008e8:	6093      	str	r3, [r2, #8]
			break;
 80008ea:	e2ea      	b.n	8000ec2 <EXTI+0x6f6>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4a69      	ldr	r2, [pc, #420]	; (8000a94 <EXTI+0x2c8>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	f040 82e6 	bne.w	8000ec2 <EXTI+0x6f6>
 80008f6:	4b63      	ldr	r3, [pc, #396]	; (8000a84 <EXTI+0x2b8>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	4a62      	ldr	r2, [pc, #392]	; (8000a84 <EXTI+0x2b8>)
 80008fc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000900:	6093      	str	r3, [r2, #8]
			break;
 8000902:	e2de      	b.n	8000ec2 <EXTI+0x6f6>
		case pin2:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<8);
 8000904:	4b5f      	ldr	r3, [pc, #380]	; (8000a84 <EXTI+0x2b8>)
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	4a5e      	ldr	r2, [pc, #376]	; (8000a84 <EXTI+0x2b8>)
 800090a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800090e:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<8);}
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4a5d      	ldr	r2, [pc, #372]	; (8000a88 <EXTI+0x2bc>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d106      	bne.n	8000926 <EXTI+0x15a>
 8000918:	4b5a      	ldr	r3, [pc, #360]	; (8000a84 <EXTI+0x2b8>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	4a59      	ldr	r2, [pc, #356]	; (8000a84 <EXTI+0x2b8>)
 800091e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000922:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}

			break;
 8000924:	e2cf      	b.n	8000ec6 <EXTI+0x6fa>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4a58      	ldr	r2, [pc, #352]	; (8000a8c <EXTI+0x2c0>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d106      	bne.n	800093c <EXTI+0x170>
 800092e:	4b55      	ldr	r3, [pc, #340]	; (8000a84 <EXTI+0x2b8>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	4a54      	ldr	r2, [pc, #336]	; (8000a84 <EXTI+0x2b8>)
 8000934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000938:	6093      	str	r3, [r2, #8]
			break;
 800093a:	e2c4      	b.n	8000ec6 <EXTI+0x6fa>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4a54      	ldr	r2, [pc, #336]	; (8000a90 <EXTI+0x2c4>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d106      	bne.n	8000952 <EXTI+0x186>
 8000944:	4b4f      	ldr	r3, [pc, #316]	; (8000a84 <EXTI+0x2b8>)
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	4a4e      	ldr	r2, [pc, #312]	; (8000a84 <EXTI+0x2b8>)
 800094a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800094e:	6093      	str	r3, [r2, #8]
			break;
 8000950:	e2b9      	b.n	8000ec6 <EXTI+0x6fa>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4a4f      	ldr	r2, [pc, #316]	; (8000a94 <EXTI+0x2c8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	f040 82b5 	bne.w	8000ec6 <EXTI+0x6fa>
 800095c:	4b49      	ldr	r3, [pc, #292]	; (8000a84 <EXTI+0x2b8>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	4a48      	ldr	r2, [pc, #288]	; (8000a84 <EXTI+0x2b8>)
 8000962:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000966:	6093      	str	r3, [r2, #8]
			break;
 8000968:	e2ad      	b.n	8000ec6 <EXTI+0x6fa>
		case pin3:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<12);
 800096a:	4b46      	ldr	r3, [pc, #280]	; (8000a84 <EXTI+0x2b8>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	4a45      	ldr	r2, [pc, #276]	; (8000a84 <EXTI+0x2b8>)
 8000970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000974:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<12);}
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4a43      	ldr	r2, [pc, #268]	; (8000a88 <EXTI+0x2bc>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d106      	bne.n	800098c <EXTI+0x1c0>
 800097e:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <EXTI+0x2b8>)
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	4a40      	ldr	r2, [pc, #256]	; (8000a84 <EXTI+0x2b8>)
 8000984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000988:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}

			break;
 800098a:	e29e      	b.n	8000eca <EXTI+0x6fe>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4a3f      	ldr	r2, [pc, #252]	; (8000a8c <EXTI+0x2c0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d106      	bne.n	80009a2 <EXTI+0x1d6>
 8000994:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <EXTI+0x2b8>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	4a3a      	ldr	r2, [pc, #232]	; (8000a84 <EXTI+0x2b8>)
 800099a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800099e:	6093      	str	r3, [r2, #8]
			break;
 80009a0:	e293      	b.n	8000eca <EXTI+0x6fe>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	4a3a      	ldr	r2, [pc, #232]	; (8000a90 <EXTI+0x2c4>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d106      	bne.n	80009b8 <EXTI+0x1ec>
 80009aa:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <EXTI+0x2b8>)
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	4a35      	ldr	r2, [pc, #212]	; (8000a84 <EXTI+0x2b8>)
 80009b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009b4:	6093      	str	r3, [r2, #8]
			break;
 80009b6:	e288      	b.n	8000eca <EXTI+0x6fe>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4a36      	ldr	r2, [pc, #216]	; (8000a94 <EXTI+0x2c8>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	f040 8284 	bne.w	8000eca <EXTI+0x6fe>
 80009c2:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <EXTI+0x2b8>)
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	4a2f      	ldr	r2, [pc, #188]	; (8000a84 <EXTI+0x2b8>)
 80009c8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80009cc:	6093      	str	r3, [r2, #8]
			break;
 80009ce:	e27c      	b.n	8000eca <EXTI+0x6fe>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin4:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<0);
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <EXTI+0x2b8>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	4a2b      	ldr	r2, [pc, #172]	; (8000a84 <EXTI+0x2b8>)
 80009d6:	f023 030f 	bic.w	r3, r3, #15
 80009da:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<0);}
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <EXTI+0x2bc>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d106      	bne.n	80009f2 <EXTI+0x226>
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <EXTI+0x2b8>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <EXTI+0x2b8>)
 80009ea:	f023 030f 	bic.w	r3, r3, #15
 80009ee:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}

			break;
 80009f0:	e26d      	b.n	8000ece <EXTI+0x702>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4a25      	ldr	r2, [pc, #148]	; (8000a8c <EXTI+0x2c0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d106      	bne.n	8000a08 <EXTI+0x23c>
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <EXTI+0x2b8>)
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <EXTI+0x2b8>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	60d3      	str	r3, [r2, #12]
			break;
 8000a06:	e262      	b.n	8000ece <EXTI+0x702>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <EXTI+0x2c4>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d106      	bne.n	8000a1e <EXTI+0x252>
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <EXTI+0x2b8>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <EXTI+0x2b8>)
 8000a16:	f043 0302 	orr.w	r3, r3, #2
 8000a1a:	60d3      	str	r3, [r2, #12]
			break;
 8000a1c:	e257      	b.n	8000ece <EXTI+0x702>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <EXTI+0x2c8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	f040 8253 	bne.w	8000ece <EXTI+0x702>
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <EXTI+0x2b8>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <EXTI+0x2b8>)
 8000a2e:	f043 0303 	orr.w	r3, r3, #3
 8000a32:	60d3      	str	r3, [r2, #12]
			break;
 8000a34:	e24b      	b.n	8000ece <EXTI+0x702>
		case pin5:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<4);
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <EXTI+0x2b8>)
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <EXTI+0x2b8>)
 8000a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a40:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<4);}
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <EXTI+0x2bc>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d106      	bne.n	8000a58 <EXTI+0x28c>
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <EXTI+0x2b8>)
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <EXTI+0x2b8>)
 8000a50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a54:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}

			break;
 8000a56:	e23c      	b.n	8000ed2 <EXTI+0x706>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <EXTI+0x2c0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d106      	bne.n	8000a6e <EXTI+0x2a2>
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <EXTI+0x2b8>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <EXTI+0x2b8>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	60d3      	str	r3, [r2, #12]
			break;
 8000a6c:	e231      	b.n	8000ed2 <EXTI+0x706>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <EXTI+0x2c4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d110      	bne.n	8000a98 <EXTI+0x2cc>
 8000a76:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <EXTI+0x2b8>)
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	4a02      	ldr	r2, [pc, #8]	; (8000a84 <EXTI+0x2b8>)
 8000a7c:	f043 0320 	orr.w	r3, r3, #32
 8000a80:	60d3      	str	r3, [r2, #12]
			break;
 8000a82:	e226      	b.n	8000ed2 <EXTI+0x706>
 8000a84:	40010000 	.word	0x40010000
 8000a88:	40010800 	.word	0x40010800
 8000a8c:	40010c00 	.word	0x40010c00
 8000a90:	40011000 	.word	0x40011000
 8000a94:	40011400 	.word	0x40011400
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4a93      	ldr	r2, [pc, #588]	; (8000ce8 <EXTI+0x51c>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	f040 8218 	bne.w	8000ed2 <EXTI+0x706>
 8000aa2:	4b92      	ldr	r3, [pc, #584]	; (8000cec <EXTI+0x520>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	4a91      	ldr	r2, [pc, #580]	; (8000cec <EXTI+0x520>)
 8000aa8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000aac:	60d3      	str	r3, [r2, #12]
			break;
 8000aae:	e210      	b.n	8000ed2 <EXTI+0x706>
		case pin6:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<8);
 8000ab0:	4b8e      	ldr	r3, [pc, #568]	; (8000cec <EXTI+0x520>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	4a8d      	ldr	r2, [pc, #564]	; (8000cec <EXTI+0x520>)
 8000ab6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000aba:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<8);}
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4a8c      	ldr	r2, [pc, #560]	; (8000cf0 <EXTI+0x524>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d106      	bne.n	8000ad2 <EXTI+0x306>
 8000ac4:	4b89      	ldr	r3, [pc, #548]	; (8000cec <EXTI+0x520>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	4a88      	ldr	r2, [pc, #544]	; (8000cec <EXTI+0x520>)
 8000aca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ace:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}

			break;
 8000ad0:	e201      	b.n	8000ed6 <EXTI+0x70a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	4a87      	ldr	r2, [pc, #540]	; (8000cf4 <EXTI+0x528>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d106      	bne.n	8000ae8 <EXTI+0x31c>
 8000ada:	4b84      	ldr	r3, [pc, #528]	; (8000cec <EXTI+0x520>)
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	4a83      	ldr	r2, [pc, #524]	; (8000cec <EXTI+0x520>)
 8000ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae4:	60d3      	str	r3, [r2, #12]
			break;
 8000ae6:	e1f6      	b.n	8000ed6 <EXTI+0x70a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4a83      	ldr	r2, [pc, #524]	; (8000cf8 <EXTI+0x52c>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d106      	bne.n	8000afe <EXTI+0x332>
 8000af0:	4b7e      	ldr	r3, [pc, #504]	; (8000cec <EXTI+0x520>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	4a7d      	ldr	r2, [pc, #500]	; (8000cec <EXTI+0x520>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afa:	60d3      	str	r3, [r2, #12]
			break;
 8000afc:	e1eb      	b.n	8000ed6 <EXTI+0x70a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4a79      	ldr	r2, [pc, #484]	; (8000ce8 <EXTI+0x51c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	f040 81e7 	bne.w	8000ed6 <EXTI+0x70a>
 8000b08:	4b78      	ldr	r3, [pc, #480]	; (8000cec <EXTI+0x520>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	4a77      	ldr	r2, [pc, #476]	; (8000cec <EXTI+0x520>)
 8000b0e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000b12:	60d3      	str	r3, [r2, #12]
			break;
 8000b14:	e1df      	b.n	8000ed6 <EXTI+0x70a>
		case pin7:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<12);
 8000b16:	4b75      	ldr	r3, [pc, #468]	; (8000cec <EXTI+0x520>)
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	4a74      	ldr	r2, [pc, #464]	; (8000cec <EXTI+0x520>)
 8000b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000b20:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<12);}
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4a72      	ldr	r2, [pc, #456]	; (8000cf0 <EXTI+0x524>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d106      	bne.n	8000b38 <EXTI+0x36c>
 8000b2a:	4b70      	ldr	r3, [pc, #448]	; (8000cec <EXTI+0x520>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	4a6f      	ldr	r2, [pc, #444]	; (8000cec <EXTI+0x520>)
 8000b30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000b34:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}

			break;
 8000b36:	e1d0      	b.n	8000eda <EXTI+0x70e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4a6e      	ldr	r2, [pc, #440]	; (8000cf4 <EXTI+0x528>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d106      	bne.n	8000b4e <EXTI+0x382>
 8000b40:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <EXTI+0x520>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	4a69      	ldr	r2, [pc, #420]	; (8000cec <EXTI+0x520>)
 8000b46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b4a:	60d3      	str	r3, [r2, #12]
			break;
 8000b4c:	e1c5      	b.n	8000eda <EXTI+0x70e>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4a69      	ldr	r2, [pc, #420]	; (8000cf8 <EXTI+0x52c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d106      	bne.n	8000b64 <EXTI+0x398>
 8000b56:	4b65      	ldr	r3, [pc, #404]	; (8000cec <EXTI+0x520>)
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	4a64      	ldr	r2, [pc, #400]	; (8000cec <EXTI+0x520>)
 8000b5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b60:	60d3      	str	r3, [r2, #12]
			break;
 8000b62:	e1ba      	b.n	8000eda <EXTI+0x70e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4a60      	ldr	r2, [pc, #384]	; (8000ce8 <EXTI+0x51c>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	f040 81b6 	bne.w	8000eda <EXTI+0x70e>
 8000b6e:	4b5f      	ldr	r3, [pc, #380]	; (8000cec <EXTI+0x520>)
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	4a5e      	ldr	r2, [pc, #376]	; (8000cec <EXTI+0x520>)
 8000b74:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000b78:	60d3      	str	r3, [r2, #12]
			break;
 8000b7a:	e1ae      	b.n	8000eda <EXTI+0x70e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin8:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<0);
 8000b7c:	4b5b      	ldr	r3, [pc, #364]	; (8000cec <EXTI+0x520>)
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	4a5a      	ldr	r2, [pc, #360]	; (8000cec <EXTI+0x520>)
 8000b82:	f023 030f 	bic.w	r3, r3, #15
 8000b86:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<0);}
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4a59      	ldr	r2, [pc, #356]	; (8000cf0 <EXTI+0x524>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d106      	bne.n	8000b9e <EXTI+0x3d2>
 8000b90:	4b56      	ldr	r3, [pc, #344]	; (8000cec <EXTI+0x520>)
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	4a55      	ldr	r2, [pc, #340]	; (8000cec <EXTI+0x520>)
 8000b96:	f023 030f 	bic.w	r3, r3, #15
 8000b9a:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}

			break;
 8000b9c:	e19f      	b.n	8000ede <EXTI+0x712>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4a54      	ldr	r2, [pc, #336]	; (8000cf4 <EXTI+0x528>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d106      	bne.n	8000bb4 <EXTI+0x3e8>
 8000ba6:	4b51      	ldr	r3, [pc, #324]	; (8000cec <EXTI+0x520>)
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	4a50      	ldr	r2, [pc, #320]	; (8000cec <EXTI+0x520>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6113      	str	r3, [r2, #16]
			break;
 8000bb2:	e194      	b.n	8000ede <EXTI+0x712>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4a50      	ldr	r2, [pc, #320]	; (8000cf8 <EXTI+0x52c>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d106      	bne.n	8000bca <EXTI+0x3fe>
 8000bbc:	4b4b      	ldr	r3, [pc, #300]	; (8000cec <EXTI+0x520>)
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	4a4a      	ldr	r2, [pc, #296]	; (8000cec <EXTI+0x520>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	6113      	str	r3, [r2, #16]
			break;
 8000bc8:	e189      	b.n	8000ede <EXTI+0x712>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4a46      	ldr	r2, [pc, #280]	; (8000ce8 <EXTI+0x51c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	f040 8185 	bne.w	8000ede <EXTI+0x712>
 8000bd4:	4b45      	ldr	r3, [pc, #276]	; (8000cec <EXTI+0x520>)
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	4a44      	ldr	r2, [pc, #272]	; (8000cec <EXTI+0x520>)
 8000bda:	f043 0303 	orr.w	r3, r3, #3
 8000bde:	6113      	str	r3, [r2, #16]
			break;
 8000be0:	e17d      	b.n	8000ede <EXTI+0x712>
		case pin9:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<4);
 8000be2:	4b42      	ldr	r3, [pc, #264]	; (8000cec <EXTI+0x520>)
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	4a41      	ldr	r2, [pc, #260]	; (8000cec <EXTI+0x520>)
 8000be8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bec:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<4);}
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4a3f      	ldr	r2, [pc, #252]	; (8000cf0 <EXTI+0x524>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d106      	bne.n	8000c04 <EXTI+0x438>
 8000bf6:	4b3d      	ldr	r3, [pc, #244]	; (8000cec <EXTI+0x520>)
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	4a3c      	ldr	r2, [pc, #240]	; (8000cec <EXTI+0x520>)
 8000bfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c00:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}

			break;
 8000c02:	e16e      	b.n	8000ee2 <EXTI+0x716>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4a3b      	ldr	r2, [pc, #236]	; (8000cf4 <EXTI+0x528>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d106      	bne.n	8000c1a <EXTI+0x44e>
 8000c0c:	4b37      	ldr	r3, [pc, #220]	; (8000cec <EXTI+0x520>)
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	4a36      	ldr	r2, [pc, #216]	; (8000cec <EXTI+0x520>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	6113      	str	r3, [r2, #16]
			break;
 8000c18:	e163      	b.n	8000ee2 <EXTI+0x716>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4a36      	ldr	r2, [pc, #216]	; (8000cf8 <EXTI+0x52c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d106      	bne.n	8000c30 <EXTI+0x464>
 8000c22:	4b32      	ldr	r3, [pc, #200]	; (8000cec <EXTI+0x520>)
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	4a31      	ldr	r2, [pc, #196]	; (8000cec <EXTI+0x520>)
 8000c28:	f043 0320 	orr.w	r3, r3, #32
 8000c2c:	6113      	str	r3, [r2, #16]
			break;
 8000c2e:	e158      	b.n	8000ee2 <EXTI+0x716>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4a2d      	ldr	r2, [pc, #180]	; (8000ce8 <EXTI+0x51c>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	f040 8154 	bne.w	8000ee2 <EXTI+0x716>
 8000c3a:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <EXTI+0x520>)
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	4a2b      	ldr	r2, [pc, #172]	; (8000cec <EXTI+0x520>)
 8000c40:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000c44:	6113      	str	r3, [r2, #16]
			break;
 8000c46:	e14c      	b.n	8000ee2 <EXTI+0x716>
		case pin10:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<8);
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <EXTI+0x520>)
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	4a27      	ldr	r2, [pc, #156]	; (8000cec <EXTI+0x520>)
 8000c4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c52:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<8);}
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <EXTI+0x524>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d106      	bne.n	8000c6a <EXTI+0x49e>
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <EXTI+0x520>)
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	4a22      	ldr	r2, [pc, #136]	; (8000cec <EXTI+0x520>)
 8000c62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c66:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}

			break;
 8000c68:	e13d      	b.n	8000ee6 <EXTI+0x71a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <EXTI+0x528>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d106      	bne.n	8000c80 <EXTI+0x4b4>
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <EXTI+0x520>)
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	4a1d      	ldr	r2, [pc, #116]	; (8000cec <EXTI+0x520>)
 8000c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7c:	6113      	str	r3, [r2, #16]
			break;
 8000c7e:	e132      	b.n	8000ee6 <EXTI+0x71a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <EXTI+0x52c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d106      	bne.n	8000c96 <EXTI+0x4ca>
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <EXTI+0x520>)
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	4a17      	ldr	r2, [pc, #92]	; (8000cec <EXTI+0x520>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6113      	str	r3, [r2, #16]
			break;
 8000c94:	e127      	b.n	8000ee6 <EXTI+0x71a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4a13      	ldr	r2, [pc, #76]	; (8000ce8 <EXTI+0x51c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	f040 8123 	bne.w	8000ee6 <EXTI+0x71a>
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <EXTI+0x520>)
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	4a11      	ldr	r2, [pc, #68]	; (8000cec <EXTI+0x520>)
 8000ca6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000caa:	6113      	str	r3, [r2, #16]
			break;
 8000cac:	e11b      	b.n	8000ee6 <EXTI+0x71a>
		case pin11:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<12);
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <EXTI+0x520>)
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <EXTI+0x520>)
 8000cb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000cb8:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<12);}
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <EXTI+0x524>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d106      	bne.n	8000cd0 <EXTI+0x504>
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <EXTI+0x520>)
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <EXTI+0x520>)
 8000cc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000ccc:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}

			break;
 8000cce:	e10c      	b.n	8000eea <EXTI+0x71e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <EXTI+0x528>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d111      	bne.n	8000cfc <EXTI+0x530>
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <EXTI+0x520>)
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	4a03      	ldr	r2, [pc, #12]	; (8000cec <EXTI+0x520>)
 8000cde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce2:	6113      	str	r3, [r2, #16]
			break;
 8000ce4:	e101      	b.n	8000eea <EXTI+0x71e>
 8000ce6:	bf00      	nop
 8000ce8:	40011400 	.word	0x40011400
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	40010800 	.word	0x40010800
 8000cf4:	40010c00 	.word	0x40010c00
 8000cf8:	40011000 	.word	0x40011000
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4a98      	ldr	r2, [pc, #608]	; (8000f60 <EXTI+0x794>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d106      	bne.n	8000d12 <EXTI+0x546>
 8000d04:	4b97      	ldr	r3, [pc, #604]	; (8000f64 <EXTI+0x798>)
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	4a96      	ldr	r2, [pc, #600]	; (8000f64 <EXTI+0x798>)
 8000d0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d0e:	6113      	str	r3, [r2, #16]
			break;
 8000d10:	e0eb      	b.n	8000eea <EXTI+0x71e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4a94      	ldr	r2, [pc, #592]	; (8000f68 <EXTI+0x79c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	f040 80e7 	bne.w	8000eea <EXTI+0x71e>
 8000d1c:	4b91      	ldr	r3, [pc, #580]	; (8000f64 <EXTI+0x798>)
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	4a90      	ldr	r2, [pc, #576]	; (8000f64 <EXTI+0x798>)
 8000d22:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000d26:	6113      	str	r3, [r2, #16]
			break;
 8000d28:	e0df      	b.n	8000eea <EXTI+0x71e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin12:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<0);
 8000d2a:	4b8e      	ldr	r3, [pc, #568]	; (8000f64 <EXTI+0x798>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a8d      	ldr	r2, [pc, #564]	; (8000f64 <EXTI+0x798>)
 8000d30:	f023 030f 	bic.w	r3, r3, #15
 8000d34:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<0);}
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4a8c      	ldr	r2, [pc, #560]	; (8000f6c <EXTI+0x7a0>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d106      	bne.n	8000d4c <EXTI+0x580>
 8000d3e:	4b89      	ldr	r3, [pc, #548]	; (8000f64 <EXTI+0x798>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a88      	ldr	r2, [pc, #544]	; (8000f64 <EXTI+0x798>)
 8000d44:	f023 030f 	bic.w	r3, r3, #15
 8000d48:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}

			break;
 8000d4a:	e0d0      	b.n	8000eee <EXTI+0x722>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4a88      	ldr	r2, [pc, #544]	; (8000f70 <EXTI+0x7a4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d106      	bne.n	8000d62 <EXTI+0x596>
 8000d54:	4b83      	ldr	r3, [pc, #524]	; (8000f64 <EXTI+0x798>)
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	4a82      	ldr	r2, [pc, #520]	; (8000f64 <EXTI+0x798>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6153      	str	r3, [r2, #20]
			break;
 8000d60:	e0c5      	b.n	8000eee <EXTI+0x722>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4a7e      	ldr	r2, [pc, #504]	; (8000f60 <EXTI+0x794>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d106      	bne.n	8000d78 <EXTI+0x5ac>
 8000d6a:	4b7e      	ldr	r3, [pc, #504]	; (8000f64 <EXTI+0x798>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4a7d      	ldr	r2, [pc, #500]	; (8000f64 <EXTI+0x798>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6153      	str	r3, [r2, #20]
			break;
 8000d76:	e0ba      	b.n	8000eee <EXTI+0x722>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4a7b      	ldr	r2, [pc, #492]	; (8000f68 <EXTI+0x79c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	f040 80b6 	bne.w	8000eee <EXTI+0x722>
 8000d82:	4b78      	ldr	r3, [pc, #480]	; (8000f64 <EXTI+0x798>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a77      	ldr	r2, [pc, #476]	; (8000f64 <EXTI+0x798>)
 8000d88:	f043 0303 	orr.w	r3, r3, #3
 8000d8c:	6153      	str	r3, [r2, #20]
			break;
 8000d8e:	e0ae      	b.n	8000eee <EXTI+0x722>
		case pin13:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<4);
 8000d90:	4b74      	ldr	r3, [pc, #464]	; (8000f64 <EXTI+0x798>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	4a73      	ldr	r2, [pc, #460]	; (8000f64 <EXTI+0x798>)
 8000d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d9a:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<4);}
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4a73      	ldr	r2, [pc, #460]	; (8000f6c <EXTI+0x7a0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d106      	bne.n	8000db2 <EXTI+0x5e6>
 8000da4:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <EXTI+0x798>)
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	4a6e      	ldr	r2, [pc, #440]	; (8000f64 <EXTI+0x798>)
 8000daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dae:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}

			break;
 8000db0:	e09f      	b.n	8000ef2 <EXTI+0x726>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4a6e      	ldr	r2, [pc, #440]	; (8000f70 <EXTI+0x7a4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d106      	bne.n	8000dc8 <EXTI+0x5fc>
 8000dba:	4b6a      	ldr	r3, [pc, #424]	; (8000f64 <EXTI+0x798>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a69      	ldr	r2, [pc, #420]	; (8000f64 <EXTI+0x798>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	6153      	str	r3, [r2, #20]
			break;
 8000dc6:	e094      	b.n	8000ef2 <EXTI+0x726>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4a65      	ldr	r2, [pc, #404]	; (8000f60 <EXTI+0x794>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d106      	bne.n	8000dde <EXTI+0x612>
 8000dd0:	4b64      	ldr	r3, [pc, #400]	; (8000f64 <EXTI+0x798>)
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	4a63      	ldr	r2, [pc, #396]	; (8000f64 <EXTI+0x798>)
 8000dd6:	f043 0320 	orr.w	r3, r3, #32
 8000dda:	6153      	str	r3, [r2, #20]
			break;
 8000ddc:	e089      	b.n	8000ef2 <EXTI+0x726>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4a61      	ldr	r2, [pc, #388]	; (8000f68 <EXTI+0x79c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	f040 8085 	bne.w	8000ef2 <EXTI+0x726>
 8000de8:	4b5e      	ldr	r3, [pc, #376]	; (8000f64 <EXTI+0x798>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	4a5d      	ldr	r2, [pc, #372]	; (8000f64 <EXTI+0x798>)
 8000dee:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000df2:	6153      	str	r3, [r2, #20]
			break;
 8000df4:	e07d      	b.n	8000ef2 <EXTI+0x726>
		case pin14:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<8);
 8000df6:	4b5b      	ldr	r3, [pc, #364]	; (8000f64 <EXTI+0x798>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	4a5a      	ldr	r2, [pc, #360]	; (8000f64 <EXTI+0x798>)
 8000dfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e00:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<8);}
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4a59      	ldr	r2, [pc, #356]	; (8000f6c <EXTI+0x7a0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d106      	bne.n	8000e18 <EXTI+0x64c>
 8000e0a:	4b56      	ldr	r3, [pc, #344]	; (8000f64 <EXTI+0x798>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a55      	ldr	r2, [pc, #340]	; (8000f64 <EXTI+0x798>)
 8000e10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e14:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}

			break;
 8000e16:	e06e      	b.n	8000ef6 <EXTI+0x72a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4a55      	ldr	r2, [pc, #340]	; (8000f70 <EXTI+0x7a4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d106      	bne.n	8000e2e <EXTI+0x662>
 8000e20:	4b50      	ldr	r3, [pc, #320]	; (8000f64 <EXTI+0x798>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	4a4f      	ldr	r2, [pc, #316]	; (8000f64 <EXTI+0x798>)
 8000e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2a:	6153      	str	r3, [r2, #20]
			break;
 8000e2c:	e063      	b.n	8000ef6 <EXTI+0x72a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4a4b      	ldr	r2, [pc, #300]	; (8000f60 <EXTI+0x794>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d106      	bne.n	8000e44 <EXTI+0x678>
 8000e36:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <EXTI+0x798>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a4a      	ldr	r2, [pc, #296]	; (8000f64 <EXTI+0x798>)
 8000e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e40:	6153      	str	r3, [r2, #20]
			break;
 8000e42:	e058      	b.n	8000ef6 <EXTI+0x72a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4a48      	ldr	r2, [pc, #288]	; (8000f68 <EXTI+0x79c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d154      	bne.n	8000ef6 <EXTI+0x72a>
 8000e4c:	4b45      	ldr	r3, [pc, #276]	; (8000f64 <EXTI+0x798>)
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	4a44      	ldr	r2, [pc, #272]	; (8000f64 <EXTI+0x798>)
 8000e52:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e56:	6153      	str	r3, [r2, #20]
			break;
 8000e58:	e04d      	b.n	8000ef6 <EXTI+0x72a>
		case pin15:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<12);
 8000e5a:	4b42      	ldr	r3, [pc, #264]	; (8000f64 <EXTI+0x798>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	4a41      	ldr	r2, [pc, #260]	; (8000f64 <EXTI+0x798>)
 8000e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000e64:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<12);}
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4a40      	ldr	r2, [pc, #256]	; (8000f6c <EXTI+0x7a0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d106      	bne.n	8000e7c <EXTI+0x6b0>
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <EXTI+0x798>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	4a3c      	ldr	r2, [pc, #240]	; (8000f64 <EXTI+0x798>)
 8000e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000e78:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}

			break;
 8000e7a:	e03e      	b.n	8000efa <EXTI+0x72e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4a3c      	ldr	r2, [pc, #240]	; (8000f70 <EXTI+0x7a4>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d106      	bne.n	8000e92 <EXTI+0x6c6>
 8000e84:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <EXTI+0x798>)
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	4a36      	ldr	r2, [pc, #216]	; (8000f64 <EXTI+0x798>)
 8000e8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e8e:	6153      	str	r3, [r2, #20]
			break;
 8000e90:	e033      	b.n	8000efa <EXTI+0x72e>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4a32      	ldr	r2, [pc, #200]	; (8000f60 <EXTI+0x794>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d106      	bne.n	8000ea8 <EXTI+0x6dc>
 8000e9a:	4b32      	ldr	r3, [pc, #200]	; (8000f64 <EXTI+0x798>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a31      	ldr	r2, [pc, #196]	; (8000f64 <EXTI+0x798>)
 8000ea0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ea4:	6153      	str	r3, [r2, #20]
			break;
 8000ea6:	e028      	b.n	8000efa <EXTI+0x72e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <EXTI+0x79c>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d124      	bne.n	8000efa <EXTI+0x72e>
 8000eb0:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <EXTI+0x798>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	4a2b      	ldr	r2, [pc, #172]	; (8000f64 <EXTI+0x798>)
 8000eb6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000eba:	6153      	str	r3, [r2, #20]
			break;
 8000ebc:	e01d      	b.n	8000efa <EXTI+0x72e>
			break;
 8000ebe:	bf00      	nop
 8000ec0:	e01c      	b.n	8000efc <EXTI+0x730>
			break;
 8000ec2:	bf00      	nop
 8000ec4:	e01a      	b.n	8000efc <EXTI+0x730>
			break;
 8000ec6:	bf00      	nop
 8000ec8:	e018      	b.n	8000efc <EXTI+0x730>
			break;
 8000eca:	bf00      	nop
 8000ecc:	e016      	b.n	8000efc <EXTI+0x730>
			break;
 8000ece:	bf00      	nop
 8000ed0:	e014      	b.n	8000efc <EXTI+0x730>
			break;
 8000ed2:	bf00      	nop
 8000ed4:	e012      	b.n	8000efc <EXTI+0x730>
			break;
 8000ed6:	bf00      	nop
 8000ed8:	e010      	b.n	8000efc <EXTI+0x730>
			break;
 8000eda:	bf00      	nop
 8000edc:	e00e      	b.n	8000efc <EXTI+0x730>
			break;
 8000ede:	bf00      	nop
 8000ee0:	e00c      	b.n	8000efc <EXTI+0x730>
			break;
 8000ee2:	bf00      	nop
 8000ee4:	e00a      	b.n	8000efc <EXTI+0x730>
			break;
 8000ee6:	bf00      	nop
 8000ee8:	e008      	b.n	8000efc <EXTI+0x730>
			break;
 8000eea:	bf00      	nop
 8000eec:	e006      	b.n	8000efc <EXTI+0x730>
			break;
 8000eee:	bf00      	nop
 8000ef0:	e004      	b.n	8000efc <EXTI+0x730>
			break;
 8000ef2:	bf00      	nop
 8000ef4:	e002      	b.n	8000efc <EXTI+0x730>
			break;
 8000ef6:	bf00      	nop
 8000ef8:	e000      	b.n	8000efc <EXTI+0x730>
			break;
 8000efa:	bf00      	nop
		}
	//================================================
	//3- Update Rising or Falling Register
	EXIT->EXTI_RTSR &=~(1<<pin);
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <EXTI+0x7a8>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	897a      	ldrh	r2, [r7, #10]
 8000f02:	2101      	movs	r1, #1
 8000f04:	fa01 f202 	lsl.w	r2, r1, r2
 8000f08:	43d2      	mvns	r2, r2
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <EXTI+0x7a8>)
 8000f0e:	400b      	ands	r3, r1
 8000f10:	6093      	str	r3, [r2, #8]
	EXIT->EXTI_FTSR &=~(1<<pin);
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <EXTI+0x7a8>)
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	897a      	ldrh	r2, [r7, #10]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1e:	43d2      	mvns	r2, r2
 8000f20:	4611      	mov	r1, r2
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <EXTI+0x7a8>)
 8000f24:	400b      	ands	r3, r1
 8000f26:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 8000f28:	893b      	ldrh	r3, [r7, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10a      	bne.n	8000f44 <EXTI+0x778>
		EXIT->EXTI_RTSR |= (1<<pin);
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <EXTI+0x7a8>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	897a      	ldrh	r2, [r7, #10]
 8000f34:	2101      	movs	r1, #1
 8000f36:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <EXTI+0x7a8>)
 8000f3e:	430b      	orrs	r3, r1
 8000f40:	6093      	str	r3, [r2, #8]
 8000f42:	e02d      	b.n	8000fa0 <EXTI+0x7d4>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 8000f44:	893b      	ldrh	r3, [r7, #8]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d116      	bne.n	8000f78 <EXTI+0x7ac>
		EXIT->EXTI_FTSR |= (1<<pin);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <EXTI+0x7a8>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	897a      	ldrh	r2, [r7, #10]
 8000f50:	2101      	movs	r1, #1
 8000f52:	fa01 f202 	lsl.w	r2, r1, r2
 8000f56:	4611      	mov	r1, r2
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <EXTI+0x7a8>)
 8000f5a:	430b      	orrs	r3, r1
 8000f5c:	60d3      	str	r3, [r2, #12]
 8000f5e:	e01f      	b.n	8000fa0 <EXTI+0x7d4>
 8000f60:	40011000 	.word	0x40011000
 8000f64:	40010000 	.word	0x40010000
 8000f68:	40011400 	.word	0x40011400
 8000f6c:	40010800 	.word	0x40010800
 8000f70:	40010c00 	.word	0x40010c00
 8000f74:	40010400 	.word	0x40010400
	}
	else{
		EXIT->EXTI_RTSR |= (1<<pin);
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <EXTI+0x804>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	897a      	ldrh	r2, [r7, #10]
 8000f7e:	2101      	movs	r1, #1
 8000f80:	fa01 f202 	lsl.w	r2, r1, r2
 8000f84:	4611      	mov	r1, r2
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <EXTI+0x804>)
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	6093      	str	r3, [r2, #8]
		EXIT->EXTI_FTSR |= (1<<pin);
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <EXTI+0x804>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	897a      	ldrh	r2, [r7, #10]
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f202 	lsl.w	r2, r1, r2
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <EXTI+0x804>)
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	60d3      	str	r3, [r2, #12]
	}
	//4- Update IRQ Handling callback
	GP_IRQ_Callback[pin] =function_addres;
 8000fa0:	897b      	ldrh	r3, [r7, #10]
 8000fa2:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <EXTI+0x808>)
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	EXIT->EXTI_IMR |=(1<<pin);
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <EXTI+0x804>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	897a      	ldrh	r2, [r7, #10]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <EXTI+0x804>)
 8000fba:	430b      	orrs	r3, r1
 8000fbc:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 8000fbe:	897b      	ldrh	r3, [r7, #10]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fb9d 	bl	8000700 <Enable_NVIC>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40010400 	.word	0x40010400
 8000fd4:	200000b0 	.word	0x200000b0

08000fd8 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <EXTI0_IRQHandler+0x1c>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <EXTI0_IRQHandler+0x1c>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <EXTI0_IRQHandler+0x20>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4798      	blx	r3
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40010400 	.word	0x40010400
 8000ff8:	200000b0 	.word	0x200000b0

08000ffc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <EXTI1_IRQHandler+0x1c>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <EXTI1_IRQHandler+0x1c>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <EXTI1_IRQHandler+0x20>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4798      	blx	r3

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40010400 	.word	0x40010400
 800101c:	200000b0 	.word	0x200000b0

08001020 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <EXTI2_IRQHandler+0x1c>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <EXTI2_IRQHandler+0x1c>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <EXTI2_IRQHandler+0x20>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4798      	blx	r3
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40010400 	.word	0x40010400
 8001040:	200000b0 	.word	0x200000b0

08001044 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <EXTI3_IRQHandler+0x1c>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <EXTI3_IRQHandler+0x1c>)
 800104e:	f043 0308 	orr.w	r3, r3, #8
 8001052:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <EXTI3_IRQHandler+0x20>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	4798      	blx	r3
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40010400 	.word	0x40010400
 8001064:	200000b0 	.word	0x200000b0

08001068 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <EXTI4_IRQHandler+0x1c>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <EXTI4_IRQHandler+0x1c>)
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <EXTI4_IRQHandler+0x20>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	4798      	blx	r3
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40010400 	.word	0x40010400
 8001088:	200000b0 	.word	0x200000b0

0800108c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5]();  }
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	f003 0320 	and.w	r3, r3, #32
 8001098:	2b00      	cmp	r3, #0
 800109a:	d008      	beq.n	80010ae <EXTI9_5_IRQHandler+0x22>
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	4a22      	ldr	r2, [pc, #136]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	6153      	str	r3, [r2, #20]
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <EXTI9_5_IRQHandler+0xa4>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6]();  }
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d008      	beq.n	80010cc <EXTI9_5_IRQHandler+0x40>
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a1b      	ldr	r2, [pc, #108]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 80010c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <EXTI9_5_IRQHandler+0xa4>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7]();  }
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <EXTI9_5_IRQHandler+0x5e>
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	4a13      	ldr	r2, [pc, #76]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 80010de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e2:	6153      	str	r3, [r2, #20]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <EXTI9_5_IRQHandler+0xa4>)
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8]();  }
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <EXTI9_5_IRQHandler+0x7c>
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a0c      	ldr	r2, [pc, #48]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <EXTI9_5_IRQHandler+0xa4>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9]();  }
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <EXTI9_5_IRQHandler+0x9a>
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <EXTI9_5_IRQHandler+0xa0>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111e:	6153      	str	r3, [r2, #20]
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <EXTI9_5_IRQHandler+0xa4>)
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	4798      	blx	r3
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40010400 	.word	0x40010400
 8001130:	200000b0 	.word	0x200000b0

08001134 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10]();  }
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <EXTI15_10_IRQHandler+0x22>
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	4a29      	ldr	r2, [pc, #164]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 800114a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114e:	6153      	str	r3, [r2, #20]
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <EXTI15_10_IRQHandler+0xc0>)
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11]();  }
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <EXTI15_10_IRQHandler+0x40>
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 8001168:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800116c:	6153      	str	r3, [r2, #20]
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <EXTI15_10_IRQHandler+0xc0>)
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12]();  }
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <EXTI15_10_IRQHandler+0x5e>
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 8001186:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800118a:	6153      	str	r3, [r2, #20]
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <EXTI15_10_IRQHandler+0xc0>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13]();  }
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d008      	beq.n	80011b0 <EXTI15_10_IRQHandler+0x7c>
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 80011a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <EXTI15_10_IRQHandler+0xc0>)
 80011ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ae:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14]();  }
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <EXTI15_10_IRQHandler+0x9a>
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	6153      	str	r3, [r2, #20]
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <EXTI15_10_IRQHandler+0xc0>)
 80011ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011cc:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15]();  }
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d008      	beq.n	80011ec <EXTI15_10_IRQHandler+0xb8>
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <EXTI15_10_IRQHandler+0xbc>)
 80011e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <EXTI15_10_IRQHandler+0xc0>)
 80011e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ea:	4798      	blx	r3

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40010400 	.word	0x40010400
 80011f4:	200000b0 	.word	0x200000b0

080011f8 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	//slave only todo
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	//slave only todo
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <USART_INIT>:
//===============================================================
void send_string (){

}
//===============================================================
void USART_INIT(USART_typeDef* USARTx,uint32_t mode,uint32_t word_length,uint32_t stop_bits,uint32_t baud_rate,uint32_t parity,uint32_t CLCK){
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]

	if(USARTx ==USART1){
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4a55      	ldr	r2, [pc, #340]	; (8001378 <USART_INIT+0x168>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d11f      	bne.n	8001266 <USART_INIT+0x56>
		USART1_Clock_Enable();
 8001226:	4b55      	ldr	r3, [pc, #340]	; (800137c <USART_INIT+0x16c>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a54      	ldr	r2, [pc, #336]	; (800137c <USART_INIT+0x16c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();
 8001232:	4b52      	ldr	r3, [pc, #328]	; (800137c <USART_INIT+0x16c>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a51      	ldr	r2, [pc, #324]	; (800137c <USART_INIT+0x16c>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6193      	str	r3, [r2, #24]
		NVIC_USART1_interrupt_Enable;
 800123e:	4b50      	ldr	r3, [pc, #320]	; (8001380 <USART_INIT+0x170>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <USART_INIT+0x170>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin9,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 800124a:	2209      	movs	r2, #9
 800124c:	2109      	movs	r1, #9
 800124e:	484d      	ldr	r0, [pc, #308]	; (8001384 <USART_INIT+0x174>)
 8001250:	f7fe ffe9 	bl	8000226 <pinmode>
		//RX
		pinmode(GPIOA, pin10,GPIO_MODE_INTPUT_AF);
 8001254:	2204      	movs	r2, #4
 8001256:	210a      	movs	r1, #10
 8001258:	484a      	ldr	r0, [pc, #296]	; (8001384 <USART_INIT+0x174>)
 800125a:	f7fe ffe4 	bl	8000226 <pinmode>
		arr[0]=USART1;
 800125e:	4b4a      	ldr	r3, [pc, #296]	; (8001388 <USART_INIT+0x178>)
 8001260:	4a45      	ldr	r2, [pc, #276]	; (8001378 <USART_INIT+0x168>)
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e042      	b.n	80012ec <USART_INIT+0xdc>
	}
	else if(USARTx ==USART2){
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4a48      	ldr	r2, [pc, #288]	; (800138c <USART_INIT+0x17c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d11f      	bne.n	80012ae <USART_INIT+0x9e>
		USART2_Clock_Enable();
 800126e:	4b43      	ldr	r3, [pc, #268]	; (800137c <USART_INIT+0x16c>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a42      	ldr	r2, [pc, #264]	; (800137c <USART_INIT+0x16c>)
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();
 800127a:	4b40      	ldr	r3, [pc, #256]	; (800137c <USART_INIT+0x16c>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a3f      	ldr	r2, [pc, #252]	; (800137c <USART_INIT+0x16c>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6193      	str	r3, [r2, #24]
		NVIC_USART2_interrupt_Enable;
 8001286:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <USART_INIT+0x170>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a3d      	ldr	r2, [pc, #244]	; (8001380 <USART_INIT+0x170>)
 800128c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001290:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin2,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8001292:	2209      	movs	r2, #9
 8001294:	2102      	movs	r1, #2
 8001296:	483b      	ldr	r0, [pc, #236]	; (8001384 <USART_INIT+0x174>)
 8001298:	f7fe ffc5 	bl	8000226 <pinmode>
		//RX
		pinmode(GPIOA, pin3,GPIO_MODE_INTPUT_AF);
 800129c:	2204      	movs	r2, #4
 800129e:	2103      	movs	r1, #3
 80012a0:	4838      	ldr	r0, [pc, #224]	; (8001384 <USART_INIT+0x174>)
 80012a2:	f7fe ffc0 	bl	8000226 <pinmode>
		arr[1]=USART2;
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <USART_INIT+0x178>)
 80012a8:	4a38      	ldr	r2, [pc, #224]	; (800138c <USART_INIT+0x17c>)
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	e01e      	b.n	80012ec <USART_INIT+0xdc>
	}
	else{
		USART3_Clock_Enable();
 80012ae:	4b33      	ldr	r3, [pc, #204]	; (800137c <USART_INIT+0x16c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a32      	ldr	r2, [pc, #200]	; (800137c <USART_INIT+0x16c>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 80012ba:	4b30      	ldr	r3, [pc, #192]	; (800137c <USART_INIT+0x16c>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	4a2f      	ldr	r2, [pc, #188]	; (800137c <USART_INIT+0x16c>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6193      	str	r3, [r2, #24]
		NVIC_USART3_interrupt_Enable;
 80012c6:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <USART_INIT+0x170>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a2d      	ldr	r2, [pc, #180]	; (8001380 <USART_INIT+0x170>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 80012d2:	2209      	movs	r2, #9
 80012d4:	210a      	movs	r1, #10
 80012d6:	482e      	ldr	r0, [pc, #184]	; (8001390 <USART_INIT+0x180>)
 80012d8:	f7fe ffa5 	bl	8000226 <pinmode>
		//RX
		pinmode(GPIOB, pin11,GPIO_MODE_INTPUT_AF);
 80012dc:	2204      	movs	r2, #4
 80012de:	210b      	movs	r1, #11
 80012e0:	482b      	ldr	r0, [pc, #172]	; (8001390 <USART_INIT+0x180>)
 80012e2:	f7fe ffa0 	bl	8000226 <pinmode>
		arr[2]=USART3;
 80012e6:	4b28      	ldr	r3, [pc, #160]	; (8001388 <USART_INIT+0x178>)
 80012e8:	4a2a      	ldr	r2, [pc, #168]	; (8001394 <USART_INIT+0x184>)
 80012ea:	609a      	str	r2, [r3, #8]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enabled
	USARTx->USART_CR1 |=(1<<13);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	60da      	str	r2, [r3, #12]
	//STEP 2
	//	Bit 12 M: Word length
	//	This bit determines the word length. It is set or cleared by software.
	//	0: 1 Start bit, 8 Data bits, n Stop bit
	//	1: 1 Start bit, 9 Data bits, n Stop bit
	USARTx->USART_CR1 |=word_length;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	431a      	orrs	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	60da      	str	r2, [r3, #12]
	//	These bits are used for programming the stop bits.
	//	00: 1 Stop bit
	//	01: 0.5 Stop bit
	//	10: 2 Stop bits
	//	11: 1.5 Stop bit
	USARTx->USART_CR2 |=stop_bits;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	431a      	orrs	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	611a      	str	r2, [r3, #16]
	//	2: When TE is set there is a 1 bit-time delay before the transmission starts.
	//	Bit 2 RE: Receiver enable
	//	This bit enables the receiver. It is set and cleared by software.
	//	0: Receiver is disabled
	//	1: Receiver is enabled and begins searching for a start bit
	USARTx->USART_CR1 |=mode;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	431a      	orrs	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	60da      	str	r2, [r3, #12]
	//	Bit 9 PS: Parity selection
	//	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	//	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	//	0: Even parity
	//	1: Odd parity
	USARTx->USART_CR1 |=parity;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	431a      	orrs	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	60da      	str	r2, [r3, #12]
	//	Bits 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV
	//	These 12 bits define the mantissa of the USART Divider (USARTDIV)
	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV
	//	These 4 bits define the fraction of the USART Divider (USARTDIV)

	uint16_t DIV_Mantissa =CLCK /(baud_rate*16);
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	82fb      	strh	r3, [r7, #22]
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4a17      	ldr	r2, [pc, #92]	; (8001398 <USART_INIT+0x188>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	8afa      	ldrh	r2, [r7, #22]
 8001348:	2164      	movs	r1, #100	; 0x64
 800134a:	fb01 f202 	mul.w	r2, r1, r2
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4a11      	ldr	r2, [pc, #68]	; (8001398 <USART_INIT+0x188>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	82bb      	strh	r3, [r7, #20]
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );
 800135c:	8afb      	ldrh	r3, [r7, #22]
 800135e:	011a      	lsls	r2, r3, #4
 8001360:	8abb      	ldrh	r3, [r7, #20]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	4313      	orrs	r3, r2
 8001368:	461a      	mov	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	609a      	str	r2, [r3, #8]


}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40013800 	.word	0x40013800
 800137c:	40021000 	.word	0x40021000
 8001380:	e000e104 	.word	0xe000e104
 8001384:	40010800 	.word	0x40010800
 8001388:	200000ec 	.word	0x200000ec
 800138c:	40004400 	.word	0x40004400
 8001390:	40010c00 	.word	0x40010c00
 8001394:	40004800 	.word	0x40004800
 8001398:	51eb851f 	.word	0x51eb851f

0800139c <USART_SEND>:
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	0b1b      	lsrs	r3, r3, #12
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d106      	bne.n	80013c2 <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 80013c0:	e004      	b.n	80013cc <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	605a      	str	r2, [r3, #4]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
	...

080013d8 <USART_SEND_STRING>:
		*data=arr_data_RES[2];
	}

}

void USART_SEND_STRING(USART_typeDef* USARTx,char* data){
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a13      	ldr	r2, [pc, #76]	; (8001434 <USART_SEND_STRING+0x5c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d105      	bne.n	80013f6 <USART_SEND_STRING+0x1e>
		arr_data[0]=data;
 80013ea:	4a13      	ldr	r2, [pc, #76]	; (8001438 <USART_SEND_STRING+0x60>)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	6013      	str	r3, [r2, #0]
		arr[0]=USART1;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <USART_SEND_STRING+0x64>)
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <USART_SEND_STRING+0x5c>)
 80013f4:	601a      	str	r2, [r3, #0]
	}
	if(USARTx==USART2){
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a11      	ldr	r2, [pc, #68]	; (8001440 <USART_SEND_STRING+0x68>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d105      	bne.n	800140a <USART_SEND_STRING+0x32>
		arr_data[1]=data;
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <USART_SEND_STRING+0x60>)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	6053      	str	r3, [r2, #4]
		arr[1]=USART2;
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <USART_SEND_STRING+0x64>)
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <USART_SEND_STRING+0x68>)
 8001408:	605a      	str	r2, [r3, #4]
	}
	if(USARTx==USART3){
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <USART_SEND_STRING+0x6c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d105      	bne.n	800141e <USART_SEND_STRING+0x46>
		arr_data[2]=data;
 8001412:	4a09      	ldr	r2, [pc, #36]	; (8001438 <USART_SEND_STRING+0x60>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	6093      	str	r3, [r2, #8]
		arr[2]=USART3;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <USART_SEND_STRING+0x64>)
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <USART_SEND_STRING+0x6c>)
 800141c:	609a      	str	r2, [r3, #8]
	}
	//Bit 7 TXEIE: TXE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
	USARTx->USART_CR1 |=Transmit_data_register_empty;//open flage of interrupt
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60da      	str	r2, [r3, #12]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	40013800 	.word	0x40013800
 8001438:	20000100 	.word	0x20000100
 800143c:	200000ec 	.word	0x200000ec
 8001440:	40004400 	.word	0x40004400
 8001444:	40004800 	.word	0x40004800

08001448 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800144e:	4b56      	ldr	r3, [pc, #344]	; (80015a8 <USART1_IRQHandler+0x160>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	09db      	lsrs	r3, r3, #7
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d122      	bne.n	80014a4 <USART1_IRQHandler+0x5c>
 800145e:	4b52      	ldr	r3, [pc, #328]	; (80015a8 <USART1_IRQHandler+0x160>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	09db      	lsrs	r3, r3, #7
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b01      	cmp	r3, #1
 800146c:	d11a      	bne.n	80014a4 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 800146e:	4b4f      	ldr	r3, [pc, #316]	; (80015ac <USART1_IRQHandler+0x164>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00d      	beq.n	8001494 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],arr_data[0]);
 8001478:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <USART1_IRQHandler+0x160>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <USART1_IRQHandler+0x164>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	4610      	mov	r0, r2
 8001484:	f7ff ff8a 	bl	800139c <USART_SEND>
			++arr_data[0];
 8001488:	4b48      	ldr	r3, [pc, #288]	; (80015ac <USART1_IRQHandler+0x164>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a47      	ldr	r2, [pc, #284]	; (80015ac <USART1_IRQHandler+0x164>)
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e007      	b.n	80014a4 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 8001494:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <USART1_IRQHandler+0x160>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	4b43      	ldr	r3, [pc, #268]	; (80015a8 <USART1_IRQHandler+0x160>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a2:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 80014a4:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <USART1_IRQHandler+0x160>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d166      	bne.n	8001582 <USART1_IRQHandler+0x13a>
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <USART1_IRQHandler+0x160>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d15e      	bne.n	8001582 <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 80014c4:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <USART1_IRQHandler+0x160>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	0b1b      	lsrs	r3, r3, #12
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d117      	bne.n	8001504 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 80014d4:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <USART1_IRQHandler+0x160>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	0a9b      	lsrs	r3, r3, #10
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d108      	bne.n	80014f6 <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <USART1_IRQHandler+0x160>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <USART1_IRQHandler+0x168>)
 80014f2:	801a      	strh	r2, [r3, #0]
 80014f4:	e020      	b.n	8001538 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <USART1_IRQHandler+0x160>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <USART1_IRQHandler+0x168>)
 8001500:	801a      	strh	r2, [r3, #0]
 8001502:	e019      	b.n	8001538 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <USART1_IRQHandler+0x160>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	0a9b      	lsrs	r3, r3, #10
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b01      	cmp	r3, #1
 8001512:	d109      	bne.n	8001528 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <USART1_IRQHandler+0x160>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	b29b      	uxth	r3, r3
 800151c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <USART1_IRQHandler+0x168>)
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	e007      	b.n	8001538 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <USART1_IRQHandler+0x160>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	b29b      	uxth	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <USART1_IRQHandler+0x168>)
 8001536:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <USART1_IRQHandler+0x16c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	e002      	b.n	800154a <USART1_IRQHandler+0x102>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3301      	adds	r3, #1
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001550:	4293      	cmp	r3, r2
 8001552:	ddf7      	ble.n	8001544 <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <USART1_IRQHandler+0x160>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <USART1_IRQHandler+0x160>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0220 	bic.w	r2, r2, #32
 8001562:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <USART1_IRQHandler+0x160>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <USART1_IRQHandler+0x170>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	b29b      	uxth	r3, r3
 8001570:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <USART1_IRQHandler+0x160>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <USART1_IRQHandler+0x160>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0220 	bic.w	r2, r2, #32
 8001580:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <USART1_IRQHandler+0x160>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <USART1_IRQHandler+0x170>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	b29b      	uxth	r3, r3
 800158e:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <USART1_IRQHandler+0x160>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <USART1_IRQHandler+0x160>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0220 	bic.w	r2, r2, #32
 800159e:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200000ec 	.word	0x200000ec
 80015ac:	20000100 	.word	0x20000100
 80015b0:	200000f8 	.word	0x200000f8
 80015b4:	2000010c 	.word	0x2000010c
 80015b8:	40013800 	.word	0x40013800

080015bc <USART2_IRQHandler>:
void USART2_IRQHandler(){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80015c2:	4b56      	ldr	r3, [pc, #344]	; (800171c <USART2_IRQHandler+0x160>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	09db      	lsrs	r3, r3, #7
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d122      	bne.n	8001618 <USART2_IRQHandler+0x5c>
 80015d2:	4b52      	ldr	r3, [pc, #328]	; (800171c <USART2_IRQHandler+0x160>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	09db      	lsrs	r3, r3, #7
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d11a      	bne.n	8001618 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 80015e2:	4b4f      	ldr	r3, [pc, #316]	; (8001720 <USART2_IRQHandler+0x164>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00d      	beq.n	8001608 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],arr_data[1]);
 80015ec:	4b4b      	ldr	r3, [pc, #300]	; (800171c <USART2_IRQHandler+0x160>)
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	4b4b      	ldr	r3, [pc, #300]	; (8001720 <USART2_IRQHandler+0x164>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4610      	mov	r0, r2
 80015f8:	f7ff fed0 	bl	800139c <USART_SEND>
			++arr_data[1];
 80015fc:	4b48      	ldr	r3, [pc, #288]	; (8001720 <USART2_IRQHandler+0x164>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	4a47      	ldr	r2, [pc, #284]	; (8001720 <USART2_IRQHandler+0x164>)
 8001604:	6053      	str	r3, [r2, #4]
 8001606:	e007      	b.n	8001618 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8001608:	4b44      	ldr	r3, [pc, #272]	; (800171c <USART2_IRQHandler+0x160>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	4b43      	ldr	r3, [pc, #268]	; (800171c <USART2_IRQHandler+0x160>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001616:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8001618:	4b40      	ldr	r3, [pc, #256]	; (800171c <USART2_IRQHandler+0x160>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b01      	cmp	r3, #1
 8001626:	d166      	bne.n	80016f6 <USART2_IRQHandler+0x13a>
 8001628:	4b3c      	ldr	r3, [pc, #240]	; (800171c <USART2_IRQHandler+0x160>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b01      	cmp	r3, #1
 8001636:	d15e      	bne.n	80016f6 <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 8001638:	4b38      	ldr	r3, [pc, #224]	; (800171c <USART2_IRQHandler+0x160>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	0b1b      	lsrs	r3, r3, #12
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b01      	cmp	r3, #1
 8001646:	d117      	bne.n	8001678 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8001648:	4b34      	ldr	r3, [pc, #208]	; (800171c <USART2_IRQHandler+0x160>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	0a9b      	lsrs	r3, r3, #10
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	d108      	bne.n	800166a <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8001658:	4b30      	ldr	r3, [pc, #192]	; (800171c <USART2_IRQHandler+0x160>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	b29b      	uxth	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <USART2_IRQHandler+0x168>)
 8001666:	805a      	strh	r2, [r3, #2]
 8001668:	e020      	b.n	80016ac <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <USART2_IRQHandler+0x160>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	b29a      	uxth	r2, r3
 8001672:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <USART2_IRQHandler+0x168>)
 8001674:	805a      	strh	r2, [r3, #2]
 8001676:	e019      	b.n	80016ac <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <USART2_IRQHandler+0x160>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	0a9b      	lsrs	r3, r3, #10
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b01      	cmp	r3, #1
 8001686:	d109      	bne.n	800169c <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <USART2_IRQHandler+0x160>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	b29b      	uxth	r3, r3
 8001690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <USART2_IRQHandler+0x168>)
 8001698:	805a      	strh	r2, [r3, #2]
 800169a:	e007      	b.n	80016ac <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <USART2_IRQHandler+0x160>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <USART2_IRQHandler+0x168>)
 80016aa:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <USART2_IRQHandler+0x16c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	e002      	b.n	80016be <USART2_IRQHandler+0x102>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3301      	adds	r3, #1
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016c4:	4293      	cmp	r3, r2
 80016c6:	ddf7      	ble.n	80016b8 <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <USART2_IRQHandler+0x160>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <USART2_IRQHandler+0x160>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f022 0220 	bic.w	r2, r2, #32
 80016d6:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <USART2_IRQHandler+0x160>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <USART2_IRQHandler+0x170>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <USART2_IRQHandler+0x160>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <USART2_IRQHandler+0x160>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f022 0220 	bic.w	r2, r2, #32
 80016f4:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <USART2_IRQHandler+0x160>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <USART2_IRQHandler+0x170>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	b29b      	uxth	r3, r3
 8001702:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <USART2_IRQHandler+0x160>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <USART2_IRQHandler+0x160>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f022 0220 	bic.w	r2, r2, #32
 8001712:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200000ec 	.word	0x200000ec
 8001720:	20000100 	.word	0x20000100
 8001724:	200000f8 	.word	0x200000f8
 8001728:	2000010c 	.word	0x2000010c
 800172c:	40004400 	.word	0x40004400

08001730 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8001736:	4b56      	ldr	r3, [pc, #344]	; (8001890 <USART3_IRQHandler+0x160>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	09db      	lsrs	r3, r3, #7
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b01      	cmp	r3, #1
 8001744:	d122      	bne.n	800178c <USART3_IRQHandler+0x5c>
 8001746:	4b52      	ldr	r3, [pc, #328]	; (8001890 <USART3_IRQHandler+0x160>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	09db      	lsrs	r3, r3, #7
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b01      	cmp	r3, #1
 8001754:	d11a      	bne.n	800178c <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 8001756:	4b4f      	ldr	r3, [pc, #316]	; (8001894 <USART3_IRQHandler+0x164>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00d      	beq.n	800177c <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],arr_data[2]);
 8001760:	4b4b      	ldr	r3, [pc, #300]	; (8001890 <USART3_IRQHandler+0x160>)
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <USART3_IRQHandler+0x164>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f7ff fe16 	bl	800139c <USART_SEND>
			++arr_data[2];
 8001770:	4b48      	ldr	r3, [pc, #288]	; (8001894 <USART3_IRQHandler+0x164>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	3301      	adds	r3, #1
 8001776:	4a47      	ldr	r2, [pc, #284]	; (8001894 <USART3_IRQHandler+0x164>)
 8001778:	6093      	str	r3, [r2, #8]
 800177a:	e007      	b.n	800178c <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 800177c:	4b44      	ldr	r3, [pc, #272]	; (8001890 <USART3_IRQHandler+0x160>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	4b43      	ldr	r3, [pc, #268]	; (8001890 <USART3_IRQHandler+0x160>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800178a:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 800178c:	4b40      	ldr	r3, [pc, #256]	; (8001890 <USART3_IRQHandler+0x160>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b01      	cmp	r3, #1
 800179a:	d166      	bne.n	800186a <USART3_IRQHandler+0x13a>
 800179c:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <USART3_IRQHandler+0x160>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d15e      	bne.n	800186a <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <USART3_IRQHandler+0x160>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	0b1b      	lsrs	r3, r3, #12
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d117      	bne.n	80017ec <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 80017bc:	4b34      	ldr	r3, [pc, #208]	; (8001890 <USART3_IRQHandler+0x160>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	0a9b      	lsrs	r3, r3, #10
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d108      	bne.n	80017de <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 80017cc:	4b30      	ldr	r3, [pc, #192]	; (8001890 <USART3_IRQHandler+0x160>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <USART3_IRQHandler+0x168>)
 80017da:	809a      	strh	r2, [r3, #4]
 80017dc:	e020      	b.n	8001820 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 80017de:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <USART3_IRQHandler+0x160>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <USART3_IRQHandler+0x168>)
 80017e8:	809a      	strh	r2, [r3, #4]
 80017ea:	e019      	b.n	8001820 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <USART3_IRQHandler+0x160>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	0a9b      	lsrs	r3, r3, #10
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d109      	bne.n	8001810 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <USART3_IRQHandler+0x160>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	b29b      	uxth	r3, r3
 8001804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <USART3_IRQHandler+0x168>)
 800180c:	809a      	strh	r2, [r3, #4]
 800180e:	e007      	b.n	8001820 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <USART3_IRQHandler+0x160>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	b29b      	uxth	r3, r3
 8001818:	b2db      	uxtb	r3, r3
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <USART3_IRQHandler+0x168>)
 800181e:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <USART3_IRQHandler+0x16c>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	e002      	b.n	8001832 <USART3_IRQHandler+0x102>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3301      	adds	r3, #1
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001838:	4293      	cmp	r3, r2
 800183a:	ddf7      	ble.n	800182c <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <USART3_IRQHandler+0x160>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <USART3_IRQHandler+0x160>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f022 0220 	bic.w	r2, r2, #32
 800184a:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <USART3_IRQHandler+0x160>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <USART3_IRQHandler+0x170>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	b29b      	uxth	r3, r3
 8001858:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <USART3_IRQHandler+0x160>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <USART3_IRQHandler+0x160>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f022 0220 	bic.w	r2, r2, #32
 8001868:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <USART3_IRQHandler+0x160>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <USART3_IRQHandler+0x170>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	b29b      	uxth	r3, r3
 8001876:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <USART3_IRQHandler+0x160>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <USART3_IRQHandler+0x160>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f022 0220 	bic.w	r2, r2, #32
 8001886:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200000ec 	.word	0x200000ec
 8001894:	20000100 	.word	0x20000100
 8001898:	200000f8 	.word	0x200000f8
 800189c:	2000010c 	.word	0x2000010c
 80018a0:	40004800 	.word	0x40004800

080018a4 <echo>:
uint32_t v=0;uint32_t v2=0;
char text[4];
char text2 [4];
uint8_t flagecho=0;
uint8_t flagecho2=0;
void echo(void){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	//TogglePin(GPIOB, pin0);
	if(flagecho==0){
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <echo+0x58>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d107      	bne.n	80018c0 <echo+0x1c>
		flagecho=1;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <echo+0x58>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
		TIME_CALCULATION(8000000, TIMER_START);
 80018b6:	2101      	movs	r1, #1
 80018b8:	4811      	ldr	r0, [pc, #68]	; (8001900 <echo+0x5c>)
 80018ba:	f7fe fe5d 	bl	8000578 <TIME_CALCULATION>
		v=TIME_CALCULATION(8000000, TIMER_STOP);
		sprintf(text,"%d",((v)*170)/10000);
		USART_SEND_STRING(USART1,text);

	}
}
 80018be:	e01b      	b.n	80018f8 <echo+0x54>
		flagecho=0;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <echo+0x58>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
		v=TIME_CALCULATION(8000000, TIMER_STOP);
 80018c6:	2100      	movs	r1, #0
 80018c8:	480d      	ldr	r0, [pc, #52]	; (8001900 <echo+0x5c>)
 80018ca:	f7fe fe55 	bl	8000578 <TIME_CALCULATION>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <echo+0x60>)
 80018d2:	601a      	str	r2, [r3, #0]
		sprintf(text,"%d",((v)*170)/10000);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <echo+0x60>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	22aa      	movs	r2, #170	; 0xaa
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <echo+0x64>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	0b5b      	lsrs	r3, r3, #13
 80018e6:	461a      	mov	r2, r3
 80018e8:	4908      	ldr	r1, [pc, #32]	; (800190c <echo+0x68>)
 80018ea:	4809      	ldr	r0, [pc, #36]	; (8001910 <echo+0x6c>)
 80018ec:	f000 f9a8 	bl	8001c40 <siprintf>
		USART_SEND_STRING(USART1,text);
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <echo+0x6c>)
 80018f2:	4808      	ldr	r0, [pc, #32]	; (8001914 <echo+0x70>)
 80018f4:	f7ff fd70 	bl	80013d8 <USART_SEND_STRING>
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000094 	.word	0x20000094
 8001900:	007a1200 	.word	0x007a1200
 8001904:	2000008c 	.word	0x2000008c
 8001908:	d1b71759 	.word	0xd1b71759
 800190c:	0800247c 	.word	0x0800247c
 8001910:	20000128 	.word	0x20000128
 8001914:	40013800 	.word	0x40013800

08001918 <echo2>:
void echo2(void){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	TogglePin(GPIOB, pin1);
 800191c:	2101      	movs	r1, #1
 800191e:	4816      	ldr	r0, [pc, #88]	; (8001978 <echo2+0x60>)
 8001920:	f7fe fd64 	bl	80003ec <TogglePin>
	if(flagecho2==0){
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <echo2+0x64>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d107      	bne.n	800193c <echo2+0x24>
		flagecho2=1;
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <echo2+0x64>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
		TIME_CALCULATION(8000000, TIMER_START);
 8001932:	2101      	movs	r1, #1
 8001934:	4812      	ldr	r0, [pc, #72]	; (8001980 <echo2+0x68>)
 8001936:	f7fe fe1f 	bl	8000578 <TIME_CALCULATION>
		v2=TIME_CALCULATION(8000000, TIMER_STOP);
		sprintf(text2,"%d",((v2)*170)/10000);
		USART_SEND_STRING(USART1,text2);

	}
}
 800193a:	e01b      	b.n	8001974 <echo2+0x5c>
		flagecho2=0;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <echo2+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
		v2=TIME_CALCULATION(8000000, TIMER_STOP);
 8001942:	2100      	movs	r1, #0
 8001944:	480e      	ldr	r0, [pc, #56]	; (8001980 <echo2+0x68>)
 8001946:	f7fe fe17 	bl	8000578 <TIME_CALCULATION>
 800194a:	4602      	mov	r2, r0
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <echo2+0x6c>)
 800194e:	601a      	str	r2, [r3, #0]
		sprintf(text2,"%d",((v2)*170)/10000);
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <echo2+0x6c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	22aa      	movs	r2, #170	; 0xaa
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <echo2+0x70>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	0b5b      	lsrs	r3, r3, #13
 8001962:	461a      	mov	r2, r3
 8001964:	4909      	ldr	r1, [pc, #36]	; (800198c <echo2+0x74>)
 8001966:	480a      	ldr	r0, [pc, #40]	; (8001990 <echo2+0x78>)
 8001968:	f000 f96a 	bl	8001c40 <siprintf>
		USART_SEND_STRING(USART1,text2);
 800196c:	4908      	ldr	r1, [pc, #32]	; (8001990 <echo2+0x78>)
 800196e:	4809      	ldr	r0, [pc, #36]	; (8001994 <echo2+0x7c>)
 8001970:	f7ff fd32 	bl	80013d8 <USART_SEND_STRING>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40010c00 	.word	0x40010c00
 800197c:	20000095 	.word	0x20000095
 8001980:	007a1200 	.word	0x007a1200
 8001984:	20000090 	.word	0x20000090
 8001988:	d1b71759 	.word	0xd1b71759
 800198c:	0800247c 	.word	0x0800247c
 8001990:	20000124 	.word	0x20000124
 8001994:	40013800 	.word	0x40013800

08001998 <ultrasonic_INIT>:
void ultrasonic_INIT(){
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af04      	add	r7, sp, #16
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,8000000);
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <ultrasonic_INIT+0x54>)
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	2300      	movs	r3, #0
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2300      	movs	r3, #0
 80019ae:	2200      	movs	r2, #0
 80019b0:	210c      	movs	r1, #12
 80019b2:	480f      	ldr	r0, [pc, #60]	; (80019f0 <ultrasonic_INIT+0x58>)
 80019b4:	f7ff fc2c 	bl	8001210 <USART_INIT>
	GPIOA_Clock_Enable();
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <ultrasonic_INIT+0x5c>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <ultrasonic_INIT+0x5c>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6193      	str	r3, [r2, #24]
	GPIOB_Clock_Enable();
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <ultrasonic_INIT+0x5c>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <ultrasonic_INIT+0x5c>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	6193      	str	r3, [r2, #24]
	pinmode(GPIOB, pin11,GPIO_MODE_OUTPUT_push_pull_Speed2);
 80019d0:	2202      	movs	r2, #2
 80019d2:	210b      	movs	r1, #11
 80019d4:	4808      	ldr	r0, [pc, #32]	; (80019f8 <ultrasonic_INIT+0x60>)
 80019d6:	f7fe fc26 	bl	8000226 <pinmode>
	EXTI(GPIOA,pin1,EXTI_Trigger_RisingAndFalling,echo);
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <ultrasonic_INIT+0x64>)
 80019dc:	2202      	movs	r2, #2
 80019de:	2101      	movs	r1, #1
 80019e0:	4807      	ldr	r0, [pc, #28]	; (8001a00 <ultrasonic_INIT+0x68>)
 80019e2:	f7fe fef3 	bl	80007cc <EXTI>
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	007a1200 	.word	0x007a1200
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010c00 	.word	0x40010c00
 80019fc:	080018a5 	.word	0x080018a5
 8001a00:	40010800 	.word	0x40010800

08001a04 <ultrasonic_INIT2>:
void ultrasonic_INIT2(){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af04      	add	r7, sp, #16
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,8000000);
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <ultrasonic_INIT2+0x60>)
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	210c      	movs	r1, #12
 8001a1e:	4812      	ldr	r0, [pc, #72]	; (8001a68 <ultrasonic_INIT2+0x64>)
 8001a20:	f7ff fbf6 	bl	8001210 <USART_INIT>
	GPIOA_Clock_Enable();
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <ultrasonic_INIT2+0x68>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <ultrasonic_INIT2+0x68>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	6193      	str	r3, [r2, #24]
	GPIOB_Clock_Enable();
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <ultrasonic_INIT2+0x68>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <ultrasonic_INIT2+0x68>)
 8001a36:	f043 0308 	orr.w	r3, r3, #8
 8001a3a:	6193      	str	r3, [r2, #24]
	pinmode(GPIOB, pin0,GPIO_MODE_OUTPUT_push_pull_Speed2);
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	2100      	movs	r1, #0
 8001a40:	480b      	ldr	r0, [pc, #44]	; (8001a70 <ultrasonic_INIT2+0x6c>)
 8001a42:	f7fe fbf0 	bl	8000226 <pinmode>
	pinmode(GPIOB, pin1,GPIO_MODE_OUTPUT_push_pull_Speed2);
 8001a46:	2202      	movs	r2, #2
 8001a48:	2101      	movs	r1, #1
 8001a4a:	4809      	ldr	r0, [pc, #36]	; (8001a70 <ultrasonic_INIT2+0x6c>)
 8001a4c:	f7fe fbeb 	bl	8000226 <pinmode>
	EXTI(GPIOA,pin2,EXTI_Trigger_RisingAndFalling,echo2);
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <ultrasonic_INIT2+0x70>)
 8001a52:	2202      	movs	r2, #2
 8001a54:	2102      	movs	r1, #2
 8001a56:	4808      	ldr	r0, [pc, #32]	; (8001a78 <ultrasonic_INIT2+0x74>)
 8001a58:	f7fe feb8 	bl	80007cc <EXTI>
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	007a1200 	.word	0x007a1200
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	08001919 	.word	0x08001919
 8001a78:	40010800 	.word	0x40010800

08001a7c <distance>:
void distance (){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	pinwrite(GPIOB, pin11,HIGH);
 8001a80:	2201      	movs	r2, #1
 8001a82:	210b      	movs	r1, #11
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <distance+0x30>)
 8001a86:	f7fe fc8d 	bl	80003a4 <pinwrite>
	delay(10, U_ms,8000000);
 8001a8a:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <distance+0x34>)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	200a      	movs	r0, #10
 8001a90:	f7fe fcc0 	bl	8000414 <delay>
	pinwrite(GPIOB, pin11,LOW);
 8001a94:	2200      	movs	r2, #0
 8001a96:	210b      	movs	r1, #11
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <distance+0x30>)
 8001a9a:	f7fe fc83 	bl	80003a4 <pinwrite>
	USART_SEND_STRING(USART1,"\n");
 8001a9e:	4905      	ldr	r1, [pc, #20]	; (8001ab4 <distance+0x38>)
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <distance+0x3c>)
 8001aa2:	f7ff fc99 	bl	80013d8 <USART_SEND_STRING>

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40010c00 	.word	0x40010c00
 8001ab0:	007a1200 	.word	0x007a1200
 8001ab4:	08002480 	.word	0x08002480
 8001ab8:	40013800 	.word	0x40013800

08001abc <distance2>:
void distance2 (){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	pinwrite(GPIOB, pin0,HIGH);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <distance2+0x30>)
 8001ac6:	f7fe fc6d 	bl	80003a4 <pinwrite>
	delay(10, U_ms,8000000);
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <distance2+0x34>)
 8001acc:	2100      	movs	r1, #0
 8001ace:	200a      	movs	r0, #10
 8001ad0:	f7fe fca0 	bl	8000414 <delay>
	pinwrite(GPIOB, pin0,LOW);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <distance2+0x30>)
 8001ada:	f7fe fc63 	bl	80003a4 <pinwrite>
	USART_SEND_STRING(USART1,"\n");
 8001ade:	4905      	ldr	r1, [pc, #20]	; (8001af4 <distance2+0x38>)
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <distance2+0x3c>)
 8001ae2:	f7ff fc79 	bl	80013d8 <USART_SEND_STRING>

}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40010c00 	.word	0x40010c00
 8001af0:	007a1200 	.word	0x007a1200
 8001af4:	08002480 	.word	0x08002480
 8001af8:	40013800 	.word	0x40013800

08001afc <main>:
int main (){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	ultrasonic_INIT();
 8001b00:	f7ff ff4a 	bl	8001998 <ultrasonic_INIT>
	ultrasonic_INIT2();
 8001b04:	f7ff ff7e 	bl	8001a04 <ultrasonic_INIT2>
	while(1){

		delay(140,U_ms,8000000);
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <main+0x2c>)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	208c      	movs	r0, #140	; 0x8c
 8001b0e:	f7fe fc81 	bl	8000414 <delay>
		distance();
 8001b12:	f7ff ffb3 	bl	8001a7c <distance>
		delay(140,U_ms,8000000);
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <main+0x2c>)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	208c      	movs	r0, #140	; 0x8c
 8001b1c:	f7fe fc7a 	bl	8000414 <delay>
		distance2();
 8001b20:	f7ff ffcc 	bl	8001abc <distance2>
		delay(140,U_ms,8000000);
 8001b24:	e7f0      	b.n	8001b08 <main+0xc>
 8001b26:	bf00      	nop
 8001b28:	007a1200 	.word	0x007a1200

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b5c:	f000 f846 	bl	8001bec <__errno>
 8001b60:	4602      	mov	r2, r0
 8001b62:	230c      	movs	r3, #12
 8001b64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20002800 	.word	0x20002800
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	20000098 	.word	0x20000098
 8001b94:	20000130 	.word	0x20000130

08001b98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b9a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b9c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba0:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba2:	490d      	ldr	r1, [pc, #52]	; (8001bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <LoopForever+0xe>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba8:	e002      	b.n	8001bb0 <LoopCopyDataInit>

08001baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bae:	3304      	adds	r3, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb4:	d3f9      	bcc.n	8001baa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb8:	4c0a      	ldr	r4, [pc, #40]	; (8001be4 <LoopForever+0x16>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bbc:	e001      	b.n	8001bc2 <LoopFillZerobss>

08001bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc0:	3204      	adds	r2, #4

08001bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc4:	d3fb      	bcc.n	8001bbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bc6:	f000 f817 	bl	8001bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bca:	f7ff ff97 	bl	8001afc <main>

08001bce <LoopForever>:

LoopForever:
    b LoopForever
 8001bce:	e7fe      	b.n	8001bce <LoopForever>
  ldr   r0, =_estack
 8001bd0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001bdc:	080024c0 	.word	0x080024c0
  ldr r2, =_sbss
 8001be0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001be4:	20000130 	.word	0x20000130

08001be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC1_2_IRQHandler>
	...

08001bec <__errno>:
 8001bec:	4b01      	ldr	r3, [pc, #4]	; (8001bf4 <__errno+0x8>)
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <__libc_init_array>:
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	2500      	movs	r5, #0
 8001bfc:	4e0c      	ldr	r6, [pc, #48]	; (8001c30 <__libc_init_array+0x38>)
 8001bfe:	4c0d      	ldr	r4, [pc, #52]	; (8001c34 <__libc_init_array+0x3c>)
 8001c00:	1ba4      	subs	r4, r4, r6
 8001c02:	10a4      	asrs	r4, r4, #2
 8001c04:	42a5      	cmp	r5, r4
 8001c06:	d109      	bne.n	8001c1c <__libc_init_array+0x24>
 8001c08:	f000 fc2c 	bl	8002464 <_init>
 8001c0c:	2500      	movs	r5, #0
 8001c0e:	4e0a      	ldr	r6, [pc, #40]	; (8001c38 <__libc_init_array+0x40>)
 8001c10:	4c0a      	ldr	r4, [pc, #40]	; (8001c3c <__libc_init_array+0x44>)
 8001c12:	1ba4      	subs	r4, r4, r6
 8001c14:	10a4      	asrs	r4, r4, #2
 8001c16:	42a5      	cmp	r5, r4
 8001c18:	d105      	bne.n	8001c26 <__libc_init_array+0x2e>
 8001c1a:	bd70      	pop	{r4, r5, r6, pc}
 8001c1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c20:	4798      	blx	r3
 8001c22:	3501      	adds	r5, #1
 8001c24:	e7ee      	b.n	8001c04 <__libc_init_array+0xc>
 8001c26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c2a:	4798      	blx	r3
 8001c2c:	3501      	adds	r5, #1
 8001c2e:	e7f2      	b.n	8001c16 <__libc_init_array+0x1e>
 8001c30:	080024b8 	.word	0x080024b8
 8001c34:	080024b8 	.word	0x080024b8
 8001c38:	080024b8 	.word	0x080024b8
 8001c3c:	080024bc 	.word	0x080024bc

08001c40 <siprintf>:
 8001c40:	b40e      	push	{r1, r2, r3}
 8001c42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001c46:	b500      	push	{lr}
 8001c48:	b09c      	sub	sp, #112	; 0x70
 8001c4a:	ab1d      	add	r3, sp, #116	; 0x74
 8001c4c:	9002      	str	r0, [sp, #8]
 8001c4e:	9006      	str	r0, [sp, #24]
 8001c50:	9107      	str	r1, [sp, #28]
 8001c52:	9104      	str	r1, [sp, #16]
 8001c54:	4808      	ldr	r0, [pc, #32]	; (8001c78 <siprintf+0x38>)
 8001c56:	4909      	ldr	r1, [pc, #36]	; (8001c7c <siprintf+0x3c>)
 8001c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c5c:	9105      	str	r1, [sp, #20]
 8001c5e:	6800      	ldr	r0, [r0, #0]
 8001c60:	a902      	add	r1, sp, #8
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	f000 f8e6 	bl	8001e34 <_svfiprintf_r>
 8001c68:	2200      	movs	r2, #0
 8001c6a:	9b02      	ldr	r3, [sp, #8]
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	b01c      	add	sp, #112	; 0x70
 8001c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c74:	b003      	add	sp, #12
 8001c76:	4770      	bx	lr
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	ffff0208 	.word	0xffff0208

08001c80 <_malloc_r>:
 8001c80:	b570      	push	{r4, r5, r6, lr}
 8001c82:	1ccd      	adds	r5, r1, #3
 8001c84:	f025 0503 	bic.w	r5, r5, #3
 8001c88:	3508      	adds	r5, #8
 8001c8a:	2d0c      	cmp	r5, #12
 8001c8c:	bf38      	it	cc
 8001c8e:	250c      	movcc	r5, #12
 8001c90:	2d00      	cmp	r5, #0
 8001c92:	4606      	mov	r6, r0
 8001c94:	db01      	blt.n	8001c9a <_malloc_r+0x1a>
 8001c96:	42a9      	cmp	r1, r5
 8001c98:	d903      	bls.n	8001ca2 <_malloc_r+0x22>
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	6033      	str	r3, [r6, #0]
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	bd70      	pop	{r4, r5, r6, pc}
 8001ca2:	f000 fb89 	bl	80023b8 <__malloc_lock>
 8001ca6:	4a21      	ldr	r2, [pc, #132]	; (8001d2c <_malloc_r+0xac>)
 8001ca8:	6814      	ldr	r4, [r2, #0]
 8001caa:	4621      	mov	r1, r4
 8001cac:	b991      	cbnz	r1, 8001cd4 <_malloc_r+0x54>
 8001cae:	4c20      	ldr	r4, [pc, #128]	; (8001d30 <_malloc_r+0xb0>)
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	b91b      	cbnz	r3, 8001cbc <_malloc_r+0x3c>
 8001cb4:	4630      	mov	r0, r6
 8001cb6:	f000 fb3d 	bl	8002334 <_sbrk_r>
 8001cba:	6020      	str	r0, [r4, #0]
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f000 fb38 	bl	8002334 <_sbrk_r>
 8001cc4:	1c43      	adds	r3, r0, #1
 8001cc6:	d124      	bne.n	8001d12 <_malloc_r+0x92>
 8001cc8:	230c      	movs	r3, #12
 8001cca:	4630      	mov	r0, r6
 8001ccc:	6033      	str	r3, [r6, #0]
 8001cce:	f000 fb74 	bl	80023ba <__malloc_unlock>
 8001cd2:	e7e4      	b.n	8001c9e <_malloc_r+0x1e>
 8001cd4:	680b      	ldr	r3, [r1, #0]
 8001cd6:	1b5b      	subs	r3, r3, r5
 8001cd8:	d418      	bmi.n	8001d0c <_malloc_r+0x8c>
 8001cda:	2b0b      	cmp	r3, #11
 8001cdc:	d90f      	bls.n	8001cfe <_malloc_r+0x7e>
 8001cde:	600b      	str	r3, [r1, #0]
 8001ce0:	18cc      	adds	r4, r1, r3
 8001ce2:	50cd      	str	r5, [r1, r3]
 8001ce4:	4630      	mov	r0, r6
 8001ce6:	f000 fb68 	bl	80023ba <__malloc_unlock>
 8001cea:	f104 000b 	add.w	r0, r4, #11
 8001cee:	1d23      	adds	r3, r4, #4
 8001cf0:	f020 0007 	bic.w	r0, r0, #7
 8001cf4:	1ac3      	subs	r3, r0, r3
 8001cf6:	d0d3      	beq.n	8001ca0 <_malloc_r+0x20>
 8001cf8:	425a      	negs	r2, r3
 8001cfa:	50e2      	str	r2, [r4, r3]
 8001cfc:	e7d0      	b.n	8001ca0 <_malloc_r+0x20>
 8001cfe:	684b      	ldr	r3, [r1, #4]
 8001d00:	428c      	cmp	r4, r1
 8001d02:	bf16      	itet	ne
 8001d04:	6063      	strne	r3, [r4, #4]
 8001d06:	6013      	streq	r3, [r2, #0]
 8001d08:	460c      	movne	r4, r1
 8001d0a:	e7eb      	b.n	8001ce4 <_malloc_r+0x64>
 8001d0c:	460c      	mov	r4, r1
 8001d0e:	6849      	ldr	r1, [r1, #4]
 8001d10:	e7cc      	b.n	8001cac <_malloc_r+0x2c>
 8001d12:	1cc4      	adds	r4, r0, #3
 8001d14:	f024 0403 	bic.w	r4, r4, #3
 8001d18:	42a0      	cmp	r0, r4
 8001d1a:	d005      	beq.n	8001d28 <_malloc_r+0xa8>
 8001d1c:	1a21      	subs	r1, r4, r0
 8001d1e:	4630      	mov	r0, r6
 8001d20:	f000 fb08 	bl	8002334 <_sbrk_r>
 8001d24:	3001      	adds	r0, #1
 8001d26:	d0cf      	beq.n	8001cc8 <_malloc_r+0x48>
 8001d28:	6025      	str	r5, [r4, #0]
 8001d2a:	e7db      	b.n	8001ce4 <_malloc_r+0x64>
 8001d2c:	2000009c 	.word	0x2000009c
 8001d30:	200000a0 	.word	0x200000a0

08001d34 <_realloc_r>:
 8001d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d36:	4607      	mov	r7, r0
 8001d38:	4614      	mov	r4, r2
 8001d3a:	460e      	mov	r6, r1
 8001d3c:	b921      	cbnz	r1, 8001d48 <_realloc_r+0x14>
 8001d3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001d42:	4611      	mov	r1, r2
 8001d44:	f7ff bf9c 	b.w	8001c80 <_malloc_r>
 8001d48:	b922      	cbnz	r2, 8001d54 <_realloc_r+0x20>
 8001d4a:	f000 fb37 	bl	80023bc <_free_r>
 8001d4e:	4625      	mov	r5, r4
 8001d50:	4628      	mov	r0, r5
 8001d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d54:	f000 fb7e 	bl	8002454 <_malloc_usable_size_r>
 8001d58:	42a0      	cmp	r0, r4
 8001d5a:	d20f      	bcs.n	8001d7c <_realloc_r+0x48>
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	4638      	mov	r0, r7
 8001d60:	f7ff ff8e 	bl	8001c80 <_malloc_r>
 8001d64:	4605      	mov	r5, r0
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d0f2      	beq.n	8001d50 <_realloc_r+0x1c>
 8001d6a:	4631      	mov	r1, r6
 8001d6c:	4622      	mov	r2, r4
 8001d6e:	f000 faff 	bl	8002370 <memcpy>
 8001d72:	4631      	mov	r1, r6
 8001d74:	4638      	mov	r0, r7
 8001d76:	f000 fb21 	bl	80023bc <_free_r>
 8001d7a:	e7e9      	b.n	8001d50 <_realloc_r+0x1c>
 8001d7c:	4635      	mov	r5, r6
 8001d7e:	e7e7      	b.n	8001d50 <_realloc_r+0x1c>

08001d80 <__ssputs_r>:
 8001d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d84:	688e      	ldr	r6, [r1, #8]
 8001d86:	4682      	mov	sl, r0
 8001d88:	429e      	cmp	r6, r3
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	4690      	mov	r8, r2
 8001d8e:	4699      	mov	r9, r3
 8001d90:	d837      	bhi.n	8001e02 <__ssputs_r+0x82>
 8001d92:	898a      	ldrh	r2, [r1, #12]
 8001d94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001d98:	d031      	beq.n	8001dfe <__ssputs_r+0x7e>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	6825      	ldr	r5, [r4, #0]
 8001d9e:	6909      	ldr	r1, [r1, #16]
 8001da0:	1a6f      	subs	r7, r5, r1
 8001da2:	6965      	ldr	r5, [r4, #20]
 8001da4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001da8:	fb95 f5f3 	sdiv	r5, r5, r3
 8001dac:	f109 0301 	add.w	r3, r9, #1
 8001db0:	443b      	add	r3, r7
 8001db2:	429d      	cmp	r5, r3
 8001db4:	bf38      	it	cc
 8001db6:	461d      	movcc	r5, r3
 8001db8:	0553      	lsls	r3, r2, #21
 8001dba:	d530      	bpl.n	8001e1e <__ssputs_r+0x9e>
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	f7ff ff5f 	bl	8001c80 <_malloc_r>
 8001dc2:	4606      	mov	r6, r0
 8001dc4:	b950      	cbnz	r0, 8001ddc <__ssputs_r+0x5c>
 8001dc6:	230c      	movs	r3, #12
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f8ca 3000 	str.w	r3, [sl]
 8001dd0:	89a3      	ldrh	r3, [r4, #12]
 8001dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd6:	81a3      	strh	r3, [r4, #12]
 8001dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ddc:	463a      	mov	r2, r7
 8001dde:	6921      	ldr	r1, [r4, #16]
 8001de0:	f000 fac6 	bl	8002370 <memcpy>
 8001de4:	89a3      	ldrh	r3, [r4, #12]
 8001de6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dee:	81a3      	strh	r3, [r4, #12]
 8001df0:	6126      	str	r6, [r4, #16]
 8001df2:	443e      	add	r6, r7
 8001df4:	6026      	str	r6, [r4, #0]
 8001df6:	464e      	mov	r6, r9
 8001df8:	6165      	str	r5, [r4, #20]
 8001dfa:	1bed      	subs	r5, r5, r7
 8001dfc:	60a5      	str	r5, [r4, #8]
 8001dfe:	454e      	cmp	r6, r9
 8001e00:	d900      	bls.n	8001e04 <__ssputs_r+0x84>
 8001e02:	464e      	mov	r6, r9
 8001e04:	4632      	mov	r2, r6
 8001e06:	4641      	mov	r1, r8
 8001e08:	6820      	ldr	r0, [r4, #0]
 8001e0a:	f000 fabc 	bl	8002386 <memmove>
 8001e0e:	68a3      	ldr	r3, [r4, #8]
 8001e10:	2000      	movs	r0, #0
 8001e12:	1b9b      	subs	r3, r3, r6
 8001e14:	60a3      	str	r3, [r4, #8]
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	441e      	add	r6, r3
 8001e1a:	6026      	str	r6, [r4, #0]
 8001e1c:	e7dc      	b.n	8001dd8 <__ssputs_r+0x58>
 8001e1e:	462a      	mov	r2, r5
 8001e20:	f7ff ff88 	bl	8001d34 <_realloc_r>
 8001e24:	4606      	mov	r6, r0
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d1e2      	bne.n	8001df0 <__ssputs_r+0x70>
 8001e2a:	6921      	ldr	r1, [r4, #16]
 8001e2c:	4650      	mov	r0, sl
 8001e2e:	f000 fac5 	bl	80023bc <_free_r>
 8001e32:	e7c8      	b.n	8001dc6 <__ssputs_r+0x46>

08001e34 <_svfiprintf_r>:
 8001e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e38:	461d      	mov	r5, r3
 8001e3a:	898b      	ldrh	r3, [r1, #12]
 8001e3c:	b09d      	sub	sp, #116	; 0x74
 8001e3e:	061f      	lsls	r7, r3, #24
 8001e40:	4680      	mov	r8, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	4616      	mov	r6, r2
 8001e46:	d50f      	bpl.n	8001e68 <_svfiprintf_r+0x34>
 8001e48:	690b      	ldr	r3, [r1, #16]
 8001e4a:	b96b      	cbnz	r3, 8001e68 <_svfiprintf_r+0x34>
 8001e4c:	2140      	movs	r1, #64	; 0x40
 8001e4e:	f7ff ff17 	bl	8001c80 <_malloc_r>
 8001e52:	6020      	str	r0, [r4, #0]
 8001e54:	6120      	str	r0, [r4, #16]
 8001e56:	b928      	cbnz	r0, 8001e64 <_svfiprintf_r+0x30>
 8001e58:	230c      	movs	r3, #12
 8001e5a:	f8c8 3000 	str.w	r3, [r8]
 8001e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e62:	e0c8      	b.n	8001ff6 <_svfiprintf_r+0x1c2>
 8001e64:	2340      	movs	r3, #64	; 0x40
 8001e66:	6163      	str	r3, [r4, #20]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e72:	2330      	movs	r3, #48	; 0x30
 8001e74:	f04f 0b01 	mov.w	fp, #1
 8001e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e7c:	9503      	str	r5, [sp, #12]
 8001e7e:	4637      	mov	r7, r6
 8001e80:	463d      	mov	r5, r7
 8001e82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001e86:	b10b      	cbz	r3, 8001e8c <_svfiprintf_r+0x58>
 8001e88:	2b25      	cmp	r3, #37	; 0x25
 8001e8a:	d13e      	bne.n	8001f0a <_svfiprintf_r+0xd6>
 8001e8c:	ebb7 0a06 	subs.w	sl, r7, r6
 8001e90:	d00b      	beq.n	8001eaa <_svfiprintf_r+0x76>
 8001e92:	4653      	mov	r3, sl
 8001e94:	4632      	mov	r2, r6
 8001e96:	4621      	mov	r1, r4
 8001e98:	4640      	mov	r0, r8
 8001e9a:	f7ff ff71 	bl	8001d80 <__ssputs_r>
 8001e9e:	3001      	adds	r0, #1
 8001ea0:	f000 80a4 	beq.w	8001fec <_svfiprintf_r+0x1b8>
 8001ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ea6:	4453      	add	r3, sl
 8001ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8001eaa:	783b      	ldrb	r3, [r7, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 809d 	beq.w	8001fec <_svfiprintf_r+0x1b8>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ebc:	9304      	str	r3, [sp, #16]
 8001ebe:	9307      	str	r3, [sp, #28]
 8001ec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ec4:	931a      	str	r3, [sp, #104]	; 0x68
 8001ec6:	462f      	mov	r7, r5
 8001ec8:	2205      	movs	r2, #5
 8001eca:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001ece:	4850      	ldr	r0, [pc, #320]	; (8002010 <_svfiprintf_r+0x1dc>)
 8001ed0:	f000 fa40 	bl	8002354 <memchr>
 8001ed4:	9b04      	ldr	r3, [sp, #16]
 8001ed6:	b9d0      	cbnz	r0, 8001f0e <_svfiprintf_r+0xda>
 8001ed8:	06d9      	lsls	r1, r3, #27
 8001eda:	bf44      	itt	mi
 8001edc:	2220      	movmi	r2, #32
 8001ede:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ee2:	071a      	lsls	r2, r3, #28
 8001ee4:	bf44      	itt	mi
 8001ee6:	222b      	movmi	r2, #43	; 0x2b
 8001ee8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001eec:	782a      	ldrb	r2, [r5, #0]
 8001eee:	2a2a      	cmp	r2, #42	; 0x2a
 8001ef0:	d015      	beq.n	8001f1e <_svfiprintf_r+0xea>
 8001ef2:	462f      	mov	r7, r5
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	250a      	movs	r5, #10
 8001ef8:	9a07      	ldr	r2, [sp, #28]
 8001efa:	4639      	mov	r1, r7
 8001efc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f00:	3b30      	subs	r3, #48	; 0x30
 8001f02:	2b09      	cmp	r3, #9
 8001f04:	d94d      	bls.n	8001fa2 <_svfiprintf_r+0x16e>
 8001f06:	b1b8      	cbz	r0, 8001f38 <_svfiprintf_r+0x104>
 8001f08:	e00f      	b.n	8001f2a <_svfiprintf_r+0xf6>
 8001f0a:	462f      	mov	r7, r5
 8001f0c:	e7b8      	b.n	8001e80 <_svfiprintf_r+0x4c>
 8001f0e:	4a40      	ldr	r2, [pc, #256]	; (8002010 <_svfiprintf_r+0x1dc>)
 8001f10:	463d      	mov	r5, r7
 8001f12:	1a80      	subs	r0, r0, r2
 8001f14:	fa0b f000 	lsl.w	r0, fp, r0
 8001f18:	4318      	orrs	r0, r3
 8001f1a:	9004      	str	r0, [sp, #16]
 8001f1c:	e7d3      	b.n	8001ec6 <_svfiprintf_r+0x92>
 8001f1e:	9a03      	ldr	r2, [sp, #12]
 8001f20:	1d11      	adds	r1, r2, #4
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	9103      	str	r1, [sp, #12]
 8001f26:	2a00      	cmp	r2, #0
 8001f28:	db01      	blt.n	8001f2e <_svfiprintf_r+0xfa>
 8001f2a:	9207      	str	r2, [sp, #28]
 8001f2c:	e004      	b.n	8001f38 <_svfiprintf_r+0x104>
 8001f2e:	4252      	negs	r2, r2
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	9207      	str	r2, [sp, #28]
 8001f36:	9304      	str	r3, [sp, #16]
 8001f38:	783b      	ldrb	r3, [r7, #0]
 8001f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8001f3c:	d10c      	bne.n	8001f58 <_svfiprintf_r+0x124>
 8001f3e:	787b      	ldrb	r3, [r7, #1]
 8001f40:	2b2a      	cmp	r3, #42	; 0x2a
 8001f42:	d133      	bne.n	8001fac <_svfiprintf_r+0x178>
 8001f44:	9b03      	ldr	r3, [sp, #12]
 8001f46:	3702      	adds	r7, #2
 8001f48:	1d1a      	adds	r2, r3, #4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	9203      	str	r2, [sp, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	bfb8      	it	lt
 8001f52:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f56:	9305      	str	r3, [sp, #20]
 8001f58:	4d2e      	ldr	r5, [pc, #184]	; (8002014 <_svfiprintf_r+0x1e0>)
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	7839      	ldrb	r1, [r7, #0]
 8001f5e:	4628      	mov	r0, r5
 8001f60:	f000 f9f8 	bl	8002354 <memchr>
 8001f64:	b138      	cbz	r0, 8001f76 <_svfiprintf_r+0x142>
 8001f66:	2340      	movs	r3, #64	; 0x40
 8001f68:	1b40      	subs	r0, r0, r5
 8001f6a:	fa03 f000 	lsl.w	r0, r3, r0
 8001f6e:	9b04      	ldr	r3, [sp, #16]
 8001f70:	3701      	adds	r7, #1
 8001f72:	4303      	orrs	r3, r0
 8001f74:	9304      	str	r3, [sp, #16]
 8001f76:	7839      	ldrb	r1, [r7, #0]
 8001f78:	2206      	movs	r2, #6
 8001f7a:	4827      	ldr	r0, [pc, #156]	; (8002018 <_svfiprintf_r+0x1e4>)
 8001f7c:	1c7e      	adds	r6, r7, #1
 8001f7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f82:	f000 f9e7 	bl	8002354 <memchr>
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d038      	beq.n	8001ffc <_svfiprintf_r+0x1c8>
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <_svfiprintf_r+0x1e8>)
 8001f8c:	bb13      	cbnz	r3, 8001fd4 <_svfiprintf_r+0x1a0>
 8001f8e:	9b03      	ldr	r3, [sp, #12]
 8001f90:	3307      	adds	r3, #7
 8001f92:	f023 0307 	bic.w	r3, r3, #7
 8001f96:	3308      	adds	r3, #8
 8001f98:	9303      	str	r3, [sp, #12]
 8001f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f9c:	444b      	add	r3, r9
 8001f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8001fa0:	e76d      	b.n	8001e7e <_svfiprintf_r+0x4a>
 8001fa2:	fb05 3202 	mla	r2, r5, r2, r3
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	460f      	mov	r7, r1
 8001faa:	e7a6      	b.n	8001efa <_svfiprintf_r+0xc6>
 8001fac:	2300      	movs	r3, #0
 8001fae:	250a      	movs	r5, #10
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	3701      	adds	r7, #1
 8001fb4:	9305      	str	r3, [sp, #20]
 8001fb6:	4638      	mov	r0, r7
 8001fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001fbc:	3a30      	subs	r2, #48	; 0x30
 8001fbe:	2a09      	cmp	r2, #9
 8001fc0:	d903      	bls.n	8001fca <_svfiprintf_r+0x196>
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0c8      	beq.n	8001f58 <_svfiprintf_r+0x124>
 8001fc6:	9105      	str	r1, [sp, #20]
 8001fc8:	e7c6      	b.n	8001f58 <_svfiprintf_r+0x124>
 8001fca:	fb05 2101 	mla	r1, r5, r1, r2
 8001fce:	2301      	movs	r3, #1
 8001fd0:	4607      	mov	r7, r0
 8001fd2:	e7f0      	b.n	8001fb6 <_svfiprintf_r+0x182>
 8001fd4:	ab03      	add	r3, sp, #12
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	4622      	mov	r2, r4
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <_svfiprintf_r+0x1ec>)
 8001fdc:	a904      	add	r1, sp, #16
 8001fde:	4640      	mov	r0, r8
 8001fe0:	f3af 8000 	nop.w
 8001fe4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001fe8:	4681      	mov	r9, r0
 8001fea:	d1d6      	bne.n	8001f9a <_svfiprintf_r+0x166>
 8001fec:	89a3      	ldrh	r3, [r4, #12]
 8001fee:	065b      	lsls	r3, r3, #25
 8001ff0:	f53f af35 	bmi.w	8001e5e <_svfiprintf_r+0x2a>
 8001ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ff6:	b01d      	add	sp, #116	; 0x74
 8001ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ffc:	ab03      	add	r3, sp, #12
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	4622      	mov	r2, r4
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <_svfiprintf_r+0x1ec>)
 8002004:	a904      	add	r1, sp, #16
 8002006:	4640      	mov	r0, r8
 8002008:	f000 f882 	bl	8002110 <_printf_i>
 800200c:	e7ea      	b.n	8001fe4 <_svfiprintf_r+0x1b0>
 800200e:	bf00      	nop
 8002010:	08002482 	.word	0x08002482
 8002014:	08002488 	.word	0x08002488
 8002018:	0800248c 	.word	0x0800248c
 800201c:	00000000 	.word	0x00000000
 8002020:	08001d81 	.word	0x08001d81

08002024 <_printf_common>:
 8002024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002028:	4691      	mov	r9, r2
 800202a:	461f      	mov	r7, r3
 800202c:	688a      	ldr	r2, [r1, #8]
 800202e:	690b      	ldr	r3, [r1, #16]
 8002030:	4606      	mov	r6, r0
 8002032:	4293      	cmp	r3, r2
 8002034:	bfb8      	it	lt
 8002036:	4613      	movlt	r3, r2
 8002038:	f8c9 3000 	str.w	r3, [r9]
 800203c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002040:	460c      	mov	r4, r1
 8002042:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002046:	b112      	cbz	r2, 800204e <_printf_common+0x2a>
 8002048:	3301      	adds	r3, #1
 800204a:	f8c9 3000 	str.w	r3, [r9]
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	0699      	lsls	r1, r3, #26
 8002052:	bf42      	ittt	mi
 8002054:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002058:	3302      	addmi	r3, #2
 800205a:	f8c9 3000 	strmi.w	r3, [r9]
 800205e:	6825      	ldr	r5, [r4, #0]
 8002060:	f015 0506 	ands.w	r5, r5, #6
 8002064:	d107      	bne.n	8002076 <_printf_common+0x52>
 8002066:	f104 0a19 	add.w	sl, r4, #25
 800206a:	68e3      	ldr	r3, [r4, #12]
 800206c:	f8d9 2000 	ldr.w	r2, [r9]
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	42ab      	cmp	r3, r5
 8002074:	dc29      	bgt.n	80020ca <_printf_common+0xa6>
 8002076:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800207a:	6822      	ldr	r2, [r4, #0]
 800207c:	3300      	adds	r3, #0
 800207e:	bf18      	it	ne
 8002080:	2301      	movne	r3, #1
 8002082:	0692      	lsls	r2, r2, #26
 8002084:	d42e      	bmi.n	80020e4 <_printf_common+0xc0>
 8002086:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800208a:	4639      	mov	r1, r7
 800208c:	4630      	mov	r0, r6
 800208e:	47c0      	blx	r8
 8002090:	3001      	adds	r0, #1
 8002092:	d021      	beq.n	80020d8 <_printf_common+0xb4>
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	68e5      	ldr	r5, [r4, #12]
 8002098:	f003 0306 	and.w	r3, r3, #6
 800209c:	2b04      	cmp	r3, #4
 800209e:	bf18      	it	ne
 80020a0:	2500      	movne	r5, #0
 80020a2:	f8d9 2000 	ldr.w	r2, [r9]
 80020a6:	f04f 0900 	mov.w	r9, #0
 80020aa:	bf08      	it	eq
 80020ac:	1aad      	subeq	r5, r5, r2
 80020ae:	68a3      	ldr	r3, [r4, #8]
 80020b0:	6922      	ldr	r2, [r4, #16]
 80020b2:	bf08      	it	eq
 80020b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020b8:	4293      	cmp	r3, r2
 80020ba:	bfc4      	itt	gt
 80020bc:	1a9b      	subgt	r3, r3, r2
 80020be:	18ed      	addgt	r5, r5, r3
 80020c0:	341a      	adds	r4, #26
 80020c2:	454d      	cmp	r5, r9
 80020c4:	d11a      	bne.n	80020fc <_printf_common+0xd8>
 80020c6:	2000      	movs	r0, #0
 80020c8:	e008      	b.n	80020dc <_printf_common+0xb8>
 80020ca:	2301      	movs	r3, #1
 80020cc:	4652      	mov	r2, sl
 80020ce:	4639      	mov	r1, r7
 80020d0:	4630      	mov	r0, r6
 80020d2:	47c0      	blx	r8
 80020d4:	3001      	adds	r0, #1
 80020d6:	d103      	bne.n	80020e0 <_printf_common+0xbc>
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020e0:	3501      	adds	r5, #1
 80020e2:	e7c2      	b.n	800206a <_printf_common+0x46>
 80020e4:	2030      	movs	r0, #48	; 0x30
 80020e6:	18e1      	adds	r1, r4, r3
 80020e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80020f2:	4422      	add	r2, r4
 80020f4:	3302      	adds	r3, #2
 80020f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80020fa:	e7c4      	b.n	8002086 <_printf_common+0x62>
 80020fc:	2301      	movs	r3, #1
 80020fe:	4622      	mov	r2, r4
 8002100:	4639      	mov	r1, r7
 8002102:	4630      	mov	r0, r6
 8002104:	47c0      	blx	r8
 8002106:	3001      	adds	r0, #1
 8002108:	d0e6      	beq.n	80020d8 <_printf_common+0xb4>
 800210a:	f109 0901 	add.w	r9, r9, #1
 800210e:	e7d8      	b.n	80020c2 <_printf_common+0x9e>

08002110 <_printf_i>:
 8002110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002114:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002118:	460c      	mov	r4, r1
 800211a:	7e09      	ldrb	r1, [r1, #24]
 800211c:	b085      	sub	sp, #20
 800211e:	296e      	cmp	r1, #110	; 0x6e
 8002120:	4617      	mov	r7, r2
 8002122:	4606      	mov	r6, r0
 8002124:	4698      	mov	r8, r3
 8002126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002128:	f000 80b3 	beq.w	8002292 <_printf_i+0x182>
 800212c:	d822      	bhi.n	8002174 <_printf_i+0x64>
 800212e:	2963      	cmp	r1, #99	; 0x63
 8002130:	d036      	beq.n	80021a0 <_printf_i+0x90>
 8002132:	d80a      	bhi.n	800214a <_printf_i+0x3a>
 8002134:	2900      	cmp	r1, #0
 8002136:	f000 80b9 	beq.w	80022ac <_printf_i+0x19c>
 800213a:	2958      	cmp	r1, #88	; 0x58
 800213c:	f000 8083 	beq.w	8002246 <_printf_i+0x136>
 8002140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002144:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002148:	e032      	b.n	80021b0 <_printf_i+0xa0>
 800214a:	2964      	cmp	r1, #100	; 0x64
 800214c:	d001      	beq.n	8002152 <_printf_i+0x42>
 800214e:	2969      	cmp	r1, #105	; 0x69
 8002150:	d1f6      	bne.n	8002140 <_printf_i+0x30>
 8002152:	6820      	ldr	r0, [r4, #0]
 8002154:	6813      	ldr	r3, [r2, #0]
 8002156:	0605      	lsls	r5, r0, #24
 8002158:	f103 0104 	add.w	r1, r3, #4
 800215c:	d52a      	bpl.n	80021b4 <_printf_i+0xa4>
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6011      	str	r1, [r2, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	da03      	bge.n	800216e <_printf_i+0x5e>
 8002166:	222d      	movs	r2, #45	; 0x2d
 8002168:	425b      	negs	r3, r3
 800216a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800216e:	486f      	ldr	r0, [pc, #444]	; (800232c <_printf_i+0x21c>)
 8002170:	220a      	movs	r2, #10
 8002172:	e039      	b.n	80021e8 <_printf_i+0xd8>
 8002174:	2973      	cmp	r1, #115	; 0x73
 8002176:	f000 809d 	beq.w	80022b4 <_printf_i+0x1a4>
 800217a:	d808      	bhi.n	800218e <_printf_i+0x7e>
 800217c:	296f      	cmp	r1, #111	; 0x6f
 800217e:	d020      	beq.n	80021c2 <_printf_i+0xb2>
 8002180:	2970      	cmp	r1, #112	; 0x70
 8002182:	d1dd      	bne.n	8002140 <_printf_i+0x30>
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	f043 0320 	orr.w	r3, r3, #32
 800218a:	6023      	str	r3, [r4, #0]
 800218c:	e003      	b.n	8002196 <_printf_i+0x86>
 800218e:	2975      	cmp	r1, #117	; 0x75
 8002190:	d017      	beq.n	80021c2 <_printf_i+0xb2>
 8002192:	2978      	cmp	r1, #120	; 0x78
 8002194:	d1d4      	bne.n	8002140 <_printf_i+0x30>
 8002196:	2378      	movs	r3, #120	; 0x78
 8002198:	4865      	ldr	r0, [pc, #404]	; (8002330 <_printf_i+0x220>)
 800219a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800219e:	e055      	b.n	800224c <_printf_i+0x13c>
 80021a0:	6813      	ldr	r3, [r2, #0]
 80021a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021a6:	1d19      	adds	r1, r3, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6011      	str	r1, [r2, #0]
 80021ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021b0:	2301      	movs	r3, #1
 80021b2:	e08c      	b.n	80022ce <_printf_i+0x1be>
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80021ba:	6011      	str	r1, [r2, #0]
 80021bc:	bf18      	it	ne
 80021be:	b21b      	sxthne	r3, r3
 80021c0:	e7cf      	b.n	8002162 <_printf_i+0x52>
 80021c2:	6813      	ldr	r3, [r2, #0]
 80021c4:	6825      	ldr	r5, [r4, #0]
 80021c6:	1d18      	adds	r0, r3, #4
 80021c8:	6010      	str	r0, [r2, #0]
 80021ca:	0628      	lsls	r0, r5, #24
 80021cc:	d501      	bpl.n	80021d2 <_printf_i+0xc2>
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	e002      	b.n	80021d8 <_printf_i+0xc8>
 80021d2:	0668      	lsls	r0, r5, #25
 80021d4:	d5fb      	bpl.n	80021ce <_printf_i+0xbe>
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	296f      	cmp	r1, #111	; 0x6f
 80021da:	bf14      	ite	ne
 80021dc:	220a      	movne	r2, #10
 80021de:	2208      	moveq	r2, #8
 80021e0:	4852      	ldr	r0, [pc, #328]	; (800232c <_printf_i+0x21c>)
 80021e2:	2100      	movs	r1, #0
 80021e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80021e8:	6865      	ldr	r5, [r4, #4]
 80021ea:	2d00      	cmp	r5, #0
 80021ec:	60a5      	str	r5, [r4, #8]
 80021ee:	f2c0 8095 	blt.w	800231c <_printf_i+0x20c>
 80021f2:	6821      	ldr	r1, [r4, #0]
 80021f4:	f021 0104 	bic.w	r1, r1, #4
 80021f8:	6021      	str	r1, [r4, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d13d      	bne.n	800227a <_printf_i+0x16a>
 80021fe:	2d00      	cmp	r5, #0
 8002200:	f040 808e 	bne.w	8002320 <_printf_i+0x210>
 8002204:	4665      	mov	r5, ip
 8002206:	2a08      	cmp	r2, #8
 8002208:	d10b      	bne.n	8002222 <_printf_i+0x112>
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	07db      	lsls	r3, r3, #31
 800220e:	d508      	bpl.n	8002222 <_printf_i+0x112>
 8002210:	6923      	ldr	r3, [r4, #16]
 8002212:	6862      	ldr	r2, [r4, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	bfde      	ittt	le
 8002218:	2330      	movle	r3, #48	; 0x30
 800221a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800221e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002222:	ebac 0305 	sub.w	r3, ip, r5
 8002226:	6123      	str	r3, [r4, #16]
 8002228:	f8cd 8000 	str.w	r8, [sp]
 800222c:	463b      	mov	r3, r7
 800222e:	aa03      	add	r2, sp, #12
 8002230:	4621      	mov	r1, r4
 8002232:	4630      	mov	r0, r6
 8002234:	f7ff fef6 	bl	8002024 <_printf_common>
 8002238:	3001      	adds	r0, #1
 800223a:	d14d      	bne.n	80022d8 <_printf_i+0x1c8>
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	b005      	add	sp, #20
 8002242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002246:	4839      	ldr	r0, [pc, #228]	; (800232c <_printf_i+0x21c>)
 8002248:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800224c:	6813      	ldr	r3, [r2, #0]
 800224e:	6821      	ldr	r1, [r4, #0]
 8002250:	1d1d      	adds	r5, r3, #4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6015      	str	r5, [r2, #0]
 8002256:	060a      	lsls	r2, r1, #24
 8002258:	d50b      	bpl.n	8002272 <_printf_i+0x162>
 800225a:	07ca      	lsls	r2, r1, #31
 800225c:	bf44      	itt	mi
 800225e:	f041 0120 	orrmi.w	r1, r1, #32
 8002262:	6021      	strmi	r1, [r4, #0]
 8002264:	b91b      	cbnz	r3, 800226e <_printf_i+0x15e>
 8002266:	6822      	ldr	r2, [r4, #0]
 8002268:	f022 0220 	bic.w	r2, r2, #32
 800226c:	6022      	str	r2, [r4, #0]
 800226e:	2210      	movs	r2, #16
 8002270:	e7b7      	b.n	80021e2 <_printf_i+0xd2>
 8002272:	064d      	lsls	r5, r1, #25
 8002274:	bf48      	it	mi
 8002276:	b29b      	uxthmi	r3, r3
 8002278:	e7ef      	b.n	800225a <_printf_i+0x14a>
 800227a:	4665      	mov	r5, ip
 800227c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002280:	fb02 3311 	mls	r3, r2, r1, r3
 8002284:	5cc3      	ldrb	r3, [r0, r3]
 8002286:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800228a:	460b      	mov	r3, r1
 800228c:	2900      	cmp	r1, #0
 800228e:	d1f5      	bne.n	800227c <_printf_i+0x16c>
 8002290:	e7b9      	b.n	8002206 <_printf_i+0xf6>
 8002292:	6813      	ldr	r3, [r2, #0]
 8002294:	6825      	ldr	r5, [r4, #0]
 8002296:	1d18      	adds	r0, r3, #4
 8002298:	6961      	ldr	r1, [r4, #20]
 800229a:	6010      	str	r0, [r2, #0]
 800229c:	0628      	lsls	r0, r5, #24
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	d501      	bpl.n	80022a6 <_printf_i+0x196>
 80022a2:	6019      	str	r1, [r3, #0]
 80022a4:	e002      	b.n	80022ac <_printf_i+0x19c>
 80022a6:	066a      	lsls	r2, r5, #25
 80022a8:	d5fb      	bpl.n	80022a2 <_printf_i+0x192>
 80022aa:	8019      	strh	r1, [r3, #0]
 80022ac:	2300      	movs	r3, #0
 80022ae:	4665      	mov	r5, ip
 80022b0:	6123      	str	r3, [r4, #16]
 80022b2:	e7b9      	b.n	8002228 <_printf_i+0x118>
 80022b4:	6813      	ldr	r3, [r2, #0]
 80022b6:	1d19      	adds	r1, r3, #4
 80022b8:	6011      	str	r1, [r2, #0]
 80022ba:	681d      	ldr	r5, [r3, #0]
 80022bc:	6862      	ldr	r2, [r4, #4]
 80022be:	2100      	movs	r1, #0
 80022c0:	4628      	mov	r0, r5
 80022c2:	f000 f847 	bl	8002354 <memchr>
 80022c6:	b108      	cbz	r0, 80022cc <_printf_i+0x1bc>
 80022c8:	1b40      	subs	r0, r0, r5
 80022ca:	6060      	str	r0, [r4, #4]
 80022cc:	6863      	ldr	r3, [r4, #4]
 80022ce:	6123      	str	r3, [r4, #16]
 80022d0:	2300      	movs	r3, #0
 80022d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022d6:	e7a7      	b.n	8002228 <_printf_i+0x118>
 80022d8:	6923      	ldr	r3, [r4, #16]
 80022da:	462a      	mov	r2, r5
 80022dc:	4639      	mov	r1, r7
 80022de:	4630      	mov	r0, r6
 80022e0:	47c0      	blx	r8
 80022e2:	3001      	adds	r0, #1
 80022e4:	d0aa      	beq.n	800223c <_printf_i+0x12c>
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	079b      	lsls	r3, r3, #30
 80022ea:	d413      	bmi.n	8002314 <_printf_i+0x204>
 80022ec:	68e0      	ldr	r0, [r4, #12]
 80022ee:	9b03      	ldr	r3, [sp, #12]
 80022f0:	4298      	cmp	r0, r3
 80022f2:	bfb8      	it	lt
 80022f4:	4618      	movlt	r0, r3
 80022f6:	e7a3      	b.n	8002240 <_printf_i+0x130>
 80022f8:	2301      	movs	r3, #1
 80022fa:	464a      	mov	r2, r9
 80022fc:	4639      	mov	r1, r7
 80022fe:	4630      	mov	r0, r6
 8002300:	47c0      	blx	r8
 8002302:	3001      	adds	r0, #1
 8002304:	d09a      	beq.n	800223c <_printf_i+0x12c>
 8002306:	3501      	adds	r5, #1
 8002308:	68e3      	ldr	r3, [r4, #12]
 800230a:	9a03      	ldr	r2, [sp, #12]
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	42ab      	cmp	r3, r5
 8002310:	dcf2      	bgt.n	80022f8 <_printf_i+0x1e8>
 8002312:	e7eb      	b.n	80022ec <_printf_i+0x1dc>
 8002314:	2500      	movs	r5, #0
 8002316:	f104 0919 	add.w	r9, r4, #25
 800231a:	e7f5      	b.n	8002308 <_printf_i+0x1f8>
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1ac      	bne.n	800227a <_printf_i+0x16a>
 8002320:	7803      	ldrb	r3, [r0, #0]
 8002322:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002326:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800232a:	e76c      	b.n	8002206 <_printf_i+0xf6>
 800232c:	08002493 	.word	0x08002493
 8002330:	080024a4 	.word	0x080024a4

08002334 <_sbrk_r>:
 8002334:	b538      	push	{r3, r4, r5, lr}
 8002336:	2300      	movs	r3, #0
 8002338:	4c05      	ldr	r4, [pc, #20]	; (8002350 <_sbrk_r+0x1c>)
 800233a:	4605      	mov	r5, r0
 800233c:	4608      	mov	r0, r1
 800233e:	6023      	str	r3, [r4, #0]
 8002340:	f7ff fbf4 	bl	8001b2c <_sbrk>
 8002344:	1c43      	adds	r3, r0, #1
 8002346:	d102      	bne.n	800234e <_sbrk_r+0x1a>
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	b103      	cbz	r3, 800234e <_sbrk_r+0x1a>
 800234c:	602b      	str	r3, [r5, #0]
 800234e:	bd38      	pop	{r3, r4, r5, pc}
 8002350:	2000012c 	.word	0x2000012c

08002354 <memchr>:
 8002354:	b510      	push	{r4, lr}
 8002356:	b2c9      	uxtb	r1, r1
 8002358:	4402      	add	r2, r0
 800235a:	4290      	cmp	r0, r2
 800235c:	4603      	mov	r3, r0
 800235e:	d101      	bne.n	8002364 <memchr+0x10>
 8002360:	2300      	movs	r3, #0
 8002362:	e003      	b.n	800236c <memchr+0x18>
 8002364:	781c      	ldrb	r4, [r3, #0]
 8002366:	3001      	adds	r0, #1
 8002368:	428c      	cmp	r4, r1
 800236a:	d1f6      	bne.n	800235a <memchr+0x6>
 800236c:	4618      	mov	r0, r3
 800236e:	bd10      	pop	{r4, pc}

08002370 <memcpy>:
 8002370:	b510      	push	{r4, lr}
 8002372:	1e43      	subs	r3, r0, #1
 8002374:	440a      	add	r2, r1
 8002376:	4291      	cmp	r1, r2
 8002378:	d100      	bne.n	800237c <memcpy+0xc>
 800237a:	bd10      	pop	{r4, pc}
 800237c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002380:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002384:	e7f7      	b.n	8002376 <memcpy+0x6>

08002386 <memmove>:
 8002386:	4288      	cmp	r0, r1
 8002388:	b510      	push	{r4, lr}
 800238a:	eb01 0302 	add.w	r3, r1, r2
 800238e:	d807      	bhi.n	80023a0 <memmove+0x1a>
 8002390:	1e42      	subs	r2, r0, #1
 8002392:	4299      	cmp	r1, r3
 8002394:	d00a      	beq.n	80023ac <memmove+0x26>
 8002396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800239a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800239e:	e7f8      	b.n	8002392 <memmove+0xc>
 80023a0:	4283      	cmp	r3, r0
 80023a2:	d9f5      	bls.n	8002390 <memmove+0xa>
 80023a4:	1881      	adds	r1, r0, r2
 80023a6:	1ad2      	subs	r2, r2, r3
 80023a8:	42d3      	cmn	r3, r2
 80023aa:	d100      	bne.n	80023ae <memmove+0x28>
 80023ac:	bd10      	pop	{r4, pc}
 80023ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80023b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80023b6:	e7f7      	b.n	80023a8 <memmove+0x22>

080023b8 <__malloc_lock>:
 80023b8:	4770      	bx	lr

080023ba <__malloc_unlock>:
 80023ba:	4770      	bx	lr

080023bc <_free_r>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	4605      	mov	r5, r0
 80023c0:	2900      	cmp	r1, #0
 80023c2:	d043      	beq.n	800244c <_free_r+0x90>
 80023c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023c8:	1f0c      	subs	r4, r1, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bfb8      	it	lt
 80023ce:	18e4      	addlt	r4, r4, r3
 80023d0:	f7ff fff2 	bl	80023b8 <__malloc_lock>
 80023d4:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <_free_r+0x94>)
 80023d6:	6813      	ldr	r3, [r2, #0]
 80023d8:	4610      	mov	r0, r2
 80023da:	b933      	cbnz	r3, 80023ea <_free_r+0x2e>
 80023dc:	6063      	str	r3, [r4, #4]
 80023de:	6014      	str	r4, [r2, #0]
 80023e0:	4628      	mov	r0, r5
 80023e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023e6:	f7ff bfe8 	b.w	80023ba <__malloc_unlock>
 80023ea:	42a3      	cmp	r3, r4
 80023ec:	d90b      	bls.n	8002406 <_free_r+0x4a>
 80023ee:	6821      	ldr	r1, [r4, #0]
 80023f0:	1862      	adds	r2, r4, r1
 80023f2:	4293      	cmp	r3, r2
 80023f4:	bf01      	itttt	eq
 80023f6:	681a      	ldreq	r2, [r3, #0]
 80023f8:	685b      	ldreq	r3, [r3, #4]
 80023fa:	1852      	addeq	r2, r2, r1
 80023fc:	6022      	streq	r2, [r4, #0]
 80023fe:	6063      	str	r3, [r4, #4]
 8002400:	6004      	str	r4, [r0, #0]
 8002402:	e7ed      	b.n	80023e0 <_free_r+0x24>
 8002404:	4613      	mov	r3, r2
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	b10a      	cbz	r2, 800240e <_free_r+0x52>
 800240a:	42a2      	cmp	r2, r4
 800240c:	d9fa      	bls.n	8002404 <_free_r+0x48>
 800240e:	6819      	ldr	r1, [r3, #0]
 8002410:	1858      	adds	r0, r3, r1
 8002412:	42a0      	cmp	r0, r4
 8002414:	d10b      	bne.n	800242e <_free_r+0x72>
 8002416:	6820      	ldr	r0, [r4, #0]
 8002418:	4401      	add	r1, r0
 800241a:	1858      	adds	r0, r3, r1
 800241c:	4282      	cmp	r2, r0
 800241e:	6019      	str	r1, [r3, #0]
 8002420:	d1de      	bne.n	80023e0 <_free_r+0x24>
 8002422:	6810      	ldr	r0, [r2, #0]
 8002424:	6852      	ldr	r2, [r2, #4]
 8002426:	4401      	add	r1, r0
 8002428:	6019      	str	r1, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	e7d8      	b.n	80023e0 <_free_r+0x24>
 800242e:	d902      	bls.n	8002436 <_free_r+0x7a>
 8002430:	230c      	movs	r3, #12
 8002432:	602b      	str	r3, [r5, #0]
 8002434:	e7d4      	b.n	80023e0 <_free_r+0x24>
 8002436:	6820      	ldr	r0, [r4, #0]
 8002438:	1821      	adds	r1, r4, r0
 800243a:	428a      	cmp	r2, r1
 800243c:	bf01      	itttt	eq
 800243e:	6811      	ldreq	r1, [r2, #0]
 8002440:	6852      	ldreq	r2, [r2, #4]
 8002442:	1809      	addeq	r1, r1, r0
 8002444:	6021      	streq	r1, [r4, #0]
 8002446:	6062      	str	r2, [r4, #4]
 8002448:	605c      	str	r4, [r3, #4]
 800244a:	e7c9      	b.n	80023e0 <_free_r+0x24>
 800244c:	bd38      	pop	{r3, r4, r5, pc}
 800244e:	bf00      	nop
 8002450:	2000009c 	.word	0x2000009c

08002454 <_malloc_usable_size_r>:
 8002454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002458:	1f18      	subs	r0, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	bfbc      	itt	lt
 800245e:	580b      	ldrlt	r3, [r1, r0]
 8002460:	18c0      	addlt	r0, r0, r3
 8002462:	4770      	bx	lr

08002464 <_init>:
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	bf00      	nop
 8002468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246a:	bc08      	pop	{r3}
 800246c:	469e      	mov	lr, r3
 800246e:	4770      	bx	lr

08002470 <_fini>:
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002472:	bf00      	nop
 8002474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002476:	bc08      	pop	{r3}
 8002478:	469e      	mov	lr, r3
 800247a:	4770      	bx	lr
