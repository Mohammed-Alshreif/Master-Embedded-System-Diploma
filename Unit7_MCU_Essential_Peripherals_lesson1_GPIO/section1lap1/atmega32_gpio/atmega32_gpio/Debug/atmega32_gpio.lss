
atmega32_gpio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064e  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001024  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000368  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "util/delay.h"
#define F_CPU 4000000UL

int main(void)
{
   DDRA =0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	9b bb       	out	0x1b, r25	; 27
  72:	8a bb       	out	0x1a, r24	; 26
    while (1) 
    {
		for(int i=0;i<8;i++)
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	15 c0       	rjmp	.+42     	; 0xa4 <main+0x38>
		{
				PORTA |=(1<<i);
  7a:	4b b3       	in	r20, 0x1b	; 27
  7c:	5c b3       	in	r21, 0x1c	; 28
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	08 2e       	mov	r0, r24
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
  86:	22 0f       	add	r18, r18
  88:	33 1f       	adc	r19, r19
  8a:	0a 94       	dec	r0
  8c:	e2 f7       	brpl	.-8      	; 0x86 <main+0x1a>
  8e:	24 2b       	or	r18, r20
  90:	35 2b       	or	r19, r21
  92:	3c bb       	out	0x1c, r19	; 28
  94:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	e7 ea       	ldi	r30, 0xA7	; 167
  98:	f1 e6       	ldi	r31, 0x61	; 97
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x2e>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x34>
  a0:	00 00       	nop
int main(void)
{
   DDRA =0xff;
    while (1) 
    {
		for(int i=0;i<8;i++)
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	88 30       	cpi	r24, 0x08	; 8
  a6:	91 05       	cpc	r25, r1
  a8:	44 f3       	brlt	.-48     	; 0x7a <main+0xe>
  aa:	28 e0       	ldi	r18, 0x08	; 8
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	18 c0       	rjmp	.+48     	; 0xe0 <main+0x74>
				_delay_ms(100);
		}
		//PORTA =0x00;
		for(int i=8;i>=0;i--)
		{
			PORTA &=~(1<<i);
  b0:	4b b3       	in	r20, 0x1b	; 27
  b2:	5c b3       	in	r21, 0x1c	; 28
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 2e       	mov	r0, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x54>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <main+0x50>
  c4:	80 95       	com	r24
  c6:	90 95       	com	r25
  c8:	84 23       	and	r24, r20
  ca:	95 23       	and	r25, r21
  cc:	9c bb       	out	0x1c, r25	; 28
  ce:	8b bb       	out	0x1b, r24	; 27
  d0:	87 ea       	ldi	r24, 0xA7	; 167
  d2:	91 e6       	ldi	r25, 0x61	; 97
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x68>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
		{
				PORTA |=(1<<i);
				_delay_ms(100);
		}
		//PORTA =0x00;
		for(int i=8;i>=0;i--)
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	31 09       	sbc	r19, r1
  e0:	33 23       	and	r19, r19
  e2:	34 f7       	brge	.-52     	; 0xb0 <main+0x44>
  e4:	c7 cf       	rjmp	.-114    	; 0x74 <main+0x8>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
