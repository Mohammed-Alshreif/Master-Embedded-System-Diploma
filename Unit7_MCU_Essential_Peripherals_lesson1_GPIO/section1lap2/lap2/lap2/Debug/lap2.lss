
lap2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000611  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000583  00000000  00000000  00000825  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026b  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000046  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define F_CPU 4000000UL
char flag1=1;
int i=1;
int main(void)
{  
	setport(DDRA);
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	9b bb       	out	0x1b, r25	; 27
  88:	8a bb       	out	0x1a, r24	; 26
	clearpit(DDRA,0);
  8a:	8a b3       	in	r24, 0x1a	; 26
  8c:	9b b3       	in	r25, 0x1b	; 27
  8e:	8e 7f       	andi	r24, 0xFE	; 254
  90:	9b bb       	out	0x1b, r25	; 27
  92:	8a bb       	out	0x1a, r24	; 26
    setpit(PORTA,0);
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	9c b3       	in	r25, 0x1c	; 28
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	9c bb       	out	0x1c, r25	; 28
  9c:	8b bb       	out	0x1b, r24	; 27
    while (1) 
    {
		if(readpit(PINA,0)==0)
  9e:	89 b3       	in	r24, 0x19	; 25
  a0:	9a b3       	in	r25, 0x1a	; 26
  a2:	80 fd       	sbrc	r24, 0
  a4:	2f c0       	rjmp	.+94     	; 0x104 <main+0x82>
		{
			if(flag1==1)
  a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flag1>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	c1 f7       	brne	.-16     	; 0x9e <main+0x1c>
			{
				flag1=0;
  ae:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flag1>
				toglpit(PORTA,i);
  b2:	2b b3       	in	r18, 0x1b	; 27
  b4:	3c b3       	in	r19, 0x1c	; 28
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	00 90 60 00 	lds	r0, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x42>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <main+0x3e>
  c8:	82 27       	eor	r24, r18
  ca:	93 27       	eor	r25, r19
  cc:	9c bb       	out	0x1c, r25	; 28
  ce:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8b e4       	ldi	r24, 0x4B	; 75
  d2:	9d e1       	ldi	r25, 0x1D	; 29
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x52>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x58>
  da:	00 00       	nop
				_delay_ms(30);
				if(i>6)i=1;
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e4:	87 30       	cpi	r24, 0x07	; 7
  e6:	91 05       	cpc	r25, r1
  e8:	3c f0       	brlt	.+14     	; 0xf8 <main+0x76>
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	d3 cf       	rjmp	.-90     	; 0x9e <main+0x1c>
				else i++;
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	cd cf       	rjmp	.-102    	; 0x9e <main+0x1c>
			}
			
		 }
		 else flag1=1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <flag1>
 10a:	c9 cf       	rjmp	.-110    	; 0x9e <main+0x1c>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
