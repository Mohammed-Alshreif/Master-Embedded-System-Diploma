
stm32_timer1_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e9c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001fcc  08001fcc  00011fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800201c  0800201c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800201c  0800201c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800201c  0800201c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800201c  0800201c  0001201c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002020  08002020  00012020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000084  080020a8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080020a8  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000047ba  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b3c  00000000  00000000  00024867  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a80  00000000  00000000  000253a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001f0  00000000  00000000  00025e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000188  00000000  00000000  00026018  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002ddb  00000000  00000000  000261a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002c18  00000000  00000000  00028f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009a92  00000000  00000000  0002bb93  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00035625  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000928  00000000  00000000  000356a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000084 	.word	0x20000084
 800014c:	00000000 	.word	0x00000000
 8000150:	08001fb4 	.word	0x08001fb4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000088 	.word	0x20000088
 800016c:	08001fb4 	.word	0x08001fb4

08000170 <frec_controle>:
long top=1000,presc=1,top_max=10000,top_min=1000;
long c=1000;

//=================================functions============================

void frec_controle(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
   TogglePin(GPIOA, pin4);
 8000174:	2104      	movs	r1, #4
 8000176:	480f      	ldr	r0, [pc, #60]	; (80001b4 <frec_controle+0x44>)
 8000178:	f000 fbb8 	bl	80008ec <TogglePin>
	_delay_ms(1000);
 800017c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000180:	f000 fbc8 	bl	8000914 <_delay_ms>
	if(c>=(top_max-100))c=top_min;
 8000184:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <frec_controle+0x48>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800018c:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <frec_controle+0x4c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	429a      	cmp	r2, r3
 8000192:	dc04      	bgt.n	800019e <frec_controle+0x2e>
 8000194:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <frec_controle+0x50>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a08      	ldr	r2, [pc, #32]	; (80001bc <frec_controle+0x4c>)
 800019a:	6013      	str	r3, [r2, #0]
 800019c:	e004      	b.n	80001a8 <frec_controle+0x38>
	else c+=40;
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <frec_controle+0x4c>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	3328      	adds	r3, #40	; 0x28
 80001a4:	4a05      	ldr	r2, [pc, #20]	; (80001bc <frec_controle+0x4c>)
 80001a6:	6013      	str	r3, [r2, #0]
	_delay_ms(1000);
 80001a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ac:	f000 fbb2 	bl	8000914 <_delay_ms>
}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	40010800 	.word	0x40010800
 80001b8:	20000014 	.word	0x20000014
 80001bc:	2000001c 	.word	0x2000001c
 80001c0:	20000018 	.word	0x20000018

080001c4 <frec_controle_decrease>:
void frec_controle_decrease(){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	 TogglePin(GPIOA, pin4);
 80001c8:	2104      	movs	r1, #4
 80001ca:	480f      	ldr	r0, [pc, #60]	; (8000208 <frec_controle_decrease+0x44>)
 80001cc:	f000 fb8e 	bl	80008ec <TogglePin>
	_delay_ms(1000);
 80001d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d4:	f000 fb9e 	bl	8000914 <_delay_ms>
	if(c<=(top_min-100))c=top_max;
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <frec_controle_decrease+0x48>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80001e0:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <frec_controle_decrease+0x4c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	db04      	blt.n	80001f2 <frec_controle_decrease+0x2e>
 80001e8:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <frec_controle_decrease+0x50>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <frec_controle_decrease+0x4c>)
 80001ee:	6013      	str	r3, [r2, #0]
 80001f0:	e004      	b.n	80001fc <frec_controle_decrease+0x38>
	else c-=40;
 80001f2:	4b07      	ldr	r3, [pc, #28]	; (8000210 <frec_controle_decrease+0x4c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	3b28      	subs	r3, #40	; 0x28
 80001f8:	4a05      	ldr	r2, [pc, #20]	; (8000210 <frec_controle_decrease+0x4c>)
 80001fa:	6013      	str	r3, [r2, #0]
	_delay_ms(1000);
 80001fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000200:	f000 fb88 	bl	8000914 <_delay_ms>
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40010800 	.word	0x40010800
 800020c:	20000018 	.word	0x20000018
 8000210:	2000001c 	.word	0x2000001c
 8000214:	20000014 	.word	0x20000014

08000218 <pwm_INIT>:



void pwm_INIT(){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_72MHzCORE);//speed of all 36MHz
 800021c:	2100      	movs	r1, #0
 800021e:	2000      	movs	r0, #0
 8000220:	f000 fcc4 	bl	8000bac <MCAL_speed_init>
	GPIOA_Clock_Enable();//enable porta clock
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <pwm_INIT+0x78>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <pwm_INIT+0x78>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
	GPIOB_Clock_Enable();//enable portb clock
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <pwm_INIT+0x78>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a16      	ldr	r2, [pc, #88]	; (8000290 <pwm_INIT+0x78>)
 8000236:	f043 0308 	orr.w	r3, r3, #8
 800023a:	6193      	str	r3, [r2, #24]
	TIMER1_CLOCK_Enable();//enable timer1 clock
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <pwm_INIT+0x78>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a13      	ldr	r2, [pc, #76]	; (8000290 <pwm_INIT+0x78>)
 8000242:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000246:	6193      	str	r3, [r2, #24]
	AFIO_Clock_Enable();//enable AF io clock
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <pwm_INIT+0x78>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a10      	ldr	r2, [pc, #64]	; (8000290 <pwm_INIT+0x78>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6193      	str	r3, [r2, #24]
	NVIC_TIM1_UP_Enable;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <pwm_INIT+0x7c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <pwm_INIT+0x7c>)
 800025a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800025e:	6013      	str	r3, [r2, #0]
	NVIC_TIM1_CC_Enable;//enable capture compare nvic
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <pwm_INIT+0x7c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <pwm_INIT+0x7c>)
 8000266:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800026a:	6013      	str	r3, [r2, #0]

	//=====================pins mode============================
	pinmode(GPIOA, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800026c:	220b      	movs	r2, #11
 800026e:	2109      	movs	r1, #9
 8000270:	4809      	ldr	r0, [pc, #36]	; (8000298 <pwm_INIT+0x80>)
 8000272:	f000 fa2b 	bl	80006cc <pinmode>
	pinmode(GPIOA, pin1,GPIO_MODE_OUTPUT_push_pull_Speed50);
 8000276:	2203      	movs	r2, #3
 8000278:	2101      	movs	r1, #1
 800027a:	4807      	ldr	r0, [pc, #28]	; (8000298 <pwm_INIT+0x80>)
 800027c:	f000 fa26 	bl	80006cc <pinmode>
    pinmode(GPIOA, pin4,GPIO_MODE_OUTPUT_push_pull_Speed50);
 8000280:	2203      	movs	r2, #3
 8000282:	2104      	movs	r1, #4
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <pwm_INIT+0x80>)
 8000286:	f000 fa21 	bl	80006cc <pinmode>
   //pinmode(GPIOA, pin5,GPIO_MODE_OUTPUT_push_pull_Speed2);
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40021000 	.word	0x40021000
 8000294:	e000e100 	.word	0xe000e100
 8000298:	40010800 	.word	0x40010800

0800029c <timer_INIT>:
void timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ){
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
	//	(LOCK bits in TIMx_BDTR register) and CC1S=’00’ (the channel is configured in
	//	output).
	//	2: The PWM mode can be used without validating the preload register only in one
	//	pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.

	pwm->TIMx_CCMR1 |=(1<<11);
 80002a8:	4b28      	ldr	r3, [pc, #160]	; (800034c <timer_INIT+0xb0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	699a      	ldr	r2, [r3, #24]
 80002ae:	4b27      	ldr	r3, [pc, #156]	; (800034c <timer_INIT+0xb0>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80002b6:	619a      	str	r2, [r3, #24]

	pwm->TIMx_CCER |=(1<<4);
 80002b8:	4b24      	ldr	r3, [pc, #144]	; (800034c <timer_INIT+0xb0>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	6a1a      	ldr	r2, [r3, #32]
 80002be:	4b23      	ldr	r3, [pc, #140]	; (800034c <timer_INIT+0xb0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f042 0210 	orr.w	r2, r2, #16
 80002c6:	621a      	str	r2, [r3, #32]
	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered

	pwm->TIMx_CR1 |=(1<<7);
 80002c8:	4b20      	ldr	r3, [pc, #128]	; (800034c <timer_INIT+0xb0>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	4b1f      	ldr	r3, [pc, #124]	; (800034c <timer_INIT+0xb0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80002d6:	601a      	str	r2, [r3, #0]


	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
	pwm->TIMx_CCMR1 |=(0b110<<12);
 80002d8:	4b1c      	ldr	r3, [pc, #112]	; (800034c <timer_INIT+0xb0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	699a      	ldr	r2, [r3, #24]
 80002de:	4b1b      	ldr	r3, [pc, #108]	; (800034c <timer_INIT+0xb0>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80002e6:	619a      	str	r2, [r3, #24]

	pwm->TIMx_ARR=peak;//frec peak value
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <timer_INIT+0xb0>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 80002f0:	4b16      	ldr	r3, [pc, #88]	; (800034c <timer_INIT+0xb0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_PSC=pre;//prescaller
 80002f8:	4b14      	ldr	r3, [pc, #80]	; (800034c <timer_INIT+0xb0>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <timer_INIT+0xb0>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <timer_INIT+0xb0>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800030e:	645a      	str	r2, [r3, #68]	; 0x44
	//	0: CC1 interrupt disabled
	//	1: CC1 interrupt enabled
	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b101<<0);
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <timer_INIT+0xb0>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	68da      	ldr	r2, [r3, #12]
 8000316:	4b0d      	ldr	r3, [pc, #52]	; (800034c <timer_INIT+0xb0>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f042 0205 	orr.w	r2, r2, #5
 800031e:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <timer_INIT+0xb0>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	695a      	ldr	r2, [r3, #20]
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <timer_INIT+0xb0>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f042 0201 	orr.w	r2, r2, #1
 800032e:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <timer_INIT+0xb0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <timer_INIT+0xb0>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f042 0201 	orr.w	r2, r2, #1
 800033e:	601a      	str	r2, [r3, #0]


}
 8000340:	bf00      	nop
 8000342:	3714      	adds	r7, #20
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	20000000 	.word	0x20000000

08000350 <main>:
int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	LCD_Init();
 8000354:	f000 fb46 	bl	80009e4 <LCD_Init>
	pwm_INIT();
 8000358:	f7ff ff5e 	bl	8000218 <pwm_INIT>
	timer_INIT(presc,x,top);
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <main+0x64>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <main+0x68>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4619      	mov	r1, r3
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <main+0x6c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	461a      	mov	r2, r3
 800036e:	f7ff ff95 	bl	800029c <timer_INIT>
	EXTI(GPIOA,pin7,EXTI_Trigger_Falling,frec_controle);
 8000372:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <main+0x70>)
 8000374:	2201      	movs	r2, #1
 8000376:	2107      	movs	r1, #7
 8000378:	4812      	ldr	r0, [pc, #72]	; (80003c4 <main+0x74>)
 800037a:	f000 fcc9 	bl	8000d10 <EXTI>
	EXTI(GPIOA,pin6,EXTI_Trigger_Falling,frec_controle_decrease);
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <main+0x78>)
 8000380:	2201      	movs	r2, #1
 8000382:	2106      	movs	r1, #6
 8000384:	480f      	ldr	r0, [pc, #60]	; (80003c4 <main+0x74>)
 8000386:	f000 fcc3 	bl	8000d10 <EXTI>
	LCD_write_string("SPWM Generator");
 800038a:	4810      	ldr	r0, [pc, #64]	; (80003cc <main+0x7c>)
 800038c:	f000 fbb2 	bl	8000af4 <LCD_write_string>
	 while (1)
		    {
		 _delay_ms(5000);
 8000390:	f241 3088 	movw	r0, #5000	; 0x1388
 8000394:	f000 fabe 	bl	8000914 <_delay_ms>
		    LCD_setcerser(1,0);
 8000398:	2100      	movs	r1, #0
 800039a:	2001      	movs	r0, #1
 800039c:	f000 fbcc 	bl	8000b38 <LCD_setcerser>
		 	LCD_write_string("value");
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <main+0x80>)
 80003a2:	f000 fba7 	bl	8000af4 <LCD_write_string>
		 	LCD_write_INTnumber(c);
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <main+0x84>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fbe8 	bl	8000b80 <LCD_write_INTnumber>
		    {
 80003b0:	e7ee      	b.n	8000390 <main+0x40>
 80003b2:	bf00      	nop
 80003b4:	20000010 	.word	0x20000010
 80003b8:	20000004 	.word	0x20000004
 80003bc:	2000000c 	.word	0x2000000c
 80003c0:	08000171 	.word	0x08000171
 80003c4:	40010800 	.word	0x40010800
 80003c8:	080001c5 	.word	0x080001c5
 80003cc:	08001fcc 	.word	0x08001fcc
 80003d0:	08001fdc 	.word	0x08001fdc
 80003d4:	2000001c 	.word	0x2000001c

080003d8 <TIM1_UP_IRQHandler>:
		    }


}

void TIM1_UP_IRQHandler(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	pinwrite(GPIOA, pin1,HIGH);
 80003dc:	2201      	movs	r2, #1
 80003de:	2101      	movs	r1, #1
 80003e0:	4841      	ldr	r0, [pc, #260]	; (80004e8 <TIM1_UP_IRQHandler+0x110>)
 80003e2:	f000 fa32 	bl	800084a <pinwrite>

	if(x>=(top-100)){
 80003e6:	4b41      	ldr	r3, [pc, #260]	; (80004ec <TIM1_UP_IRQHandler+0x114>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80003ee:	4b40      	ldr	r3, [pc, #256]	; (80004f0 <TIM1_UP_IRQHandler+0x118>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	dc06      	bgt.n	8000404 <TIM1_UP_IRQHandler+0x2c>
		flage2=1;
 80003f6:	4b3f      	ldr	r3, [pc, #252]	; (80004f4 <TIM1_UP_IRQHandler+0x11c>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	701a      	strb	r2, [r3, #0]
		flage1=0;
 80003fc:	4b3e      	ldr	r3, [pc, #248]	; (80004f8 <TIM1_UP_IRQHandler+0x120>)
 80003fe:	2200      	movs	r2, #0
 8000400:	701a      	strb	r2, [r3, #0]
 8000402:	e010      	b.n	8000426 <TIM1_UP_IRQHandler+0x4e>

	}
	else if(x<75)
 8000404:	4b3a      	ldr	r3, [pc, #232]	; (80004f0 <TIM1_UP_IRQHandler+0x118>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b4a      	cmp	r3, #74	; 0x4a
 800040a:	dc0c      	bgt.n	8000426 <TIM1_UP_IRQHandler+0x4e>
		{
		flage2=0;
 800040c:	4b39      	ldr	r3, [pc, #228]	; (80004f4 <TIM1_UP_IRQHandler+0x11c>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
		flage1=1;
 8000412:	4b39      	ldr	r3, [pc, #228]	; (80004f8 <TIM1_UP_IRQHandler+0x120>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	    flage3 ^=(1<<0);
 8000418:	4b38      	ldr	r3, [pc, #224]	; (80004fc <TIM1_UP_IRQHandler+0x124>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	f083 0301 	eor.w	r3, r3, #1
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4b36      	ldr	r3, [pc, #216]	; (80004fc <TIM1_UP_IRQHandler+0x124>)
 8000424:	701a      	strb	r2, [r3, #0]
		}
	if(flage1==1){
 8000426:	4b34      	ldr	r3, [pc, #208]	; (80004f8 <TIM1_UP_IRQHandler+0x120>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d114      	bne.n	8000458 <TIM1_UP_IRQHandler+0x80>
		top=c; timer_INIT(presc,x,top);x=x+70;
 800042e:	4b34      	ldr	r3, [pc, #208]	; (8000500 <TIM1_UP_IRQHandler+0x128>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a2e      	ldr	r2, [pc, #184]	; (80004ec <TIM1_UP_IRQHandler+0x114>)
 8000434:	6013      	str	r3, [r2, #0]
 8000436:	4b33      	ldr	r3, [pc, #204]	; (8000504 <TIM1_UP_IRQHandler+0x12c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4618      	mov	r0, r3
 800043c:	4b2c      	ldr	r3, [pc, #176]	; (80004f0 <TIM1_UP_IRQHandler+0x118>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4619      	mov	r1, r3
 8000442:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <TIM1_UP_IRQHandler+0x114>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	461a      	mov	r2, r3
 8000448:	f7ff ff28 	bl	800029c <timer_INIT>
 800044c:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <TIM1_UP_IRQHandler+0x118>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3346      	adds	r3, #70	; 0x46
 8000452:	4a27      	ldr	r2, [pc, #156]	; (80004f0 <TIM1_UP_IRQHandler+0x118>)
 8000454:	6013      	str	r3, [r2, #0]
 8000456:	e020      	b.n	800049a <TIM1_UP_IRQHandler+0xc2>
	}
	else if (flage2==1){
 8000458:	4b26      	ldr	r3, [pc, #152]	; (80004f4 <TIM1_UP_IRQHandler+0x11c>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d114      	bne.n	800048a <TIM1_UP_IRQHandler+0xb2>
		top=c; timer_INIT(presc,x,top);x-=70;
 8000460:	4b27      	ldr	r3, [pc, #156]	; (8000500 <TIM1_UP_IRQHandler+0x128>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a21      	ldr	r2, [pc, #132]	; (80004ec <TIM1_UP_IRQHandler+0x114>)
 8000466:	6013      	str	r3, [r2, #0]
 8000468:	4b26      	ldr	r3, [pc, #152]	; (8000504 <TIM1_UP_IRQHandler+0x12c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	4b20      	ldr	r3, [pc, #128]	; (80004f0 <TIM1_UP_IRQHandler+0x118>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4619      	mov	r1, r3
 8000474:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <TIM1_UP_IRQHandler+0x114>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	461a      	mov	r2, r3
 800047a:	f7ff ff0f 	bl	800029c <timer_INIT>
 800047e:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <TIM1_UP_IRQHandler+0x118>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	3b46      	subs	r3, #70	; 0x46
 8000484:	4a1a      	ldr	r2, [pc, #104]	; (80004f0 <TIM1_UP_IRQHandler+0x118>)
 8000486:	6013      	str	r3, [r2, #0]
 8000488:	e007      	b.n	800049a <TIM1_UP_IRQHandler+0xc2>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <TIM1_UP_IRQHandler+0x130>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <TIM1_UP_IRQHandler+0x130>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f022 0201 	bic.w	r2, r2, #1
 8000498:	601a      	str	r2, [r3, #0]


	if(flage3==1){
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <TIM1_UP_IRQHandler+0x124>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d10a      	bne.n	80004b8 <TIM1_UP_IRQHandler+0xe0>
		pinmode(GPIOA, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80004a2:	220b      	movs	r2, #11
 80004a4:	2109      	movs	r1, #9
 80004a6:	4810      	ldr	r0, [pc, #64]	; (80004e8 <TIM1_UP_IRQHandler+0x110>)
 80004a8:	f000 f910 	bl	80006cc <pinmode>
		pinmode(GPIOA, pin1,GPIO_MODE_INPUT_FLO);
 80004ac:	2204      	movs	r2, #4
 80004ae:	2101      	movs	r1, #1
 80004b0:	480d      	ldr	r0, [pc, #52]	; (80004e8 <TIM1_UP_IRQHandler+0x110>)
 80004b2:	f000 f90b 	bl	80006cc <pinmode>
 80004b6:	e00d      	b.n	80004d4 <TIM1_UP_IRQHandler+0xfc>
	}
	else if(flage3==0){
 80004b8:	4b10      	ldr	r3, [pc, #64]	; (80004fc <TIM1_UP_IRQHandler+0x124>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d109      	bne.n	80004d4 <TIM1_UP_IRQHandler+0xfc>
		//pwm->TIMx_BDTR &=~(1<<15);
		pinmode(GPIOA, pin9, GPIO_MODE_INPUT_FLO);
 80004c0:	2204      	movs	r2, #4
 80004c2:	2109      	movs	r1, #9
 80004c4:	4808      	ldr	r0, [pc, #32]	; (80004e8 <TIM1_UP_IRQHandler+0x110>)
 80004c6:	f000 f901 	bl	80006cc <pinmode>
		pinmode(GPIOA, pin1,GPIO_MODE_OUTPUT_push_pull_Speed50);
 80004ca:	2203      	movs	r2, #3
 80004cc:	2101      	movs	r1, #1
 80004ce:	4806      	ldr	r0, [pc, #24]	; (80004e8 <TIM1_UP_IRQHandler+0x110>)
 80004d0:	f000 f8fc 	bl	80006cc <pinmode>
	}
	pwm->TIMx_SR &=~(1<<0);
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <TIM1_UP_IRQHandler+0x130>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	691a      	ldr	r2, [r3, #16]
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <TIM1_UP_IRQHandler+0x130>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f022 0201 	bic.w	r2, r2, #1
 80004e2:	611a      	str	r2, [r3, #16]
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40010800 	.word	0x40010800
 80004ec:	2000000c 	.word	0x2000000c
 80004f0:	20000004 	.word	0x20000004
 80004f4:	200000a0 	.word	0x200000a0
 80004f8:	20000008 	.word	0x20000008
 80004fc:	20000009 	.word	0x20000009
 8000500:	2000001c 	.word	0x2000001c
 8000504:	20000010 	.word	0x20000010
 8000508:	20000000 	.word	0x20000000

0800050c <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	//pwm->TIMx_SR &=~(1<<2);
	pinwrite(GPIOA, pin1, LOW);
 8000510:	2200      	movs	r2, #0
 8000512:	2101      	movs	r1, #1
 8000514:	480c      	ldr	r0, [pc, #48]	; (8000548 <TIM1_CC_IRQHandler+0x3c>)
 8000516:	f000 f998 	bl	800084a <pinwrite>
	if(x>=top-70) pinwrite(GPIOA, pin1,HIGH);
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <TIM1_CC_IRQHandler+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <TIM1_CC_IRQHandler+0x44>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	429a      	cmp	r2, r3
 8000528:	dc04      	bgt.n	8000534 <TIM1_CC_IRQHandler+0x28>
 800052a:	2201      	movs	r2, #1
 800052c:	2101      	movs	r1, #1
 800052e:	4806      	ldr	r0, [pc, #24]	; (8000548 <TIM1_CC_IRQHandler+0x3c>)
 8000530:	f000 f98b 	bl	800084a <pinwrite>
	//	timer_INIT(60,x,32766);
	//	if(x>32766)x=500;
	//	else x=x+500;
	pwm->TIMx_SR &=~(1<<2);
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <TIM1_CC_IRQHandler+0x48>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	691a      	ldr	r2, [r3, #16]
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <TIM1_CC_IRQHandler+0x48>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f022 0204 	bic.w	r2, r2, #4
 8000542:	611a      	str	r2, [r3, #16]
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40010800 	.word	0x40010800
 800054c:	2000000c 	.word	0x2000000c
 8000550:	20000004 	.word	0x20000004
 8000554:	20000000 	.word	0x20000000

08000558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <_sbrk+0x5c>)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <_sbrk+0x60>)
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <_sbrk+0x64>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <_sbrk+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	429a      	cmp	r2, r3
 8000586:	d207      	bcs.n	8000598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000588:	f001 f8d8 	bl	800173c <__errno>
 800058c:	4602      	mov	r2, r0
 800058e:	230c      	movs	r3, #12
 8000590:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e009      	b.n	80005ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <_sbrk+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <_sbrk+0x64>)
 80005a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20002800 	.word	0x20002800
 80005b8:	00000400 	.word	0x00000400
 80005bc:	200000a4 	.word	0x200000a4
 80005c0:	200000f8 	.word	0x200000f8

080005c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ce:	490d      	ldr	r1, [pc, #52]	; (8000604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <LoopForever+0xe>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d4:	e002      	b.n	80005dc <LoopCopyDataInit>

080005d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005da:	3304      	adds	r3, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e0:	d3f9      	bcc.n	80005d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e4:	4c0a      	ldr	r4, [pc, #40]	; (8000610 <LoopForever+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e8:	e001      	b.n	80005ee <LoopFillZerobss>

080005ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ec:	3204      	adds	r2, #4

080005ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f0:	d3fb      	bcc.n	80005ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005f2:	f001 f8a9 	bl	8001748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f6:	f7ff feab 	bl	8000350 <main>

080005fa <LoopForever>:

LoopForever:
    b LoopForever
 80005fa:	e7fe      	b.n	80005fa <LoopForever>
  ldr   r0, =_estack
 80005fc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000608:	08002024 	.word	0x08002024
  ldr r2, =_sbss
 800060c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000610:	200000f4 	.word	0x200000f4

08000614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC1_2_IRQHandler>

08000616 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000616:	b480      	push	{r7}
 8000618:	b085      	sub	sp, #20
 800061a:	af00      	add	r7, sp, #0
 800061c:	4603      	mov	r3, r0
 800061e:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d101      	bne.n	800062a <getposition+0x14>
		rval =0;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d101      	bne.n	8000634 <getposition+0x1e>
		rval =4;
 8000630:	2304      	movs	r3, #4
 8000632:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	2b02      	cmp	r3, #2
 8000638:	d101      	bne.n	800063e <getposition+0x28>
		rval =8;
 800063a:	2308      	movs	r3, #8
 800063c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	2b03      	cmp	r3, #3
 8000642:	d101      	bne.n	8000648 <getposition+0x32>
		rval =12;
 8000644:	230c      	movs	r3, #12
 8000646:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d101      	bne.n	8000652 <getposition+0x3c>
		rval =16;
 800064e:	2310      	movs	r3, #16
 8000650:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	2b05      	cmp	r3, #5
 8000656:	d101      	bne.n	800065c <getposition+0x46>
		rval =20;
 8000658:	2314      	movs	r3, #20
 800065a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	2b06      	cmp	r3, #6
 8000660:	d101      	bne.n	8000666 <getposition+0x50>
		rval =24;
 8000662:	2318      	movs	r3, #24
 8000664:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	2b07      	cmp	r3, #7
 800066a:	d101      	bne.n	8000670 <getposition+0x5a>
		rval =28;
 800066c:	231c      	movs	r3, #28
 800066e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	2b08      	cmp	r3, #8
 8000674:	d101      	bne.n	800067a <getposition+0x64>
		rval =0;
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	2b09      	cmp	r3, #9
 800067e:	d101      	bne.n	8000684 <getposition+0x6e>
		rval =4;
 8000680:	2304      	movs	r3, #4
 8000682:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	2b0a      	cmp	r3, #10
 8000688:	d101      	bne.n	800068e <getposition+0x78>
		rval =8;
 800068a:	2308      	movs	r3, #8
 800068c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	2b0b      	cmp	r3, #11
 8000692:	d101      	bne.n	8000698 <getposition+0x82>
		rval =12;
 8000694:	230c      	movs	r3, #12
 8000696:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	2b0c      	cmp	r3, #12
 800069c:	d101      	bne.n	80006a2 <getposition+0x8c>
		rval =16;
 800069e:	2310      	movs	r3, #16
 80006a0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	2b0d      	cmp	r3, #13
 80006a6:	d101      	bne.n	80006ac <getposition+0x96>
		rval =20;
 80006a8:	2314      	movs	r3, #20
 80006aa:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	2b0e      	cmp	r3, #14
 80006b0:	d101      	bne.n	80006b6 <getposition+0xa0>
		rval =24;
 80006b2:	2318      	movs	r3, #24
 80006b4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	2b0f      	cmp	r3, #15
 80006ba:	d101      	bne.n	80006c0 <getposition+0xaa>
		rval =28;
 80006bc:	231c      	movs	r3, #28
 80006be:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 80006c0:	7bfb      	ldrb	r3, [r7, #15]


}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	460b      	mov	r3, r1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	817b      	strh	r3, [r7, #10]

	if(pin<8){
 80006da:	897b      	ldrh	r3, [r7, #10]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	d856      	bhi.n	800078e <pinmode+0xc2>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 80006e0:	897b      	ldrh	r3, [r7, #10]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff97 	bl	8000616 <getposition>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	230f      	movs	r3, #15
 80006ee:	4093      	lsls	r3, r2
 80006f0:	43da      	mvns	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	401a      	ands	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b08      	cmp	r3, #8
 8000700:	d002      	beq.n	8000708 <pinmode+0x3c>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b18      	cmp	r3, #24
 8000706:	d133      	bne.n	8000770 <pinmode+0xa4>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b18      	cmp	r3, #24
 800070c:	d117      	bne.n	800073e <pinmode+0x72>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 800070e:	897b      	ldrh	r3, [r7, #10]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff80 	bl	8000616 <getposition>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	2308      	movs	r3, #8
 800071c:	fa03 f202 	lsl.w	r2, r3, r2
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	431a      	orrs	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	897a      	ldrh	r2, [r7, #10]
 8000730:	2101      	movs	r1, #1
 8000732:	fa01 f202 	lsl.w	r2, r1, r2
 8000736:	431a      	orrs	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800073c:	e081      	b.n	8000842 <pinmode+0x176>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 800073e:	897b      	ldrh	r3, [r7, #10]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff68 	bl	8000616 <getposition>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	2308      	movs	r3, #8
 800074c:	fa03 f202 	lsl.w	r2, r3, r2
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	431a      	orrs	r2, r3
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	897a      	ldrh	r2, [r7, #10]
 8000760:	2101      	movs	r1, #1
 8000762:	fa01 f202 	lsl.w	r2, r1, r2
 8000766:	43d2      	mvns	r2, r2
 8000768:	401a      	ands	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800076e:	e068      	b.n	8000842 <pinmode+0x176>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 8000770:	897b      	ldrh	r3, [r7, #10]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff4f 	bl	8000616 <getposition>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	fa03 f202 	lsl.w	r2, r3, r2
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	431a      	orrs	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	601a      	str	r2, [r3, #0]

	}



}
 800078c:	e059      	b.n	8000842 <pinmode+0x176>
	else if(pin>7){
 800078e:	897b      	ldrh	r3, [r7, #10]
 8000790:	2b07      	cmp	r3, #7
 8000792:	d956      	bls.n	8000842 <pinmode+0x176>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 8000794:	897b      	ldrh	r3, [r7, #10]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff3d 	bl	8000616 <getposition>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	230f      	movs	r3, #15
 80007a2:	4093      	lsls	r3, r2
 80007a4:	43da      	mvns	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	401a      	ands	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b08      	cmp	r3, #8
 80007b4:	d002      	beq.n	80007bc <pinmode+0xf0>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b18      	cmp	r3, #24
 80007ba:	d133      	bne.n	8000824 <pinmode+0x158>
			if(pinmode == GPIO_MODE_INPUT_PU){
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b18      	cmp	r3, #24
 80007c0:	d117      	bne.n	80007f2 <pinmode+0x126>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 80007c2:	897b      	ldrh	r3, [r7, #10]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff26 	bl	8000616 <getposition>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461a      	mov	r2, r3
 80007ce:	2308      	movs	r3, #8
 80007d0:	fa03 f202 	lsl.w	r2, r3, r2
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	431a      	orrs	r2, r3
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	897a      	ldrh	r2, [r7, #10]
 80007e4:	2101      	movs	r1, #1
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	431a      	orrs	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80007f0:	e027      	b.n	8000842 <pinmode+0x176>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 80007f2:	897b      	ldrh	r3, [r7, #10]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff0e 	bl	8000616 <getposition>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	2308      	movs	r3, #8
 8000800:	fa03 f202 	lsl.w	r2, r3, r2
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	431a      	orrs	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	897a      	ldrh	r2, [r7, #10]
 8000814:	2101      	movs	r1, #1
 8000816:	fa01 f202 	lsl.w	r2, r1, r2
 800081a:	43d2      	mvns	r2, r2
 800081c:	401a      	ands	r2, r3
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000822:	e00e      	b.n	8000842 <pinmode+0x176>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8000824:	897b      	ldrh	r3, [r7, #10]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fef5 	bl	8000616 <getposition>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	fa03 f202 	lsl.w	r2, r3, r2
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	431a      	orrs	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	605a      	str	r2, [r3, #4]
}
 8000840:	e7ff      	b.n	8000842 <pinmode+0x176>
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_typeDef* GPIOx,uint16_t pin,uint8_t status){
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	460b      	mov	r3, r1
 8000854:	807b      	strh	r3, [r7, #2]
 8000856:	4613      	mov	r3, r2
 8000858:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 800085a:	787b      	ldrb	r3, [r7, #1]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d009      	beq.n	8000874 <pinwrite+0x2a>
		GPIOx->GPIOx_ODR |=(1<<pin);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	887a      	ldrh	r2, [r7, #2]
 8000866:	2101      	movs	r1, #1
 8000868:	fa01 f202 	lsl.w	r2, r1, r2
 800086c:	431a      	orrs	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->GPIOx_ODR &=~(1<<pin);

}
 8000872:	e009      	b.n	8000888 <pinwrite+0x3e>
	else GPIOx->GPIOx_ODR &=~(1<<pin);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	887a      	ldrh	r2, [r7, #2]
 800087a:	2101      	movs	r1, #1
 800087c:	fa01 f202 	lsl.w	r2, r1, r2
 8000880:	43d2      	mvns	r2, r2
 8000882:	401a      	ands	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	60da      	str	r2, [r3, #12]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <set_Value_PORT>:
 * @param [in] - position:position of seting Values
 * @retval -
 * Note-
 */

void set_Value_PORT(GPIO_typeDef* GPIOx,uint16_t status,uint16_t position){
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	460b      	mov	r3, r1
 800089c:	807b      	strh	r3, [r7, #2]
 800089e:	4613      	mov	r3, r2
 80008a0:	803b      	strh	r3, [r7, #0]

	GPIOx->GPIOx_ODR |=(status<<position);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	8879      	ldrh	r1, [r7, #2]
 80008a8:	883a      	ldrh	r2, [r7, #0]
 80008aa:	fa01 f202 	lsl.w	r2, r1, r2
 80008ae:	431a      	orrs	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	60da      	str	r2, [r3, #12]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <res_Value_PORT>:
 * @param [in] - position:position of seting Values
 * @retval -
 * Note-
 */

void res_Value_PORT(GPIO_typeDef* GPIOx,uint16_t status,uint16_t position){
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	460b      	mov	r3, r1
 80008c8:	807b      	strh	r3, [r7, #2]
 80008ca:	4613      	mov	r3, r2
 80008cc:	803b      	strh	r3, [r7, #0]

	GPIOx->GPIOx_ODR &=~(status<<position);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	8879      	ldrh	r1, [r7, #2]
 80008d4:	883a      	ldrh	r2, [r7, #0]
 80008d6:	fa01 f202 	lsl.w	r2, r1, r2
 80008da:	43d2      	mvns	r2, r2
 80008dc:	401a      	ands	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	60da      	str	r2, [r3, #12]
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <TogglePin>:
uint16_t READ_PORT(GPIO_typeDef* GPIOx){

	return GPIOx->GPIOx_IDR;
}

void TogglePin(GPIO_typeDef* GPIOx, uint16_t pin){
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIOx_ODR ^=(1<<pin);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	887a      	ldrh	r2, [r7, #2]
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f202 	lsl.w	r2, r1, r2
 8000904:	405a      	eors	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	60da      	str	r2, [r3, #12]
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <_delay_ms>:
 *  Author: 20102
 */ 
static unsigned flag_init=0;
#include "LCD.h"

void _delay_ms(long x){
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	for(long i=0;i<(x*40);i++);
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e002      	b.n	8000928 <_delay_ms+0x14>
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3301      	adds	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	4613      	mov	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4413      	add	r3, r2
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	461a      	mov	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4293      	cmp	r3, r2
 8000938:	dbf3      	blt.n	8000922 <_delay_ms+0xe>
}
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <LCD_SEND_EN>:
void LCD_SEND_EN(){
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	//setpit(lCD_PORT,E);
	pinwrite(lCD_PORT, E, HIGH);
 8000948:	2201      	movs	r2, #1
 800094a:	2100      	movs	r1, #0
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <LCD_SEND_EN+0x24>)
 800094e:	f7ff ff7c 	bl	800084a <pinwrite>
	_delay_ms(1);
 8000952:	2001      	movs	r0, #1
 8000954:	f7ff ffde 	bl	8000914 <_delay_ms>
	pinwrite(lCD_PORT, E, LOW);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <LCD_SEND_EN+0x24>)
 800095e:	f7ff ff74 	bl	800084a <pinwrite>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40010c00 	.word	0x40010c00

0800096c <LCD_write_CMD>:
void LCD_write_CMD(char CMD){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	//clearpit(lCD_PORT,RS);
	//clearpit(lCD_PORT,RW);
	pinwrite(lCD_PORT, RW, LOW);
 8000976:	2200      	movs	r2, #0
 8000978:	2101      	movs	r1, #1
 800097a:	4818      	ldr	r0, [pc, #96]	; (80009dc <LCD_write_CMD+0x70>)
 800097c:	f7ff ff65 	bl	800084a <pinwrite>
	pinwrite(lCD_PORT, RS, LOW);
 8000980:	2200      	movs	r2, #0
 8000982:	2102      	movs	r1, #2
 8000984:	4815      	ldr	r0, [pc, #84]	; (80009dc <LCD_write_CMD+0x70>)
 8000986:	f7ff ff60 	bl	800084a <pinwrite>
	//for left 4 pit HSP 
	//lCD_PORT &=~(0b1111<<4);
	//lCD_PORT |=((CMD>>4)<<4);
	res_Value_PORT(lCD_PORT,0b1111,4);
 800098a:	2204      	movs	r2, #4
 800098c:	210f      	movs	r1, #15
 800098e:	4813      	ldr	r0, [pc, #76]	; (80009dc <LCD_write_CMD+0x70>)
 8000990:	f7ff ff95 	bl	80008be <res_Value_PORT>
	set_Value_PORT(lCD_PORT,(CMD>>4),4);
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	b2db      	uxtb	r3, r3
 800099a:	b29b      	uxth	r3, r3
 800099c:	2204      	movs	r2, #4
 800099e:	4619      	mov	r1, r3
 80009a0:	480e      	ldr	r0, [pc, #56]	; (80009dc <LCD_write_CMD+0x70>)
 80009a2:	f7ff ff76 	bl	8000892 <set_Value_PORT>
	LCD_SEND_EN();
 80009a6:	f7ff ffcd 	bl	8000944 <LCD_SEND_EN>

	if(flag_init)
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <LCD_write_CMD+0x74>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00d      	beq.n	80009ce <LCD_write_CMD+0x62>
	{
		//for right 4 pit LSP 
		//	lCD_PORT &=~(0b1111<<4);
		//	lCD_PORT |=(CMD<<4);
		res_Value_PORT(lCD_PORT,0b1111,4);
 80009b2:	2204      	movs	r2, #4
 80009b4:	210f      	movs	r1, #15
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <LCD_write_CMD+0x70>)
 80009b8:	f7ff ff81 	bl	80008be <res_Value_PORT>
		set_Value_PORT(lCD_PORT,(CMD),4);
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	2204      	movs	r2, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <LCD_write_CMD+0x70>)
 80009c6:	f7ff ff64 	bl	8000892 <set_Value_PORT>
		LCD_SEND_EN();
 80009ca:	f7ff ffbb 	bl	8000944 <LCD_SEND_EN>

	}
	_delay_ms(2);
 80009ce:	2002      	movs	r0, #2
 80009d0:	f7ff ffa0 	bl	8000914 <_delay_ms>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40010c00 	.word	0x40010c00
 80009e0:	200000a8 	.word	0x200000a8

080009e4 <LCD_Init>:
void LCD_Init(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	flag_init=0;
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <LCD_Init+0x9c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
	//setport(lCD_DDR);
	pinmode(lCD_PORT,  E,GPIO_MODE_OUTPUT_push_pull_Speed10);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2100      	movs	r1, #0
 80009f2:	4824      	ldr	r0, [pc, #144]	; (8000a84 <LCD_Init+0xa0>)
 80009f4:	f7ff fe6a 	bl	80006cc <pinmode>
	pinmode(lCD_PORT, RS,GPIO_MODE_OUTPUT_push_pull_Speed10);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2102      	movs	r1, #2
 80009fc:	4821      	ldr	r0, [pc, #132]	; (8000a84 <LCD_Init+0xa0>)
 80009fe:	f7ff fe65 	bl	80006cc <pinmode>
	pinmode(lCD_PORT, RW,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2101      	movs	r1, #1
 8000a06:	481f      	ldr	r0, [pc, #124]	; (8000a84 <LCD_Init+0xa0>)
 8000a08:	f7ff fe60 	bl	80006cc <pinmode>

	pinmode(lCD_PORT, D4,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2104      	movs	r1, #4
 8000a10:	481c      	ldr	r0, [pc, #112]	; (8000a84 <LCD_Init+0xa0>)
 8000a12:	f7ff fe5b 	bl	80006cc <pinmode>
	pinmode(lCD_PORT, D5,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2105      	movs	r1, #5
 8000a1a:	481a      	ldr	r0, [pc, #104]	; (8000a84 <LCD_Init+0xa0>)
 8000a1c:	f7ff fe56 	bl	80006cc <pinmode>
	pinmode(lCD_PORT, D6,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2106      	movs	r1, #6
 8000a24:	4817      	ldr	r0, [pc, #92]	; (8000a84 <LCD_Init+0xa0>)
 8000a26:	f7ff fe51 	bl	80006cc <pinmode>
	pinmode(lCD_PORT, D7,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	4815      	ldr	r0, [pc, #84]	; (8000a84 <LCD_Init+0xa0>)
 8000a30:	f7ff fe4c 	bl	80006cc <pinmode>

	_delay_ms(20);
 8000a34:	2014      	movs	r0, #20
 8000a36:	f7ff ff6d 	bl	8000914 <_delay_ms>
	LCD_write_CMD(0x20);
 8000a3a:	2020      	movs	r0, #32
 8000a3c:	f7ff ff96 	bl	800096c <LCD_write_CMD>
	LCD_write_CMD(0x20);
 8000a40:	2020      	movs	r0, #32
 8000a42:	f7ff ff93 	bl	800096c <LCD_write_CMD>
	LCD_write_CMD(0x80);// 2 line and 5x7 pixel N=1 f=0
 8000a46:	2080      	movs	r0, #128	; 0x80
 8000a48:	f7ff ff90 	bl	800096c <LCD_write_CMD>
	_delay_ms(1);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff ff61 	bl	8000914 <_delay_ms>
	LCD_write_CMD(0x00);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f7ff ff8a 	bl	800096c <LCD_write_CMD>
	LCD_write_CMD(0xC0);//cerser
 8000a58:	20c0      	movs	r0, #192	; 0xc0
 8000a5a:	f7ff ff87 	bl	800096c <LCD_write_CMD>
	_delay_ms(1);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f7ff ff58 	bl	8000914 <_delay_ms>
	LCD_write_CMD(0x00);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff ff81 	bl	800096c <LCD_write_CMD>
	LCD_write_CMD(0x10);
 8000a6a:	2010      	movs	r0, #16
 8000a6c:	f7ff ff7e 	bl	800096c <LCD_write_CMD>
	_delay_ms(2);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f7ff ff4f 	bl	8000914 <_delay_ms>

	flag_init=1;
 8000a76:	4b02      	ldr	r3, [pc, #8]	; (8000a80 <LCD_Init+0x9c>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000a8 	.word	0x200000a8
 8000a84:	40010c00 	.word	0x40010c00

08000a88 <LCD_write_data>:
void LCD_write_data(char data){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	//	setpit(lCD_PORT,RS);
	//	clearpit(lCD_PORT,RW);
	pinwrite(lCD_PORT, RW, LOW);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2101      	movs	r1, #1
 8000a96:	4816      	ldr	r0, [pc, #88]	; (8000af0 <LCD_write_data+0x68>)
 8000a98:	f7ff fed7 	bl	800084a <pinwrite>
	pinwrite(lCD_PORT, RS, HIGH);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <LCD_write_data+0x68>)
 8000aa2:	f7ff fed2 	bl	800084a <pinwrite>
	//for left 4 pit HSP
	//	lCD_PORT &=~(0b1111<<4);
	//	lCD_PORT |=((data>>4)<<4);
	res_Value_PORT(lCD_PORT,0b1111,4);
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	4811      	ldr	r0, [pc, #68]	; (8000af0 <LCD_write_data+0x68>)
 8000aac:	f7ff ff07 	bl	80008be <res_Value_PORT>
	set_Value_PORT(lCD_PORT,(data>>4),4);
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	091b      	lsrs	r3, r3, #4
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	2204      	movs	r2, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <LCD_write_data+0x68>)
 8000abe:	f7ff fee8 	bl	8000892 <set_Value_PORT>
	LCD_SEND_EN();
 8000ac2:	f7ff ff3f 	bl	8000944 <LCD_SEND_EN>

	//for right 4 pit LSP
	//	lCD_PORT &=~(0b1111<<4);
	//	lCD_PORT |=(data<<4);
	res_Value_PORT(lCD_PORT,0b1111,4);
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	210f      	movs	r1, #15
 8000aca:	4809      	ldr	r0, [pc, #36]	; (8000af0 <LCD_write_data+0x68>)
 8000acc:	f7ff fef7 	bl	80008be <res_Value_PORT>
	set_Value_PORT(lCD_PORT,(data),4);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <LCD_write_data+0x68>)
 8000ada:	f7ff feda 	bl	8000892 <set_Value_PORT>
	LCD_SEND_EN();
 8000ade:	f7ff ff31 	bl	8000944 <LCD_SEND_EN>


	_delay_ms(1);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff ff16 	bl	8000914 <_delay_ms>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40010c00 	.word	0x40010c00

08000af4 <LCD_write_string>:
void LCD_write_string(char* data){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
//	setpit(lCD_PORT,RS);
//	clearpit(lCD_PORT,RW);
	pinwrite(lCD_PORT, RW, LOW);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2101      	movs	r1, #1
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <LCD_write_string+0x40>)
 8000b02:	f7ff fea2 	bl	800084a <pinwrite>
	pinwrite(lCD_PORT, RS, HIGH);
 8000b06:	2201      	movs	r2, #1
 8000b08:	2102      	movs	r1, #2
 8000b0a:	480a      	ldr	r0, [pc, #40]	; (8000b34 <LCD_write_string+0x40>)
 8000b0c:	f7ff fe9d 	bl	800084a <pinwrite>
	while((*data)!=0){
 8000b10:	e007      	b.n	8000b22 <LCD_write_string+0x2e>

		LCD_write_data(*data);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ffb6 	bl	8000a88 <LCD_write_data>
		data++;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	607b      	str	r3, [r7, #4]
	while((*data)!=0){
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f3      	bne.n	8000b12 <LCD_write_string+0x1e>
	}

}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40010c00 	.word	0x40010c00

08000b38 <LCD_setcerser>:
void LCD_setcerser(char ROW , char COL){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
	volatile unsigned char addres ;
	if(ROW<2 && COL<16){
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d80f      	bhi.n	8000b6e <LCD_setcerser+0x36>
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80c      	bhi.n	8000b6e <LCD_setcerser+0x36>
		addres =(0x40 * ROW) + COL ;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	019b      	lsls	r3, r3, #6
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	79bb      	ldrb	r3, [r7, #6]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	73fb      	strb	r3, [r7, #15]
		addres |=(1<<7);
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	73fb      	strb	r3, [r7, #15]
	}

	LCD_write_CMD(addres);
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fefa 	bl	800096c <LCD_write_CMD>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <LCD_write_INTnumber>:
void LCD_write_FLOATnumber(float num,unsigned char digit){
	char text[20];
	gcvt(num,digit,text);
	LCD_write_string(text);
}
void LCD_write_INTnumber(int num){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	char text[20];
	sprintf(text,"%d",num);
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4906      	ldr	r1, [pc, #24]	; (8000ba8 <LCD_write_INTnumber+0x28>)
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 fdfd 	bl	8001790 <siprintf>
	LCD_write_string(text);
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ffaa 	bl	8000af4 <LCD_write_string>
}
 8000ba0:	bf00      	nop
 8000ba2:	3720      	adds	r7, #32
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	08001fe4 	.word	0x08001fe4

08000bac <MCAL_speed_init>:
 *      Author: mo
 */

#include "stm32_speed_DRIVER.h"

void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d138      	bne.n	8000c34 <MCAL_speed_init+0x88>
		if(mood==mood_FAST_MOOD_72MHzCORE){
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d135      	bne.n	8000c34 <MCAL_speed_init+0x88>
//			0: HSI oscillator clock / 2 selected as PLL input clock
//			1: Clock from PREDIV1 selected as PLL input clock
//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MCAL_speed_init+0x94>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <MCAL_speed_init+0x94>)
 8000bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd2:	6053      	str	r3, [r2, #4]
//			10xx: Reserved
//			1100: Reserved
//			1101: PLL input clock x 6.5
//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MCAL_speed_init+0x94>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <MCAL_speed_init+0x94>)
 8000bda:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000bde:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MCAL_speed_init+0x94>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4a16      	ldr	r2, [pc, #88]	; (8000c40 <MCAL_speed_init+0x94>)
 8000be6:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000bea:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MCAL_speed_init+0x94>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <MCAL_speed_init+0x94>)
 8000bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bf6:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MCAL_speed_init+0x94>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <MCAL_speed_init+0x94>)
 8000bfe:	f023 0303 	bic.w	r3, r3, #3
 8000c02:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MCAL_speed_init+0x94>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <MCAL_speed_init+0x94>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MCAL_speed_init+0x94>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <MCAL_speed_init+0x94>)
 8000c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c1a:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MCAL_speed_init+0x94>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <MCAL_speed_init+0x94>)
 8000c22:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c26:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <MCAL_speed_init+0x94>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <MCAL_speed_init+0x94>)
 8000c2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c32:	6053      	str	r3, [r2, #4]

		}
	}


}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d854      	bhi.n	8000cfe <Enable_NVIC+0xba>
 8000c54:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <Enable_NVIC+0x18>)
 8000c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5a:	bf00      	nop
 8000c5c:	08000c9d 	.word	0x08000c9d
 8000c60:	08000cab 	.word	0x08000cab
 8000c64:	08000cb9 	.word	0x08000cb9
 8000c68:	08000cc7 	.word	0x08000cc7
 8000c6c:	08000cd5 	.word	0x08000cd5
 8000c70:	08000ce3 	.word	0x08000ce3
 8000c74:	08000ce3 	.word	0x08000ce3
 8000c78:	08000ce3 	.word	0x08000ce3
 8000c7c:	08000ce3 	.word	0x08000ce3
 8000c80:	08000ce3 	.word	0x08000ce3
 8000c84:	08000cf1 	.word	0x08000cf1
 8000c88:	08000cf1 	.word	0x08000cf1
 8000c8c:	08000cf1 	.word	0x08000cf1
 8000c90:	08000cf1 	.word	0x08000cf1
 8000c94:	08000cf1 	.word	0x08000cf1
 8000c98:	08000cf1 	.word	0x08000cf1
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <Enable_NVIC+0xc4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <Enable_NVIC+0xc4>)
 8000ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca6:	6013      	str	r3, [r2, #0]
		break;
 8000ca8:	e029      	b.n	8000cfe <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <Enable_NVIC+0xc4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <Enable_NVIC+0xc4>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	6013      	str	r3, [r2, #0]
		break;
 8000cb6:	e022      	b.n	8000cfe <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <Enable_NVIC+0xc4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <Enable_NVIC+0xc4>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
		break;
 8000cc4:	e01b      	b.n	8000cfe <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <Enable_NVIC+0xc4>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <Enable_NVIC+0xc4>)
 8000ccc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd0:	6013      	str	r3, [r2, #0]
		break;
 8000cd2:	e014      	b.n	8000cfe <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <Enable_NVIC+0xc4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <Enable_NVIC+0xc4>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cde:	6013      	str	r3, [r2, #0]
		break;
 8000ce0:	e00d      	b.n	8000cfe <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <Enable_NVIC+0xc4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <Enable_NVIC+0xc4>)
 8000ce8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cec:	6013      	str	r3, [r2, #0]
		break;
 8000cee:	e006      	b.n	8000cfe <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <Enable_NVIC+0xc8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <Enable_NVIC+0xc8>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
		break;
 8000cfc:	bf00      	nop
	}


}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000e104 	.word	0xe000e104

08000d10 <EXTI>:
 * @param [in]      -function_addres : app ISR function
 * @retval          - none
 * Note             -
 *================================================================ */

void EXTI(GPIO_typeDef* PORTx ,uint16_t pin,uint16_t triggercase,void *function_addres(void)){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	817b      	strh	r3, [r7, #10]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	813b      	strh	r3, [r7, #8]

	pinmode(PORTx,pin,GPIO_MODE_INTPUT_AF);//set pin to _INTPUT_AF
 8000d22:	897b      	ldrh	r3, [r7, #10]
 8000d24:	2204      	movs	r2, #4
 8000d26:	4619      	mov	r1, r3
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f7ff fccf 	bl	80006cc <pinmode>
		//	0000: PA[x] pin
		//	0001: PB[x] pin
		//	0010: PC[x] pin
		//	0011: PD[x] pin

		switch(pin){
 8000d2e:	897b      	ldrh	r3, [r7, #10]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	f200 8385 	bhi.w	8001440 <EXTI+0x730>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <EXTI+0x2c>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000d7d 	.word	0x08000d7d
 8000d40:	08000de3 	.word	0x08000de3
 8000d44:	08000e49 	.word	0x08000e49
 8000d48:	08000eaf 	.word	0x08000eaf
 8000d4c:	08000f15 	.word	0x08000f15
 8000d50:	08000f7b 	.word	0x08000f7b
 8000d54:	08000ff5 	.word	0x08000ff5
 8000d58:	0800105b 	.word	0x0800105b
 8000d5c:	080010c1 	.word	0x080010c1
 8000d60:	08001127 	.word	0x08001127
 8000d64:	0800118d 	.word	0x0800118d
 8000d68:	080011f3 	.word	0x080011f3
 8000d6c:	0800126f 	.word	0x0800126f
 8000d70:	080012d5 	.word	0x080012d5
 8000d74:	0800133b 	.word	0x0800133b
 8000d78:	0800139f 	.word	0x0800139f
		case pin0:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<0);
 8000d7c:	4b92      	ldr	r3, [pc, #584]	; (8000fc8 <EXTI+0x2b8>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	4a91      	ldr	r2, [pc, #580]	; (8000fc8 <EXTI+0x2b8>)
 8000d82:	f023 030f 	bic.w	r3, r3, #15
 8000d86:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<0);}
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4a90      	ldr	r2, [pc, #576]	; (8000fcc <EXTI+0x2bc>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d106      	bne.n	8000d9e <EXTI+0x8e>
 8000d90:	4b8d      	ldr	r3, [pc, #564]	; (8000fc8 <EXTI+0x2b8>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	4a8c      	ldr	r2, [pc, #560]	; (8000fc8 <EXTI+0x2b8>)
 8000d96:	f023 030f 	bic.w	r3, r3, #15
 8000d9a:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}

			break;
 8000d9c:	e331      	b.n	8001402 <EXTI+0x6f2>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4a8b      	ldr	r2, [pc, #556]	; (8000fd0 <EXTI+0x2c0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d106      	bne.n	8000db4 <EXTI+0xa4>
 8000da6:	4b88      	ldr	r3, [pc, #544]	; (8000fc8 <EXTI+0x2b8>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	4a87      	ldr	r2, [pc, #540]	; (8000fc8 <EXTI+0x2b8>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6093      	str	r3, [r2, #8]
			break;
 8000db2:	e326      	b.n	8001402 <EXTI+0x6f2>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4a87      	ldr	r2, [pc, #540]	; (8000fd4 <EXTI+0x2c4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d106      	bne.n	8000dca <EXTI+0xba>
 8000dbc:	4b82      	ldr	r3, [pc, #520]	; (8000fc8 <EXTI+0x2b8>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4a81      	ldr	r2, [pc, #516]	; (8000fc8 <EXTI+0x2b8>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	6093      	str	r3, [r2, #8]
			break;
 8000dc8:	e31b      	b.n	8001402 <EXTI+0x6f2>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4a82      	ldr	r2, [pc, #520]	; (8000fd8 <EXTI+0x2c8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	f040 8317 	bne.w	8001402 <EXTI+0x6f2>
 8000dd4:	4b7c      	ldr	r3, [pc, #496]	; (8000fc8 <EXTI+0x2b8>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	4a7b      	ldr	r2, [pc, #492]	; (8000fc8 <EXTI+0x2b8>)
 8000dda:	f043 0303 	orr.w	r3, r3, #3
 8000dde:	6093      	str	r3, [r2, #8]
			break;
 8000de0:	e30f      	b.n	8001402 <EXTI+0x6f2>
		case pin1:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<4);
 8000de2:	4b79      	ldr	r3, [pc, #484]	; (8000fc8 <EXTI+0x2b8>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	4a78      	ldr	r2, [pc, #480]	; (8000fc8 <EXTI+0x2b8>)
 8000de8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dec:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<4);}
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4a76      	ldr	r2, [pc, #472]	; (8000fcc <EXTI+0x2bc>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d106      	bne.n	8000e04 <EXTI+0xf4>
 8000df6:	4b74      	ldr	r3, [pc, #464]	; (8000fc8 <EXTI+0x2b8>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	4a73      	ldr	r2, [pc, #460]	; (8000fc8 <EXTI+0x2b8>)
 8000dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e00:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}

			break;
 8000e02:	e300      	b.n	8001406 <EXTI+0x6f6>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4a72      	ldr	r2, [pc, #456]	; (8000fd0 <EXTI+0x2c0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d106      	bne.n	8000e1a <EXTI+0x10a>
 8000e0c:	4b6e      	ldr	r3, [pc, #440]	; (8000fc8 <EXTI+0x2b8>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	4a6d      	ldr	r2, [pc, #436]	; (8000fc8 <EXTI+0x2b8>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	6093      	str	r3, [r2, #8]
			break;
 8000e18:	e2f5      	b.n	8001406 <EXTI+0x6f6>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4a6d      	ldr	r2, [pc, #436]	; (8000fd4 <EXTI+0x2c4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d106      	bne.n	8000e30 <EXTI+0x120>
 8000e22:	4b69      	ldr	r3, [pc, #420]	; (8000fc8 <EXTI+0x2b8>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	4a68      	ldr	r2, [pc, #416]	; (8000fc8 <EXTI+0x2b8>)
 8000e28:	f043 0320 	orr.w	r3, r3, #32
 8000e2c:	6093      	str	r3, [r2, #8]
			break;
 8000e2e:	e2ea      	b.n	8001406 <EXTI+0x6f6>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4a69      	ldr	r2, [pc, #420]	; (8000fd8 <EXTI+0x2c8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	f040 82e6 	bne.w	8001406 <EXTI+0x6f6>
 8000e3a:	4b63      	ldr	r3, [pc, #396]	; (8000fc8 <EXTI+0x2b8>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	4a62      	ldr	r2, [pc, #392]	; (8000fc8 <EXTI+0x2b8>)
 8000e40:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000e44:	6093      	str	r3, [r2, #8]
			break;
 8000e46:	e2de      	b.n	8001406 <EXTI+0x6f6>
		case pin2:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<8);
 8000e48:	4b5f      	ldr	r3, [pc, #380]	; (8000fc8 <EXTI+0x2b8>)
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	4a5e      	ldr	r2, [pc, #376]	; (8000fc8 <EXTI+0x2b8>)
 8000e4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e52:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<8);}
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4a5d      	ldr	r2, [pc, #372]	; (8000fcc <EXTI+0x2bc>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d106      	bne.n	8000e6a <EXTI+0x15a>
 8000e5c:	4b5a      	ldr	r3, [pc, #360]	; (8000fc8 <EXTI+0x2b8>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	4a59      	ldr	r2, [pc, #356]	; (8000fc8 <EXTI+0x2b8>)
 8000e62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e66:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}

			break;
 8000e68:	e2cf      	b.n	800140a <EXTI+0x6fa>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4a58      	ldr	r2, [pc, #352]	; (8000fd0 <EXTI+0x2c0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d106      	bne.n	8000e80 <EXTI+0x170>
 8000e72:	4b55      	ldr	r3, [pc, #340]	; (8000fc8 <EXTI+0x2b8>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	4a54      	ldr	r2, [pc, #336]	; (8000fc8 <EXTI+0x2b8>)
 8000e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7c:	6093      	str	r3, [r2, #8]
			break;
 8000e7e:	e2c4      	b.n	800140a <EXTI+0x6fa>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4a54      	ldr	r2, [pc, #336]	; (8000fd4 <EXTI+0x2c4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d106      	bne.n	8000e96 <EXTI+0x186>
 8000e88:	4b4f      	ldr	r3, [pc, #316]	; (8000fc8 <EXTI+0x2b8>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	4a4e      	ldr	r2, [pc, #312]	; (8000fc8 <EXTI+0x2b8>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6093      	str	r3, [r2, #8]
			break;
 8000e94:	e2b9      	b.n	800140a <EXTI+0x6fa>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4a4f      	ldr	r2, [pc, #316]	; (8000fd8 <EXTI+0x2c8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	f040 82b5 	bne.w	800140a <EXTI+0x6fa>
 8000ea0:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <EXTI+0x2b8>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	4a48      	ldr	r2, [pc, #288]	; (8000fc8 <EXTI+0x2b8>)
 8000ea6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000eaa:	6093      	str	r3, [r2, #8]
			break;
 8000eac:	e2ad      	b.n	800140a <EXTI+0x6fa>
		case pin3:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<12);
 8000eae:	4b46      	ldr	r3, [pc, #280]	; (8000fc8 <EXTI+0x2b8>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	4a45      	ldr	r2, [pc, #276]	; (8000fc8 <EXTI+0x2b8>)
 8000eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000eb8:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<12);}
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4a43      	ldr	r2, [pc, #268]	; (8000fcc <EXTI+0x2bc>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d106      	bne.n	8000ed0 <EXTI+0x1c0>
 8000ec2:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <EXTI+0x2b8>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	4a40      	ldr	r2, [pc, #256]	; (8000fc8 <EXTI+0x2b8>)
 8000ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000ecc:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}

			break;
 8000ece:	e29e      	b.n	800140e <EXTI+0x6fe>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4a3f      	ldr	r2, [pc, #252]	; (8000fd0 <EXTI+0x2c0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d106      	bne.n	8000ee6 <EXTI+0x1d6>
 8000ed8:	4b3b      	ldr	r3, [pc, #236]	; (8000fc8 <EXTI+0x2b8>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	4a3a      	ldr	r2, [pc, #232]	; (8000fc8 <EXTI+0x2b8>)
 8000ede:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee2:	6093      	str	r3, [r2, #8]
			break;
 8000ee4:	e293      	b.n	800140e <EXTI+0x6fe>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <EXTI+0x2c4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d106      	bne.n	8000efc <EXTI+0x1ec>
 8000eee:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <EXTI+0x2b8>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	4a35      	ldr	r2, [pc, #212]	; (8000fc8 <EXTI+0x2b8>)
 8000ef4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ef8:	6093      	str	r3, [r2, #8]
			break;
 8000efa:	e288      	b.n	800140e <EXTI+0x6fe>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4a36      	ldr	r2, [pc, #216]	; (8000fd8 <EXTI+0x2c8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	f040 8284 	bne.w	800140e <EXTI+0x6fe>
 8000f06:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <EXTI+0x2b8>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	4a2f      	ldr	r2, [pc, #188]	; (8000fc8 <EXTI+0x2b8>)
 8000f0c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000f10:	6093      	str	r3, [r2, #8]
			break;
 8000f12:	e27c      	b.n	800140e <EXTI+0x6fe>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin4:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<0);
 8000f14:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <EXTI+0x2b8>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	4a2b      	ldr	r2, [pc, #172]	; (8000fc8 <EXTI+0x2b8>)
 8000f1a:	f023 030f 	bic.w	r3, r3, #15
 8000f1e:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<0);}
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4a2a      	ldr	r2, [pc, #168]	; (8000fcc <EXTI+0x2bc>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d106      	bne.n	8000f36 <EXTI+0x226>
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <EXTI+0x2b8>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4a26      	ldr	r2, [pc, #152]	; (8000fc8 <EXTI+0x2b8>)
 8000f2e:	f023 030f 	bic.w	r3, r3, #15
 8000f32:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}

			break;
 8000f34:	e26d      	b.n	8001412 <EXTI+0x702>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4a25      	ldr	r2, [pc, #148]	; (8000fd0 <EXTI+0x2c0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d106      	bne.n	8000f4c <EXTI+0x23c>
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <EXTI+0x2b8>)
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <EXTI+0x2b8>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	60d3      	str	r3, [r2, #12]
			break;
 8000f4a:	e262      	b.n	8001412 <EXTI+0x702>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <EXTI+0x2c4>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d106      	bne.n	8000f62 <EXTI+0x252>
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <EXTI+0x2b8>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <EXTI+0x2b8>)
 8000f5a:	f043 0302 	orr.w	r3, r3, #2
 8000f5e:	60d3      	str	r3, [r2, #12]
			break;
 8000f60:	e257      	b.n	8001412 <EXTI+0x702>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <EXTI+0x2c8>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	f040 8253 	bne.w	8001412 <EXTI+0x702>
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <EXTI+0x2b8>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	4a15      	ldr	r2, [pc, #84]	; (8000fc8 <EXTI+0x2b8>)
 8000f72:	f043 0303 	orr.w	r3, r3, #3
 8000f76:	60d3      	str	r3, [r2, #12]
			break;
 8000f78:	e24b      	b.n	8001412 <EXTI+0x702>
		case pin5:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<4);
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <EXTI+0x2b8>)
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <EXTI+0x2b8>)
 8000f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f84:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<4);}
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <EXTI+0x2bc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d106      	bne.n	8000f9c <EXTI+0x28c>
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <EXTI+0x2b8>)
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <EXTI+0x2b8>)
 8000f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f98:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}

			break;
 8000f9a:	e23c      	b.n	8001416 <EXTI+0x706>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <EXTI+0x2c0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d106      	bne.n	8000fb2 <EXTI+0x2a2>
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <EXTI+0x2b8>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <EXTI+0x2b8>)
 8000faa:	f043 0310 	orr.w	r3, r3, #16
 8000fae:	60d3      	str	r3, [r2, #12]
			break;
 8000fb0:	e231      	b.n	8001416 <EXTI+0x706>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <EXTI+0x2c4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d110      	bne.n	8000fdc <EXTI+0x2cc>
 8000fba:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <EXTI+0x2b8>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	4a02      	ldr	r2, [pc, #8]	; (8000fc8 <EXTI+0x2b8>)
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	60d3      	str	r3, [r2, #12]
			break;
 8000fc6:	e226      	b.n	8001416 <EXTI+0x706>
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	40011000 	.word	0x40011000
 8000fd8:	40011400 	.word	0x40011400
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4a93      	ldr	r2, [pc, #588]	; (800122c <EXTI+0x51c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	f040 8218 	bne.w	8001416 <EXTI+0x706>
 8000fe6:	4b92      	ldr	r3, [pc, #584]	; (8001230 <EXTI+0x520>)
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	4a91      	ldr	r2, [pc, #580]	; (8001230 <EXTI+0x520>)
 8000fec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000ff0:	60d3      	str	r3, [r2, #12]
			break;
 8000ff2:	e210      	b.n	8001416 <EXTI+0x706>
		case pin6:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<8);
 8000ff4:	4b8e      	ldr	r3, [pc, #568]	; (8001230 <EXTI+0x520>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	4a8d      	ldr	r2, [pc, #564]	; (8001230 <EXTI+0x520>)
 8000ffa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ffe:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<8);}
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4a8c      	ldr	r2, [pc, #560]	; (8001234 <EXTI+0x524>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d106      	bne.n	8001016 <EXTI+0x306>
 8001008:	4b89      	ldr	r3, [pc, #548]	; (8001230 <EXTI+0x520>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4a88      	ldr	r2, [pc, #544]	; (8001230 <EXTI+0x520>)
 800100e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001012:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}

			break;
 8001014:	e201      	b.n	800141a <EXTI+0x70a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4a87      	ldr	r2, [pc, #540]	; (8001238 <EXTI+0x528>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d106      	bne.n	800102c <EXTI+0x31c>
 800101e:	4b84      	ldr	r3, [pc, #528]	; (8001230 <EXTI+0x520>)
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	4a83      	ldr	r2, [pc, #524]	; (8001230 <EXTI+0x520>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	60d3      	str	r3, [r2, #12]
			break;
 800102a:	e1f6      	b.n	800141a <EXTI+0x70a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a83      	ldr	r2, [pc, #524]	; (800123c <EXTI+0x52c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d106      	bne.n	8001042 <EXTI+0x332>
 8001034:	4b7e      	ldr	r3, [pc, #504]	; (8001230 <EXTI+0x520>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a7d      	ldr	r2, [pc, #500]	; (8001230 <EXTI+0x520>)
 800103a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103e:	60d3      	str	r3, [r2, #12]
			break;
 8001040:	e1eb      	b.n	800141a <EXTI+0x70a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4a79      	ldr	r2, [pc, #484]	; (800122c <EXTI+0x51c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	f040 81e7 	bne.w	800141a <EXTI+0x70a>
 800104c:	4b78      	ldr	r3, [pc, #480]	; (8001230 <EXTI+0x520>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	4a77      	ldr	r2, [pc, #476]	; (8001230 <EXTI+0x520>)
 8001052:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001056:	60d3      	str	r3, [r2, #12]
			break;
 8001058:	e1df      	b.n	800141a <EXTI+0x70a>
		case pin7:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<12);
 800105a:	4b75      	ldr	r3, [pc, #468]	; (8001230 <EXTI+0x520>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	4a74      	ldr	r2, [pc, #464]	; (8001230 <EXTI+0x520>)
 8001060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001064:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<12);}
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4a72      	ldr	r2, [pc, #456]	; (8001234 <EXTI+0x524>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d106      	bne.n	800107c <EXTI+0x36c>
 800106e:	4b70      	ldr	r3, [pc, #448]	; (8001230 <EXTI+0x520>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	4a6f      	ldr	r2, [pc, #444]	; (8001230 <EXTI+0x520>)
 8001074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001078:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}

			break;
 800107a:	e1d0      	b.n	800141e <EXTI+0x70e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4a6e      	ldr	r2, [pc, #440]	; (8001238 <EXTI+0x528>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d106      	bne.n	8001092 <EXTI+0x382>
 8001084:	4b6a      	ldr	r3, [pc, #424]	; (8001230 <EXTI+0x520>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4a69      	ldr	r2, [pc, #420]	; (8001230 <EXTI+0x520>)
 800108a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800108e:	60d3      	str	r3, [r2, #12]
			break;
 8001090:	e1c5      	b.n	800141e <EXTI+0x70e>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4a69      	ldr	r2, [pc, #420]	; (800123c <EXTI+0x52c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d106      	bne.n	80010a8 <EXTI+0x398>
 800109a:	4b65      	ldr	r3, [pc, #404]	; (8001230 <EXTI+0x520>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	4a64      	ldr	r2, [pc, #400]	; (8001230 <EXTI+0x520>)
 80010a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010a4:	60d3      	str	r3, [r2, #12]
			break;
 80010a6:	e1ba      	b.n	800141e <EXTI+0x70e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4a60      	ldr	r2, [pc, #384]	; (800122c <EXTI+0x51c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	f040 81b6 	bne.w	800141e <EXTI+0x70e>
 80010b2:	4b5f      	ldr	r3, [pc, #380]	; (8001230 <EXTI+0x520>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	4a5e      	ldr	r2, [pc, #376]	; (8001230 <EXTI+0x520>)
 80010b8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80010bc:	60d3      	str	r3, [r2, #12]
			break;
 80010be:	e1ae      	b.n	800141e <EXTI+0x70e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin8:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<0);
 80010c0:	4b5b      	ldr	r3, [pc, #364]	; (8001230 <EXTI+0x520>)
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	4a5a      	ldr	r2, [pc, #360]	; (8001230 <EXTI+0x520>)
 80010c6:	f023 030f 	bic.w	r3, r3, #15
 80010ca:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<0);}
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4a59      	ldr	r2, [pc, #356]	; (8001234 <EXTI+0x524>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d106      	bne.n	80010e2 <EXTI+0x3d2>
 80010d4:	4b56      	ldr	r3, [pc, #344]	; (8001230 <EXTI+0x520>)
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	4a55      	ldr	r2, [pc, #340]	; (8001230 <EXTI+0x520>)
 80010da:	f023 030f 	bic.w	r3, r3, #15
 80010de:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}

			break;
 80010e0:	e19f      	b.n	8001422 <EXTI+0x712>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4a54      	ldr	r2, [pc, #336]	; (8001238 <EXTI+0x528>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d106      	bne.n	80010f8 <EXTI+0x3e8>
 80010ea:	4b51      	ldr	r3, [pc, #324]	; (8001230 <EXTI+0x520>)
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	4a50      	ldr	r2, [pc, #320]	; (8001230 <EXTI+0x520>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6113      	str	r3, [r2, #16]
			break;
 80010f6:	e194      	b.n	8001422 <EXTI+0x712>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4a50      	ldr	r2, [pc, #320]	; (800123c <EXTI+0x52c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d106      	bne.n	800110e <EXTI+0x3fe>
 8001100:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <EXTI+0x520>)
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	4a4a      	ldr	r2, [pc, #296]	; (8001230 <EXTI+0x520>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	6113      	str	r3, [r2, #16]
			break;
 800110c:	e189      	b.n	8001422 <EXTI+0x712>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4a46      	ldr	r2, [pc, #280]	; (800122c <EXTI+0x51c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	f040 8185 	bne.w	8001422 <EXTI+0x712>
 8001118:	4b45      	ldr	r3, [pc, #276]	; (8001230 <EXTI+0x520>)
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	4a44      	ldr	r2, [pc, #272]	; (8001230 <EXTI+0x520>)
 800111e:	f043 0303 	orr.w	r3, r3, #3
 8001122:	6113      	str	r3, [r2, #16]
			break;
 8001124:	e17d      	b.n	8001422 <EXTI+0x712>
		case pin9:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<4);
 8001126:	4b42      	ldr	r3, [pc, #264]	; (8001230 <EXTI+0x520>)
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	4a41      	ldr	r2, [pc, #260]	; (8001230 <EXTI+0x520>)
 800112c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001130:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<4);}
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4a3f      	ldr	r2, [pc, #252]	; (8001234 <EXTI+0x524>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d106      	bne.n	8001148 <EXTI+0x438>
 800113a:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <EXTI+0x520>)
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	4a3c      	ldr	r2, [pc, #240]	; (8001230 <EXTI+0x520>)
 8001140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001144:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}

			break;
 8001146:	e16e      	b.n	8001426 <EXTI+0x716>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4a3b      	ldr	r2, [pc, #236]	; (8001238 <EXTI+0x528>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d106      	bne.n	800115e <EXTI+0x44e>
 8001150:	4b37      	ldr	r3, [pc, #220]	; (8001230 <EXTI+0x520>)
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	4a36      	ldr	r2, [pc, #216]	; (8001230 <EXTI+0x520>)
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	6113      	str	r3, [r2, #16]
			break;
 800115c:	e163      	b.n	8001426 <EXTI+0x716>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4a36      	ldr	r2, [pc, #216]	; (800123c <EXTI+0x52c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d106      	bne.n	8001174 <EXTI+0x464>
 8001166:	4b32      	ldr	r3, [pc, #200]	; (8001230 <EXTI+0x520>)
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	4a31      	ldr	r2, [pc, #196]	; (8001230 <EXTI+0x520>)
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	6113      	str	r3, [r2, #16]
			break;
 8001172:	e158      	b.n	8001426 <EXTI+0x716>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4a2d      	ldr	r2, [pc, #180]	; (800122c <EXTI+0x51c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	f040 8154 	bne.w	8001426 <EXTI+0x716>
 800117e:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <EXTI+0x520>)
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	4a2b      	ldr	r2, [pc, #172]	; (8001230 <EXTI+0x520>)
 8001184:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001188:	6113      	str	r3, [r2, #16]
			break;
 800118a:	e14c      	b.n	8001426 <EXTI+0x716>
		case pin10:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<8);
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <EXTI+0x520>)
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	4a27      	ldr	r2, [pc, #156]	; (8001230 <EXTI+0x520>)
 8001192:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001196:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<8);}
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4a26      	ldr	r2, [pc, #152]	; (8001234 <EXTI+0x524>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d106      	bne.n	80011ae <EXTI+0x49e>
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <EXTI+0x520>)
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	4a22      	ldr	r2, [pc, #136]	; (8001230 <EXTI+0x520>)
 80011a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011aa:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}

			break;
 80011ac:	e13d      	b.n	800142a <EXTI+0x71a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4a21      	ldr	r2, [pc, #132]	; (8001238 <EXTI+0x528>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d106      	bne.n	80011c4 <EXTI+0x4b4>
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <EXTI+0x520>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <EXTI+0x520>)
 80011bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c0:	6113      	str	r3, [r2, #16]
			break;
 80011c2:	e132      	b.n	800142a <EXTI+0x71a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4a1d      	ldr	r2, [pc, #116]	; (800123c <EXTI+0x52c>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d106      	bne.n	80011da <EXTI+0x4ca>
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <EXTI+0x520>)
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	4a17      	ldr	r2, [pc, #92]	; (8001230 <EXTI+0x520>)
 80011d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d6:	6113      	str	r3, [r2, #16]
			break;
 80011d8:	e127      	b.n	800142a <EXTI+0x71a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4a13      	ldr	r2, [pc, #76]	; (800122c <EXTI+0x51c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	f040 8123 	bne.w	800142a <EXTI+0x71a>
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <EXTI+0x520>)
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	4a11      	ldr	r2, [pc, #68]	; (8001230 <EXTI+0x520>)
 80011ea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80011ee:	6113      	str	r3, [r2, #16]
			break;
 80011f0:	e11b      	b.n	800142a <EXTI+0x71a>
		case pin11:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<12);
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <EXTI+0x520>)
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <EXTI+0x520>)
 80011f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80011fc:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<12);}
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <EXTI+0x524>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d106      	bne.n	8001214 <EXTI+0x504>
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <EXTI+0x520>)
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <EXTI+0x520>)
 800120c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001210:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}

			break;
 8001212:	e10c      	b.n	800142e <EXTI+0x71e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <EXTI+0x528>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d111      	bne.n	8001240 <EXTI+0x530>
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <EXTI+0x520>)
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	4a03      	ldr	r2, [pc, #12]	; (8001230 <EXTI+0x520>)
 8001222:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001226:	6113      	str	r3, [r2, #16]
			break;
 8001228:	e101      	b.n	800142e <EXTI+0x71e>
 800122a:	bf00      	nop
 800122c:	40011400 	.word	0x40011400
 8001230:	40010000 	.word	0x40010000
 8001234:	40010800 	.word	0x40010800
 8001238:	40010c00 	.word	0x40010c00
 800123c:	40011000 	.word	0x40011000
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4a98      	ldr	r2, [pc, #608]	; (80014a4 <EXTI+0x794>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d106      	bne.n	8001256 <EXTI+0x546>
 8001248:	4b97      	ldr	r3, [pc, #604]	; (80014a8 <EXTI+0x798>)
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	4a96      	ldr	r2, [pc, #600]	; (80014a8 <EXTI+0x798>)
 800124e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001252:	6113      	str	r3, [r2, #16]
			break;
 8001254:	e0eb      	b.n	800142e <EXTI+0x71e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4a94      	ldr	r2, [pc, #592]	; (80014ac <EXTI+0x79c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	f040 80e7 	bne.w	800142e <EXTI+0x71e>
 8001260:	4b91      	ldr	r3, [pc, #580]	; (80014a8 <EXTI+0x798>)
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	4a90      	ldr	r2, [pc, #576]	; (80014a8 <EXTI+0x798>)
 8001266:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800126a:	6113      	str	r3, [r2, #16]
			break;
 800126c:	e0df      	b.n	800142e <EXTI+0x71e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin12:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<0);
 800126e:	4b8e      	ldr	r3, [pc, #568]	; (80014a8 <EXTI+0x798>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	4a8d      	ldr	r2, [pc, #564]	; (80014a8 <EXTI+0x798>)
 8001274:	f023 030f 	bic.w	r3, r3, #15
 8001278:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<0);}
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4a8c      	ldr	r2, [pc, #560]	; (80014b0 <EXTI+0x7a0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d106      	bne.n	8001290 <EXTI+0x580>
 8001282:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <EXTI+0x798>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	4a88      	ldr	r2, [pc, #544]	; (80014a8 <EXTI+0x798>)
 8001288:	f023 030f 	bic.w	r3, r3, #15
 800128c:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}

			break;
 800128e:	e0d0      	b.n	8001432 <EXTI+0x722>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4a88      	ldr	r2, [pc, #544]	; (80014b4 <EXTI+0x7a4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d106      	bne.n	80012a6 <EXTI+0x596>
 8001298:	4b83      	ldr	r3, [pc, #524]	; (80014a8 <EXTI+0x798>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4a82      	ldr	r2, [pc, #520]	; (80014a8 <EXTI+0x798>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6153      	str	r3, [r2, #20]
			break;
 80012a4:	e0c5      	b.n	8001432 <EXTI+0x722>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4a7e      	ldr	r2, [pc, #504]	; (80014a4 <EXTI+0x794>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d106      	bne.n	80012bc <EXTI+0x5ac>
 80012ae:	4b7e      	ldr	r3, [pc, #504]	; (80014a8 <EXTI+0x798>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a7d      	ldr	r2, [pc, #500]	; (80014a8 <EXTI+0x798>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6153      	str	r3, [r2, #20]
			break;
 80012ba:	e0ba      	b.n	8001432 <EXTI+0x722>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4a7b      	ldr	r2, [pc, #492]	; (80014ac <EXTI+0x79c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	f040 80b6 	bne.w	8001432 <EXTI+0x722>
 80012c6:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <EXTI+0x798>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4a77      	ldr	r2, [pc, #476]	; (80014a8 <EXTI+0x798>)
 80012cc:	f043 0303 	orr.w	r3, r3, #3
 80012d0:	6153      	str	r3, [r2, #20]
			break;
 80012d2:	e0ae      	b.n	8001432 <EXTI+0x722>
		case pin13:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<4);
 80012d4:	4b74      	ldr	r3, [pc, #464]	; (80014a8 <EXTI+0x798>)
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	4a73      	ldr	r2, [pc, #460]	; (80014a8 <EXTI+0x798>)
 80012da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012de:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<4);}
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4a73      	ldr	r2, [pc, #460]	; (80014b0 <EXTI+0x7a0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d106      	bne.n	80012f6 <EXTI+0x5e6>
 80012e8:	4b6f      	ldr	r3, [pc, #444]	; (80014a8 <EXTI+0x798>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	4a6e      	ldr	r2, [pc, #440]	; (80014a8 <EXTI+0x798>)
 80012ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012f2:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}

			break;
 80012f4:	e09f      	b.n	8001436 <EXTI+0x726>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4a6e      	ldr	r2, [pc, #440]	; (80014b4 <EXTI+0x7a4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d106      	bne.n	800130c <EXTI+0x5fc>
 80012fe:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <EXTI+0x798>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a69      	ldr	r2, [pc, #420]	; (80014a8 <EXTI+0x798>)
 8001304:	f043 0310 	orr.w	r3, r3, #16
 8001308:	6153      	str	r3, [r2, #20]
			break;
 800130a:	e094      	b.n	8001436 <EXTI+0x726>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4a65      	ldr	r2, [pc, #404]	; (80014a4 <EXTI+0x794>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d106      	bne.n	8001322 <EXTI+0x612>
 8001314:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <EXTI+0x798>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	4a63      	ldr	r2, [pc, #396]	; (80014a8 <EXTI+0x798>)
 800131a:	f043 0320 	orr.w	r3, r3, #32
 800131e:	6153      	str	r3, [r2, #20]
			break;
 8001320:	e089      	b.n	8001436 <EXTI+0x726>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4a61      	ldr	r2, [pc, #388]	; (80014ac <EXTI+0x79c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	f040 8085 	bne.w	8001436 <EXTI+0x726>
 800132c:	4b5e      	ldr	r3, [pc, #376]	; (80014a8 <EXTI+0x798>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	4a5d      	ldr	r2, [pc, #372]	; (80014a8 <EXTI+0x798>)
 8001332:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001336:	6153      	str	r3, [r2, #20]
			break;
 8001338:	e07d      	b.n	8001436 <EXTI+0x726>
		case pin14:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<8);
 800133a:	4b5b      	ldr	r3, [pc, #364]	; (80014a8 <EXTI+0x798>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	4a5a      	ldr	r2, [pc, #360]	; (80014a8 <EXTI+0x798>)
 8001340:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001344:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<8);}
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4a59      	ldr	r2, [pc, #356]	; (80014b0 <EXTI+0x7a0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d106      	bne.n	800135c <EXTI+0x64c>
 800134e:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <EXTI+0x798>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	4a55      	ldr	r2, [pc, #340]	; (80014a8 <EXTI+0x798>)
 8001354:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001358:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}

			break;
 800135a:	e06e      	b.n	800143a <EXTI+0x72a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4a55      	ldr	r2, [pc, #340]	; (80014b4 <EXTI+0x7a4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d106      	bne.n	8001372 <EXTI+0x662>
 8001364:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <EXTI+0x798>)
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	4a4f      	ldr	r2, [pc, #316]	; (80014a8 <EXTI+0x798>)
 800136a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136e:	6153      	str	r3, [r2, #20]
			break;
 8001370:	e063      	b.n	800143a <EXTI+0x72a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4a4b      	ldr	r2, [pc, #300]	; (80014a4 <EXTI+0x794>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d106      	bne.n	8001388 <EXTI+0x678>
 800137a:	4b4b      	ldr	r3, [pc, #300]	; (80014a8 <EXTI+0x798>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a4a      	ldr	r2, [pc, #296]	; (80014a8 <EXTI+0x798>)
 8001380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001384:	6153      	str	r3, [r2, #20]
			break;
 8001386:	e058      	b.n	800143a <EXTI+0x72a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4a48      	ldr	r2, [pc, #288]	; (80014ac <EXTI+0x79c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d154      	bne.n	800143a <EXTI+0x72a>
 8001390:	4b45      	ldr	r3, [pc, #276]	; (80014a8 <EXTI+0x798>)
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	4a44      	ldr	r2, [pc, #272]	; (80014a8 <EXTI+0x798>)
 8001396:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800139a:	6153      	str	r3, [r2, #20]
			break;
 800139c:	e04d      	b.n	800143a <EXTI+0x72a>
		case pin15:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<12);
 800139e:	4b42      	ldr	r3, [pc, #264]	; (80014a8 <EXTI+0x798>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	4a41      	ldr	r2, [pc, #260]	; (80014a8 <EXTI+0x798>)
 80013a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80013a8:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<12);}
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4a40      	ldr	r2, [pc, #256]	; (80014b0 <EXTI+0x7a0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d106      	bne.n	80013c0 <EXTI+0x6b0>
 80013b2:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <EXTI+0x798>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a3c      	ldr	r2, [pc, #240]	; (80014a8 <EXTI+0x798>)
 80013b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80013bc:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}

			break;
 80013be:	e03e      	b.n	800143e <EXTI+0x72e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4a3c      	ldr	r2, [pc, #240]	; (80014b4 <EXTI+0x7a4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d106      	bne.n	80013d6 <EXTI+0x6c6>
 80013c8:	4b37      	ldr	r3, [pc, #220]	; (80014a8 <EXTI+0x798>)
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	4a36      	ldr	r2, [pc, #216]	; (80014a8 <EXTI+0x798>)
 80013ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d2:	6153      	str	r3, [r2, #20]
			break;
 80013d4:	e033      	b.n	800143e <EXTI+0x72e>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4a32      	ldr	r2, [pc, #200]	; (80014a4 <EXTI+0x794>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d106      	bne.n	80013ec <EXTI+0x6dc>
 80013de:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <EXTI+0x798>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	4a31      	ldr	r2, [pc, #196]	; (80014a8 <EXTI+0x798>)
 80013e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013e8:	6153      	str	r3, [r2, #20]
			break;
 80013ea:	e028      	b.n	800143e <EXTI+0x72e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <EXTI+0x79c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d124      	bne.n	800143e <EXTI+0x72e>
 80013f4:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <EXTI+0x798>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	4a2b      	ldr	r2, [pc, #172]	; (80014a8 <EXTI+0x798>)
 80013fa:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80013fe:	6153      	str	r3, [r2, #20]
			break;
 8001400:	e01d      	b.n	800143e <EXTI+0x72e>
			break;
 8001402:	bf00      	nop
 8001404:	e01c      	b.n	8001440 <EXTI+0x730>
			break;
 8001406:	bf00      	nop
 8001408:	e01a      	b.n	8001440 <EXTI+0x730>
			break;
 800140a:	bf00      	nop
 800140c:	e018      	b.n	8001440 <EXTI+0x730>
			break;
 800140e:	bf00      	nop
 8001410:	e016      	b.n	8001440 <EXTI+0x730>
			break;
 8001412:	bf00      	nop
 8001414:	e014      	b.n	8001440 <EXTI+0x730>
			break;
 8001416:	bf00      	nop
 8001418:	e012      	b.n	8001440 <EXTI+0x730>
			break;
 800141a:	bf00      	nop
 800141c:	e010      	b.n	8001440 <EXTI+0x730>
			break;
 800141e:	bf00      	nop
 8001420:	e00e      	b.n	8001440 <EXTI+0x730>
			break;
 8001422:	bf00      	nop
 8001424:	e00c      	b.n	8001440 <EXTI+0x730>
			break;
 8001426:	bf00      	nop
 8001428:	e00a      	b.n	8001440 <EXTI+0x730>
			break;
 800142a:	bf00      	nop
 800142c:	e008      	b.n	8001440 <EXTI+0x730>
			break;
 800142e:	bf00      	nop
 8001430:	e006      	b.n	8001440 <EXTI+0x730>
			break;
 8001432:	bf00      	nop
 8001434:	e004      	b.n	8001440 <EXTI+0x730>
			break;
 8001436:	bf00      	nop
 8001438:	e002      	b.n	8001440 <EXTI+0x730>
			break;
 800143a:	bf00      	nop
 800143c:	e000      	b.n	8001440 <EXTI+0x730>
			break;
 800143e:	bf00      	nop
		}
	//================================================
	//3- Update Rising or Falling Register
	EXIT->EXTI_RTSR &=~(1<<pin);
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <EXTI+0x7a8>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	897a      	ldrh	r2, [r7, #10]
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f202 	lsl.w	r2, r1, r2
 800144c:	43d2      	mvns	r2, r2
 800144e:	4611      	mov	r1, r2
 8001450:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <EXTI+0x7a8>)
 8001452:	400b      	ands	r3, r1
 8001454:	6093      	str	r3, [r2, #8]
	EXIT->EXTI_FTSR &=~(1<<pin);
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <EXTI+0x7a8>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	897a      	ldrh	r2, [r7, #10]
 800145c:	2101      	movs	r1, #1
 800145e:	fa01 f202 	lsl.w	r2, r1, r2
 8001462:	43d2      	mvns	r2, r2
 8001464:	4611      	mov	r1, r2
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <EXTI+0x7a8>)
 8001468:	400b      	ands	r3, r1
 800146a:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 800146c:	893b      	ldrh	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10a      	bne.n	8001488 <EXTI+0x778>
		EXIT->EXTI_RTSR |= (1<<pin);
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <EXTI+0x7a8>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	897a      	ldrh	r2, [r7, #10]
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f202 	lsl.w	r2, r1, r2
 800147e:	4611      	mov	r1, r2
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <EXTI+0x7a8>)
 8001482:	430b      	orrs	r3, r1
 8001484:	6093      	str	r3, [r2, #8]
 8001486:	e02d      	b.n	80014e4 <EXTI+0x7d4>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 8001488:	893b      	ldrh	r3, [r7, #8]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d116      	bne.n	80014bc <EXTI+0x7ac>
		EXIT->EXTI_FTSR |= (1<<pin);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <EXTI+0x7a8>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	897a      	ldrh	r2, [r7, #10]
 8001494:	2101      	movs	r1, #1
 8001496:	fa01 f202 	lsl.w	r2, r1, r2
 800149a:	4611      	mov	r1, r2
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <EXTI+0x7a8>)
 800149e:	430b      	orrs	r3, r1
 80014a0:	60d3      	str	r3, [r2, #12]
 80014a2:	e01f      	b.n	80014e4 <EXTI+0x7d4>
 80014a4:	40011000 	.word	0x40011000
 80014a8:	40010000 	.word	0x40010000
 80014ac:	40011400 	.word	0x40011400
 80014b0:	40010800 	.word	0x40010800
 80014b4:	40010c00 	.word	0x40010c00
 80014b8:	40010400 	.word	0x40010400
	}
	else{
		EXIT->EXTI_RTSR |= (1<<pin);
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <EXTI+0x804>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	897a      	ldrh	r2, [r7, #10]
 80014c2:	2101      	movs	r1, #1
 80014c4:	fa01 f202 	lsl.w	r2, r1, r2
 80014c8:	4611      	mov	r1, r2
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <EXTI+0x804>)
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6093      	str	r3, [r2, #8]
		EXIT->EXTI_FTSR |= (1<<pin);
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <EXTI+0x804>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	897a      	ldrh	r2, [r7, #10]
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	4611      	mov	r1, r2
 80014de:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <EXTI+0x804>)
 80014e0:	430b      	orrs	r3, r1
 80014e2:	60d3      	str	r3, [r2, #12]
	}
	//4- Update IRQ Handling callback
	GP_IRQ_Callback[pin] =function_addres;
 80014e4:	897b      	ldrh	r3, [r7, #10]
 80014e6:	490c      	ldr	r1, [pc, #48]	; (8001518 <EXTI+0x808>)
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	EXIT->EXTI_IMR |=(1<<pin);
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <EXTI+0x804>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	897a      	ldrh	r2, [r7, #10]
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	4611      	mov	r1, r2
 80014fc:	4a05      	ldr	r2, [pc, #20]	; (8001514 <EXTI+0x804>)
 80014fe:	430b      	orrs	r3, r1
 8001500:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 8001502:	897b      	ldrh	r3, [r7, #10]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fb9d 	bl	8000c44 <Enable_NVIC>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40010400 	.word	0x40010400
 8001518:	200000b4 	.word	0x200000b4

0800151c <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <EXTI0_IRQHandler+0x1c>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <EXTI0_IRQHandler+0x1c>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <EXTI0_IRQHandler+0x20>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4798      	blx	r3
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40010400 	.word	0x40010400
 800153c:	200000b4 	.word	0x200000b4

08001540 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <EXTI1_IRQHandler+0x1c>)
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <EXTI1_IRQHandler+0x1c>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <EXTI1_IRQHandler+0x20>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4798      	blx	r3

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40010400 	.word	0x40010400
 8001560:	200000b4 	.word	0x200000b4

08001564 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <EXTI2_IRQHandler+0x1c>)
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <EXTI2_IRQHandler+0x1c>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <EXTI2_IRQHandler+0x20>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4798      	blx	r3
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40010400 	.word	0x40010400
 8001584:	200000b4 	.word	0x200000b4

08001588 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <EXTI3_IRQHandler+0x1c>)
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <EXTI3_IRQHandler+0x1c>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <EXTI3_IRQHandler+0x20>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4798      	blx	r3
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40010400 	.word	0x40010400
 80015a8:	200000b4 	.word	0x200000b4

080015ac <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <EXTI4_IRQHandler+0x1c>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <EXTI4_IRQHandler+0x1c>)
 80015b6:	f043 0310 	orr.w	r3, r3, #16
 80015ba:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <EXTI4_IRQHandler+0x20>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	4798      	blx	r3
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40010400 	.word	0x40010400
 80015cc:	200000b4 	.word	0x200000b4

080015d0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5]();  }
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <EXTI9_5_IRQHandler+0x22>
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	4a22      	ldr	r2, [pc, #136]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 80015e6:	f043 0320 	orr.w	r3, r3, #32
 80015ea:	6153      	str	r3, [r2, #20]
 80015ec:	4b21      	ldr	r3, [pc, #132]	; (8001674 <EXTI9_5_IRQHandler+0xa4>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6]();  }
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <EXTI9_5_IRQHandler+0x40>
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 8001604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001608:	6153      	str	r3, [r2, #20]
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <EXTI9_5_IRQHandler+0xa4>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7]();  }
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <EXTI9_5_IRQHandler+0x5e>
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	4a13      	ldr	r2, [pc, #76]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 8001622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001626:	6153      	str	r3, [r2, #20]
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <EXTI9_5_IRQHandler+0xa4>)
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8]();  }
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <EXTI9_5_IRQHandler+0x7c>
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	6153      	str	r3, [r2, #20]
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <EXTI9_5_IRQHandler+0xa4>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9]();  }
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <EXTI9_5_IRQHandler+0x9a>
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <EXTI9_5_IRQHandler+0xa0>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001662:	6153      	str	r3, [r2, #20]
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <EXTI9_5_IRQHandler+0xa4>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	4798      	blx	r3
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40010400 	.word	0x40010400
 8001674:	200000b4 	.word	0x200000b4

08001678 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10]();  }
 800167c:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <EXTI15_10_IRQHandler+0x22>
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	4a29      	ldr	r2, [pc, #164]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 800168e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001692:	6153      	str	r3, [r2, #20]
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <EXTI15_10_IRQHandler+0xc0>)
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11]();  }
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d008      	beq.n	80016b8 <EXTI15_10_IRQHandler+0x40>
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a22      	ldr	r2, [pc, #136]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 80016ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016b0:	6153      	str	r3, [r2, #20]
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <EXTI15_10_IRQHandler+0xc0>)
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12]();  }
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <EXTI15_10_IRQHandler+0x5e>
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 80016ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ce:	6153      	str	r3, [r2, #20]
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <EXTI15_10_IRQHandler+0xc0>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13]();  }
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d008      	beq.n	80016f4 <EXTI15_10_IRQHandler+0x7c>
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 80016e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <EXTI15_10_IRQHandler+0xc0>)
 80016f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f2:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14]();  }
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <EXTI15_10_IRQHandler+0x9a>
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 8001706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170a:	6153      	str	r3, [r2, #20]
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <EXTI15_10_IRQHandler+0xc0>)
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15]();  }
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <EXTI15_10_IRQHandler+0xb8>
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <EXTI15_10_IRQHandler+0xbc>)
 8001724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001728:	6153      	str	r3, [r2, #20]
 800172a:	4b03      	ldr	r3, [pc, #12]	; (8001738 <EXTI15_10_IRQHandler+0xc0>)
 800172c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172e:	4798      	blx	r3

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40010400 	.word	0x40010400
 8001738:	200000b4 	.word	0x200000b4

0800173c <__errno>:
 800173c:	4b01      	ldr	r3, [pc, #4]	; (8001744 <__errno+0x8>)
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000020 	.word	0x20000020

08001748 <__libc_init_array>:
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	2500      	movs	r5, #0
 800174c:	4e0c      	ldr	r6, [pc, #48]	; (8001780 <__libc_init_array+0x38>)
 800174e:	4c0d      	ldr	r4, [pc, #52]	; (8001784 <__libc_init_array+0x3c>)
 8001750:	1ba4      	subs	r4, r4, r6
 8001752:	10a4      	asrs	r4, r4, #2
 8001754:	42a5      	cmp	r5, r4
 8001756:	d109      	bne.n	800176c <__libc_init_array+0x24>
 8001758:	f000 fc2c 	bl	8001fb4 <_init>
 800175c:	2500      	movs	r5, #0
 800175e:	4e0a      	ldr	r6, [pc, #40]	; (8001788 <__libc_init_array+0x40>)
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <__libc_init_array+0x44>)
 8001762:	1ba4      	subs	r4, r4, r6
 8001764:	10a4      	asrs	r4, r4, #2
 8001766:	42a5      	cmp	r5, r4
 8001768:	d105      	bne.n	8001776 <__libc_init_array+0x2e>
 800176a:	bd70      	pop	{r4, r5, r6, pc}
 800176c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001770:	4798      	blx	r3
 8001772:	3501      	adds	r5, #1
 8001774:	e7ee      	b.n	8001754 <__libc_init_array+0xc>
 8001776:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800177a:	4798      	blx	r3
 800177c:	3501      	adds	r5, #1
 800177e:	e7f2      	b.n	8001766 <__libc_init_array+0x1e>
 8001780:	0800201c 	.word	0x0800201c
 8001784:	0800201c 	.word	0x0800201c
 8001788:	0800201c 	.word	0x0800201c
 800178c:	08002020 	.word	0x08002020

08001790 <siprintf>:
 8001790:	b40e      	push	{r1, r2, r3}
 8001792:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001796:	b500      	push	{lr}
 8001798:	b09c      	sub	sp, #112	; 0x70
 800179a:	ab1d      	add	r3, sp, #116	; 0x74
 800179c:	9002      	str	r0, [sp, #8]
 800179e:	9006      	str	r0, [sp, #24]
 80017a0:	9107      	str	r1, [sp, #28]
 80017a2:	9104      	str	r1, [sp, #16]
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <siprintf+0x38>)
 80017a6:	4909      	ldr	r1, [pc, #36]	; (80017cc <siprintf+0x3c>)
 80017a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80017ac:	9105      	str	r1, [sp, #20]
 80017ae:	6800      	ldr	r0, [r0, #0]
 80017b0:	a902      	add	r1, sp, #8
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	f000 f8e6 	bl	8001984 <_svfiprintf_r>
 80017b8:	2200      	movs	r2, #0
 80017ba:	9b02      	ldr	r3, [sp, #8]
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	b01c      	add	sp, #112	; 0x70
 80017c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80017c4:	b003      	add	sp, #12
 80017c6:	4770      	bx	lr
 80017c8:	20000020 	.word	0x20000020
 80017cc:	ffff0208 	.word	0xffff0208

080017d0 <_malloc_r>:
 80017d0:	b570      	push	{r4, r5, r6, lr}
 80017d2:	1ccd      	adds	r5, r1, #3
 80017d4:	f025 0503 	bic.w	r5, r5, #3
 80017d8:	3508      	adds	r5, #8
 80017da:	2d0c      	cmp	r5, #12
 80017dc:	bf38      	it	cc
 80017de:	250c      	movcc	r5, #12
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	4606      	mov	r6, r0
 80017e4:	db01      	blt.n	80017ea <_malloc_r+0x1a>
 80017e6:	42a9      	cmp	r1, r5
 80017e8:	d903      	bls.n	80017f2 <_malloc_r+0x22>
 80017ea:	230c      	movs	r3, #12
 80017ec:	6033      	str	r3, [r6, #0]
 80017ee:	2000      	movs	r0, #0
 80017f0:	bd70      	pop	{r4, r5, r6, pc}
 80017f2:	f000 fb89 	bl	8001f08 <__malloc_lock>
 80017f6:	4a21      	ldr	r2, [pc, #132]	; (800187c <_malloc_r+0xac>)
 80017f8:	6814      	ldr	r4, [r2, #0]
 80017fa:	4621      	mov	r1, r4
 80017fc:	b991      	cbnz	r1, 8001824 <_malloc_r+0x54>
 80017fe:	4c20      	ldr	r4, [pc, #128]	; (8001880 <_malloc_r+0xb0>)
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	b91b      	cbnz	r3, 800180c <_malloc_r+0x3c>
 8001804:	4630      	mov	r0, r6
 8001806:	f000 fb3d 	bl	8001e84 <_sbrk_r>
 800180a:	6020      	str	r0, [r4, #0]
 800180c:	4629      	mov	r1, r5
 800180e:	4630      	mov	r0, r6
 8001810:	f000 fb38 	bl	8001e84 <_sbrk_r>
 8001814:	1c43      	adds	r3, r0, #1
 8001816:	d124      	bne.n	8001862 <_malloc_r+0x92>
 8001818:	230c      	movs	r3, #12
 800181a:	4630      	mov	r0, r6
 800181c:	6033      	str	r3, [r6, #0]
 800181e:	f000 fb74 	bl	8001f0a <__malloc_unlock>
 8001822:	e7e4      	b.n	80017ee <_malloc_r+0x1e>
 8001824:	680b      	ldr	r3, [r1, #0]
 8001826:	1b5b      	subs	r3, r3, r5
 8001828:	d418      	bmi.n	800185c <_malloc_r+0x8c>
 800182a:	2b0b      	cmp	r3, #11
 800182c:	d90f      	bls.n	800184e <_malloc_r+0x7e>
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	18cc      	adds	r4, r1, r3
 8001832:	50cd      	str	r5, [r1, r3]
 8001834:	4630      	mov	r0, r6
 8001836:	f000 fb68 	bl	8001f0a <__malloc_unlock>
 800183a:	f104 000b 	add.w	r0, r4, #11
 800183e:	1d23      	adds	r3, r4, #4
 8001840:	f020 0007 	bic.w	r0, r0, #7
 8001844:	1ac3      	subs	r3, r0, r3
 8001846:	d0d3      	beq.n	80017f0 <_malloc_r+0x20>
 8001848:	425a      	negs	r2, r3
 800184a:	50e2      	str	r2, [r4, r3]
 800184c:	e7d0      	b.n	80017f0 <_malloc_r+0x20>
 800184e:	684b      	ldr	r3, [r1, #4]
 8001850:	428c      	cmp	r4, r1
 8001852:	bf16      	itet	ne
 8001854:	6063      	strne	r3, [r4, #4]
 8001856:	6013      	streq	r3, [r2, #0]
 8001858:	460c      	movne	r4, r1
 800185a:	e7eb      	b.n	8001834 <_malloc_r+0x64>
 800185c:	460c      	mov	r4, r1
 800185e:	6849      	ldr	r1, [r1, #4]
 8001860:	e7cc      	b.n	80017fc <_malloc_r+0x2c>
 8001862:	1cc4      	adds	r4, r0, #3
 8001864:	f024 0403 	bic.w	r4, r4, #3
 8001868:	42a0      	cmp	r0, r4
 800186a:	d005      	beq.n	8001878 <_malloc_r+0xa8>
 800186c:	1a21      	subs	r1, r4, r0
 800186e:	4630      	mov	r0, r6
 8001870:	f000 fb08 	bl	8001e84 <_sbrk_r>
 8001874:	3001      	adds	r0, #1
 8001876:	d0cf      	beq.n	8001818 <_malloc_r+0x48>
 8001878:	6025      	str	r5, [r4, #0]
 800187a:	e7db      	b.n	8001834 <_malloc_r+0x64>
 800187c:	200000ac 	.word	0x200000ac
 8001880:	200000b0 	.word	0x200000b0

08001884 <_realloc_r>:
 8001884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001886:	4607      	mov	r7, r0
 8001888:	4614      	mov	r4, r2
 800188a:	460e      	mov	r6, r1
 800188c:	b921      	cbnz	r1, 8001898 <_realloc_r+0x14>
 800188e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001892:	4611      	mov	r1, r2
 8001894:	f7ff bf9c 	b.w	80017d0 <_malloc_r>
 8001898:	b922      	cbnz	r2, 80018a4 <_realloc_r+0x20>
 800189a:	f000 fb37 	bl	8001f0c <_free_r>
 800189e:	4625      	mov	r5, r4
 80018a0:	4628      	mov	r0, r5
 80018a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a4:	f000 fb7e 	bl	8001fa4 <_malloc_usable_size_r>
 80018a8:	42a0      	cmp	r0, r4
 80018aa:	d20f      	bcs.n	80018cc <_realloc_r+0x48>
 80018ac:	4621      	mov	r1, r4
 80018ae:	4638      	mov	r0, r7
 80018b0:	f7ff ff8e 	bl	80017d0 <_malloc_r>
 80018b4:	4605      	mov	r5, r0
 80018b6:	2800      	cmp	r0, #0
 80018b8:	d0f2      	beq.n	80018a0 <_realloc_r+0x1c>
 80018ba:	4631      	mov	r1, r6
 80018bc:	4622      	mov	r2, r4
 80018be:	f000 faff 	bl	8001ec0 <memcpy>
 80018c2:	4631      	mov	r1, r6
 80018c4:	4638      	mov	r0, r7
 80018c6:	f000 fb21 	bl	8001f0c <_free_r>
 80018ca:	e7e9      	b.n	80018a0 <_realloc_r+0x1c>
 80018cc:	4635      	mov	r5, r6
 80018ce:	e7e7      	b.n	80018a0 <_realloc_r+0x1c>

080018d0 <__ssputs_r>:
 80018d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018d4:	688e      	ldr	r6, [r1, #8]
 80018d6:	4682      	mov	sl, r0
 80018d8:	429e      	cmp	r6, r3
 80018da:	460c      	mov	r4, r1
 80018dc:	4690      	mov	r8, r2
 80018de:	4699      	mov	r9, r3
 80018e0:	d837      	bhi.n	8001952 <__ssputs_r+0x82>
 80018e2:	898a      	ldrh	r2, [r1, #12]
 80018e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80018e8:	d031      	beq.n	800194e <__ssputs_r+0x7e>
 80018ea:	2302      	movs	r3, #2
 80018ec:	6825      	ldr	r5, [r4, #0]
 80018ee:	6909      	ldr	r1, [r1, #16]
 80018f0:	1a6f      	subs	r7, r5, r1
 80018f2:	6965      	ldr	r5, [r4, #20]
 80018f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80018f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80018fc:	f109 0301 	add.w	r3, r9, #1
 8001900:	443b      	add	r3, r7
 8001902:	429d      	cmp	r5, r3
 8001904:	bf38      	it	cc
 8001906:	461d      	movcc	r5, r3
 8001908:	0553      	lsls	r3, r2, #21
 800190a:	d530      	bpl.n	800196e <__ssputs_r+0x9e>
 800190c:	4629      	mov	r1, r5
 800190e:	f7ff ff5f 	bl	80017d0 <_malloc_r>
 8001912:	4606      	mov	r6, r0
 8001914:	b950      	cbnz	r0, 800192c <__ssputs_r+0x5c>
 8001916:	230c      	movs	r3, #12
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f8ca 3000 	str.w	r3, [sl]
 8001920:	89a3      	ldrh	r3, [r4, #12]
 8001922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001926:	81a3      	strh	r3, [r4, #12]
 8001928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800192c:	463a      	mov	r2, r7
 800192e:	6921      	ldr	r1, [r4, #16]
 8001930:	f000 fac6 	bl	8001ec0 <memcpy>
 8001934:	89a3      	ldrh	r3, [r4, #12]
 8001936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800193a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193e:	81a3      	strh	r3, [r4, #12]
 8001940:	6126      	str	r6, [r4, #16]
 8001942:	443e      	add	r6, r7
 8001944:	6026      	str	r6, [r4, #0]
 8001946:	464e      	mov	r6, r9
 8001948:	6165      	str	r5, [r4, #20]
 800194a:	1bed      	subs	r5, r5, r7
 800194c:	60a5      	str	r5, [r4, #8]
 800194e:	454e      	cmp	r6, r9
 8001950:	d900      	bls.n	8001954 <__ssputs_r+0x84>
 8001952:	464e      	mov	r6, r9
 8001954:	4632      	mov	r2, r6
 8001956:	4641      	mov	r1, r8
 8001958:	6820      	ldr	r0, [r4, #0]
 800195a:	f000 fabc 	bl	8001ed6 <memmove>
 800195e:	68a3      	ldr	r3, [r4, #8]
 8001960:	2000      	movs	r0, #0
 8001962:	1b9b      	subs	r3, r3, r6
 8001964:	60a3      	str	r3, [r4, #8]
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	441e      	add	r6, r3
 800196a:	6026      	str	r6, [r4, #0]
 800196c:	e7dc      	b.n	8001928 <__ssputs_r+0x58>
 800196e:	462a      	mov	r2, r5
 8001970:	f7ff ff88 	bl	8001884 <_realloc_r>
 8001974:	4606      	mov	r6, r0
 8001976:	2800      	cmp	r0, #0
 8001978:	d1e2      	bne.n	8001940 <__ssputs_r+0x70>
 800197a:	6921      	ldr	r1, [r4, #16]
 800197c:	4650      	mov	r0, sl
 800197e:	f000 fac5 	bl	8001f0c <_free_r>
 8001982:	e7c8      	b.n	8001916 <__ssputs_r+0x46>

08001984 <_svfiprintf_r>:
 8001984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001988:	461d      	mov	r5, r3
 800198a:	898b      	ldrh	r3, [r1, #12]
 800198c:	b09d      	sub	sp, #116	; 0x74
 800198e:	061f      	lsls	r7, r3, #24
 8001990:	4680      	mov	r8, r0
 8001992:	460c      	mov	r4, r1
 8001994:	4616      	mov	r6, r2
 8001996:	d50f      	bpl.n	80019b8 <_svfiprintf_r+0x34>
 8001998:	690b      	ldr	r3, [r1, #16]
 800199a:	b96b      	cbnz	r3, 80019b8 <_svfiprintf_r+0x34>
 800199c:	2140      	movs	r1, #64	; 0x40
 800199e:	f7ff ff17 	bl	80017d0 <_malloc_r>
 80019a2:	6020      	str	r0, [r4, #0]
 80019a4:	6120      	str	r0, [r4, #16]
 80019a6:	b928      	cbnz	r0, 80019b4 <_svfiprintf_r+0x30>
 80019a8:	230c      	movs	r3, #12
 80019aa:	f8c8 3000 	str.w	r3, [r8]
 80019ae:	f04f 30ff 	mov.w	r0, #4294967295
 80019b2:	e0c8      	b.n	8001b46 <_svfiprintf_r+0x1c2>
 80019b4:	2340      	movs	r3, #64	; 0x40
 80019b6:	6163      	str	r3, [r4, #20]
 80019b8:	2300      	movs	r3, #0
 80019ba:	9309      	str	r3, [sp, #36]	; 0x24
 80019bc:	2320      	movs	r3, #32
 80019be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019c2:	2330      	movs	r3, #48	; 0x30
 80019c4:	f04f 0b01 	mov.w	fp, #1
 80019c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019cc:	9503      	str	r5, [sp, #12]
 80019ce:	4637      	mov	r7, r6
 80019d0:	463d      	mov	r5, r7
 80019d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80019d6:	b10b      	cbz	r3, 80019dc <_svfiprintf_r+0x58>
 80019d8:	2b25      	cmp	r3, #37	; 0x25
 80019da:	d13e      	bne.n	8001a5a <_svfiprintf_r+0xd6>
 80019dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80019e0:	d00b      	beq.n	80019fa <_svfiprintf_r+0x76>
 80019e2:	4653      	mov	r3, sl
 80019e4:	4632      	mov	r2, r6
 80019e6:	4621      	mov	r1, r4
 80019e8:	4640      	mov	r0, r8
 80019ea:	f7ff ff71 	bl	80018d0 <__ssputs_r>
 80019ee:	3001      	adds	r0, #1
 80019f0:	f000 80a4 	beq.w	8001b3c <_svfiprintf_r+0x1b8>
 80019f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019f6:	4453      	add	r3, sl
 80019f8:	9309      	str	r3, [sp, #36]	; 0x24
 80019fa:	783b      	ldrb	r3, [r7, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 809d 	beq.w	8001b3c <_svfiprintf_r+0x1b8>
 8001a02:	2300      	movs	r3, #0
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a0c:	9304      	str	r3, [sp, #16]
 8001a0e:	9307      	str	r3, [sp, #28]
 8001a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a14:	931a      	str	r3, [sp, #104]	; 0x68
 8001a16:	462f      	mov	r7, r5
 8001a18:	2205      	movs	r2, #5
 8001a1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001a1e:	4850      	ldr	r0, [pc, #320]	; (8001b60 <_svfiprintf_r+0x1dc>)
 8001a20:	f000 fa40 	bl	8001ea4 <memchr>
 8001a24:	9b04      	ldr	r3, [sp, #16]
 8001a26:	b9d0      	cbnz	r0, 8001a5e <_svfiprintf_r+0xda>
 8001a28:	06d9      	lsls	r1, r3, #27
 8001a2a:	bf44      	itt	mi
 8001a2c:	2220      	movmi	r2, #32
 8001a2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a32:	071a      	lsls	r2, r3, #28
 8001a34:	bf44      	itt	mi
 8001a36:	222b      	movmi	r2, #43	; 0x2b
 8001a38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a3c:	782a      	ldrb	r2, [r5, #0]
 8001a3e:	2a2a      	cmp	r2, #42	; 0x2a
 8001a40:	d015      	beq.n	8001a6e <_svfiprintf_r+0xea>
 8001a42:	462f      	mov	r7, r5
 8001a44:	2000      	movs	r0, #0
 8001a46:	250a      	movs	r5, #10
 8001a48:	9a07      	ldr	r2, [sp, #28]
 8001a4a:	4639      	mov	r1, r7
 8001a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a50:	3b30      	subs	r3, #48	; 0x30
 8001a52:	2b09      	cmp	r3, #9
 8001a54:	d94d      	bls.n	8001af2 <_svfiprintf_r+0x16e>
 8001a56:	b1b8      	cbz	r0, 8001a88 <_svfiprintf_r+0x104>
 8001a58:	e00f      	b.n	8001a7a <_svfiprintf_r+0xf6>
 8001a5a:	462f      	mov	r7, r5
 8001a5c:	e7b8      	b.n	80019d0 <_svfiprintf_r+0x4c>
 8001a5e:	4a40      	ldr	r2, [pc, #256]	; (8001b60 <_svfiprintf_r+0x1dc>)
 8001a60:	463d      	mov	r5, r7
 8001a62:	1a80      	subs	r0, r0, r2
 8001a64:	fa0b f000 	lsl.w	r0, fp, r0
 8001a68:	4318      	orrs	r0, r3
 8001a6a:	9004      	str	r0, [sp, #16]
 8001a6c:	e7d3      	b.n	8001a16 <_svfiprintf_r+0x92>
 8001a6e:	9a03      	ldr	r2, [sp, #12]
 8001a70:	1d11      	adds	r1, r2, #4
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	9103      	str	r1, [sp, #12]
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	db01      	blt.n	8001a7e <_svfiprintf_r+0xfa>
 8001a7a:	9207      	str	r2, [sp, #28]
 8001a7c:	e004      	b.n	8001a88 <_svfiprintf_r+0x104>
 8001a7e:	4252      	negs	r2, r2
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	9207      	str	r2, [sp, #28]
 8001a86:	9304      	str	r3, [sp, #16]
 8001a88:	783b      	ldrb	r3, [r7, #0]
 8001a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8001a8c:	d10c      	bne.n	8001aa8 <_svfiprintf_r+0x124>
 8001a8e:	787b      	ldrb	r3, [r7, #1]
 8001a90:	2b2a      	cmp	r3, #42	; 0x2a
 8001a92:	d133      	bne.n	8001afc <_svfiprintf_r+0x178>
 8001a94:	9b03      	ldr	r3, [sp, #12]
 8001a96:	3702      	adds	r7, #2
 8001a98:	1d1a      	adds	r2, r3, #4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	9203      	str	r2, [sp, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bfb8      	it	lt
 8001aa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8001aa6:	9305      	str	r3, [sp, #20]
 8001aa8:	4d2e      	ldr	r5, [pc, #184]	; (8001b64 <_svfiprintf_r+0x1e0>)
 8001aaa:	2203      	movs	r2, #3
 8001aac:	7839      	ldrb	r1, [r7, #0]
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f000 f9f8 	bl	8001ea4 <memchr>
 8001ab4:	b138      	cbz	r0, 8001ac6 <_svfiprintf_r+0x142>
 8001ab6:	2340      	movs	r3, #64	; 0x40
 8001ab8:	1b40      	subs	r0, r0, r5
 8001aba:	fa03 f000 	lsl.w	r0, r3, r0
 8001abe:	9b04      	ldr	r3, [sp, #16]
 8001ac0:	3701      	adds	r7, #1
 8001ac2:	4303      	orrs	r3, r0
 8001ac4:	9304      	str	r3, [sp, #16]
 8001ac6:	7839      	ldrb	r1, [r7, #0]
 8001ac8:	2206      	movs	r2, #6
 8001aca:	4827      	ldr	r0, [pc, #156]	; (8001b68 <_svfiprintf_r+0x1e4>)
 8001acc:	1c7e      	adds	r6, r7, #1
 8001ace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ad2:	f000 f9e7 	bl	8001ea4 <memchr>
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d038      	beq.n	8001b4c <_svfiprintf_r+0x1c8>
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <_svfiprintf_r+0x1e8>)
 8001adc:	bb13      	cbnz	r3, 8001b24 <_svfiprintf_r+0x1a0>
 8001ade:	9b03      	ldr	r3, [sp, #12]
 8001ae0:	3307      	adds	r3, #7
 8001ae2:	f023 0307 	bic.w	r3, r3, #7
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	9303      	str	r3, [sp, #12]
 8001aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001aec:	444b      	add	r3, r9
 8001aee:	9309      	str	r3, [sp, #36]	; 0x24
 8001af0:	e76d      	b.n	80019ce <_svfiprintf_r+0x4a>
 8001af2:	fb05 3202 	mla	r2, r5, r2, r3
 8001af6:	2001      	movs	r0, #1
 8001af8:	460f      	mov	r7, r1
 8001afa:	e7a6      	b.n	8001a4a <_svfiprintf_r+0xc6>
 8001afc:	2300      	movs	r3, #0
 8001afe:	250a      	movs	r5, #10
 8001b00:	4619      	mov	r1, r3
 8001b02:	3701      	adds	r7, #1
 8001b04:	9305      	str	r3, [sp, #20]
 8001b06:	4638      	mov	r0, r7
 8001b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b0c:	3a30      	subs	r2, #48	; 0x30
 8001b0e:	2a09      	cmp	r2, #9
 8001b10:	d903      	bls.n	8001b1a <_svfiprintf_r+0x196>
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0c8      	beq.n	8001aa8 <_svfiprintf_r+0x124>
 8001b16:	9105      	str	r1, [sp, #20]
 8001b18:	e7c6      	b.n	8001aa8 <_svfiprintf_r+0x124>
 8001b1a:	fb05 2101 	mla	r1, r5, r1, r2
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4607      	mov	r7, r0
 8001b22:	e7f0      	b.n	8001b06 <_svfiprintf_r+0x182>
 8001b24:	ab03      	add	r3, sp, #12
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4622      	mov	r2, r4
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <_svfiprintf_r+0x1ec>)
 8001b2c:	a904      	add	r1, sp, #16
 8001b2e:	4640      	mov	r0, r8
 8001b30:	f3af 8000 	nop.w
 8001b34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001b38:	4681      	mov	r9, r0
 8001b3a:	d1d6      	bne.n	8001aea <_svfiprintf_r+0x166>
 8001b3c:	89a3      	ldrh	r3, [r4, #12]
 8001b3e:	065b      	lsls	r3, r3, #25
 8001b40:	f53f af35 	bmi.w	80019ae <_svfiprintf_r+0x2a>
 8001b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b46:	b01d      	add	sp, #116	; 0x74
 8001b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b4c:	ab03      	add	r3, sp, #12
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4622      	mov	r2, r4
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <_svfiprintf_r+0x1ec>)
 8001b54:	a904      	add	r1, sp, #16
 8001b56:	4640      	mov	r0, r8
 8001b58:	f000 f882 	bl	8001c60 <_printf_i>
 8001b5c:	e7ea      	b.n	8001b34 <_svfiprintf_r+0x1b0>
 8001b5e:	bf00      	nop
 8001b60:	08001fe7 	.word	0x08001fe7
 8001b64:	08001fed 	.word	0x08001fed
 8001b68:	08001ff1 	.word	0x08001ff1
 8001b6c:	00000000 	.word	0x00000000
 8001b70:	080018d1 	.word	0x080018d1

08001b74 <_printf_common>:
 8001b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b78:	4691      	mov	r9, r2
 8001b7a:	461f      	mov	r7, r3
 8001b7c:	688a      	ldr	r2, [r1, #8]
 8001b7e:	690b      	ldr	r3, [r1, #16]
 8001b80:	4606      	mov	r6, r0
 8001b82:	4293      	cmp	r3, r2
 8001b84:	bfb8      	it	lt
 8001b86:	4613      	movlt	r3, r2
 8001b88:	f8c9 3000 	str.w	r3, [r9]
 8001b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b90:	460c      	mov	r4, r1
 8001b92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b96:	b112      	cbz	r2, 8001b9e <_printf_common+0x2a>
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f8c9 3000 	str.w	r3, [r9]
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	0699      	lsls	r1, r3, #26
 8001ba2:	bf42      	ittt	mi
 8001ba4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ba8:	3302      	addmi	r3, #2
 8001baa:	f8c9 3000 	strmi.w	r3, [r9]
 8001bae:	6825      	ldr	r5, [r4, #0]
 8001bb0:	f015 0506 	ands.w	r5, r5, #6
 8001bb4:	d107      	bne.n	8001bc6 <_printf_common+0x52>
 8001bb6:	f104 0a19 	add.w	sl, r4, #25
 8001bba:	68e3      	ldr	r3, [r4, #12]
 8001bbc:	f8d9 2000 	ldr.w	r2, [r9]
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	42ab      	cmp	r3, r5
 8001bc4:	dc29      	bgt.n	8001c1a <_printf_common+0xa6>
 8001bc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	3300      	adds	r3, #0
 8001bce:	bf18      	it	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	0692      	lsls	r2, r2, #26
 8001bd4:	d42e      	bmi.n	8001c34 <_printf_common+0xc0>
 8001bd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bda:	4639      	mov	r1, r7
 8001bdc:	4630      	mov	r0, r6
 8001bde:	47c0      	blx	r8
 8001be0:	3001      	adds	r0, #1
 8001be2:	d021      	beq.n	8001c28 <_printf_common+0xb4>
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	68e5      	ldr	r5, [r4, #12]
 8001be8:	f003 0306 	and.w	r3, r3, #6
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	bf18      	it	ne
 8001bf0:	2500      	movne	r5, #0
 8001bf2:	f8d9 2000 	ldr.w	r2, [r9]
 8001bf6:	f04f 0900 	mov.w	r9, #0
 8001bfa:	bf08      	it	eq
 8001bfc:	1aad      	subeq	r5, r5, r2
 8001bfe:	68a3      	ldr	r3, [r4, #8]
 8001c00:	6922      	ldr	r2, [r4, #16]
 8001c02:	bf08      	it	eq
 8001c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	bfc4      	itt	gt
 8001c0c:	1a9b      	subgt	r3, r3, r2
 8001c0e:	18ed      	addgt	r5, r5, r3
 8001c10:	341a      	adds	r4, #26
 8001c12:	454d      	cmp	r5, r9
 8001c14:	d11a      	bne.n	8001c4c <_printf_common+0xd8>
 8001c16:	2000      	movs	r0, #0
 8001c18:	e008      	b.n	8001c2c <_printf_common+0xb8>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	4652      	mov	r2, sl
 8001c1e:	4639      	mov	r1, r7
 8001c20:	4630      	mov	r0, r6
 8001c22:	47c0      	blx	r8
 8001c24:	3001      	adds	r0, #1
 8001c26:	d103      	bne.n	8001c30 <_printf_common+0xbc>
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c30:	3501      	adds	r5, #1
 8001c32:	e7c2      	b.n	8001bba <_printf_common+0x46>
 8001c34:	2030      	movs	r0, #48	; 0x30
 8001c36:	18e1      	adds	r1, r4, r3
 8001c38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c42:	4422      	add	r2, r4
 8001c44:	3302      	adds	r3, #2
 8001c46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c4a:	e7c4      	b.n	8001bd6 <_printf_common+0x62>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	4622      	mov	r2, r4
 8001c50:	4639      	mov	r1, r7
 8001c52:	4630      	mov	r0, r6
 8001c54:	47c0      	blx	r8
 8001c56:	3001      	adds	r0, #1
 8001c58:	d0e6      	beq.n	8001c28 <_printf_common+0xb4>
 8001c5a:	f109 0901 	add.w	r9, r9, #1
 8001c5e:	e7d8      	b.n	8001c12 <_printf_common+0x9e>

08001c60 <_printf_i>:
 8001c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001c68:	460c      	mov	r4, r1
 8001c6a:	7e09      	ldrb	r1, [r1, #24]
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	296e      	cmp	r1, #110	; 0x6e
 8001c70:	4617      	mov	r7, r2
 8001c72:	4606      	mov	r6, r0
 8001c74:	4698      	mov	r8, r3
 8001c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c78:	f000 80b3 	beq.w	8001de2 <_printf_i+0x182>
 8001c7c:	d822      	bhi.n	8001cc4 <_printf_i+0x64>
 8001c7e:	2963      	cmp	r1, #99	; 0x63
 8001c80:	d036      	beq.n	8001cf0 <_printf_i+0x90>
 8001c82:	d80a      	bhi.n	8001c9a <_printf_i+0x3a>
 8001c84:	2900      	cmp	r1, #0
 8001c86:	f000 80b9 	beq.w	8001dfc <_printf_i+0x19c>
 8001c8a:	2958      	cmp	r1, #88	; 0x58
 8001c8c:	f000 8083 	beq.w	8001d96 <_printf_i+0x136>
 8001c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001c98:	e032      	b.n	8001d00 <_printf_i+0xa0>
 8001c9a:	2964      	cmp	r1, #100	; 0x64
 8001c9c:	d001      	beq.n	8001ca2 <_printf_i+0x42>
 8001c9e:	2969      	cmp	r1, #105	; 0x69
 8001ca0:	d1f6      	bne.n	8001c90 <_printf_i+0x30>
 8001ca2:	6820      	ldr	r0, [r4, #0]
 8001ca4:	6813      	ldr	r3, [r2, #0]
 8001ca6:	0605      	lsls	r5, r0, #24
 8001ca8:	f103 0104 	add.w	r1, r3, #4
 8001cac:	d52a      	bpl.n	8001d04 <_printf_i+0xa4>
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6011      	str	r1, [r2, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da03      	bge.n	8001cbe <_printf_i+0x5e>
 8001cb6:	222d      	movs	r2, #45	; 0x2d
 8001cb8:	425b      	negs	r3, r3
 8001cba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001cbe:	486f      	ldr	r0, [pc, #444]	; (8001e7c <_printf_i+0x21c>)
 8001cc0:	220a      	movs	r2, #10
 8001cc2:	e039      	b.n	8001d38 <_printf_i+0xd8>
 8001cc4:	2973      	cmp	r1, #115	; 0x73
 8001cc6:	f000 809d 	beq.w	8001e04 <_printf_i+0x1a4>
 8001cca:	d808      	bhi.n	8001cde <_printf_i+0x7e>
 8001ccc:	296f      	cmp	r1, #111	; 0x6f
 8001cce:	d020      	beq.n	8001d12 <_printf_i+0xb2>
 8001cd0:	2970      	cmp	r1, #112	; 0x70
 8001cd2:	d1dd      	bne.n	8001c90 <_printf_i+0x30>
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	f043 0320 	orr.w	r3, r3, #32
 8001cda:	6023      	str	r3, [r4, #0]
 8001cdc:	e003      	b.n	8001ce6 <_printf_i+0x86>
 8001cde:	2975      	cmp	r1, #117	; 0x75
 8001ce0:	d017      	beq.n	8001d12 <_printf_i+0xb2>
 8001ce2:	2978      	cmp	r1, #120	; 0x78
 8001ce4:	d1d4      	bne.n	8001c90 <_printf_i+0x30>
 8001ce6:	2378      	movs	r3, #120	; 0x78
 8001ce8:	4865      	ldr	r0, [pc, #404]	; (8001e80 <_printf_i+0x220>)
 8001cea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cee:	e055      	b.n	8001d9c <_printf_i+0x13c>
 8001cf0:	6813      	ldr	r3, [r2, #0]
 8001cf2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cf6:	1d19      	adds	r1, r3, #4
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6011      	str	r1, [r2, #0]
 8001cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d00:	2301      	movs	r3, #1
 8001d02:	e08c      	b.n	8001e1e <_printf_i+0x1be>
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d0a:	6011      	str	r1, [r2, #0]
 8001d0c:	bf18      	it	ne
 8001d0e:	b21b      	sxthne	r3, r3
 8001d10:	e7cf      	b.n	8001cb2 <_printf_i+0x52>
 8001d12:	6813      	ldr	r3, [r2, #0]
 8001d14:	6825      	ldr	r5, [r4, #0]
 8001d16:	1d18      	adds	r0, r3, #4
 8001d18:	6010      	str	r0, [r2, #0]
 8001d1a:	0628      	lsls	r0, r5, #24
 8001d1c:	d501      	bpl.n	8001d22 <_printf_i+0xc2>
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	e002      	b.n	8001d28 <_printf_i+0xc8>
 8001d22:	0668      	lsls	r0, r5, #25
 8001d24:	d5fb      	bpl.n	8001d1e <_printf_i+0xbe>
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	296f      	cmp	r1, #111	; 0x6f
 8001d2a:	bf14      	ite	ne
 8001d2c:	220a      	movne	r2, #10
 8001d2e:	2208      	moveq	r2, #8
 8001d30:	4852      	ldr	r0, [pc, #328]	; (8001e7c <_printf_i+0x21c>)
 8001d32:	2100      	movs	r1, #0
 8001d34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d38:	6865      	ldr	r5, [r4, #4]
 8001d3a:	2d00      	cmp	r5, #0
 8001d3c:	60a5      	str	r5, [r4, #8]
 8001d3e:	f2c0 8095 	blt.w	8001e6c <_printf_i+0x20c>
 8001d42:	6821      	ldr	r1, [r4, #0]
 8001d44:	f021 0104 	bic.w	r1, r1, #4
 8001d48:	6021      	str	r1, [r4, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d13d      	bne.n	8001dca <_printf_i+0x16a>
 8001d4e:	2d00      	cmp	r5, #0
 8001d50:	f040 808e 	bne.w	8001e70 <_printf_i+0x210>
 8001d54:	4665      	mov	r5, ip
 8001d56:	2a08      	cmp	r2, #8
 8001d58:	d10b      	bne.n	8001d72 <_printf_i+0x112>
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	07db      	lsls	r3, r3, #31
 8001d5e:	d508      	bpl.n	8001d72 <_printf_i+0x112>
 8001d60:	6923      	ldr	r3, [r4, #16]
 8001d62:	6862      	ldr	r2, [r4, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	bfde      	ittt	le
 8001d68:	2330      	movle	r3, #48	; 0x30
 8001d6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d72:	ebac 0305 	sub.w	r3, ip, r5
 8001d76:	6123      	str	r3, [r4, #16]
 8001d78:	f8cd 8000 	str.w	r8, [sp]
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	aa03      	add	r2, sp, #12
 8001d80:	4621      	mov	r1, r4
 8001d82:	4630      	mov	r0, r6
 8001d84:	f7ff fef6 	bl	8001b74 <_printf_common>
 8001d88:	3001      	adds	r0, #1
 8001d8a:	d14d      	bne.n	8001e28 <_printf_i+0x1c8>
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	b005      	add	sp, #20
 8001d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d96:	4839      	ldr	r0, [pc, #228]	; (8001e7c <_printf_i+0x21c>)
 8001d98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001d9c:	6813      	ldr	r3, [r2, #0]
 8001d9e:	6821      	ldr	r1, [r4, #0]
 8001da0:	1d1d      	adds	r5, r3, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6015      	str	r5, [r2, #0]
 8001da6:	060a      	lsls	r2, r1, #24
 8001da8:	d50b      	bpl.n	8001dc2 <_printf_i+0x162>
 8001daa:	07ca      	lsls	r2, r1, #31
 8001dac:	bf44      	itt	mi
 8001dae:	f041 0120 	orrmi.w	r1, r1, #32
 8001db2:	6021      	strmi	r1, [r4, #0]
 8001db4:	b91b      	cbnz	r3, 8001dbe <_printf_i+0x15e>
 8001db6:	6822      	ldr	r2, [r4, #0]
 8001db8:	f022 0220 	bic.w	r2, r2, #32
 8001dbc:	6022      	str	r2, [r4, #0]
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	e7b7      	b.n	8001d32 <_printf_i+0xd2>
 8001dc2:	064d      	lsls	r5, r1, #25
 8001dc4:	bf48      	it	mi
 8001dc6:	b29b      	uxthmi	r3, r3
 8001dc8:	e7ef      	b.n	8001daa <_printf_i+0x14a>
 8001dca:	4665      	mov	r5, ip
 8001dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dd0:	fb02 3311 	mls	r3, r2, r1, r3
 8001dd4:	5cc3      	ldrb	r3, [r0, r3]
 8001dd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001dda:	460b      	mov	r3, r1
 8001ddc:	2900      	cmp	r1, #0
 8001dde:	d1f5      	bne.n	8001dcc <_printf_i+0x16c>
 8001de0:	e7b9      	b.n	8001d56 <_printf_i+0xf6>
 8001de2:	6813      	ldr	r3, [r2, #0]
 8001de4:	6825      	ldr	r5, [r4, #0]
 8001de6:	1d18      	adds	r0, r3, #4
 8001de8:	6961      	ldr	r1, [r4, #20]
 8001dea:	6010      	str	r0, [r2, #0]
 8001dec:	0628      	lsls	r0, r5, #24
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	d501      	bpl.n	8001df6 <_printf_i+0x196>
 8001df2:	6019      	str	r1, [r3, #0]
 8001df4:	e002      	b.n	8001dfc <_printf_i+0x19c>
 8001df6:	066a      	lsls	r2, r5, #25
 8001df8:	d5fb      	bpl.n	8001df2 <_printf_i+0x192>
 8001dfa:	8019      	strh	r1, [r3, #0]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	4665      	mov	r5, ip
 8001e00:	6123      	str	r3, [r4, #16]
 8001e02:	e7b9      	b.n	8001d78 <_printf_i+0x118>
 8001e04:	6813      	ldr	r3, [r2, #0]
 8001e06:	1d19      	adds	r1, r3, #4
 8001e08:	6011      	str	r1, [r2, #0]
 8001e0a:	681d      	ldr	r5, [r3, #0]
 8001e0c:	6862      	ldr	r2, [r4, #4]
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4628      	mov	r0, r5
 8001e12:	f000 f847 	bl	8001ea4 <memchr>
 8001e16:	b108      	cbz	r0, 8001e1c <_printf_i+0x1bc>
 8001e18:	1b40      	subs	r0, r0, r5
 8001e1a:	6060      	str	r0, [r4, #4]
 8001e1c:	6863      	ldr	r3, [r4, #4]
 8001e1e:	6123      	str	r3, [r4, #16]
 8001e20:	2300      	movs	r3, #0
 8001e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e26:	e7a7      	b.n	8001d78 <_printf_i+0x118>
 8001e28:	6923      	ldr	r3, [r4, #16]
 8001e2a:	462a      	mov	r2, r5
 8001e2c:	4639      	mov	r1, r7
 8001e2e:	4630      	mov	r0, r6
 8001e30:	47c0      	blx	r8
 8001e32:	3001      	adds	r0, #1
 8001e34:	d0aa      	beq.n	8001d8c <_printf_i+0x12c>
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	079b      	lsls	r3, r3, #30
 8001e3a:	d413      	bmi.n	8001e64 <_printf_i+0x204>
 8001e3c:	68e0      	ldr	r0, [r4, #12]
 8001e3e:	9b03      	ldr	r3, [sp, #12]
 8001e40:	4298      	cmp	r0, r3
 8001e42:	bfb8      	it	lt
 8001e44:	4618      	movlt	r0, r3
 8001e46:	e7a3      	b.n	8001d90 <_printf_i+0x130>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	464a      	mov	r2, r9
 8001e4c:	4639      	mov	r1, r7
 8001e4e:	4630      	mov	r0, r6
 8001e50:	47c0      	blx	r8
 8001e52:	3001      	adds	r0, #1
 8001e54:	d09a      	beq.n	8001d8c <_printf_i+0x12c>
 8001e56:	3501      	adds	r5, #1
 8001e58:	68e3      	ldr	r3, [r4, #12]
 8001e5a:	9a03      	ldr	r2, [sp, #12]
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	42ab      	cmp	r3, r5
 8001e60:	dcf2      	bgt.n	8001e48 <_printf_i+0x1e8>
 8001e62:	e7eb      	b.n	8001e3c <_printf_i+0x1dc>
 8001e64:	2500      	movs	r5, #0
 8001e66:	f104 0919 	add.w	r9, r4, #25
 8001e6a:	e7f5      	b.n	8001e58 <_printf_i+0x1f8>
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1ac      	bne.n	8001dca <_printf_i+0x16a>
 8001e70:	7803      	ldrb	r3, [r0, #0]
 8001e72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e7a:	e76c      	b.n	8001d56 <_printf_i+0xf6>
 8001e7c:	08001ff8 	.word	0x08001ff8
 8001e80:	08002009 	.word	0x08002009

08001e84 <_sbrk_r>:
 8001e84:	b538      	push	{r3, r4, r5, lr}
 8001e86:	2300      	movs	r3, #0
 8001e88:	4c05      	ldr	r4, [pc, #20]	; (8001ea0 <_sbrk_r+0x1c>)
 8001e8a:	4605      	mov	r5, r0
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	6023      	str	r3, [r4, #0]
 8001e90:	f7fe fb62 	bl	8000558 <_sbrk>
 8001e94:	1c43      	adds	r3, r0, #1
 8001e96:	d102      	bne.n	8001e9e <_sbrk_r+0x1a>
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	b103      	cbz	r3, 8001e9e <_sbrk_r+0x1a>
 8001e9c:	602b      	str	r3, [r5, #0]
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ea0:	200000f0 	.word	0x200000f0

08001ea4 <memchr>:
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	b2c9      	uxtb	r1, r1
 8001ea8:	4402      	add	r2, r0
 8001eaa:	4290      	cmp	r0, r2
 8001eac:	4603      	mov	r3, r0
 8001eae:	d101      	bne.n	8001eb4 <memchr+0x10>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e003      	b.n	8001ebc <memchr+0x18>
 8001eb4:	781c      	ldrb	r4, [r3, #0]
 8001eb6:	3001      	adds	r0, #1
 8001eb8:	428c      	cmp	r4, r1
 8001eba:	d1f6      	bne.n	8001eaa <memchr+0x6>
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd10      	pop	{r4, pc}

08001ec0 <memcpy>:
 8001ec0:	b510      	push	{r4, lr}
 8001ec2:	1e43      	subs	r3, r0, #1
 8001ec4:	440a      	add	r2, r1
 8001ec6:	4291      	cmp	r1, r2
 8001ec8:	d100      	bne.n	8001ecc <memcpy+0xc>
 8001eca:	bd10      	pop	{r4, pc}
 8001ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ed4:	e7f7      	b.n	8001ec6 <memcpy+0x6>

08001ed6 <memmove>:
 8001ed6:	4288      	cmp	r0, r1
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	eb01 0302 	add.w	r3, r1, r2
 8001ede:	d807      	bhi.n	8001ef0 <memmove+0x1a>
 8001ee0:	1e42      	subs	r2, r0, #1
 8001ee2:	4299      	cmp	r1, r3
 8001ee4:	d00a      	beq.n	8001efc <memmove+0x26>
 8001ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001eea:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001eee:	e7f8      	b.n	8001ee2 <memmove+0xc>
 8001ef0:	4283      	cmp	r3, r0
 8001ef2:	d9f5      	bls.n	8001ee0 <memmove+0xa>
 8001ef4:	1881      	adds	r1, r0, r2
 8001ef6:	1ad2      	subs	r2, r2, r3
 8001ef8:	42d3      	cmn	r3, r2
 8001efa:	d100      	bne.n	8001efe <memmove+0x28>
 8001efc:	bd10      	pop	{r4, pc}
 8001efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001f06:	e7f7      	b.n	8001ef8 <memmove+0x22>

08001f08 <__malloc_lock>:
 8001f08:	4770      	bx	lr

08001f0a <__malloc_unlock>:
 8001f0a:	4770      	bx	lr

08001f0c <_free_r>:
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	4605      	mov	r5, r0
 8001f10:	2900      	cmp	r1, #0
 8001f12:	d043      	beq.n	8001f9c <_free_r+0x90>
 8001f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f18:	1f0c      	subs	r4, r1, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	bfb8      	it	lt
 8001f1e:	18e4      	addlt	r4, r4, r3
 8001f20:	f7ff fff2 	bl	8001f08 <__malloc_lock>
 8001f24:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <_free_r+0x94>)
 8001f26:	6813      	ldr	r3, [r2, #0]
 8001f28:	4610      	mov	r0, r2
 8001f2a:	b933      	cbnz	r3, 8001f3a <_free_r+0x2e>
 8001f2c:	6063      	str	r3, [r4, #4]
 8001f2e:	6014      	str	r4, [r2, #0]
 8001f30:	4628      	mov	r0, r5
 8001f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f36:	f7ff bfe8 	b.w	8001f0a <__malloc_unlock>
 8001f3a:	42a3      	cmp	r3, r4
 8001f3c:	d90b      	bls.n	8001f56 <_free_r+0x4a>
 8001f3e:	6821      	ldr	r1, [r4, #0]
 8001f40:	1862      	adds	r2, r4, r1
 8001f42:	4293      	cmp	r3, r2
 8001f44:	bf01      	itttt	eq
 8001f46:	681a      	ldreq	r2, [r3, #0]
 8001f48:	685b      	ldreq	r3, [r3, #4]
 8001f4a:	1852      	addeq	r2, r2, r1
 8001f4c:	6022      	streq	r2, [r4, #0]
 8001f4e:	6063      	str	r3, [r4, #4]
 8001f50:	6004      	str	r4, [r0, #0]
 8001f52:	e7ed      	b.n	8001f30 <_free_r+0x24>
 8001f54:	4613      	mov	r3, r2
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	b10a      	cbz	r2, 8001f5e <_free_r+0x52>
 8001f5a:	42a2      	cmp	r2, r4
 8001f5c:	d9fa      	bls.n	8001f54 <_free_r+0x48>
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	1858      	adds	r0, r3, r1
 8001f62:	42a0      	cmp	r0, r4
 8001f64:	d10b      	bne.n	8001f7e <_free_r+0x72>
 8001f66:	6820      	ldr	r0, [r4, #0]
 8001f68:	4401      	add	r1, r0
 8001f6a:	1858      	adds	r0, r3, r1
 8001f6c:	4282      	cmp	r2, r0
 8001f6e:	6019      	str	r1, [r3, #0]
 8001f70:	d1de      	bne.n	8001f30 <_free_r+0x24>
 8001f72:	6810      	ldr	r0, [r2, #0]
 8001f74:	6852      	ldr	r2, [r2, #4]
 8001f76:	4401      	add	r1, r0
 8001f78:	6019      	str	r1, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	e7d8      	b.n	8001f30 <_free_r+0x24>
 8001f7e:	d902      	bls.n	8001f86 <_free_r+0x7a>
 8001f80:	230c      	movs	r3, #12
 8001f82:	602b      	str	r3, [r5, #0]
 8001f84:	e7d4      	b.n	8001f30 <_free_r+0x24>
 8001f86:	6820      	ldr	r0, [r4, #0]
 8001f88:	1821      	adds	r1, r4, r0
 8001f8a:	428a      	cmp	r2, r1
 8001f8c:	bf01      	itttt	eq
 8001f8e:	6811      	ldreq	r1, [r2, #0]
 8001f90:	6852      	ldreq	r2, [r2, #4]
 8001f92:	1809      	addeq	r1, r1, r0
 8001f94:	6021      	streq	r1, [r4, #0]
 8001f96:	6062      	str	r2, [r4, #4]
 8001f98:	605c      	str	r4, [r3, #4]
 8001f9a:	e7c9      	b.n	8001f30 <_free_r+0x24>
 8001f9c:	bd38      	pop	{r3, r4, r5, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200000ac 	.word	0x200000ac

08001fa4 <_malloc_usable_size_r>:
 8001fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fa8:	1f18      	subs	r0, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bfbc      	itt	lt
 8001fae:	580b      	ldrlt	r3, [r1, r0]
 8001fb0:	18c0      	addlt	r0, r0, r3
 8001fb2:	4770      	bx	lr

08001fb4 <_init>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	bf00      	nop
 8001fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fba:	bc08      	pop	{r3}
 8001fbc:	469e      	mov	lr, r3
 8001fbe:	4770      	bx	lr

08001fc0 <_fini>:
 8001fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc2:	bf00      	nop
 8001fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc6:	bc08      	pop	{r3}
 8001fc8:	469e      	mov	lr, r3
 8001fca:	4770      	bx	lr
