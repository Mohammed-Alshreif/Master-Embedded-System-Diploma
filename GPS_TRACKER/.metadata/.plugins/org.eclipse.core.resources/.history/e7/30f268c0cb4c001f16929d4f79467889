/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Mohammed Adel Alshreif
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include "I2C_LCD.h"
#include "STM32_TIMERS_DRIVER.h"
#include "stm32f103c6_USART_SRIVER.h"
#include "math.h"
#include <string.h>
//=======================================================
#define clk 8000000                 //system clock
#define address 0x3f
#define EARTH_RADIUS 6371.0  // Earth's radius in kilometers
//=======================================================
char *token;
char * tokens[10];
unsigned char ch;
char string_data[50],GPS_data[50];
uint8_t tokens_count=0,COM_COUNT=0,data_flage=0,serial_flag=0,index1;
uint16_t GPS_data_COUNT=0,coma_count=0;
uint32_t Longitude,Latitude;
float deg_Longitude,deg_Latitude,Decimal_degrees_Latitude,Decimal_degrees_Longitude;

double lat_center  = 30.958;     // Center  latitude
double lon_Center  = 31.164;     // Center  longitude
double distance;
//=======================================================
void read_string ();
void GET_LOCATION();
double haversine(double lat1, double lon1, double lat2, double lon2);
double degrees_to_radians(double degrees);
//*******************************************************
//======================= -main- ========================
//*******************************************************
int main(void)
{
	delay(200, U_ms,8000000);
	I2C_LCD_Init(I2C1,address);
	I2C_LCD_write_string(I2C1,"SANDY",address);
	I2C_LCD_setcerser(I2C1, address,1,0);
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,clk);
	USART_READ_INTERRUPT_EN(USART1, read_string);
	pinmode(GPIOC, pin13, GPIO_MODE_OUTPUT_push_pull_Speed2);
	pinwrite(GPIOC, pin13,LOW);
	while(1){

		GET_LOCATION();
		distance = haversine(Decimal_degrees_Latitude, Decimal_degrees_Longitude, lat_center, lon_Center);
		Display();
	}
}
//*******************************************************
//==================== -READ_DATA- ======================
//*******************************************************
void read_string (){

	USART_READ(USART1,&ch);
	if(data_flage==0){
		if(ch=='$'){
			serial_flag=1;
			index1=0;
			pinwrite(GPIOC, pin13,LOW);
		}

		if(serial_flag==1){
			string_data[index1]=ch;
			index1++;

			if(ch==','){
				string_data[index1]=0;
				if(strncmp(string_data,"$GPRMC,",7)==0){
					pinwrite(GPIOC, pin13,HIGH);
					data_flage=1;
				}
				serial_flag=0;
				index1=0;
			}
		}
	}
	else{
		string_data[index1]=ch;
		index1++;
		if(ch==','){
			COM_COUNT++;
			if(COM_COUNT==5){
				string_data[index1]=0;
				strcpy(GPS_data,string_data);
				index1=0;
				COM_COUNT=0;
				data_flage=0;
			}
		}
	}

}
//*******************************************************
//==================== -Get Location- ===================
//*******************************************************

void GET_LOCATION(){
	// Get the first token
	token = strtok(GPS_data, ",");
	// Walk through other tokens
	tokens_count=0;
	while (token != NULL) {
		tokens[tokens_count++] = token;
		token=strtok(NULL, ",");
	}
	//3156.788
	Longitude=(int)atof(tokens[4])/100;//31
	Latitude=(int)atof(tokens[2])/100;
	deg_Longitude=(((float)atof(tokens[4])-Longitude*100)/60.0);//(3156.788-3100)=>>56.788/60.0
	deg_Latitude=(((float)atof(tokens[2])-Latitude*100)/60.0);
	Decimal_degrees_Longitude=Longitude+deg_Longitude;
	Decimal_degrees_Latitude=Latitude+deg_Latitude;
}
//*******************************************************
//==================== -Get distance- ===================
//*******************************************************
// Function to convert degrees to radians
double degrees_to_radians(double degrees) {
	return degrees * (M_PI / 180.0);
}
// Function to calculate the distance using Haversine formula
double haversine(double lat1, double lon1, double lat2, double lon2) {
	double dlat = degrees_to_radians(lat2 - lat1);
	double dlon = degrees_to_radians(lon2 - lon1);
	double a = sin(dlat / 2) * sin(dlat / 2) +
			cos(degrees_to_radians(lat1)) * cos(degrees_to_radians(lat2)) *
			sin(dlon / 2) * sin(dlon / 2);
	double c = 2 * atan2(sqrt(a), sqrt(1 - a));
	return EARTH_RADIUS * c * 1000;  // Convert to meters
}
//*******************************************************
//==================== -Get distance- ===================
//*******************************************************
void Display(){
	I2C_LCD_setcerser(I2C1, address,0,0);
	I2C_LCD_write_FLOATnumber(I2C1,address,(float)Decimal_degrees_Longitude,5);
	I2C_LCD_write_string(I2C1,"A ", address);
	I2C_LCD_write_FLOATnumber(I2C1,address,(float)Decimal_degrees_Latitude,5);
	I2C_LCD_write_string(I2C1,"N", address);
	I2C_LCD_setcerser(I2C1, address,1,0);
	I2C_LCD_write_FLOATnumber(I2C1,address,(float)distance,7);
	I2C_LCD_write_string(I2C1," meter    ", address);

}
