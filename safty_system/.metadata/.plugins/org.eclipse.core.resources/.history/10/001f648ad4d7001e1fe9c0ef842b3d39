#include "SCEDULER.h"
#include "stm32f103c6_ADC.h"
#include "math.h"
#include "STM32_TIMERS_DRIVER.h"
//=============================================================
#define clk 36000000
#define max_motor_Driver_temp 45
#define min_batterry_voltage 14 //todo

//=============================================================
TASK_FRAME_t TASK1,TASK2,TASK3,TASK4,TASK5;
uint8_t T1,T2,T3,T4,T5;
uint8_t buf[7];

struct {

	enum{
		first_start,     //when we turn on the battery
		Normal_Mode,
		Charge_Mode,
		Problem_Mode
	}System_mode;

	enum{
		Motor_over_heat,
		Charger_over_heat,
		Overcharg,
		High_Current,
		FallOff,
		Emergency_Stop
	}ERRORS;

}Safty_System;
enum {
	Buzzer_DURATION_1000ms=1000,
	Buzzer_DURATION_500ms=500,
	Buzzer_DURATION_200ms=200,
	Buzzer_DURATION_100ms=100

}Buzzer_DURATION_HIGH_HIGH;
enum {
	Buzzer_DURATION_100ms=100,
	Buzzer_DURATION_200ms=200,
	Buzzer_DURATION_1000ms=1000,
	Buzzer_DURATION_500ms=500
}Buzzer_DURATION_LOW;
//=============================================================
void HOOK_fun_buzzer(){
	pinwrite(GPIOB, pin11,LOW);
}
//=============================================================
const double c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07,R1 = 10000;
uint8_t Battery_Volte;
double MOTOR_TEMP;
//=============================================================
double ADC_TO_TEMP(uint16_t ADC_READ);
//=============================================================
double ADC_TO_TEMP(uint16_t ADC_READ){
	double logR2;
	logR2 = log(R1 * (4095.0 / ADC_READ - 1.0));
	return (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2))- 273.15;
}
//=============================================================
void TASK1_fun(){
	while(1){
		T1^=1;
		Safty_System.System_mode=first_start;
		//3s Delay first(All output relays=0 ,turn on the buzzer with duration 500ms)
		Buzzer_DURATION_HIGH=Buzzer_DURATION_500ms;
		ALSHREIF_RTOS_ACTIVAT_TASK(&TASK1,&TASK2);
		ALSHREIF_RTOS_TASK_WAIT(&TASK1, 3000);
		// turn on the buzzer with duration 200ms to indicate the second stage <activate checking task>
		ALSHREIF_RTOS_TERMINAT_TASK(&TASK2,HOOK_fun_buzzer);
		Buzzer_DURATION_HIGH=Buzzer_DURATION_200ms;
		ALSHREIF_RTOS_ACTIVAT_TASK(&TASK1,&TASK2);
		// activate checking task
		ALSHREIF_RTOS_ACTIVAT_TASK(&TASK1,&TASK3);
		ALSHREIF_RTOS_TERMINAT_TASK(&TASK1,NULL);

	}
}
void TASK2_fun(){
	static volatile uint32_t co=0;
	while(1){
		T2^=1;
		co++;
		pinwrite(GPIOB, pin11,HIGH);
		ALSHREIF_RTOS_TASK_WAIT(&TASK2, Buzzer_DURATION_HIGH);
		pinwrite(GPIOB, pin11, LOW);
		ALSHREIF_RTOS_TASK_WAIT(&TASK2, Buzzer_DURATION_LOW);


	}
}
void TASK3_fun(){

	while(1){
		T3^=1;
		//Read the motor temperature
		MOTOR_TEMP=ADC_TO_TEMP(ADC_READ(ADC1, ADC_pin_PA0));
		gcvt(MOTOR_TEMP,3,buf);
		USART_SEND_STRING(USART1,buf);
		ALSHREIF_RTOS_TASK_WAIT(&TASK3, 50);
		USART_SEND_STRING(USART1," C \n");
		ALSHREIF_RTOS_TASK_WAIT(&TASK3, 50);

		//Read Battery Voltage
		Battery_Volte=266.0*(ADC_READ(ADC1, ADC_pin_PA1)/4095.0);//8gain * 3 volt
		sprintf(buf,"%d",Battery_Volte);
		USART_SEND_STRING(USART1,buf);
		ALSHREIF_RTOS_TASK_WAIT(&TASK3, 50);
		USART_SEND_STRING(USART1," V \n");
		ALSHREIF_RTOS_TASK_WAIT(&TASK3, 400);
		ALSHREIF_RTOS_ACTIVAT_TASK(&TASK3, &TASK4);

	}
}

void TASK4_fun(){

	while(1){
		T4^=1;
		//Problem_Mode Emergency_Stop or over heat or FallOff...
		if(READ_PIN(GPIOA, pin7)==HIGH||READ_PIN(GPIOA, pin6)==HIGH){
			Safty_System.System_mode=Problem_Mode;

			if(READ_PIN(GPIOA, pin7)==HIGH){
				Safty_System.ERRORS=Emergency_Stop;
				pinwrite(GPIOB, pin0,LOW);
				pinwrite(GPIOB, pin1,LOW);
				pinwrite(GPIOB, pin10,LOW);
				Buzzer_DURATION_HIGH=Buzzer_DURATION_100ms;

			}
			if(READ_PIN(GPIOA, pin7)==HIGH){
				Buzzer_DURATION_HIGH=Buzzer_DURATION_500ms;
				Safty_System.ERRORS=FallOff;
				pinwrite(GPIOB, pin0,HIGH);
				pinwrite(GPIOB, pin1,LOW);
				pinwrite(GPIOB, pin10,LOW);
			}
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK4, &TASK2);

		}
		//charging mode
		else if(Battery_Volte<min_batterry_voltage*10){
			Buzzer_DURATION_HIGH=Buzzer_DURATION_200ms;
			Safty_System.System_mode=Charge_Mode;
			pinwrite(GPIOB, pin0,HIGH);
			pinwrite(GPIOB, pin1,HIGH);
			pinwrite(GPIOB, pin10,HIGH);
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK4, &TASK2);
		}
		//normal mode
		else{
			Buzzer_DURATION_HIGH=Buzzer_DURATION_1000ms;
			Safty_System.System_mode=Normal_Mode;
			pinwrite(GPIOB, pin0,HIGH);
			pinwrite(GPIOB, pin1,HIGH);
			pinwrite(GPIOB, pin10,LOW);
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK4, &TASK2);
		}

		ALSHREIF_RTOS_TASK_WAIT(&TASK4, 100);
	}
}
void TASK5_fun(){
	static volatile uint32_t co=0;
	while(1){
		T5^=1;
		co++;
		//ALSHREIF_RTOS_TASK_WAIT(&TASK4, 100);
		if(co==300){
			co=0;
			ALSHREIF_RTOS_TERMINAT_TASK(&TASK5,NULL);
		}
	}
}
//============================================================================================================
int main(void)
{

	HARD_WARE_INIT();
	ALSHREIF_RTOS_INIT();

	strcpy(TASK1.NAME,"TASK1");
	TASK1.TASK_FUNCTION=TASK1_fun;
	TASK1.priority=4;
	TASK1.stack_size=1024;

	strcpy(TASK2.NAME,"TASK2");
	TASK2.TASK_FUNCTION=TASK2_fun;
	TASK2.priority=3;
	TASK2.stack_size=1024;

	strcpy(TASK3.NAME,"TASK3");
	TASK3.TASK_FUNCTION=TASK3_fun;
	TASK3.priority=2;
	TASK3.stack_size=1024;

	strcpy(TASK4.NAME,"TASK4");
	TASK4.TASK_FUNCTION=TASK4_fun;
	TASK4.priority=1;
	TASK4.stack_size=1024;


	strcpy(TASK5.NAME,"TASK5");
	TASK5.TASK_FUNCTION=TASK5_fun;
	TASK5.priority=0;
	TASK5.stack_size=1024;

	ALSHREIF_RTOS_CREAT_TASK(&TASK1);
	ALSHREIF_RTOS_CREAT_TASK(&TASK2);
	ALSHREIF_RTOS_CREAT_TASK(&TASK3);
	ALSHREIF_RTOS_CREAT_TASK(&TASK4);
	ALSHREIF_RTOS_CREAT_TASK(&TASK5);

	ALSHREIF_RTOS_ACTIVAT_TASK(NULL,&TASK1);
	//	ALSHREIF_RTOS_ACTIVAT_TASK(&TASK2);
	//	ALSHREIF_RTOS_ACTIVAT_TASK(&TASK3);
	ALSHREIF_RTOS_START_OS();
	while(1);
}
