
RTOS_PROJECT.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050ac  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080051e0  080051e0  000151e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800536c  0800536c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800536c  0800536c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800536c  0800536c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000088  080053fc  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  080053fc  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099d0  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001947  00000000  00000000  00029a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000440  00000000  00000000  0002b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000378  00000000  00000000  0002b808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004d1b  00000000  00000000  0002bb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005cee  00000000  00000000  0003089b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000120d0  00000000  00000000  00036589  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00048659  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001958  00000000  00000000  000486d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000088 	.word	0x20000088
 800014c:	00000000 	.word	0x00000000
 8000150:	080051c4 	.word	0x080051c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000008c 	.word	0x2000008c
 800016c:	080051c4 	.word	0x080051c4

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__aeabi_drsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000188:	e002      	b.n	8000190 <__adddf3>
 800018a:	bf00      	nop

0800018c <__aeabi_dsub>:
 800018c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000190 <__adddf3>:
 8000190:	b530      	push	{r4, r5, lr}
 8000192:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000196:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019a:	ea94 0f05 	teq	r4, r5
 800019e:	bf08      	it	eq
 80001a0:	ea90 0f02 	teqeq	r0, r2
 80001a4:	bf1f      	itttt	ne
 80001a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b6:	f000 80e2 	beq.w	800037e <__adddf3+0x1ee>
 80001ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c2:	bfb8      	it	lt
 80001c4:	426d      	neglt	r5, r5
 80001c6:	dd0c      	ble.n	80001e2 <__adddf3+0x52>
 80001c8:	442c      	add	r4, r5
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	ea82 0000 	eor.w	r0, r2, r0
 80001d6:	ea83 0101 	eor.w	r1, r3, r1
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	2d36      	cmp	r5, #54	; 0x36
 80001e4:	bf88      	it	hi
 80001e6:	bd30      	pophi	{r4, r5, pc}
 80001e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x70>
 80001fa:	4240      	negs	r0, r0
 80001fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000200:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000204:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000208:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800020c:	d002      	beq.n	8000214 <__adddf3+0x84>
 800020e:	4252      	negs	r2, r2
 8000210:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000214:	ea94 0f05 	teq	r4, r5
 8000218:	f000 80a7 	beq.w	800036a <__adddf3+0x1da>
 800021c:	f1a4 0401 	sub.w	r4, r4, #1
 8000220:	f1d5 0e20 	rsbs	lr, r5, #32
 8000224:	db0d      	blt.n	8000242 <__adddf3+0xb2>
 8000226:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022a:	fa22 f205 	lsr.w	r2, r2, r5
 800022e:	1880      	adds	r0, r0, r2
 8000230:	f141 0100 	adc.w	r1, r1, #0
 8000234:	fa03 f20e 	lsl.w	r2, r3, lr
 8000238:	1880      	adds	r0, r0, r2
 800023a:	fa43 f305 	asr.w	r3, r3, r5
 800023e:	4159      	adcs	r1, r3
 8000240:	e00e      	b.n	8000260 <__adddf3+0xd0>
 8000242:	f1a5 0520 	sub.w	r5, r5, #32
 8000246:	f10e 0e20 	add.w	lr, lr, #32
 800024a:	2a01      	cmp	r2, #1
 800024c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000250:	bf28      	it	cs
 8000252:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000256:	fa43 f305 	asr.w	r3, r3, r5
 800025a:	18c0      	adds	r0, r0, r3
 800025c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000264:	d507      	bpl.n	8000276 <__adddf3+0xe6>
 8000266:	f04f 0e00 	mov.w	lr, #0
 800026a:	f1dc 0c00 	rsbs	ip, ip, #0
 800026e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000272:	eb6e 0101 	sbc.w	r1, lr, r1
 8000276:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027a:	d31b      	bcc.n	80002b4 <__adddf3+0x124>
 800027c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000280:	d30c      	bcc.n	800029c <__adddf3+0x10c>
 8000282:	0849      	lsrs	r1, r1, #1
 8000284:	ea5f 0030 	movs.w	r0, r0, rrx
 8000288:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800028c:	f104 0401 	add.w	r4, r4, #1
 8000290:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000294:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000298:	f080 809a 	bcs.w	80003d0 <__adddf3+0x240>
 800029c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a0:	bf08      	it	eq
 80002a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a6:	f150 0000 	adcs.w	r0, r0, #0
 80002aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ae:	ea41 0105 	orr.w	r1, r1, r5
 80002b2:	bd30      	pop	{r4, r5, pc}
 80002b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b8:	4140      	adcs	r0, r0
 80002ba:	eb41 0101 	adc.w	r1, r1, r1
 80002be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002c2:	f1a4 0401 	sub.w	r4, r4, #1
 80002c6:	d1e9      	bne.n	800029c <__adddf3+0x10c>
 80002c8:	f091 0f00 	teq	r1, #0
 80002cc:	bf04      	itt	eq
 80002ce:	4601      	moveq	r1, r0
 80002d0:	2000      	moveq	r0, #0
 80002d2:	fab1 f381 	clz	r3, r1
 80002d6:	bf08      	it	eq
 80002d8:	3320      	addeq	r3, #32
 80002da:	f1a3 030b 	sub.w	r3, r3, #11
 80002de:	f1b3 0220 	subs.w	r2, r3, #32
 80002e2:	da0c      	bge.n	80002fe <__adddf3+0x16e>
 80002e4:	320c      	adds	r2, #12
 80002e6:	dd08      	ble.n	80002fa <__adddf3+0x16a>
 80002e8:	f102 0c14 	add.w	ip, r2, #20
 80002ec:	f1c2 020c 	rsb	r2, r2, #12
 80002f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f4:	fa21 f102 	lsr.w	r1, r1, r2
 80002f8:	e00c      	b.n	8000314 <__adddf3+0x184>
 80002fa:	f102 0214 	add.w	r2, r2, #20
 80002fe:	bfd8      	it	le
 8000300:	f1c2 0c20 	rsble	ip, r2, #32
 8000304:	fa01 f102 	lsl.w	r1, r1, r2
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	bfdc      	itt	le
 800030e:	ea41 010c 	orrle.w	r1, r1, ip
 8000312:	4090      	lslle	r0, r2
 8000314:	1ae4      	subs	r4, r4, r3
 8000316:	bfa2      	ittt	ge
 8000318:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800031c:	4329      	orrge	r1, r5
 800031e:	bd30      	popge	{r4, r5, pc}
 8000320:	ea6f 0404 	mvn.w	r4, r4
 8000324:	3c1f      	subs	r4, #31
 8000326:	da1c      	bge.n	8000362 <__adddf3+0x1d2>
 8000328:	340c      	adds	r4, #12
 800032a:	dc0e      	bgt.n	800034a <__adddf3+0x1ba>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0220 	rsb	r2, r4, #32
 8000334:	fa20 f004 	lsr.w	r0, r0, r4
 8000338:	fa01 f302 	lsl.w	r3, r1, r2
 800033c:	ea40 0003 	orr.w	r0, r0, r3
 8000340:	fa21 f304 	lsr.w	r3, r1, r4
 8000344:	ea45 0103 	orr.w	r1, r5, r3
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f1c4 040c 	rsb	r4, r4, #12
 800034e:	f1c4 0220 	rsb	r2, r4, #32
 8000352:	fa20 f002 	lsr.w	r0, r0, r2
 8000356:	fa01 f304 	lsl.w	r3, r1, r4
 800035a:	ea40 0003 	orr.w	r0, r0, r3
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	fa21 f004 	lsr.w	r0, r1, r4
 8000366:	4629      	mov	r1, r5
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f094 0f00 	teq	r4, #0
 800036e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000372:	bf06      	itte	eq
 8000374:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000378:	3401      	addeq	r4, #1
 800037a:	3d01      	subne	r5, #1
 800037c:	e74e      	b.n	800021c <__adddf3+0x8c>
 800037e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000382:	bf18      	it	ne
 8000384:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000388:	d029      	beq.n	80003de <__adddf3+0x24e>
 800038a:	ea94 0f05 	teq	r4, r5
 800038e:	bf08      	it	eq
 8000390:	ea90 0f02 	teqeq	r0, r2
 8000394:	d005      	beq.n	80003a2 <__adddf3+0x212>
 8000396:	ea54 0c00 	orrs.w	ip, r4, r0
 800039a:	bf04      	itt	eq
 800039c:	4619      	moveq	r1, r3
 800039e:	4610      	moveq	r0, r2
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	ea91 0f03 	teq	r1, r3
 80003a6:	bf1e      	ittt	ne
 80003a8:	2100      	movne	r1, #0
 80003aa:	2000      	movne	r0, #0
 80003ac:	bd30      	popne	{r4, r5, pc}
 80003ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b2:	d105      	bne.n	80003c0 <__adddf3+0x230>
 80003b4:	0040      	lsls	r0, r0, #1
 80003b6:	4149      	adcs	r1, r1
 80003b8:	bf28      	it	cs
 80003ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c4:	bf3c      	itt	cc
 80003c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ca:	bd30      	popcc	{r4, r5, pc}
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf1a      	itte	ne
 80003e4:	4619      	movne	r1, r3
 80003e6:	4610      	movne	r0, r2
 80003e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003ec:	bf1c      	itt	ne
 80003ee:	460b      	movne	r3, r1
 80003f0:	4602      	movne	r2, r0
 80003f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f6:	bf06      	itte	eq
 80003f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003fc:	ea91 0f03 	teqeq	r1, r3
 8000400:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	bf00      	nop

08000408 <__aeabi_ui2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f04f 0500 	mov.w	r5, #0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e750      	b.n	80002c8 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_i2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000440:	bf48      	it	mi
 8000442:	4240      	negmi	r0, r0
 8000444:	f04f 0100 	mov.w	r1, #0
 8000448:	e73e      	b.n	80002c8 <__adddf3+0x138>
 800044a:	bf00      	nop

0800044c <__aeabi_f2d>:
 800044c:	0042      	lsls	r2, r0, #1
 800044e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000452:	ea4f 0131 	mov.w	r1, r1, rrx
 8000456:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045a:	bf1f      	itttt	ne
 800045c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000464:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000468:	4770      	bxne	lr
 800046a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046e:	bf08      	it	eq
 8000470:	4770      	bxeq	lr
 8000472:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000476:	bf04      	itt	eq
 8000478:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800048c:	e71c      	b.n	80002c8 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_ul2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f04f 0500 	mov.w	r5, #0
 800049e:	e00a      	b.n	80004b6 <__aeabi_l2d+0x16>

080004a0 <__aeabi_l2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ae:	d502      	bpl.n	80004b6 <__aeabi_l2d+0x16>
 80004b0:	4240      	negs	r0, r0
 80004b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c2:	f43f aed8 	beq.w	8000276 <__adddf3+0xe6>
 80004c6:	f04f 0203 	mov.w	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d6:	bf18      	it	ne
 80004d8:	3203      	addne	r2, #3
 80004da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004de:	f1c2 0320 	rsb	r3, r2, #32
 80004e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ee:	ea40 000e 	orr.w	r0, r0, lr
 80004f2:	fa21 f102 	lsr.w	r1, r1, r2
 80004f6:	4414      	add	r4, r2
 80004f8:	e6bd      	b.n	8000276 <__adddf3+0xe6>
 80004fa:	bf00      	nop

080004fc <__aeabi_dmul>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000502:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000506:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050a:	bf1d      	ittte	ne
 800050c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000510:	ea94 0f0c 	teqne	r4, ip
 8000514:	ea95 0f0c 	teqne	r5, ip
 8000518:	f000 f8de 	bleq	80006d8 <__aeabi_dmul+0x1dc>
 800051c:	442c      	add	r4, r5
 800051e:	ea81 0603 	eor.w	r6, r1, r3
 8000522:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000526:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052e:	bf18      	it	ne
 8000530:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000534:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800053c:	d038      	beq.n	80005b0 <__aeabi_dmul+0xb4>
 800053e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000542:	f04f 0500 	mov.w	r5, #0
 8000546:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000552:	f04f 0600 	mov.w	r6, #0
 8000556:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055a:	f09c 0f00 	teq	ip, #0
 800055e:	bf18      	it	ne
 8000560:	f04e 0e01 	orrne.w	lr, lr, #1
 8000564:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000568:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800056c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000570:	d204      	bcs.n	800057c <__aeabi_dmul+0x80>
 8000572:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000576:	416d      	adcs	r5, r5
 8000578:	eb46 0606 	adc.w	r6, r6, r6
 800057c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000580:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000584:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000588:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800058c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000590:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000594:	bf88      	it	hi
 8000596:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059a:	d81e      	bhi.n	80005da <__aeabi_dmul+0xde>
 800059c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b4:	ea46 0101 	orr.w	r1, r6, r1
 80005b8:	ea40 0002 	orr.w	r0, r0, r2
 80005bc:	ea81 0103 	eor.w	r1, r1, r3
 80005c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c4:	bfc2      	ittt	gt
 80005c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	popgt	{r4, r5, r6, pc}
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f04f 0e00 	mov.w	lr, #0
 80005d8:	3c01      	subs	r4, #1
 80005da:	f300 80ab 	bgt.w	8000734 <__aeabi_dmul+0x238>
 80005de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e2:	bfde      	ittt	le
 80005e4:	2000      	movle	r0, #0
 80005e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd70      	pople	{r4, r5, r6, pc}
 80005ec:	f1c4 0400 	rsb	r4, r4, #0
 80005f0:	3c20      	subs	r4, #32
 80005f2:	da35      	bge.n	8000660 <__aeabi_dmul+0x164>
 80005f4:	340c      	adds	r4, #12
 80005f6:	dc1b      	bgt.n	8000630 <__aeabi_dmul+0x134>
 80005f8:	f104 0414 	add.w	r4, r4, #20
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f305 	lsl.w	r3, r0, r5
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f205 	lsl.w	r2, r1, r5
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	fa21 f604 	lsr.w	r6, r1, r4
 8000620:	eb42 0106 	adc.w	r1, r2, r6
 8000624:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000628:	bf08      	it	eq
 800062a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f1c4 040c 	rsb	r4, r4, #12
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f304 	lsl.w	r3, r0, r4
 800063c:	fa20 f005 	lsr.w	r0, r0, r5
 8000640:	fa01 f204 	lsl.w	r2, r1, r4
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000650:	f141 0100 	adc.w	r1, r1, #0
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f205 	lsl.w	r2, r0, r5
 8000668:	ea4e 0e02 	orr.w	lr, lr, r2
 800066c:	fa20 f304 	lsr.w	r3, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea43 0302 	orr.w	r3, r3, r2
 8000678:	fa21 f004 	lsr.w	r0, r1, r4
 800067c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000680:	fa21 f204 	lsr.w	r2, r1, r4
 8000684:	ea20 0002 	bic.w	r0, r0, r2
 8000688:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f094 0f00 	teq	r4, #0
 800069c:	d10f      	bne.n	80006be <__aeabi_dmul+0x1c2>
 800069e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a2:	0040      	lsls	r0, r0, #1
 80006a4:	eb41 0101 	adc.w	r1, r1, r1
 80006a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3c01      	subeq	r4, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1a6>
 80006b2:	ea41 0106 	orr.w	r1, r1, r6
 80006b6:	f095 0f00 	teq	r5, #0
 80006ba:	bf18      	it	ne
 80006bc:	4770      	bxne	lr
 80006be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c2:	0052      	lsls	r2, r2, #1
 80006c4:	eb43 0303 	adc.w	r3, r3, r3
 80006c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3d01      	subeq	r5, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1c6>
 80006d2:	ea43 0306 	orr.w	r3, r3, r6
 80006d6:	4770      	bx	lr
 80006d8:	ea94 0f0c 	teq	r4, ip
 80006dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e0:	bf18      	it	ne
 80006e2:	ea95 0f0c 	teqne	r5, ip
 80006e6:	d00c      	beq.n	8000702 <__aeabi_dmul+0x206>
 80006e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ec:	bf18      	it	ne
 80006ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f2:	d1d1      	bne.n	8000698 <__aeabi_dmul+0x19c>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f04f 0000 	mov.w	r0, #0
 8000700:	bd70      	pop	{r4, r5, r6, pc}
 8000702:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000706:	bf06      	itte	eq
 8000708:	4610      	moveq	r0, r2
 800070a:	4619      	moveq	r1, r3
 800070c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000710:	d019      	beq.n	8000746 <__aeabi_dmul+0x24a>
 8000712:	ea94 0f0c 	teq	r4, ip
 8000716:	d102      	bne.n	800071e <__aeabi_dmul+0x222>
 8000718:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800071c:	d113      	bne.n	8000746 <__aeabi_dmul+0x24a>
 800071e:	ea95 0f0c 	teq	r5, ip
 8000722:	d105      	bne.n	8000730 <__aeabi_dmul+0x234>
 8000724:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000728:	bf1c      	itt	ne
 800072a:	4610      	movne	r0, r2
 800072c:	4619      	movne	r1, r3
 800072e:	d10a      	bne.n	8000746 <__aeabi_dmul+0x24a>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074e:	bd70      	pop	{r4, r5, r6, pc}

08000750 <__aeabi_ddiv>:
 8000750:	b570      	push	{r4, r5, r6, lr}
 8000752:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000756:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075e:	bf1d      	ittte	ne
 8000760:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000764:	ea94 0f0c 	teqne	r4, ip
 8000768:	ea95 0f0c 	teqne	r5, ip
 800076c:	f000 f8a7 	bleq	80008be <__aeabi_ddiv+0x16e>
 8000770:	eba4 0405 	sub.w	r4, r4, r5
 8000774:	ea81 0e03 	eor.w	lr, r1, r3
 8000778:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800077c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000780:	f000 8088 	beq.w	8000894 <__aeabi_ddiv+0x144>
 8000784:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000788:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800078c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000790:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000794:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000798:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800079c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a8:	429d      	cmp	r5, r3
 80007aa:	bf08      	it	eq
 80007ac:	4296      	cmpeq	r6, r2
 80007ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b6:	d202      	bcs.n	80007be <__aeabi_ddiv+0x6e>
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	1ab6      	subs	r6, r6, r2
 80007c0:	eb65 0503 	sbc.w	r5, r5, r3
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	ebb6 0e02 	subs.w	lr, r6, r2
 8000806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080a:	bf22      	ittt	cs
 800080c:	1ab6      	subcs	r6, r6, r2
 800080e:	4675      	movcs	r5, lr
 8000810:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800082c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000830:	d018      	beq.n	8000864 <__aeabi_ddiv+0x114>
 8000832:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000836:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000842:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000846:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084e:	d1c0      	bne.n	80007d2 <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	d10b      	bne.n	800086e <__aeabi_ddiv+0x11e>
 8000856:	ea41 0100 	orr.w	r1, r1, r0
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000862:	e7b6      	b.n	80007d2 <__aeabi_ddiv+0x82>
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf04      	itt	eq
 800086a:	4301      	orreq	r1, r0
 800086c:	2000      	moveq	r0, #0
 800086e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000872:	bf88      	it	hi
 8000874:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000878:	f63f aeaf 	bhi.w	80005da <__aeabi_dmul+0xde>
 800087c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000880:	bf04      	itt	eq
 8000882:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000886:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088a:	f150 0000 	adcs.w	r0, r0, #0
 800088e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000898:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800089c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a0:	bfc2      	ittt	gt
 80008a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008aa:	bd70      	popgt	{r4, r5, r6, pc}
 80008ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b0:	f04f 0e00 	mov.w	lr, #0
 80008b4:	3c01      	subs	r4, #1
 80008b6:	e690      	b.n	80005da <__aeabi_dmul+0xde>
 80008b8:	ea45 0e06 	orr.w	lr, r5, r6
 80008bc:	e68d      	b.n	80005da <__aeabi_dmul+0xde>
 80008be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c2:	ea94 0f0c 	teq	r4, ip
 80008c6:	bf08      	it	eq
 80008c8:	ea95 0f0c 	teqeq	r5, ip
 80008cc:	f43f af3b 	beq.w	8000746 <__aeabi_dmul+0x24a>
 80008d0:	ea94 0f0c 	teq	r4, ip
 80008d4:	d10a      	bne.n	80008ec <__aeabi_ddiv+0x19c>
 80008d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008da:	f47f af34 	bne.w	8000746 <__aeabi_dmul+0x24a>
 80008de:	ea95 0f0c 	teq	r5, ip
 80008e2:	f47f af25 	bne.w	8000730 <__aeabi_dmul+0x234>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e72c      	b.n	8000746 <__aeabi_dmul+0x24a>
 80008ec:	ea95 0f0c 	teq	r5, ip
 80008f0:	d106      	bne.n	8000900 <__aeabi_ddiv+0x1b0>
 80008f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f6:	f43f aefd 	beq.w	80006f4 <__aeabi_dmul+0x1f8>
 80008fa:	4610      	mov	r0, r2
 80008fc:	4619      	mov	r1, r3
 80008fe:	e722      	b.n	8000746 <__aeabi_dmul+0x24a>
 8000900:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000904:	bf18      	it	ne
 8000906:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090a:	f47f aec5 	bne.w	8000698 <__aeabi_dmul+0x19c>
 800090e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000912:	f47f af0d 	bne.w	8000730 <__aeabi_dmul+0x234>
 8000916:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091a:	f47f aeeb 	bne.w	80006f4 <__aeabi_dmul+0x1f8>
 800091e:	e712      	b.n	8000746 <__aeabi_dmul+0x24a>

08000920 <__gedf2>:
 8000920:	f04f 3cff 	mov.w	ip, #4294967295
 8000924:	e006      	b.n	8000934 <__cmpdf2+0x4>
 8000926:	bf00      	nop

08000928 <__ledf2>:
 8000928:	f04f 0c01 	mov.w	ip, #1
 800092c:	e002      	b.n	8000934 <__cmpdf2+0x4>
 800092e:	bf00      	nop

08000930 <__cmpdf2>:
 8000930:	f04f 0c01 	mov.w	ip, #1
 8000934:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000938:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800093c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000940:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000944:	bf18      	it	ne
 8000946:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094a:	d01b      	beq.n	8000984 <__cmpdf2+0x54>
 800094c:	b001      	add	sp, #4
 800094e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000952:	bf0c      	ite	eq
 8000954:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000958:	ea91 0f03 	teqne	r1, r3
 800095c:	bf02      	ittt	eq
 800095e:	ea90 0f02 	teqeq	r0, r2
 8000962:	2000      	moveq	r0, #0
 8000964:	4770      	bxeq	lr
 8000966:	f110 0f00 	cmn.w	r0, #0
 800096a:	ea91 0f03 	teq	r1, r3
 800096e:	bf58      	it	pl
 8000970:	4299      	cmppl	r1, r3
 8000972:	bf08      	it	eq
 8000974:	4290      	cmpeq	r0, r2
 8000976:	bf2c      	ite	cs
 8000978:	17d8      	asrcs	r0, r3, #31
 800097a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097e:	f040 0001 	orr.w	r0, r0, #1
 8000982:	4770      	bx	lr
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d102      	bne.n	8000994 <__cmpdf2+0x64>
 800098e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000992:	d107      	bne.n	80009a4 <__cmpdf2+0x74>
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d1d6      	bne.n	800094c <__cmpdf2+0x1c>
 800099e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a2:	d0d3      	beq.n	800094c <__cmpdf2+0x1c>
 80009a4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_cdrcmple>:
 80009ac:	4684      	mov	ip, r0
 80009ae:	4610      	mov	r0, r2
 80009b0:	4662      	mov	r2, ip
 80009b2:	468c      	mov	ip, r1
 80009b4:	4619      	mov	r1, r3
 80009b6:	4663      	mov	r3, ip
 80009b8:	e000      	b.n	80009bc <__aeabi_cdcmpeq>
 80009ba:	bf00      	nop

080009bc <__aeabi_cdcmpeq>:
 80009bc:	b501      	push	{r0, lr}
 80009be:	f7ff ffb7 	bl	8000930 <__cmpdf2>
 80009c2:	2800      	cmp	r0, #0
 80009c4:	bf48      	it	mi
 80009c6:	f110 0f00 	cmnmi.w	r0, #0
 80009ca:	bd01      	pop	{r0, pc}

080009cc <__aeabi_dcmpeq>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff fff4 	bl	80009bc <__aeabi_cdcmpeq>
 80009d4:	bf0c      	ite	eq
 80009d6:	2001      	moveq	r0, #1
 80009d8:	2000      	movne	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmplt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffea 	bl	80009bc <__aeabi_cdcmpeq>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmple>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffe0 	bl	80009bc <__aeabi_cdcmpeq>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpge>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffce 	bl	80009ac <__aeabi_cdrcmple>
 8000a10:	bf94      	ite	ls
 8000a12:	2001      	movls	r0, #1
 8000a14:	2000      	movhi	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpgt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffc4 	bl	80009ac <__aeabi_cdrcmple>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmpun>:
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x10>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d10a      	bne.n	8000a56 <__aeabi_dcmpun+0x26>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x20>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_dcmpun+0x26>
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0001 	mov.w	r0, #1
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2uiz>:
 8000aac:	004a      	lsls	r2, r1, #1
 8000aae:	d211      	bcs.n	8000ad4 <__aeabi_d2uiz+0x28>
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d211      	bcs.n	8000ada <__aeabi_d2uiz+0x2e>
 8000ab6:	d50d      	bpl.n	8000ad4 <__aeabi_d2uiz+0x28>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d40e      	bmi.n	8000ae0 <__aeabi_d2uiz+0x34>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ade:	d102      	bne.n	8000ae6 <__aeabi_d2uiz+0x3a>
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	4770      	bx	lr
 8000ae6:	f04f 0000 	mov.w	r0, #0
 8000aea:	4770      	bx	lr

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0152      	lsls	r2, r2, #5
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0152      	lsls	r2, r2, #5
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	2107      	movs	r1, #7
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ffc2 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HardFault_Handler>:
 */
#include "RTOS_CORTEX_M3_PORTING.h"
#include "stm32_speed_DRIVER.h"
#include "stm32f103c6_USART_SRIVER.h"
#include "stm32f103c6_ADC.h"
void HardFault_Handler(){
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	while(1);
 8000c28:	e7fe      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2a <MemManage_Handler>:
}
void	MemManage_Handler(){
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
	while(1);
 8000c2e:	e7fe      	b.n	8000c2e <MemManage_Handler+0x4>

08000c30 <BusFault_Handler>:
}
void	BusFault_Handler(){
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	while(1);
 8000c34:	e7fe      	b.n	8000c34 <BusFault_Handler+0x4>

08000c36 <UsageFault_Handler>:
}
void	UsageFault_Handler(){
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
	while(1);
 8000c3a:	e7fe      	b.n	8000c3a <UsageFault_Handler+0x4>

08000c3c <HARD_WARE_INIT>:
}

//====================================
void HARD_WARE_INIT(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af04      	add	r7, sp, #16

	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 8000c42:	2100      	movs	r1, #0
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 ffc1 	bl	8001bcc <MCAL_speed_init>
	__NVIC_SetPriority(PendSV_IRQn, 15) ;
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f06f 0001 	mvn.w	r0, #1
 8000c50:	f7ff ff9c 	bl	8000b8c <__NVIC_SetPriority>
	ADC_INIT(ADC1, ADC_STATE_START);
 8000c54:	2101      	movs	r1, #1
 8000c56:	482a      	ldr	r0, [pc, #168]	; (8000d00 <HARD_WARE_INIT+0xc4>)
 8000c58:	f001 f844 	bl	8001ce4 <ADC_INIT>
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,36000000);
 8000c5c:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <HARD_WARE_INIT+0xc8>)
 8000c5e:	9302      	str	r3, [sp, #8]
 8000c60:	2300      	movs	r3, #0
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	210c      	movs	r1, #12
 8000c70:	4825      	ldr	r0, [pc, #148]	; (8000d08 <HARD_WARE_INIT+0xcc>)
 8000c72:	f001 fa03 	bl	800207c <USART_INIT>
	pinmode(GPIOB, pin0, GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000c76:	2202      	movs	r2, #2
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4824      	ldr	r0, [pc, #144]	; (8000d0c <HARD_WARE_INIT+0xd0>)
 8000c7c:	f000 fcb2 	bl	80015e4 <pinmode>
	pinmode(GPIOB, pin1, GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000c80:	2202      	movs	r2, #2
 8000c82:	2101      	movs	r1, #1
 8000c84:	4821      	ldr	r0, [pc, #132]	; (8000d0c <HARD_WARE_INIT+0xd0>)
 8000c86:	f000 fcad 	bl	80015e4 <pinmode>
	pinmode(GPIOB, pin10, GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	210a      	movs	r1, #10
 8000c8e:	481f      	ldr	r0, [pc, #124]	; (8000d0c <HARD_WARE_INIT+0xd0>)
 8000c90:	f000 fca8 	bl	80015e4 <pinmode>
	pinmode(GPIOB, pin11, GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000c94:	2202      	movs	r2, #2
 8000c96:	210b      	movs	r1, #11
 8000c98:	481c      	ldr	r0, [pc, #112]	; (8000d0c <HARD_WARE_INIT+0xd0>)
 8000c9a:	f000 fca3 	bl	80015e4 <pinmode>
	pinmode(GPIOA, pin6,GPIO_MODE_INPUT_PU);//MERCURY_SENSOR
 8000c9e:	2218      	movs	r2, #24
 8000ca0:	2106      	movs	r1, #6
 8000ca2:	481b      	ldr	r0, [pc, #108]	; (8000d10 <HARD_WARE_INIT+0xd4>)
 8000ca4:	f000 fc9e 	bl	80015e4 <pinmode>
	pinmode(GPIOB, pin12,GPIO_MODE_INPUT_PU);
 8000ca8:	2218      	movs	r2, #24
 8000caa:	210c      	movs	r1, #12
 8000cac:	4817      	ldr	r0, [pc, #92]	; (8000d0c <HARD_WARE_INIT+0xd0>)
 8000cae:	f000 fc99 	bl	80015e4 <pinmode>
	pinmode(GPIOB, pin13,GPIO_MODE_INPUT_PU);
 8000cb2:	2218      	movs	r2, #24
 8000cb4:	210d      	movs	r1, #13
 8000cb6:	4815      	ldr	r0, [pc, #84]	; (8000d0c <HARD_WARE_INIT+0xd0>)
 8000cb8:	f000 fc94 	bl	80015e4 <pinmode>
	pinmode(GPIOB, pin14,GPIO_MODE_INPUT_PU);
 8000cbc:	2218      	movs	r2, #24
 8000cbe:	210e      	movs	r1, #14
 8000cc0:	4812      	ldr	r0, [pc, #72]	; (8000d0c <HARD_WARE_INIT+0xd0>)
 8000cc2:	f000 fc8f 	bl	80015e4 <pinmode>

	pinmode(GPIOA, pin7,GPIO_MODE_INPUT_PU);//EMERGENCY_STOP
 8000cc6:	2218      	movs	r2, #24
 8000cc8:	2107      	movs	r1, #7
 8000cca:	4811      	ldr	r0, [pc, #68]	; (8000d10 <HARD_WARE_INIT+0xd4>)
 8000ccc:	f000 fc8a 	bl	80015e4 <pinmode>

	pinwrite(GPIOB, pin0,LOW);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <HARD_WARE_INIT+0xd0>)
 8000cd6:	f000 fd67 	bl	80017a8 <pinwrite>
	pinwrite(GPIOB, pin1,LOW);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2101      	movs	r1, #1
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <HARD_WARE_INIT+0xd0>)
 8000ce0:	f000 fd62 	bl	80017a8 <pinwrite>
	pinwrite(GPIOB, pin10,LOW);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	210a      	movs	r1, #10
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <HARD_WARE_INIT+0xd0>)
 8000cea:	f000 fd5d 	bl	80017a8 <pinwrite>
	pinwrite(GPIOB, pin11,LOW);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	210b      	movs	r1, #11
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <HARD_WARE_INIT+0xd0>)
 8000cf4:	f000 fd58 	bl	80017a8 <pinwrite>



}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40012400 	.word	0x40012400
 8000d04:	02255100 	.word	0x02255100
 8000d08:	40013800 	.word	0x40013800
 8000d0c:	40010c00 	.word	0x40010c00
 8000d10:	40010800 	.word	0x40010800

08000d14 <SVC_Handler>:


//====================================

__attribute__((naked)) void SVC_Handler(){
	__asm("TST lr,#4 \n\t"
 8000d14:	f01e 0f04 	tst.w	lr, #4
 8000d18:	bf0c      	ite	eq
 8000d1a:	f3ef 8008 	mrseq	r0, MSP
 8000d1e:	f3ef 8009 	mrsne	r0, PSP
 8000d22:	f000 bac9 	b.w	80012b8 <OS_SVC_SERVICES>
			"ITE EQ \n\t"
			"MRSEQ r0,MSP \n\t"
			"MRSNE r0,PSP \n\t"
			"B OS_SVC_SERVICES");
}
 8000d26:	bf00      	nop

08000d28 <OS_TRIGDER_PENDSV>:



//====================================

void OS_TRIGDER_PENDSV(){
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <OS_TRIGDER_PENDSV+0x18>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <OS_TRIGDER_PENDSV+0x18>)
 8000d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d36:	6053      	str	r3, [r2, #4]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <TIMER_START>:
//====================================
void TIMER_START(){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

	SysTick_Config( TICKS_TIMER);
 8000d48:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8000d4c:	f7ff ff48 	bl	8000be0 <SysTick_Config>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <OS_FIFO_INIT>:


#include "RTOS_FIFO.h"


FIFO_status_t OS_FIFO_INIT (FIFO_BUF_t* fifo,FIFO_TYPE* buff , uint16_t length){
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	80fb      	strh	r3, [r7, #6]

	if(!buff )
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <OS_FIFO_INIT+0x18>
		return FIFO_NULL;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e011      	b.n	8000d90 <OS_FIFO_INIT+0x3c>

	fifo->base = buff ;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	609a      	str	r2, [r3, #8]
	fifo->head = fifo->base ;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	601a      	str	r2, [r3, #0]
	fifo->tail = fifo->base ;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	605a      	str	r2, [r3, #4]
	fifo->lenght = length;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	88fa      	ldrh	r2, [r7, #6]
 8000d86:	81da      	strh	r2, [r3, #14]
	fifo->count=0;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	819a      	strh	r2, [r3, #12]

	return FIFO_NO_ERROR;
 8000d8e:	2300      	movs	r3, #0

}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <OS_FIFO_ENQUEUE>:

/* *********************************** */

FIFO_status_t OS_FIFO_ENQUEUE (FIFO_BUF_t* fifo,FIFO_TYPE item){
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->lenght)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <OS_FIFO_ENQUEUE+0x1a>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	89db      	ldrh	r3, [r3, #14]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <OS_FIFO_ENQUEUE+0x1e>
		return FIFO_NULL;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e02e      	b.n	8000e16 <OS_FIFO_ENQUEUE+0x7c>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->count == fifo->lenght))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d107      	bne.n	8000dd4 <OS_FIFO_ENQUEUE+0x3a>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	899a      	ldrh	r2, [r3, #12]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	89db      	ldrh	r3, [r3, #14]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d101      	bne.n	8000dd4 <OS_FIFO_ENQUEUE+0x3a>
		return FIFO_FULL;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	e020      	b.n	8000e16 <OS_FIFO_ENQUEUE+0x7c>

	*(fifo->tail)=item;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	601a      	str	r2, [r3, #0]
	fifo->count++;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	899b      	ldrh	r3, [r3, #12]
 8000de0:	3301      	adds	r3, #1
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	819a      	strh	r2, [r3, #12]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->lenght )) - 4 ))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	6892      	ldr	r2, [r2, #8]
 8000df0:	4611      	mov	r1, r2
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	89d2      	ldrh	r2, [r2, #14]
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	440a      	add	r2, r1
 8000dfa:	3a04      	subs	r2, #4
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d104      	bne.n	8000e0a <OS_FIFO_ENQUEUE+0x70>
		fifo->tail = fifo->base;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	e004      	b.n	8000e14 <OS_FIFO_ENQUEUE+0x7a>
	else
		fifo->tail++;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	1d1a      	adds	r2, r3, #4
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 8000e14:	2300      	movs	r3, #0


}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <OS_FIFO_DEQUEUE>:

/* *********************************** */

FIFO_status_t OS_FIFO_DEQUEUE (FIFO_BUF_t* fifo, FIFO_TYPE* item){
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->lenght)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <OS_FIFO_DEQUEUE+0x1a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	89db      	ldrh	r3, [r3, #14]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <OS_FIFO_DEQUEUE+0x1e>
		return FIFO_NULL;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e02d      	b.n	8000e9a <OS_FIFO_DEQUEUE+0x7a>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d101      	bne.n	8000e4e <OS_FIFO_DEQUEUE+0x2e>
		return FIFO_EMPTY;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e025      	b.n	8000e9a <OS_FIFO_DEQUEUE+0x7a>



	*item = *(fifo->head);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	601a      	str	r2, [r3, #0]
	*(fifo->head)=NULL;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
	fifo->count--;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	899b      	ldrh	r3, [r3, #12]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	819a      	strh	r2, [r3, #12]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->lenght )) - 4 ))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6892      	ldr	r2, [r2, #8]
 8000e74:	4611      	mov	r1, r2
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	89d2      	ldrh	r2, [r2, #14]
 8000e7a:	0092      	lsls	r2, r2, #2
 8000e7c:	440a      	add	r2, r1
 8000e7e:	3a04      	subs	r2, #4
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d104      	bne.n	8000e8e <OS_FIFO_DEQUEUE+0x6e>
		fifo->head = fifo->base;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e004      	b.n	8000e98 <OS_FIFO_DEQUEUE+0x78>
	else
		fifo->head++;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	1d1a      	adds	r2, r3, #4
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <idle_task_fun>:
	SVC_TERMINATE_task,
	SVC_Wating_task
}_SVC_ID;
//===============================idle_task_fun==================================
uint8_t idle=0;
void idle_task_fun(){
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	while(1){
		idle^=1;
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <idle_task_fun+0x18>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	f083 0301 	eor.w	r3, r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <idle_task_fun+0x18>)
 8000eb4:	701a      	strb	r2, [r3, #0]
		__asm("WFE");
 8000eb6:	bf20      	wfe
		idle^=1;
 8000eb8:	e7f6      	b.n	8000ea8 <idle_task_fun+0x4>
 8000eba:	bf00      	nop
 8000ebc:	200000a4 	.word	0x200000a4

08000ec0 <ALSHREIF_RTOS_CREAT_TASK_FRAM>:
	}
}
//=======================ALSHREIF_RTOS_CREAT_TASK_FRAM==========================

void ALSHREIF_RTOS_CREAT_TASK_FRAM(TASK_FRAME_t* TASK){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	 * r8
	 * r9
	 * r10
	 * r11
	 * */
	TASK->_PSP_STACK_CURENT=TASK->_PSP_STACK_TOP;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	615a      	str	r2, [r3, #20]
	TASK->_PSP_STACK_CURENT--;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	1f1a      	subs	r2, r3, #4
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	615a      	str	r2, [r3, #20]
	*(TASK->_PSP_STACK_CURENT)=0x01000000;//xpsr
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ee4:	601a      	str	r2, [r3, #0]

	TASK->_PSP_STACK_CURENT--;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	1f1a      	subs	r2, r3, #4
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	615a      	str	r2, [r3, #20]
	*(TASK->_PSP_STACK_CURENT)=(uint32_t)TASK->TASK_FUNCTION;//pc
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	601a      	str	r2, [r3, #0]

	TASK->_PSP_STACK_CURENT--;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	1f1a      	subs	r2, r3, #4
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	615a      	str	r2, [r3, #20]
	*(TASK->_PSP_STACK_CURENT)=0xFFFFFFFD;//lr
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	f06f 0202 	mvn.w	r2, #2
 8000f0c:	601a      	str	r2, [r3, #0]

	for(uint8_t i =0;i<13;i++){
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e00b      	b.n	8000f2c <ALSHREIF_RTOS_CREAT_TASK_FRAM+0x6c>
		TASK->_PSP_STACK_CURENT--;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	1f1a      	subs	r2, r3, #4
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	615a      	str	r2, [r3, #20]
		*(TASK->_PSP_STACK_CURENT)=0;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
	for(uint8_t i =0;i<13;i++){
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	2b0c      	cmp	r3, #12
 8000f30:	d9f0      	bls.n	8000f14 <ALSHREIF_RTOS_CREAT_TASK_FRAM+0x54>
	}

}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <ALSHREIF_CREATE_MAIN_STACK>:
//===============================CREATE_MAIN_STACK==============================
void ALSHREIF_CREATE_MAIN_STACK(){
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	OS_CONTROL._MSP_STACK_TOP=(uint32_t volatile)&_estack;//top main stack
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <ALSHREIF_CREATE_MAIN_STACK+0x34>)
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 8000f44:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_CONTROL._MSP_STACK_END=OS_CONTROL._MSP_STACK_TOP-MAIN_STACK_SIZE;//end main stack
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 8000f4a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000f4e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 8000f54:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_CONTROL._PSP_TASK_locator =(OS_CONTROL._MSP_STACK_END-8);//locator task 1
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 8000f5a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000f5e:	3b08      	subs	r3, #8
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 8000f62:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20005000 	.word	0x20005000
 8000f74:	20000260 	.word	0x20000260

08000f78 <ALSHREIF_RTOS_CREAT_TASK>:
//===============================ALSHREIF_RTOS_CREAT_TASK========================
void ALSHREIF_RTOS_CREAT_TASK(TASK_FRAME_t* TASK){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	TASK->_PSP_STACK_TOP=OS_CONTROL._PSP_TASK_locator;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000f82:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60da      	str	r2, [r3, #12]
	TASK->_PSP_STACK_END=(TASK->_PSP_STACK_TOP-TASK->stack_size);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1ad2      	subs	r2, r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	611a      	str	r2, [r3, #16]
	if(TASK->_PSP_STACK_END<(uint32_t)(&_end_heap))while(1); //over flow
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	4a13      	ldr	r2, [pc, #76]	; (8000fec <ALSHREIF_RTOS_CREAT_TASK+0x74>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d200      	bcs.n	8000fa4 <ALSHREIF_RTOS_CREAT_TASK+0x2c>
 8000fa2:	e7fe      	b.n	8000fa2 <ALSHREIF_RTOS_CREAT_TASK+0x2a>
	OS_CONTROL._PSP_TASK_locator=(TASK->_PSP_STACK_END-8);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	3b08      	subs	r3, #8
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000fac:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	ALSHREIF_RTOS_CREAT_TASK_FRAM(TASK);//pointer ((:
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff85 	bl	8000ec0 <ALSHREIF_RTOS_CREAT_TASK_FRAM>
	//in the first time in runtime when it context SAVE the idle task,
	//and go to the next task this will make a problem because current_task->>_PSP_STACK_CURENT did not enter before
	//so _PSP_STACK_CURENT will be zero and if it but zero in PSP it will make HardFault
	//check @context tasks

	OS_CONTROL.OS_TASKS[OS_CONTROL.NUMBER_OF_TASKS]=TASK;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000fb8:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	OS_CONTROL.NUMBER_OF_TASKS++;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000fc8:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000fd2:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c

	TASK->State=Suspend;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000260 	.word	0x20000260
 8000fec:	20000bf8 	.word	0x20000bf8

08000ff0 <ALSHREIF_RTOS_INIT>:
//=============================== RTOS_INIT =====================================
OS_ERRORS ALSHREIF_RTOS_INIT(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
	OS_ERRORS error =no_error;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	//os mode
	OS_CONTROL.OS_MODE=OS_Suspend;
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <ALSHREIF_RTOS_INIT+0x54>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//main stack of os
	ALSHREIF_CREATE_MAIN_STACK();
 8001002:	f7ff ff9b 	bl	8000f3c <ALSHREIF_CREATE_MAIN_STACK>
	//init ready queue
	OS_FIFO_INIT(&READY_QUEUE,READY_QUEUE_TABLE, TASKS_NUMPER_DEFINE);
 8001006:	2264      	movs	r2, #100	; 0x64
 8001008:	490f      	ldr	r1, [pc, #60]	; (8001048 <ALSHREIF_RTOS_INIT+0x58>)
 800100a:	4810      	ldr	r0, [pc, #64]	; (800104c <ALSHREIF_RTOS_INIT+0x5c>)
 800100c:	f7ff fea2 	bl	8000d54 <OS_FIFO_INIT>
	//create idle task
	strcpy(IDLE_TASK.NAME,"idle task");
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <ALSHREIF_RTOS_INIT+0x60>)
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <ALSHREIF_RTOS_INIT+0x64>)
 8001014:	ca07      	ldmia	r2, {r0, r1, r2}
 8001016:	c303      	stmia	r3!, {r0, r1}
 8001018:	801a      	strh	r2, [r3, #0]
	IDLE_TASK.priority=255;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <ALSHREIF_RTOS_INIT+0x68>)
 800101c:	22ff      	movs	r2, #255	; 0xff
 800101e:	711a      	strb	r2, [r3, #4]
	IDLE_TASK.TASK_FUNCTION=idle_task_fun;
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <ALSHREIF_RTOS_INIT+0x68>)
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <ALSHREIF_RTOS_INIT+0x6c>)
 8001024:	609a      	str	r2, [r3, #8]
	IDLE_TASK.stack_size=100;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <ALSHREIF_RTOS_INIT+0x68>)
 8001028:	2264      	movs	r2, #100	; 0x64
 800102a:	601a      	str	r2, [r3, #0]

	ALSHREIF_RTOS_CREAT_TASK(&IDLE_TASK);
 800102c:	480a      	ldr	r0, [pc, #40]	; (8001058 <ALSHREIF_RTOS_INIT+0x68>)
 800102e:	f7ff ffa3 	bl	8000f78 <ALSHREIF_RTOS_CREAT_TASK>

	IDLE_TASK.State=Suspend;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <ALSHREIF_RTOS_INIT+0x68>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	return error;
 800103a:	79fb      	ldrb	r3, [r7, #7]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000260 	.word	0x20000260
 8001048:	200000d0 	.word	0x200000d0
 800104c:	2000043c 	.word	0x2000043c
 8001050:	20000424 	.word	0x20000424
 8001054:	080051e0 	.word	0x080051e0
 8001058:	2000040c 	.word	0x2000040c
 800105c:	08000ea5 	.word	0x08000ea5

08001060 <shell_sort>:
				OS_CONTROL.OS_TASKS[j+1] = temp ;
			}

}

void shell_sort() {
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
	unsigned int i, j, n, gap;
	TASK_FRAME_t *temp;
	n = OS_CONTROL.NUMBER_OF_TASKS;
 8001066:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <shell_sort+0x94>)
 8001068:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 800106c:	60bb      	str	r3, [r7, #8]
	for (gap = n / 2; gap > 0; gap /= 2) {
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	085b      	lsrs	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e036      	b.n	80010e4 <shell_sort+0x84>
		for (i = gap; i < n; i++) {
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	e02c      	b.n	80010d6 <shell_sort+0x76>
			temp = OS_CONTROL.OS_TASKS[i];
 800107c:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <shell_sort+0x94>)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	607b      	str	r3, [r7, #4]
			for (j = i; j >= gap && OS_CONTROL.OS_TASKS[j - gap]->priority > temp->priority; j -= gap) {
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	e00d      	b.n	80010a8 <shell_sort+0x48>
				OS_CONTROL.OS_TASKS[j] = OS_CONTROL.OS_TASKS[j - gap];
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <shell_sort+0x94>)
 8001094:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001098:	4916      	ldr	r1, [pc, #88]	; (80010f4 <shell_sort+0x94>)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (j = i; j >= gap && OS_CONTROL.OS_TASKS[j - gap]->priority > temp->priority; j -= gap) {
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d30a      	bcc.n	80010c6 <shell_sort+0x66>
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <shell_sort+0x94>)
 80010b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010bc:	791a      	ldrb	r2, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	791b      	ldrb	r3, [r3, #4]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d8e2      	bhi.n	800108c <shell_sort+0x2c>
			}
			OS_CONTROL.OS_TASKS[j] = temp;
 80010c6:	490b      	ldr	r1, [pc, #44]	; (80010f4 <shell_sort+0x94>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = gap; i < n; i++) {
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d3ce      	bcc.n	800107c <shell_sort+0x1c>
	for (gap = n / 2; gap > 0; gap /= 2) {
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	085b      	lsrs	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1c5      	bne.n	8001076 <shell_sort+0x16>
		}
	}
}
 80010ea:	bf00      	nop
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	20000260 	.word	0x20000260

080010f8 <free_the_FIFO>:
//=====================

void free_the_FIFO(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
	TASK_FRAME_t* temp;//Because I went to pointer to pointer **
	while(OS_FIFO_DEQUEUE(&READY_QUEUE,&temp) !=FIFO_EMPTY){//Address of the pointer
 80010fe:	bf00      	nop
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4619      	mov	r1, r3
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <free_the_FIFO+0x20>)
 8001106:	f7ff fe8b 	bl	8000e20 <OS_FIFO_DEQUEUE>
 800110a:	4603      	mov	r3, r0
 800110c:	2b03      	cmp	r3, #3
 800110e:	d1f7      	bne.n	8001100 <free_the_FIFO+0x8>

	}
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000043c 	.word	0x2000043c

0800111c <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>:
//=====================

void ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
	//=====================
	TASK_FRAME_t *NEXT_TASK,*CURENT_TASK;
	uint8_t i=0;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
	//=====================
	shell_sort();//Rearrange  the SCEDULER table
 8001126:	f7ff ff9b 	bl	8001060 <shell_sort>
	//=====================
	free_the_FIFO(); //free the FIFO
 800112a:	f7ff ffe5 	bl	80010f8 <free_the_FIFO>

	//=====================
	//update the FIFO
	while(i<OS_CONTROL.NUMBER_OF_TASKS)
 800112e:	e03d      	b.n	80011ac <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x90>
	{
		CURENT_TASK=OS_CONTROL.OS_TASKS[i];
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001138:	60bb      	str	r3, [r7, #8]
		NEXT_TASK=OS_CONTROL.OS_TASKS[i+1];
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	3301      	adds	r3, #1
 800113e:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	607b      	str	r3, [r7, #4]

		/*
		 * <<I need only the highest  priority element or all  equal highest priority >>
		 */

		if(CURENT_TASK->State!=Suspend){
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800114c:	2b00      	cmp	r3, #0
 800114e:	d02a      	beq.n	80011a6 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x8a>
			 * Suspend
			 * wait
			 * >>i++
			 */

			if(NEXT_TASK->State==Suspend){//Suspend or NULL don not care it is the same =0
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001156:	2b00      	cmp	r3, #0
 8001158:	d108      	bne.n	800116c <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x50>
				/*
				 * wait go to the fifo
				 * Suspend
				 * */

				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	481a      	ldr	r0, [pc, #104]	; (80011c8 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 800115e:	f7ff fe1c 	bl	8000d9a <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2202      	movs	r2, #2
 8001166:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				break;
 800116a:	e026      	b.n	80011ba <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x9e>
			/*
			 * wait priority =0 >>>go to the fifo
			 * wait priority= 1
			 *
			 * */
			if(CURENT_TASK->priority < NEXT_TASK->priority){
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	791a      	ldrb	r2, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	791b      	ldrb	r3, [r3, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	d208      	bcs.n	800118a <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x6e>
				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	4813      	ldr	r0, [pc, #76]	; (80011c8 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 800117c:	f7ff fe0d 	bl	8000d9a <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2202      	movs	r2, #2
 8001184:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				break;
 8001188:	e017      	b.n	80011ba <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x9e>
			 * wait priority =1  go to the fifo
			 * wait priority= 1  go to the fifo
			 *
			 * >>> round robin
			 * */
			else if(CURENT_TASK->priority == NEXT_TASK->priority){
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	791a      	ldrb	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	791b      	ldrb	r3, [r3, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d107      	bne.n	80011a6 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x8a>
				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 8001196:	68b9      	ldr	r1, [r7, #8]
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 800119a:	f7ff fdfe 	bl	8000d9a <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	2202      	movs	r2, #2
 80011a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			}

		}


		i++;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	3301      	adds	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
	while(i<OS_CONTROL.NUMBER_OF_TASKS)
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 80011b2:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3ba      	bcc.n	8001130 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x14>
	}
	//end while
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000260 	.word	0x20000260
 80011c8:	2000043c 	.word	0x2000043c

080011cc <OS_SVC_SET>:

//======================================== SVC =====================================================

void OS_SVC_SET(_SVC_ID ID){
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	//OS_SVC_SERVICES
	switch(ID){
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d006      	beq.n	80011ea <OS_SVC_SET+0x1e>
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d006      	beq.n	80011ee <OS_SVC_SET+0x22>
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d000      	beq.n	80011e6 <OS_SVC_SET+0x1a>
		break;
	case SVC_Wating_task:
		__asm("SVC #0x02");//wating
		break;
	}
}
 80011e4:	e005      	b.n	80011f2 <OS_SVC_SET+0x26>
		__asm("SVC #0x0");//ACTIVAT
 80011e6:	df00      	svc	0
		break;
 80011e8:	e003      	b.n	80011f2 <OS_SVC_SET+0x26>
		__asm("SVC #0x01");//TERMINATE
 80011ea:	df01      	svc	1
		break;
 80011ec:	e001      	b.n	80011f2 <OS_SVC_SET+0x26>
		__asm("SVC #0x02");//wating
 80011ee:	df02      	svc	2
		break;
 80011f0:	bf00      	nop
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <OS_WHATE_NEXT>:
//=====================
void OS_WHATE_NEXT(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0

	if((READY_QUEUE.count==0)){
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <OS_WHATE_NEXT+0xb0>)
 8001202:	899b      	ldrh	r3, [r3, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d122      	bne.n	800124e <OS_WHATE_NEXT+0x52>
		//if fifo empty
		if((OS_CONTROL.CURENT_TASK->State==Suspend||OS_CONTROL.CURENT_TASK->State==Running||OS_CONTROL.CURENT_TASK->State==Wating)){
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <OS_WHATE_NEXT+0xb4>)
 800120a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800120e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00d      	beq.n	8001232 <OS_WHATE_NEXT+0x36>
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <OS_WHATE_NEXT+0xb4>)
 8001218:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800121c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001220:	2b03      	cmp	r3, #3
 8001222:	d006      	beq.n	8001232 <OS_WHATE_NEXT+0x36>
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <OS_WHATE_NEXT+0xb4>)
 8001226:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800122a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800122e:	2b01      	cmp	r3, #1
 8001230:	d13a      	bne.n	80012a8 <OS_WHATE_NEXT+0xac>
			//if CURENT_TASK Wating then it come from ALSHREIF_RTOS_ACTIVAT_TASK(task will be wait)
			//SysTick_Handler will cut it and enter here

			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK); //go to fifo
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <OS_WHATE_NEXT+0xb4>)
 8001234:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001238:	4619      	mov	r1, r3
 800123a:	481c      	ldr	r0, [pc, #112]	; (80012ac <OS_WHATE_NEXT+0xb0>)
 800123c:	f7ff fdad 	bl	8000d9a <OS_FIFO_ENQUEUE>
			OS_CONTROL.NEXT_TASK=OS_CONTROL.CURENT_TASK;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <OS_WHATE_NEXT+0xb4>)
 8001242:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001246:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <OS_WHATE_NEXT+0xb4>)
 8001248:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		if((OS_CONTROL.CURENT_TASK->priority==OS_CONTROL.NEXT_TASK->priority)&&(OS_CONTROL.CURENT_TASK->State!=Suspend)){
			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK);
			OS_CONTROL.CURENT_TASK->State=Ready;
		}
	}
}
 800124c:	e02c      	b.n	80012a8 <OS_WHATE_NEXT+0xac>
		if(READY_QUEUE.count==0){while(1);}//todo}
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <OS_WHATE_NEXT+0xb0>)
 8001250:	899b      	ldrh	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d100      	bne.n	8001258 <OS_WHATE_NEXT+0x5c>
 8001256:	e7fe      	b.n	8001256 <OS_WHATE_NEXT+0x5a>
		OS_FIFO_DEQUEUE(&READY_QUEUE,&OS_CONTROL.NEXT_TASK);
 8001258:	4916      	ldr	r1, [pc, #88]	; (80012b4 <OS_WHATE_NEXT+0xb8>)
 800125a:	4814      	ldr	r0, [pc, #80]	; (80012ac <OS_WHATE_NEXT+0xb0>)
 800125c:	f7ff fde0 	bl	8000e20 <OS_FIFO_DEQUEUE>
		OS_CONTROL.NEXT_TASK->State=Running;//not if fifo is empty it will access to zero pointer
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <OS_WHATE_NEXT+0xb4>)
 8001262:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001266:	2203      	movs	r2, #3
 8001268:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		if((OS_CONTROL.CURENT_TASK->priority==OS_CONTROL.NEXT_TASK->priority)&&(OS_CONTROL.CURENT_TASK->State!=Suspend)){
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <OS_WHATE_NEXT+0xb4>)
 800126e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001272:	791a      	ldrb	r2, [r3, #4]
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <OS_WHATE_NEXT+0xb4>)
 8001276:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800127a:	791b      	ldrb	r3, [r3, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	d113      	bne.n	80012a8 <OS_WHATE_NEXT+0xac>
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <OS_WHATE_NEXT+0xb4>)
 8001282:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001286:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00c      	beq.n	80012a8 <OS_WHATE_NEXT+0xac>
			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK);
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <OS_WHATE_NEXT+0xb4>)
 8001290:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001294:	4619      	mov	r1, r3
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <OS_WHATE_NEXT+0xb0>)
 8001298:	f7ff fd7f 	bl	8000d9a <OS_FIFO_ENQUEUE>
			OS_CONTROL.CURENT_TASK->State=Ready;
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <OS_WHATE_NEXT+0xb4>)
 800129e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80012a2:	2202      	movs	r2, #2
 80012a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000043c 	.word	0x2000043c
 80012b0:	20000260 	.word	0x20000260
 80012b4:	20000404 	.word	0x20000404

080012b8 <OS_SVC_SERVICES>:
//======================
void OS_SVC_SERVICES(int* STACK_FRAM_POINTER){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	uint8_t SVC_NUM;
	__asm(   "LDR r0,[r0,#24]\n\t"
 80012c0:	6980      	ldr	r0, [r0, #24]
 80012c2:	f810 0c02 	ldrb.w	r0, [r0, #-2]
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
			"LDRB r0,[r0,#-2]\n\t"
			"MOV %0,r0"
			:"=r"(SVC_NUM));
	//SVC_NUM=*((unsigned char*)(((unsigned char*)STACK_FRAM_POINTER[6])-2));
	switch(SVC_NUM){
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db1f      	blt.n	8001310 <OS_SVC_SERVICES+0x58>
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	dd02      	ble.n	80012da <OS_SVC_SERVICES+0x22>
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d017      	beq.n	8001308 <OS_SVC_SERVICES+0x50>
		break;

	}


}
 80012d8:	e01a      	b.n	8001310 <OS_SVC_SERVICES+0x58>
		ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES();//init to know the next task
 80012da:	f7ff ff1f 	bl	800111c <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>
		if(OS_CONTROL.OS_MODE==OS_Running){
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <OS_SVC_SERVICES+0x60>)
 80012e0:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d112      	bne.n	800130e <OS_SVC_SERVICES+0x56>
			if(strcmp(OS_CONTROL.CURENT_TASK->NAME,"idle task")!=0){
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <OS_SVC_SERVICES+0x60>)
 80012ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80012ee:	3318      	adds	r3, #24
 80012f0:	490a      	ldr	r1, [pc, #40]	; (800131c <OS_SVC_SERVICES+0x64>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7fe ff3c 	bl	8000170 <strcmp>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d007      	beq.n	800130e <OS_SVC_SERVICES+0x56>
				OS_WHATE_NEXT();//to know the next task
 80012fe:	f7ff ff7d 	bl	80011fc <OS_WHATE_NEXT>
				OS_TRIGDER_PENDSV();//to make context switching
 8001302:	f7ff fd11 	bl	8000d28 <OS_TRIGDER_PENDSV>
		break;
 8001306:	e002      	b.n	800130e <OS_SVC_SERVICES+0x56>
		ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES();//init to know the next task
 8001308:	f7ff ff08 	bl	800111c <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>
		break;
 800130c:	e000      	b.n	8001310 <OS_SVC_SERVICES+0x58>
		break;
 800130e:	bf00      	nop
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000260 	.word	0x20000260
 800131c:	080051e0 	.word	0x080051e0

08001320 <PendSV_Handler>:
	 * R2
	 * R1
	 * R0
	 * >>>>PSP current because it comes from thread mode
	 */
	OS_get_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT);//PSP-->_PSP_STACK_CURENT
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <PendSV_Handler+0x7c>)
 8001322:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001326:	f3ef 8009 	mrs	r0, PSP
 800132a:	4602      	mov	r2, r0
 800132c:	615a      	str	r2, [r3, #20]
	 * r9
	 * r10
	 * r11
	 * */
	//context SAVE
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT -= 8;
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <PendSV_Handler+0x7c>)
 8001330:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001334:	695a      	ldr	r2, [r3, #20]
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <PendSV_Handler+0x7c>)
 8001338:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800133c:	3a20      	subs	r2, #32
 800133e:	615a      	str	r2, [r3, #20]
	__asm volatile("stmia %0!, {r4-r11}" : : "r" (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT));
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <PendSV_Handler+0x7c>)
 8001342:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	e8a3 0ff0 	stmia.w	r3!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// now (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT) will save this address to the next execute of this task
	//and it will enter to make BACK context switching in the next call back :)

	//@context tasks
	if (OS_CONTROL.NEXT_TASK != NULL){
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <PendSV_Handler+0x7c>)
 800134e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <PendSV_Handler+0x4a>
		OS_CONTROL.CURENT_TASK = OS_CONTROL.NEXT_TASK;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <PendSV_Handler+0x7c>)
 8001358:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800135c:	4a0f      	ldr	r2, [pc, #60]	; (800139c <PendSV_Handler+0x7c>)
 800135e:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_CONTROL.NEXT_TASK = NULL ;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <PendSV_Handler+0x7c>)
 8001364:	2200      	movs	r2, #0
 8001366:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	 * r9
	 * r10
	 * r11
	 * */

	__asm volatile("ldmia %0!, {r4-r11}" : : "r" (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT));
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <PendSV_Handler+0x7c>)
 800136c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	e8b3 0ff0 	ldmia.w	r3!, {r4, r5, r6, r7, r8, r9, sl, fp}
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT += 8;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <PendSV_Handler+0x7c>)
 8001378:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <PendSV_Handler+0x7c>)
 8001380:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001384:	3220      	adds	r2, #32
 8001386:	615a      	str	r2, [r3, #20]
	 * R2
	 * R1
	 * R0
	 * >>>>PSP current because it comes from thread mode
	 */
	OS_set_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT);//we but the PSP with current psp to force the cpu making this task context
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <PendSV_Handler+0x7c>)
 800138a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	4618      	mov	r0, r3
 8001392:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");//make cpu context back
 8001396:	4770      	bx	lr
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	20000260 	.word	0x20000260

080013a0 <ALSHREIF_RTOS_ACTIVAT_TASK>:

//========================================================================================================



void ALSHREIF_RTOS_ACTIVAT_TASK(TASK_FRAME_t* CURENT_TASK,TASK_FRAME_t* TASK){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	if(!(TASK->wating_time.blocking==enable )){
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d00d      	beq.n	80013d0 <ALSHREIF_RTOS_ACTIVAT_TASK+0x30>
		if(CURENT_TASK!=NULL){
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <ALSHREIF_RTOS_ACTIVAT_TASK+0x22>
			CURENT_TASK->State=Wating;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		}
		TASK->State=Wating;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		OS_SVC_SET(SVC_ACTIVAT_task);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fefe 	bl	80011cc <OS_SVC_SET>
	}
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <ALSHREIF_RTOS_TERMINAT_TASK>:
void ALSHREIF_RTOS_TERMINAT_TASK(TASK_FRAME_t* TASK,void(*HOOK_FUNCTION)()){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	TASK->wating_time.blocking=disable;//when it in @ALSHREIF_RTOS_TASK_WAIT function it make it in suspend mode and the timer ticks make it run again
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
									  //even if we terminat the task so we need to disable wait blocking
	TASK->State=Suspend;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(HOOK_FUNCTION !=NULL){
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <ALSHREIF_RTOS_TERMINAT_TASK+0x24>
		HOOK_FUNCTION();
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4798      	blx	r3
	}
	OS_SVC_SET(SVC_TERMINATE_task);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff fee5 	bl	80011cc <OS_SVC_SET>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <ALSHREIF_RTOS_START_OS>:


//========================================================================================================

void ALSHREIF_RTOS_START_OS(){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	OS_CONTROL.OS_MODE=OS_Running;//mode
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <ALSHREIF_RTOS_START_OS+0x54>)
 8001412:	2201      	movs	r2, #1
 8001414:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	OS_CONTROL.CURENT_TASK=&IDLE_TASK;//set current task
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <ALSHREIF_RTOS_START_OS+0x54>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <ALSHREIF_RTOS_START_OS+0x58>)
 800141c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	ALSHREIF_RTOS_ACTIVAT_TASK(NULL,&IDLE_TASK);//activate idle task
 8001420:	4910      	ldr	r1, [pc, #64]	; (8001464 <ALSHREIF_RTOS_START_OS+0x58>)
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff ffbc 	bl	80013a0 <ALSHREIF_RTOS_ACTIVAT_TASK>
	TIMER_START();//set timer every one m second
 8001428:	f7ff fc8c 	bl	8000d44 <TIMER_START>
	OS_set_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_TOP);
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <ALSHREIF_RTOS_START_OS+0x54>)
 800142e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4618      	mov	r0, r3
 8001436:	f380 8809 	msr	PSP, r0
	OS_SP2_PSP;
 800143a:	f3ef 8014 	mrs	r0, CONTROL
 800143e:	f040 0002 	orr.w	r0, r0, #2
 8001442:	f380 8814 	msr	CONTROL, r0
	OS_CHANGE_CPU_UNPRIVILDEG;
 8001446:	f3ef 8314 	mrs	r3, CONTROL
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	f383 8814 	msr	CONTROL, r3

	OS_CONTROL.CURENT_TASK->TASK_FUNCTION();
 8001452:	4b03      	ldr	r3, [pc, #12]	; (8001460 <ALSHREIF_RTOS_START_OS+0x54>)
 8001454:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	4798      	blx	r3
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000260 	.word	0x20000260
 8001464:	2000040c 	.word	0x2000040c

08001468 <ALSHREIF_RTOS_WAITING_TIMING>:

//========================================================================================================
void ALSHREIF_RTOS_WAITING_TIMING(){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

	for(int i=0;i<OS_CONTROL.NUMBER_OF_TASKS;i++){
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	e02d      	b.n	80014d0 <ALSHREIF_RTOS_WAITING_TIMING+0x68>
		if(OS_CONTROL.OS_TASKS[i]->State==Suspend){
 8001474:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001480:	2b00      	cmp	r3, #0
 8001482:	d122      	bne.n	80014ca <ALSHREIF_RTOS_WAITING_TIMING+0x62>
			if(OS_CONTROL.OS_TASKS[i]->wating_time.blocking==enable){
 8001484:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001490:	2b01      	cmp	r3, #1
 8001492:	d11a      	bne.n	80014ca <ALSHREIF_RTOS_WAITING_TIMING+0x62>

				//@ref_sheck_time
				if((--OS_CONTROL.OS_TASKS[i]->wating_time.TICKS)==0){
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149e:	3a01      	subs	r2, #1
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d110      	bne.n	80014ca <ALSHREIF_RTOS_WAITING_TIMING+0x62>
					OS_CONTROL.OS_TASKS[i]->wating_time.blocking=disable;
 80014a8:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					OS_CONTROL.OS_TASKS[i]->State=Wating;
 80014b6:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

					OS_SVC_SET(SVC_Wating_task);
 80014c4:	2002      	movs	r0, #2
 80014c6:	f7ff fe81 	bl	80011cc <OS_SVC_SET>
	for(int i=0;i<OS_CONTROL.NUMBER_OF_TASKS;i++){
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 80014d2:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 80014d6:	461a      	mov	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4293      	cmp	r3, r2
 80014dc:	dbca      	blt.n	8001474 <ALSHREIF_RTOS_WAITING_TIMING+0xc>
				}
			}
		}
	}
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000260 	.word	0x20000260

080014ec <SysTick_Handler>:
//========================================================================================================

void SysTick_Handler(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	//=====
	OS_WHATE_NEXT();//to know the next task
 80014f0:	f7ff fe84 	bl	80011fc <OS_WHATE_NEXT>
	//=====
	OS_TRIGDER_PENDSV();//to make context switching
 80014f4:	f7ff fc18 	bl	8000d28 <OS_TRIGDER_PENDSV>
	//=====
	ALSHREIF_RTOS_WAITING_TIMING();
 80014f8:	f7ff ffb6 	bl	8001468 <ALSHREIF_RTOS_WAITING_TIMING>
	//=====
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <ALSHREIF_RTOS_TASK_WAIT>:
//========================================================================================================

void ALSHREIF_RTOS_TASK_WAIT(TASK_FRAME_t* TASK,uint32_t ticks_of_SysTick_Handler){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	TASK->wating_time.blocking=enable;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TASK->wating_time.TICKS=ticks_of_SysTick_Handler;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
	TASK->State=Suspend;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	OS_SVC_SET(SVC_TERMINATE_task);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fe53 	bl	80011cc <OS_SVC_SET>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <getposition+0x14>
		rval =0;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <getposition+0x1e>
		rval =4;
 8001548:	2304      	movs	r3, #4
 800154a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d101      	bne.n	8001556 <getposition+0x28>
		rval =8;
 8001552:	2308      	movs	r3, #8
 8001554:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d101      	bne.n	8001560 <getposition+0x32>
		rval =12;
 800155c:	230c      	movs	r3, #12
 800155e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	2b04      	cmp	r3, #4
 8001564:	d101      	bne.n	800156a <getposition+0x3c>
		rval =16;
 8001566:	2310      	movs	r3, #16
 8001568:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d101      	bne.n	8001574 <getposition+0x46>
		rval =20;
 8001570:	2314      	movs	r3, #20
 8001572:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	2b06      	cmp	r3, #6
 8001578:	d101      	bne.n	800157e <getposition+0x50>
		rval =24;
 800157a:	2318      	movs	r3, #24
 800157c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	2b07      	cmp	r3, #7
 8001582:	d101      	bne.n	8001588 <getposition+0x5a>
		rval =28;
 8001584:	231c      	movs	r3, #28
 8001586:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	2b08      	cmp	r3, #8
 800158c:	d101      	bne.n	8001592 <getposition+0x64>
		rval =0;
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	2b09      	cmp	r3, #9
 8001596:	d101      	bne.n	800159c <getposition+0x6e>
		rval =4;
 8001598:	2304      	movs	r3, #4
 800159a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	2b0a      	cmp	r3, #10
 80015a0:	d101      	bne.n	80015a6 <getposition+0x78>
		rval =8;
 80015a2:	2308      	movs	r3, #8
 80015a4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	2b0b      	cmp	r3, #11
 80015aa:	d101      	bne.n	80015b0 <getposition+0x82>
		rval =12;
 80015ac:	230c      	movs	r3, #12
 80015ae:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	2b0c      	cmp	r3, #12
 80015b4:	d101      	bne.n	80015ba <getposition+0x8c>
		rval =16;
 80015b6:	2310      	movs	r3, #16
 80015b8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	2b0d      	cmp	r3, #13
 80015be:	d101      	bne.n	80015c4 <getposition+0x96>
		rval =20;
 80015c0:	2314      	movs	r3, #20
 80015c2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	2b0e      	cmp	r3, #14
 80015c8:	d101      	bne.n	80015ce <getposition+0xa0>
		rval =24;
 80015ca:	2318      	movs	r3, #24
 80015cc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d101      	bne.n	80015d8 <getposition+0xaa>
		rval =28;
 80015d4:	231c      	movs	r3, #28
 80015d6:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]


}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	460b      	mov	r3, r1
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4a69      	ldr	r2, [pc, #420]	; (800179c <pinmode+0x1b8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d106      	bne.n	8001608 <pinmode+0x24>
		GPIOA_Clock_Enable();
 80015fa:	4b69      	ldr	r3, [pc, #420]	; (80017a0 <pinmode+0x1bc>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	4a68      	ldr	r2, [pc, #416]	; (80017a0 <pinmode+0x1bc>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6193      	str	r3, [r2, #24]
 8001606:	e010      	b.n	800162a <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4a66      	ldr	r2, [pc, #408]	; (80017a4 <pinmode+0x1c0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d106      	bne.n	800161e <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8001610:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <pinmode+0x1bc>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a62      	ldr	r2, [pc, #392]	; (80017a0 <pinmode+0x1bc>)
 8001616:	f043 0308 	orr.w	r3, r3, #8
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	e005      	b.n	800162a <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 800161e:	4b60      	ldr	r3, [pc, #384]	; (80017a0 <pinmode+0x1bc>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	4a5f      	ldr	r2, [pc, #380]	; (80017a0 <pinmode+0x1bc>)
 8001624:	f043 0310 	orr.w	r3, r3, #16
 8001628:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 800162a:	897b      	ldrh	r3, [r7, #10]
 800162c:	2b07      	cmp	r3, #7
 800162e:	d856      	bhi.n	80016de <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 8001630:	897b      	ldrh	r3, [r7, #10]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff7b 	bl	800152e <getposition>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	230f      	movs	r3, #15
 800163e:	4093      	lsls	r3, r2
 8001640:	43da      	mvns	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	401a      	ands	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b08      	cmp	r3, #8
 8001650:	d002      	beq.n	8001658 <pinmode+0x74>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b18      	cmp	r3, #24
 8001656:	d133      	bne.n	80016c0 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b18      	cmp	r3, #24
 800165c:	d117      	bne.n	800168e <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 800165e:	897b      	ldrh	r3, [r7, #10]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff64 	bl	800152e <getposition>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	2308      	movs	r3, #8
 800166c:	fa03 f202 	lsl.w	r2, r3, r2
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	431a      	orrs	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	897a      	ldrh	r2, [r7, #10]
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	431a      	orrs	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800168c:	e081      	b.n	8001792 <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 800168e:	897b      	ldrh	r3, [r7, #10]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff4c 	bl	800152e <getposition>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	2308      	movs	r3, #8
 800169c:	fa03 f202 	lsl.w	r2, r3, r2
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	897a      	ldrh	r2, [r7, #10]
 80016b0:	2101      	movs	r1, #1
 80016b2:	fa01 f202 	lsl.w	r2, r1, r2
 80016b6:	43d2      	mvns	r2, r2
 80016b8:	401a      	ands	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80016be:	e068      	b.n	8001792 <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 80016c0:	897b      	ldrh	r3, [r7, #10]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff33 	bl	800152e <getposition>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	fa03 f202 	lsl.w	r2, r3, r2
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	601a      	str	r2, [r3, #0]

	}



}
 80016dc:	e059      	b.n	8001792 <pinmode+0x1ae>
	else if(pin>7){
 80016de:	897b      	ldrh	r3, [r7, #10]
 80016e0:	2b07      	cmp	r3, #7
 80016e2:	d956      	bls.n	8001792 <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 80016e4:	897b      	ldrh	r3, [r7, #10]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff21 	bl	800152e <getposition>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	230f      	movs	r3, #15
 80016f2:	4093      	lsls	r3, r2
 80016f4:	43da      	mvns	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	401a      	ands	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b08      	cmp	r3, #8
 8001704:	d002      	beq.n	800170c <pinmode+0x128>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b18      	cmp	r3, #24
 800170a:	d133      	bne.n	8001774 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b18      	cmp	r3, #24
 8001710:	d117      	bne.n	8001742 <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8001712:	897b      	ldrh	r3, [r7, #10]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff0a 	bl	800152e <getposition>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	2308      	movs	r3, #8
 8001720:	fa03 f202 	lsl.w	r2, r3, r2
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	431a      	orrs	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	897a      	ldrh	r2, [r7, #10]
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f202 	lsl.w	r2, r1, r2
 800173a:	431a      	orrs	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001740:	e027      	b.n	8001792 <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8001742:	897b      	ldrh	r3, [r7, #10]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fef2 	bl	800152e <getposition>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	2308      	movs	r3, #8
 8001750:	fa03 f202 	lsl.w	r2, r3, r2
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	431a      	orrs	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	897a      	ldrh	r2, [r7, #10]
 8001764:	2101      	movs	r1, #1
 8001766:	fa01 f202 	lsl.w	r2, r1, r2
 800176a:	43d2      	mvns	r2, r2
 800176c:	401a      	ands	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001772:	e00e      	b.n	8001792 <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8001774:	897b      	ldrh	r3, [r7, #10]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fed9 	bl	800152e <getposition>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	fa03 f202 	lsl.w	r2, r3, r2
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	431a      	orrs	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	605a      	str	r2, [r3, #4]
}
 8001790:	e7ff      	b.n	8001792 <pinmode+0x1ae>
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40010800 	.word	0x40010800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010c00 	.word	0x40010c00

080017a8 <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_typeDef* GPIOx,uint16_t pin,uint8_t status){
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	807b      	strh	r3, [r7, #2]
 80017b4:	4613      	mov	r3, r2
 80017b6:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 80017b8:	787b      	ldrb	r3, [r7, #1]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <pinwrite+0x2a>
		GPIOx->GPIOx_ODR |=(1<<pin);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->GPIOx_ODR &=~(1<<pin);

}
 80017d0:	e009      	b.n	80017e6 <pinwrite+0x3e>
	else GPIOx->GPIOx_ODR &=~(1<<pin);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	43d2      	mvns	r2, r2
 80017e0:	401a      	ands	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60da      	str	r2, [r3, #12]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <READ_PIN>:
 * @param [in]      - Pin: GPIOx PIN Number
 * @retval          - uint8_t
 * Note             - none
 */

uint8_t READ_PIN(GPIO_typeDef* GPIOx, uint16_t pin){
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
	return (GPIOx->GPIOx_IDR>>pin)&1;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	fa22 f303 	lsr.w	r3, r2, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <TogglePin>:
uint16_t READ_PORT(GPIO_typeDef* GPIOx){

	return GPIOx->GPIOx_IDR;
}

void TogglePin(GPIO_typeDef* GPIOx, uint16_t pin){
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIOx_ODR ^=(1<<pin);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	887a      	ldrh	r2, [r7, #2]
 800182a:	2101      	movs	r1, #1
 800182c:	fa01 f202 	lsl.w	r2, r1, r2
 8001830:	405a      	eors	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60da      	str	r2, [r3, #12]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <SPWM_timer_INIT+0x100>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <SPWM_timer_INIT+0x100>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0201 	bic.w	r2, r2, #1
 800185c:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d12f      	bne.n	80018c4 <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <SPWM_timer_INIT+0x100>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699a      	ldr	r2, [r3, #24]
 800186a:	4b35      	ldr	r3, [pc, #212]	; (8001940 <SPWM_timer_INIT+0x100>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001872:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <SPWM_timer_INIT+0x100>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <SPWM_timer_INIT+0x100>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001882:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8001884:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <SPWM_timer_INIT+0x100>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699a      	ldr	r2, [r3, #24]
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <SPWM_timer_INIT+0x100>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0208 	orr.w	r2, r2, #8
 8001892:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <SPWM_timer_INIT+0x100>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699a      	ldr	r2, [r3, #24]
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <SPWM_timer_INIT+0x100>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80018a2:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 80018a4:	4b26      	ldr	r3, [pc, #152]	; (8001940 <SPWM_timer_INIT+0x100>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6a1a      	ldr	r2, [r3, #32]
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <SPWM_timer_INIT+0x100>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0210 	orr.w	r2, r2, #16
 80018b2:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <SPWM_timer_INIT+0x100>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <SPWM_timer_INIT+0x100>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <SPWM_timer_INIT+0x100>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <SPWM_timer_INIT+0x100>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018d2:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <SPWM_timer_INIT+0x100>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <SPWM_timer_INIT+0x100>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <SPWM_timer_INIT+0x100>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <SPWM_timer_INIT+0x100>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <SPWM_timer_INIT+0x100>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <SPWM_timer_INIT+0x100>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001902:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <SPWM_timer_INIT+0x100>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <SPWM_timer_INIT+0x100>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <SPWM_timer_INIT+0x100>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <SPWM_timer_INIT+0x100>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SPWM_timer_INIT+0x100>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SPWM_timer_INIT+0x100>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000000 	.word	0x20000000

08001944 <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <TIM2_IRQHandler+0x34>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <TIM2_IRQHandler+0x34>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <TIM2_IRQHandler+0x38>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <TIM2_IRQHandler+0x34>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <TIM2_IRQHandler+0x34>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0201 	bic.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]

}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	2000001c 	.word	0x2000001c
 800197c:	20000018 	.word	0x20000018

08001980 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <TIM3_IRQHandler+0x6c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d119      	bne.n	80019c0 <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 800198c:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <TIM3_IRQHandler+0x70>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <TIM3_IRQHandler+0x70>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <TIM3_IRQHandler+0x74>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <TIM3_IRQHandler+0x74>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <TIM3_IRQHandler+0x74>)
 80019a8:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 80019aa:	e01c      	b.n	80019e6 <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <TIM3_IRQHandler+0x6c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <TIM3_IRQHandler+0x70>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <TIM3_IRQHandler+0x70>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6013      	str	r3, [r2, #0]
}
 80019be:	e012      	b.n	80019e6 <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <TIM3_IRQHandler+0x78>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <TIM3_IRQHandler+0x78>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <TIM3_IRQHandler+0x78>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <TIM3_IRQHandler+0x78>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <TIM3_IRQHandler+0x7c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4798      	blx	r3
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200000ac 	.word	0x200000ac
 80019f0:	40000400 	.word	0x40000400
 80019f4:	200000a8 	.word	0x200000a8
 80019f8:	20000458 	.word	0x20000458
 80019fc:	2000044c 	.word	0x2000044c

08001a00 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <TIM4_IRQHandler+0x24>)
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <TIM4_IRQHandler+0x24>)
 8001a0a:	f023 0301 	bic.w	r3, r3, #1
 8001a0e:	6113      	str	r3, [r2, #16]
	overflowtims++;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <TIM4_IRQHandler+0x28>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <TIM4_IRQHandler+0x28>)
 8001a1a:	801a      	strh	r2, [r3, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40000800 	.word	0x40000800
 8001a28:	200000a6 	.word	0x200000a6

08001a2c <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 8001a30:	4b5d      	ldr	r3, [pc, #372]	; (8001ba8 <TIM1_UP_IRQHandler+0x17c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <TIM1_UP_IRQHandler+0x180>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d911      	bls.n	8001a60 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 8001a3c:	4b5c      	ldr	r3, [pc, #368]	; (8001bb0 <TIM1_UP_IRQHandler+0x184>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
		flage1=0;
 8001a42:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <TIM1_UP_IRQHandler+0x188>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 8001a48:	4b58      	ldr	r3, [pc, #352]	; (8001bac <TIM1_UP_IRQHandler+0x180>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a5a      	ldr	r2, [pc, #360]	; (8001bb8 <TIM1_UP_IRQHandler+0x18c>)
 8001a4e:	7812      	ldrb	r2, [r2, #0]
 8001a50:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a54:	4b55      	ldr	r3, [pc, #340]	; (8001bac <TIM1_UP_IRQHandler+0x180>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a53      	ldr	r2, [pc, #332]	; (8001ba8 <TIM1_UP_IRQHandler+0x17c>)
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e018      	b.n	8001a92 <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 8001a60:	4b51      	ldr	r3, [pc, #324]	; (8001ba8 <TIM1_UP_IRQHandler+0x17c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b63      	cmp	r3, #99	; 0x63
 8001a66:	d814      	bhi.n	8001a92 <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 8001a68:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <TIM1_UP_IRQHandler+0x184>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
		flage1=1;
 8001a6e:	4b51      	ldr	r3, [pc, #324]	; (8001bb4 <TIM1_UP_IRQHandler+0x188>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 8001a74:	4b51      	ldr	r3, [pc, #324]	; (8001bbc <TIM1_UP_IRQHandler+0x190>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	f083 0301 	eor.w	r3, r3, #1
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4b4f      	ldr	r3, [pc, #316]	; (8001bbc <TIM1_UP_IRQHandler+0x190>)
 8001a80:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 8001a82:	4b4a      	ldr	r3, [pc, #296]	; (8001bac <TIM1_UP_IRQHandler+0x180>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a4c      	ldr	r2, [pc, #304]	; (8001bb8 <TIM1_UP_IRQHandler+0x18c>)
 8001a88:	7812      	ldrb	r2, [r2, #0]
 8001a8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a8e:	4a46      	ldr	r2, [pc, #280]	; (8001ba8 <TIM1_UP_IRQHandler+0x17c>)
 8001a90:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 8001a92:	4b4a      	ldr	r3, [pc, #296]	; (8001bbc <TIM1_UP_IRQHandler+0x190>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d110      	bne.n	8001abc <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 8001a9a:	4b49      	ldr	r3, [pc, #292]	; (8001bc0 <TIM1_UP_IRQHandler+0x194>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <TIM1_UP_IRQHandler+0x194>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0201 	bic.w	r2, r2, #1
 8001aa8:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 8001aaa:	4b45      	ldr	r3, [pc, #276]	; (8001bc0 <TIM1_UP_IRQHandler+0x194>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6a1a      	ldr	r2, [r3, #32]
 8001ab0:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <TIM1_UP_IRQHandler+0x194>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0210 	orr.w	r2, r2, #16
 8001ab8:	621a      	str	r2, [r3, #32]
 8001aba:	e013      	b.n	8001ae4 <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 8001abc:	4b3f      	ldr	r3, [pc, #252]	; (8001bbc <TIM1_UP_IRQHandler+0x190>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10f      	bne.n	8001ae4 <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 8001ac4:	4b3e      	ldr	r3, [pc, #248]	; (8001bc0 <TIM1_UP_IRQHandler+0x194>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6a1a      	ldr	r2, [r3, #32]
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <TIM1_UP_IRQHandler+0x194>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0210 	bic.w	r2, r2, #16
 8001ad2:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <TIM1_UP_IRQHandler+0x194>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	4b39      	ldr	r3, [pc, #228]	; (8001bc0 <TIM1_UP_IRQHandler+0x194>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 8001ae4:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <TIM1_UP_IRQHandler+0x188>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d11c      	bne.n	8001b26 <TIM1_UP_IRQHandler+0xfa>
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <TIM1_UP_IRQHandler+0x184>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d118      	bne.n	8001b26 <TIM1_UP_IRQHandler+0xfa>
		top=c;
 8001af4:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <TIM1_UP_IRQHandler+0x198>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a2c      	ldr	r2, [pc, #176]	; (8001bac <TIM1_UP_IRQHandler+0x180>)
 8001afa:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8001afc:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <TIM1_UP_IRQHandler+0x19c>)
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <TIM1_UP_IRQHandler+0x17c>)
 8001b02:	6819      	ldr	r1, [r3, #0]
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <TIM1_UP_IRQHandler+0x180>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f7ff fe99 	bl	8001840 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <TIM1_UP_IRQHandler+0x180>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a29      	ldr	r2, [pc, #164]	; (8001bb8 <TIM1_UP_IRQHandler+0x18c>)
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b1a:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <TIM1_UP_IRQHandler+0x17c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <TIM1_UP_IRQHandler+0x17c>)
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e035      	b.n	8001b92 <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <TIM1_UP_IRQHandler+0x184>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d129      	bne.n	8001b82 <TIM1_UP_IRQHandler+0x156>
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <TIM1_UP_IRQHandler+0x188>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d125      	bne.n	8001b82 <TIM1_UP_IRQHandler+0x156>
		top=c;
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <TIM1_UP_IRQHandler+0x198>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <TIM1_UP_IRQHandler+0x180>)
 8001b3c:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <TIM1_UP_IRQHandler+0x17c>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <TIM1_UP_IRQHandler+0x180>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	491c      	ldr	r1, [pc, #112]	; (8001bb8 <TIM1_UP_IRQHandler+0x18c>)
 8001b48:	7809      	ldrb	r1, [r1, #0]
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <TIM1_UP_IRQHandler+0x17c>)
 8001b52:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <TIM1_UP_IRQHandler+0x19c>)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <TIM1_UP_IRQHandler+0x17c>)
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <TIM1_UP_IRQHandler+0x180>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2301      	movs	r3, #1
 8001b62:	f7ff fe6d 	bl	8001840 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <TIM1_UP_IRQHandler+0x180>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <TIM1_UP_IRQHandler+0x18c>)
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <TIM1_UP_IRQHandler+0x17c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d10b      	bne.n	8001b92 <TIM1_UP_IRQHandler+0x166>
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <TIM1_UP_IRQHandler+0x17c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e007      	b.n	8001b92 <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <TIM1_UP_IRQHandler+0x194>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <TIM1_UP_IRQHandler+0x194>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <TIM1_UP_IRQHandler+0x194>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <TIM1_UP_IRQHandler+0x194>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	611a      	str	r2, [r3, #16]
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000014 	.word	0x20000014
 8001bac:	20000008 	.word	0x20000008
 8001bb0:	200000a5 	.word	0x200000a5
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	20000454 	.word	0x20000454
 8001bbc:	20000005 	.word	0x20000005
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000010 	.word	0x20000010
 8001bc8:	2000000c 	.word	0x2000000c

08001bcc <MCAL_speed_init>:
 *      Author: mo
 */

#include "stm32_speed_DRIVER.h"

void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d139      	bne.n	8001c56 <MCAL_speed_init+0x8a>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d175      	bne.n	8001cd4 <MCAL_speed_init+0x108>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 8001be8:	4b3d      	ldr	r3, [pc, #244]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4a3c      	ldr	r2, [pc, #240]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf2:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 8001bf4:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4a39      	ldr	r2, [pc, #228]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001bfa:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001bfe:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 8001c00:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a36      	ldr	r2, [pc, #216]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c06:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001c0a:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001c0c:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a33      	ldr	r2, [pc, #204]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c16:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 8001c18:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4a30      	ldr	r2, [pc, #192]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c1e:	f023 0303 	bic.w	r3, r3, #3
 8001c22:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8001c24:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a2d      	ldr	r2, [pc, #180]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4a2a      	ldr	r2, [pc, #168]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c3a:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a27      	ldr	r2, [pc, #156]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c42:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c46:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a24      	ldr	r2, [pc, #144]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c52:	6053      	str	r3, [r2, #4]

		}
	}


}
 8001c54:	e03e      	b.n	8001cd4 <MCAL_speed_init+0x108>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 8001c56:	79bb      	ldrb	r3, [r7, #6]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d13b      	bne.n	8001cd4 <MCAL_speed_init+0x108>
			RCC->RCC_CR &=~(1<<18);
 8001c5c:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c66:	6013      	str	r3, [r2, #0]
			RCC->RCC_CR|=(1<<16);
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR|=(1<<16);
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7e:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a16      	ldr	r2, [pc, #88]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c86:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001c8a:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c96:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001c9e:	f023 0303 	bic.w	r3, r3, #3
 8001ca2:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cba:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001cc2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001cc6:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <MCAL_speed_init+0x114>)
 8001cce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cd2:	6053      	str	r3, [r2, #4]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <ADC_INIT>:
#include "stm32f103c6_ADC.h"


uint8_t flag_ADC_INIT=0;

void ADC_INIT(ADC_typeDef* ADCx,uint8_t ADC_STATE_){
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]

	if(ADC_STATE_==ADC_STATE_START){
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d132      	bne.n	8001d5c <ADC_INIT+0x78>
		if(ADCx==ADC1){
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <ADC_INIT+0xac>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d106      	bne.n	8001d0c <ADC_INIT+0x28>
			ADC1_Clock_Enable();
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <ADC_INIT+0xb0>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a24      	ldr	r2, [pc, #144]	; (8001d94 <ADC_INIT+0xb0>)
 8001d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	e009      	b.n	8001d20 <ADC_INIT+0x3c>
		}
		else if(ADCx==ADC2){
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <ADC_INIT+0xb4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d105      	bne.n	8001d20 <ADC_INIT+0x3c>
			ADC2_Clock_Enable();
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <ADC_INIT+0xb0>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a1e      	ldr	r2, [pc, #120]	; (8001d94 <ADC_INIT+0xb0>)
 8001d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1e:	6193      	str	r3, [r2, #24]
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f043 0201 	orr.w	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
		//		Bit 1 CONT: Continuous conversion
		//		This bit is set and cleared by software. If set conversion takes place continuously till this bit is
		//		reset.
		//		0: Single conversion mode
		//		1: Continuous conversion mode
		ADCx->ADC_CR2 &=~(1<<1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f023 0202 	bic.w	r2, r3, #2
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	609a      	str	r2, [r3, #8]
		//		Bit 2 CAL: A/D Calibration
		//		This bit is set by software to start the calibration. It is reset by hardware after calibration is
		//		complete.
		//		0: Calibration completed
		//		1: Enable calibratio
		ADCx->ADC_CR2 |=(1<<2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f043 0204 	orr.w	r2, r3, #4
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	609a      	str	r2, [r3, #8]
		while(((ADCx->ADC_CR2>>2)&1)){};
 8001d44:	bf00      	nop
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f8      	bne.n	8001d46 <ADC_INIT+0x62>


		flag_ADC_INIT=1;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <ADC_INIT+0xb8>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
		ADC2_Clock_DESABLE();
		flag_ADC_INIT=0;
	}


}
 8001d5a:	e014      	b.n	8001d86 <ADC_INIT+0xa2>
		ADCx->ADC_CR2 &=~(1<<0);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 0201 	bic.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]
		ADC1_Clock_DESABLE();
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <ADC_INIT+0xb0>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <ADC_INIT+0xb0>)
 8001d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d72:	60d3      	str	r3, [r2, #12]
		ADC2_Clock_DESABLE();
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <ADC_INIT+0xb0>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4a06      	ldr	r2, [pc, #24]	; (8001d94 <ADC_INIT+0xb0>)
 8001d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7e:	60d3      	str	r3, [r2, #12]
		flag_ADC_INIT=0;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <ADC_INIT+0xb8>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	40012400 	.word	0x40012400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40012800 	.word	0x40012800
 8001d9c:	200000ad 	.word	0x200000ad

08001da0 <ADC_READ>:





uint16_t ADC_READ(ADC_typeDef* ADCx,uint8_t ADC_pin){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
	if(flag_ADC_INIT){
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <ADC_READ+0x98>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d03b      	beq.n	8001e2c <ADC_READ+0x8c>

		if(ADC_pin<0b0111)
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d807      	bhi.n	8001dca <ADC_READ+0x2a>
			pinmode(GPIOA, ADC_pin, GPIO_MODE_ANALOG);
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	481e      	ldr	r0, [pc, #120]	; (8001e3c <ADC_READ+0x9c>)
 8001dc4:	f7ff fc0e 	bl	80015e4 <pinmode>
 8001dc8:	e006      	b.n	8001dd8 <ADC_READ+0x38>
		else
			pinmode(GPIOB, ADC_pin, GPIO_MODE_ANALOG);
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	481b      	ldr	r0, [pc, #108]	; (8001e40 <ADC_READ+0xa0>)
 8001dd4:	f7ff fc06 	bl	80015e4 <pinmode>

		ADCx->ADC_CR2=0;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
		ADCx->ADC_SQR3 =0;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	635a      	str	r2, [r3, #52]	; 0x34

		//Bits 4:0 SQ1[4:0]: first conversion in regular sequence
		ADCx->ADC_SQR3 |=(ADC_pin << 0);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	635a      	str	r2, [r3, #52]	; 0x34
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
		ADCx->ADC_CR2 |=(1<<0);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f043 0201 	orr.w	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]
		//		This bit is set by software to start conversion and cleared by hardware as soon as
		//		conversion starts. It starts a conversion of a group of regular channels if SWSTART is
		//		selected as trigger event by the EXTSEL[2:0] bits.
		//		0: Reset state
		//		1: Starts conversion of regular channels
		ADCx->ADC_CR2 |=(1<<22);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	609a      	str	r2, [r3, #8]
		//		Bit 1 EOC: End of conversion
		//		This bit is set by hardware at the end of a group channel conversion (regular or injected). It is
		//		cleared by software or by reading the ADC_DR.
		//		0: Conversion is not complete
		//		1: Conversion complete
		while(! ((ADCx->ADC_SR>>1)&1) ){};
 8001e14:	bf00      	nop
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f8      	beq.n	8001e16 <ADC_READ+0x76>

		return((uint16_t)ADCx->ADC_DR);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	e000      	b.n	8001e2e <ADC_READ+0x8e>

	}
	else{
		return 0;
 8001e2c:	2300      	movs	r3, #0
	}


}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200000ad 	.word	0x200000ad
 8001e3c:	40010800 	.word	0x40010800
 8001e40:	40010c00 	.word	0x40010c00

08001e44 <EXTI0_IRQHandler>:
	Enable_NVIC(pin);
}



void EXTI0_IRQHandler(void){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <EXTI0_IRQHandler+0x1c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <EXTI0_IRQHandler+0x1c>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <EXTI0_IRQHandler+0x20>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4798      	blx	r3
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40010400 	.word	0x40010400
 8001e64:	2000045c 	.word	0x2000045c

08001e68 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <EXTI1_IRQHandler+0x1c>)
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <EXTI1_IRQHandler+0x1c>)
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <EXTI1_IRQHandler+0x20>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4798      	blx	r3

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40010400 	.word	0x40010400
 8001e88:	2000045c 	.word	0x2000045c

08001e8c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <EXTI2_IRQHandler+0x1c>)
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <EXTI2_IRQHandler+0x1c>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <EXTI2_IRQHandler+0x20>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	4798      	blx	r3
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40010400 	.word	0x40010400
 8001eac:	2000045c 	.word	0x2000045c

08001eb0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <EXTI3_IRQHandler+0x1c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <EXTI3_IRQHandler+0x1c>)
 8001eba:	f043 0308 	orr.w	r3, r3, #8
 8001ebe:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <EXTI3_IRQHandler+0x20>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4798      	blx	r3
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40010400 	.word	0x40010400
 8001ed0:	2000045c 	.word	0x2000045c

08001ed4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <EXTI4_IRQHandler+0x1c>)
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <EXTI4_IRQHandler+0x1c>)
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <EXTI4_IRQHandler+0x20>)
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	4798      	blx	r3
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40010400 	.word	0x40010400
 8001ef4:	2000045c 	.word	0x2000045c

08001ef8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5]();  }
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <EXTI9_5_IRQHandler+0x22>
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	4a22      	ldr	r2, [pc, #136]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f0e:	f043 0320 	orr.w	r3, r3, #32
 8001f12:	6153      	str	r3, [r2, #20]
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <EXTI9_5_IRQHandler+0xa4>)
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6]();  }
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <EXTI9_5_IRQHandler+0x40>
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f30:	6153      	str	r3, [r2, #20]
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <EXTI9_5_IRQHandler+0xa4>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7]();  }
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <EXTI9_5_IRQHandler+0x5e>
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4e:	6153      	str	r3, [r2, #20]
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <EXTI9_5_IRQHandler+0xa4>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8]();  }
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <EXTI9_5_IRQHandler+0x7c>
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6c:	6153      	str	r3, [r2, #20]
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <EXTI9_5_IRQHandler+0xa4>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9]();  }
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <EXTI9_5_IRQHandler+0x9a>
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <EXTI9_5_IRQHandler+0xa0>)
 8001f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8a:	6153      	str	r3, [r2, #20]
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <EXTI9_5_IRQHandler+0xa4>)
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	4798      	blx	r3
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40010400 	.word	0x40010400
 8001f9c:	2000045c 	.word	0x2000045c

08001fa0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10]();  }
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <EXTI15_10_IRQHandler+0x22>
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	4a29      	ldr	r2, [pc, #164]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 8001fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fba:	6153      	str	r3, [r2, #20]
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <EXTI15_10_IRQHandler+0xc0>)
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11]();  }
 8001fc2:	4b26      	ldr	r3, [pc, #152]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d008      	beq.n	8001fe0 <EXTI15_10_IRQHandler+0x40>
 8001fce:	4b23      	ldr	r3, [pc, #140]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	4a22      	ldr	r2, [pc, #136]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 8001fd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fd8:	6153      	str	r3, [r2, #20]
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <EXTI15_10_IRQHandler+0xc0>)
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12]();  }
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <EXTI15_10_IRQHandler+0x5e>
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 8001ff2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ff6:	6153      	str	r3, [r2, #20]
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <EXTI15_10_IRQHandler+0xc0>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13]();  }
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <EXTI15_10_IRQHandler+0x7c>
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	4a13      	ldr	r2, [pc, #76]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 8002010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002014:	6153      	str	r3, [r2, #20]
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <EXTI15_10_IRQHandler+0xc0>)
 8002018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14]();  }
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <EXTI15_10_IRQHandler+0x9a>
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 800202e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002032:	6153      	str	r3, [r2, #20]
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <EXTI15_10_IRQHandler+0xc0>)
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15]();  }
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <EXTI15_10_IRQHandler+0xb8>
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4a04      	ldr	r2, [pc, #16]	; (800205c <EXTI15_10_IRQHandler+0xbc>)
 800204c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002050:	6153      	str	r3, [r2, #20]
 8002052:	4b03      	ldr	r3, [pc, #12]	; (8002060 <EXTI15_10_IRQHandler+0xc0>)
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	4798      	blx	r3

}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40010400 	.word	0x40010400
 8002060:	2000045c 	.word	0x2000045c

08002064 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
	//slave only todo
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
	//slave only todo
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <USART_INIT>:
//===============================================================
void send_string (){

}
//===============================================================
void USART_INIT(USART_typeDef* USARTx,uint32_t mode,uint32_t word_length,uint32_t stop_bits,uint32_t baud_rate,uint32_t parity,uint32_t CLCK){
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]

	if(USARTx ==USART1){
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4a55      	ldr	r2, [pc, #340]	; (80021e4 <USART_INIT+0x168>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d11f      	bne.n	80020d2 <USART_INIT+0x56>
		USART1_Clock_Enable();
 8002092:	4b55      	ldr	r3, [pc, #340]	; (80021e8 <USART_INIT+0x16c>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	4a54      	ldr	r2, [pc, #336]	; (80021e8 <USART_INIT+0x16c>)
 8002098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800209c:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();
 800209e:	4b52      	ldr	r3, [pc, #328]	; (80021e8 <USART_INIT+0x16c>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	4a51      	ldr	r2, [pc, #324]	; (80021e8 <USART_INIT+0x16c>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6193      	str	r3, [r2, #24]
		NVIC_USART1_interrupt_Enable;
 80020aa:	4b50      	ldr	r3, [pc, #320]	; (80021ec <USART_INIT+0x170>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <USART_INIT+0x170>)
 80020b0:	f043 0320 	orr.w	r3, r3, #32
 80020b4:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin9,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 80020b6:	2209      	movs	r2, #9
 80020b8:	2109      	movs	r1, #9
 80020ba:	484d      	ldr	r0, [pc, #308]	; (80021f0 <USART_INIT+0x174>)
 80020bc:	f7ff fa92 	bl	80015e4 <pinmode>
		//RX
		pinmode(GPIOA, pin10,GPIO_MODE_INTPUT_AF);
 80020c0:	2204      	movs	r2, #4
 80020c2:	210a      	movs	r1, #10
 80020c4:	484a      	ldr	r0, [pc, #296]	; (80021f0 <USART_INIT+0x174>)
 80020c6:	f7ff fa8d 	bl	80015e4 <pinmode>
		arr[0]=USART1;
 80020ca:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <USART_INIT+0x178>)
 80020cc:	4a45      	ldr	r2, [pc, #276]	; (80021e4 <USART_INIT+0x168>)
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e042      	b.n	8002158 <USART_INIT+0xdc>
	}
	else if(USARTx ==USART2){
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4a48      	ldr	r2, [pc, #288]	; (80021f8 <USART_INIT+0x17c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d11f      	bne.n	800211a <USART_INIT+0x9e>
		USART2_Clock_Enable();
 80020da:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <USART_INIT+0x16c>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a42      	ldr	r2, [pc, #264]	; (80021e8 <USART_INIT+0x16c>)
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();
 80020e6:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <USART_INIT+0x16c>)
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	4a3f      	ldr	r2, [pc, #252]	; (80021e8 <USART_INIT+0x16c>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6193      	str	r3, [r2, #24]
		NVIC_USART2_interrupt_Enable;
 80020f2:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <USART_INIT+0x170>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a3d      	ldr	r2, [pc, #244]	; (80021ec <USART_INIT+0x170>)
 80020f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020fc:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin2,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 80020fe:	2209      	movs	r2, #9
 8002100:	2102      	movs	r1, #2
 8002102:	483b      	ldr	r0, [pc, #236]	; (80021f0 <USART_INIT+0x174>)
 8002104:	f7ff fa6e 	bl	80015e4 <pinmode>
		//RX
		pinmode(GPIOA, pin3,GPIO_MODE_INTPUT_AF);
 8002108:	2204      	movs	r2, #4
 800210a:	2103      	movs	r1, #3
 800210c:	4838      	ldr	r0, [pc, #224]	; (80021f0 <USART_INIT+0x174>)
 800210e:	f7ff fa69 	bl	80015e4 <pinmode>
		arr[1]=USART2;
 8002112:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <USART_INIT+0x178>)
 8002114:	4a38      	ldr	r2, [pc, #224]	; (80021f8 <USART_INIT+0x17c>)
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	e01e      	b.n	8002158 <USART_INIT+0xdc>
	}
	else{
		USART3_Clock_Enable();
 800211a:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <USART_INIT+0x16c>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a32      	ldr	r2, [pc, #200]	; (80021e8 <USART_INIT+0x16c>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002124:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <USART_INIT+0x16c>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	4a2f      	ldr	r2, [pc, #188]	; (80021e8 <USART_INIT+0x16c>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	6193      	str	r3, [r2, #24]
		NVIC_USART3_interrupt_Enable;
 8002132:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <USART_INIT+0x170>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2d      	ldr	r2, [pc, #180]	; (80021ec <USART_INIT+0x170>)
 8002138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213c:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 800213e:	2209      	movs	r2, #9
 8002140:	210a      	movs	r1, #10
 8002142:	482e      	ldr	r0, [pc, #184]	; (80021fc <USART_INIT+0x180>)
 8002144:	f7ff fa4e 	bl	80015e4 <pinmode>
		//RX
		pinmode(GPIOB, pin11,GPIO_MODE_INTPUT_AF);
 8002148:	2204      	movs	r2, #4
 800214a:	210b      	movs	r1, #11
 800214c:	482b      	ldr	r0, [pc, #172]	; (80021fc <USART_INIT+0x180>)
 800214e:	f7ff fa49 	bl	80015e4 <pinmode>
		arr[2]=USART3;
 8002152:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <USART_INIT+0x178>)
 8002154:	4a2a      	ldr	r2, [pc, #168]	; (8002200 <USART_INIT+0x184>)
 8002156:	609a      	str	r2, [r3, #8]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enabled
	USARTx->USART_CR1 |=(1<<13);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	60da      	str	r2, [r3, #12]
	//STEP 2
	//	Bit 12 M: Word length
	//	This bit determines the word length. It is set or cleared by software.
	//	0: 1 Start bit, 8 Data bits, n Stop bit
	//	1: 1 Start bit, 9 Data bits, n Stop bit
	USARTx->USART_CR1 |=word_length;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	431a      	orrs	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	60da      	str	r2, [r3, #12]
	//	These bits are used for programming the stop bits.
	//	00: 1 Stop bit
	//	01: 0.5 Stop bit
	//	10: 2 Stop bits
	//	11: 1.5 Stop bit
	USARTx->USART_CR2 |=stop_bits;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	431a      	orrs	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	611a      	str	r2, [r3, #16]
	//	2: When TE is set there is a 1 bit-time delay before the transmission starts.
	//	Bit 2 RE: Receiver enable
	//	This bit enables the receiver. It is set and cleared by software.
	//	0: Receiver is disabled
	//	1: Receiver is enabled and begins searching for a start bit
	USARTx->USART_CR1 |=mode;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	431a      	orrs	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	60da      	str	r2, [r3, #12]
	//	Bit 9 PS: Parity selection
	//	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	//	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	//	0: Even parity
	//	1: Odd parity
	USARTx->USART_CR1 |=parity;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	431a      	orrs	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	60da      	str	r2, [r3, #12]
	//	Bits 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV
	//	These 12 bits define the mantissa of the USART Divider (USARTDIV)
	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV
	//	These 4 bits define the fraction of the USART Divider (USARTDIV)

	uint16_t DIV_Mantissa =CLCK /(baud_rate*16);
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	82fb      	strh	r3, [r7, #22]
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4a17      	ldr	r2, [pc, #92]	; (8002204 <USART_INIT+0x188>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	8afa      	ldrh	r2, [r7, #22]
 80021b4:	2164      	movs	r1, #100	; 0x64
 80021b6:	fb01 f202 	mul.w	r2, r1, r2
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	4a11      	ldr	r2, [pc, #68]	; (8002204 <USART_INIT+0x188>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	82bb      	strh	r3, [r7, #20]
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );
 80021c8:	8afb      	ldrh	r3, [r7, #22]
 80021ca:	011a      	lsls	r2, r3, #4
 80021cc:	8abb      	ldrh	r3, [r7, #20]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	4313      	orrs	r3, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	609a      	str	r2, [r3, #8]


}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40013800 	.word	0x40013800
 80021e8:	40021000 	.word	0x40021000
 80021ec:	e000e104 	.word	0xe000e104
 80021f0:	40010800 	.word	0x40010800
 80021f4:	20000498 	.word	0x20000498
 80021f8:	40004400 	.word	0x40004400
 80021fc:	40010c00 	.word	0x40010c00
 8002200:	40004800 	.word	0x40004800
 8002204:	51eb851f 	.word	0x51eb851f

08002208 <USART_SEND>:
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	0b1b      	lsrs	r3, r3, #12
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d106      	bne.n	800222e <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 800222c:	e004      	b.n	8002238 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	605a      	str	r2, [r3, #4]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
	...

08002244 <USART_SEND_STRING>:
		*data=arr_data_RES[2];
	}

}

void USART_SEND_STRING(USART_typeDef* USARTx,uint8_t* data){
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <USART_SEND_STRING+0x5c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d105      	bne.n	8002262 <USART_SEND_STRING+0x1e>
		arr_data[0]=data;
 8002256:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <USART_SEND_STRING+0x60>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6013      	str	r3, [r2, #0]
		arr[0]=USART1;
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <USART_SEND_STRING+0x64>)
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <USART_SEND_STRING+0x5c>)
 8002260:	601a      	str	r2, [r3, #0]
	}
	if(USARTx==USART2){
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <USART_SEND_STRING+0x68>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d105      	bne.n	8002276 <USART_SEND_STRING+0x32>
		arr_data[1]=data;
 800226a:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <USART_SEND_STRING+0x60>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6053      	str	r3, [r2, #4]
		arr[1]=USART2;
 8002270:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <USART_SEND_STRING+0x64>)
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <USART_SEND_STRING+0x68>)
 8002274:	605a      	str	r2, [r3, #4]
	}
	if(USARTx==USART3){
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <USART_SEND_STRING+0x6c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d105      	bne.n	800228a <USART_SEND_STRING+0x46>
		arr_data[2]=data;
 800227e:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <USART_SEND_STRING+0x60>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6093      	str	r3, [r2, #8]
		arr[2]=USART3;
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <USART_SEND_STRING+0x64>)
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <USART_SEND_STRING+0x6c>)
 8002288:	609a      	str	r2, [r3, #8]
	}
	//Bit 7 TXEIE: TXE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
	USARTx->USART_CR1 |=Transmit_data_register_empty;//open flage of interrupt
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60da      	str	r2, [r3, #12]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	40013800 	.word	0x40013800
 80022a4:	200004ac 	.word	0x200004ac
 80022a8:	20000498 	.word	0x20000498
 80022ac:	40004400 	.word	0x40004400
 80022b0:	40004800 	.word	0x40004800

080022b4 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80022ba:	4b51      	ldr	r3, [pc, #324]	; (8002400 <USART1_IRQHandler+0x14c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	09db      	lsrs	r3, r3, #7
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d122      	bne.n	8002310 <USART1_IRQHandler+0x5c>
 80022ca:	4b4d      	ldr	r3, [pc, #308]	; (8002400 <USART1_IRQHandler+0x14c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	09db      	lsrs	r3, r3, #7
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d11a      	bne.n	8002310 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 80022da:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <USART1_IRQHandler+0x150>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00d      	beq.n	8002300 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 80022e4:	4b46      	ldr	r3, [pc, #280]	; (8002400 <USART1_IRQHandler+0x14c>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b46      	ldr	r3, [pc, #280]	; (8002404 <USART1_IRQHandler+0x150>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f7ff ff8a 	bl	8002208 <USART_SEND>
			++arr_data[0];
 80022f4:	4b43      	ldr	r3, [pc, #268]	; (8002404 <USART1_IRQHandler+0x150>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	4a42      	ldr	r2, [pc, #264]	; (8002404 <USART1_IRQHandler+0x150>)
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e007      	b.n	8002310 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 8002300:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <USART1_IRQHandler+0x14c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <USART1_IRQHandler+0x14c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800230e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 8002310:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <USART1_IRQHandler+0x14c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d15b      	bne.n	80023d8 <USART1_IRQHandler+0x124>
 8002320:	4b37      	ldr	r3, [pc, #220]	; (8002400 <USART1_IRQHandler+0x14c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b01      	cmp	r3, #1
 800232e:	d153      	bne.n	80023d8 <USART1_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 8002330:	4b33      	ldr	r3, [pc, #204]	; (8002400 <USART1_IRQHandler+0x14c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	0b1b      	lsrs	r3, r3, #12
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d117      	bne.n	8002370 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8002340:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <USART1_IRQHandler+0x14c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	0a9b      	lsrs	r3, r3, #10
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d108      	bne.n	8002362 <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8002350:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <USART1_IRQHandler+0x14c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	b29b      	uxth	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	b29a      	uxth	r2, r3
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <USART1_IRQHandler+0x154>)
 800235e:	801a      	strh	r2, [r3, #0]
 8002360:	e020      	b.n	80023a4 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 8002362:	4b27      	ldr	r3, [pc, #156]	; (8002400 <USART1_IRQHandler+0x14c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	b29a      	uxth	r2, r3
 800236a:	4b27      	ldr	r3, [pc, #156]	; (8002408 <USART1_IRQHandler+0x154>)
 800236c:	801a      	strh	r2, [r3, #0]
 800236e:	e019      	b.n	80023a4 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <USART1_IRQHandler+0x14c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	0a9b      	lsrs	r3, r3, #10
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d109      	bne.n	8002394 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <USART1_IRQHandler+0x14c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	b29b      	uxth	r3, r3
 8002388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800238c:	b29a      	uxth	r2, r3
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <USART1_IRQHandler+0x154>)
 8002390:	801a      	strh	r2, [r3, #0]
 8002392:	e007      	b.n	80023a4 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8002394:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <USART1_IRQHandler+0x14c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	b29b      	uxth	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	b29a      	uxth	r2, r3
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <USART1_IRQHandler+0x154>)
 80023a2:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <USART1_IRQHandler+0x158>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4798      	blx	r3

		//for(long i=0;i<(20000);i++);
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <USART1_IRQHandler+0x14c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <USART1_IRQHandler+0x14c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0220 	bic.w	r2, r2, #32
 80023b8:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <USART1_IRQHandler+0x14c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <USART1_IRQHandler+0x15c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	80fb      	strh	r3, [r7, #6]
			arr[0]->USART_SR &=~(1<<5);
 80023c8:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <USART1_IRQHandler+0x14c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <USART1_IRQHandler+0x14c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0220 	bic.w	r2, r2, #32
 80023d6:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <USART1_IRQHandler+0x14c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <USART1_IRQHandler+0x15c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	80bb      	strh	r3, [r7, #4]
		arr[0]->USART_SR &=~(1<<5);
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <USART1_IRQHandler+0x14c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <USART1_IRQHandler+0x14c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0220 	bic.w	r2, r2, #32
 80023f4:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000498 	.word	0x20000498
 8002404:	200004ac 	.word	0x200004ac
 8002408:	200004a4 	.word	0x200004a4
 800240c:	200004b8 	.word	0x200004b8
 8002410:	40013800 	.word	0x40013800

08002414 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800241a:	4b51      	ldr	r3, [pc, #324]	; (8002560 <USART2_IRQHandler+0x14c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	09db      	lsrs	r3, r3, #7
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d122      	bne.n	8002470 <USART2_IRQHandler+0x5c>
 800242a:	4b4d      	ldr	r3, [pc, #308]	; (8002560 <USART2_IRQHandler+0x14c>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	09db      	lsrs	r3, r3, #7
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d11a      	bne.n	8002470 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 800243a:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <USART2_IRQHandler+0x150>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 8002444:	4b46      	ldr	r3, [pc, #280]	; (8002560 <USART2_IRQHandler+0x14c>)
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4b46      	ldr	r3, [pc, #280]	; (8002564 <USART2_IRQHandler+0x150>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f7ff feda 	bl	8002208 <USART_SEND>
			++arr_data[1];
 8002454:	4b43      	ldr	r3, [pc, #268]	; (8002564 <USART2_IRQHandler+0x150>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	3301      	adds	r3, #1
 800245a:	4a42      	ldr	r2, [pc, #264]	; (8002564 <USART2_IRQHandler+0x150>)
 800245c:	6053      	str	r3, [r2, #4]
 800245e:	e007      	b.n	8002470 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8002460:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <USART2_IRQHandler+0x14c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	4b3e      	ldr	r3, [pc, #248]	; (8002560 <USART2_IRQHandler+0x14c>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800246e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8002470:	4b3b      	ldr	r3, [pc, #236]	; (8002560 <USART2_IRQHandler+0x14c>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d15b      	bne.n	8002538 <USART2_IRQHandler+0x124>
 8002480:	4b37      	ldr	r3, [pc, #220]	; (8002560 <USART2_IRQHandler+0x14c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d153      	bne.n	8002538 <USART2_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 8002490:	4b33      	ldr	r3, [pc, #204]	; (8002560 <USART2_IRQHandler+0x14c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	0b1b      	lsrs	r3, r3, #12
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d117      	bne.n	80024d0 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 80024a0:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <USART2_IRQHandler+0x14c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	0a9b      	lsrs	r3, r3, #10
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d108      	bne.n	80024c2 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 80024b0:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <USART2_IRQHandler+0x14c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <USART2_IRQHandler+0x154>)
 80024be:	805a      	strh	r2, [r3, #2]
 80024c0:	e020      	b.n	8002504 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 80024c2:	4b27      	ldr	r3, [pc, #156]	; (8002560 <USART2_IRQHandler+0x14c>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <USART2_IRQHandler+0x154>)
 80024cc:	805a      	strh	r2, [r3, #2]
 80024ce:	e019      	b.n	8002504 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 80024d0:	4b23      	ldr	r3, [pc, #140]	; (8002560 <USART2_IRQHandler+0x14c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	0a9b      	lsrs	r3, r3, #10
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d109      	bne.n	80024f4 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 80024e0:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <USART2_IRQHandler+0x14c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <USART2_IRQHandler+0x154>)
 80024f0:	805a      	strh	r2, [r3, #2]
 80024f2:	e007      	b.n	8002504 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <USART2_IRQHandler+0x14c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	b29a      	uxth	r2, r3
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <USART2_IRQHandler+0x154>)
 8002502:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <USART2_IRQHandler+0x158>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4798      	blx	r3
		//for(long i=0;i<(20000);i++);
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <USART2_IRQHandler+0x14c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <USART2_IRQHandler+0x14c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f022 0220 	bic.w	r2, r2, #32
 8002518:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <USART2_IRQHandler+0x14c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <USART2_IRQHandler+0x15c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	b29b      	uxth	r3, r3
 8002526:	80fb      	strh	r3, [r7, #6]
			arr[1]->USART_SR &=~(1<<5);
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <USART2_IRQHandler+0x14c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <USART2_IRQHandler+0x14c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f022 0220 	bic.w	r2, r2, #32
 8002536:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <USART2_IRQHandler+0x14c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <USART2_IRQHandler+0x15c>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	b29b      	uxth	r3, r3
 8002544:	80bb      	strh	r3, [r7, #4]
		arr[1]->USART_SR &=~(1<<5);
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <USART2_IRQHandler+0x14c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <USART2_IRQHandler+0x14c>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f022 0220 	bic.w	r2, r2, #32
 8002554:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000498 	.word	0x20000498
 8002564:	200004ac 	.word	0x200004ac
 8002568:	200004a4 	.word	0x200004a4
 800256c:	200004b8 	.word	0x200004b8
 8002570:	40004400 	.word	0x40004400

08002574 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800257a:	4b51      	ldr	r3, [pc, #324]	; (80026c0 <USART3_IRQHandler+0x14c>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	09db      	lsrs	r3, r3, #7
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b01      	cmp	r3, #1
 8002588:	d122      	bne.n	80025d0 <USART3_IRQHandler+0x5c>
 800258a:	4b4d      	ldr	r3, [pc, #308]	; (80026c0 <USART3_IRQHandler+0x14c>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	09db      	lsrs	r3, r3, #7
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d11a      	bne.n	80025d0 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 800259a:	4b4a      	ldr	r3, [pc, #296]	; (80026c4 <USART3_IRQHandler+0x150>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00d      	beq.n	80025c0 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <USART3_IRQHandler+0x14c>)
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	4b46      	ldr	r3, [pc, #280]	; (80026c4 <USART3_IRQHandler+0x150>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f7ff fe2a 	bl	8002208 <USART_SEND>
			++arr_data[2];
 80025b4:	4b43      	ldr	r3, [pc, #268]	; (80026c4 <USART3_IRQHandler+0x150>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	3301      	adds	r3, #1
 80025ba:	4a42      	ldr	r2, [pc, #264]	; (80026c4 <USART3_IRQHandler+0x150>)
 80025bc:	6093      	str	r3, [r2, #8]
 80025be:	e007      	b.n	80025d0 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 80025c0:	4b3f      	ldr	r3, [pc, #252]	; (80026c0 <USART3_IRQHandler+0x14c>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	4b3e      	ldr	r3, [pc, #248]	; (80026c0 <USART3_IRQHandler+0x14c>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ce:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 80025d0:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <USART3_IRQHandler+0x14c>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d15b      	bne.n	8002698 <USART3_IRQHandler+0x124>
 80025e0:	4b37      	ldr	r3, [pc, #220]	; (80026c0 <USART3_IRQHandler+0x14c>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d153      	bne.n	8002698 <USART3_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 80025f0:	4b33      	ldr	r3, [pc, #204]	; (80026c0 <USART3_IRQHandler+0x14c>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	0b1b      	lsrs	r3, r3, #12
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d117      	bne.n	8002630 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8002600:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <USART3_IRQHandler+0x14c>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	0a9b      	lsrs	r3, r3, #10
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d108      	bne.n	8002622 <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <USART3_IRQHandler+0x14c>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	b29b      	uxth	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	b29a      	uxth	r2, r3
 800261c:	4b2a      	ldr	r3, [pc, #168]	; (80026c8 <USART3_IRQHandler+0x154>)
 800261e:	809a      	strh	r2, [r3, #4]
 8002620:	e020      	b.n	8002664 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 8002622:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <USART3_IRQHandler+0x14c>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	b29a      	uxth	r2, r3
 800262a:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <USART3_IRQHandler+0x154>)
 800262c:	809a      	strh	r2, [r3, #4]
 800262e:	e019      	b.n	8002664 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8002630:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <USART3_IRQHandler+0x14c>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	0a9b      	lsrs	r3, r3, #10
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d109      	bne.n	8002654 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <USART3_IRQHandler+0x14c>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	b29b      	uxth	r3, r3
 8002648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <USART3_IRQHandler+0x154>)
 8002650:	809a      	strh	r2, [r3, #4]
 8002652:	e007      	b.n	8002664 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <USART3_IRQHandler+0x14c>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	b29b      	uxth	r3, r3
 800265c:	b2db      	uxtb	r3, r3
 800265e:	b29a      	uxth	r2, r3
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <USART3_IRQHandler+0x154>)
 8002662:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <USART3_IRQHandler+0x158>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4798      	blx	r3
		//for(long i=0;i<(20000);i++);

		arr[2]->USART_SR &=~(1<<5);//clear
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <USART3_IRQHandler+0x14c>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <USART3_IRQHandler+0x14c>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f022 0220 	bic.w	r2, r2, #32
 8002678:	601a      	str	r2, [r3, #0]

		if(((arr[2]->USART_SR>>3)&1)|1){
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <USART3_IRQHandler+0x14c>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 8002680:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <USART3_IRQHandler+0x15c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	b29b      	uxth	r3, r3
 8002686:	80fb      	strh	r3, [r7, #6]
			arr[2]->USART_SR &=~(1<<5);
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <USART3_IRQHandler+0x14c>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <USART3_IRQHandler+0x14c>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f022 0220 	bic.w	r2, r2, #32
 8002696:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <USART3_IRQHandler+0x14c>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <USART3_IRQHandler+0x15c>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	80bb      	strh	r3, [r7, #4]
		arr[2]->USART_SR &=~(1<<5);
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <USART3_IRQHandler+0x14c>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <USART3_IRQHandler+0x14c>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f022 0220 	bic.w	r2, r2, #32
 80026b4:	601a      	str	r2, [r3, #0]
	}

}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000498 	.word	0x20000498
 80026c4:	200004ac 	.word	0x200004ac
 80026c8:	200004a4 	.word	0x200004a4
 80026cc:	200004b8 	.word	0x200004b8
 80026d0:	40004800 	.word	0x40004800

080026d4 <HOOK_fun_buzzer>:

}Buzzer_DURATION;
//=============================================================
uint8_t T3_flag1=0,T3_flag2=0;
//=============================================================
void HOOK_fun_buzzer(){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	pinwrite(GPIOB, pin11,LOW);
 80026d8:	2200      	movs	r2, #0
 80026da:	210b      	movs	r1, #11
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <HOOK_fun_buzzer+0x14>)
 80026de:	f7ff f863 	bl	80017a8 <pinwrite>
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40010c00 	.word	0x40010c00
 80026ec:	00000000 	.word	0x00000000

080026f0 <ADC_TO_TEMP>:
//#############################################################
//=============================================================
double ADC_TO_TEMP(uint16_t ADC_READ);
//=============================================================
//=============================================================
double ADC_TO_TEMP(uint16_t ADC_READ){
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	80fb      	strh	r3, [r7, #6]
	double logR2;
	logR2 = log(R1 * (4095.0 / ADC_READ - 1.0));
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd fe93 	bl	8000428 <__aeabi_i2d>
 8002702:	4603      	mov	r3, r0
 8002704:	460c      	mov	r4, r1
 8002706:	461a      	mov	r2, r3
 8002708:	4623      	mov	r3, r4
 800270a:	a137      	add	r1, pc, #220	; (adr r1, 80027e8 <ADC_TO_TEMP+0xf8>)
 800270c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002710:	f7fe f81e 	bl	8000750 <__aeabi_ddiv>
 8002714:	4603      	mov	r3, r0
 8002716:	460c      	mov	r4, r1
 8002718:	4618      	mov	r0, r3
 800271a:	4621      	mov	r1, r4
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <ADC_TO_TEMP+0x128>)
 8002722:	f7fd fd33 	bl	800018c <__aeabi_dsub>
 8002726:	4603      	mov	r3, r0
 8002728:	460c      	mov	r4, r1
 800272a:	4618      	mov	r0, r3
 800272c:	4621      	mov	r1, r4
 800272e:	a430      	add	r4, pc, #192	; (adr r4, 80027f0 <ADC_TO_TEMP+0x100>)
 8002730:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002734:	461a      	mov	r2, r3
 8002736:	4623      	mov	r3, r4
 8002738:	f7fd fee0 	bl	80004fc <__aeabi_dmul>
 800273c:	4603      	mov	r3, r0
 800273e:	460c      	mov	r4, r1
 8002740:	4618      	mov	r0, r3
 8002742:	4621      	mov	r1, r4
 8002744:	f002 fb08 	bl	8004d58 <log>
 8002748:	e9c7 0102 	strd	r0, r1, [r7, #8]
	return (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2))- 273.15;
 800274c:	a12a      	add	r1, pc, #168	; (adr r1, 80027f8 <ADC_TO_TEMP+0x108>)
 800274e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002756:	f7fd fed1 	bl	80004fc <__aeabi_dmul>
 800275a:	4603      	mov	r3, r0
 800275c:	460c      	mov	r4, r1
 800275e:	4618      	mov	r0, r3
 8002760:	4621      	mov	r1, r4
 8002762:	a427      	add	r4, pc, #156	; (adr r4, 8002800 <ADC_TO_TEMP+0x110>)
 8002764:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002768:	461a      	mov	r2, r3
 800276a:	4623      	mov	r3, r4
 800276c:	f7fd fd10 	bl	8000190 <__adddf3>
 8002770:	4603      	mov	r3, r0
 8002772:	460c      	mov	r4, r1
 8002774:	4625      	mov	r5, r4
 8002776:	461c      	mov	r4, r3
 8002778:	a123      	add	r1, pc, #140	; (adr r1, 8002808 <ADC_TO_TEMP+0x118>)
 800277a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800277e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002782:	f7fd febb 	bl	80004fc <__aeabi_dmul>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002792:	f7fd feb3 	bl	80004fc <__aeabi_dmul>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027a2:	f7fd feab 	bl	80004fc <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4620      	mov	r0, r4
 80027ac:	4629      	mov	r1, r5
 80027ae:	f7fd fcef 	bl	8000190 <__adddf3>
 80027b2:	4603      	mov	r3, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	461a      	mov	r2, r3
 80027b8:	4623      	mov	r3, r4
 80027ba:	f04f 0000 	mov.w	r0, #0
 80027be:	4916      	ldr	r1, [pc, #88]	; (8002818 <ADC_TO_TEMP+0x128>)
 80027c0:	f7fd ffc6 	bl	8000750 <__aeabi_ddiv>
 80027c4:	4603      	mov	r3, r0
 80027c6:	460c      	mov	r4, r1
 80027c8:	4618      	mov	r0, r3
 80027ca:	4621      	mov	r1, r4
 80027cc:	a310      	add	r3, pc, #64	; (adr r3, 8002810 <ADC_TO_TEMP+0x120>)
 80027ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d2:	f7fd fcdb 	bl	800018c <__aeabi_dsub>
 80027d6:	4603      	mov	r3, r0
 80027d8:	460c      	mov	r4, r1
}
 80027da:	4618      	mov	r0, r3
 80027dc:	4621      	mov	r1, r4
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bdb0      	pop	{r4, r5, r7, pc}
 80027e4:	f3af 8000 	nop.w
 80027e8:	00000000 	.word	0x00000000
 80027ec:	40affe00 	.word	0x40affe00
 80027f0:	00000000 	.word	0x00000000
 80027f4:	40c38800 	.word	0x40c38800
 80027f8:	b83fadf3 	.word	0xb83fadf3
 80027fc:	3f2f2c9a 	.word	0x3f2f2c9a
 8002800:	6c310c34 	.word	0x6c310c34
 8002804:	3f508919 	.word	0x3f508919
 8002808:	79b0927a 	.word	0x79b0927a
 800280c:	3e8b19ed 	.word	0x3e8b19ed
 8002810:	66666666 	.word	0x66666666
 8002814:	40711266 	.word	0x40711266
 8002818:	3ff00000 	.word	0x3ff00000

0800281c <TASK1_fun>:
//=============================================================
void TASK1_fun(){
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
	while(1){
		T1^=1;
 8002820:	4b17      	ldr	r3, [pc, #92]	; (8002880 <TASK1_fun+0x64>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f083 0301 	eor.w	r3, r3, #1
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <TASK1_fun+0x64>)
 800282c:	701a      	strb	r2, [r3, #0]
		Safty_System.System_mode=first_start;
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <TASK1_fun+0x68>)
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
		//3s Delay first(All output relays=0 ,turn on the buzzer with duration 500ms)
		Buzzer_DURATION=Buzzer_DURATION_500ms;
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <TASK1_fun+0x6c>)
 8002836:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800283a:	801a      	strh	r2, [r3, #0]
		ALSHREIF_RTOS_ACTIVAT_TASK(&TASK1,&TASK2);
 800283c:	4913      	ldr	r1, [pc, #76]	; (800288c <TASK1_fun+0x70>)
 800283e:	4814      	ldr	r0, [pc, #80]	; (8002890 <TASK1_fun+0x74>)
 8002840:	f7fe fdae 	bl	80013a0 <ALSHREIF_RTOS_ACTIVAT_TASK>
		ALSHREIF_RTOS_TASK_WAIT(&TASK1, 3000);
 8002844:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002848:	4811      	ldr	r0, [pc, #68]	; (8002890 <TASK1_fun+0x74>)
 800284a:	f7fe fe59 	bl	8001500 <ALSHREIF_RTOS_TASK_WAIT>
		// turn on the buzzer with duration 200ms to indicate the second stage <activate checking task>
		ALSHREIF_RTOS_TERMINAT_TASK(&TASK2,HOOK_fun_buzzer);
 800284e:	4911      	ldr	r1, [pc, #68]	; (8002894 <TASK1_fun+0x78>)
 8002850:	480e      	ldr	r0, [pc, #56]	; (800288c <TASK1_fun+0x70>)
 8002852:	f7fe fdc1 	bl	80013d8 <ALSHREIF_RTOS_TERMINAT_TASK>
		Buzzer_DURATION=Buzzer_DURATION_200ms;
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <TASK1_fun+0x6c>)
 8002858:	22c8      	movs	r2, #200	; 0xc8
 800285a:	801a      	strh	r2, [r3, #0]
		ALSHREIF_RTOS_ACTIVAT_TASK(&TASK1,&TASK2);
 800285c:	490b      	ldr	r1, [pc, #44]	; (800288c <TASK1_fun+0x70>)
 800285e:	480c      	ldr	r0, [pc, #48]	; (8002890 <TASK1_fun+0x74>)
 8002860:	f7fe fd9e 	bl	80013a0 <ALSHREIF_RTOS_ACTIVAT_TASK>
		// activate checking task
		ALSHREIF_RTOS_ACTIVAT_TASK(&TASK1,&TASK3);
 8002864:	490c      	ldr	r1, [pc, #48]	; (8002898 <TASK1_fun+0x7c>)
 8002866:	480a      	ldr	r0, [pc, #40]	; (8002890 <TASK1_fun+0x74>)
 8002868:	f7fe fd9a 	bl	80013a0 <ALSHREIF_RTOS_ACTIVAT_TASK>
		ALSHREIF_RTOS_ACTIVAT_TASK(&TASK1,&TASK5);
 800286c:	490b      	ldr	r1, [pc, #44]	; (800289c <TASK1_fun+0x80>)
 800286e:	4808      	ldr	r0, [pc, #32]	; (8002890 <TASK1_fun+0x74>)
 8002870:	f7fe fd96 	bl	80013a0 <ALSHREIF_RTOS_ACTIVAT_TASK>
		ALSHREIF_RTOS_TERMINAT_TASK(&TASK1,NULL);
 8002874:	2100      	movs	r1, #0
 8002876:	4806      	ldr	r0, [pc, #24]	; (8002890 <TASK1_fun+0x74>)
 8002878:	f7fe fdae 	bl	80013d8 <ALSHREIF_RTOS_TERMINAT_TASK>
		T1^=1;
 800287c:	e7d0      	b.n	8002820 <TASK1_fun+0x4>
 800287e:	bf00      	nop
 8002880:	2000056d 	.word	0x2000056d
 8002884:	20000588 	.word	0x20000588
 8002888:	2000056a 	.word	0x2000056a
 800288c:	200004d4 	.word	0x200004d4
 8002890:	20000504 	.word	0x20000504
 8002894:	080026d5 	.word	0x080026d5
 8002898:	2000058c 	.word	0x2000058c
 800289c:	200005bc 	.word	0x200005bc

080028a0 <TASK2_fun>:

	}
}
//#####################################################################################
void TASK2_fun(){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T2^=1;
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <TASK2_fun+0x34>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f083 0301 	eor.w	r3, r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <TASK2_fun+0x34>)
 80028b0:	701a      	strb	r2, [r3, #0]
		co++;
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <TASK2_fun+0x38>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3301      	adds	r3, #1
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <TASK2_fun+0x38>)
 80028ba:	6013      	str	r3, [r2, #0]
		TogglePin(GPIOB, pin11);
 80028bc:	210b      	movs	r1, #11
 80028be:	4807      	ldr	r0, [pc, #28]	; (80028dc <TASK2_fun+0x3c>)
 80028c0:	f7fe ffaa 	bl	8001818 <TogglePin>
		ALSHREIF_RTOS_TASK_WAIT(&TASK2, Buzzer_DURATION);
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <TASK2_fun+0x40>)
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4806      	ldr	r0, [pc, #24]	; (80028e4 <TASK2_fun+0x44>)
 80028cc:	f7fe fe18 	bl	8001500 <ALSHREIF_RTOS_TASK_WAIT>
		T2^=1;
 80028d0:	e7e8      	b.n	80028a4 <TASK2_fun+0x4>
 80028d2:	bf00      	nop
 80028d4:	200004d0 	.word	0x200004d0
 80028d8:	200000b0 	.word	0x200000b0
 80028dc:	40010c00 	.word	0x40010c00
 80028e0:	2000056a 	.word	0x2000056a
 80028e4:	200004d4 	.word	0x200004d4

080028e8 <TASK3_fun>:


	}
}
//#####################################################################################
void TASK3_fun(){
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	af00      	add	r7, sp, #0

	while(1){
		T3^=1;
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <TASK3_fun+0x198>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	f083 0301 	eor.w	r3, r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b62      	ldr	r3, [pc, #392]	; (8002a80 <TASK3_fun+0x198>)
 80028f8:	701a      	strb	r2, [r3, #0]
		static uint16_t buffer_Battery_Volte=0;
		static float buffer_MOTOR_TEMP=0;

		//Read the motor temperature 2 times with delay 500ms and take the average
		if(T3_flag1==2){
 80028fa:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <TASK3_fun+0x19c>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d117      	bne.n	8002932 <TASK3_fun+0x4a>
			MOTOR_TEMP=buffer_MOTOR_TEMP/2.0;
 8002902:	4b61      	ldr	r3, [pc, #388]	; (8002a88 <TASK3_fun+0x1a0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fda0 	bl	800044c <__aeabi_f2d>
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002914:	f7fd ff1c 	bl	8000750 <__aeabi_ddiv>
 8002918:	4603      	mov	r3, r0
 800291a:	460c      	mov	r4, r1
 800291c:	4a5b      	ldr	r2, [pc, #364]	; (8002a8c <TASK3_fun+0x1a4>)
 800291e:	e9c2 3400 	strd	r3, r4, [r2]
			buffer_MOTOR_TEMP=0;
 8002922:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <TASK3_fun+0x1a0>)
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
			T3_flag1=0;
 800292a:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <TASK3_fun+0x19c>)
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e023      	b.n	800297a <TASK3_fun+0x92>
		}
		else{
			buffer_MOTOR_TEMP+=ADC_TO_TEMP(ADC_READ(ADC1, ADC_pin_PA0));
 8002932:	2100      	movs	r1, #0
 8002934:	4856      	ldr	r0, [pc, #344]	; (8002a90 <TASK3_fun+0x1a8>)
 8002936:	f7ff fa33 	bl	8001da0 <ADC_READ>
 800293a:	4603      	mov	r3, r0
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fed7 	bl	80026f0 <ADC_TO_TEMP>
 8002942:	4604      	mov	r4, r0
 8002944:	460d      	mov	r5, r1
 8002946:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <TASK3_fun+0x1a0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fd7e 	bl	800044c <__aeabi_f2d>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4620      	mov	r0, r4
 8002956:	4629      	mov	r1, r5
 8002958:	f7fd fc1a 	bl	8000190 <__adddf3>
 800295c:	4603      	mov	r3, r0
 800295e:	460c      	mov	r4, r1
 8002960:	4618      	mov	r0, r3
 8002962:	4621      	mov	r1, r4
 8002964:	f7fe f8c2 	bl	8000aec <__aeabi_d2f>
 8002968:	4602      	mov	r2, r0
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <TASK3_fun+0x1a0>)
 800296c:	601a      	str	r2, [r3, #0]
			T3_flag1++;
 800296e:	4b45      	ldr	r3, [pc, #276]	; (8002a84 <TASK3_fun+0x19c>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	3301      	adds	r3, #1
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <TASK3_fun+0x19c>)
 8002978:	701a      	strb	r2, [r3, #0]
		}
		gcvt(MOTOR_TEMP,3,buf);
 800297a:	4b44      	ldr	r3, [pc, #272]	; (8002a8c <TASK3_fun+0x1a4>)
 800297c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002980:	4b44      	ldr	r3, [pc, #272]	; (8002a94 <TASK3_fun+0x1ac>)
 8002982:	2203      	movs	r2, #3
 8002984:	f000 fae4 	bl	8002f50 <gcvt>
		USART_SEND_STRING(USART1,buf);
 8002988:	4942      	ldr	r1, [pc, #264]	; (8002a94 <TASK3_fun+0x1ac>)
 800298a:	4843      	ldr	r0, [pc, #268]	; (8002a98 <TASK3_fun+0x1b0>)
 800298c:	f7ff fc5a 	bl	8002244 <USART_SEND_STRING>
		ALSHREIF_RTOS_TASK_WAIT(&TASK3, 50);
 8002990:	2132      	movs	r1, #50	; 0x32
 8002992:	4842      	ldr	r0, [pc, #264]	; (8002a9c <TASK3_fun+0x1b4>)
 8002994:	f7fe fdb4 	bl	8001500 <ALSHREIF_RTOS_TASK_WAIT>
		USART_SEND_STRING(USART1," C \n");
 8002998:	4941      	ldr	r1, [pc, #260]	; (8002aa0 <TASK3_fun+0x1b8>)
 800299a:	483f      	ldr	r0, [pc, #252]	; (8002a98 <TASK3_fun+0x1b0>)
 800299c:	f7ff fc52 	bl	8002244 <USART_SEND_STRING>
		ALSHREIF_RTOS_TASK_WAIT(&TASK3, 50);
 80029a0:	2132      	movs	r1, #50	; 0x32
 80029a2:	483e      	ldr	r0, [pc, #248]	; (8002a9c <TASK3_fun+0x1b4>)
 80029a4:	f7fe fdac 	bl	8001500 <ALSHREIF_RTOS_TASK_WAIT>

		//Read Battery Voltage 3 times with delay 500ms and take the average


		if(T3_flag2==2){
 80029a8:	4b3e      	ldr	r3, [pc, #248]	; (8002aa4 <TASK3_fun+0x1bc>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d111      	bne.n	80029d4 <TASK3_fun+0xec>
			Battery_Volte=buffer_Battery_Volte/2;
 80029b0:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <TASK3_fun+0x1c0>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <TASK3_fun+0x1c4>)
 80029bc:	701a      	strb	r2, [r3, #0]
			buffer_Battery_Volte=0;
 80029be:	4b3a      	ldr	r3, [pc, #232]	; (8002aa8 <TASK3_fun+0x1c0>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	801a      	strh	r2, [r3, #0]
			T3_flag2=0;
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <TASK3_fun+0x1bc>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK3, &TASK4);
 80029ca:	4939      	ldr	r1, [pc, #228]	; (8002ab0 <TASK3_fun+0x1c8>)
 80029cc:	4833      	ldr	r0, [pc, #204]	; (8002a9c <TASK3_fun+0x1b4>)
 80029ce:	f7fe fce7 	bl	80013a0 <ALSHREIF_RTOS_ACTIVAT_TASK>
 80029d2:	e034      	b.n	8002a3e <TASK3_fun+0x156>
		}
		else{
			buffer_Battery_Volte+=(266.0*(ADC_READ(ADC1, ADC_pin_PA1)/4095.0)); //8gain * 3 volt
 80029d4:	2101      	movs	r1, #1
 80029d6:	482e      	ldr	r0, [pc, #184]	; (8002a90 <TASK3_fun+0x1a8>)
 80029d8:	f7ff f9e2 	bl	8001da0 <ADC_READ>
 80029dc:	4603      	mov	r3, r0
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fd22 	bl	8000428 <__aeabi_i2d>
 80029e4:	a322      	add	r3, pc, #136	; (adr r3, 8002a70 <TASK3_fun+0x188>)
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f7fd feb1 	bl	8000750 <__aeabi_ddiv>
 80029ee:	4603      	mov	r3, r0
 80029f0:	460c      	mov	r4, r1
 80029f2:	4618      	mov	r0, r3
 80029f4:	4621      	mov	r1, r4
 80029f6:	a320      	add	r3, pc, #128	; (adr r3, 8002a78 <TASK3_fun+0x190>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f7fd fd7e 	bl	80004fc <__aeabi_dmul>
 8002a00:	4603      	mov	r3, r0
 8002a02:	460c      	mov	r4, r1
 8002a04:	4625      	mov	r5, r4
 8002a06:	461c      	mov	r4, r3
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <TASK3_fun+0x1c0>)
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fd0b 	bl	8000428 <__aeabi_i2d>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4620      	mov	r0, r4
 8002a18:	4629      	mov	r1, r5
 8002a1a:	f7fd fbb9 	bl	8000190 <__adddf3>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	460c      	mov	r4, r1
 8002a22:	4618      	mov	r0, r3
 8002a24:	4621      	mov	r1, r4
 8002a26:	f7fe f841 	bl	8000aac <__aeabi_d2uiz>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <TASK3_fun+0x1c0>)
 8002a30:	801a      	strh	r2, [r3, #0]
			T3_flag2++;
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <TASK3_fun+0x1bc>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <TASK3_fun+0x1bc>)
 8002a3c:	701a      	strb	r2, [r3, #0]
		}

		sprintf(buf,"%d",Battery_Volte);
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <TASK3_fun+0x1c4>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	491b      	ldr	r1, [pc, #108]	; (8002ab4 <TASK3_fun+0x1cc>)
 8002a46:	4813      	ldr	r0, [pc, #76]	; (8002a94 <TASK3_fun+0x1ac>)
 8002a48:	f000 fad8 	bl	8002ffc <siprintf>
		USART_SEND_STRING(USART1,buf);
 8002a4c:	4911      	ldr	r1, [pc, #68]	; (8002a94 <TASK3_fun+0x1ac>)
 8002a4e:	4812      	ldr	r0, [pc, #72]	; (8002a98 <TASK3_fun+0x1b0>)
 8002a50:	f7ff fbf8 	bl	8002244 <USART_SEND_STRING>
		ALSHREIF_RTOS_TASK_WAIT(&TASK3, 50);
 8002a54:	2132      	movs	r1, #50	; 0x32
 8002a56:	4811      	ldr	r0, [pc, #68]	; (8002a9c <TASK3_fun+0x1b4>)
 8002a58:	f7fe fd52 	bl	8001500 <ALSHREIF_RTOS_TASK_WAIT>
		USART_SEND_STRING(USART1," V \n");
 8002a5c:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <TASK3_fun+0x1d0>)
 8002a5e:	480e      	ldr	r0, [pc, #56]	; (8002a98 <TASK3_fun+0x1b0>)
 8002a60:	f7ff fbf0 	bl	8002244 <USART_SEND_STRING>
		ALSHREIF_RTOS_TASK_WAIT(&TASK3, 1000);
 8002a64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a68:	480c      	ldr	r0, [pc, #48]	; (8002a9c <TASK3_fun+0x1b4>)
 8002a6a:	f7fe fd49 	bl	8001500 <ALSHREIF_RTOS_TASK_WAIT>
	while(1){
 8002a6e:	e73d      	b.n	80028ec <TASK3_fun+0x4>
 8002a70:	00000000 	.word	0x00000000
 8002a74:	40affe00 	.word	0x40affe00
 8002a78:	00000000 	.word	0x00000000
 8002a7c:	4070a000 	.word	0x4070a000
 8002a80:	20000569 	.word	0x20000569
 8002a84:	200000ae 	.word	0x200000ae
 8002a88:	200000b4 	.word	0x200000b4
 8002a8c:	20000578 	.word	0x20000578
 8002a90:	40012400 	.word	0x40012400
 8002a94:	20000580 	.word	0x20000580
 8002a98:	40013800 	.word	0x40013800
 8002a9c:	2000058c 	.word	0x2000058c
 8002aa0:	080051ec 	.word	0x080051ec
 8002aa4:	200000af 	.word	0x200000af
 8002aa8:	200000b8 	.word	0x200000b8
 8002aac:	2000056c 	.word	0x2000056c
 8002ab0:	20000538 	.word	0x20000538
 8002ab4:	080051f4 	.word	0x080051f4
 8002ab8:	080051f8 	.word	0x080051f8

08002abc <TASK4_fun>:


	}
}
//#####################################################################################
void TASK4_fun(){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0

	while(1){
		T4^=1;
 8002ac0:	4b69      	ldr	r3, [pc, #420]	; (8002c68 <TASK4_fun+0x1ac>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	f083 0301 	eor.w	r3, r3, #1
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4b67      	ldr	r3, [pc, #412]	; (8002c68 <TASK4_fun+0x1ac>)
 8002acc:	701a      	strb	r2, [r3, #0]
		static uint32_t TIME=0;
		//Problem_Mode Emergency_Stop or over heat or FallOff...
		if(READ_PIN(GPIOA, EMERGENCY_STOP)==HIGH||ROPOT_FALL_OF==HIGH||MOTOR_TEMP>max_motor_Driver_temp){
 8002ace:	2107      	movs	r1, #7
 8002ad0:	4866      	ldr	r0, [pc, #408]	; (8002c6c <TASK4_fun+0x1b0>)
 8002ad2:	f7fe fe8d 	bl	80017f0 <READ_PIN>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d00e      	beq.n	8002afa <TASK4_fun+0x3e>
 8002adc:	4b64      	ldr	r3, [pc, #400]	; (8002c70 <TASK4_fun+0x1b4>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d00a      	beq.n	8002afa <TASK4_fun+0x3e>
 8002ae4:	4b63      	ldr	r3, [pc, #396]	; (8002c74 <TASK4_fun+0x1b8>)
 8002ae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <TASK4_fun+0x1bc>)
 8002af0:	f7fd ff94 	bl	8000a1c <__aeabi_dcmpgt>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d05f      	beq.n	8002bba <TASK4_fun+0xfe>
			Safty_System.System_mode=Problem_Mode;
 8002afa:	4b60      	ldr	r3, [pc, #384]	; (8002c7c <TASK4_fun+0x1c0>)
 8002afc:	2203      	movs	r2, #3
 8002afe:	701a      	strb	r2, [r3, #0]

			if(READ_PIN(GPIOA, EMERGENCY_STOP)==HIGH){
 8002b00:	2107      	movs	r1, #7
 8002b02:	485a      	ldr	r0, [pc, #360]	; (8002c6c <TASK4_fun+0x1b0>)
 8002b04:	f7fe fe74 	bl	80017f0 <READ_PIN>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d115      	bne.n	8002b3a <TASK4_fun+0x7e>
				Safty_System.ERRORS=Emergency_Stop;
 8002b0e:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <TASK4_fun+0x1c0>)
 8002b10:	2205      	movs	r2, #5
 8002b12:	705a      	strb	r2, [r3, #1]
				pinwrite(GPIOB, RELAY_MOTORS,LOW);
 8002b14:	2200      	movs	r2, #0
 8002b16:	2100      	movs	r1, #0
 8002b18:	4859      	ldr	r0, [pc, #356]	; (8002c80 <TASK4_fun+0x1c4>)
 8002b1a:	f7fe fe45 	bl	80017a8 <pinwrite>
				pinwrite(GPIOB, RELAY_PRAIN,LOW);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2101      	movs	r1, #1
 8002b22:	4857      	ldr	r0, [pc, #348]	; (8002c80 <TASK4_fun+0x1c4>)
 8002b24:	f7fe fe40 	bl	80017a8 <pinwrite>
				pinwrite(GPIOB, RELAY_Charge,LOW);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	210a      	movs	r1, #10
 8002b2c:	4854      	ldr	r0, [pc, #336]	; (8002c80 <TASK4_fun+0x1c4>)
 8002b2e:	f7fe fe3b 	bl	80017a8 <pinwrite>
				Buzzer_DURATION=Buzzer_DURATION_100ms;
 8002b32:	4b54      	ldr	r3, [pc, #336]	; (8002c84 <TASK4_fun+0x1c8>)
 8002b34:	2264      	movs	r2, #100	; 0x64
 8002b36:	801a      	strh	r2, [r3, #0]
 8002b38:	e03a      	b.n	8002bb0 <TASK4_fun+0xf4>

			}
			else if(ROPOT_FALL_OF==HIGH){
 8002b3a:	4b4d      	ldr	r3, [pc, #308]	; (8002c70 <TASK4_fun+0x1b4>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d116      	bne.n	8002b70 <TASK4_fun+0xb4>
				Buzzer_DURATION=Buzzer_DURATION_500ms;
 8002b42:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <TASK4_fun+0x1c8>)
 8002b44:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b48:	801a      	strh	r2, [r3, #0]
				Safty_System.ERRORS=FallOff;
 8002b4a:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <TASK4_fun+0x1c0>)
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	705a      	strb	r2, [r3, #1]
				pinwrite(GPIOB, RELAY_PRAIN,HIGH);
 8002b50:	2201      	movs	r2, #1
 8002b52:	2101      	movs	r1, #1
 8002b54:	484a      	ldr	r0, [pc, #296]	; (8002c80 <TASK4_fun+0x1c4>)
 8002b56:	f7fe fe27 	bl	80017a8 <pinwrite>
				pinwrite(GPIOB, RELAY_MOTORS,LOW);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4848      	ldr	r0, [pc, #288]	; (8002c80 <TASK4_fun+0x1c4>)
 8002b60:	f7fe fe22 	bl	80017a8 <pinwrite>
				pinwrite(GPIOB, RELAY_Charge,LOW);
 8002b64:	2200      	movs	r2, #0
 8002b66:	210a      	movs	r1, #10
 8002b68:	4845      	ldr	r0, [pc, #276]	; (8002c80 <TASK4_fun+0x1c4>)
 8002b6a:	f7fe fe1d 	bl	80017a8 <pinwrite>
 8002b6e:	e01f      	b.n	8002bb0 <TASK4_fun+0xf4>
			}
			else if(MOTOR_TEMP>max_motor_Driver_temp){
 8002b70:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <TASK4_fun+0x1b8>)
 8002b72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <TASK4_fun+0x1bc>)
 8002b7c:	f7fd ff4e 	bl	8000a1c <__aeabi_dcmpgt>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d014      	beq.n	8002bb0 <TASK4_fun+0xf4>
				Buzzer_DURATION=Buzzer_DURATION_200ms;
 8002b86:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <TASK4_fun+0x1c8>)
 8002b88:	22c8      	movs	r2, #200	; 0xc8
 8002b8a:	801a      	strh	r2, [r3, #0]
				Safty_System.ERRORS=Motor_over_heat;
 8002b8c:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <TASK4_fun+0x1c0>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	705a      	strb	r2, [r3, #1]
				pinwrite(GPIOB, RELAY_PRAIN,HIGH);
 8002b92:	2201      	movs	r2, #1
 8002b94:	2101      	movs	r1, #1
 8002b96:	483a      	ldr	r0, [pc, #232]	; (8002c80 <TASK4_fun+0x1c4>)
 8002b98:	f7fe fe06 	bl	80017a8 <pinwrite>
				pinwrite(GPIOB, RELAY_MOTORS,LOW);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4837      	ldr	r0, [pc, #220]	; (8002c80 <TASK4_fun+0x1c4>)
 8002ba2:	f7fe fe01 	bl	80017a8 <pinwrite>
				pinwrite(GPIOB, RELAY_Charge,LOW);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	210a      	movs	r1, #10
 8002baa:	4835      	ldr	r0, [pc, #212]	; (8002c80 <TASK4_fun+0x1c4>)
 8002bac:	f7fe fdfc 	bl	80017a8 <pinwrite>
			}
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK4, &TASK2);
 8002bb0:	4935      	ldr	r1, [pc, #212]	; (8002c88 <TASK4_fun+0x1cc>)
 8002bb2:	4836      	ldr	r0, [pc, #216]	; (8002c8c <TASK4_fun+0x1d0>)
 8002bb4:	f7fe fbf4 	bl	80013a0 <ALSHREIF_RTOS_ACTIVAT_TASK>
 8002bb8:	e051      	b.n	8002c5e <TASK4_fun+0x1a2>

		}
		//charging mode
		else if(Battery_Volte<min_batterry_voltage*10){
 8002bba:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <TASK4_fun+0x1d4>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b8b      	cmp	r3, #139	; 0x8b
 8002bc0:	d819      	bhi.n	8002bf6 <TASK4_fun+0x13a>
			Buzzer_DURATION=Buzzer_DURATION_200ms;
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <TASK4_fun+0x1c8>)
 8002bc4:	22c8      	movs	r2, #200	; 0xc8
 8002bc6:	801a      	strh	r2, [r3, #0]
			Safty_System.System_mode=Charge_Mode;
 8002bc8:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <TASK4_fun+0x1c0>)
 8002bca:	2202      	movs	r2, #2
 8002bcc:	701a      	strb	r2, [r3, #0]
			pinwrite(GPIOB, RELAY_MOTORS,HIGH);
 8002bce:	2201      	movs	r2, #1
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	482b      	ldr	r0, [pc, #172]	; (8002c80 <TASK4_fun+0x1c4>)
 8002bd4:	f7fe fde8 	bl	80017a8 <pinwrite>
			pinwrite(GPIOB, RELAY_PRAIN,HIGH);
 8002bd8:	2201      	movs	r2, #1
 8002bda:	2101      	movs	r1, #1
 8002bdc:	4828      	ldr	r0, [pc, #160]	; (8002c80 <TASK4_fun+0x1c4>)
 8002bde:	f7fe fde3 	bl	80017a8 <pinwrite>
			pinwrite(GPIOB, RELAY_Charge,HIGH);
 8002be2:	2201      	movs	r2, #1
 8002be4:	210a      	movs	r1, #10
 8002be6:	4826      	ldr	r0, [pc, #152]	; (8002c80 <TASK4_fun+0x1c4>)
 8002be8:	f7fe fdde 	bl	80017a8 <pinwrite>
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK4, &TASK2);
 8002bec:	4926      	ldr	r1, [pc, #152]	; (8002c88 <TASK4_fun+0x1cc>)
 8002bee:	4827      	ldr	r0, [pc, #156]	; (8002c8c <TASK4_fun+0x1d0>)
 8002bf0:	f7fe fbd6 	bl	80013a0 <ALSHREIF_RTOS_ACTIVAT_TASK>
 8002bf4:	e033      	b.n	8002c5e <TASK4_fun+0x1a2>
		}
		//normal mode
		else{
			Buzzer_DURATION=Buzzer_DURATION_1000ms;
 8002bf6:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <TASK4_fun+0x1c8>)
 8002bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bfc:	801a      	strh	r2, [r3, #0]
			Safty_System.System_mode=Normal_Mode;
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <TASK4_fun+0x1c0>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
			pinwrite(GPIOB, RELAY_MOTORS,HIGH);
 8002c04:	2201      	movs	r2, #1
 8002c06:	2100      	movs	r1, #0
 8002c08:	481d      	ldr	r0, [pc, #116]	; (8002c80 <TASK4_fun+0x1c4>)
 8002c0a:	f7fe fdcd 	bl	80017a8 <pinwrite>
			pinwrite(GPIOB, RELAY_PRAIN,HIGH);
 8002c0e:	2201      	movs	r2, #1
 8002c10:	2101      	movs	r1, #1
 8002c12:	481b      	ldr	r0, [pc, #108]	; (8002c80 <TASK4_fun+0x1c4>)
 8002c14:	f7fe fdc8 	bl	80017a8 <pinwrite>
			pinwrite(GPIOB, RELAY_Charge,LOW);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	210a      	movs	r1, #10
 8002c1c:	4818      	ldr	r0, [pc, #96]	; (8002c80 <TASK4_fun+0x1c4>)
 8002c1e:	f7fe fdc3 	bl	80017a8 <pinwrite>
			if(TIME>60){
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <TASK4_fun+0x1d8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b3c      	cmp	r3, #60	; 0x3c
 8002c28:	d910      	bls.n	8002c4c <TASK4_fun+0x190>
				TIME++;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <TASK4_fun+0x1d8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <TASK4_fun+0x1d8>)
 8002c32:	6013      	str	r3, [r2, #0]
				ALSHREIF_RTOS_ACTIVAT_TASK(&TASK4, &TASK2);
 8002c34:	4914      	ldr	r1, [pc, #80]	; (8002c88 <TASK4_fun+0x1cc>)
 8002c36:	4815      	ldr	r0, [pc, #84]	; (8002c8c <TASK4_fun+0x1d0>)
 8002c38:	f7fe fbb2 	bl	80013a0 <ALSHREIF_RTOS_ACTIVAT_TASK>
				if(TIME>64){
 8002c3c:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <TASK4_fun+0x1d8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d90c      	bls.n	8002c5e <TASK4_fun+0x1a2>
					TIME=0;
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <TASK4_fun+0x1d8>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e008      	b.n	8002c5e <TASK4_fun+0x1a2>
				}
			}
			else{
				TIME++;
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <TASK4_fun+0x1d8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <TASK4_fun+0x1d8>)
 8002c54:	6013      	str	r3, [r2, #0]
				ALSHREIF_RTOS_TERMINAT_TASK(&TASK2,HOOK_fun_buzzer);
 8002c56:	4910      	ldr	r1, [pc, #64]	; (8002c98 <TASK4_fun+0x1dc>)
 8002c58:	480b      	ldr	r0, [pc, #44]	; (8002c88 <TASK4_fun+0x1cc>)
 8002c5a:	f7fe fbbd 	bl	80013d8 <ALSHREIF_RTOS_TERMINAT_TASK>
			}
		}

		ALSHREIF_RTOS_TASK_WAIT(&TASK4, 100);
 8002c5e:	2164      	movs	r1, #100	; 0x64
 8002c60:	480a      	ldr	r0, [pc, #40]	; (8002c8c <TASK4_fun+0x1d0>)
 8002c62:	f7fe fc4d 	bl	8001500 <ALSHREIF_RTOS_TASK_WAIT>
	while(1){
 8002c66:	e72b      	b.n	8002ac0 <TASK4_fun+0x4>
 8002c68:	20000534 	.word	0x20000534
 8002c6c:	40010800 	.word	0x40010800
 8002c70:	200005ec 	.word	0x200005ec
 8002c74:	20000578 	.word	0x20000578
 8002c78:	40390000 	.word	0x40390000
 8002c7c:	20000588 	.word	0x20000588
 8002c80:	40010c00 	.word	0x40010c00
 8002c84:	2000056a 	.word	0x2000056a
 8002c88:	200004d4 	.word	0x200004d4
 8002c8c:	20000538 	.word	0x20000538
 8002c90:	2000056c 	.word	0x2000056c
 8002c94:	200000bc 	.word	0x200000bc
 8002c98:	080026d5 	.word	0x080026d5

08002c9c <TASK5_fun>:

	}
}
//#####################################################################################
void TASK5_fun(){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0

	while(1){
		T5^=1;
 8002ca2:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <TASK5_fun+0xa4>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	f083 0301 	eor.w	r3, r3, #1
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <TASK5_fun+0xa4>)
 8002cae:	701a      	strb	r2, [r3, #0]
		static num_sensor_high=0;
		MERCURY_SENSOR_ARR[0]=READ_PIN(GPIOA, MERCURY_SENSOR1);
 8002cb0:	2106      	movs	r1, #6
 8002cb2:	4824      	ldr	r0, [pc, #144]	; (8002d44 <TASK5_fun+0xa8>)
 8002cb4:	f7fe fd9c 	bl	80017f0 <READ_PIN>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <TASK5_fun+0xac>)
 8002cbe:	701a      	strb	r2, [r3, #0]
		MERCURY_SENSOR_ARR[1]=READ_PIN(GPIOB, MERCURY_SENSOR2);
 8002cc0:	210c      	movs	r1, #12
 8002cc2:	4822      	ldr	r0, [pc, #136]	; (8002d4c <TASK5_fun+0xb0>)
 8002cc4:	f7fe fd94 	bl	80017f0 <READ_PIN>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <TASK5_fun+0xac>)
 8002cce:	705a      	strb	r2, [r3, #1]
		MERCURY_SENSOR_ARR[2]=READ_PIN(GPIOB, MERCURY_SENSOR3);
 8002cd0:	210d      	movs	r1, #13
 8002cd2:	481e      	ldr	r0, [pc, #120]	; (8002d4c <TASK5_fun+0xb0>)
 8002cd4:	f7fe fd8c 	bl	80017f0 <READ_PIN>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <TASK5_fun+0xac>)
 8002cde:	709a      	strb	r2, [r3, #2]
		MERCURY_SENSOR_ARR[3]=READ_PIN(GPIOB, MERCURY_SENSOR4);
 8002ce0:	210e      	movs	r1, #14
 8002ce2:	481a      	ldr	r0, [pc, #104]	; (8002d4c <TASK5_fun+0xb0>)
 8002ce4:	f7fe fd84 	bl	80017f0 <READ_PIN>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <TASK5_fun+0xac>)
 8002cee:	70da      	strb	r2, [r3, #3]
		for(int i=0;i<4;i++){
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	607b      	str	r3, [r7, #4]
 8002cf4:	e00c      	b.n	8002d10 <TASK5_fun+0x74>
			num_sensor_high+=MERCURY_SENSOR_ARR[i];
 8002cf6:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <TASK5_fun+0xac>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <TASK5_fun+0xb4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <TASK5_fun+0xb4>)
 8002d08:	6013      	str	r3, [r2, #0]
		for(int i=0;i<4;i++){
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	ddef      	ble.n	8002cf6 <TASK5_fun+0x5a>
		}
		if(num_sensor_high>2){
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <TASK5_fun+0xb4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	dd03      	ble.n	8002d26 <TASK5_fun+0x8a>
			ROPOT_FALL_OF=HIGH;
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <TASK5_fun+0xb8>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	e002      	b.n	8002d2c <TASK5_fun+0x90>
		}
		else{
			ROPOT_FALL_OF=LOW;
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <TASK5_fun+0xb8>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
		}
		num_sensor_high=0;
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <TASK5_fun+0xb4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
		ALSHREIF_RTOS_TASK_WAIT(&TASK5, 1000);
 8002d32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d36:	4808      	ldr	r0, [pc, #32]	; (8002d58 <TASK5_fun+0xbc>)
 8002d38:	f7fe fbe2 	bl	8001500 <ALSHREIF_RTOS_TASK_WAIT>
	while(1){
 8002d3c:	e7b1      	b.n	8002ca2 <TASK5_fun+0x6>
 8002d3e:	bf00      	nop
 8002d40:	20000568 	.word	0x20000568
 8002d44:	40010800 	.word	0x40010800
 8002d48:	20000570 	.word	0x20000570
 8002d4c:	40010c00 	.word	0x40010c00
 8002d50:	200000c0 	.word	0x200000c0
 8002d54:	200005ec 	.word	0x200005ec
 8002d58:	200005bc 	.word	0x200005bc

08002d5c <main>:
	}
}
//============================================================================================================
int main(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0

	HARD_WARE_INIT();
 8002d60:	f7fd ff6c 	bl	8000c3c <HARD_WARE_INIT>
	ALSHREIF_RTOS_INIT();
 8002d64:	f7fe f944 	bl	8000ff0 <ALSHREIF_RTOS_INIT>

	strcpy(TASK1.NAME,"TASK1");
 8002d68:	4b35      	ldr	r3, [pc, #212]	; (8002e40 <main+0xe4>)
 8002d6a:	4a36      	ldr	r2, [pc, #216]	; (8002e44 <main+0xe8>)
 8002d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d70:	6018      	str	r0, [r3, #0]
 8002d72:	3304      	adds	r3, #4
 8002d74:	8019      	strh	r1, [r3, #0]
	TASK1.TASK_FUNCTION=TASK1_fun;
 8002d76:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <main+0xec>)
 8002d78:	4a34      	ldr	r2, [pc, #208]	; (8002e4c <main+0xf0>)
 8002d7a:	609a      	str	r2, [r3, #8]
	TASK1.priority=4;
 8002d7c:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <main+0xec>)
 8002d7e:	2204      	movs	r2, #4
 8002d80:	711a      	strb	r2, [r3, #4]
	TASK1.stack_size=1024;
 8002d82:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <main+0xec>)
 8002d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d88:	601a      	str	r2, [r3, #0]

	strcpy(TASK2.NAME,"TASK2");
 8002d8a:	4b31      	ldr	r3, [pc, #196]	; (8002e50 <main+0xf4>)
 8002d8c:	4a31      	ldr	r2, [pc, #196]	; (8002e54 <main+0xf8>)
 8002d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d92:	6018      	str	r0, [r3, #0]
 8002d94:	3304      	adds	r3, #4
 8002d96:	8019      	strh	r1, [r3, #0]
	TASK2.TASK_FUNCTION=TASK2_fun;
 8002d98:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <main+0xfc>)
 8002d9a:	4a30      	ldr	r2, [pc, #192]	; (8002e5c <main+0x100>)
 8002d9c:	609a      	str	r2, [r3, #8]
	TASK2.priority=3;
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <main+0xfc>)
 8002da0:	2203      	movs	r2, #3
 8002da2:	711a      	strb	r2, [r3, #4]
	TASK2.stack_size=1024;
 8002da4:	4b2c      	ldr	r3, [pc, #176]	; (8002e58 <main+0xfc>)
 8002da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002daa:	601a      	str	r2, [r3, #0]

	strcpy(TASK3.NAME,"TASK3");
 8002dac:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <main+0x104>)
 8002dae:	4a2d      	ldr	r2, [pc, #180]	; (8002e64 <main+0x108>)
 8002db0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002db4:	6018      	str	r0, [r3, #0]
 8002db6:	3304      	adds	r3, #4
 8002db8:	8019      	strh	r1, [r3, #0]
	TASK3.TASK_FUNCTION=TASK3_fun;
 8002dba:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <main+0x10c>)
 8002dbc:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <main+0x110>)
 8002dbe:	609a      	str	r2, [r3, #8]
	TASK3.priority=2;
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <main+0x10c>)
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	711a      	strb	r2, [r3, #4]
	TASK3.stack_size=1024;
 8002dc6:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <main+0x10c>)
 8002dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dcc:	601a      	str	r2, [r3, #0]

	strcpy(TASK4.NAME,"TASK4");
 8002dce:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <main+0x114>)
 8002dd0:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <main+0x118>)
 8002dd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dd6:	6018      	str	r0, [r3, #0]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	8019      	strh	r1, [r3, #0]
	TASK4.TASK_FUNCTION=TASK4_fun;
 8002ddc:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <main+0x11c>)
 8002dde:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <main+0x120>)
 8002de0:	609a      	str	r2, [r3, #8]
	TASK4.priority=0;
 8002de2:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <main+0x11c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	711a      	strb	r2, [r3, #4]
	TASK4.stack_size=1024;
 8002de8:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <main+0x11c>)
 8002dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dee:	601a      	str	r2, [r3, #0]


	strcpy(TASK5.NAME,"TASK5");
 8002df0:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <main+0x124>)
 8002df2:	4a24      	ldr	r2, [pc, #144]	; (8002e84 <main+0x128>)
 8002df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002df8:	6018      	str	r0, [r3, #0]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	8019      	strh	r1, [r3, #0]
	TASK5.TASK_FUNCTION=TASK5_fun;
 8002dfe:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <main+0x12c>)
 8002e00:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <main+0x130>)
 8002e02:	609a      	str	r2, [r3, #8]
	TASK5.priority=1;
 8002e04:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <main+0x12c>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	711a      	strb	r2, [r3, #4]
	TASK5.stack_size=1024;
 8002e0a:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <main+0x12c>)
 8002e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e10:	601a      	str	r2, [r3, #0]

	ALSHREIF_RTOS_CREAT_TASK(&TASK1);
 8002e12:	480d      	ldr	r0, [pc, #52]	; (8002e48 <main+0xec>)
 8002e14:	f7fe f8b0 	bl	8000f78 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK2);
 8002e18:	480f      	ldr	r0, [pc, #60]	; (8002e58 <main+0xfc>)
 8002e1a:	f7fe f8ad 	bl	8000f78 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK3);
 8002e1e:	4812      	ldr	r0, [pc, #72]	; (8002e68 <main+0x10c>)
 8002e20:	f7fe f8aa 	bl	8000f78 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK4);
 8002e24:	4814      	ldr	r0, [pc, #80]	; (8002e78 <main+0x11c>)
 8002e26:	f7fe f8a7 	bl	8000f78 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK5);
 8002e2a:	4817      	ldr	r0, [pc, #92]	; (8002e88 <main+0x12c>)
 8002e2c:	f7fe f8a4 	bl	8000f78 <ALSHREIF_RTOS_CREAT_TASK>

	ALSHREIF_RTOS_ACTIVAT_TASK(NULL,&TASK1);
 8002e30:	4905      	ldr	r1, [pc, #20]	; (8002e48 <main+0xec>)
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7fe fab4 	bl	80013a0 <ALSHREIF_RTOS_ACTIVAT_TASK>
	//	ALSHREIF_RTOS_ACTIVAT_TASK(&TASK2);
	//	ALSHREIF_RTOS_ACTIVAT_TASK(&TASK3);
	ALSHREIF_RTOS_START_OS();
 8002e38:	f7fe fae8 	bl	800140c <ALSHREIF_RTOS_START_OS>
	while(1);
 8002e3c:	e7fe      	b.n	8002e3c <main+0xe0>
 8002e3e:	bf00      	nop
 8002e40:	2000051c 	.word	0x2000051c
 8002e44:	08005200 	.word	0x08005200
 8002e48:	20000504 	.word	0x20000504
 8002e4c:	0800281d 	.word	0x0800281d
 8002e50:	200004ec 	.word	0x200004ec
 8002e54:	08005208 	.word	0x08005208
 8002e58:	200004d4 	.word	0x200004d4
 8002e5c:	080028a1 	.word	0x080028a1
 8002e60:	200005a4 	.word	0x200005a4
 8002e64:	08005210 	.word	0x08005210
 8002e68:	2000058c 	.word	0x2000058c
 8002e6c:	080028e9 	.word	0x080028e9
 8002e70:	20000550 	.word	0x20000550
 8002e74:	08005218 	.word	0x08005218
 8002e78:	20000538 	.word	0x20000538
 8002e7c:	08002abd 	.word	0x08002abd
 8002e80:	200005d4 	.word	0x200005d4
 8002e84:	08005220 	.word	0x08005220
 8002e88:	200005bc 	.word	0x200005bc
 8002e8c:	08002c9d 	.word	0x08002c9d

08002e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e98:	4a14      	ldr	r2, [pc, #80]	; (8002eec <_sbrk+0x5c>)
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <_sbrk+0x60>)
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <_sbrk+0x64>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <_sbrk+0x64>)
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <_sbrk+0x68>)
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <_sbrk+0x64>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d207      	bcs.n	8002ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec0:	f000 f86a 	bl	8002f98 <__errno>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	e009      	b.n	8002ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <_sbrk+0x64>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <_sbrk+0x64>)
 8002ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20005000 	.word	0x20005000
 8002ef0:	00000400 	.word	0x00000400
 8002ef4:	200000c4 	.word	0x200000c4
 8002ef8:	200005f8 	.word	0x200005f8

08002efc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002efc:	480d      	ldr	r0, [pc, #52]	; (8002f34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002efe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f04:	480c      	ldr	r0, [pc, #48]	; (8002f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f06:	490d      	ldr	r1, [pc, #52]	; (8002f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f08:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <LoopForever+0xe>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f0c:	e002      	b.n	8002f14 <LoopCopyDataInit>

08002f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f12:	3304      	adds	r3, #4

08002f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f18:	d3f9      	bcc.n	8002f0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f1c:	4c0a      	ldr	r4, [pc, #40]	; (8002f48 <LoopForever+0x16>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f20:	e001      	b.n	8002f26 <LoopFillZerobss>

08002f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f24:	3204      	adds	r2, #4

08002f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f28:	d3fb      	bcc.n	8002f22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f2a:	f000 f83b 	bl	8002fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f2e:	f7ff ff15 	bl	8002d5c <main>

08002f32 <LoopForever>:

LoopForever:
    b LoopForever
 8002f32:	e7fe      	b.n	8002f32 <LoopForever>
  ldr   r0, =_estack
 8002f34:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f3c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002f40:	08005374 	.word	0x08005374
  ldr r2, =_sbss
 8002f44:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002f48:	200005f4 	.word	0x200005f4

08002f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f4c:	e7fe      	b.n	8002f4c <ADC1_2_IRQHandler>
	...

08002f50 <gcvt>:
 8002f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f52:	461c      	mov	r4, r3
 8002f54:	b085      	sub	sp, #20
 8002f56:	2300      	movs	r3, #0
 8002f58:	4615      	mov	r5, r2
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4606      	mov	r6, r0
 8002f5e:	460f      	mov	r7, r1
 8002f60:	f7fd fd3e 	bl	80009e0 <__aeabi_dcmplt>
 8002f64:	4623      	mov	r3, r4
 8002f66:	b118      	cbz	r0, 8002f70 <gcvt+0x20>
 8002f68:	222d      	movs	r2, #45	; 0x2d
 8002f6a:	3d01      	subs	r5, #1
 8002f6c:	f803 2b01 	strb.w	r2, [r3], #1
 8002f70:	2267      	movs	r2, #103	; 0x67
 8002f72:	2100      	movs	r1, #0
 8002f74:	e9cd 5300 	strd	r5, r3, [sp]
 8002f78:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8002f7c:	4905      	ldr	r1, [pc, #20]	; (8002f94 <gcvt+0x44>)
 8002f7e:	4632      	mov	r2, r6
 8002f80:	463b      	mov	r3, r7
 8002f82:	6808      	ldr	r0, [r1, #0]
 8002f84:	f000 f8d0 	bl	8003128 <_gcvt>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	4620      	movne	r0, r4
 8002f8e:	2000      	moveq	r0, #0
 8002f90:	b005      	add	sp, #20
 8002f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f94:	20000020 	.word	0x20000020

08002f98 <__errno>:
 8002f98:	4b01      	ldr	r3, [pc, #4]	; (8002fa0 <__errno+0x8>)
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000020 	.word	0x20000020

08002fa4 <__libc_init_array>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	2500      	movs	r5, #0
 8002fa8:	4e0c      	ldr	r6, [pc, #48]	; (8002fdc <__libc_init_array+0x38>)
 8002faa:	4c0d      	ldr	r4, [pc, #52]	; (8002fe0 <__libc_init_array+0x3c>)
 8002fac:	1ba4      	subs	r4, r4, r6
 8002fae:	10a4      	asrs	r4, r4, #2
 8002fb0:	42a5      	cmp	r5, r4
 8002fb2:	d109      	bne.n	8002fc8 <__libc_init_array+0x24>
 8002fb4:	f002 f906 	bl	80051c4 <_init>
 8002fb8:	2500      	movs	r5, #0
 8002fba:	4e0a      	ldr	r6, [pc, #40]	; (8002fe4 <__libc_init_array+0x40>)
 8002fbc:	4c0a      	ldr	r4, [pc, #40]	; (8002fe8 <__libc_init_array+0x44>)
 8002fbe:	1ba4      	subs	r4, r4, r6
 8002fc0:	10a4      	asrs	r4, r4, #2
 8002fc2:	42a5      	cmp	r5, r4
 8002fc4:	d105      	bne.n	8002fd2 <__libc_init_array+0x2e>
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
 8002fc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fcc:	4798      	blx	r3
 8002fce:	3501      	adds	r5, #1
 8002fd0:	e7ee      	b.n	8002fb0 <__libc_init_array+0xc>
 8002fd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd6:	4798      	blx	r3
 8002fd8:	3501      	adds	r5, #1
 8002fda:	e7f2      	b.n	8002fc2 <__libc_init_array+0x1e>
 8002fdc:	0800536c 	.word	0x0800536c
 8002fe0:	0800536c 	.word	0x0800536c
 8002fe4:	0800536c 	.word	0x0800536c
 8002fe8:	08005370 	.word	0x08005370

08002fec <memset>:
 8002fec:	4603      	mov	r3, r0
 8002fee:	4402      	add	r2, r0
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d100      	bne.n	8002ff6 <memset+0xa>
 8002ff4:	4770      	bx	lr
 8002ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8002ffa:	e7f9      	b.n	8002ff0 <memset+0x4>

08002ffc <siprintf>:
 8002ffc:	b40e      	push	{r1, r2, r3}
 8002ffe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003002:	b500      	push	{lr}
 8003004:	b09c      	sub	sp, #112	; 0x70
 8003006:	ab1d      	add	r3, sp, #116	; 0x74
 8003008:	9002      	str	r0, [sp, #8]
 800300a:	9006      	str	r0, [sp, #24]
 800300c:	9107      	str	r1, [sp, #28]
 800300e:	9104      	str	r1, [sp, #16]
 8003010:	4808      	ldr	r0, [pc, #32]	; (8003034 <siprintf+0x38>)
 8003012:	4909      	ldr	r1, [pc, #36]	; (8003038 <siprintf+0x3c>)
 8003014:	f853 2b04 	ldr.w	r2, [r3], #4
 8003018:	9105      	str	r1, [sp, #20]
 800301a:	6800      	ldr	r0, [r0, #0]
 800301c:	a902      	add	r1, sp, #8
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	f000 fd30 	bl	8003a84 <_svfiprintf_r>
 8003024:	2200      	movs	r2, #0
 8003026:	9b02      	ldr	r3, [sp, #8]
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	b01c      	add	sp, #112	; 0x70
 800302c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003030:	b003      	add	sp, #12
 8003032:	4770      	bx	lr
 8003034:	20000020 	.word	0x20000020
 8003038:	ffff0208 	.word	0xffff0208

0800303c <print_e>:
 800303c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303e:	b08b      	sub	sp, #44	; 0x2c
 8003040:	460f      	mov	r7, r1
 8003042:	a908      	add	r1, sp, #32
 8003044:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003046:	9104      	str	r1, [sp, #16]
 8003048:	a907      	add	r1, sp, #28
 800304a:	9103      	str	r1, [sp, #12]
 800304c:	a909      	add	r1, sp, #36	; 0x24
 800304e:	9102      	str	r1, [sp, #8]
 8003050:	1c61      	adds	r1, r4, #1
 8003052:	9101      	str	r1, [sp, #4]
 8003054:	2102      	movs	r1, #2
 8003056:	9100      	str	r1, [sp, #0]
 8003058:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 800305c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800305e:	f001 f837 	bl	80040d0 <_dtoa_r>
 8003062:	f242 730f 	movw	r3, #9999	; 0x270f
 8003066:	4601      	mov	r1, r0
 8003068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800306a:	4298      	cmp	r0, r3
 800306c:	d104      	bne.n	8003078 <print_e+0x3c>
 800306e:	4638      	mov	r0, r7
 8003070:	f000 ff98 	bl	8003fa4 <strcpy>
 8003074:	b00b      	add	sp, #44	; 0x2c
 8003076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003078:	780b      	ldrb	r3, [r1, #0]
 800307a:	703b      	strb	r3, [r7, #0]
 800307c:	2d00      	cmp	r5, #0
 800307e:	d142      	bne.n	8003106 <print_e+0xca>
 8003080:	2c00      	cmp	r4, #0
 8003082:	d140      	bne.n	8003106 <print_e+0xca>
 8003084:	1c7b      	adds	r3, r7, #1
 8003086:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800308a:	b10a      	cbz	r2, 8003090 <print_e+0x54>
 800308c:	2c00      	cmp	r4, #0
 800308e:	dc3e      	bgt.n	800310e <print_e+0xd2>
 8003090:	2e67      	cmp	r6, #103	; 0x67
 8003092:	d043      	beq.n	800311c <print_e+0xe0>
 8003094:	2e47      	cmp	r6, #71	; 0x47
 8003096:	d043      	beq.n	8003120 <print_e+0xe4>
 8003098:	461a      	mov	r2, r3
 800309a:	2730      	movs	r7, #48	; 0x30
 800309c:	191d      	adds	r5, r3, r4
 800309e:	1aa9      	subs	r1, r5, r2
 80030a0:	2900      	cmp	r1, #0
 80030a2:	dc38      	bgt.n	8003116 <print_e+0xda>
 80030a4:	2c00      	cmp	r4, #0
 80030a6:	bfa8      	it	ge
 80030a8:	191b      	addge	r3, r3, r4
 80030aa:	1e41      	subs	r1, r0, #1
 80030ac:	2900      	cmp	r1, #0
 80030ae:	9109      	str	r1, [sp, #36]	; 0x24
 80030b0:	461a      	mov	r2, r3
 80030b2:	bfb7      	itett	lt
 80030b4:	212d      	movlt	r1, #45	; 0x2d
 80030b6:	212b      	movge	r1, #43	; 0x2b
 80030b8:	f1c0 0001 	rsblt	r0, r0, #1
 80030bc:	9009      	strlt	r0, [sp, #36]	; 0x24
 80030be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030c0:	f802 6b02 	strb.w	r6, [r2], #2
 80030c4:	bfb4      	ite	lt
 80030c6:	7059      	strblt	r1, [r3, #1]
 80030c8:	7059      	strbge	r1, [r3, #1]
 80030ca:	2863      	cmp	r0, #99	; 0x63
 80030cc:	dd0b      	ble.n	80030e6 <print_e+0xaa>
 80030ce:	2164      	movs	r1, #100	; 0x64
 80030d0:	fb90 f1f1 	sdiv	r1, r0, r1
 80030d4:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80030d8:	1cda      	adds	r2, r3, #3
 80030da:	709c      	strb	r4, [r3, #2]
 80030dc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80030e0:	fb03 0101 	mla	r1, r3, r1, r0
 80030e4:	9109      	str	r1, [sp, #36]	; 0x24
 80030e6:	230a      	movs	r3, #10
 80030e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80030ea:	fb91 f3f3 	sdiv	r3, r1, r3
 80030ee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80030f2:	7010      	strb	r0, [r2, #0]
 80030f4:	f06f 0009 	mvn.w	r0, #9
 80030f8:	fb00 1303 	mla	r3, r0, r3, r1
 80030fc:	3330      	adds	r3, #48	; 0x30
 80030fe:	7053      	strb	r3, [r2, #1]
 8003100:	2300      	movs	r3, #0
 8003102:	7093      	strb	r3, [r2, #2]
 8003104:	e7b6      	b.n	8003074 <print_e+0x38>
 8003106:	222e      	movs	r2, #46	; 0x2e
 8003108:	1cbb      	adds	r3, r7, #2
 800310a:	707a      	strb	r2, [r7, #1]
 800310c:	e7bb      	b.n	8003086 <print_e+0x4a>
 800310e:	f803 2b01 	strb.w	r2, [r3], #1
 8003112:	3c01      	subs	r4, #1
 8003114:	e7b7      	b.n	8003086 <print_e+0x4a>
 8003116:	f802 7b01 	strb.w	r7, [r2], #1
 800311a:	e7c0      	b.n	800309e <print_e+0x62>
 800311c:	2665      	movs	r6, #101	; 0x65
 800311e:	e7c4      	b.n	80030aa <print_e+0x6e>
 8003120:	2645      	movs	r6, #69	; 0x45
 8003122:	e7c2      	b.n	80030aa <print_e+0x6e>
 8003124:	0000      	movs	r0, r0
	...

08003128 <_gcvt>:
 8003128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800312c:	4617      	mov	r7, r2
 800312e:	461d      	mov	r5, r3
 8003130:	b08b      	sub	sp, #44	; 0x2c
 8003132:	4681      	mov	r9, r0
 8003134:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 8003138:	2200      	movs	r2, #0
 800313a:	2300      	movs	r3, #0
 800313c:	4638      	mov	r0, r7
 800313e:	4629      	mov	r1, r5
 8003140:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8003144:	f7fd fc4c 	bl	80009e0 <__aeabi_dcmplt>
 8003148:	b108      	cbz	r0, 800314e <_gcvt+0x26>
 800314a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800314e:	2200      	movs	r2, #0
 8003150:	2300      	movs	r3, #0
 8003152:	4638      	mov	r0, r7
 8003154:	4629      	mov	r1, r5
 8003156:	f7fd fc39 	bl	80009cc <__aeabi_dcmpeq>
 800315a:	b138      	cbz	r0, 800316c <_gcvt+0x44>
 800315c:	2330      	movs	r3, #48	; 0x30
 800315e:	7023      	strb	r3, [r4, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	7063      	strb	r3, [r4, #1]
 8003164:	4620      	mov	r0, r4
 8003166:	b00b      	add	sp, #44	; 0x2c
 8003168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800316c:	a352      	add	r3, pc, #328	; (adr r3, 80032b8 <_gcvt+0x190>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	4638      	mov	r0, r7
 8003174:	4629      	mov	r1, r5
 8003176:	f7fd fc3d 	bl	80009f4 <__aeabi_dcmple>
 800317a:	b168      	cbz	r0, 8003198 <_gcvt+0x70>
 800317c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8003180:	3e01      	subs	r6, #1
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	f8cd 8008 	str.w	r8, [sp, #8]
 8003188:	9600      	str	r6, [sp, #0]
 800318a:	463a      	mov	r2, r7
 800318c:	462b      	mov	r3, r5
 800318e:	4621      	mov	r1, r4
 8003190:	4648      	mov	r0, r9
 8003192:	f7ff ff53 	bl	800303c <print_e>
 8003196:	e7e5      	b.n	8003164 <_gcvt+0x3c>
 8003198:	4630      	mov	r0, r6
 800319a:	f000 fb6f 	bl	800387c <_mprec_log10>
 800319e:	463a      	mov	r2, r7
 80031a0:	462b      	mov	r3, r5
 80031a2:	f7fd fc27 	bl	80009f4 <__aeabi_dcmple>
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d1e8      	bne.n	800317c <_gcvt+0x54>
 80031aa:	2200      	movs	r2, #0
 80031ac:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <_gcvt+0x198>)
 80031ae:	4629      	mov	r1, r5
 80031b0:	4638      	mov	r0, r7
 80031b2:	f7fd fc15 	bl	80009e0 <__aeabi_dcmplt>
 80031b6:	a909      	add	r1, sp, #36	; 0x24
 80031b8:	aa08      	add	r2, sp, #32
 80031ba:	ab07      	add	r3, sp, #28
 80031bc:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80031c0:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80031c4:	b388      	cbz	r0, 800322a <_gcvt+0x102>
 80031c6:	2303      	movs	r3, #3
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	463a      	mov	r2, r7
 80031cc:	462b      	mov	r3, r5
 80031ce:	4648      	mov	r0, r9
 80031d0:	f000 ff7e 	bl	80040d0 <_dtoa_r>
 80031d4:	f242 730f 	movw	r3, #9999	; 0x270f
 80031d8:	9a07      	ldr	r2, [sp, #28]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d027      	beq.n	800322e <_gcvt+0x106>
 80031de:	4623      	mov	r3, r4
 80031e0:	4426      	add	r6, r4
 80031e2:	4607      	mov	r7, r0
 80031e4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80031e8:	1af2      	subs	r2, r6, r3
 80031ea:	9d07      	ldr	r5, [sp, #28]
 80031ec:	b349      	cbz	r1, 8003242 <_gcvt+0x11a>
 80031ee:	2d00      	cmp	r5, #0
 80031f0:	dc22      	bgt.n	8003238 <_gcvt+0x110>
 80031f2:	f1b8 0f00 	cmp.w	r8, #0
 80031f6:	d102      	bne.n	80031fe <_gcvt+0xd6>
 80031f8:	7839      	ldrb	r1, [r7, #0]
 80031fa:	2900      	cmp	r1, #0
 80031fc:	d049      	beq.n	8003292 <_gcvt+0x16a>
 80031fe:	429c      	cmp	r4, r3
 8003200:	bf04      	itt	eq
 8003202:	2130      	moveq	r1, #48	; 0x30
 8003204:	7021      	strbeq	r1, [r4, #0]
 8003206:	f04f 012e 	mov.w	r1, #46	; 0x2e
 800320a:	f04f 0000 	mov.w	r0, #0
 800320e:	f04f 0630 	mov.w	r6, #48	; 0x30
 8003212:	bf08      	it	eq
 8003214:	1c63      	addeq	r3, r4, #1
 8003216:	7019      	strb	r1, [r3, #0]
 8003218:	9907      	ldr	r1, [sp, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	2900      	cmp	r1, #0
 800321e:	460d      	mov	r5, r1
 8003220:	db24      	blt.n	800326c <_gcvt+0x144>
 8003222:	b100      	cbz	r0, 8003226 <_gcvt+0xfe>
 8003224:	9107      	str	r1, [sp, #28]
 8003226:	1e79      	subs	r1, r7, #1
 8003228:	e02b      	b.n	8003282 <_gcvt+0x15a>
 800322a:	2302      	movs	r3, #2
 800322c:	e7cc      	b.n	80031c8 <_gcvt+0xa0>
 800322e:	4601      	mov	r1, r0
 8003230:	4620      	mov	r0, r4
 8003232:	f000 feb7 	bl	8003fa4 <strcpy>
 8003236:	e795      	b.n	8003164 <_gcvt+0x3c>
 8003238:	3d01      	subs	r5, #1
 800323a:	f803 1b01 	strb.w	r1, [r3], #1
 800323e:	9507      	str	r5, [sp, #28]
 8003240:	e7cf      	b.n	80031e2 <_gcvt+0xba>
 8003242:	1aad      	subs	r5, r5, r2
 8003244:	2630      	movs	r6, #48	; 0x30
 8003246:	e005      	b.n	8003254 <_gcvt+0x12c>
 8003248:	2a00      	cmp	r2, #0
 800324a:	dd06      	ble.n	800325a <_gcvt+0x132>
 800324c:	2101      	movs	r1, #1
 800324e:	f803 6b01 	strb.w	r6, [r3], #1
 8003252:	3a01      	subs	r2, #1
 8003254:	18a8      	adds	r0, r5, r2
 8003256:	2800      	cmp	r0, #0
 8003258:	dcf6      	bgt.n	8003248 <_gcvt+0x120>
 800325a:	2900      	cmp	r1, #0
 800325c:	d0c9      	beq.n	80031f2 <_gcvt+0xca>
 800325e:	9007      	str	r0, [sp, #28]
 8003260:	e7c7      	b.n	80031f2 <_gcvt+0xca>
 8003262:	f803 6b01 	strb.w	r6, [r3], #1
 8003266:	3a01      	subs	r2, #1
 8003268:	2001      	movs	r0, #1
 800326a:	e7d7      	b.n	800321c <_gcvt+0xf4>
 800326c:	2a00      	cmp	r2, #0
 800326e:	f101 0101 	add.w	r1, r1, #1
 8003272:	dcf6      	bgt.n	8003262 <_gcvt+0x13a>
 8003274:	2800      	cmp	r0, #0
 8003276:	d0d6      	beq.n	8003226 <_gcvt+0xfe>
 8003278:	9507      	str	r5, [sp, #28]
 800327a:	e7d4      	b.n	8003226 <_gcvt+0xfe>
 800327c:	f803 0b01 	strb.w	r0, [r3], #1
 8003280:	3a01      	subs	r2, #1
 8003282:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003286:	b108      	cbz	r0, 800328c <_gcvt+0x164>
 8003288:	2a00      	cmp	r2, #0
 800328a:	dcf7      	bgt.n	800327c <_gcvt+0x154>
 800328c:	f1b8 0f00 	cmp.w	r8, #0
 8003290:	d10b      	bne.n	80032aa <_gcvt+0x182>
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e765      	b.n	8003164 <_gcvt+0x3c>
 8003298:	f801 6b01 	strb.w	r6, [r1], #1
 800329c:	1a68      	subs	r0, r5, r1
 800329e:	2800      	cmp	r0, #0
 80032a0:	dcfa      	bgt.n	8003298 <_gcvt+0x170>
 80032a2:	2a00      	cmp	r2, #0
 80032a4:	bfa8      	it	ge
 80032a6:	189b      	addge	r3, r3, r2
 80032a8:	e7f3      	b.n	8003292 <_gcvt+0x16a>
 80032aa:	4619      	mov	r1, r3
 80032ac:	189d      	adds	r5, r3, r2
 80032ae:	2630      	movs	r6, #48	; 0x30
 80032b0:	e7f4      	b.n	800329c <_gcvt+0x174>
 80032b2:	bf00      	nop
 80032b4:	f3af 8000 	nop.w
 80032b8:	eb1c432d 	.word	0xeb1c432d
 80032bc:	3f1a36e2 	.word	0x3f1a36e2
 80032c0:	3ff00000 	.word	0x3ff00000

080032c4 <_Balloc>:
 80032c4:	b570      	push	{r4, r5, r6, lr}
 80032c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80032c8:	4604      	mov	r4, r0
 80032ca:	460e      	mov	r6, r1
 80032cc:	b93d      	cbnz	r5, 80032de <_Balloc+0x1a>
 80032ce:	2010      	movs	r0, #16
 80032d0:	f001 fcb2 	bl	8004c38 <malloc>
 80032d4:	6260      	str	r0, [r4, #36]	; 0x24
 80032d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80032da:	6005      	str	r5, [r0, #0]
 80032dc:	60c5      	str	r5, [r0, #12]
 80032de:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80032e0:	68eb      	ldr	r3, [r5, #12]
 80032e2:	b183      	cbz	r3, 8003306 <_Balloc+0x42>
 80032e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80032ec:	b9b8      	cbnz	r0, 800331e <_Balloc+0x5a>
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f506 	lsl.w	r5, r1, r6
 80032f4:	1d6a      	adds	r2, r5, #5
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	4620      	mov	r0, r4
 80032fa:	f000 fadb 	bl	80038b4 <_calloc_r>
 80032fe:	b160      	cbz	r0, 800331a <_Balloc+0x56>
 8003300:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003304:	e00e      	b.n	8003324 <_Balloc+0x60>
 8003306:	2221      	movs	r2, #33	; 0x21
 8003308:	2104      	movs	r1, #4
 800330a:	4620      	mov	r0, r4
 800330c:	f000 fad2 	bl	80038b4 <_calloc_r>
 8003310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003312:	60e8      	str	r0, [r5, #12]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e4      	bne.n	80032e4 <_Balloc+0x20>
 800331a:	2000      	movs	r0, #0
 800331c:	bd70      	pop	{r4, r5, r6, pc}
 800331e:	6802      	ldr	r2, [r0, #0]
 8003320:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003324:	2300      	movs	r3, #0
 8003326:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800332a:	e7f7      	b.n	800331c <_Balloc+0x58>

0800332c <_Bfree>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003330:	4606      	mov	r6, r0
 8003332:	460d      	mov	r5, r1
 8003334:	b93c      	cbnz	r4, 8003346 <_Bfree+0x1a>
 8003336:	2010      	movs	r0, #16
 8003338:	f001 fc7e 	bl	8004c38 <malloc>
 800333c:	6270      	str	r0, [r6, #36]	; 0x24
 800333e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003342:	6004      	str	r4, [r0, #0]
 8003344:	60c4      	str	r4, [r0, #12]
 8003346:	b13d      	cbz	r5, 8003358 <_Bfree+0x2c>
 8003348:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800334a:	686a      	ldr	r2, [r5, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003352:	6029      	str	r1, [r5, #0]
 8003354:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003358:	bd70      	pop	{r4, r5, r6, pc}

0800335a <__multadd>:
 800335a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800335e:	461f      	mov	r7, r3
 8003360:	4606      	mov	r6, r0
 8003362:	460c      	mov	r4, r1
 8003364:	2300      	movs	r3, #0
 8003366:	690d      	ldr	r5, [r1, #16]
 8003368:	f101 0c14 	add.w	ip, r1, #20
 800336c:	f8dc 0000 	ldr.w	r0, [ip]
 8003370:	3301      	adds	r3, #1
 8003372:	b281      	uxth	r1, r0
 8003374:	fb02 7101 	mla	r1, r2, r1, r7
 8003378:	0c00      	lsrs	r0, r0, #16
 800337a:	0c0f      	lsrs	r7, r1, #16
 800337c:	fb02 7000 	mla	r0, r2, r0, r7
 8003380:	b289      	uxth	r1, r1
 8003382:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003386:	429d      	cmp	r5, r3
 8003388:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800338c:	f84c 1b04 	str.w	r1, [ip], #4
 8003390:	dcec      	bgt.n	800336c <__multadd+0x12>
 8003392:	b1d7      	cbz	r7, 80033ca <__multadd+0x70>
 8003394:	68a3      	ldr	r3, [r4, #8]
 8003396:	42ab      	cmp	r3, r5
 8003398:	dc12      	bgt.n	80033c0 <__multadd+0x66>
 800339a:	6861      	ldr	r1, [r4, #4]
 800339c:	4630      	mov	r0, r6
 800339e:	3101      	adds	r1, #1
 80033a0:	f7ff ff90 	bl	80032c4 <_Balloc>
 80033a4:	4680      	mov	r8, r0
 80033a6:	6922      	ldr	r2, [r4, #16]
 80033a8:	f104 010c 	add.w	r1, r4, #12
 80033ac:	3202      	adds	r2, #2
 80033ae:	0092      	lsls	r2, r2, #2
 80033b0:	300c      	adds	r0, #12
 80033b2:	f001 fc57 	bl	8004c64 <memcpy>
 80033b6:	4621      	mov	r1, r4
 80033b8:	4630      	mov	r0, r6
 80033ba:	f7ff ffb7 	bl	800332c <_Bfree>
 80033be:	4644      	mov	r4, r8
 80033c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80033c4:	3501      	adds	r5, #1
 80033c6:	615f      	str	r7, [r3, #20]
 80033c8:	6125      	str	r5, [r4, #16]
 80033ca:	4620      	mov	r0, r4
 80033cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080033d0 <__hi0bits>:
 80033d0:	0c02      	lsrs	r2, r0, #16
 80033d2:	0412      	lsls	r2, r2, #16
 80033d4:	4603      	mov	r3, r0
 80033d6:	b9b2      	cbnz	r2, 8003406 <__hi0bits+0x36>
 80033d8:	0403      	lsls	r3, r0, #16
 80033da:	2010      	movs	r0, #16
 80033dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80033e0:	bf04      	itt	eq
 80033e2:	021b      	lsleq	r3, r3, #8
 80033e4:	3008      	addeq	r0, #8
 80033e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80033ea:	bf04      	itt	eq
 80033ec:	011b      	lsleq	r3, r3, #4
 80033ee:	3004      	addeq	r0, #4
 80033f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80033f4:	bf04      	itt	eq
 80033f6:	009b      	lsleq	r3, r3, #2
 80033f8:	3002      	addeq	r0, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	db06      	blt.n	800340c <__hi0bits+0x3c>
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	d503      	bpl.n	800340a <__hi0bits+0x3a>
 8003402:	3001      	adds	r0, #1
 8003404:	4770      	bx	lr
 8003406:	2000      	movs	r0, #0
 8003408:	e7e8      	b.n	80033dc <__hi0bits+0xc>
 800340a:	2020      	movs	r0, #32
 800340c:	4770      	bx	lr

0800340e <__lo0bits>:
 800340e:	6803      	ldr	r3, [r0, #0]
 8003410:	4601      	mov	r1, r0
 8003412:	f013 0207 	ands.w	r2, r3, #7
 8003416:	d00b      	beq.n	8003430 <__lo0bits+0x22>
 8003418:	07da      	lsls	r2, r3, #31
 800341a:	d423      	bmi.n	8003464 <__lo0bits+0x56>
 800341c:	0798      	lsls	r0, r3, #30
 800341e:	bf49      	itett	mi
 8003420:	085b      	lsrmi	r3, r3, #1
 8003422:	089b      	lsrpl	r3, r3, #2
 8003424:	2001      	movmi	r0, #1
 8003426:	600b      	strmi	r3, [r1, #0]
 8003428:	bf5c      	itt	pl
 800342a:	600b      	strpl	r3, [r1, #0]
 800342c:	2002      	movpl	r0, #2
 800342e:	4770      	bx	lr
 8003430:	b298      	uxth	r0, r3
 8003432:	b9a8      	cbnz	r0, 8003460 <__lo0bits+0x52>
 8003434:	2010      	movs	r0, #16
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	f013 0fff 	tst.w	r3, #255	; 0xff
 800343c:	bf04      	itt	eq
 800343e:	0a1b      	lsreq	r3, r3, #8
 8003440:	3008      	addeq	r0, #8
 8003442:	071a      	lsls	r2, r3, #28
 8003444:	bf04      	itt	eq
 8003446:	091b      	lsreq	r3, r3, #4
 8003448:	3004      	addeq	r0, #4
 800344a:	079a      	lsls	r2, r3, #30
 800344c:	bf04      	itt	eq
 800344e:	089b      	lsreq	r3, r3, #2
 8003450:	3002      	addeq	r0, #2
 8003452:	07da      	lsls	r2, r3, #31
 8003454:	d402      	bmi.n	800345c <__lo0bits+0x4e>
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	d006      	beq.n	8003468 <__lo0bits+0x5a>
 800345a:	3001      	adds	r0, #1
 800345c:	600b      	str	r3, [r1, #0]
 800345e:	4770      	bx	lr
 8003460:	4610      	mov	r0, r2
 8003462:	e7e9      	b.n	8003438 <__lo0bits+0x2a>
 8003464:	2000      	movs	r0, #0
 8003466:	4770      	bx	lr
 8003468:	2020      	movs	r0, #32
 800346a:	4770      	bx	lr

0800346c <__i2b>:
 800346c:	b510      	push	{r4, lr}
 800346e:	460c      	mov	r4, r1
 8003470:	2101      	movs	r1, #1
 8003472:	f7ff ff27 	bl	80032c4 <_Balloc>
 8003476:	2201      	movs	r2, #1
 8003478:	6144      	str	r4, [r0, #20]
 800347a:	6102      	str	r2, [r0, #16]
 800347c:	bd10      	pop	{r4, pc}

0800347e <__multiply>:
 800347e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003482:	4614      	mov	r4, r2
 8003484:	690a      	ldr	r2, [r1, #16]
 8003486:	6923      	ldr	r3, [r4, #16]
 8003488:	4688      	mov	r8, r1
 800348a:	429a      	cmp	r2, r3
 800348c:	bfbe      	ittt	lt
 800348e:	460b      	movlt	r3, r1
 8003490:	46a0      	movlt	r8, r4
 8003492:	461c      	movlt	r4, r3
 8003494:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003498:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800349c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80034a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80034a4:	eb07 0609 	add.w	r6, r7, r9
 80034a8:	42b3      	cmp	r3, r6
 80034aa:	bfb8      	it	lt
 80034ac:	3101      	addlt	r1, #1
 80034ae:	f7ff ff09 	bl	80032c4 <_Balloc>
 80034b2:	f100 0514 	add.w	r5, r0, #20
 80034b6:	462b      	mov	r3, r5
 80034b8:	2200      	movs	r2, #0
 80034ba:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80034be:	4573      	cmp	r3, lr
 80034c0:	d316      	bcc.n	80034f0 <__multiply+0x72>
 80034c2:	f104 0214 	add.w	r2, r4, #20
 80034c6:	f108 0114 	add.w	r1, r8, #20
 80034ca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80034ce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	9b00      	ldr	r3, [sp, #0]
 80034d6:	9201      	str	r2, [sp, #4]
 80034d8:	4293      	cmp	r3, r2
 80034da:	d80c      	bhi.n	80034f6 <__multiply+0x78>
 80034dc:	2e00      	cmp	r6, #0
 80034de:	dd03      	ble.n	80034e8 <__multiply+0x6a>
 80034e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05d      	beq.n	80035a4 <__multiply+0x126>
 80034e8:	6106      	str	r6, [r0, #16]
 80034ea:	b003      	add	sp, #12
 80034ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f0:	f843 2b04 	str.w	r2, [r3], #4
 80034f4:	e7e3      	b.n	80034be <__multiply+0x40>
 80034f6:	f8b2 b000 	ldrh.w	fp, [r2]
 80034fa:	f1bb 0f00 	cmp.w	fp, #0
 80034fe:	d023      	beq.n	8003548 <__multiply+0xca>
 8003500:	4689      	mov	r9, r1
 8003502:	46ac      	mov	ip, r5
 8003504:	f04f 0800 	mov.w	r8, #0
 8003508:	f859 4b04 	ldr.w	r4, [r9], #4
 800350c:	f8dc a000 	ldr.w	sl, [ip]
 8003510:	b2a3      	uxth	r3, r4
 8003512:	fa1f fa8a 	uxth.w	sl, sl
 8003516:	fb0b a303 	mla	r3, fp, r3, sl
 800351a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800351e:	f8dc 4000 	ldr.w	r4, [ip]
 8003522:	4443      	add	r3, r8
 8003524:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003528:	fb0b 840a 	mla	r4, fp, sl, r8
 800352c:	46e2      	mov	sl, ip
 800352e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003532:	b29b      	uxth	r3, r3
 8003534:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003538:	454f      	cmp	r7, r9
 800353a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800353e:	f84a 3b04 	str.w	r3, [sl], #4
 8003542:	d82b      	bhi.n	800359c <__multiply+0x11e>
 8003544:	f8cc 8004 	str.w	r8, [ip, #4]
 8003548:	9b01      	ldr	r3, [sp, #4]
 800354a:	3204      	adds	r2, #4
 800354c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8003550:	f1ba 0f00 	cmp.w	sl, #0
 8003554:	d020      	beq.n	8003598 <__multiply+0x11a>
 8003556:	4689      	mov	r9, r1
 8003558:	46a8      	mov	r8, r5
 800355a:	f04f 0b00 	mov.w	fp, #0
 800355e:	682b      	ldr	r3, [r5, #0]
 8003560:	f8b9 c000 	ldrh.w	ip, [r9]
 8003564:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003568:	b29b      	uxth	r3, r3
 800356a:	fb0a 440c 	mla	r4, sl, ip, r4
 800356e:	46c4      	mov	ip, r8
 8003570:	445c      	add	r4, fp
 8003572:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003576:	f84c 3b04 	str.w	r3, [ip], #4
 800357a:	f859 3b04 	ldr.w	r3, [r9], #4
 800357e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	fb0a b303 	mla	r3, sl, r3, fp
 8003588:	454f      	cmp	r7, r9
 800358a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800358e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003592:	d805      	bhi.n	80035a0 <__multiply+0x122>
 8003594:	f8c8 3004 	str.w	r3, [r8, #4]
 8003598:	3504      	adds	r5, #4
 800359a:	e79b      	b.n	80034d4 <__multiply+0x56>
 800359c:	46d4      	mov	ip, sl
 800359e:	e7b3      	b.n	8003508 <__multiply+0x8a>
 80035a0:	46e0      	mov	r8, ip
 80035a2:	e7dd      	b.n	8003560 <__multiply+0xe2>
 80035a4:	3e01      	subs	r6, #1
 80035a6:	e799      	b.n	80034dc <__multiply+0x5e>

080035a8 <__pow5mult>:
 80035a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035ac:	4615      	mov	r5, r2
 80035ae:	f012 0203 	ands.w	r2, r2, #3
 80035b2:	4606      	mov	r6, r0
 80035b4:	460f      	mov	r7, r1
 80035b6:	d007      	beq.n	80035c8 <__pow5mult+0x20>
 80035b8:	4c21      	ldr	r4, [pc, #132]	; (8003640 <__pow5mult+0x98>)
 80035ba:	3a01      	subs	r2, #1
 80035bc:	2300      	movs	r3, #0
 80035be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80035c2:	f7ff feca 	bl	800335a <__multadd>
 80035c6:	4607      	mov	r7, r0
 80035c8:	10ad      	asrs	r5, r5, #2
 80035ca:	d035      	beq.n	8003638 <__pow5mult+0x90>
 80035cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80035ce:	b93c      	cbnz	r4, 80035e0 <__pow5mult+0x38>
 80035d0:	2010      	movs	r0, #16
 80035d2:	f001 fb31 	bl	8004c38 <malloc>
 80035d6:	6270      	str	r0, [r6, #36]	; 0x24
 80035d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80035dc:	6004      	str	r4, [r0, #0]
 80035de:	60c4      	str	r4, [r0, #12]
 80035e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80035e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80035e8:	b94c      	cbnz	r4, 80035fe <__pow5mult+0x56>
 80035ea:	f240 2171 	movw	r1, #625	; 0x271
 80035ee:	4630      	mov	r0, r6
 80035f0:	f7ff ff3c 	bl	800346c <__i2b>
 80035f4:	2300      	movs	r3, #0
 80035f6:	4604      	mov	r4, r0
 80035f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80035fc:	6003      	str	r3, [r0, #0]
 80035fe:	f04f 0800 	mov.w	r8, #0
 8003602:	07eb      	lsls	r3, r5, #31
 8003604:	d50a      	bpl.n	800361c <__pow5mult+0x74>
 8003606:	4639      	mov	r1, r7
 8003608:	4622      	mov	r2, r4
 800360a:	4630      	mov	r0, r6
 800360c:	f7ff ff37 	bl	800347e <__multiply>
 8003610:	4681      	mov	r9, r0
 8003612:	4639      	mov	r1, r7
 8003614:	4630      	mov	r0, r6
 8003616:	f7ff fe89 	bl	800332c <_Bfree>
 800361a:	464f      	mov	r7, r9
 800361c:	106d      	asrs	r5, r5, #1
 800361e:	d00b      	beq.n	8003638 <__pow5mult+0x90>
 8003620:	6820      	ldr	r0, [r4, #0]
 8003622:	b938      	cbnz	r0, 8003634 <__pow5mult+0x8c>
 8003624:	4622      	mov	r2, r4
 8003626:	4621      	mov	r1, r4
 8003628:	4630      	mov	r0, r6
 800362a:	f7ff ff28 	bl	800347e <__multiply>
 800362e:	6020      	str	r0, [r4, #0]
 8003630:	f8c0 8000 	str.w	r8, [r0]
 8003634:	4604      	mov	r4, r0
 8003636:	e7e4      	b.n	8003602 <__pow5mult+0x5a>
 8003638:	4638      	mov	r0, r7
 800363a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800363e:	bf00      	nop
 8003640:	08005318 	.word	0x08005318

08003644 <__lshift>:
 8003644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003648:	460c      	mov	r4, r1
 800364a:	4607      	mov	r7, r0
 800364c:	4616      	mov	r6, r2
 800364e:	6923      	ldr	r3, [r4, #16]
 8003650:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003654:	eb0a 0903 	add.w	r9, sl, r3
 8003658:	6849      	ldr	r1, [r1, #4]
 800365a:	68a3      	ldr	r3, [r4, #8]
 800365c:	f109 0501 	add.w	r5, r9, #1
 8003660:	42ab      	cmp	r3, r5
 8003662:	db32      	blt.n	80036ca <__lshift+0x86>
 8003664:	4638      	mov	r0, r7
 8003666:	f7ff fe2d 	bl	80032c4 <_Balloc>
 800366a:	2300      	movs	r3, #0
 800366c:	4680      	mov	r8, r0
 800366e:	461a      	mov	r2, r3
 8003670:	f100 0114 	add.w	r1, r0, #20
 8003674:	4553      	cmp	r3, sl
 8003676:	db2b      	blt.n	80036d0 <__lshift+0x8c>
 8003678:	6920      	ldr	r0, [r4, #16]
 800367a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800367e:	f104 0314 	add.w	r3, r4, #20
 8003682:	f016 021f 	ands.w	r2, r6, #31
 8003686:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800368a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800368e:	d025      	beq.n	80036dc <__lshift+0x98>
 8003690:	2000      	movs	r0, #0
 8003692:	f1c2 0e20 	rsb	lr, r2, #32
 8003696:	468a      	mov	sl, r1
 8003698:	681e      	ldr	r6, [r3, #0]
 800369a:	4096      	lsls	r6, r2
 800369c:	4330      	orrs	r0, r6
 800369e:	f84a 0b04 	str.w	r0, [sl], #4
 80036a2:	f853 0b04 	ldr.w	r0, [r3], #4
 80036a6:	459c      	cmp	ip, r3
 80036a8:	fa20 f00e 	lsr.w	r0, r0, lr
 80036ac:	d814      	bhi.n	80036d8 <__lshift+0x94>
 80036ae:	6048      	str	r0, [r1, #4]
 80036b0:	b108      	cbz	r0, 80036b6 <__lshift+0x72>
 80036b2:	f109 0502 	add.w	r5, r9, #2
 80036b6:	3d01      	subs	r5, #1
 80036b8:	4638      	mov	r0, r7
 80036ba:	f8c8 5010 	str.w	r5, [r8, #16]
 80036be:	4621      	mov	r1, r4
 80036c0:	f7ff fe34 	bl	800332c <_Bfree>
 80036c4:	4640      	mov	r0, r8
 80036c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ca:	3101      	adds	r1, #1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	e7c7      	b.n	8003660 <__lshift+0x1c>
 80036d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80036d4:	3301      	adds	r3, #1
 80036d6:	e7cd      	b.n	8003674 <__lshift+0x30>
 80036d8:	4651      	mov	r1, sl
 80036da:	e7dc      	b.n	8003696 <__lshift+0x52>
 80036dc:	3904      	subs	r1, #4
 80036de:	f853 2b04 	ldr.w	r2, [r3], #4
 80036e2:	459c      	cmp	ip, r3
 80036e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80036e8:	d8f9      	bhi.n	80036de <__lshift+0x9a>
 80036ea:	e7e4      	b.n	80036b6 <__lshift+0x72>

080036ec <__mcmp>:
 80036ec:	6903      	ldr	r3, [r0, #16]
 80036ee:	690a      	ldr	r2, [r1, #16]
 80036f0:	b530      	push	{r4, r5, lr}
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	d10c      	bne.n	8003710 <__mcmp+0x24>
 80036f6:	0092      	lsls	r2, r2, #2
 80036f8:	3014      	adds	r0, #20
 80036fa:	3114      	adds	r1, #20
 80036fc:	1884      	adds	r4, r0, r2
 80036fe:	4411      	add	r1, r2
 8003700:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003704:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003708:	4295      	cmp	r5, r2
 800370a:	d003      	beq.n	8003714 <__mcmp+0x28>
 800370c:	d305      	bcc.n	800371a <__mcmp+0x2e>
 800370e:	2301      	movs	r3, #1
 8003710:	4618      	mov	r0, r3
 8003712:	bd30      	pop	{r4, r5, pc}
 8003714:	42a0      	cmp	r0, r4
 8003716:	d3f3      	bcc.n	8003700 <__mcmp+0x14>
 8003718:	e7fa      	b.n	8003710 <__mcmp+0x24>
 800371a:	f04f 33ff 	mov.w	r3, #4294967295
 800371e:	e7f7      	b.n	8003710 <__mcmp+0x24>

08003720 <__mdiff>:
 8003720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003724:	460d      	mov	r5, r1
 8003726:	4607      	mov	r7, r0
 8003728:	4611      	mov	r1, r2
 800372a:	4628      	mov	r0, r5
 800372c:	4614      	mov	r4, r2
 800372e:	f7ff ffdd 	bl	80036ec <__mcmp>
 8003732:	1e06      	subs	r6, r0, #0
 8003734:	d108      	bne.n	8003748 <__mdiff+0x28>
 8003736:	4631      	mov	r1, r6
 8003738:	4638      	mov	r0, r7
 800373a:	f7ff fdc3 	bl	80032c4 <_Balloc>
 800373e:	2301      	movs	r3, #1
 8003740:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003748:	bfa4      	itt	ge
 800374a:	4623      	movge	r3, r4
 800374c:	462c      	movge	r4, r5
 800374e:	4638      	mov	r0, r7
 8003750:	6861      	ldr	r1, [r4, #4]
 8003752:	bfa6      	itte	ge
 8003754:	461d      	movge	r5, r3
 8003756:	2600      	movge	r6, #0
 8003758:	2601      	movlt	r6, #1
 800375a:	f7ff fdb3 	bl	80032c4 <_Balloc>
 800375e:	f04f 0e00 	mov.w	lr, #0
 8003762:	60c6      	str	r6, [r0, #12]
 8003764:	692b      	ldr	r3, [r5, #16]
 8003766:	6926      	ldr	r6, [r4, #16]
 8003768:	f104 0214 	add.w	r2, r4, #20
 800376c:	f105 0914 	add.w	r9, r5, #20
 8003770:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003774:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003778:	f100 0114 	add.w	r1, r0, #20
 800377c:	f852 ab04 	ldr.w	sl, [r2], #4
 8003780:	f859 5b04 	ldr.w	r5, [r9], #4
 8003784:	fa1f f38a 	uxth.w	r3, sl
 8003788:	4473      	add	r3, lr
 800378a:	b2ac      	uxth	r4, r5
 800378c:	1b1b      	subs	r3, r3, r4
 800378e:	0c2c      	lsrs	r4, r5, #16
 8003790:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003794:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003798:	b29b      	uxth	r3, r3
 800379a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800379e:	45c8      	cmp	r8, r9
 80037a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80037a4:	4694      	mov	ip, r2
 80037a6:	f841 4b04 	str.w	r4, [r1], #4
 80037aa:	d8e7      	bhi.n	800377c <__mdiff+0x5c>
 80037ac:	45bc      	cmp	ip, r7
 80037ae:	d304      	bcc.n	80037ba <__mdiff+0x9a>
 80037b0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80037b4:	b183      	cbz	r3, 80037d8 <__mdiff+0xb8>
 80037b6:	6106      	str	r6, [r0, #16]
 80037b8:	e7c4      	b.n	8003744 <__mdiff+0x24>
 80037ba:	f85c 4b04 	ldr.w	r4, [ip], #4
 80037be:	b2a2      	uxth	r2, r4
 80037c0:	4472      	add	r2, lr
 80037c2:	1413      	asrs	r3, r2, #16
 80037c4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80037c8:	b292      	uxth	r2, r2
 80037ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80037ce:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80037d2:	f841 2b04 	str.w	r2, [r1], #4
 80037d6:	e7e9      	b.n	80037ac <__mdiff+0x8c>
 80037d8:	3e01      	subs	r6, #1
 80037da:	e7e9      	b.n	80037b0 <__mdiff+0x90>

080037dc <__d2b>:
 80037dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80037e0:	461c      	mov	r4, r3
 80037e2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80037e6:	2101      	movs	r1, #1
 80037e8:	4690      	mov	r8, r2
 80037ea:	f7ff fd6b 	bl	80032c4 <_Balloc>
 80037ee:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80037f2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80037f6:	4607      	mov	r7, r0
 80037f8:	bb34      	cbnz	r4, 8003848 <__d2b+0x6c>
 80037fa:	9201      	str	r2, [sp, #4]
 80037fc:	f1b8 0200 	subs.w	r2, r8, #0
 8003800:	d027      	beq.n	8003852 <__d2b+0x76>
 8003802:	a802      	add	r0, sp, #8
 8003804:	f840 2d08 	str.w	r2, [r0, #-8]!
 8003808:	f7ff fe01 	bl	800340e <__lo0bits>
 800380c:	9900      	ldr	r1, [sp, #0]
 800380e:	b1f0      	cbz	r0, 800384e <__d2b+0x72>
 8003810:	9a01      	ldr	r2, [sp, #4]
 8003812:	f1c0 0320 	rsb	r3, r0, #32
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	430b      	orrs	r3, r1
 800381c:	40c2      	lsrs	r2, r0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	9201      	str	r2, [sp, #4]
 8003822:	9b01      	ldr	r3, [sp, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf14      	ite	ne
 8003828:	2102      	movne	r1, #2
 800382a:	2101      	moveq	r1, #1
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	6139      	str	r1, [r7, #16]
 8003830:	b1c4      	cbz	r4, 8003864 <__d2b+0x88>
 8003832:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003836:	4404      	add	r4, r0
 8003838:	6034      	str	r4, [r6, #0]
 800383a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800383e:	6028      	str	r0, [r5, #0]
 8003840:	4638      	mov	r0, r7
 8003842:	b002      	add	sp, #8
 8003844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003848:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800384c:	e7d5      	b.n	80037fa <__d2b+0x1e>
 800384e:	6179      	str	r1, [r7, #20]
 8003850:	e7e7      	b.n	8003822 <__d2b+0x46>
 8003852:	a801      	add	r0, sp, #4
 8003854:	f7ff fddb 	bl	800340e <__lo0bits>
 8003858:	2101      	movs	r1, #1
 800385a:	9b01      	ldr	r3, [sp, #4]
 800385c:	6139      	str	r1, [r7, #16]
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	3020      	adds	r0, #32
 8003862:	e7e5      	b.n	8003830 <__d2b+0x54>
 8003864:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003868:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800386c:	6030      	str	r0, [r6, #0]
 800386e:	6918      	ldr	r0, [r3, #16]
 8003870:	f7ff fdae 	bl	80033d0 <__hi0bits>
 8003874:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003878:	e7e1      	b.n	800383e <__d2b+0x62>
	...

0800387c <_mprec_log10>:
 800387c:	2817      	cmp	r0, #23
 800387e:	b5d0      	push	{r4, r6, r7, lr}
 8003880:	4604      	mov	r4, r0
 8003882:	dc05      	bgt.n	8003890 <_mprec_log10+0x14>
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <_mprec_log10+0x2c>)
 8003886:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800388a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800388e:	bdd0      	pop	{r4, r6, r7, pc}
 8003890:	2000      	movs	r0, #0
 8003892:	2600      	movs	r6, #0
 8003894:	4905      	ldr	r1, [pc, #20]	; (80038ac <_mprec_log10+0x30>)
 8003896:	4f06      	ldr	r7, [pc, #24]	; (80038b0 <_mprec_log10+0x34>)
 8003898:	4632      	mov	r2, r6
 800389a:	463b      	mov	r3, r7
 800389c:	f7fc fe2e 	bl	80004fc <__aeabi_dmul>
 80038a0:	3c01      	subs	r4, #1
 80038a2:	d1f9      	bne.n	8003898 <_mprec_log10+0x1c>
 80038a4:	e7f3      	b.n	800388e <_mprec_log10+0x12>
 80038a6:	bf00      	nop
 80038a8:	08005250 	.word	0x08005250
 80038ac:	3ff00000 	.word	0x3ff00000
 80038b0:	40240000 	.word	0x40240000

080038b4 <_calloc_r>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	fb02 f401 	mul.w	r4, r2, r1
 80038ba:	4621      	mov	r1, r4
 80038bc:	f000 f808 	bl	80038d0 <_malloc_r>
 80038c0:	4605      	mov	r5, r0
 80038c2:	b118      	cbz	r0, 80038cc <_calloc_r+0x18>
 80038c4:	4622      	mov	r2, r4
 80038c6:	2100      	movs	r1, #0
 80038c8:	f7ff fb90 	bl	8002fec <memset>
 80038cc:	4628      	mov	r0, r5
 80038ce:	bd38      	pop	{r3, r4, r5, pc}

080038d0 <_malloc_r>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	1ccd      	adds	r5, r1, #3
 80038d4:	f025 0503 	bic.w	r5, r5, #3
 80038d8:	3508      	adds	r5, #8
 80038da:	2d0c      	cmp	r5, #12
 80038dc:	bf38      	it	cc
 80038de:	250c      	movcc	r5, #12
 80038e0:	2d00      	cmp	r5, #0
 80038e2:	4606      	mov	r6, r0
 80038e4:	db01      	blt.n	80038ea <_malloc_r+0x1a>
 80038e6:	42a9      	cmp	r1, r5
 80038e8:	d903      	bls.n	80038f2 <_malloc_r+0x22>
 80038ea:	230c      	movs	r3, #12
 80038ec:	6033      	str	r3, [r6, #0]
 80038ee:	2000      	movs	r0, #0
 80038f0:	bd70      	pop	{r4, r5, r6, pc}
 80038f2:	f001 f9db 	bl	8004cac <__malloc_lock>
 80038f6:	4a21      	ldr	r2, [pc, #132]	; (800397c <_malloc_r+0xac>)
 80038f8:	6814      	ldr	r4, [r2, #0]
 80038fa:	4621      	mov	r1, r4
 80038fc:	b991      	cbnz	r1, 8003924 <_malloc_r+0x54>
 80038fe:	4c20      	ldr	r4, [pc, #128]	; (8003980 <_malloc_r+0xb0>)
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	b91b      	cbnz	r3, 800390c <_malloc_r+0x3c>
 8003904:	4630      	mov	r0, r6
 8003906:	f000 fb3d 	bl	8003f84 <_sbrk_r>
 800390a:	6020      	str	r0, [r4, #0]
 800390c:	4629      	mov	r1, r5
 800390e:	4630      	mov	r0, r6
 8003910:	f000 fb38 	bl	8003f84 <_sbrk_r>
 8003914:	1c43      	adds	r3, r0, #1
 8003916:	d124      	bne.n	8003962 <_malloc_r+0x92>
 8003918:	230c      	movs	r3, #12
 800391a:	4630      	mov	r0, r6
 800391c:	6033      	str	r3, [r6, #0]
 800391e:	f001 f9c6 	bl	8004cae <__malloc_unlock>
 8003922:	e7e4      	b.n	80038ee <_malloc_r+0x1e>
 8003924:	680b      	ldr	r3, [r1, #0]
 8003926:	1b5b      	subs	r3, r3, r5
 8003928:	d418      	bmi.n	800395c <_malloc_r+0x8c>
 800392a:	2b0b      	cmp	r3, #11
 800392c:	d90f      	bls.n	800394e <_malloc_r+0x7e>
 800392e:	600b      	str	r3, [r1, #0]
 8003930:	18cc      	adds	r4, r1, r3
 8003932:	50cd      	str	r5, [r1, r3]
 8003934:	4630      	mov	r0, r6
 8003936:	f001 f9ba 	bl	8004cae <__malloc_unlock>
 800393a:	f104 000b 	add.w	r0, r4, #11
 800393e:	1d23      	adds	r3, r4, #4
 8003940:	f020 0007 	bic.w	r0, r0, #7
 8003944:	1ac3      	subs	r3, r0, r3
 8003946:	d0d3      	beq.n	80038f0 <_malloc_r+0x20>
 8003948:	425a      	negs	r2, r3
 800394a:	50e2      	str	r2, [r4, r3]
 800394c:	e7d0      	b.n	80038f0 <_malloc_r+0x20>
 800394e:	684b      	ldr	r3, [r1, #4]
 8003950:	428c      	cmp	r4, r1
 8003952:	bf16      	itet	ne
 8003954:	6063      	strne	r3, [r4, #4]
 8003956:	6013      	streq	r3, [r2, #0]
 8003958:	460c      	movne	r4, r1
 800395a:	e7eb      	b.n	8003934 <_malloc_r+0x64>
 800395c:	460c      	mov	r4, r1
 800395e:	6849      	ldr	r1, [r1, #4]
 8003960:	e7cc      	b.n	80038fc <_malloc_r+0x2c>
 8003962:	1cc4      	adds	r4, r0, #3
 8003964:	f024 0403 	bic.w	r4, r4, #3
 8003968:	42a0      	cmp	r0, r4
 800396a:	d005      	beq.n	8003978 <_malloc_r+0xa8>
 800396c:	1a21      	subs	r1, r4, r0
 800396e:	4630      	mov	r0, r6
 8003970:	f000 fb08 	bl	8003f84 <_sbrk_r>
 8003974:	3001      	adds	r0, #1
 8003976:	d0cf      	beq.n	8003918 <_malloc_r+0x48>
 8003978:	6025      	str	r5, [r4, #0]
 800397a:	e7db      	b.n	8003934 <_malloc_r+0x64>
 800397c:	200000c8 	.word	0x200000c8
 8003980:	200000cc 	.word	0x200000cc

08003984 <_realloc_r>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	4607      	mov	r7, r0
 8003988:	4614      	mov	r4, r2
 800398a:	460e      	mov	r6, r1
 800398c:	b921      	cbnz	r1, 8003998 <_realloc_r+0x14>
 800398e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003992:	4611      	mov	r1, r2
 8003994:	f7ff bf9c 	b.w	80038d0 <_malloc_r>
 8003998:	b922      	cbnz	r2, 80039a4 <_realloc_r+0x20>
 800399a:	f001 f989 	bl	8004cb0 <_free_r>
 800399e:	4625      	mov	r5, r4
 80039a0:	4628      	mov	r0, r5
 80039a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a4:	f001 f9d0 	bl	8004d48 <_malloc_usable_size_r>
 80039a8:	42a0      	cmp	r0, r4
 80039aa:	d20f      	bcs.n	80039cc <_realloc_r+0x48>
 80039ac:	4621      	mov	r1, r4
 80039ae:	4638      	mov	r0, r7
 80039b0:	f7ff ff8e 	bl	80038d0 <_malloc_r>
 80039b4:	4605      	mov	r5, r0
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d0f2      	beq.n	80039a0 <_realloc_r+0x1c>
 80039ba:	4631      	mov	r1, r6
 80039bc:	4622      	mov	r2, r4
 80039be:	f001 f951 	bl	8004c64 <memcpy>
 80039c2:	4631      	mov	r1, r6
 80039c4:	4638      	mov	r0, r7
 80039c6:	f001 f973 	bl	8004cb0 <_free_r>
 80039ca:	e7e9      	b.n	80039a0 <_realloc_r+0x1c>
 80039cc:	4635      	mov	r5, r6
 80039ce:	e7e7      	b.n	80039a0 <_realloc_r+0x1c>

080039d0 <__ssputs_r>:
 80039d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039d4:	688e      	ldr	r6, [r1, #8]
 80039d6:	4682      	mov	sl, r0
 80039d8:	429e      	cmp	r6, r3
 80039da:	460c      	mov	r4, r1
 80039dc:	4690      	mov	r8, r2
 80039de:	4699      	mov	r9, r3
 80039e0:	d837      	bhi.n	8003a52 <__ssputs_r+0x82>
 80039e2:	898a      	ldrh	r2, [r1, #12]
 80039e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039e8:	d031      	beq.n	8003a4e <__ssputs_r+0x7e>
 80039ea:	2302      	movs	r3, #2
 80039ec:	6825      	ldr	r5, [r4, #0]
 80039ee:	6909      	ldr	r1, [r1, #16]
 80039f0:	1a6f      	subs	r7, r5, r1
 80039f2:	6965      	ldr	r5, [r4, #20]
 80039f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80039fc:	f109 0301 	add.w	r3, r9, #1
 8003a00:	443b      	add	r3, r7
 8003a02:	429d      	cmp	r5, r3
 8003a04:	bf38      	it	cc
 8003a06:	461d      	movcc	r5, r3
 8003a08:	0553      	lsls	r3, r2, #21
 8003a0a:	d530      	bpl.n	8003a6e <__ssputs_r+0x9e>
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	f7ff ff5f 	bl	80038d0 <_malloc_r>
 8003a12:	4606      	mov	r6, r0
 8003a14:	b950      	cbnz	r0, 8003a2c <__ssputs_r+0x5c>
 8003a16:	230c      	movs	r3, #12
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	f8ca 3000 	str.w	r3, [sl]
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a26:	81a3      	strh	r3, [r4, #12]
 8003a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a2c:	463a      	mov	r2, r7
 8003a2e:	6921      	ldr	r1, [r4, #16]
 8003a30:	f001 f918 	bl	8004c64 <memcpy>
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3e:	81a3      	strh	r3, [r4, #12]
 8003a40:	6126      	str	r6, [r4, #16]
 8003a42:	443e      	add	r6, r7
 8003a44:	6026      	str	r6, [r4, #0]
 8003a46:	464e      	mov	r6, r9
 8003a48:	6165      	str	r5, [r4, #20]
 8003a4a:	1bed      	subs	r5, r5, r7
 8003a4c:	60a5      	str	r5, [r4, #8]
 8003a4e:	454e      	cmp	r6, r9
 8003a50:	d900      	bls.n	8003a54 <__ssputs_r+0x84>
 8003a52:	464e      	mov	r6, r9
 8003a54:	4632      	mov	r2, r6
 8003a56:	4641      	mov	r1, r8
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	f001 f90e 	bl	8004c7a <memmove>
 8003a5e:	68a3      	ldr	r3, [r4, #8]
 8003a60:	2000      	movs	r0, #0
 8003a62:	1b9b      	subs	r3, r3, r6
 8003a64:	60a3      	str	r3, [r4, #8]
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	441e      	add	r6, r3
 8003a6a:	6026      	str	r6, [r4, #0]
 8003a6c:	e7dc      	b.n	8003a28 <__ssputs_r+0x58>
 8003a6e:	462a      	mov	r2, r5
 8003a70:	f7ff ff88 	bl	8003984 <_realloc_r>
 8003a74:	4606      	mov	r6, r0
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d1e2      	bne.n	8003a40 <__ssputs_r+0x70>
 8003a7a:	6921      	ldr	r1, [r4, #16]
 8003a7c:	4650      	mov	r0, sl
 8003a7e:	f001 f917 	bl	8004cb0 <_free_r>
 8003a82:	e7c8      	b.n	8003a16 <__ssputs_r+0x46>

08003a84 <_svfiprintf_r>:
 8003a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a88:	461d      	mov	r5, r3
 8003a8a:	898b      	ldrh	r3, [r1, #12]
 8003a8c:	b09d      	sub	sp, #116	; 0x74
 8003a8e:	061f      	lsls	r7, r3, #24
 8003a90:	4680      	mov	r8, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	4616      	mov	r6, r2
 8003a96:	d50f      	bpl.n	8003ab8 <_svfiprintf_r+0x34>
 8003a98:	690b      	ldr	r3, [r1, #16]
 8003a9a:	b96b      	cbnz	r3, 8003ab8 <_svfiprintf_r+0x34>
 8003a9c:	2140      	movs	r1, #64	; 0x40
 8003a9e:	f7ff ff17 	bl	80038d0 <_malloc_r>
 8003aa2:	6020      	str	r0, [r4, #0]
 8003aa4:	6120      	str	r0, [r4, #16]
 8003aa6:	b928      	cbnz	r0, 8003ab4 <_svfiprintf_r+0x30>
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	f8c8 3000 	str.w	r3, [r8]
 8003aae:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab2:	e0c8      	b.n	8003c46 <_svfiprintf_r+0x1c2>
 8003ab4:	2340      	movs	r3, #64	; 0x40
 8003ab6:	6163      	str	r3, [r4, #20]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9309      	str	r3, [sp, #36]	; 0x24
 8003abc:	2320      	movs	r3, #32
 8003abe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ac2:	2330      	movs	r3, #48	; 0x30
 8003ac4:	f04f 0b01 	mov.w	fp, #1
 8003ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003acc:	9503      	str	r5, [sp, #12]
 8003ace:	4637      	mov	r7, r6
 8003ad0:	463d      	mov	r5, r7
 8003ad2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ad6:	b10b      	cbz	r3, 8003adc <_svfiprintf_r+0x58>
 8003ad8:	2b25      	cmp	r3, #37	; 0x25
 8003ada:	d13e      	bne.n	8003b5a <_svfiprintf_r+0xd6>
 8003adc:	ebb7 0a06 	subs.w	sl, r7, r6
 8003ae0:	d00b      	beq.n	8003afa <_svfiprintf_r+0x76>
 8003ae2:	4653      	mov	r3, sl
 8003ae4:	4632      	mov	r2, r6
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	4640      	mov	r0, r8
 8003aea:	f7ff ff71 	bl	80039d0 <__ssputs_r>
 8003aee:	3001      	adds	r0, #1
 8003af0:	f000 80a4 	beq.w	8003c3c <_svfiprintf_r+0x1b8>
 8003af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003af6:	4453      	add	r3, sl
 8003af8:	9309      	str	r3, [sp, #36]	; 0x24
 8003afa:	783b      	ldrb	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 809d 	beq.w	8003c3c <_svfiprintf_r+0x1b8>
 8003b02:	2300      	movs	r3, #0
 8003b04:	f04f 32ff 	mov.w	r2, #4294967295
 8003b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b0c:	9304      	str	r3, [sp, #16]
 8003b0e:	9307      	str	r3, [sp, #28]
 8003b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b14:	931a      	str	r3, [sp, #104]	; 0x68
 8003b16:	462f      	mov	r7, r5
 8003b18:	2205      	movs	r2, #5
 8003b1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003b1e:	4850      	ldr	r0, [pc, #320]	; (8003c60 <_svfiprintf_r+0x1dc>)
 8003b20:	f001 f892 	bl	8004c48 <memchr>
 8003b24:	9b04      	ldr	r3, [sp, #16]
 8003b26:	b9d0      	cbnz	r0, 8003b5e <_svfiprintf_r+0xda>
 8003b28:	06d9      	lsls	r1, r3, #27
 8003b2a:	bf44      	itt	mi
 8003b2c:	2220      	movmi	r2, #32
 8003b2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b32:	071a      	lsls	r2, r3, #28
 8003b34:	bf44      	itt	mi
 8003b36:	222b      	movmi	r2, #43	; 0x2b
 8003b38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b3c:	782a      	ldrb	r2, [r5, #0]
 8003b3e:	2a2a      	cmp	r2, #42	; 0x2a
 8003b40:	d015      	beq.n	8003b6e <_svfiprintf_r+0xea>
 8003b42:	462f      	mov	r7, r5
 8003b44:	2000      	movs	r0, #0
 8003b46:	250a      	movs	r5, #10
 8003b48:	9a07      	ldr	r2, [sp, #28]
 8003b4a:	4639      	mov	r1, r7
 8003b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b50:	3b30      	subs	r3, #48	; 0x30
 8003b52:	2b09      	cmp	r3, #9
 8003b54:	d94d      	bls.n	8003bf2 <_svfiprintf_r+0x16e>
 8003b56:	b1b8      	cbz	r0, 8003b88 <_svfiprintf_r+0x104>
 8003b58:	e00f      	b.n	8003b7a <_svfiprintf_r+0xf6>
 8003b5a:	462f      	mov	r7, r5
 8003b5c:	e7b8      	b.n	8003ad0 <_svfiprintf_r+0x4c>
 8003b5e:	4a40      	ldr	r2, [pc, #256]	; (8003c60 <_svfiprintf_r+0x1dc>)
 8003b60:	463d      	mov	r5, r7
 8003b62:	1a80      	subs	r0, r0, r2
 8003b64:	fa0b f000 	lsl.w	r0, fp, r0
 8003b68:	4318      	orrs	r0, r3
 8003b6a:	9004      	str	r0, [sp, #16]
 8003b6c:	e7d3      	b.n	8003b16 <_svfiprintf_r+0x92>
 8003b6e:	9a03      	ldr	r2, [sp, #12]
 8003b70:	1d11      	adds	r1, r2, #4
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	9103      	str	r1, [sp, #12]
 8003b76:	2a00      	cmp	r2, #0
 8003b78:	db01      	blt.n	8003b7e <_svfiprintf_r+0xfa>
 8003b7a:	9207      	str	r2, [sp, #28]
 8003b7c:	e004      	b.n	8003b88 <_svfiprintf_r+0x104>
 8003b7e:	4252      	negs	r2, r2
 8003b80:	f043 0302 	orr.w	r3, r3, #2
 8003b84:	9207      	str	r2, [sp, #28]
 8003b86:	9304      	str	r3, [sp, #16]
 8003b88:	783b      	ldrb	r3, [r7, #0]
 8003b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b8c:	d10c      	bne.n	8003ba8 <_svfiprintf_r+0x124>
 8003b8e:	787b      	ldrb	r3, [r7, #1]
 8003b90:	2b2a      	cmp	r3, #42	; 0x2a
 8003b92:	d133      	bne.n	8003bfc <_svfiprintf_r+0x178>
 8003b94:	9b03      	ldr	r3, [sp, #12]
 8003b96:	3702      	adds	r7, #2
 8003b98:	1d1a      	adds	r2, r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	9203      	str	r2, [sp, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bfb8      	it	lt
 8003ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ba6:	9305      	str	r3, [sp, #20]
 8003ba8:	4d2e      	ldr	r5, [pc, #184]	; (8003c64 <_svfiprintf_r+0x1e0>)
 8003baa:	2203      	movs	r2, #3
 8003bac:	7839      	ldrb	r1, [r7, #0]
 8003bae:	4628      	mov	r0, r5
 8003bb0:	f001 f84a 	bl	8004c48 <memchr>
 8003bb4:	b138      	cbz	r0, 8003bc6 <_svfiprintf_r+0x142>
 8003bb6:	2340      	movs	r3, #64	; 0x40
 8003bb8:	1b40      	subs	r0, r0, r5
 8003bba:	fa03 f000 	lsl.w	r0, r3, r0
 8003bbe:	9b04      	ldr	r3, [sp, #16]
 8003bc0:	3701      	adds	r7, #1
 8003bc2:	4303      	orrs	r3, r0
 8003bc4:	9304      	str	r3, [sp, #16]
 8003bc6:	7839      	ldrb	r1, [r7, #0]
 8003bc8:	2206      	movs	r2, #6
 8003bca:	4827      	ldr	r0, [pc, #156]	; (8003c68 <_svfiprintf_r+0x1e4>)
 8003bcc:	1c7e      	adds	r6, r7, #1
 8003bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bd2:	f001 f839 	bl	8004c48 <memchr>
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d038      	beq.n	8003c4c <_svfiprintf_r+0x1c8>
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <_svfiprintf_r+0x1e8>)
 8003bdc:	bb13      	cbnz	r3, 8003c24 <_svfiprintf_r+0x1a0>
 8003bde:	9b03      	ldr	r3, [sp, #12]
 8003be0:	3307      	adds	r3, #7
 8003be2:	f023 0307 	bic.w	r3, r3, #7
 8003be6:	3308      	adds	r3, #8
 8003be8:	9303      	str	r3, [sp, #12]
 8003bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bec:	444b      	add	r3, r9
 8003bee:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf0:	e76d      	b.n	8003ace <_svfiprintf_r+0x4a>
 8003bf2:	fb05 3202 	mla	r2, r5, r2, r3
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	460f      	mov	r7, r1
 8003bfa:	e7a6      	b.n	8003b4a <_svfiprintf_r+0xc6>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	250a      	movs	r5, #10
 8003c00:	4619      	mov	r1, r3
 8003c02:	3701      	adds	r7, #1
 8003c04:	9305      	str	r3, [sp, #20]
 8003c06:	4638      	mov	r0, r7
 8003c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c0c:	3a30      	subs	r2, #48	; 0x30
 8003c0e:	2a09      	cmp	r2, #9
 8003c10:	d903      	bls.n	8003c1a <_svfiprintf_r+0x196>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0c8      	beq.n	8003ba8 <_svfiprintf_r+0x124>
 8003c16:	9105      	str	r1, [sp, #20]
 8003c18:	e7c6      	b.n	8003ba8 <_svfiprintf_r+0x124>
 8003c1a:	fb05 2101 	mla	r1, r5, r1, r2
 8003c1e:	2301      	movs	r3, #1
 8003c20:	4607      	mov	r7, r0
 8003c22:	e7f0      	b.n	8003c06 <_svfiprintf_r+0x182>
 8003c24:	ab03      	add	r3, sp, #12
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	4622      	mov	r2, r4
 8003c2a:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <_svfiprintf_r+0x1ec>)
 8003c2c:	a904      	add	r1, sp, #16
 8003c2e:	4640      	mov	r0, r8
 8003c30:	f3af 8000 	nop.w
 8003c34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c38:	4681      	mov	r9, r0
 8003c3a:	d1d6      	bne.n	8003bea <_svfiprintf_r+0x166>
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	065b      	lsls	r3, r3, #25
 8003c40:	f53f af35 	bmi.w	8003aae <_svfiprintf_r+0x2a>
 8003c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c46:	b01d      	add	sp, #116	; 0x74
 8003c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c4c:	ab03      	add	r3, sp, #12
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4622      	mov	r2, r4
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <_svfiprintf_r+0x1ec>)
 8003c54:	a904      	add	r1, sp, #16
 8003c56:	4640      	mov	r0, r8
 8003c58:	f000 f882 	bl	8003d60 <_printf_i>
 8003c5c:	e7ea      	b.n	8003c34 <_svfiprintf_r+0x1b0>
 8003c5e:	bf00      	nop
 8003c60:	08005324 	.word	0x08005324
 8003c64:	0800532a 	.word	0x0800532a
 8003c68:	0800532e 	.word	0x0800532e
 8003c6c:	00000000 	.word	0x00000000
 8003c70:	080039d1 	.word	0x080039d1

08003c74 <_printf_common>:
 8003c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c78:	4691      	mov	r9, r2
 8003c7a:	461f      	mov	r7, r3
 8003c7c:	688a      	ldr	r2, [r1, #8]
 8003c7e:	690b      	ldr	r3, [r1, #16]
 8003c80:	4606      	mov	r6, r0
 8003c82:	4293      	cmp	r3, r2
 8003c84:	bfb8      	it	lt
 8003c86:	4613      	movlt	r3, r2
 8003c88:	f8c9 3000 	str.w	r3, [r9]
 8003c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c90:	460c      	mov	r4, r1
 8003c92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c96:	b112      	cbz	r2, 8003c9e <_printf_common+0x2a>
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f8c9 3000 	str.w	r3, [r9]
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	0699      	lsls	r1, r3, #26
 8003ca2:	bf42      	ittt	mi
 8003ca4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ca8:	3302      	addmi	r3, #2
 8003caa:	f8c9 3000 	strmi.w	r3, [r9]
 8003cae:	6825      	ldr	r5, [r4, #0]
 8003cb0:	f015 0506 	ands.w	r5, r5, #6
 8003cb4:	d107      	bne.n	8003cc6 <_printf_common+0x52>
 8003cb6:	f104 0a19 	add.w	sl, r4, #25
 8003cba:	68e3      	ldr	r3, [r4, #12]
 8003cbc:	f8d9 2000 	ldr.w	r2, [r9]
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	42ab      	cmp	r3, r5
 8003cc4:	dc29      	bgt.n	8003d1a <_printf_common+0xa6>
 8003cc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003cca:	6822      	ldr	r2, [r4, #0]
 8003ccc:	3300      	adds	r3, #0
 8003cce:	bf18      	it	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	0692      	lsls	r2, r2, #26
 8003cd4:	d42e      	bmi.n	8003d34 <_printf_common+0xc0>
 8003cd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cda:	4639      	mov	r1, r7
 8003cdc:	4630      	mov	r0, r6
 8003cde:	47c0      	blx	r8
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d021      	beq.n	8003d28 <_printf_common+0xb4>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	68e5      	ldr	r5, [r4, #12]
 8003ce8:	f003 0306 	and.w	r3, r3, #6
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	bf18      	it	ne
 8003cf0:	2500      	movne	r5, #0
 8003cf2:	f8d9 2000 	ldr.w	r2, [r9]
 8003cf6:	f04f 0900 	mov.w	r9, #0
 8003cfa:	bf08      	it	eq
 8003cfc:	1aad      	subeq	r5, r5, r2
 8003cfe:	68a3      	ldr	r3, [r4, #8]
 8003d00:	6922      	ldr	r2, [r4, #16]
 8003d02:	bf08      	it	eq
 8003d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	bfc4      	itt	gt
 8003d0c:	1a9b      	subgt	r3, r3, r2
 8003d0e:	18ed      	addgt	r5, r5, r3
 8003d10:	341a      	adds	r4, #26
 8003d12:	454d      	cmp	r5, r9
 8003d14:	d11a      	bne.n	8003d4c <_printf_common+0xd8>
 8003d16:	2000      	movs	r0, #0
 8003d18:	e008      	b.n	8003d2c <_printf_common+0xb8>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	4652      	mov	r2, sl
 8003d1e:	4639      	mov	r1, r7
 8003d20:	4630      	mov	r0, r6
 8003d22:	47c0      	blx	r8
 8003d24:	3001      	adds	r0, #1
 8003d26:	d103      	bne.n	8003d30 <_printf_common+0xbc>
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d30:	3501      	adds	r5, #1
 8003d32:	e7c2      	b.n	8003cba <_printf_common+0x46>
 8003d34:	2030      	movs	r0, #48	; 0x30
 8003d36:	18e1      	adds	r1, r4, r3
 8003d38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d42:	4422      	add	r2, r4
 8003d44:	3302      	adds	r3, #2
 8003d46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d4a:	e7c4      	b.n	8003cd6 <_printf_common+0x62>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4622      	mov	r2, r4
 8003d50:	4639      	mov	r1, r7
 8003d52:	4630      	mov	r0, r6
 8003d54:	47c0      	blx	r8
 8003d56:	3001      	adds	r0, #1
 8003d58:	d0e6      	beq.n	8003d28 <_printf_common+0xb4>
 8003d5a:	f109 0901 	add.w	r9, r9, #1
 8003d5e:	e7d8      	b.n	8003d12 <_printf_common+0x9e>

08003d60 <_printf_i>:
 8003d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d68:	460c      	mov	r4, r1
 8003d6a:	7e09      	ldrb	r1, [r1, #24]
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	296e      	cmp	r1, #110	; 0x6e
 8003d70:	4617      	mov	r7, r2
 8003d72:	4606      	mov	r6, r0
 8003d74:	4698      	mov	r8, r3
 8003d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d78:	f000 80b3 	beq.w	8003ee2 <_printf_i+0x182>
 8003d7c:	d822      	bhi.n	8003dc4 <_printf_i+0x64>
 8003d7e:	2963      	cmp	r1, #99	; 0x63
 8003d80:	d036      	beq.n	8003df0 <_printf_i+0x90>
 8003d82:	d80a      	bhi.n	8003d9a <_printf_i+0x3a>
 8003d84:	2900      	cmp	r1, #0
 8003d86:	f000 80b9 	beq.w	8003efc <_printf_i+0x19c>
 8003d8a:	2958      	cmp	r1, #88	; 0x58
 8003d8c:	f000 8083 	beq.w	8003e96 <_printf_i+0x136>
 8003d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d98:	e032      	b.n	8003e00 <_printf_i+0xa0>
 8003d9a:	2964      	cmp	r1, #100	; 0x64
 8003d9c:	d001      	beq.n	8003da2 <_printf_i+0x42>
 8003d9e:	2969      	cmp	r1, #105	; 0x69
 8003da0:	d1f6      	bne.n	8003d90 <_printf_i+0x30>
 8003da2:	6820      	ldr	r0, [r4, #0]
 8003da4:	6813      	ldr	r3, [r2, #0]
 8003da6:	0605      	lsls	r5, r0, #24
 8003da8:	f103 0104 	add.w	r1, r3, #4
 8003dac:	d52a      	bpl.n	8003e04 <_printf_i+0xa4>
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6011      	str	r1, [r2, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	da03      	bge.n	8003dbe <_printf_i+0x5e>
 8003db6:	222d      	movs	r2, #45	; 0x2d
 8003db8:	425b      	negs	r3, r3
 8003dba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003dbe:	486f      	ldr	r0, [pc, #444]	; (8003f7c <_printf_i+0x21c>)
 8003dc0:	220a      	movs	r2, #10
 8003dc2:	e039      	b.n	8003e38 <_printf_i+0xd8>
 8003dc4:	2973      	cmp	r1, #115	; 0x73
 8003dc6:	f000 809d 	beq.w	8003f04 <_printf_i+0x1a4>
 8003dca:	d808      	bhi.n	8003dde <_printf_i+0x7e>
 8003dcc:	296f      	cmp	r1, #111	; 0x6f
 8003dce:	d020      	beq.n	8003e12 <_printf_i+0xb2>
 8003dd0:	2970      	cmp	r1, #112	; 0x70
 8003dd2:	d1dd      	bne.n	8003d90 <_printf_i+0x30>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	f043 0320 	orr.w	r3, r3, #32
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	e003      	b.n	8003de6 <_printf_i+0x86>
 8003dde:	2975      	cmp	r1, #117	; 0x75
 8003de0:	d017      	beq.n	8003e12 <_printf_i+0xb2>
 8003de2:	2978      	cmp	r1, #120	; 0x78
 8003de4:	d1d4      	bne.n	8003d90 <_printf_i+0x30>
 8003de6:	2378      	movs	r3, #120	; 0x78
 8003de8:	4865      	ldr	r0, [pc, #404]	; (8003f80 <_printf_i+0x220>)
 8003dea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dee:	e055      	b.n	8003e9c <_printf_i+0x13c>
 8003df0:	6813      	ldr	r3, [r2, #0]
 8003df2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003df6:	1d19      	adds	r1, r3, #4
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6011      	str	r1, [r2, #0]
 8003dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e00:	2301      	movs	r3, #1
 8003e02:	e08c      	b.n	8003f1e <_printf_i+0x1be>
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e0a:	6011      	str	r1, [r2, #0]
 8003e0c:	bf18      	it	ne
 8003e0e:	b21b      	sxthne	r3, r3
 8003e10:	e7cf      	b.n	8003db2 <_printf_i+0x52>
 8003e12:	6813      	ldr	r3, [r2, #0]
 8003e14:	6825      	ldr	r5, [r4, #0]
 8003e16:	1d18      	adds	r0, r3, #4
 8003e18:	6010      	str	r0, [r2, #0]
 8003e1a:	0628      	lsls	r0, r5, #24
 8003e1c:	d501      	bpl.n	8003e22 <_printf_i+0xc2>
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	e002      	b.n	8003e28 <_printf_i+0xc8>
 8003e22:	0668      	lsls	r0, r5, #25
 8003e24:	d5fb      	bpl.n	8003e1e <_printf_i+0xbe>
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	296f      	cmp	r1, #111	; 0x6f
 8003e2a:	bf14      	ite	ne
 8003e2c:	220a      	movne	r2, #10
 8003e2e:	2208      	moveq	r2, #8
 8003e30:	4852      	ldr	r0, [pc, #328]	; (8003f7c <_printf_i+0x21c>)
 8003e32:	2100      	movs	r1, #0
 8003e34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e38:	6865      	ldr	r5, [r4, #4]
 8003e3a:	2d00      	cmp	r5, #0
 8003e3c:	60a5      	str	r5, [r4, #8]
 8003e3e:	f2c0 8095 	blt.w	8003f6c <_printf_i+0x20c>
 8003e42:	6821      	ldr	r1, [r4, #0]
 8003e44:	f021 0104 	bic.w	r1, r1, #4
 8003e48:	6021      	str	r1, [r4, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d13d      	bne.n	8003eca <_printf_i+0x16a>
 8003e4e:	2d00      	cmp	r5, #0
 8003e50:	f040 808e 	bne.w	8003f70 <_printf_i+0x210>
 8003e54:	4665      	mov	r5, ip
 8003e56:	2a08      	cmp	r2, #8
 8003e58:	d10b      	bne.n	8003e72 <_printf_i+0x112>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	07db      	lsls	r3, r3, #31
 8003e5e:	d508      	bpl.n	8003e72 <_printf_i+0x112>
 8003e60:	6923      	ldr	r3, [r4, #16]
 8003e62:	6862      	ldr	r2, [r4, #4]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	bfde      	ittt	le
 8003e68:	2330      	movle	r3, #48	; 0x30
 8003e6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e72:	ebac 0305 	sub.w	r3, ip, r5
 8003e76:	6123      	str	r3, [r4, #16]
 8003e78:	f8cd 8000 	str.w	r8, [sp]
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	aa03      	add	r2, sp, #12
 8003e80:	4621      	mov	r1, r4
 8003e82:	4630      	mov	r0, r6
 8003e84:	f7ff fef6 	bl	8003c74 <_printf_common>
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d14d      	bne.n	8003f28 <_printf_i+0x1c8>
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e90:	b005      	add	sp, #20
 8003e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e96:	4839      	ldr	r0, [pc, #228]	; (8003f7c <_printf_i+0x21c>)
 8003e98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e9c:	6813      	ldr	r3, [r2, #0]
 8003e9e:	6821      	ldr	r1, [r4, #0]
 8003ea0:	1d1d      	adds	r5, r3, #4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6015      	str	r5, [r2, #0]
 8003ea6:	060a      	lsls	r2, r1, #24
 8003ea8:	d50b      	bpl.n	8003ec2 <_printf_i+0x162>
 8003eaa:	07ca      	lsls	r2, r1, #31
 8003eac:	bf44      	itt	mi
 8003eae:	f041 0120 	orrmi.w	r1, r1, #32
 8003eb2:	6021      	strmi	r1, [r4, #0]
 8003eb4:	b91b      	cbnz	r3, 8003ebe <_printf_i+0x15e>
 8003eb6:	6822      	ldr	r2, [r4, #0]
 8003eb8:	f022 0220 	bic.w	r2, r2, #32
 8003ebc:	6022      	str	r2, [r4, #0]
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	e7b7      	b.n	8003e32 <_printf_i+0xd2>
 8003ec2:	064d      	lsls	r5, r1, #25
 8003ec4:	bf48      	it	mi
 8003ec6:	b29b      	uxthmi	r3, r3
 8003ec8:	e7ef      	b.n	8003eaa <_printf_i+0x14a>
 8003eca:	4665      	mov	r5, ip
 8003ecc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ed0:	fb02 3311 	mls	r3, r2, r1, r3
 8003ed4:	5cc3      	ldrb	r3, [r0, r3]
 8003ed6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003eda:	460b      	mov	r3, r1
 8003edc:	2900      	cmp	r1, #0
 8003ede:	d1f5      	bne.n	8003ecc <_printf_i+0x16c>
 8003ee0:	e7b9      	b.n	8003e56 <_printf_i+0xf6>
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	6825      	ldr	r5, [r4, #0]
 8003ee6:	1d18      	adds	r0, r3, #4
 8003ee8:	6961      	ldr	r1, [r4, #20]
 8003eea:	6010      	str	r0, [r2, #0]
 8003eec:	0628      	lsls	r0, r5, #24
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	d501      	bpl.n	8003ef6 <_printf_i+0x196>
 8003ef2:	6019      	str	r1, [r3, #0]
 8003ef4:	e002      	b.n	8003efc <_printf_i+0x19c>
 8003ef6:	066a      	lsls	r2, r5, #25
 8003ef8:	d5fb      	bpl.n	8003ef2 <_printf_i+0x192>
 8003efa:	8019      	strh	r1, [r3, #0]
 8003efc:	2300      	movs	r3, #0
 8003efe:	4665      	mov	r5, ip
 8003f00:	6123      	str	r3, [r4, #16]
 8003f02:	e7b9      	b.n	8003e78 <_printf_i+0x118>
 8003f04:	6813      	ldr	r3, [r2, #0]
 8003f06:	1d19      	adds	r1, r3, #4
 8003f08:	6011      	str	r1, [r2, #0]
 8003f0a:	681d      	ldr	r5, [r3, #0]
 8003f0c:	6862      	ldr	r2, [r4, #4]
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4628      	mov	r0, r5
 8003f12:	f000 fe99 	bl	8004c48 <memchr>
 8003f16:	b108      	cbz	r0, 8003f1c <_printf_i+0x1bc>
 8003f18:	1b40      	subs	r0, r0, r5
 8003f1a:	6060      	str	r0, [r4, #4]
 8003f1c:	6863      	ldr	r3, [r4, #4]
 8003f1e:	6123      	str	r3, [r4, #16]
 8003f20:	2300      	movs	r3, #0
 8003f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f26:	e7a7      	b.n	8003e78 <_printf_i+0x118>
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	462a      	mov	r2, r5
 8003f2c:	4639      	mov	r1, r7
 8003f2e:	4630      	mov	r0, r6
 8003f30:	47c0      	blx	r8
 8003f32:	3001      	adds	r0, #1
 8003f34:	d0aa      	beq.n	8003e8c <_printf_i+0x12c>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	079b      	lsls	r3, r3, #30
 8003f3a:	d413      	bmi.n	8003f64 <_printf_i+0x204>
 8003f3c:	68e0      	ldr	r0, [r4, #12]
 8003f3e:	9b03      	ldr	r3, [sp, #12]
 8003f40:	4298      	cmp	r0, r3
 8003f42:	bfb8      	it	lt
 8003f44:	4618      	movlt	r0, r3
 8003f46:	e7a3      	b.n	8003e90 <_printf_i+0x130>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	464a      	mov	r2, r9
 8003f4c:	4639      	mov	r1, r7
 8003f4e:	4630      	mov	r0, r6
 8003f50:	47c0      	blx	r8
 8003f52:	3001      	adds	r0, #1
 8003f54:	d09a      	beq.n	8003e8c <_printf_i+0x12c>
 8003f56:	3501      	adds	r5, #1
 8003f58:	68e3      	ldr	r3, [r4, #12]
 8003f5a:	9a03      	ldr	r2, [sp, #12]
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	42ab      	cmp	r3, r5
 8003f60:	dcf2      	bgt.n	8003f48 <_printf_i+0x1e8>
 8003f62:	e7eb      	b.n	8003f3c <_printf_i+0x1dc>
 8003f64:	2500      	movs	r5, #0
 8003f66:	f104 0919 	add.w	r9, r4, #25
 8003f6a:	e7f5      	b.n	8003f58 <_printf_i+0x1f8>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ac      	bne.n	8003eca <_printf_i+0x16a>
 8003f70:	7803      	ldrb	r3, [r0, #0]
 8003f72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f7a:	e76c      	b.n	8003e56 <_printf_i+0xf6>
 8003f7c:	08005335 	.word	0x08005335
 8003f80:	08005346 	.word	0x08005346

08003f84 <_sbrk_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	2300      	movs	r3, #0
 8003f88:	4c05      	ldr	r4, [pc, #20]	; (8003fa0 <_sbrk_r+0x1c>)
 8003f8a:	4605      	mov	r5, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	f7fe ff7e 	bl	8002e90 <_sbrk>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_sbrk_r+0x1a>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_sbrk_r+0x1a>
 8003f9c:	602b      	str	r3, [r5, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	200005f0 	.word	0x200005f0

08003fa4 <strcpy>:
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003faa:	f803 2b01 	strb.w	r2, [r3], #1
 8003fae:	2a00      	cmp	r2, #0
 8003fb0:	d1f9      	bne.n	8003fa6 <strcpy+0x2>
 8003fb2:	4770      	bx	lr

08003fb4 <quorem>:
 8003fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb8:	6903      	ldr	r3, [r0, #16]
 8003fba:	690c      	ldr	r4, [r1, #16]
 8003fbc:	4680      	mov	r8, r0
 8003fbe:	42a3      	cmp	r3, r4
 8003fc0:	f2c0 8084 	blt.w	80040cc <quorem+0x118>
 8003fc4:	3c01      	subs	r4, #1
 8003fc6:	f101 0714 	add.w	r7, r1, #20
 8003fca:	f100 0614 	add.w	r6, r0, #20
 8003fce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003fd2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003fd6:	3501      	adds	r5, #1
 8003fd8:	fbb0 f5f5 	udiv	r5, r0, r5
 8003fdc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003fe0:	eb06 030c 	add.w	r3, r6, ip
 8003fe4:	eb07 090c 	add.w	r9, r7, ip
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	b39d      	cbz	r5, 8004054 <quorem+0xa0>
 8003fec:	f04f 0a00 	mov.w	sl, #0
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	46b6      	mov	lr, r6
 8003ff4:	46d3      	mov	fp, sl
 8003ff6:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ffa:	b293      	uxth	r3, r2
 8003ffc:	fb05 a303 	mla	r3, r5, r3, sl
 8004000:	0c12      	lsrs	r2, r2, #16
 8004002:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004006:	fb05 a202 	mla	r2, r5, r2, sl
 800400a:	b29b      	uxth	r3, r3
 800400c:	ebab 0303 	sub.w	r3, fp, r3
 8004010:	f8de b000 	ldr.w	fp, [lr]
 8004014:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004018:	fa1f fb8b 	uxth.w	fp, fp
 800401c:	445b      	add	r3, fp
 800401e:	fa1f fb82 	uxth.w	fp, r2
 8004022:	f8de 2000 	ldr.w	r2, [lr]
 8004026:	4581      	cmp	r9, r0
 8004028:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800402c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004030:	b29b      	uxth	r3, r3
 8004032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004036:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800403a:	f84e 3b04 	str.w	r3, [lr], #4
 800403e:	d2da      	bcs.n	8003ff6 <quorem+0x42>
 8004040:	f856 300c 	ldr.w	r3, [r6, ip]
 8004044:	b933      	cbnz	r3, 8004054 <quorem+0xa0>
 8004046:	9b01      	ldr	r3, [sp, #4]
 8004048:	3b04      	subs	r3, #4
 800404a:	429e      	cmp	r6, r3
 800404c:	461a      	mov	r2, r3
 800404e:	d331      	bcc.n	80040b4 <quorem+0x100>
 8004050:	f8c8 4010 	str.w	r4, [r8, #16]
 8004054:	4640      	mov	r0, r8
 8004056:	f7ff fb49 	bl	80036ec <__mcmp>
 800405a:	2800      	cmp	r0, #0
 800405c:	db26      	blt.n	80040ac <quorem+0xf8>
 800405e:	4630      	mov	r0, r6
 8004060:	f04f 0c00 	mov.w	ip, #0
 8004064:	3501      	adds	r5, #1
 8004066:	f857 1b04 	ldr.w	r1, [r7], #4
 800406a:	f8d0 e000 	ldr.w	lr, [r0]
 800406e:	b28b      	uxth	r3, r1
 8004070:	ebac 0303 	sub.w	r3, ip, r3
 8004074:	fa1f f28e 	uxth.w	r2, lr
 8004078:	4413      	add	r3, r2
 800407a:	0c0a      	lsrs	r2, r1, #16
 800407c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004080:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004084:	b29b      	uxth	r3, r3
 8004086:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800408a:	45b9      	cmp	r9, r7
 800408c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004090:	f840 3b04 	str.w	r3, [r0], #4
 8004094:	d2e7      	bcs.n	8004066 <quorem+0xb2>
 8004096:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800409a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800409e:	b92a      	cbnz	r2, 80040ac <quorem+0xf8>
 80040a0:	3b04      	subs	r3, #4
 80040a2:	429e      	cmp	r6, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	d30b      	bcc.n	80040c0 <quorem+0x10c>
 80040a8:	f8c8 4010 	str.w	r4, [r8, #16]
 80040ac:	4628      	mov	r0, r5
 80040ae:	b003      	add	sp, #12
 80040b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	3b04      	subs	r3, #4
 80040b8:	2a00      	cmp	r2, #0
 80040ba:	d1c9      	bne.n	8004050 <quorem+0x9c>
 80040bc:	3c01      	subs	r4, #1
 80040be:	e7c4      	b.n	800404a <quorem+0x96>
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	3b04      	subs	r3, #4
 80040c4:	2a00      	cmp	r2, #0
 80040c6:	d1ef      	bne.n	80040a8 <quorem+0xf4>
 80040c8:	3c01      	subs	r4, #1
 80040ca:	e7ea      	b.n	80040a2 <quorem+0xee>
 80040cc:	2000      	movs	r0, #0
 80040ce:	e7ee      	b.n	80040ae <quorem+0xfa>

080040d0 <_dtoa_r>:
 80040d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d4:	4616      	mov	r6, r2
 80040d6:	461f      	mov	r7, r3
 80040d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80040da:	b095      	sub	sp, #84	; 0x54
 80040dc:	4604      	mov	r4, r0
 80040de:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80040e2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80040e6:	b93d      	cbnz	r5, 80040f8 <_dtoa_r+0x28>
 80040e8:	2010      	movs	r0, #16
 80040ea:	f000 fda5 	bl	8004c38 <malloc>
 80040ee:	6260      	str	r0, [r4, #36]	; 0x24
 80040f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80040f4:	6005      	str	r5, [r0, #0]
 80040f6:	60c5      	str	r5, [r0, #12]
 80040f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040fa:	6819      	ldr	r1, [r3, #0]
 80040fc:	b151      	cbz	r1, 8004114 <_dtoa_r+0x44>
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	2301      	movs	r3, #1
 8004102:	4093      	lsls	r3, r2
 8004104:	604a      	str	r2, [r1, #4]
 8004106:	608b      	str	r3, [r1, #8]
 8004108:	4620      	mov	r0, r4
 800410a:	f7ff f90f 	bl	800332c <_Bfree>
 800410e:	2200      	movs	r2, #0
 8004110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	1e3b      	subs	r3, r7, #0
 8004116:	bfaf      	iteee	ge
 8004118:	2300      	movge	r3, #0
 800411a:	2201      	movlt	r2, #1
 800411c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004120:	9303      	strlt	r3, [sp, #12]
 8004122:	bfac      	ite	ge
 8004124:	f8c8 3000 	strge.w	r3, [r8]
 8004128:	f8c8 2000 	strlt.w	r2, [r8]
 800412c:	4bae      	ldr	r3, [pc, #696]	; (80043e8 <_dtoa_r+0x318>)
 800412e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004132:	ea33 0308 	bics.w	r3, r3, r8
 8004136:	d11b      	bne.n	8004170 <_dtoa_r+0xa0>
 8004138:	f242 730f 	movw	r3, #9999	; 0x270f
 800413c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	9b02      	ldr	r3, [sp, #8]
 8004142:	b923      	cbnz	r3, 800414e <_dtoa_r+0x7e>
 8004144:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004148:	2800      	cmp	r0, #0
 800414a:	f000 8545 	beq.w	8004bd8 <_dtoa_r+0xb08>
 800414e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004150:	b953      	cbnz	r3, 8004168 <_dtoa_r+0x98>
 8004152:	4ba6      	ldr	r3, [pc, #664]	; (80043ec <_dtoa_r+0x31c>)
 8004154:	e021      	b.n	800419a <_dtoa_r+0xca>
 8004156:	4ba6      	ldr	r3, [pc, #664]	; (80043f0 <_dtoa_r+0x320>)
 8004158:	9306      	str	r3, [sp, #24]
 800415a:	3308      	adds	r3, #8
 800415c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	9806      	ldr	r0, [sp, #24]
 8004162:	b015      	add	sp, #84	; 0x54
 8004164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004168:	4ba0      	ldr	r3, [pc, #640]	; (80043ec <_dtoa_r+0x31c>)
 800416a:	9306      	str	r3, [sp, #24]
 800416c:	3303      	adds	r3, #3
 800416e:	e7f5      	b.n	800415c <_dtoa_r+0x8c>
 8004170:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004174:	2200      	movs	r2, #0
 8004176:	2300      	movs	r3, #0
 8004178:	4630      	mov	r0, r6
 800417a:	4639      	mov	r1, r7
 800417c:	f7fc fc26 	bl	80009cc <__aeabi_dcmpeq>
 8004180:	4682      	mov	sl, r0
 8004182:	b160      	cbz	r0, 800419e <_dtoa_r+0xce>
 8004184:	2301      	movs	r3, #1
 8004186:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8520 	beq.w	8004bd2 <_dtoa_r+0xb02>
 8004192:	4b98      	ldr	r3, [pc, #608]	; (80043f4 <_dtoa_r+0x324>)
 8004194:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	3b01      	subs	r3, #1
 800419a:	9306      	str	r3, [sp, #24]
 800419c:	e7e0      	b.n	8004160 <_dtoa_r+0x90>
 800419e:	ab12      	add	r3, sp, #72	; 0x48
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	ab13      	add	r3, sp, #76	; 0x4c
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	4632      	mov	r2, r6
 80041a8:	463b      	mov	r3, r7
 80041aa:	4620      	mov	r0, r4
 80041ac:	f7ff fb16 	bl	80037dc <__d2b>
 80041b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80041b4:	4683      	mov	fp, r0
 80041b6:	2d00      	cmp	r5, #0
 80041b8:	d07d      	beq.n	80042b6 <_dtoa_r+0x1e6>
 80041ba:	46b0      	mov	r8, r6
 80041bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80041c0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80041c4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80041c8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80041cc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80041d0:	2200      	movs	r2, #0
 80041d2:	4b89      	ldr	r3, [pc, #548]	; (80043f8 <_dtoa_r+0x328>)
 80041d4:	4640      	mov	r0, r8
 80041d6:	4649      	mov	r1, r9
 80041d8:	f7fb ffd8 	bl	800018c <__aeabi_dsub>
 80041dc:	a37c      	add	r3, pc, #496	; (adr r3, 80043d0 <_dtoa_r+0x300>)
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f7fc f98b 	bl	80004fc <__aeabi_dmul>
 80041e6:	a37c      	add	r3, pc, #496	; (adr r3, 80043d8 <_dtoa_r+0x308>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f7fb ffd0 	bl	8000190 <__adddf3>
 80041f0:	4606      	mov	r6, r0
 80041f2:	4628      	mov	r0, r5
 80041f4:	460f      	mov	r7, r1
 80041f6:	f7fc f917 	bl	8000428 <__aeabi_i2d>
 80041fa:	a379      	add	r3, pc, #484	; (adr r3, 80043e0 <_dtoa_r+0x310>)
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f7fc f97c 	bl	80004fc <__aeabi_dmul>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4630      	mov	r0, r6
 800420a:	4639      	mov	r1, r7
 800420c:	f7fb ffc0 	bl	8000190 <__adddf3>
 8004210:	4606      	mov	r6, r0
 8004212:	460f      	mov	r7, r1
 8004214:	f7fc fc22 	bl	8000a5c <__aeabi_d2iz>
 8004218:	2200      	movs	r2, #0
 800421a:	4682      	mov	sl, r0
 800421c:	2300      	movs	r3, #0
 800421e:	4630      	mov	r0, r6
 8004220:	4639      	mov	r1, r7
 8004222:	f7fc fbdd 	bl	80009e0 <__aeabi_dcmplt>
 8004226:	b148      	cbz	r0, 800423c <_dtoa_r+0x16c>
 8004228:	4650      	mov	r0, sl
 800422a:	f7fc f8fd 	bl	8000428 <__aeabi_i2d>
 800422e:	4632      	mov	r2, r6
 8004230:	463b      	mov	r3, r7
 8004232:	f7fc fbcb 	bl	80009cc <__aeabi_dcmpeq>
 8004236:	b908      	cbnz	r0, 800423c <_dtoa_r+0x16c>
 8004238:	f10a 3aff 	add.w	sl, sl, #4294967295
 800423c:	f1ba 0f16 	cmp.w	sl, #22
 8004240:	d85a      	bhi.n	80042f8 <_dtoa_r+0x228>
 8004242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004246:	496d      	ldr	r1, [pc, #436]	; (80043fc <_dtoa_r+0x32c>)
 8004248:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800424c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004250:	f7fc fbe4 	bl	8000a1c <__aeabi_dcmpgt>
 8004254:	2800      	cmp	r0, #0
 8004256:	d051      	beq.n	80042fc <_dtoa_r+0x22c>
 8004258:	2300      	movs	r3, #0
 800425a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800425e:	930d      	str	r3, [sp, #52]	; 0x34
 8004260:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004262:	1b5d      	subs	r5, r3, r5
 8004264:	1e6b      	subs	r3, r5, #1
 8004266:	9307      	str	r3, [sp, #28]
 8004268:	bf43      	ittte	mi
 800426a:	2300      	movmi	r3, #0
 800426c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004270:	9307      	strmi	r3, [sp, #28]
 8004272:	f04f 0900 	movpl.w	r9, #0
 8004276:	f1ba 0f00 	cmp.w	sl, #0
 800427a:	db41      	blt.n	8004300 <_dtoa_r+0x230>
 800427c:	9b07      	ldr	r3, [sp, #28]
 800427e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004282:	4453      	add	r3, sl
 8004284:	9307      	str	r3, [sp, #28]
 8004286:	2300      	movs	r3, #0
 8004288:	9308      	str	r3, [sp, #32]
 800428a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800428c:	2b09      	cmp	r3, #9
 800428e:	f200 808f 	bhi.w	80043b0 <_dtoa_r+0x2e0>
 8004292:	2b05      	cmp	r3, #5
 8004294:	bfc4      	itt	gt
 8004296:	3b04      	subgt	r3, #4
 8004298:	931e      	strgt	r3, [sp, #120]	; 0x78
 800429a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800429c:	bfc8      	it	gt
 800429e:	2500      	movgt	r5, #0
 80042a0:	f1a3 0302 	sub.w	r3, r3, #2
 80042a4:	bfd8      	it	le
 80042a6:	2501      	movle	r5, #1
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	f200 808d 	bhi.w	80043c8 <_dtoa_r+0x2f8>
 80042ae:	e8df f003 	tbb	[pc, r3]
 80042b2:	7d7b      	.short	0x7d7b
 80042b4:	6f2f      	.short	0x6f2f
 80042b6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80042ba:	441d      	add	r5, r3
 80042bc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80042c0:	2820      	cmp	r0, #32
 80042c2:	dd13      	ble.n	80042ec <_dtoa_r+0x21c>
 80042c4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80042c8:	9b02      	ldr	r3, [sp, #8]
 80042ca:	fa08 f800 	lsl.w	r8, r8, r0
 80042ce:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80042d2:	fa23 f000 	lsr.w	r0, r3, r0
 80042d6:	ea48 0000 	orr.w	r0, r8, r0
 80042da:	f7fc f895 	bl	8000408 <__aeabi_ui2d>
 80042de:	2301      	movs	r3, #1
 80042e0:	4680      	mov	r8, r0
 80042e2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80042e6:	3d01      	subs	r5, #1
 80042e8:	9310      	str	r3, [sp, #64]	; 0x40
 80042ea:	e771      	b.n	80041d0 <_dtoa_r+0x100>
 80042ec:	9b02      	ldr	r3, [sp, #8]
 80042ee:	f1c0 0020 	rsb	r0, r0, #32
 80042f2:	fa03 f000 	lsl.w	r0, r3, r0
 80042f6:	e7f0      	b.n	80042da <_dtoa_r+0x20a>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e7b0      	b.n	800425e <_dtoa_r+0x18e>
 80042fc:	900d      	str	r0, [sp, #52]	; 0x34
 80042fe:	e7af      	b.n	8004260 <_dtoa_r+0x190>
 8004300:	f1ca 0300 	rsb	r3, sl, #0
 8004304:	9308      	str	r3, [sp, #32]
 8004306:	2300      	movs	r3, #0
 8004308:	eba9 090a 	sub.w	r9, r9, sl
 800430c:	930c      	str	r3, [sp, #48]	; 0x30
 800430e:	e7bc      	b.n	800428a <_dtoa_r+0x1ba>
 8004310:	2301      	movs	r3, #1
 8004312:	9309      	str	r3, [sp, #36]	; 0x24
 8004314:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004316:	2b00      	cmp	r3, #0
 8004318:	dd74      	ble.n	8004404 <_dtoa_r+0x334>
 800431a:	4698      	mov	r8, r3
 800431c:	9304      	str	r3, [sp, #16]
 800431e:	2200      	movs	r2, #0
 8004320:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004322:	6072      	str	r2, [r6, #4]
 8004324:	2204      	movs	r2, #4
 8004326:	f102 0014 	add.w	r0, r2, #20
 800432a:	4298      	cmp	r0, r3
 800432c:	6871      	ldr	r1, [r6, #4]
 800432e:	d96e      	bls.n	800440e <_dtoa_r+0x33e>
 8004330:	4620      	mov	r0, r4
 8004332:	f7fe ffc7 	bl	80032c4 <_Balloc>
 8004336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004338:	6030      	str	r0, [r6, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f1b8 0f0e 	cmp.w	r8, #14
 8004340:	9306      	str	r3, [sp, #24]
 8004342:	f200 80ed 	bhi.w	8004520 <_dtoa_r+0x450>
 8004346:	2d00      	cmp	r5, #0
 8004348:	f000 80ea 	beq.w	8004520 <_dtoa_r+0x450>
 800434c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004350:	f1ba 0f00 	cmp.w	sl, #0
 8004354:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004358:	dd77      	ble.n	800444a <_dtoa_r+0x37a>
 800435a:	4a28      	ldr	r2, [pc, #160]	; (80043fc <_dtoa_r+0x32c>)
 800435c:	f00a 030f 	and.w	r3, sl, #15
 8004360:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004364:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004368:	06f0      	lsls	r0, r6, #27
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004372:	d568      	bpl.n	8004446 <_dtoa_r+0x376>
 8004374:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004378:	4b21      	ldr	r3, [pc, #132]	; (8004400 <_dtoa_r+0x330>)
 800437a:	2503      	movs	r5, #3
 800437c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004380:	f7fc f9e6 	bl	8000750 <__aeabi_ddiv>
 8004384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004388:	f006 060f 	and.w	r6, r6, #15
 800438c:	4f1c      	ldr	r7, [pc, #112]	; (8004400 <_dtoa_r+0x330>)
 800438e:	e04f      	b.n	8004430 <_dtoa_r+0x360>
 8004390:	2301      	movs	r3, #1
 8004392:	9309      	str	r3, [sp, #36]	; 0x24
 8004394:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004396:	4453      	add	r3, sl
 8004398:	f103 0801 	add.w	r8, r3, #1
 800439c:	9304      	str	r3, [sp, #16]
 800439e:	4643      	mov	r3, r8
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	bfb8      	it	lt
 80043a4:	2301      	movlt	r3, #1
 80043a6:	e7ba      	b.n	800431e <_dtoa_r+0x24e>
 80043a8:	2300      	movs	r3, #0
 80043aa:	e7b2      	b.n	8004312 <_dtoa_r+0x242>
 80043ac:	2300      	movs	r3, #0
 80043ae:	e7f0      	b.n	8004392 <_dtoa_r+0x2c2>
 80043b0:	2501      	movs	r5, #1
 80043b2:	2300      	movs	r3, #0
 80043b4:	9509      	str	r5, [sp, #36]	; 0x24
 80043b6:	931e      	str	r3, [sp, #120]	; 0x78
 80043b8:	f04f 33ff 	mov.w	r3, #4294967295
 80043bc:	2200      	movs	r2, #0
 80043be:	9304      	str	r3, [sp, #16]
 80043c0:	4698      	mov	r8, r3
 80043c2:	2312      	movs	r3, #18
 80043c4:	921f      	str	r2, [sp, #124]	; 0x7c
 80043c6:	e7aa      	b.n	800431e <_dtoa_r+0x24e>
 80043c8:	2301      	movs	r3, #1
 80043ca:	9309      	str	r3, [sp, #36]	; 0x24
 80043cc:	e7f4      	b.n	80043b8 <_dtoa_r+0x2e8>
 80043ce:	bf00      	nop
 80043d0:	636f4361 	.word	0x636f4361
 80043d4:	3fd287a7 	.word	0x3fd287a7
 80043d8:	8b60c8b3 	.word	0x8b60c8b3
 80043dc:	3fc68a28 	.word	0x3fc68a28
 80043e0:	509f79fb 	.word	0x509f79fb
 80043e4:	3fd34413 	.word	0x3fd34413
 80043e8:	7ff00000 	.word	0x7ff00000
 80043ec:	08005360 	.word	0x08005360
 80043f0:	08005357 	.word	0x08005357
 80043f4:	08005365 	.word	0x08005365
 80043f8:	3ff80000 	.word	0x3ff80000
 80043fc:	08005250 	.word	0x08005250
 8004400:	08005228 	.word	0x08005228
 8004404:	2301      	movs	r3, #1
 8004406:	9304      	str	r3, [sp, #16]
 8004408:	4698      	mov	r8, r3
 800440a:	461a      	mov	r2, r3
 800440c:	e7da      	b.n	80043c4 <_dtoa_r+0x2f4>
 800440e:	3101      	adds	r1, #1
 8004410:	6071      	str	r1, [r6, #4]
 8004412:	0052      	lsls	r2, r2, #1
 8004414:	e787      	b.n	8004326 <_dtoa_r+0x256>
 8004416:	07f1      	lsls	r1, r6, #31
 8004418:	d508      	bpl.n	800442c <_dtoa_r+0x35c>
 800441a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800441e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004422:	f7fc f86b 	bl	80004fc <__aeabi_dmul>
 8004426:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800442a:	3501      	adds	r5, #1
 800442c:	1076      	asrs	r6, r6, #1
 800442e:	3708      	adds	r7, #8
 8004430:	2e00      	cmp	r6, #0
 8004432:	d1f0      	bne.n	8004416 <_dtoa_r+0x346>
 8004434:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800443c:	f7fc f988 	bl	8000750 <__aeabi_ddiv>
 8004440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004444:	e01b      	b.n	800447e <_dtoa_r+0x3ae>
 8004446:	2502      	movs	r5, #2
 8004448:	e7a0      	b.n	800438c <_dtoa_r+0x2bc>
 800444a:	f000 80a4 	beq.w	8004596 <_dtoa_r+0x4c6>
 800444e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004452:	f1ca 0600 	rsb	r6, sl, #0
 8004456:	4ba0      	ldr	r3, [pc, #640]	; (80046d8 <_dtoa_r+0x608>)
 8004458:	f006 020f 	and.w	r2, r6, #15
 800445c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f7fc f84a 	bl	80004fc <__aeabi_dmul>
 8004468:	2502      	movs	r5, #2
 800446a:	2300      	movs	r3, #0
 800446c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004470:	4f9a      	ldr	r7, [pc, #616]	; (80046dc <_dtoa_r+0x60c>)
 8004472:	1136      	asrs	r6, r6, #4
 8004474:	2e00      	cmp	r6, #0
 8004476:	f040 8083 	bne.w	8004580 <_dtoa_r+0x4b0>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e0      	bne.n	8004440 <_dtoa_r+0x370>
 800447e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 808a 	beq.w	800459a <_dtoa_r+0x4ca>
 8004486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800448a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800448e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004492:	2200      	movs	r2, #0
 8004494:	4b92      	ldr	r3, [pc, #584]	; (80046e0 <_dtoa_r+0x610>)
 8004496:	f7fc faa3 	bl	80009e0 <__aeabi_dcmplt>
 800449a:	2800      	cmp	r0, #0
 800449c:	d07d      	beq.n	800459a <_dtoa_r+0x4ca>
 800449e:	f1b8 0f00 	cmp.w	r8, #0
 80044a2:	d07a      	beq.n	800459a <_dtoa_r+0x4ca>
 80044a4:	9b04      	ldr	r3, [sp, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	dd36      	ble.n	8004518 <_dtoa_r+0x448>
 80044aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044ae:	2200      	movs	r2, #0
 80044b0:	4b8c      	ldr	r3, [pc, #560]	; (80046e4 <_dtoa_r+0x614>)
 80044b2:	f7fc f823 	bl	80004fc <__aeabi_dmul>
 80044b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044ba:	9e04      	ldr	r6, [sp, #16]
 80044bc:	f10a 37ff 	add.w	r7, sl, #4294967295
 80044c0:	3501      	adds	r5, #1
 80044c2:	4628      	mov	r0, r5
 80044c4:	f7fb ffb0 	bl	8000428 <__aeabi_i2d>
 80044c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044cc:	f7fc f816 	bl	80004fc <__aeabi_dmul>
 80044d0:	2200      	movs	r2, #0
 80044d2:	4b85      	ldr	r3, [pc, #532]	; (80046e8 <_dtoa_r+0x618>)
 80044d4:	f7fb fe5c 	bl	8000190 <__adddf3>
 80044d8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80044dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80044e0:	950b      	str	r5, [sp, #44]	; 0x2c
 80044e2:	2e00      	cmp	r6, #0
 80044e4:	d15c      	bne.n	80045a0 <_dtoa_r+0x4d0>
 80044e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044ea:	2200      	movs	r2, #0
 80044ec:	4b7f      	ldr	r3, [pc, #508]	; (80046ec <_dtoa_r+0x61c>)
 80044ee:	f7fb fe4d 	bl	800018c <__aeabi_dsub>
 80044f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044f4:	462b      	mov	r3, r5
 80044f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044fa:	f7fc fa8f 	bl	8000a1c <__aeabi_dcmpgt>
 80044fe:	2800      	cmp	r0, #0
 8004500:	f040 8281 	bne.w	8004a06 <_dtoa_r+0x936>
 8004504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800450a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800450e:	f7fc fa67 	bl	80009e0 <__aeabi_dcmplt>
 8004512:	2800      	cmp	r0, #0
 8004514:	f040 8275 	bne.w	8004a02 <_dtoa_r+0x932>
 8004518:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800451c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004522:	2b00      	cmp	r3, #0
 8004524:	f2c0 814b 	blt.w	80047be <_dtoa_r+0x6ee>
 8004528:	f1ba 0f0e 	cmp.w	sl, #14
 800452c:	f300 8147 	bgt.w	80047be <_dtoa_r+0x6ee>
 8004530:	4b69      	ldr	r3, [pc, #420]	; (80046d8 <_dtoa_r+0x608>)
 8004532:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800453e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004540:	2b00      	cmp	r3, #0
 8004542:	f280 80d7 	bge.w	80046f4 <_dtoa_r+0x624>
 8004546:	f1b8 0f00 	cmp.w	r8, #0
 800454a:	f300 80d3 	bgt.w	80046f4 <_dtoa_r+0x624>
 800454e:	f040 8257 	bne.w	8004a00 <_dtoa_r+0x930>
 8004552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004556:	2200      	movs	r2, #0
 8004558:	4b64      	ldr	r3, [pc, #400]	; (80046ec <_dtoa_r+0x61c>)
 800455a:	f7fb ffcf 	bl	80004fc <__aeabi_dmul>
 800455e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004562:	f7fc fa51 	bl	8000a08 <__aeabi_dcmpge>
 8004566:	4646      	mov	r6, r8
 8004568:	4647      	mov	r7, r8
 800456a:	2800      	cmp	r0, #0
 800456c:	f040 822d 	bne.w	80049ca <_dtoa_r+0x8fa>
 8004570:	9b06      	ldr	r3, [sp, #24]
 8004572:	9a06      	ldr	r2, [sp, #24]
 8004574:	1c5d      	adds	r5, r3, #1
 8004576:	2331      	movs	r3, #49	; 0x31
 8004578:	f10a 0a01 	add.w	sl, sl, #1
 800457c:	7013      	strb	r3, [r2, #0]
 800457e:	e228      	b.n	80049d2 <_dtoa_r+0x902>
 8004580:	07f2      	lsls	r2, r6, #31
 8004582:	d505      	bpl.n	8004590 <_dtoa_r+0x4c0>
 8004584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004588:	f7fb ffb8 	bl	80004fc <__aeabi_dmul>
 800458c:	2301      	movs	r3, #1
 800458e:	3501      	adds	r5, #1
 8004590:	1076      	asrs	r6, r6, #1
 8004592:	3708      	adds	r7, #8
 8004594:	e76e      	b.n	8004474 <_dtoa_r+0x3a4>
 8004596:	2502      	movs	r5, #2
 8004598:	e771      	b.n	800447e <_dtoa_r+0x3ae>
 800459a:	4657      	mov	r7, sl
 800459c:	4646      	mov	r6, r8
 800459e:	e790      	b.n	80044c2 <_dtoa_r+0x3f2>
 80045a0:	4b4d      	ldr	r3, [pc, #308]	; (80046d8 <_dtoa_r+0x608>)
 80045a2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80045a6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80045aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d048      	beq.n	8004642 <_dtoa_r+0x572>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	2000      	movs	r0, #0
 80045b6:	494e      	ldr	r1, [pc, #312]	; (80046f0 <_dtoa_r+0x620>)
 80045b8:	f7fc f8ca 	bl	8000750 <__aeabi_ddiv>
 80045bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80045c0:	f7fb fde4 	bl	800018c <__aeabi_dsub>
 80045c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045c8:	9d06      	ldr	r5, [sp, #24]
 80045ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ce:	f7fc fa45 	bl	8000a5c <__aeabi_d2iz>
 80045d2:	9011      	str	r0, [sp, #68]	; 0x44
 80045d4:	f7fb ff28 	bl	8000428 <__aeabi_i2d>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045e0:	f7fb fdd4 	bl	800018c <__aeabi_dsub>
 80045e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045ea:	3330      	adds	r3, #48	; 0x30
 80045ec:	f805 3b01 	strb.w	r3, [r5], #1
 80045f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80045f4:	f7fc f9f4 	bl	80009e0 <__aeabi_dcmplt>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d163      	bne.n	80046c4 <_dtoa_r+0x5f4>
 80045fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004600:	2000      	movs	r0, #0
 8004602:	4937      	ldr	r1, [pc, #220]	; (80046e0 <_dtoa_r+0x610>)
 8004604:	f7fb fdc2 	bl	800018c <__aeabi_dsub>
 8004608:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800460c:	f7fc f9e8 	bl	80009e0 <__aeabi_dcmplt>
 8004610:	2800      	cmp	r0, #0
 8004612:	f040 80b5 	bne.w	8004780 <_dtoa_r+0x6b0>
 8004616:	9b06      	ldr	r3, [sp, #24]
 8004618:	1aeb      	subs	r3, r5, r3
 800461a:	429e      	cmp	r6, r3
 800461c:	f77f af7c 	ble.w	8004518 <_dtoa_r+0x448>
 8004620:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004624:	2200      	movs	r2, #0
 8004626:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <_dtoa_r+0x614>)
 8004628:	f7fb ff68 	bl	80004fc <__aeabi_dmul>
 800462c:	2200      	movs	r2, #0
 800462e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004636:	4b2b      	ldr	r3, [pc, #172]	; (80046e4 <_dtoa_r+0x614>)
 8004638:	f7fb ff60 	bl	80004fc <__aeabi_dmul>
 800463c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004640:	e7c3      	b.n	80045ca <_dtoa_r+0x4fa>
 8004642:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004646:	f7fb ff59 	bl	80004fc <__aeabi_dmul>
 800464a:	9b06      	ldr	r3, [sp, #24]
 800464c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004650:	199d      	adds	r5, r3, r6
 8004652:	461e      	mov	r6, r3
 8004654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004658:	f7fc fa00 	bl	8000a5c <__aeabi_d2iz>
 800465c:	9011      	str	r0, [sp, #68]	; 0x44
 800465e:	f7fb fee3 	bl	8000428 <__aeabi_i2d>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800466a:	f7fb fd8f 	bl	800018c <__aeabi_dsub>
 800466e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004674:	3330      	adds	r3, #48	; 0x30
 8004676:	f806 3b01 	strb.w	r3, [r6], #1
 800467a:	42ae      	cmp	r6, r5
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	d124      	bne.n	80046cc <_dtoa_r+0x5fc>
 8004682:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <_dtoa_r+0x620>)
 8004688:	f7fb fd82 	bl	8000190 <__adddf3>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004694:	f7fc f9c2 	bl	8000a1c <__aeabi_dcmpgt>
 8004698:	2800      	cmp	r0, #0
 800469a:	d171      	bne.n	8004780 <_dtoa_r+0x6b0>
 800469c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80046a0:	2000      	movs	r0, #0
 80046a2:	4913      	ldr	r1, [pc, #76]	; (80046f0 <_dtoa_r+0x620>)
 80046a4:	f7fb fd72 	bl	800018c <__aeabi_dsub>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046b0:	f7fc f996 	bl	80009e0 <__aeabi_dcmplt>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	f43f af2f 	beq.w	8004518 <_dtoa_r+0x448>
 80046ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80046be:	1e6a      	subs	r2, r5, #1
 80046c0:	2b30      	cmp	r3, #48	; 0x30
 80046c2:	d001      	beq.n	80046c8 <_dtoa_r+0x5f8>
 80046c4:	46ba      	mov	sl, r7
 80046c6:	e04a      	b.n	800475e <_dtoa_r+0x68e>
 80046c8:	4615      	mov	r5, r2
 80046ca:	e7f6      	b.n	80046ba <_dtoa_r+0x5ea>
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <_dtoa_r+0x614>)
 80046ce:	f7fb ff15 	bl	80004fc <__aeabi_dmul>
 80046d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046d6:	e7bd      	b.n	8004654 <_dtoa_r+0x584>
 80046d8:	08005250 	.word	0x08005250
 80046dc:	08005228 	.word	0x08005228
 80046e0:	3ff00000 	.word	0x3ff00000
 80046e4:	40240000 	.word	0x40240000
 80046e8:	401c0000 	.word	0x401c0000
 80046ec:	40140000 	.word	0x40140000
 80046f0:	3fe00000 	.word	0x3fe00000
 80046f4:	9d06      	ldr	r5, [sp, #24]
 80046f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80046fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046fe:	4630      	mov	r0, r6
 8004700:	4639      	mov	r1, r7
 8004702:	f7fc f825 	bl	8000750 <__aeabi_ddiv>
 8004706:	f7fc f9a9 	bl	8000a5c <__aeabi_d2iz>
 800470a:	4681      	mov	r9, r0
 800470c:	f7fb fe8c 	bl	8000428 <__aeabi_i2d>
 8004710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004714:	f7fb fef2 	bl	80004fc <__aeabi_dmul>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4630      	mov	r0, r6
 800471e:	4639      	mov	r1, r7
 8004720:	f7fb fd34 	bl	800018c <__aeabi_dsub>
 8004724:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004728:	f805 6b01 	strb.w	r6, [r5], #1
 800472c:	9e06      	ldr	r6, [sp, #24]
 800472e:	4602      	mov	r2, r0
 8004730:	1bae      	subs	r6, r5, r6
 8004732:	45b0      	cmp	r8, r6
 8004734:	460b      	mov	r3, r1
 8004736:	d135      	bne.n	80047a4 <_dtoa_r+0x6d4>
 8004738:	f7fb fd2a 	bl	8000190 <__adddf3>
 800473c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004740:	4606      	mov	r6, r0
 8004742:	460f      	mov	r7, r1
 8004744:	f7fc f96a 	bl	8000a1c <__aeabi_dcmpgt>
 8004748:	b9c8      	cbnz	r0, 800477e <_dtoa_r+0x6ae>
 800474a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800474e:	4630      	mov	r0, r6
 8004750:	4639      	mov	r1, r7
 8004752:	f7fc f93b 	bl	80009cc <__aeabi_dcmpeq>
 8004756:	b110      	cbz	r0, 800475e <_dtoa_r+0x68e>
 8004758:	f019 0f01 	tst.w	r9, #1
 800475c:	d10f      	bne.n	800477e <_dtoa_r+0x6ae>
 800475e:	4659      	mov	r1, fp
 8004760:	4620      	mov	r0, r4
 8004762:	f7fe fde3 	bl	800332c <_Bfree>
 8004766:	2300      	movs	r3, #0
 8004768:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800476a:	702b      	strb	r3, [r5, #0]
 800476c:	f10a 0301 	add.w	r3, sl, #1
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004774:	2b00      	cmp	r3, #0
 8004776:	f43f acf3 	beq.w	8004160 <_dtoa_r+0x90>
 800477a:	601d      	str	r5, [r3, #0]
 800477c:	e4f0      	b.n	8004160 <_dtoa_r+0x90>
 800477e:	4657      	mov	r7, sl
 8004780:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004784:	1e6b      	subs	r3, r5, #1
 8004786:	2a39      	cmp	r2, #57	; 0x39
 8004788:	d106      	bne.n	8004798 <_dtoa_r+0x6c8>
 800478a:	9a06      	ldr	r2, [sp, #24]
 800478c:	429a      	cmp	r2, r3
 800478e:	d107      	bne.n	80047a0 <_dtoa_r+0x6d0>
 8004790:	2330      	movs	r3, #48	; 0x30
 8004792:	7013      	strb	r3, [r2, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	3701      	adds	r7, #1
 8004798:	781a      	ldrb	r2, [r3, #0]
 800479a:	3201      	adds	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	e791      	b.n	80046c4 <_dtoa_r+0x5f4>
 80047a0:	461d      	mov	r5, r3
 80047a2:	e7ed      	b.n	8004780 <_dtoa_r+0x6b0>
 80047a4:	2200      	movs	r2, #0
 80047a6:	4b99      	ldr	r3, [pc, #612]	; (8004a0c <_dtoa_r+0x93c>)
 80047a8:	f7fb fea8 	bl	80004fc <__aeabi_dmul>
 80047ac:	2200      	movs	r2, #0
 80047ae:	2300      	movs	r3, #0
 80047b0:	4606      	mov	r6, r0
 80047b2:	460f      	mov	r7, r1
 80047b4:	f7fc f90a 	bl	80009cc <__aeabi_dcmpeq>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d09e      	beq.n	80046fa <_dtoa_r+0x62a>
 80047bc:	e7cf      	b.n	800475e <_dtoa_r+0x68e>
 80047be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047c0:	2a00      	cmp	r2, #0
 80047c2:	f000 8088 	beq.w	80048d6 <_dtoa_r+0x806>
 80047c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80047c8:	2a01      	cmp	r2, #1
 80047ca:	dc6d      	bgt.n	80048a8 <_dtoa_r+0x7d8>
 80047cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	d066      	beq.n	80048a0 <_dtoa_r+0x7d0>
 80047d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80047d6:	464d      	mov	r5, r9
 80047d8:	9e08      	ldr	r6, [sp, #32]
 80047da:	9a07      	ldr	r2, [sp, #28]
 80047dc:	2101      	movs	r1, #1
 80047de:	441a      	add	r2, r3
 80047e0:	4620      	mov	r0, r4
 80047e2:	4499      	add	r9, r3
 80047e4:	9207      	str	r2, [sp, #28]
 80047e6:	f7fe fe41 	bl	800346c <__i2b>
 80047ea:	4607      	mov	r7, r0
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	dd0b      	ble.n	8004808 <_dtoa_r+0x738>
 80047f0:	9b07      	ldr	r3, [sp, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	dd08      	ble.n	8004808 <_dtoa_r+0x738>
 80047f6:	42ab      	cmp	r3, r5
 80047f8:	bfa8      	it	ge
 80047fa:	462b      	movge	r3, r5
 80047fc:	9a07      	ldr	r2, [sp, #28]
 80047fe:	eba9 0903 	sub.w	r9, r9, r3
 8004802:	1aed      	subs	r5, r5, r3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	9307      	str	r3, [sp, #28]
 8004808:	9b08      	ldr	r3, [sp, #32]
 800480a:	b1eb      	cbz	r3, 8004848 <_dtoa_r+0x778>
 800480c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d065      	beq.n	80048de <_dtoa_r+0x80e>
 8004812:	b18e      	cbz	r6, 8004838 <_dtoa_r+0x768>
 8004814:	4639      	mov	r1, r7
 8004816:	4632      	mov	r2, r6
 8004818:	4620      	mov	r0, r4
 800481a:	f7fe fec5 	bl	80035a8 <__pow5mult>
 800481e:	465a      	mov	r2, fp
 8004820:	4601      	mov	r1, r0
 8004822:	4607      	mov	r7, r0
 8004824:	4620      	mov	r0, r4
 8004826:	f7fe fe2a 	bl	800347e <__multiply>
 800482a:	4659      	mov	r1, fp
 800482c:	900a      	str	r0, [sp, #40]	; 0x28
 800482e:	4620      	mov	r0, r4
 8004830:	f7fe fd7c 	bl	800332c <_Bfree>
 8004834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004836:	469b      	mov	fp, r3
 8004838:	9b08      	ldr	r3, [sp, #32]
 800483a:	1b9a      	subs	r2, r3, r6
 800483c:	d004      	beq.n	8004848 <_dtoa_r+0x778>
 800483e:	4659      	mov	r1, fp
 8004840:	4620      	mov	r0, r4
 8004842:	f7fe feb1 	bl	80035a8 <__pow5mult>
 8004846:	4683      	mov	fp, r0
 8004848:	2101      	movs	r1, #1
 800484a:	4620      	mov	r0, r4
 800484c:	f7fe fe0e 	bl	800346c <__i2b>
 8004850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004852:	4606      	mov	r6, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 81c6 	beq.w	8004be6 <_dtoa_r+0xb16>
 800485a:	461a      	mov	r2, r3
 800485c:	4601      	mov	r1, r0
 800485e:	4620      	mov	r0, r4
 8004860:	f7fe fea2 	bl	80035a8 <__pow5mult>
 8004864:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004866:	4606      	mov	r6, r0
 8004868:	2b01      	cmp	r3, #1
 800486a:	dc3e      	bgt.n	80048ea <_dtoa_r+0x81a>
 800486c:	9b02      	ldr	r3, [sp, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d137      	bne.n	80048e2 <_dtoa_r+0x812>
 8004872:	9b03      	ldr	r3, [sp, #12]
 8004874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004878:	2b00      	cmp	r3, #0
 800487a:	d134      	bne.n	80048e6 <_dtoa_r+0x816>
 800487c:	9b03      	ldr	r3, [sp, #12]
 800487e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004882:	0d1b      	lsrs	r3, r3, #20
 8004884:	051b      	lsls	r3, r3, #20
 8004886:	b12b      	cbz	r3, 8004894 <_dtoa_r+0x7c4>
 8004888:	9b07      	ldr	r3, [sp, #28]
 800488a:	f109 0901 	add.w	r9, r9, #1
 800488e:	3301      	adds	r3, #1
 8004890:	9307      	str	r3, [sp, #28]
 8004892:	2301      	movs	r3, #1
 8004894:	9308      	str	r3, [sp, #32]
 8004896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004898:	2b00      	cmp	r3, #0
 800489a:	d128      	bne.n	80048ee <_dtoa_r+0x81e>
 800489c:	2001      	movs	r0, #1
 800489e:	e02e      	b.n	80048fe <_dtoa_r+0x82e>
 80048a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80048a6:	e796      	b.n	80047d6 <_dtoa_r+0x706>
 80048a8:	9b08      	ldr	r3, [sp, #32]
 80048aa:	f108 36ff 	add.w	r6, r8, #4294967295
 80048ae:	42b3      	cmp	r3, r6
 80048b0:	bfb7      	itett	lt
 80048b2:	9b08      	ldrlt	r3, [sp, #32]
 80048b4:	1b9e      	subge	r6, r3, r6
 80048b6:	1af2      	sublt	r2, r6, r3
 80048b8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80048ba:	bfbf      	itttt	lt
 80048bc:	9608      	strlt	r6, [sp, #32]
 80048be:	189b      	addlt	r3, r3, r2
 80048c0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80048c2:	2600      	movlt	r6, #0
 80048c4:	f1b8 0f00 	cmp.w	r8, #0
 80048c8:	bfb9      	ittee	lt
 80048ca:	eba9 0508 	sublt.w	r5, r9, r8
 80048ce:	2300      	movlt	r3, #0
 80048d0:	464d      	movge	r5, r9
 80048d2:	4643      	movge	r3, r8
 80048d4:	e781      	b.n	80047da <_dtoa_r+0x70a>
 80048d6:	9e08      	ldr	r6, [sp, #32]
 80048d8:	464d      	mov	r5, r9
 80048da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80048dc:	e786      	b.n	80047ec <_dtoa_r+0x71c>
 80048de:	9a08      	ldr	r2, [sp, #32]
 80048e0:	e7ad      	b.n	800483e <_dtoa_r+0x76e>
 80048e2:	2300      	movs	r3, #0
 80048e4:	e7d6      	b.n	8004894 <_dtoa_r+0x7c4>
 80048e6:	9b02      	ldr	r3, [sp, #8]
 80048e8:	e7d4      	b.n	8004894 <_dtoa_r+0x7c4>
 80048ea:	2300      	movs	r3, #0
 80048ec:	9308      	str	r3, [sp, #32]
 80048ee:	6933      	ldr	r3, [r6, #16]
 80048f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80048f4:	6918      	ldr	r0, [r3, #16]
 80048f6:	f7fe fd6b 	bl	80033d0 <__hi0bits>
 80048fa:	f1c0 0020 	rsb	r0, r0, #32
 80048fe:	9b07      	ldr	r3, [sp, #28]
 8004900:	4418      	add	r0, r3
 8004902:	f010 001f 	ands.w	r0, r0, #31
 8004906:	d047      	beq.n	8004998 <_dtoa_r+0x8c8>
 8004908:	f1c0 0320 	rsb	r3, r0, #32
 800490c:	2b04      	cmp	r3, #4
 800490e:	dd3b      	ble.n	8004988 <_dtoa_r+0x8b8>
 8004910:	9b07      	ldr	r3, [sp, #28]
 8004912:	f1c0 001c 	rsb	r0, r0, #28
 8004916:	4481      	add	r9, r0
 8004918:	4405      	add	r5, r0
 800491a:	4403      	add	r3, r0
 800491c:	9307      	str	r3, [sp, #28]
 800491e:	f1b9 0f00 	cmp.w	r9, #0
 8004922:	dd05      	ble.n	8004930 <_dtoa_r+0x860>
 8004924:	4659      	mov	r1, fp
 8004926:	464a      	mov	r2, r9
 8004928:	4620      	mov	r0, r4
 800492a:	f7fe fe8b 	bl	8003644 <__lshift>
 800492e:	4683      	mov	fp, r0
 8004930:	9b07      	ldr	r3, [sp, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	dd05      	ble.n	8004942 <_dtoa_r+0x872>
 8004936:	4631      	mov	r1, r6
 8004938:	461a      	mov	r2, r3
 800493a:	4620      	mov	r0, r4
 800493c:	f7fe fe82 	bl	8003644 <__lshift>
 8004940:	4606      	mov	r6, r0
 8004942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004944:	b353      	cbz	r3, 800499c <_dtoa_r+0x8cc>
 8004946:	4631      	mov	r1, r6
 8004948:	4658      	mov	r0, fp
 800494a:	f7fe fecf 	bl	80036ec <__mcmp>
 800494e:	2800      	cmp	r0, #0
 8004950:	da24      	bge.n	800499c <_dtoa_r+0x8cc>
 8004952:	2300      	movs	r3, #0
 8004954:	4659      	mov	r1, fp
 8004956:	220a      	movs	r2, #10
 8004958:	4620      	mov	r0, r4
 800495a:	f7fe fcfe 	bl	800335a <__multadd>
 800495e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004960:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004964:	4683      	mov	fp, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 8144 	beq.w	8004bf4 <_dtoa_r+0xb24>
 800496c:	2300      	movs	r3, #0
 800496e:	4639      	mov	r1, r7
 8004970:	220a      	movs	r2, #10
 8004972:	4620      	mov	r0, r4
 8004974:	f7fe fcf1 	bl	800335a <__multadd>
 8004978:	9b04      	ldr	r3, [sp, #16]
 800497a:	4607      	mov	r7, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	dc4d      	bgt.n	8004a1c <_dtoa_r+0x94c>
 8004980:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004982:	2b02      	cmp	r3, #2
 8004984:	dd4a      	ble.n	8004a1c <_dtoa_r+0x94c>
 8004986:	e011      	b.n	80049ac <_dtoa_r+0x8dc>
 8004988:	d0c9      	beq.n	800491e <_dtoa_r+0x84e>
 800498a:	9a07      	ldr	r2, [sp, #28]
 800498c:	331c      	adds	r3, #28
 800498e:	441a      	add	r2, r3
 8004990:	4499      	add	r9, r3
 8004992:	441d      	add	r5, r3
 8004994:	4613      	mov	r3, r2
 8004996:	e7c1      	b.n	800491c <_dtoa_r+0x84c>
 8004998:	4603      	mov	r3, r0
 800499a:	e7f6      	b.n	800498a <_dtoa_r+0x8ba>
 800499c:	f1b8 0f00 	cmp.w	r8, #0
 80049a0:	dc36      	bgt.n	8004a10 <_dtoa_r+0x940>
 80049a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	dd33      	ble.n	8004a10 <_dtoa_r+0x940>
 80049a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80049ac:	9b04      	ldr	r3, [sp, #16]
 80049ae:	b963      	cbnz	r3, 80049ca <_dtoa_r+0x8fa>
 80049b0:	4631      	mov	r1, r6
 80049b2:	2205      	movs	r2, #5
 80049b4:	4620      	mov	r0, r4
 80049b6:	f7fe fcd0 	bl	800335a <__multadd>
 80049ba:	4601      	mov	r1, r0
 80049bc:	4606      	mov	r6, r0
 80049be:	4658      	mov	r0, fp
 80049c0:	f7fe fe94 	bl	80036ec <__mcmp>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	f73f add3 	bgt.w	8004570 <_dtoa_r+0x4a0>
 80049ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80049cc:	9d06      	ldr	r5, [sp, #24]
 80049ce:	ea6f 0a03 	mvn.w	sl, r3
 80049d2:	f04f 0900 	mov.w	r9, #0
 80049d6:	4631      	mov	r1, r6
 80049d8:	4620      	mov	r0, r4
 80049da:	f7fe fca7 	bl	800332c <_Bfree>
 80049de:	2f00      	cmp	r7, #0
 80049e0:	f43f aebd 	beq.w	800475e <_dtoa_r+0x68e>
 80049e4:	f1b9 0f00 	cmp.w	r9, #0
 80049e8:	d005      	beq.n	80049f6 <_dtoa_r+0x926>
 80049ea:	45b9      	cmp	r9, r7
 80049ec:	d003      	beq.n	80049f6 <_dtoa_r+0x926>
 80049ee:	4649      	mov	r1, r9
 80049f0:	4620      	mov	r0, r4
 80049f2:	f7fe fc9b 	bl	800332c <_Bfree>
 80049f6:	4639      	mov	r1, r7
 80049f8:	4620      	mov	r0, r4
 80049fa:	f7fe fc97 	bl	800332c <_Bfree>
 80049fe:	e6ae      	b.n	800475e <_dtoa_r+0x68e>
 8004a00:	2600      	movs	r6, #0
 8004a02:	4637      	mov	r7, r6
 8004a04:	e7e1      	b.n	80049ca <_dtoa_r+0x8fa>
 8004a06:	46ba      	mov	sl, r7
 8004a08:	4637      	mov	r7, r6
 8004a0a:	e5b1      	b.n	8004570 <_dtoa_r+0x4a0>
 8004a0c:	40240000 	.word	0x40240000
 8004a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a12:	f8cd 8010 	str.w	r8, [sp, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 80f3 	beq.w	8004c02 <_dtoa_r+0xb32>
 8004a1c:	2d00      	cmp	r5, #0
 8004a1e:	dd05      	ble.n	8004a2c <_dtoa_r+0x95c>
 8004a20:	4639      	mov	r1, r7
 8004a22:	462a      	mov	r2, r5
 8004a24:	4620      	mov	r0, r4
 8004a26:	f7fe fe0d 	bl	8003644 <__lshift>
 8004a2a:	4607      	mov	r7, r0
 8004a2c:	9b08      	ldr	r3, [sp, #32]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d04c      	beq.n	8004acc <_dtoa_r+0x9fc>
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4620      	mov	r0, r4
 8004a36:	f7fe fc45 	bl	80032c4 <_Balloc>
 8004a3a:	4605      	mov	r5, r0
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	f107 010c 	add.w	r1, r7, #12
 8004a42:	3202      	adds	r2, #2
 8004a44:	0092      	lsls	r2, r2, #2
 8004a46:	300c      	adds	r0, #12
 8004a48:	f000 f90c 	bl	8004c64 <memcpy>
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7fe fdf7 	bl	8003644 <__lshift>
 8004a56:	46b9      	mov	r9, r7
 8004a58:	4607      	mov	r7, r0
 8004a5a:	9b06      	ldr	r3, [sp, #24]
 8004a5c:	9307      	str	r3, [sp, #28]
 8004a5e:	9b02      	ldr	r3, [sp, #8]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	9308      	str	r3, [sp, #32]
 8004a66:	4631      	mov	r1, r6
 8004a68:	4658      	mov	r0, fp
 8004a6a:	f7ff faa3 	bl	8003fb4 <quorem>
 8004a6e:	4649      	mov	r1, r9
 8004a70:	4605      	mov	r5, r0
 8004a72:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004a76:	4658      	mov	r0, fp
 8004a78:	f7fe fe38 	bl	80036ec <__mcmp>
 8004a7c:	463a      	mov	r2, r7
 8004a7e:	9002      	str	r0, [sp, #8]
 8004a80:	4631      	mov	r1, r6
 8004a82:	4620      	mov	r0, r4
 8004a84:	f7fe fe4c 	bl	8003720 <__mdiff>
 8004a88:	68c3      	ldr	r3, [r0, #12]
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	bb03      	cbnz	r3, 8004ad0 <_dtoa_r+0xa00>
 8004a8e:	4601      	mov	r1, r0
 8004a90:	9009      	str	r0, [sp, #36]	; 0x24
 8004a92:	4658      	mov	r0, fp
 8004a94:	f7fe fe2a 	bl	80036ec <__mcmp>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8004aa2:	f7fe fc43 	bl	800332c <_Bfree>
 8004aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa8:	b9a3      	cbnz	r3, 8004ad4 <_dtoa_r+0xa04>
 8004aaa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004aac:	b992      	cbnz	r2, 8004ad4 <_dtoa_r+0xa04>
 8004aae:	9a08      	ldr	r2, [sp, #32]
 8004ab0:	b982      	cbnz	r2, 8004ad4 <_dtoa_r+0xa04>
 8004ab2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004ab6:	d029      	beq.n	8004b0c <_dtoa_r+0xa3c>
 8004ab8:	9b02      	ldr	r3, [sp, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	dd01      	ble.n	8004ac2 <_dtoa_r+0x9f2>
 8004abe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004ac2:	9b07      	ldr	r3, [sp, #28]
 8004ac4:	1c5d      	adds	r5, r3, #1
 8004ac6:	f883 8000 	strb.w	r8, [r3]
 8004aca:	e784      	b.n	80049d6 <_dtoa_r+0x906>
 8004acc:	4638      	mov	r0, r7
 8004ace:	e7c2      	b.n	8004a56 <_dtoa_r+0x986>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e7e3      	b.n	8004a9c <_dtoa_r+0x9cc>
 8004ad4:	9a02      	ldr	r2, [sp, #8]
 8004ad6:	2a00      	cmp	r2, #0
 8004ad8:	db04      	blt.n	8004ae4 <_dtoa_r+0xa14>
 8004ada:	d123      	bne.n	8004b24 <_dtoa_r+0xa54>
 8004adc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004ade:	bb0a      	cbnz	r2, 8004b24 <_dtoa_r+0xa54>
 8004ae0:	9a08      	ldr	r2, [sp, #32]
 8004ae2:	b9fa      	cbnz	r2, 8004b24 <_dtoa_r+0xa54>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	ddec      	ble.n	8004ac2 <_dtoa_r+0x9f2>
 8004ae8:	4659      	mov	r1, fp
 8004aea:	2201      	movs	r2, #1
 8004aec:	4620      	mov	r0, r4
 8004aee:	f7fe fda9 	bl	8003644 <__lshift>
 8004af2:	4631      	mov	r1, r6
 8004af4:	4683      	mov	fp, r0
 8004af6:	f7fe fdf9 	bl	80036ec <__mcmp>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	dc03      	bgt.n	8004b06 <_dtoa_r+0xa36>
 8004afe:	d1e0      	bne.n	8004ac2 <_dtoa_r+0x9f2>
 8004b00:	f018 0f01 	tst.w	r8, #1
 8004b04:	d0dd      	beq.n	8004ac2 <_dtoa_r+0x9f2>
 8004b06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004b0a:	d1d8      	bne.n	8004abe <_dtoa_r+0x9ee>
 8004b0c:	9b07      	ldr	r3, [sp, #28]
 8004b0e:	9a07      	ldr	r2, [sp, #28]
 8004b10:	1c5d      	adds	r5, r3, #1
 8004b12:	2339      	movs	r3, #57	; 0x39
 8004b14:	7013      	strb	r3, [r2, #0]
 8004b16:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b1a:	1e6a      	subs	r2, r5, #1
 8004b1c:	2b39      	cmp	r3, #57	; 0x39
 8004b1e:	d04d      	beq.n	8004bbc <_dtoa_r+0xaec>
 8004b20:	3301      	adds	r3, #1
 8004b22:	e052      	b.n	8004bca <_dtoa_r+0xafa>
 8004b24:	9a07      	ldr	r2, [sp, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f102 0501 	add.w	r5, r2, #1
 8004b2c:	dd06      	ble.n	8004b3c <_dtoa_r+0xa6c>
 8004b2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004b32:	d0eb      	beq.n	8004b0c <_dtoa_r+0xa3c>
 8004b34:	f108 0801 	add.w	r8, r8, #1
 8004b38:	9b07      	ldr	r3, [sp, #28]
 8004b3a:	e7c4      	b.n	8004ac6 <_dtoa_r+0x9f6>
 8004b3c:	9b06      	ldr	r3, [sp, #24]
 8004b3e:	9a04      	ldr	r2, [sp, #16]
 8004b40:	1aeb      	subs	r3, r5, r3
 8004b42:	4293      	cmp	r3, r2
 8004b44:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004b48:	d021      	beq.n	8004b8e <_dtoa_r+0xabe>
 8004b4a:	4659      	mov	r1, fp
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	220a      	movs	r2, #10
 8004b50:	4620      	mov	r0, r4
 8004b52:	f7fe fc02 	bl	800335a <__multadd>
 8004b56:	45b9      	cmp	r9, r7
 8004b58:	4683      	mov	fp, r0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	f04f 020a 	mov.w	r2, #10
 8004b62:	4649      	mov	r1, r9
 8004b64:	4620      	mov	r0, r4
 8004b66:	d105      	bne.n	8004b74 <_dtoa_r+0xaa4>
 8004b68:	f7fe fbf7 	bl	800335a <__multadd>
 8004b6c:	4681      	mov	r9, r0
 8004b6e:	4607      	mov	r7, r0
 8004b70:	9507      	str	r5, [sp, #28]
 8004b72:	e778      	b.n	8004a66 <_dtoa_r+0x996>
 8004b74:	f7fe fbf1 	bl	800335a <__multadd>
 8004b78:	4639      	mov	r1, r7
 8004b7a:	4681      	mov	r9, r0
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	220a      	movs	r2, #10
 8004b80:	4620      	mov	r0, r4
 8004b82:	f7fe fbea 	bl	800335a <__multadd>
 8004b86:	4607      	mov	r7, r0
 8004b88:	e7f2      	b.n	8004b70 <_dtoa_r+0xaa0>
 8004b8a:	f04f 0900 	mov.w	r9, #0
 8004b8e:	4659      	mov	r1, fp
 8004b90:	2201      	movs	r2, #1
 8004b92:	4620      	mov	r0, r4
 8004b94:	f7fe fd56 	bl	8003644 <__lshift>
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4683      	mov	fp, r0
 8004b9c:	f7fe fda6 	bl	80036ec <__mcmp>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	dcb8      	bgt.n	8004b16 <_dtoa_r+0xa46>
 8004ba4:	d102      	bne.n	8004bac <_dtoa_r+0xadc>
 8004ba6:	f018 0f01 	tst.w	r8, #1
 8004baa:	d1b4      	bne.n	8004b16 <_dtoa_r+0xa46>
 8004bac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004bb0:	1e6a      	subs	r2, r5, #1
 8004bb2:	2b30      	cmp	r3, #48	; 0x30
 8004bb4:	f47f af0f 	bne.w	80049d6 <_dtoa_r+0x906>
 8004bb8:	4615      	mov	r5, r2
 8004bba:	e7f7      	b.n	8004bac <_dtoa_r+0xadc>
 8004bbc:	9b06      	ldr	r3, [sp, #24]
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d105      	bne.n	8004bce <_dtoa_r+0xafe>
 8004bc2:	2331      	movs	r3, #49	; 0x31
 8004bc4:	9a06      	ldr	r2, [sp, #24]
 8004bc6:	f10a 0a01 	add.w	sl, sl, #1
 8004bca:	7013      	strb	r3, [r2, #0]
 8004bcc:	e703      	b.n	80049d6 <_dtoa_r+0x906>
 8004bce:	4615      	mov	r5, r2
 8004bd0:	e7a1      	b.n	8004b16 <_dtoa_r+0xa46>
 8004bd2:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <_dtoa_r+0xb60>)
 8004bd4:	f7ff bae1 	b.w	800419a <_dtoa_r+0xca>
 8004bd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f47f aabb 	bne.w	8004156 <_dtoa_r+0x86>
 8004be0:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <_dtoa_r+0xb64>)
 8004be2:	f7ff bada 	b.w	800419a <_dtoa_r+0xca>
 8004be6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	f77f ae3f 	ble.w	800486c <_dtoa_r+0x79c>
 8004bee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bf0:	9308      	str	r3, [sp, #32]
 8004bf2:	e653      	b.n	800489c <_dtoa_r+0x7cc>
 8004bf4:	9b04      	ldr	r3, [sp, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	dc03      	bgt.n	8004c02 <_dtoa_r+0xb32>
 8004bfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	f73f aed5 	bgt.w	80049ac <_dtoa_r+0x8dc>
 8004c02:	9d06      	ldr	r5, [sp, #24]
 8004c04:	4631      	mov	r1, r6
 8004c06:	4658      	mov	r0, fp
 8004c08:	f7ff f9d4 	bl	8003fb4 <quorem>
 8004c0c:	9b06      	ldr	r3, [sp, #24]
 8004c0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004c12:	f805 8b01 	strb.w	r8, [r5], #1
 8004c16:	9a04      	ldr	r2, [sp, #16]
 8004c18:	1aeb      	subs	r3, r5, r3
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	ddb5      	ble.n	8004b8a <_dtoa_r+0xaba>
 8004c1e:	4659      	mov	r1, fp
 8004c20:	2300      	movs	r3, #0
 8004c22:	220a      	movs	r2, #10
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7fe fb98 	bl	800335a <__multadd>
 8004c2a:	4683      	mov	fp, r0
 8004c2c:	e7ea      	b.n	8004c04 <_dtoa_r+0xb34>
 8004c2e:	bf00      	nop
 8004c30:	08005364 	.word	0x08005364
 8004c34:	08005357 	.word	0x08005357

08004c38 <malloc>:
 8004c38:	4b02      	ldr	r3, [pc, #8]	; (8004c44 <malloc+0xc>)
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	f7fe be47 	b.w	80038d0 <_malloc_r>
 8004c42:	bf00      	nop
 8004c44:	20000020 	.word	0x20000020

08004c48 <memchr>:
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	b2c9      	uxtb	r1, r1
 8004c4c:	4402      	add	r2, r0
 8004c4e:	4290      	cmp	r0, r2
 8004c50:	4603      	mov	r3, r0
 8004c52:	d101      	bne.n	8004c58 <memchr+0x10>
 8004c54:	2300      	movs	r3, #0
 8004c56:	e003      	b.n	8004c60 <memchr+0x18>
 8004c58:	781c      	ldrb	r4, [r3, #0]
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	428c      	cmp	r4, r1
 8004c5e:	d1f6      	bne.n	8004c4e <memchr+0x6>
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd10      	pop	{r4, pc}

08004c64 <memcpy>:
 8004c64:	b510      	push	{r4, lr}
 8004c66:	1e43      	subs	r3, r0, #1
 8004c68:	440a      	add	r2, r1
 8004c6a:	4291      	cmp	r1, r2
 8004c6c:	d100      	bne.n	8004c70 <memcpy+0xc>
 8004c6e:	bd10      	pop	{r4, pc}
 8004c70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c78:	e7f7      	b.n	8004c6a <memcpy+0x6>

08004c7a <memmove>:
 8004c7a:	4288      	cmp	r0, r1
 8004c7c:	b510      	push	{r4, lr}
 8004c7e:	eb01 0302 	add.w	r3, r1, r2
 8004c82:	d807      	bhi.n	8004c94 <memmove+0x1a>
 8004c84:	1e42      	subs	r2, r0, #1
 8004c86:	4299      	cmp	r1, r3
 8004c88:	d00a      	beq.n	8004ca0 <memmove+0x26>
 8004c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c8e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c92:	e7f8      	b.n	8004c86 <memmove+0xc>
 8004c94:	4283      	cmp	r3, r0
 8004c96:	d9f5      	bls.n	8004c84 <memmove+0xa>
 8004c98:	1881      	adds	r1, r0, r2
 8004c9a:	1ad2      	subs	r2, r2, r3
 8004c9c:	42d3      	cmn	r3, r2
 8004c9e:	d100      	bne.n	8004ca2 <memmove+0x28>
 8004ca0:	bd10      	pop	{r4, pc}
 8004ca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ca6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004caa:	e7f7      	b.n	8004c9c <memmove+0x22>

08004cac <__malloc_lock>:
 8004cac:	4770      	bx	lr

08004cae <__malloc_unlock>:
 8004cae:	4770      	bx	lr

08004cb0 <_free_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	d043      	beq.n	8004d40 <_free_r+0x90>
 8004cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cbc:	1f0c      	subs	r4, r1, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bfb8      	it	lt
 8004cc2:	18e4      	addlt	r4, r4, r3
 8004cc4:	f7ff fff2 	bl	8004cac <__malloc_lock>
 8004cc8:	4a1e      	ldr	r2, [pc, #120]	; (8004d44 <_free_r+0x94>)
 8004cca:	6813      	ldr	r3, [r2, #0]
 8004ccc:	4610      	mov	r0, r2
 8004cce:	b933      	cbnz	r3, 8004cde <_free_r+0x2e>
 8004cd0:	6063      	str	r3, [r4, #4]
 8004cd2:	6014      	str	r4, [r2, #0]
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cda:	f7ff bfe8 	b.w	8004cae <__malloc_unlock>
 8004cde:	42a3      	cmp	r3, r4
 8004ce0:	d90b      	bls.n	8004cfa <_free_r+0x4a>
 8004ce2:	6821      	ldr	r1, [r4, #0]
 8004ce4:	1862      	adds	r2, r4, r1
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	bf01      	itttt	eq
 8004cea:	681a      	ldreq	r2, [r3, #0]
 8004cec:	685b      	ldreq	r3, [r3, #4]
 8004cee:	1852      	addeq	r2, r2, r1
 8004cf0:	6022      	streq	r2, [r4, #0]
 8004cf2:	6063      	str	r3, [r4, #4]
 8004cf4:	6004      	str	r4, [r0, #0]
 8004cf6:	e7ed      	b.n	8004cd4 <_free_r+0x24>
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	b10a      	cbz	r2, 8004d02 <_free_r+0x52>
 8004cfe:	42a2      	cmp	r2, r4
 8004d00:	d9fa      	bls.n	8004cf8 <_free_r+0x48>
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	1858      	adds	r0, r3, r1
 8004d06:	42a0      	cmp	r0, r4
 8004d08:	d10b      	bne.n	8004d22 <_free_r+0x72>
 8004d0a:	6820      	ldr	r0, [r4, #0]
 8004d0c:	4401      	add	r1, r0
 8004d0e:	1858      	adds	r0, r3, r1
 8004d10:	4282      	cmp	r2, r0
 8004d12:	6019      	str	r1, [r3, #0]
 8004d14:	d1de      	bne.n	8004cd4 <_free_r+0x24>
 8004d16:	6810      	ldr	r0, [r2, #0]
 8004d18:	6852      	ldr	r2, [r2, #4]
 8004d1a:	4401      	add	r1, r0
 8004d1c:	6019      	str	r1, [r3, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
 8004d20:	e7d8      	b.n	8004cd4 <_free_r+0x24>
 8004d22:	d902      	bls.n	8004d2a <_free_r+0x7a>
 8004d24:	230c      	movs	r3, #12
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	e7d4      	b.n	8004cd4 <_free_r+0x24>
 8004d2a:	6820      	ldr	r0, [r4, #0]
 8004d2c:	1821      	adds	r1, r4, r0
 8004d2e:	428a      	cmp	r2, r1
 8004d30:	bf01      	itttt	eq
 8004d32:	6811      	ldreq	r1, [r2, #0]
 8004d34:	6852      	ldreq	r2, [r2, #4]
 8004d36:	1809      	addeq	r1, r1, r0
 8004d38:	6021      	streq	r1, [r4, #0]
 8004d3a:	6062      	str	r2, [r4, #4]
 8004d3c:	605c      	str	r4, [r3, #4]
 8004d3e:	e7c9      	b.n	8004cd4 <_free_r+0x24>
 8004d40:	bd38      	pop	{r3, r4, r5, pc}
 8004d42:	bf00      	nop
 8004d44:	200000c8 	.word	0x200000c8

08004d48 <_malloc_usable_size_r>:
 8004d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4c:	1f18      	subs	r0, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bfbc      	itt	lt
 8004d52:	580b      	ldrlt	r3, [r1, r0]
 8004d54:	18c0      	addlt	r0, r0, r3
 8004d56:	4770      	bx	lr

08004d58 <log>:
 8004d58:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8004d5c:	b08a      	sub	sp, #40	; 0x28
 8004d5e:	4604      	mov	r4, r0
 8004d60:	460d      	mov	r5, r1
 8004d62:	f000 f875 	bl	8004e50 <__ieee754_log>
 8004d66:	4b34      	ldr	r3, [pc, #208]	; (8004e38 <log+0xe0>)
 8004d68:	4680      	mov	r8, r0
 8004d6a:	f993 6000 	ldrsb.w	r6, [r3]
 8004d6e:	4689      	mov	r9, r1
 8004d70:	1c73      	adds	r3, r6, #1
 8004d72:	d05b      	beq.n	8004e2c <log+0xd4>
 8004d74:	4622      	mov	r2, r4
 8004d76:	462b      	mov	r3, r5
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	f7fb fe58 	bl	8000a30 <__aeabi_dcmpun>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d153      	bne.n	8004e2c <log+0xd4>
 8004d84:	2200      	movs	r2, #0
 8004d86:	2300      	movs	r3, #0
 8004d88:	4620      	mov	r0, r4
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	f7fb fe46 	bl	8000a1c <__aeabi_dcmpgt>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d14b      	bne.n	8004e2c <log+0xd4>
 8004d94:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <log+0xe4>)
 8004d96:	9008      	str	r0, [sp, #32]
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004d9e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004da2:	b9a6      	cbnz	r6, 8004dce <log+0x76>
 8004da4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004da8:	4b25      	ldr	r3, [pc, #148]	; (8004e40 <log+0xe8>)
 8004daa:	4620      	mov	r0, r4
 8004dac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004db0:	4629      	mov	r1, r5
 8004db2:	2200      	movs	r2, #0
 8004db4:	2300      	movs	r3, #0
 8004db6:	f7fb fe09 	bl	80009cc <__aeabi_dcmpeq>
 8004dba:	bb40      	cbnz	r0, 8004e0e <log+0xb6>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	2e02      	cmp	r6, #2
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	d119      	bne.n	8004df8 <log+0xa0>
 8004dc4:	f7fe f8e8 	bl	8002f98 <__errno>
 8004dc8:	2321      	movs	r3, #33	; 0x21
 8004dca:	6003      	str	r3, [r0, #0]
 8004dcc:	e019      	b.n	8004e02 <log+0xaa>
 8004dce:	2200      	movs	r2, #0
 8004dd0:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <log+0xec>)
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004dd8:	4629      	mov	r1, r5
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f7fb fdf5 	bl	80009cc <__aeabi_dcmpeq>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d0ea      	beq.n	8004dbc <log+0x64>
 8004de6:	2302      	movs	r3, #2
 8004de8:	429e      	cmp	r6, r3
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	d111      	bne.n	8004e12 <log+0xba>
 8004dee:	f7fe f8d3 	bl	8002f98 <__errno>
 8004df2:	2322      	movs	r3, #34	; 0x22
 8004df4:	6003      	str	r3, [r0, #0]
 8004df6:	e011      	b.n	8004e1c <log+0xc4>
 8004df8:	4668      	mov	r0, sp
 8004dfa:	f000 f9db 	bl	80051b4 <matherr>
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d0e0      	beq.n	8004dc4 <log+0x6c>
 8004e02:	4811      	ldr	r0, [pc, #68]	; (8004e48 <log+0xf0>)
 8004e04:	f000 f9d8 	bl	80051b8 <nan>
 8004e08:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e0c:	e006      	b.n	8004e1c <log+0xc4>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	4668      	mov	r0, sp
 8004e14:	f000 f9ce 	bl	80051b4 <matherr>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d0e8      	beq.n	8004dee <log+0x96>
 8004e1c:	9b08      	ldr	r3, [sp, #32]
 8004e1e:	b11b      	cbz	r3, 8004e28 <log+0xd0>
 8004e20:	f7fe f8ba 	bl	8002f98 <__errno>
 8004e24:	9b08      	ldr	r3, [sp, #32]
 8004e26:	6003      	str	r3, [r0, #0]
 8004e28:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	4649      	mov	r1, r9
 8004e30:	b00a      	add	sp, #40	; 0x28
 8004e32:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004e36:	bf00      	nop
 8004e38:	20000084 	.word	0x20000084
 8004e3c:	08005366 	.word	0x08005366
 8004e40:	c7efffff 	.word	0xc7efffff
 8004e44:	fff00000 	.word	0xfff00000
 8004e48:	08005329 	.word	0x08005329
 8004e4c:	00000000 	.word	0x00000000

08004e50 <__ieee754_log>:
 8004e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e54:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004e58:	b087      	sub	sp, #28
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	460d      	mov	r5, r1
 8004e60:	da24      	bge.n	8004eac <__ieee754_log+0x5c>
 8004e62:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8004e66:	4304      	orrs	r4, r0
 8004e68:	d108      	bne.n	8004e7c <__ieee754_log+0x2c>
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2000      	movs	r0, #0
 8004e70:	49cb      	ldr	r1, [pc, #812]	; (80051a0 <__ieee754_log+0x350>)
 8004e72:	f7fb fc6d 	bl	8000750 <__aeabi_ddiv>
 8004e76:	b007      	add	sp, #28
 8004e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	da04      	bge.n	8004e8a <__ieee754_log+0x3a>
 8004e80:	f7fb f984 	bl	800018c <__aeabi_dsub>
 8004e84:	2200      	movs	r2, #0
 8004e86:	2300      	movs	r3, #0
 8004e88:	e7f3      	b.n	8004e72 <__ieee754_log+0x22>
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	4bc5      	ldr	r3, [pc, #788]	; (80051a4 <__ieee754_log+0x354>)
 8004e8e:	f7fb fb35 	bl	80004fc <__aeabi_dmul>
 8004e92:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	460d      	mov	r5, r1
 8004e9c:	49c2      	ldr	r1, [pc, #776]	; (80051a8 <__ieee754_log+0x358>)
 8004e9e:	428d      	cmp	r5, r1
 8004ea0:	dd06      	ble.n	8004eb0 <__ieee754_log+0x60>
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f7fb f973 	bl	8000190 <__adddf3>
 8004eaa:	e7e4      	b.n	8004e76 <__ieee754_log+0x26>
 8004eac:	2600      	movs	r6, #0
 8004eae:	e7f5      	b.n	8004e9c <__ieee754_log+0x4c>
 8004eb0:	152c      	asrs	r4, r5, #20
 8004eb2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004eb6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8004eba:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004ebe:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8004ec2:	4426      	add	r6, r4
 8004ec4:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8004ec8:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8004ecc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8004ed0:	ea41 0305 	orr.w	r3, r1, r5
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4bb4      	ldr	r3, [pc, #720]	; (80051ac <__ieee754_log+0x35c>)
 8004edc:	f7fb f956 	bl	800018c <__aeabi_dsub>
 8004ee0:	1cab      	adds	r3, r5, #2
 8004ee2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8004eec:	4682      	mov	sl, r0
 8004eee:	468b      	mov	fp, r1
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	dc53      	bgt.n	8004f9e <__ieee754_log+0x14e>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f7fb fd68 	bl	80009cc <__aeabi_dcmpeq>
 8004efc:	b1d0      	cbz	r0, 8004f34 <__ieee754_log+0xe4>
 8004efe:	2c00      	cmp	r4, #0
 8004f00:	f000 8120 	beq.w	8005144 <__ieee754_log+0x2f4>
 8004f04:	4620      	mov	r0, r4
 8004f06:	f7fb fa8f 	bl	8000428 <__aeabi_i2d>
 8004f0a:	a391      	add	r3, pc, #580	; (adr r3, 8005150 <__ieee754_log+0x300>)
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	4606      	mov	r6, r0
 8004f12:	460f      	mov	r7, r1
 8004f14:	f7fb faf2 	bl	80004fc <__aeabi_dmul>
 8004f18:	a38f      	add	r3, pc, #572	; (adr r3, 8005158 <__ieee754_log+0x308>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	4604      	mov	r4, r0
 8004f20:	460d      	mov	r5, r1
 8004f22:	4630      	mov	r0, r6
 8004f24:	4639      	mov	r1, r7
 8004f26:	f7fb fae9 	bl	80004fc <__aeabi_dmul>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4620      	mov	r0, r4
 8004f30:	4629      	mov	r1, r5
 8004f32:	e7b8      	b.n	8004ea6 <__ieee754_log+0x56>
 8004f34:	a38a      	add	r3, pc, #552	; (adr r3, 8005160 <__ieee754_log+0x310>)
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	4650      	mov	r0, sl
 8004f3c:	4659      	mov	r1, fp
 8004f3e:	f7fb fadd 	bl	80004fc <__aeabi_dmul>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	2000      	movs	r0, #0
 8004f48:	4999      	ldr	r1, [pc, #612]	; (80051b0 <__ieee754_log+0x360>)
 8004f4a:	f7fb f91f 	bl	800018c <__aeabi_dsub>
 8004f4e:	4652      	mov	r2, sl
 8004f50:	4606      	mov	r6, r0
 8004f52:	460f      	mov	r7, r1
 8004f54:	465b      	mov	r3, fp
 8004f56:	4650      	mov	r0, sl
 8004f58:	4659      	mov	r1, fp
 8004f5a:	f7fb facf 	bl	80004fc <__aeabi_dmul>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4630      	mov	r0, r6
 8004f64:	4639      	mov	r1, r7
 8004f66:	f7fb fac9 	bl	80004fc <__aeabi_dmul>
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	460f      	mov	r7, r1
 8004f6e:	b914      	cbnz	r4, 8004f76 <__ieee754_log+0x126>
 8004f70:	4632      	mov	r2, r6
 8004f72:	463b      	mov	r3, r7
 8004f74:	e0a0      	b.n	80050b8 <__ieee754_log+0x268>
 8004f76:	4620      	mov	r0, r4
 8004f78:	f7fb fa56 	bl	8000428 <__aeabi_i2d>
 8004f7c:	a374      	add	r3, pc, #464	; (adr r3, 8005150 <__ieee754_log+0x300>)
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	4680      	mov	r8, r0
 8004f84:	4689      	mov	r9, r1
 8004f86:	f7fb fab9 	bl	80004fc <__aeabi_dmul>
 8004f8a:	a373      	add	r3, pc, #460	; (adr r3, 8005158 <__ieee754_log+0x308>)
 8004f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f90:	4604      	mov	r4, r0
 8004f92:	460d      	mov	r5, r1
 8004f94:	4640      	mov	r0, r8
 8004f96:	4649      	mov	r1, r9
 8004f98:	f7fb fab0 	bl	80004fc <__aeabi_dmul>
 8004f9c:	e0a5      	b.n	80050ea <__ieee754_log+0x29a>
 8004f9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fa2:	f7fb f8f5 	bl	8000190 <__adddf3>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4650      	mov	r0, sl
 8004fac:	4659      	mov	r1, fp
 8004fae:	f7fb fbcf 	bl	8000750 <__aeabi_ddiv>
 8004fb2:	e9cd 0100 	strd	r0, r1, [sp]
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f7fb fa36 	bl	8000428 <__aeabi_i2d>
 8004fbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	f7fb fa98 	bl	80004fc <__aeabi_dmul>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fd4:	f7fb fa92 	bl	80004fc <__aeabi_dmul>
 8004fd8:	a363      	add	r3, pc, #396	; (adr r3, 8005168 <__ieee754_log+0x318>)
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	4680      	mov	r8, r0
 8004fe0:	4689      	mov	r9, r1
 8004fe2:	f7fb fa8b 	bl	80004fc <__aeabi_dmul>
 8004fe6:	a362      	add	r3, pc, #392	; (adr r3, 8005170 <__ieee754_log+0x320>)
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	f7fb f8d0 	bl	8000190 <__adddf3>
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	f7fb fa82 	bl	80004fc <__aeabi_dmul>
 8004ff8:	a35f      	add	r3, pc, #380	; (adr r3, 8005178 <__ieee754_log+0x328>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f7fb f8c7 	bl	8000190 <__adddf3>
 8005002:	4642      	mov	r2, r8
 8005004:	464b      	mov	r3, r9
 8005006:	f7fb fa79 	bl	80004fc <__aeabi_dmul>
 800500a:	a35d      	add	r3, pc, #372	; (adr r3, 8005180 <__ieee754_log+0x330>)
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f7fb f8be 	bl	8000190 <__adddf3>
 8005014:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005018:	f7fb fa70 	bl	80004fc <__aeabi_dmul>
 800501c:	a35a      	add	r3, pc, #360	; (adr r3, 8005188 <__ieee754_log+0x338>)
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005026:	4640      	mov	r0, r8
 8005028:	4649      	mov	r1, r9
 800502a:	f7fb fa67 	bl	80004fc <__aeabi_dmul>
 800502e:	a358      	add	r3, pc, #352	; (adr r3, 8005190 <__ieee754_log+0x340>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f7fb f8ac 	bl	8000190 <__adddf3>
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	f7fb fa5e 	bl	80004fc <__aeabi_dmul>
 8005040:	a355      	add	r3, pc, #340	; (adr r3, 8005198 <__ieee754_log+0x348>)
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f7fb f8a3 	bl	8000190 <__adddf3>
 800504a:	4642      	mov	r2, r8
 800504c:	464b      	mov	r3, r9
 800504e:	f7fb fa55 	bl	80004fc <__aeabi_dmul>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800505a:	f7fb f899 	bl	8000190 <__adddf3>
 800505e:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8005062:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005066:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800506a:	3551      	adds	r5, #81	; 0x51
 800506c:	4335      	orrs	r5, r6
 800506e:	2d00      	cmp	r5, #0
 8005070:	4680      	mov	r8, r0
 8005072:	4689      	mov	r9, r1
 8005074:	dd48      	ble.n	8005108 <__ieee754_log+0x2b8>
 8005076:	2200      	movs	r2, #0
 8005078:	4b4d      	ldr	r3, [pc, #308]	; (80051b0 <__ieee754_log+0x360>)
 800507a:	4650      	mov	r0, sl
 800507c:	4659      	mov	r1, fp
 800507e:	f7fb fa3d 	bl	80004fc <__aeabi_dmul>
 8005082:	4652      	mov	r2, sl
 8005084:	465b      	mov	r3, fp
 8005086:	f7fb fa39 	bl	80004fc <__aeabi_dmul>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4606      	mov	r6, r0
 8005090:	460f      	mov	r7, r1
 8005092:	4640      	mov	r0, r8
 8005094:	4649      	mov	r1, r9
 8005096:	f7fb f87b 	bl	8000190 <__adddf3>
 800509a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800509e:	f7fb fa2d 	bl	80004fc <__aeabi_dmul>
 80050a2:	4680      	mov	r8, r0
 80050a4:	4689      	mov	r9, r1
 80050a6:	b964      	cbnz	r4, 80050c2 <__ieee754_log+0x272>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4630      	mov	r0, r6
 80050ae:	4639      	mov	r1, r7
 80050b0:	f7fb f86c 	bl	800018c <__aeabi_dsub>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4650      	mov	r0, sl
 80050ba:	4659      	mov	r1, fp
 80050bc:	f7fb f866 	bl	800018c <__aeabi_dsub>
 80050c0:	e6d9      	b.n	8004e76 <__ieee754_log+0x26>
 80050c2:	a323      	add	r3, pc, #140	; (adr r3, 8005150 <__ieee754_log+0x300>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050cc:	f7fb fa16 	bl	80004fc <__aeabi_dmul>
 80050d0:	a321      	add	r3, pc, #132	; (adr r3, 8005158 <__ieee754_log+0x308>)
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	4604      	mov	r4, r0
 80050d8:	460d      	mov	r5, r1
 80050da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050de:	f7fb fa0d 	bl	80004fc <__aeabi_dmul>
 80050e2:	4642      	mov	r2, r8
 80050e4:	464b      	mov	r3, r9
 80050e6:	f7fb f853 	bl	8000190 <__adddf3>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4630      	mov	r0, r6
 80050f0:	4639      	mov	r1, r7
 80050f2:	f7fb f84b 	bl	800018c <__aeabi_dsub>
 80050f6:	4652      	mov	r2, sl
 80050f8:	465b      	mov	r3, fp
 80050fa:	f7fb f847 	bl	800018c <__aeabi_dsub>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4620      	mov	r0, r4
 8005104:	4629      	mov	r1, r5
 8005106:	e7d9      	b.n	80050bc <__ieee754_log+0x26c>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4650      	mov	r0, sl
 800510e:	4659      	mov	r1, fp
 8005110:	f7fb f83c 	bl	800018c <__aeabi_dsub>
 8005114:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005118:	f7fb f9f0 	bl	80004fc <__aeabi_dmul>
 800511c:	4606      	mov	r6, r0
 800511e:	460f      	mov	r7, r1
 8005120:	2c00      	cmp	r4, #0
 8005122:	f43f af25 	beq.w	8004f70 <__ieee754_log+0x120>
 8005126:	a30a      	add	r3, pc, #40	; (adr r3, 8005150 <__ieee754_log+0x300>)
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005130:	f7fb f9e4 	bl	80004fc <__aeabi_dmul>
 8005134:	a308      	add	r3, pc, #32	; (adr r3, 8005158 <__ieee754_log+0x308>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	4604      	mov	r4, r0
 800513c:	460d      	mov	r5, r1
 800513e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005142:	e729      	b.n	8004f98 <__ieee754_log+0x148>
 8005144:	2000      	movs	r0, #0
 8005146:	2100      	movs	r1, #0
 8005148:	e695      	b.n	8004e76 <__ieee754_log+0x26>
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w
 8005150:	fee00000 	.word	0xfee00000
 8005154:	3fe62e42 	.word	0x3fe62e42
 8005158:	35793c76 	.word	0x35793c76
 800515c:	3dea39ef 	.word	0x3dea39ef
 8005160:	55555555 	.word	0x55555555
 8005164:	3fd55555 	.word	0x3fd55555
 8005168:	df3e5244 	.word	0xdf3e5244
 800516c:	3fc2f112 	.word	0x3fc2f112
 8005170:	96cb03de 	.word	0x96cb03de
 8005174:	3fc74664 	.word	0x3fc74664
 8005178:	94229359 	.word	0x94229359
 800517c:	3fd24924 	.word	0x3fd24924
 8005180:	55555593 	.word	0x55555593
 8005184:	3fe55555 	.word	0x3fe55555
 8005188:	d078c69f 	.word	0xd078c69f
 800518c:	3fc39a09 	.word	0x3fc39a09
 8005190:	1d8e78af 	.word	0x1d8e78af
 8005194:	3fcc71c5 	.word	0x3fcc71c5
 8005198:	9997fa04 	.word	0x9997fa04
 800519c:	3fd99999 	.word	0x3fd99999
 80051a0:	c3500000 	.word	0xc3500000
 80051a4:	43500000 	.word	0x43500000
 80051a8:	7fefffff 	.word	0x7fefffff
 80051ac:	3ff00000 	.word	0x3ff00000
 80051b0:	3fe00000 	.word	0x3fe00000

080051b4 <matherr>:
 80051b4:	2000      	movs	r0, #0
 80051b6:	4770      	bx	lr

080051b8 <nan>:
 80051b8:	2000      	movs	r0, #0
 80051ba:	4901      	ldr	r1, [pc, #4]	; (80051c0 <nan+0x8>)
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	7ff80000 	.word	0x7ff80000

080051c4 <_init>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr

080051d0 <_fini>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr
