
sensorless_foc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007a78  08007a78  00008a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b0c  08007b0c  000096e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007b0c  08007b0c  00008b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b14  08007b14  000096e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b14  08007b14  00008b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b18  08007b18  00008b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e4  20000000  08007b1c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  200006e4  08008200  000096e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b04  08008200  00009b04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000096e4  2**0
                  CONTENTS, READONLY
 12 .debug_line   00042936  00000000  00000000  00009714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000009b  00000000  00000000  0004c04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0005473a  00000000  00000000  0004c0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008503  00000000  00000000  000a081f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f88  00000000  00000000  000a8d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fca3e  00000000  00000000  000aacb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002e56  00000000  00000000  001a76ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001ad7e  00000000  00000000  001aa544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b950  00000000  00000000  001c52c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001f0c12  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000050e4  00000000  00000000  001f0c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200006e4 	.word	0x200006e4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007a60 	.word	0x08007a60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200006e8 	.word	0x200006e8
 8000214:	08007a60 	.word	0x08007a60

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000544:	480d      	ldr	r0, [pc, #52]	@ (800057c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000546:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000548:	480d      	ldr	r0, [pc, #52]	@ (8000580 <LoopForever+0x6>)
  ldr r1, =_edata
 800054a:	490e      	ldr	r1, [pc, #56]	@ (8000584 <LoopForever+0xa>)
  ldr r2, =_sidata
 800054c:	4a0e      	ldr	r2, [pc, #56]	@ (8000588 <LoopForever+0xe>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000550:	e002      	b.n	8000558 <LoopCopyDataInit>

08000552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000556:	3304      	adds	r3, #4

08000558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800055c:	d3f9      	bcc.n	8000552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055e:	4a0b      	ldr	r2, [pc, #44]	@ (800058c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000560:	4c0b      	ldr	r4, [pc, #44]	@ (8000590 <LoopForever+0x16>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000564:	e001      	b.n	800056a <LoopFillZerobss>

08000566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000568:	3204      	adds	r2, #4

0800056a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800056c:	d3fb      	bcc.n	8000566 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800056e:	f002 ff23 	bl	80033b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000572:	f007 fa51 	bl	8007a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000576:	f000 f86f 	bl	8000658 <main>

0800057a <LoopForever>:

LoopForever:
    b LoopForever
 800057a:	e7fe      	b.n	800057a <LoopForever>
  ldr   r0, =_estack
 800057c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000584:	200006e4 	.word	0x200006e4
  ldr r2, =_sidata
 8000588:	08007b1c 	.word	0x08007b1c
  ldr r2, =_sbss
 800058c:	200006e4 	.word	0x200006e4
  ldr r4, =_ebss
 8000590:	20000b04 	.word	0x20000b04

08000594 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <BusFault_Handler>
	...

08000598 <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8000598:	4a02      	ldr	r2, [pc, #8]	@ (80005a4 <DAC_Init+0xc>)
 800059a:	6813      	ldr	r3, [r2, #0]
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6013      	str	r3, [r2, #0]
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{
  /* Enable DAC Channel1 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
}
 80005a2:	4770      	bx	lr
 80005a4:	50000800 	.word	0x50000800

080005a8 <DAC_Exec>:
  *         variables will be provided in the related output channels. This is
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 80005a8:	b508      	push	{r3, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;

  bCh_var = pDacHandle->bChannel_variable[DAC_CH0];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 80005aa:	2200      	movs	r2, #0
 80005ac:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 80005b0:	f002 fbce 	bl	8002d50 <UI_GetReg>
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80005b4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 80005b8:	b200      	sxth	r0, r0
 80005ba:	f8d1 380c 	ldr.w	r3, [r1, #2060]	@ 0x80c
  SET_BIT(DACx->SWTRIGR,
 80005be:	4a06      	ldr	r2, [pc, #24]	@ (80005d8 <DAC_Exec+0x30>)
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80005c0:	f36f 130f 	bfc	r3, #4, #12
 80005c4:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
 80005c8:	4318      	orrs	r0, r3
 80005ca:	f8c1 080c 	str.w	r0, [r1, #2060]	@ 0x80c
  SET_BIT(DACx->SWTRIGR,
 80005ce:	6853      	ldr	r3, [r2, #4]
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6053      	str	r3, [r2, #4]
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_1);
}
 80005d6:	bd08      	pop	{r3, pc}
 80005d8:	50000800 	.word	0x50000800
 80005dc:	00000000 	.word	0x00000000

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b510      	push	{r4, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e4:	2238      	movs	r2, #56	@ 0x38
 80005e6:	2100      	movs	r1, #0
 80005e8:	a806      	add	r0, sp, #24
 80005ea:	f007 fa0d 	bl	8007a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ee:	2000      	movs	r0, #0
 80005f0:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80005f4:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80005f8:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005fa:	f003 fef1 	bl	80043e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fe:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000650 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000602:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000608:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800060a:	2155      	movs	r1, #85	@ 0x55
 800060c:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000614:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000618:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061c:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f003 ff58 	bl	80044d4 <HAL_RCC_OscConfig>
 8000624:	b108      	cbz	r0, 800062a <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000626:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <SystemClock_Config+0x48>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800062a:	2104      	movs	r1, #4
 800062c:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000630:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063e:	f004 f9c3 	bl	80049c8 <HAL_RCC_ClockConfig>
 8000642:	b108      	cbz	r0, 8000648 <SystemClock_Config+0x68>
 8000644:	b672      	cpsid	i
  while (1)
 8000646:	e7fe      	b.n	8000646 <SystemClock_Config+0x66>
  HAL_RCC_EnableCSS();
 8000648:	f004 faec 	bl	8004c24 <HAL_RCC_EnableCSS>
}
 800064c:	b014      	add	sp, #80	@ 0x50
 800064e:	bd10      	pop	{r4, pc}
 8000650:	00000001 	.word	0x00000001
 8000654:	00010000 	.word	0x00010000

08000658 <main>:
{
 8000658:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2400      	movs	r4, #0
{
 800065e:	b0a5      	sub	sp, #148	@ 0x94
  HAL_Init();
 8000660:	f002 feda 	bl	8003418 <HAL_Init>
  SystemClock_Config();
 8000664:	f7ff ffbc 	bl	80005e0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066c:	4ba1      	ldr	r3, [pc, #644]	@ (80008f4 <main+0x29c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	9419      	str	r4, [sp, #100]	@ 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000670:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  hadc1.Instance = ADC1;
 8000672:	4da1      	ldr	r5, [pc, #644]	@ (80008f8 <main+0x2a0>)
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000674:	48a1      	ldr	r0, [pc, #644]	@ (80008fc <main+0x2a4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	f042 0204 	orr.w	r2, r2, #4
 800067a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800067c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800067e:	f002 0204 	and.w	r2, r2, #4
 8000682:	9202      	str	r2, [sp, #8]
 8000684:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000688:	f042 0220 	orr.w	r2, r2, #32
 800068c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800068e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000690:	f002 0220 	and.w	r2, r2, #32
 8000694:	9203      	str	r2, [sp, #12]
 8000696:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800069a:	f042 0201 	orr.w	r2, r2, #1
 800069e:	64da      	str	r2, [r3, #76]	@ 0x4c
 80006a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80006a2:	f002 0201 	and.w	r2, r2, #1
 80006a6:	9204      	str	r2, [sp, #16]
 80006a8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80006ac:	f042 0202 	orr.w	r2, r2, #2
 80006b0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80006b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80006b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b8:	f003 0302 	and.w	r3, r3, #2
 80006bc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80006be:	9115      	str	r1, [sp, #84]	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006c4:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c6:	9316      	str	r3, [sp, #88]	@ 0x58
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	9a05      	ldr	r2, [sp, #20]
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f003 fccb 	bl	8004064 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006ce:	4621      	mov	r1, r4
 80006d0:	223c      	movs	r2, #60	@ 0x3c
 80006d2:	a815      	add	r0, sp, #84	@ 0x54
  ADC_MultiModeTypeDef multimode = {0};
 80006d4:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 80006d8:	9410      	str	r4, [sp, #64]	@ 0x40
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006da:	f44f 2800 	mov.w	r8, #524288	@ 0x80000
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006de:	f007 f993 	bl	8007a08 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006e2:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e6:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ea:	60ac      	str	r4, [r5, #8]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ec:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ee:	f885 4024 	strb.w	r4, [r5, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f2:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f6:	63ec      	str	r4, [r5, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006f8:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000700:	2604      	movs	r6, #4
  hadc1.Init.NbrOfConversion = 1;
 8000702:	2401      	movs	r4, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000706:	e9c5 3800 	strd	r3, r8, [r5]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800070a:	60ef      	str	r7, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070c:	61ae      	str	r6, [r5, #24]
  hadc1.Init.NbrOfConversion = 1;
 800070e:	622c      	str	r4, [r5, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000710:	f002 feb6 	bl	8003480 <HAL_ADC_Init>
 8000714:	b108      	cbz	r0, 800071a <main+0xc2>
 8000716:	b672      	cpsid	i
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0xc0>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800071a:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800071c:	a90e      	add	r1, sp, #56	@ 0x38
 800071e:	4628      	mov	r0, r5
 8000720:	f003 faa4 	bl	8003c6c <HAL_ADCEx_MultiModeConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	b108      	cbz	r0, 800072c <main+0xd4>
 8000728:	b672      	cpsid	i
  while (1)
 800072a:	e7fe      	b.n	800072a <main+0xd2>
  sConfigInjected.InjectedOffset = 0;
 800072c:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000730:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000734:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000738:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800073c:	4b70      	ldr	r3, [pc, #448]	@ (8000900 <main+0x2a8>)
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800073e:	9417      	str	r4, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000740:	a915      	add	r1, sp, #84	@ 0x54
 8000742:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000744:	f04f 0b80 	mov.w	fp, #128	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000748:	f04f 0a09 	mov.w	sl, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800074c:	f04f 097f 	mov.w	r9, #127	@ 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000750:	e9cd bb1f 	strd	fp, fp, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000754:	e9cd 3a15 	strd	r3, sl, [sp, #84]	@ 0x54
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000758:	941d      	str	r4, [sp, #116]	@ 0x74
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800075a:	f8cd 9060 	str.w	r9, [sp, #96]	@ 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800075e:	f002 ff89 	bl	8003674 <HAL_ADCEx_InjectedConfigChannel>
 8000762:	4601      	mov	r1, r0
 8000764:	b108      	cbz	r0, 800076a <main+0x112>
 8000766:	b672      	cpsid	i
  while (1)
 8000768:	e7fe      	b.n	8000768 <main+0x110>
  hadc2.Instance = ADC2;
 800076a:	4d66      	ldr	r5, [pc, #408]	@ (8000904 <main+0x2ac>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800076c:	9001      	str	r0, [sp, #4]
 800076e:	223c      	movs	r2, #60	@ 0x3c
 8000770:	a815      	add	r0, sp, #84	@ 0x54
 8000772:	f007 f949 	bl	8007a08 <memset>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000776:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000778:	4b63      	ldr	r3, [pc, #396]	@ (8000908 <main+0x2b0>)
 800077a:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800077c:	4628      	mov	r0, r5
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800077e:	e9c5 1104 	strd	r1, r1, [r5, #16]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000782:	f8c5 8004 	str.w	r8, [r5, #4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000786:	60ef      	str	r7, [r5, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000788:	60a9      	str	r1, [r5, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078a:	61ae      	str	r6, [r5, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800078c:	83a9      	strh	r1, [r5, #28]
  hadc2.Init.NbrOfConversion = 1;
 800078e:	622c      	str	r4, [r5, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000790:	f885 1024 	strb.w	r1, [r5, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000794:	f885 1038 	strb.w	r1, [r5, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000798:	63e9      	str	r1, [r5, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800079a:	f885 1040 	strb.w	r1, [r5, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800079e:	f002 fe6f 	bl	8003480 <HAL_ADC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b108      	cbz	r0, 80007aa <main+0x152>
 80007a6:	b672      	cpsid	i
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x150>
  sConfigInjected.InjectedOffset = 0;
 80007aa:	931a      	str	r3, [sp, #104]	@ 0x68
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007ac:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
  sConfigInjected.QueueInjectedContext = DISABLE;
 80007b0:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80007b4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007b8:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80007ba:	4b54      	ldr	r3, [pc, #336]	@ (800090c <main+0x2b4>)
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80007bc:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007c0:	a915      	add	r1, sp, #84	@ 0x54
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80007c2:	e9cd 9618 	strd	r9, r6, [sp, #96]	@ 0x60
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80007c6:	e9cd bb1f 	strd	fp, fp, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80007ca:	9417      	str	r4, [sp, #92]	@ 0x5c
  sConfigInjected.InjectedNbrOfConversion = 1;
 80007cc:	941d      	str	r4, [sp, #116]	@ 0x74
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80007ce:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007d0:	f002 ff50 	bl	8003674 <HAL_ADCEx_InjectedConfigChannel>
 80007d4:	b108      	cbz	r0, 80007da <main+0x182>
 80007d6:	b672      	cpsid	i
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <main+0x180>
  hcordic.Instance = CORDIC;
 80007da:	484d      	ldr	r0, [pc, #308]	@ (8000910 <main+0x2b8>)
 80007dc:	4b4d      	ldr	r3, [pc, #308]	@ (8000914 <main+0x2bc>)
 80007de:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80007e0:	f003 faa8 	bl	8003d34 <HAL_CORDIC_Init>
 80007e4:	4601      	mov	r1, r0
 80007e6:	b108      	cbz	r0, 80007ec <main+0x194>
 80007e8:	b672      	cpsid	i
  while (1)
 80007ea:	e7fe      	b.n	80007ea <main+0x192>
  hdac1.Instance = DAC1;
 80007ec:	4d4a      	ldr	r5, [pc, #296]	@ (8000918 <main+0x2c0>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80007ee:	2230      	movs	r2, #48	@ 0x30
 80007f0:	a815      	add	r0, sp, #84	@ 0x54
 80007f2:	f007 f909 	bl	8007a08 <memset>
  hdac1.Instance = DAC1;
 80007f6:	4b49      	ldr	r3, [pc, #292]	@ (800091c <main+0x2c4>)
 80007f8:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007fa:	4628      	mov	r0, r5
 80007fc:	f003 fb30 	bl	8003e60 <HAL_DAC_Init>
 8000800:	4602      	mov	r2, r0
 8000802:	b108      	cbz	r0, 8000808 <main+0x1b0>
 8000804:	b672      	cpsid	i
  while (1)
 8000806:	e7fe      	b.n	8000806 <main+0x1ae>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000808:	2302      	movs	r3, #2
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800080a:	4628      	mov	r0, r5
 800080c:	a915      	add	r1, sp, #84	@ 0x54
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800080e:	e9cd 421b 	strd	r4, r2, [sp, #108]	@ 0x6c
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000812:	f8ad 2058 	strh.w	r2, [sp, #88]	@ 0x58
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000816:	9217      	str	r2, [sp, #92]	@ 0x5c
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000818:	9219      	str	r2, [sp, #100]	@ 0x64
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800081a:	9315      	str	r3, [sp, #84]	@ 0x54
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800081c:	9318      	str	r3, [sp, #96]	@ 0x60
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800081e:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000820:	f003 fb34 	bl	8003e8c <HAL_DAC_ConfigChannel>
 8000824:	4605      	mov	r5, r0
 8000826:	b108      	cbz	r0, 800082c <main+0x1d4>
 8000828:	b672      	cpsid	i
  while (1)
 800082a:	e7fe      	b.n	800082a <main+0x1d2>
  htim1.Instance = TIM1;
 800082c:	4e3c      	ldr	r6, [pc, #240]	@ (8000920 <main+0x2c8>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800082e:	9009      	str	r0, [sp, #36]	@ 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000830:	4601      	mov	r1, r0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000832:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 8000836:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 800083a:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800083e:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8000842:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800084a:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800084c:	9014      	str	r0, [sp, #80]	@ 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084e:	2234      	movs	r2, #52	@ 0x34
 8000850:	a815      	add	r0, sp, #84	@ 0x54
 8000852:	f007 f8d9 	bl	8007a08 <memset>
  htim1.Instance = TIM1;
 8000856:	4b33      	ldr	r3, [pc, #204]	@ (8000924 <main+0x2cc>)
 8000858:	6033      	str	r3, [r6, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800085a:	2120      	movs	r1, #32
 800085c:	f44f 53a6 	mov.w	r3, #5312	@ 0x14c0
 8000860:	e9c6 1302 	strd	r1, r3, [r6, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000864:	4630      	mov	r0, r6
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000866:	f44f 7380 	mov.w	r3, #256	@ 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800086a:	6174      	str	r4, [r6, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800086c:	6075      	str	r5, [r6, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	61b5      	str	r5, [r6, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000870:	6133      	str	r3, [r6, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000872:	f004 fbeb 	bl	800504c <HAL_TIM_Base_Init>
 8000876:	b108      	cbz	r0, 800087c <main+0x224>
 8000878:	b672      	cpsid	i
  while (1)
 800087a:	e7fe      	b.n	800087a <main+0x222>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800087c:	4630      	mov	r0, r6
 800087e:	f004 fc5d 	bl	800513c <HAL_TIM_PWM_Init>
 8000882:	b108      	cbz	r0, 8000888 <main+0x230>
 8000884:	b672      	cpsid	i
  while (1)
 8000886:	e7fe      	b.n	8000886 <main+0x22e>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000888:	2306      	movs	r3, #6
 800088a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800088c:	4824      	ldr	r0, [pc, #144]	@ (8000920 <main+0x2c8>)
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800088e:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000890:	a909      	add	r1, sp, #36	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000892:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000894:	f004 fcc8 	bl	8005228 <HAL_TIM_SlaveConfigSynchro>
 8000898:	b108      	cbz	r0, 800089e <main+0x246>
 800089a:	b672      	cpsid	i
  while (1)
 800089c:	e7fe      	b.n	800089c <main+0x244>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800089e:	2470      	movs	r4, #112	@ 0x70
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008a0:	e9cd 4006 	strd	r4, r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a6:	a906      	add	r1, sp, #24
 80008a8:	481d      	ldr	r0, [pc, #116]	@ (8000920 <main+0x2c8>)
 80008aa:	f004 fe89 	bl	80055c0 <HAL_TIMEx_MasterConfigSynchronization>
 80008ae:	4602      	mov	r2, r0
 80008b0:	b108      	cbz	r0, 80008b6 <main+0x25e>
 80008b2:	b672      	cpsid	i
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <main+0x25c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b6:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 80008b8:	e9cd 300e 	strd	r3, r0, [sp, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008bc:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008c0:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c4:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c6:	a90e      	add	r1, sp, #56	@ 0x38
 80008c8:	4815      	ldr	r0, [pc, #84]	@ (8000920 <main+0x2c8>)
 80008ca:	f004 fd93 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 80008ce:	b108      	cbz	r0, 80008d4 <main+0x27c>
 80008d0:	b672      	cpsid	i
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <main+0x27a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008d4:	4812      	ldr	r0, [pc, #72]	@ (8000920 <main+0x2c8>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	a90e      	add	r1, sp, #56	@ 0x38
 80008da:	f004 fd8b 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 80008de:	b108      	cbz	r0, 80008e4 <main+0x28c>
 80008e0:	b672      	cpsid	i
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <main+0x28a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008e4:	480e      	ldr	r0, [pc, #56]	@ (8000920 <main+0x2c8>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	a90e      	add	r1, sp, #56	@ 0x38
 80008ea:	f004 fd83 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 80008ee:	b1d8      	cbz	r0, 8000928 <main+0x2d0>
 80008f0:	b672      	cpsid	i
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <main+0x29a>
 80008f4:	40021000 	.word	0x40021000
 80008f8:	20000884 	.word	0x20000884
 80008fc:	48000800 	.word	0x48000800
 8000900:	04300002 	.word	0x04300002
 8000904:	20000818 	.word	0x20000818
 8000908:	50000100 	.word	0x50000100
 800090c:	08600004 	.word	0x08600004
 8000910:	200007f0 	.word	0x200007f0
 8000914:	40020c00 	.word	0x40020c00
 8000918:	200007dc 	.word	0x200007dc
 800091c:	50000800 	.word	0x50000800
 8000920:	20000790 	.word	0x20000790
 8000924:	40012c00 	.word	0x40012c00
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000928:	4841      	ldr	r0, [pc, #260]	@ (8000a30 <main+0x3d8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800092a:	940e      	str	r4, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800092c:	220c      	movs	r2, #12
 800092e:	a90e      	add	r1, sp, #56	@ 0x38
 8000930:	f004 fd60 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	b108      	cbz	r0, 800093c <main+0x2e4>
 8000938:	b672      	cpsid	i
  while (1)
 800093a:	e7fe      	b.n	800093a <main+0x2e2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800093c:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000940:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000944:	e9cd 4215 	strd	r4, r2, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000948:	f44f 7080 	mov.w	r0, #256	@ 0x100
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 800094c:	2244      	movs	r2, #68	@ 0x44
 800094e:	e9cd 0217 	strd	r0, r2, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000952:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000956:	e9cd 301d 	strd	r3, r0, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2Filter = 3;
 800095a:	2203      	movs	r2, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800095c:	4834      	ldr	r0, [pc, #208]	@ (8000a30 <main+0x3d8>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800095e:	9321      	str	r3, [sp, #132]	@ 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000960:	a915      	add	r1, sp, #84	@ 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000962:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
 8000966:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800096a:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800096e:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000972:	f004 fe77 	bl	8005664 <HAL_TIMEx_ConfigBreakDeadTime>
 8000976:	4605      	mov	r5, r0
 8000978:	b108      	cbz	r0, 800097e <main+0x326>
 800097a:	b672      	cpsid	i
  while (1)
 800097c:	e7fe      	b.n	800097c <main+0x324>
  huart3.Instance = USART3;
 800097e:	4c2d      	ldr	r4, [pc, #180]	@ (8000a34 <main+0x3dc>)
  HAL_TIM_MspPostInit(&htim1);
 8000980:	482b      	ldr	r0, [pc, #172]	@ (8000a30 <main+0x3d8>)
 8000982:	f001 fda1 	bl	80024c8 <HAL_TIM_MspPostInit>
  huart3.Instance = USART3;
 8000986:	492c      	ldr	r1, [pc, #176]	@ (8000a38 <main+0x3e0>)
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000988:	62a5      	str	r5, [r4, #40]	@ 0x28
  huart3.Init.BaudRate = 9600;
 800098a:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart3.Init.Mode = UART_MODE_TX_RX;
 800098e:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000990:	4620      	mov	r0, r4
  huart3.Init.BaudRate = 9600;
 8000992:	e9c4 1200 	strd	r1, r2, [r4]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000996:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800099a:	e9c4 5304 	strd	r5, r3, [r4, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800099e:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a2:	e9c4 5508 	strd	r5, r5, [r4, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a6:	f005 f8b3 	bl	8005b10 <HAL_UART_Init>
 80009aa:	4601      	mov	r1, r0
 80009ac:	b108      	cbz	r0, 80009b2 <main+0x35a>
 80009ae:	b672      	cpsid	i
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <main+0x358>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b2:	4620      	mov	r0, r4
 80009b4:	f005 f936 	bl	8005c24 <HAL_UARTEx_SetTxFifoThreshold>
 80009b8:	4601      	mov	r1, r0
 80009ba:	b108      	cbz	r0, 80009c0 <main+0x368>
 80009bc:	b672      	cpsid	i
  while (1)
 80009be:	e7fe      	b.n	80009be <main+0x366>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	4620      	mov	r0, r4
 80009c2:	f005 f971 	bl	8005ca8 <HAL_UARTEx_SetRxFifoThreshold>
 80009c6:	b108      	cbz	r0, 80009cc <main+0x374>
 80009c8:	b672      	cpsid	i
  while (1)
 80009ca:	e7fe      	b.n	80009ca <main+0x372>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009cc:	4819      	ldr	r0, [pc, #100]	@ (8000a34 <main+0x3dc>)
 80009ce:	f005 f90b 	bl	8005be8 <HAL_UARTEx_DisableFifoMode>
 80009d2:	4604      	mov	r4, r0
 80009d4:	b108      	cbz	r0, 80009da <main+0x382>
 80009d6:	b672      	cpsid	i
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <main+0x380>
  MX_MotorControl_Init();
 80009da:	f001 f9cf 	bl	8001d7c <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 80009de:	2201      	movs	r2, #1
 80009e0:	2104      	movs	r1, #4
 80009e2:	2018      	movs	r0, #24
 80009e4:	f003 f9d2 	bl	8003d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80009e8:	2018      	movs	r0, #24
 80009ea:	f003 fa0b 	bl	8003e04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80009ee:	4622      	mov	r2, r4
 80009f0:	4621      	mov	r1, r4
 80009f2:	2019      	movs	r0, #25
 80009f4:	f003 f9ca 	bl	8003d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009f8:	2019      	movs	r0, #25
 80009fa:	f003 fa03 	bl	8003e04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80009fe:	4622      	mov	r2, r4
 8000a00:	2102      	movs	r1, #2
 8000a02:	2012      	movs	r0, #18
 8000a04:	f003 f9c2 	bl	8003d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a08:	2012      	movs	r0, #18
 8000a0a:	f003 f9fb 	bl	8003e04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART3_IRQn, 3, 1);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2103      	movs	r1, #3
 8000a12:	2027      	movs	r0, #39	@ 0x27
 8000a14:	f003 f9ba 	bl	8003d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a18:	2027      	movs	r0, #39	@ 0x27
 8000a1a:	f003 f9f3 	bl	8003e04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000a1e:	2028      	movs	r0, #40	@ 0x28
 8000a20:	4622      	mov	r2, r4
 8000a22:	2103      	movs	r1, #3
 8000a24:	f003 f9b2 	bl	8003d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a28:	2028      	movs	r0, #40	@ 0x28
 8000a2a:	f003 f9eb 	bl	8003e04 <HAL_NVIC_EnableIRQ>
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <main+0x3d6>
 8000a30:	20000790 	.word	0x20000790
 8000a34:	20000700 	.word	0x20000700
 8000a38:	40004800 	.word	0x40004800

08000a3c <Error_Handler>:
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <Error_Handler+0x2>

08000a40 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000a40:	4b01      	ldr	r3, [pc, #4]	@ (8000a48 <MC_StartMotor1+0x8>)
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	f000 b83a 	b.w	8000abc <MCI_StartMotor>
 8000a48:	200009d0 	.word	0x200009d0

08000a4c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8000a4c:	4b01      	ldr	r3, [pc, #4]	@ (8000a54 <MC_StopMotor1+0x8>)
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	f000 b83e 	b.w	8000ad0 <MCI_StopMotor>
 8000a54:	200009d0 	.word	0x200009d0

08000a58 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000a58:	4b01      	ldr	r3, [pc, #4]	@ (8000a60 <MC_GetSTMStateMotor1+0x8>)
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	f000 b87c 	b.w	8000b58 <MCI_GetSTMState>
 8000a60:	200009d0 	.word	0x200009d0

08000a64 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000a64:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 8000a68:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8000a6c:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000a6e:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000a72:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000a76:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000a7a:	f880 c018 	strb.w	ip, [r0, #24]
}
 8000a7e:	4770      	bx	lr

08000a80 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000a80:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a84:	f240 1301 	movw	r3, #257	@ 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000a88:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000a8c:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000a8e:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a90:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000a92:	4770      	bx	lr

08000a94 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000a94:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a98:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000a9a:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000a9e:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000aa0:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000aa2:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000aa8:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000aaa:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000aac:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000aae:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000ab0:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ab4:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000ab6:	b002      	add	sp, #8
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000abc:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000abe:	2103      	movs	r1, #3
{
 8000ac0:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000ac2:	6800      	ldr	r0, [r0, #0]
 8000ac4:	f006 fa2a 	bl	8006f1c <STM_NextState>

  if ( RetVal == true )
 8000ac8:	b108      	cbz	r0, 8000ace <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000aca:	2301      	movs	r3, #1
 8000acc:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000ace:	bd10      	pop	{r4, pc}

08000ad0 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000ad0:	6800      	ldr	r0, [r0, #0]
 8000ad2:	2107      	movs	r1, #7
 8000ad4:	f006 ba22 	b.w	8006f1c <STM_NextState>

08000ad8 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000ad8:	6800      	ldr	r0, [r0, #0]
 8000ada:	f006 ba97 	b.w	800700c <STM_FaultAcknowledged>
 8000ade:	bf00      	nop

08000ae0 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000ae0:	6800      	ldr	r0, [r0, #0]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	f006 ba1a 	b.w	8006f1c <STM_NextState>

08000ae8 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000ae8:	b1e8      	cbz	r0, 8000b26 <MCI_ExecBufferedCommands+0x3e>
{
 8000aea:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000aec:	7e03      	ldrb	r3, [r0, #24]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	4604      	mov	r4, r0
 8000af2:	d000      	beq.n	8000af6 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000af4:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000af6:	7b01      	ldrb	r1, [r0, #12]
 8000af8:	2902      	cmp	r1, #2
 8000afa:	d015      	beq.n	8000b28 <MCI_ExecBufferedCommands+0x40>
 8000afc:	2903      	cmp	r1, #3
 8000afe:	d024      	beq.n	8000b4a <MCI_ExecBufferedCommands+0x62>
 8000b00:	2901      	cmp	r1, #1
 8000b02:	d11f      	bne.n	8000b44 <MCI_ExecBufferedCommands+0x5c>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000b04:	6883      	ldr	r3, [r0, #8]
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000b0c:	6840      	ldr	r0, [r0, #4]
 8000b0e:	f006 f92d 	bl	8006d6c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000b12:	8ae2      	ldrh	r2, [r4, #22]
 8000b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b18:	6860      	ldr	r0, [r4, #4]
 8000b1a:	f006 f92b 	bl	8006d74 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000b1e:	b188      	cbz	r0, 8000b44 <MCI_ExecBufferedCommands+0x5c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000b20:	2302      	movs	r3, #2
 8000b22:	7623      	strb	r3, [r4, #24]
}
 8000b24:	bd10      	pop	{r4, pc}
 8000b26:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000b28:	6883      	ldr	r3, [r0, #8]
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f883 1024 	strb.w	r1, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000b30:	6840      	ldr	r0, [r0, #4]
 8000b32:	f006 f91b 	bl	8006d6c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000b36:	8ae2      	ldrh	r2, [r4, #22]
 8000b38:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000b3c:	6860      	ldr	r0, [r4, #4]
 8000b3e:	f006 f919 	bl	8006d74 <STC_ExecRamp>
        break;
 8000b42:	e7ec      	b.n	8000b1e <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000b44:	2303      	movs	r3, #3
 8000b46:	7623      	strb	r3, [r4, #24]
}
 8000b48:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000b4a:	6882      	ldr	r2, [r0, #8]
 8000b4c:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000b50:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000b54:	6113      	str	r3, [r2, #16]
      if ( commandHasBeenExecuted )
 8000b56:	e7e3      	b.n	8000b20 <MCI_ExecBufferedCommands+0x38>

08000b58 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000b58:	6800      	ldr	r0, [r0, #0]
 8000b5a:	f006 ba55 	b.w	8007008 <STM_GetState>
 8000b5e:	bf00      	nop

08000b60 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000b60:	7e40      	ldrb	r0, [r0, #25]
 8000b62:	4770      	bx	lr

08000b64 <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8000b64:	7b03      	ldrb	r3, [r0, #12]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d013      	beq.n	8000b92 <MCI_GetImposedMotorDirection+0x2e>
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d009      	beq.n	8000b82 <MCI_GetImposedMotorDirection+0x1e>
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d117      	bne.n	8000ba2 <MCI_GetImposedMotorDirection+0x3e>
  {
    case MCI_EXECSPEEDRAMP:
      if ( pHandle->hFinalSpeed < 0 )
 8000b72:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  int16_t retVal = 1;
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bfb4      	ite	lt
 8000b7a:	f04f 30ff 	movlt.w	r0, #4294967295
 8000b7e:	2001      	movge	r0, #1
 8000b80:	4770      	bx	lr
      {
        retVal = -1;
      }
      break;
    case MCI_SETCURRENTREFERENCES:
      if ( pHandle->Iqdref.q < 0 )
 8000b82:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  int16_t retVal = 1;
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bfb4      	ite	lt
 8000b8a:	f04f 30ff 	movlt.w	r0, #4294967295
 8000b8e:	2001      	movge	r0, #1
 8000b90:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8000b92:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  int16_t retVal = 1;
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bfb4      	ite	lt
 8000b9a:	f04f 30ff 	movlt.w	r0, #4294967295
 8000b9e:	2001      	movge	r0, #1
 8000ba0:	4770      	bx	lr
 8000ba2:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000ba8:	7b03      	ldrb	r3, [r0, #12]
 8000baa:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000bac:	bf0c      	ite	eq
 8000bae:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000bb2:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000bb8:	6840      	ldr	r0, [r0, #4]
 8000bba:	f006 b923 	b.w	8006e04 <STC_StopRamp>
 8000bbe:	bf00      	nop

08000bc0 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000bc0:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000bc2:	6840      	ldr	r0, [r0, #4]
 8000bc4:	f006 f8b8 	bl	8006d38 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000bc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000bcc:	f006 b854 	b.w	8006c78 <SPD_GetAvrgMecSpeedUnit>

08000bd0 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000bd0:	6840      	ldr	r0, [r0, #4]
 8000bd2:	f006 b8bb 	b.w	8006d4c <STC_GetMecSpeedRefUnit>
 8000bd6:	bf00      	nop

08000bd8 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000bd8:	6883      	ldr	r3, [r0, #8]
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	b283      	uxth	r3, r0
 8000bde:	f36f 000f 	bfc	r0, #0, #16
{
 8000be2:	b082      	sub	sp, #8
}
 8000be4:	4318      	orrs	r0, r3
 8000be6:	b002      	add	sp, #8
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000bec:	6883      	ldr	r3, [r0, #8]
 8000bee:	6858      	ldr	r0, [r3, #4]
 8000bf0:	b283      	uxth	r3, r0
 8000bf2:	f36f 000f 	bfc	r0, #0, #16
{
 8000bf6:	b082      	sub	sp, #8
}
 8000bf8:	4318      	orrs	r0, r3
 8000bfa:	b002      	add	sp, #8
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000c00:	6883      	ldr	r3, [r0, #8]
 8000c02:	68d8      	ldr	r0, [r3, #12]
 8000c04:	b283      	uxth	r3, r0
 8000c06:	f36f 000f 	bfc	r0, #0, #16
{
 8000c0a:	b082      	sub	sp, #8
}
 8000c0c:	4318      	orrs	r0, r3
 8000c0e:	b002      	add	sp, #8
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000c14:	6883      	ldr	r3, [r0, #8]
 8000c16:	6918      	ldr	r0, [r3, #16]
 8000c18:	b283      	uxth	r3, r0
 8000c1a:	f36f 000f 	bfc	r0, #0, #16
{
 8000c1e:	b082      	sub	sp, #8
}
 8000c20:	4318      	orrs	r0, r3
 8000c22:	b002      	add	sp, #8
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000c28:	6883      	ldr	r3, [r0, #8]
 8000c2a:	f8d3 0016 	ldr.w	r0, [r3, #22]
 8000c2e:	b283      	uxth	r3, r0
 8000c30:	f36f 000f 	bfc	r0, #0, #16
{
 8000c34:	b082      	sub	sp, #8
}
 8000c36:	4318      	orrs	r0, r3
 8000c38:	b002      	add	sp, #8
 8000c3a:	4770      	bx	lr

08000c3c <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000c3c:	6883      	ldr	r3, [r0, #8]
 8000c3e:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8000c42:	b283      	uxth	r3, r0
 8000c44:	f36f 000f 	bfc	r0, #0, #16
{
 8000c48:	b082      	sub	sp, #8
}
 8000c4a:	4318      	orrs	r0, r3
 8000c4c:	b002      	add	sp, #8
 8000c4e:	4770      	bx	lr

08000c50 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000c50:	6883      	ldr	r3, [r0, #8]
}
 8000c52:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000c56:	4770      	bx	lr

08000c58 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	6882      	ldr	r2, [r0, #8]
 8000c5c:	f361 030f 	bfi	r3, r1, #0, #16
 8000c60:	f361 431f 	bfi	r3, r1, #16, #16
 8000c64:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000c6c:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000c6e:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000c72:	f006 f91d 	bl	8006eb0 <STC_GetDefaultIqdref>
 8000c76:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000c7a:	8220      	strh	r0, [r4, #16]
 8000c7c:	8263      	strh	r3, [r4, #18]
}
 8000c7e:	bd10      	pop	{r4, pc}

08000c80 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8000c80:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000c84:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000c88:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000c8c:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000c90:	fb10 f202 	smulbb	r2, r0, r2
 8000c94:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000c98:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8000c9c:	b084      	sub	sp, #16
 8000c9e:	b203      	sxth	r3, r0
  if ( wbeta_tmp > INT16_MAX )
 8000ca0:	da05      	bge.n	8000cae <MCM_Clarke+0x2e>
 8000ca2:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000ca4:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8000ca8:	da0c      	bge.n	8000cc4 <MCM_Clarke+0x44>
 8000caa:	4a09      	ldr	r2, [pc, #36]	@ (8000cd0 <MCM_Clarke+0x50>)
 8000cac:	e001      	b.n	8000cb2 <MCM_Clarke+0x32>
 8000cae:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f363 000f 	bfi	r0, r3, #0, #16
 8000cba:	b293      	uxth	r3, r2
 8000cbc:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <MCM_Clarke+0x50>)
 8000cc6:	b20a      	sxth	r2, r1
 8000cc8:	4282      	cmp	r2, r0
 8000cca:	bfb8      	it	lt
 8000ccc:	4602      	movlt	r2, r0
 8000cce:	e7f0      	b.n	8000cb2 <MCM_Clarke+0x32>
 8000cd0:	ffff8001 	.word	0xffff8001

08000cd4 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <MCM_Trig_Functions+0x18>)
 8000cd6:	4a06      	ldr	r2, [pc, #24]	@ (8000cf0 <MCM_Trig_Functions+0x1c>)
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8000cd8:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
 8000cdc:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
{
 8000ce0:	b082      	sub	sp, #8
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8000ce2:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8000ce4:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8000ce6:	6898      	ldr	r0, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);

}
 8000ce8:	b002      	add	sp, #8
 8000cea:	4770      	bx	lr
 8000cec:	40020c00 	.word	0x40020c00
 8000cf0:	00600040 	.word	0x00600040

08000cf4 <MCM_Park>:
{
 8000cf4:	b530      	push	{r4, r5, lr}
 8000cf6:	4605      	mov	r5, r0
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	f7ff ffe9 	bl	8000cd4 <MCM_Trig_Functions>
 8000d02:	b22d      	sxth	r5, r5
 8000d04:	b201      	sxth	r1, r0
 8000d06:	1424      	asrs	r4, r4, #16
 8000d08:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000d0a:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000d0e:	fb04 3310 	mls	r3, r4, r0, r3
  if ( wqd_tmp > INT16_MAX )
 8000d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d16:	da05      	bge.n	8000d24 <MCM_Park+0x30>
 8000d18:	13da      	asrs	r2, r3, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000d1a:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8000d1e:	da22      	bge.n	8000d66 <MCM_Park+0x72>
 8000d20:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <MCM_Park+0x80>)
 8000d22:	e001      	b.n	8000d28 <MCM_Park+0x34>
 8000d24:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000d28:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000d2c:	fb05 4400 	mla	r4, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8000d30:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000d34:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000d38:	da04      	bge.n	8000d44 <MCM_Park+0x50>
  else if ( wqd_tmp < ( -32768 ) )
 8000d3a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000d3e:	da0c      	bge.n	8000d5a <MCM_Park+0x66>
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MCM_Park+0x80>)
 8000d42:	e001      	b.n	8000d48 <MCM_Park+0x54>
 8000d44:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return ( Output );
 8000d48:	b292      	uxth	r2, r2
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f362 000f 	bfi	r0, r2, #0, #16
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000d56:	b005      	add	sp, #20
 8000d58:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000d5a:	4906      	ldr	r1, [pc, #24]	@ (8000d74 <MCM_Park+0x80>)
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	bfb8      	it	lt
 8000d62:	460b      	movlt	r3, r1
 8000d64:	e7f0      	b.n	8000d48 <MCM_Park+0x54>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000d66:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <MCM_Park+0x80>)
 8000d68:	b212      	sxth	r2, r2
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	bfb8      	it	lt
 8000d6e:	461a      	movlt	r2, r3
 8000d70:	e7da      	b.n	8000d28 <MCM_Park+0x34>
 8000d72:	bf00      	nop
 8000d74:	ffff8001 	.word	0xffff8001

08000d78 <MCM_Rev_Park>:
{
 8000d78:	b530      	push	{r4, r5, lr}
 8000d7a:	4605      	mov	r5, r0
 8000d7c:	b085      	sub	sp, #20
 8000d7e:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000d80:	4608      	mov	r0, r1
 8000d82:	f7ff ffa7 	bl	8000cd4 <MCM_Trig_Functions>
 8000d86:	1424      	asrs	r4, r4, #16
 8000d88:	1402      	asrs	r2, r0, #16
 8000d8a:	b22d      	sxth	r5, r5
 8000d8c:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000d8e:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000d92:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000d96:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000d9a:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8000d9e:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000da2:	2000      	movs	r0, #0
 8000da4:	f363 000f 	bfi	r0, r3, #0, #16
 8000da8:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8000dac:	f364 401f 	bfi	r0, r4, #16, #16
}
 8000db0:	b005      	add	sp, #20
 8000db2:	bd30      	pop	{r4, r5, pc}

08000db4 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	2326      	movs	r3, #38	@ 0x26
 8000db8:	4916      	ldr	r1, [pc, #88]	@ (8000e14 <FOC_Clear+0x60>)
 8000dba:	fb00 f303 	mul.w	r3, r0, r3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	50cc      	str	r4, [r1, r3]
{
 8000dc2:	4605      	mov	r5, r0
 8000dc4:	f103 0208 	add.w	r2, r3, #8
 8000dc8:	1858      	adds	r0, r3, r1
 8000dca:	3310      	adds	r3, #16
 8000dcc:	440a      	add	r2, r1
 8000dce:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000dd0:	4911      	ldr	r1, [pc, #68]	@ (8000e18 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000dd2:	6044      	str	r4, [r0, #4]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000dd4:	6054      	str	r4, [r2, #4]
 8000dd6:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000dd8:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000ddc:	f8c3 400a 	str.w	r4, [r3, #10]
 8000de0:	f8c3 4006 	str.w	r4, [r3, #6]
 8000de4:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000de8:	4621      	mov	r1, r4
 8000dea:	f005 fb9b 	bl	8006524 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <FOC_Clear+0x68>)
 8000df0:	4621      	mov	r1, r4
 8000df2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000df6:	f005 fb95 	bl	8006524 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <FOC_Clear+0x6c>)
 8000dfc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000e00:	f005 ff9c 	bl	8006d3c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000e04:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <FOC_Clear+0x70>)
 8000e06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000e0e:	f005 bd89 	b.w	8006924 <PWMC_SwitchOffPWM>
 8000e12:	bf00      	nop
 8000e14:	2000099c 	.word	0x2000099c
 8000e18:	20000914 	.word	0x20000914
 8000e1c:	20000910 	.word	0x20000910
 8000e20:	2000091c 	.word	0x2000091c
 8000e24:	20000904 	.word	0x20000904

08000e28 <MCboot>:
{
 8000e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8000e2c:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 8001000 <MCboot+0x1d8>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000e30:	4f5b      	ldr	r7, [pc, #364]	@ (8000fa0 <MCboot+0x178>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000e32:	4d5c      	ldr	r5, [pc, #368]	@ (8000fa4 <MCboot+0x17c>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000e34:	f8df 81cc 	ldr.w	r8, [pc, #460]	@ 8001004 <MCboot+0x1dc>
  PID_HandleInit(&PIDIqHandle_M1);
 8000e38:	f8df 91cc 	ldr.w	r9, [pc, #460]	@ 8001008 <MCboot+0x1e0>
  PID_HandleInit(&PIDIdHandle_M1);
 8000e3c:	4e5a      	ldr	r6, [pc, #360]	@ (8000fa8 <MCboot+0x180>)
  NTC_Init(&TempSensorParamsM1);
 8000e3e:	f8df a1cc 	ldr.w	sl, [pc, #460]	@ 800100c <MCboot+0x1e4>
{
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 8000e46:	4658      	mov	r0, fp
{
 8000e48:	e9cd 3104 	strd	r3, r1, [sp, #16]
  STM_Init(&STM[M1]);
 8000e4c:	f006 f83e 	bl	8006ecc <STM_Init>
  bMCBootCompleted = 0;
 8000e50:	4a56      	ldr	r2, [pc, #344]	@ (8000fac <MCboot+0x184>)
  pCLM[M1] = &CircleLimitationM1;
 8000e52:	4b57      	ldr	r3, [pc, #348]	@ (8000fb0 <MCboot+0x188>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000e54:	4857      	ldr	r0, [pc, #348]	@ (8000fb4 <MCboot+0x18c>)
 8000e56:	6038      	str	r0, [r7, #0]
  bMCBootCompleted = 0;
 8000e58:	2400      	movs	r4, #0
 8000e5a:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000e5c:	4a56      	ldr	r2, [pc, #344]	@ (8000fb8 <MCboot+0x190>)
 8000e5e:	601a      	str	r2, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 8000e60:	f005 f8ac 	bl	8005fbc <ICS_Init>
  startTimers();
 8000e64:	f005 fbe0 	bl	8006628 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000e68:	4628      	mov	r0, r5
 8000e6a:	f005 fb47 	bl	80064fc <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000e6e:	f8c8 5000 	str.w	r5, [r8]
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000e72:	4d52      	ldr	r5, [pc, #328]	@ (8000fbc <MCboot+0x194>)
 8000e74:	4b52      	ldr	r3, [pc, #328]	@ (8000fc0 <MCboot+0x198>)
  STO_PLL_Init (&STO_PLL_M1);
 8000e76:	4853      	ldr	r0, [pc, #332]	@ (8000fc4 <MCboot+0x19c>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000e78:	602b      	str	r3, [r5, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8000e7a:	f006 faab 	bl	80073d4 <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8000e7e:	f8d8 1000 	ldr.w	r1, [r8]
 8000e82:	4a50      	ldr	r2, [pc, #320]	@ (8000fc4 <MCboot+0x19c>)
 8000e84:	6828      	ldr	r0, [r5, #0]
 8000e86:	f005 ff3f 	bl	8006d08 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8000e8a:	484f      	ldr	r0, [pc, #316]	@ (8000fc8 <MCboot+0x1a0>)
 8000e8c:	f006 fccc 	bl	8007828 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	9200      	str	r2, [sp, #0]
 8000e94:	6829      	ldr	r1, [r5, #0]
 8000e96:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc8 <MCboot+0x1a0>)
 8000e98:	4b4c      	ldr	r3, [pc, #304]	@ (8000fcc <MCboot+0x1a4>)
 8000e9a:	484d      	ldr	r0, [pc, #308]	@ (8000fd0 <MCboot+0x1a8>)
 8000e9c:	f005 fdf8 	bl	8006a90 <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000ea0:	4648      	mov	r0, r9
 8000ea2:	f005 fb2b 	bl	80064fc <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	f005 fb28 	bl	80064fc <PID_HandleInit>
  pPIDId[M1] = &PIDIdHandle_M1;
 8000eac:	4949      	ldr	r1, [pc, #292]	@ (8000fd4 <MCboot+0x1ac>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000eae:	4b4a      	ldr	r3, [pc, #296]	@ (8000fd8 <MCboot+0x1b0>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8000eb0:	600e      	str	r6, [r1, #0]
  pBusSensorM1 = &VirtualBusVoltageSensorParamsM1;
 8000eb2:	4e4a      	ldr	r6, [pc, #296]	@ (8000fdc <MCboot+0x1b4>)
 8000eb4:	484a      	ldr	r0, [pc, #296]	@ (8000fe0 <MCboot+0x1b8>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000eb6:	f8c3 9000 	str.w	r9, [r3]
  pBusSensorM1 = &VirtualBusVoltageSensorParamsM1;
 8000eba:	6030      	str	r0, [r6, #0]
  VVBS_Init(pBusSensorM1);
 8000ebc:	f006 fc9c 	bl	80077f8 <VVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000ec0:	4848      	ldr	r0, [pc, #288]	@ (8000fe4 <MCboot+0x1bc>)
 8000ec2:	4b49      	ldr	r3, [pc, #292]	@ (8000fe8 <MCboot+0x1c0>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000ec4:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 8001010 <MCboot+0x1e8>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000ec8:	6832      	ldr	r2, [r6, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000eca:	6003      	str	r3, [r0, #0]
  NTC_Init(&TempSensorParamsM1);
 8000ecc:	4650      	mov	r0, sl
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000ece:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000ed2:	f8c3 910c 	str.w	r9, [r3, #268]	@ 0x10c
  NTC_Init(&TempSensorParamsM1);
 8000ed6:	f005 facd 	bl	8006474 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000eda:	4a44      	ldr	r2, [pc, #272]	@ (8000fec <MCboot+0x1c4>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000edc:	4b44      	ldr	r3, [pc, #272]	@ (8000ff0 <MCboot+0x1c8>)
 8000ede:	4845      	ldr	r0, [pc, #276]	@ (8000ff4 <MCboot+0x1cc>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000ee0:	f8c2 a000 	str.w	sl, [r2]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000ee4:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8000ee6:	f005 fd41 	bl	800696c <REMNG_Init>
  FOC_Clear(M1);
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff ff62 	bl	8000db4 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000ef0:	f04f 0a01 	mov.w	sl, #1
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000ef4:	6828      	ldr	r0, [r5, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000ef6:	f889 a024 	strb.w	sl, [r9, #36]	@ 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000efa:	f005 ffd9 	bl	8006eb0 <STC_GetDefaultIqdref>
 8000efe:	f8c9 0010 	str.w	r0, [r9, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000f02:	6828      	ldr	r0, [r5, #0]
 8000f04:	f005 ffd4 	bl	8006eb0 <STC_GetDefaultIqdref>
 8000f08:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000f0c:	464b      	mov	r3, r9
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000f0e:	f8a9 0014 	strh.w	r0, [r9, #20]
  oMCInterface[M1] = & Mci[M1];
 8000f12:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8001014 <MCboot+0x1ec>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000f16:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000f18:	4837      	ldr	r0, [pc, #220]	@ (8000ff8 <MCboot+0x1d0>)
 8000f1a:	f8c9 0000 	str.w	r0, [r9]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000f1e:	4659      	mov	r1, fp
 8000f20:	f7ff fda0 	bl	8000a64 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000f24:	f8d9 1000 	ldr.w	r1, [r9]
 8000f28:	6828      	ldr	r0, [r5, #0]
 8000f2a:	9103      	str	r1, [sp, #12]
 8000f2c:	f005 ffb6 	bl	8006e9c <STC_GetMecSpeedRefUnitDefault>
 8000f30:	4622      	mov	r2, r4
 8000f32:	4601      	mov	r1, r0
 8000f34:	9803      	ldr	r0, [sp, #12]
 8000f36:	f7ff fda3 	bl	8000a80 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8000f3a:	9804      	ldr	r0, [sp, #16]
 8000f3c:	f8d9 3000 	ldr.w	r3, [r9]
 8000f40:	6003      	str	r3, [r0, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000f42:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <MCboot+0x1b0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000f44:	6839      	ldr	r1, [r7, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000f46:	f8d3 c000 	ldr.w	ip, [r3]
  MCT[M1].pPIDId = pPIDId[M1];
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <MCboot+0x1ac>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000f4c:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000f4e:	6818      	ldr	r0, [r3, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000f50:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <MCboot+0x1bc>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000f52:	4d26      	ldr	r5, [pc, #152]	@ (8000fec <MCboot+0x1c4>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000f54:	681f      	ldr	r7, [r3, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000f56:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <MCboot+0x1d4>)
 8000f58:	f8d8 e000 	ldr.w	lr, [r8]
  MCT[M1].pPIDId = pPIDId[M1];
 8000f5c:	6098      	str	r0, [r3, #8]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8000f5e:	481c      	ldr	r0, [pc, #112]	@ (8000fd0 <MCboot+0x1a8>)
 8000f60:	6158      	str	r0, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8000f62:	4818      	ldr	r0, [pc, #96]	@ (8000fc4 <MCboot+0x19c>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000f64:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8000f66:	6198      	str	r0, [r3, #24]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 8000f68:	4817      	ldr	r0, [pc, #92]	@ (8000fc8 <MCboot+0x1a0>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000f6a:	6836      	ldr	r6, [r6, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000f6c:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000f6e:	e9c3 0208 	strd	r0, r2, [r3, #32]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000f72:	e9c3 ec00 	strd	lr, ip, [r3]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000f76:	e9c3 b50a 	strd	fp, r5, [r3, #40]	@ 0x28
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000f7a:	e9c3 440d 	strd	r4, r4, [r3, #52]	@ 0x34
  MCT[M1].pFF = MC_NULL;
 8000f7e:	e9c3 4410 	strd	r4, r4, [r3, #64]	@ 0x40
  MCT[M1].pSCC = MC_NULL;
 8000f82:	e9c3 4412 	strd	r4, r4, [r3, #72]	@ 0x48
  bMCBootCompleted = 1;
 8000f86:	4a09      	ldr	r2, [pc, #36]	@ (8000fac <MCboot+0x184>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000f88:	631e      	str	r6, [r3, #48]	@ 0x30
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000f8a:	63df      	str	r7, [r3, #60]	@ 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000f8c:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8000f8e:	61dc      	str	r4, [r3, #28]
  MCT[M1].pOTT = MC_NULL;
 8000f90:	651c      	str	r4, [r3, #80]	@ 0x50
  pMCTList[M1] = &MCT[M1];
 8000f92:	9905      	ldr	r1, [sp, #20]
  bMCBootCompleted = 1;
 8000f94:	f882 a000 	strb.w	sl, [r2]
  pMCTList[M1] = &MCT[M1];
 8000f98:	600b      	str	r3, [r1, #0]
}
 8000f9a:	b009      	add	sp, #36	@ 0x24
 8000f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fa0:	20000904 	.word	0x20000904
 8000fa4:	20000590 	.word	0x20000590
 8000fa8:	20000538 	.word	0x20000538
 8000fac:	200008f0 	.word	0x200008f0
 8000fb0:	200008fc 	.word	0x200008fc
 8000fb4:	2000041c 	.word	0x2000041c
 8000fb8:	2000013c 	.word	0x2000013c
 8000fbc:	2000091c 	.word	0x2000091c
 8000fc0:	20000504 	.word	0x20000504
 8000fc4:	200002bc 	.word	0x200002bc
 8000fc8:	200003e4 	.word	0x200003e4
 8000fcc:	200002a8 	.word	0x200002a8
 8000fd0:	2000048c 	.word	0x2000048c
 8000fd4:	20000910 	.word	0x20000910
 8000fd8:	20000914 	.word	0x20000914
 8000fdc:	2000090c 	.word	0x2000090c
 8000fe0:	20000274 	.word	0x20000274
 8000fe4:	20000900 	.word	0x20000900
 8000fe8:	200005bc 	.word	0x200005bc
 8000fec:	20000908 	.word	0x20000908
 8000ff0:	200008f8 	.word	0x200008f8
 8000ff4:	200001f0 	.word	0x200001f0
 8000ff8:	20000980 	.word	0x20000980
 8000ffc:	20000928 	.word	0x20000928
 8001000:	20000920 	.word	0x20000920
 8001004:	20000918 	.word	0x20000918
 8001008:	20000564 	.word	0x20000564
 800100c:	20000280 	.word	0x20000280
 8001010:	2000099c 	.word	0x2000099c
 8001014:	2000097c 	.word	0x2000097c

08001018 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 800101c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800101e:	4c08      	ldr	r4, [pc, #32]	@ (8001040 <FOC_CalcCurrRef+0x24>)
 8001020:	2326      	movs	r3, #38	@ 0x26
 8001022:	fb03 4400 	mla	r4, r3, r0, r4
 8001026:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800102a:	b103      	cbz	r3, 800102e <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 800102c:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800102e:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <FOC_CalcCurrRef+0x28>)
 8001030:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001034:	f005 feea 	bl	8006e0c <STC_CalcTorqueReference>
 8001038:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800103a:	8220      	strh	r0, [r4, #16]
}
 800103c:	bd10      	pop	{r4, pc}
 800103e:	bf00      	nop
 8001040:	2000099c 	.word	0x2000099c
 8001044:	2000091c 	.word	0x2000091c

08001048 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001048:	4b01      	ldr	r3, [pc, #4]	@ (8001050 <TSK_SetChargeBootCapDelayM1+0x8>)
 800104a:	8018      	strh	r0, [r3, #0]
}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200008f4 	.word	0x200008f4

08001054 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001056:	8818      	ldrh	r0, [r3, #0]
 8001058:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800105a:	fab0 f080 	clz	r0, r0
 800105e:	0940      	lsrs	r0, r0, #5
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200008f4 	.word	0x200008f4

08001068 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001068:	4b01      	ldr	r3, [pc, #4]	@ (8001070 <TSK_SetStopPermanencyTimeM1+0x8>)
 800106a:	8018      	strh	r0, [r3, #0]
}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200008f2 	.word	0x200008f2

08001074 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001076:	8818      	ldrh	r0, [r3, #0]
 8001078:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800107a:	fab0 f080 	clz	r0, r0
 800107e:	0940      	lsrs	r0, r0, #5
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200008f2 	.word	0x200008f2

08001088 <TSK_MediumFrequencyTaskM1>:
{
 8001088:	b530      	push	{r4, r5, lr}
 800108a:	b083      	sub	sp, #12
  int16_t wAux = 0;
 800108c:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 800108e:	4669      	mov	r1, sp
 8001090:	489c      	ldr	r0, [pc, #624]	@ (8001304 <TSK_MediumFrequencyTaskM1+0x27c>)
  int16_t wAux = 0;
 8001092:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001096:	f006 f8af 	bl	80071f8 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 800109a:	4d9b      	ldr	r5, [pc, #620]	@ (8001308 <TSK_MediumFrequencyTaskM1+0x280>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 800109c:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 800109e:	6828      	ldr	r0, [r5, #0]
 80010a0:	f005 fa8c 	bl	80065bc <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80010a4:	4899      	ldr	r0, [pc, #612]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 80010a6:	f005 ffaf 	bl	8007008 <STM_GetState>
  switch ( StateM1 )
 80010aa:	1ec3      	subs	r3, r0, #3
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d824      	bhi.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
 80010b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80010b4:	005d0049 	.word	0x005d0049
 80010b8:	00bf00a8 	.word	0x00bf00a8
 80010bc:	00cf0011 	.word	0x00cf0011
 80010c0:	002300d9 	.word	0x002300d9
 80010c4:	00230023 	.word	0x00230023
 80010c8:	00230023 	.word	0x00230023
 80010cc:	00e60023 	.word	0x00e60023
 80010d0:	010200f5 	.word	0x010200f5
 80010d4:	0025      	.short	0x0025
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 80010d6:	4b8e      	ldr	r3, [pc, #568]	@ (8001310 <TSK_MediumFrequencyTaskM1+0x288>)
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	f005 f885 	bl	80061e8 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff fe68 	bl	8000db4 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80010e4:	6828      	ldr	r0, [r5, #0]
 80010e6:	f005 f981 	bl	80063ec <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80010ea:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80010ee:	f7ff ffbb 	bl	8001068 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80010f2:	4886      	ldr	r0, [pc, #536]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 80010f4:	2108      	movs	r1, #8
 80010f6:	f005 ff11 	bl	8006f1c <STM_NextState>
}
 80010fa:	b003      	add	sp, #12
 80010fc:	bd30      	pop	{r4, r5, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 80010fe:	4885      	ldr	r0, [pc, #532]	@ (8001314 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001100:	f005 fd48 	bl	8006b94 <RUC_Exec>
 8001104:	4602      	mov	r2, r0
 8001106:	2800      	cmp	r0, #0
 8001108:	f000 80f6 	beq.w	80012f8 <TSK_MediumFrequencyTaskM1+0x270>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 800110c:	4882      	ldr	r0, [pc, #520]	@ (8001318 <TSK_MediumFrequencyTaskM1+0x290>)
 800110e:	a901      	add	r1, sp, #4
 8001110:	f006 fbe0 	bl	80078d4 <VSS_CalcAvrgMecSpeedUnit>
 8001114:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8001116:	4880      	ldr	r0, [pc, #512]	@ (8001318 <TSK_MediumFrequencyTaskM1+0x290>)
 8001118:	f006 fc72 	bl	8007a00 <VSS_TransitionEnded>
        if ( LoopClosed == true )
 800111c:	b90c      	cbnz	r4, 8001122 <TSK_MediumFrequencyTaskM1+0x9a>
 800111e:	2800      	cmp	r0, #0
 8001120:	d0eb      	beq.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001122:	4a7e      	ldr	r2, [pc, #504]	@ (800131c <TSK_MediumFrequencyTaskM1+0x294>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8001124:	4b7e      	ldr	r3, [pc, #504]	@ (8001320 <TSK_MediumFrequencyTaskM1+0x298>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001126:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8001128:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 800112c:	4620      	mov	r0, r4
 800112e:	f005 f9fd 	bl	800652c <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001132:	fb05 f100 	mul.w	r1, r5, r0
 8001136:	4620      	mov	r0, r4
 8001138:	f005 f9f4 	bl	8006524 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 800113c:	2105      	movs	r1, #5
 800113e:	4873      	ldr	r0, [pc, #460]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 8001140:	f005 feec 	bl	8006f1c <STM_NextState>
    break;
 8001144:	e7d9      	b.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8001146:	4b77      	ldr	r3, [pc, #476]	@ (8001324 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	f7ff fd0b 	bl	8000b64 <MCI_GetImposedMotorDirection>
 800114e:	4601      	mov	r1, r0
 8001150:	4870      	ldr	r0, [pc, #448]	@ (8001314 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001152:	f005 fcd9 	bl	8006b08 <RUC_Clear>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 8001156:	4b6e      	ldr	r3, [pc, #440]	@ (8001310 <TSK_MediumFrequencyTaskM1+0x288>)
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	f004 ffd7 	bl	800610c <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800115e:	2014      	movs	r0, #20
 8001160:	f7ff ff72 	bl	8001048 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001164:	2110      	movs	r1, #16
 8001166:	4869      	ldr	r0, [pc, #420]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 8001168:	f005 fed8 	bl	8006f1c <STM_NextState>
    break;
 800116c:	e7c5      	b.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
      if( ! RUC_Exec( &RevUpControlM1 ) )
 800116e:	4869      	ldr	r0, [pc, #420]	@ (8001314 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001170:	f005 fd10 	bl	8006b94 <RUC_Exec>
 8001174:	4602      	mov	r2, r0
 8001176:	2800      	cmp	r0, #0
 8001178:	f000 80b9 	beq.w	80012ee <TSK_MediumFrequencyTaskM1+0x266>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 800117c:	4b6a      	ldr	r3, [pc, #424]	@ (8001328 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	f005 fe44 	bl	8006e0c <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 8001184:	4b66      	ldr	r3, [pc, #408]	@ (8001320 <TSK_MediumFrequencyTaskM1+0x298>)
 8001186:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 800118a:	8218      	strh	r0, [r3, #16]
 800118c:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 800118e:	4862      	ldr	r0, [pc, #392]	@ (8001318 <TSK_MediumFrequencyTaskM1+0x290>)
 8001190:	f10d 0102 	add.w	r1, sp, #2
 8001194:	f006 fb9e 	bl	80078d4 <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 8001198:	485e      	ldr	r0, [pc, #376]	@ (8001314 <TSK_MediumFrequencyTaskM1+0x28c>)
 800119a:	f005 fd33 	bl	8006c04 <RUC_FirstAccelerationStageReached>
 800119e:	2800      	cmp	r0, #0
 80011a0:	d0ab      	beq.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 80011a2:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80011a6:	4857      	ldr	r0, [pc, #348]	@ (8001304 <TSK_MediumFrequencyTaskM1+0x27c>)
 80011a8:	f006 f94e 	bl	8007448 <STO_PLL_IsObserverConverged>
 80011ac:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 80011ae:	485f      	ldr	r0, [pc, #380]	@ (800132c <TSK_MediumFrequencyTaskM1+0x2a4>)
 80011b0:	f7ff fcd8 	bl	8000b64 <MCI_GetImposedMotorDirection>
 80011b4:	b2c1      	uxtb	r1, r0
 80011b6:	4853      	ldr	r0, [pc, #332]	@ (8001304 <TSK_MediumFrequencyTaskM1+0x27c>)
 80011b8:	f006 f9fc 	bl	80075b4 <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 80011bc:	4856      	ldr	r0, [pc, #344]	@ (8001318 <TSK_MediumFrequencyTaskM1+0x290>)
 80011be:	4621      	mov	r1, r4
 80011c0:	f006 fc10 	bl	80079e4 <VSS_SetStartTransition>
      if ( ObserverConverged )
 80011c4:	2c00      	cmp	r4, #0
 80011c6:	d098      	beq.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80011c8:	484e      	ldr	r0, [pc, #312]	@ (8001304 <TSK_MediumFrequencyTaskM1+0x27c>)
 80011ca:	4d55      	ldr	r5, [pc, #340]	@ (8001320 <TSK_MediumFrequencyTaskM1+0x298>)
        REMNG_Init( pREMNG[M1] );
 80011cc:	4c58      	ldr	r4, [pc, #352]	@ (8001330 <TSK_MediumFrequencyTaskM1+0x2a8>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80011ce:	f005 fd4f 	bl	8006c70 <SPD_GetElAngle>
 80011d2:	4601      	mov	r1, r0
 80011d4:	6868      	ldr	r0, [r5, #4]
 80011d6:	f7ff fd8d 	bl	8000cf4 <MCM_Park>
 80011da:	9001      	str	r0, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 80011dc:	6820      	ldr	r0, [r4, #0]
 80011de:	f005 fbc5 	bl	800696c <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 80011e2:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 80011e6:	6820      	ldr	r0, [r4, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f005 fc0b 	bl	8006a04 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 80011ee:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80011f2:	6820      	ldr	r0, [r4, #0]
 80011f4:	2219      	movs	r2, #25
 80011f6:	f005 fc05 	bl	8006a04 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 80011fa:	2113      	movs	r1, #19
 80011fc:	4843      	ldr	r0, [pc, #268]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 80011fe:	f005 fe8d 	bl	8006f1c <STM_NextState>
    break;
 8001202:	e77a      	b.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001204:	4c48      	ldr	r4, [pc, #288]	@ (8001328 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001206:	493f      	ldr	r1, [pc, #252]	@ (8001304 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001208:	6820      	ldr	r0, [r4, #0]
 800120a:	f005 fd93 	bl	8006d34 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff ff02 	bl	8001018 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff ff01 	bl	800101c <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800121a:	2106      	movs	r1, #6
 800121c:	483b      	ldr	r0, [pc, #236]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 800121e:	f005 fe7d 	bl	8006f1c <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001222:	6820      	ldr	r0, [r4, #0]
 8001224:	f005 fe4a 	bl	8006ebc <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001228:	4b3e      	ldr	r3, [pc, #248]	@ (8001324 <TSK_MediumFrequencyTaskM1+0x29c>)
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	f7ff fc5c 	bl	8000ae8 <MCI_ExecBufferedCommands>
    break;
 8001230:	e763      	b.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001232:	4b3c      	ldr	r3, [pc, #240]	@ (8001324 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	f7ff fc57 	bl	8000ae8 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff feee 	bl	800101c <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001240:	2c00      	cmp	r4, #0
 8001242:	f47f af5a 	bne.w	80010fa <TSK_MediumFrequencyTaskM1+0x72>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001246:	4622      	mov	r2, r4
 8001248:	2120      	movs	r1, #32
 800124a:	4830      	ldr	r0, [pc, #192]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 800124c:	f005 fe44 	bl	8006ed8 <STM_FaultProcessing>
 8001250:	e753      	b.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001252:	f7ff ff0f 	bl	8001074 <TSK_StopPermanencyTimeHasElapsedM1>
 8001256:	2800      	cmp	r0, #0
 8001258:	f43f af4f 	beq.w	80010fa <TSK_MediumFrequencyTaskM1+0x72>
      STM_NextState( &STM[M1], STOP_IDLE );
 800125c:	2109      	movs	r1, #9
 800125e:	482b      	ldr	r0, [pc, #172]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 8001260:	f005 fe5c 	bl	8006f1c <STM_NextState>
 8001264:	e749      	b.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8001266:	4b30      	ldr	r3, [pc, #192]	@ (8001328 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001268:	492b      	ldr	r1, [pc, #172]	@ (8001318 <TSK_MediumFrequencyTaskM1+0x290>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f005 fd62 	bl	8006d34 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8001270:	4829      	ldr	r0, [pc, #164]	@ (8001318 <TSK_MediumFrequencyTaskM1+0x290>)
 8001272:	f006 facb 	bl	800780c <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 8001276:	2100      	movs	r1, #0
 8001278:	4824      	ldr	r0, [pc, #144]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 800127a:	f005 fe4f 	bl	8006f1c <STM_NextState>
}
 800127e:	e73c      	b.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001280:	f7ff fee8 	bl	8001054 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001284:	2800      	cmp	r0, #0
 8001286:	f43f af38 	beq.w	80010fa <TSK_MediumFrequencyTaskM1+0x72>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <TSK_MediumFrequencyTaskM1+0x288>)
 800128c:	2100      	movs	r1, #0
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	f005 fb4a 	bl	8006928 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001294:	2111      	movs	r1, #17
 8001296:	481d      	ldr	r0, [pc, #116]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 8001298:	f005 fe40 	bl	8006f1c <STM_NextState>
 800129c:	e72d      	b.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <TSK_MediumFrequencyTaskM1+0x288>)
 80012a0:	2101      	movs	r1, #1
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	f005 fb40 	bl	8006928 <PWMC_CurrentReadingCalibr>
 80012a8:	2800      	cmp	r0, #0
 80012aa:	f43f af26 	beq.w	80010fa <TSK_MediumFrequencyTaskM1+0x72>
      STM_NextState( &STM[M1], CLEAR );
 80012ae:	2112      	movs	r1, #18
 80012b0:	4816      	ldr	r0, [pc, #88]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 80012b2:	f005 fe33 	bl	8006f1c <STM_NextState>
 80012b6:	e720      	b.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80012b8:	481b      	ldr	r0, [pc, #108]	@ (8001328 <TSK_MediumFrequencyTaskM1+0x2a0>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80012ba:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <TSK_MediumFrequencyTaskM1+0x298>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80012bc:	4916      	ldr	r1, [pc, #88]	@ (8001318 <TSK_MediumFrequencyTaskM1+0x290>)
 80012be:	6800      	ldr	r0, [r0, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80012c6:	f005 fd35 	bl	8006d34 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 80012ca:	480e      	ldr	r0, [pc, #56]	@ (8001304 <TSK_MediumFrequencyTaskM1+0x27c>)
 80012cc:	f006 f85c 	bl	8007388 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80012d0:	480e      	ldr	r0, [pc, #56]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 80012d2:	2104      	movs	r1, #4
 80012d4:	f005 fe22 	bl	8006f1c <STM_NextState>
 80012d8:	2800      	cmp	r0, #0
 80012da:	f43f af0e 	beq.w	80010fa <TSK_MediumFrequencyTaskM1+0x72>
      FOC_Clear( M1 );
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff fd68 	bl	8000db4 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <TSK_MediumFrequencyTaskM1+0x288>)
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	f004 ff36 	bl	8006158 <ICS_SwitchOnPWM>
 80012ec:	e705      	b.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 80012ee:	2110      	movs	r1, #16
 80012f0:	4806      	ldr	r0, [pc, #24]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 80012f2:	f005 fdf1 	bl	8006ed8 <STM_FaultProcessing>
 80012f6:	e74a      	b.n	800118e <TSK_MediumFrequencyTaskM1+0x106>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 80012f8:	2110      	movs	r1, #16
 80012fa:	4804      	ldr	r0, [pc, #16]	@ (800130c <TSK_MediumFrequencyTaskM1+0x284>)
 80012fc:	f005 fdec 	bl	8006ed8 <STM_FaultProcessing>
 8001300:	e6fb      	b.n	80010fa <TSK_MediumFrequencyTaskM1+0x72>
 8001302:	bf00      	nop
 8001304:	200002bc 	.word	0x200002bc
 8001308:	20000900 	.word	0x20000900
 800130c:	20000920 	.word	0x20000920
 8001310:	20000904 	.word	0x20000904
 8001314:	2000048c 	.word	0x2000048c
 8001318:	200003e4 	.word	0x200003e4
 800131c:	20000918 	.word	0x20000918
 8001320:	2000099c 	.word	0x2000099c
 8001324:	2000097c 	.word	0x2000097c
 8001328:	2000091c 	.word	0x2000091c
 800132c:	20000980 	.word	0x20000980
 8001330:	200008f8 	.word	0x200008f8

08001334 <MC_Scheduler>:
{
 8001334:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MC_Scheduler+0x48>)
 8001338:	781c      	ldrb	r4, [r3, #0]
 800133a:	2c01      	cmp	r4, #1
 800133c:	d000      	beq.n	8001340 <MC_Scheduler+0xc>
}
 800133e:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001340:	4d0f      	ldr	r5, [pc, #60]	@ (8001380 <MC_Scheduler+0x4c>)
 8001342:	882b      	ldrh	r3, [r5, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	b1ab      	cbz	r3, 8001374 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8001348:	882b      	ldrh	r3, [r5, #0]
 800134a:	3b01      	subs	r3, #1
 800134c:	b29b      	uxth	r3, r3
 800134e:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001350:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <MC_Scheduler+0x50>)
 8001352:	8813      	ldrh	r3, [r2, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	b11b      	cbz	r3, 8001360 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001358:	8813      	ldrh	r3, [r2, #0]
 800135a:	3b01      	subs	r3, #1
 800135c:	b29b      	uxth	r3, r3
 800135e:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001360:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <MC_Scheduler+0x54>)
 8001362:	8813      	ldrh	r3, [r2, #0]
 8001364:	b29b      	uxth	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0e9      	beq.n	800133e <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800136a:	8813      	ldrh	r3, [r2, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	b29b      	uxth	r3, r3
 8001370:	8013      	strh	r3, [r2, #0]
}
 8001372:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001374:	f7ff fe88 	bl	8001088 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001378:	802c      	strh	r4, [r5, #0]
 800137a:	e7e9      	b.n	8001350 <MC_Scheduler+0x1c>
 800137c:	200008f0 	.word	0x200008f0
 8001380:	200008f6 	.word	0x200008f6
 8001384:	200008f4 	.word	0x200008f4
 8001388:	200008f2 	.word	0x200008f2

0800138c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 800138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 8001390:	4b54      	ldr	r3, [pc, #336]	@ (80014e4 <TSK_HighFrequencyTask+0x158>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001392:	4c55      	ldr	r4, [pc, #340]	@ (80014e8 <TSK_HighFrequencyTask+0x15c>)
  if ( STM[M1].bState == SWITCH_OVER )
 8001394:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001396:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 800139a:	b088      	sub	sp, #32
  if ( STM[M1].bState == SWITCH_OVER )
 800139c:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800139e:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 80013a0:	f000 8094 	beq.w	80014cc <TSK_HighFrequencyTask+0x140>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80013a4:	4b51      	ldr	r3, [pc, #324]	@ (80014ec <TSK_HighFrequencyTask+0x160>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80013a6:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 8001510 <TSK_HighFrequencyTask+0x184>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	f005 fcc4 	bl	8006d38 <STC_GetSpeedSensor>
 80013b0:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80013b2:	f005 fc5d 	bl	8006c70 <SPD_GetElAngle>
 80013b6:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 80013b8:	4638      	mov	r0, r7
 80013ba:	f005 fc61 	bl	8006c80 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80013be:	a902      	add	r1, sp, #8
 80013c0:	f8d8 0000 	ldr.w	r0, [r8]
 80013c4:	f005 f990 	bl	80066e8 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 80013c8:	f000 ff40 	bl	800224c <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 80013cc:	f000 fefa 	bl	80021c4 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 80013d0:	9802      	ldr	r0, [sp, #8]
 80013d2:	f7ff fc55 	bl	8000c80 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80013d6:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 80013d8:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80013da:	f7ff fc8b 	bl	8000cf4 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 80013de:	4b44      	ldr	r3, [pc, #272]	@ (80014f0 <TSK_HighFrequencyTask+0x164>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80013e0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80013e4:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80013e6:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80013e8:	1a09      	subs	r1, r1, r0
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	f005 f8a6 	bl	800653c <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80013f0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80013f4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 80013f8:	1ac9      	subs	r1, r1, r3
 80013fa:	4b3e      	ldr	r3, [pc, #248]	@ (80014f4 <TSK_HighFrequencyTask+0x168>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 80013fc:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	f005 f89c 	bl	800653c <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001404:	4b3c      	ldr	r3, [pc, #240]	@ (80014f8 <TSK_HighFrequencyTask+0x16c>)
 8001406:	f8ad 6004 	strh.w	r6, [sp, #4]
 800140a:	f8ad 0006 	strh.w	r0, [sp, #6]
 800140e:	9901      	ldr	r1, [sp, #4]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	f004 fc93 	bl	8005d3c <Circle_Limitation>
 8001416:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001418:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800141a:	9601      	str	r6, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800141c:	f005 fc30 	bl	8006c80 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001420:	4629      	mov	r1, r5
 8001422:	9801      	ldr	r0, [sp, #4]
 8001424:	f7ff fca8 	bl	8000d78 <MCM_Rev_Park>
 8001428:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800142a:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800142e:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001430:	f005 f95c 	bl	80066ec <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001434:	9b02      	ldr	r3, [sp, #8]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001436:	9a03      	ldr	r2, [sp, #12]
  FOCVars[M1].Iab = Iab;
 8001438:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800143a:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 800143c:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 800143e:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8001440:	f8c4 6016 	str.w	r6, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 8001444:	2901      	cmp	r1, #1
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001446:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001448:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 800144a:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 800144e:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 8001450:	d034      	beq.n	80014bc <TSK_HighFrequencyTask+0x130>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001452:	482a      	ldr	r0, [pc, #168]	@ (80014fc <TSK_HighFrequencyTask+0x170>)
 8001454:	f005 fbd6 	bl	8006c04 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001458:	4929      	ldr	r1, [pc, #164]	@ (8001500 <TSK_HighFrequencyTask+0x174>)
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 800145a:	6862      	ldr	r2, [r4, #4]
 800145c:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800145e:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001460:	6808      	ldr	r0, [r1, #0]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001462:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001464:	f004 fc62 	bl	8005d2c <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001468:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800146a:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800146c:	4825      	ldr	r0, [pc, #148]	@ (8001504 <TSK_HighFrequencyTask+0x178>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800146e:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001472:	f005 fddd 	bl	8007030 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001476:	4823      	ldr	r0, [pc, #140]	@ (8001504 <TSK_HighFrequencyTask+0x178>)
 8001478:	f005 ff5a 	bl	8007330 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 800147c:	b164      	cbz	r4, 8001498 <TSK_HighFrequencyTask+0x10c>
    hState = STM_GetState(&STM[M1]);
 800147e:	4819      	ldr	r0, [pc, #100]	@ (80014e4 <TSK_HighFrequencyTask+0x158>)
 8001480:	f005 fdc2 	bl	8007008 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8001484:	1f03      	subs	r3, r0, #4
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d909      	bls.n	80014a0 <TSK_HighFrequencyTask+0x114>
 800148c:	2813      	cmp	r0, #19
 800148e:	d007      	beq.n	80014a0 <TSK_HighFrequencyTask+0x114>
}
 8001490:	2000      	movs	r0, #0
 8001492:	b008      	add	sp, #32
 8001494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001498:	481a      	ldr	r0, [pc, #104]	@ (8001504 <TSK_HighFrequencyTask+0x178>)
 800149a:	f006 f86f 	bl	800757c <STO_ResetPLL>
 800149e:	e7ee      	b.n	800147e <TSK_HighFrequencyTask+0xf2>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80014a0:	4818      	ldr	r0, [pc, #96]	@ (8001504 <TSK_HighFrequencyTask+0x178>)
 80014a2:	f005 fbe5 	bl	8006c70 <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80014a6:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80014a8:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80014aa:	4817      	ldr	r0, [pc, #92]	@ (8001508 <TSK_HighFrequencyTask+0x17c>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80014ac:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80014b0:	f006 f9be 	bl	8007830 <VSS_CalcElAngle>
}
 80014b4:	2000      	movs	r0, #0
 80014b6:	b008      	add	sp, #32
 80014b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	4809      	ldr	r0, [pc, #36]	@ (80014e4 <TSK_HighFrequencyTask+0x158>)
 80014c0:	f005 fd0a 	bl	8006ed8 <STM_FaultProcessing>
}
 80014c4:	2000      	movs	r0, #0
 80014c6:	b008      	add	sp, #32
 80014c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80014cc:	4d0f      	ldr	r5, [pc, #60]	@ (800150c <TSK_HighFrequencyTask+0x180>)
 80014ce:	6828      	ldr	r0, [r5, #0]
 80014d0:	f005 fa76 	bl	80069c0 <REMNG_RampCompleted>
 80014d4:	2800      	cmp	r0, #0
 80014d6:	f47f af65 	bne.w	80013a4 <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 80014da:	6828      	ldr	r0, [r5, #0]
 80014dc:	f005 fa4e 	bl	800697c <REMNG_Calc>
 80014e0:	8220      	strh	r0, [r4, #16]
 80014e2:	e75f      	b.n	80013a4 <TSK_HighFrequencyTask+0x18>
 80014e4:	20000920 	.word	0x20000920
 80014e8:	2000099c 	.word	0x2000099c
 80014ec:	2000091c 	.word	0x2000091c
 80014f0:	20000914 	.word	0x20000914
 80014f4:	20000910 	.word	0x20000910
 80014f8:	200008fc 	.word	0x200008fc
 80014fc:	2000048c 	.word	0x2000048c
 8001500:	2000090c 	.word	0x2000090c
 8001504:	200002bc 	.word	0x200002bc
 8001508:	200003e4 	.word	0x200003e4
 800150c:	200008f8 	.word	0x200008f8
 8001510:	20000904 	.word	0x20000904

08001514 <TSK_SafetyTask_PWMOFF>:
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <TSK_SafetyTask_PWMOFF+0x70>)
{
 8001516:	b570      	push	{r4, r5, r6, lr}
 8001518:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800151a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800151e:	4e1a      	ldr	r6, [pc, #104]	@ (8001588 <TSK_SafetyTask_PWMOFF+0x74>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001520:	f004 ffba 	bl	8006498 <NTC_CalcAvTemp>
 8001524:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001526:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800152a:	f005 fa1d 	bl	8006968 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800152e:	f025 050e 	bic.w	r5, r5, #14
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001532:	4b16      	ldr	r3, [pc, #88]	@ (800158c <TSK_SafetyTask_PWMOFF+0x78>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001534:	ea40 0105 	orr.w	r1, r0, r5
 8001538:	b289      	uxth	r1, r1
  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 800153a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800153e:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8001542:	43ca      	mvns	r2, r1
 8001544:	b292      	uxth	r2, r2
 8001546:	4628      	mov	r0, r5
 8001548:	f005 fcc6 	bl	8006ed8 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 800154c:	4628      	mov	r0, r5
 800154e:	f005 fd5b 	bl	8007008 <STM_GetState>
 8001552:	280a      	cmp	r0, #10
 8001554:	d008      	beq.n	8001568 <TSK_SafetyTask_PWMOFF+0x54>
 8001556:	280b      	cmp	r0, #11
 8001558:	d000      	beq.n	800155c <TSK_SafetyTask_PWMOFF+0x48>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800155a:	bd70      	pop	{r4, r5, r6, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800155c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 8001560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001564:	f005 b9de 	b.w	8006924 <PWMC_SwitchOffPWM>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001568:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800156c:	f005 f9da 	bl	8006924 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff fc1f 	bl	8000db4 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <TSK_SafetyTask_PWMOFF+0x7c>)
 8001578:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800157c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001580:	f004 bf34 	b.w	80063ec <MPM_Clear>
 8001584:	20000908 	.word	0x20000908
 8001588:	20000904 	.word	0x20000904
 800158c:	20000920 	.word	0x20000920
 8001590:	20000900 	.word	0x20000900

08001594 <TSK_SafetyTask>:
{
 8001594:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <TSK_SafetyTask+0x1c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d000      	beq.n	80015a0 <TSK_SafetyTask+0xc>
}
 800159e:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff ffb7 	bl	8001514 <TSK_SafetyTask_PWMOFF>
}
 80015a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80015aa:	f000 bddb 	b.w	8002164 <RCM_ExecUserConv>
 80015ae:	bf00      	nop
 80015b0:	200008f0 	.word	0x200008f0

080015b4 <MC_RunMotorControlTasks>:
{
 80015b4:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MC_RunMotorControlTasks+0x1c>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b903      	cbnz	r3, 80015be <MC_RunMotorControlTasks+0xa>
}
 80015bc:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80015be:	f7ff feb9 	bl	8001334 <MC_Scheduler>
    TSK_SafetyTask();
 80015c2:	f7ff ffe7 	bl	8001594 <TSK_SafetyTask>
}
 80015c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 80015ca:	f001 b94b 	b.w	8002864 <UI_Scheduler>
 80015ce:	bf00      	nop
 80015d0:	200008f0 	.word	0x200008f0

080015d4 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80015d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <TSK_HardwareFaultTask+0x18>)
 80015d8:	6818      	ldr	r0, [r3, #0]
 80015da:	f004 fe05 	bl	80061e8 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80015de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80015e2:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <TSK_HardwareFaultTask+0x1c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	2180      	movs	r1, #128	@ 0x80
 80015e8:	f005 bc76 	b.w	8006ed8 <STM_FaultProcessing>
 80015ec:	20000904 	.word	0x20000904
 80015f0:	20000920 	.word	0x20000920

080015f4 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80015f4:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015fa:	4823      	ldr	r0, [pc, #140]	@ (8001688 <mc_lock_pins+0x94>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015fc:	2502      	movs	r5, #2
 80015fe:	b088      	sub	sp, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001600:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001602:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001604:	61d8      	str	r0, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8001606:	69da      	ldr	r2, [r3, #28]
 8001608:	9207      	str	r2, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800160a:	f44f 7180 	mov.w	r1, #256	@ 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800160e:	4a1f      	ldr	r2, [pc, #124]	@ (800168c <mc_lock_pins+0x98>)
  (void) temp;
 8001610:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001612:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001614:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001616:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	9206      	str	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800161c:	f44f 7100 	mov.w	r1, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001620:	f44f 3281 	mov.w	r2, #66048	@ 0x10200
  (void) temp;
 8001624:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001626:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001628:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800162a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800162c:	69d9      	ldr	r1, [r3, #28]
 800162e:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001630:	4a17      	ldr	r2, [pc, #92]	@ (8001690 <mc_lock_pins+0x9c>)
  (void) temp;
 8001632:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001634:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001636:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800163a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800163c:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800163e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001640:	69d6      	ldr	r6, [r2, #28]
 8001642:	9604      	str	r6, [sp, #16]
  (void) temp;
 8001644:	9e04      	ldr	r6, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001646:	f44f 6780 	mov.w	r7, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800164a:	f44f 3682 	mov.w	r6, #66560	@ 0x10400
 800164e:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001650:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001652:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001654:	69de      	ldr	r6, [r3, #28]
 8001656:	9603      	str	r6, [sp, #12]
  (void) temp;
 8001658:	9e03      	ldr	r6, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800165a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800165c:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800165e:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001660:	69d2      	ldr	r2, [r2, #28]
 8001662:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001664:	2080      	movs	r0, #128	@ 0x80
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001666:	4a0b      	ldr	r2, [pc, #44]	@ (8001694 <mc_lock_pins+0xa0>)
  (void) temp;
 8001668:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800166a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800166c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800166e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001670:	69da      	ldr	r2, [r3, #28]
 8001672:	9201      	str	r2, [sp, #4]
  (void) temp;
 8001674:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001676:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001678:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800167a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001680:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 8001682:	b008      	add	sp, #32
 8001684:	bcf0      	pop	{r4, r5, r6, r7}
 8001686:	4770      	bx	lr
 8001688:	00010002 	.word	0x00010002
 800168c:	00010100 	.word	0x00010100
 8001690:	48000400 	.word	0x48000400
 8001694:	00010080 	.word	0x00010080

08001698 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800169c:	b08d      	sub	sp, #52	@ 0x34
 800169e:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 80016a0:	2700      	movs	r7, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 80016a2:	094a      	lsrs	r2, r1, #5
{
 80016a4:	460c      	mov	r4, r1
 80016a6:	4605      	mov	r5, r0
 80016a8:	4699      	mov	r9, r3
  bool bNoError = false; // Default is error
 80016aa:	f88d 7009 	strb.w	r7, [sp, #9]
  if (bMotorSelection != 0)
 80016ae:	d123      	bne.n	80016f8 <MCP_ReceivedFrame+0x60>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 80016b0:	2912      	cmp	r1, #18
 80016b2:	d814      	bhi.n	80016de <MCP_ReceivedFrame+0x46>
 80016b4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80016b8:	01660016 	.word	0x01660016
 80016bc:	015c00c6 	.word	0x015c00c6
 80016c0:	00130013 	.word	0x00130013
 80016c4:	00810058 	.word	0x00810058
 80016c8:	00b20089 	.word	0x00b20089
 80016cc:	01c601bb 	.word	0x01c601bb
 80016d0:	01dd01e6 	.word	0x01dd01e6
 80016d4:	00130013 	.word	0x00130013
 80016d8:	00130013 	.word	0x00130013
 80016dc:	0016      	.short	0x0016
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80016de:	2301      	movs	r3, #1
 80016e0:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80016e4:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	@ 0x30
 80016e8:	2301      	movs	r3, #1
 80016ea:	f10d 020e 	add.w	r2, sp, #14
 80016ee:	21ff      	movs	r1, #255	@ 0xff
 80016f0:	47a0      	blx	r4
    }
  }
}
 80016f2:	b00d      	add	sp, #52	@ 0x34
 80016f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80016f8:	f102 38ff 	add.w	r8, r2, #4294967295
 80016fc:	4642      	mov	r2, r8
 80016fe:	4639      	mov	r1, r7
 8001700:	f001 f910 	bl	8002924 <UI_SetReg>
 8001704:	b300      	cbz	r0, 8001748 <MCP_ReceivedFrame+0xb0>
      if (pHandle->pDAC)
 8001706:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 800170a:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 800170e:	b118      	cbz	r0, 8001718 <MCP_ReceivedFrame+0x80>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 8001710:	4642      	mov	r2, r8
 8001712:	4639      	mov	r1, r7
 8001714:	f001 f906 	bl	8002924 <UI_SetReg>
  switch (Code)
 8001718:	2c12      	cmp	r4, #18
 800171a:	f200 81d3 	bhi.w	8001ac4 <MCP_ReceivedFrame+0x42c>
 800171e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001722:	007a      	.short	0x007a
 8001724:	00910131 	.word	0x00910131
 8001728:	01d10127 	.word	0x01d10127
 800172c:	002301d1 	.word	0x002301d1
 8001730:	0054004c 	.word	0x0054004c
 8001734:	0186007d 	.word	0x0186007d
 8001738:	01b10191 	.word	0x01b10191
 800173c:	01d101a8 	.word	0x01d101a8
 8001740:	01d101d1 	.word	0x01d101d1
 8001744:	007a01d1 	.word	0x007a01d1
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001748:	230b      	movs	r3, #11
    if (bNoError)
 800174a:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 800174e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001752:	2800      	cmp	r0, #0
 8001754:	d0c6      	beq.n	80016e4 <MCP_ReceivedFrame+0x4c>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001756:	2300      	movs	r3, #0
 8001758:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	@ 0x30
 800175c:	461a      	mov	r2, r3
 800175e:	21f0      	movs	r1, #240	@ 0xf0
 8001760:	47a0      	blx	r4
}
 8001762:	b00d      	add	sp, #52	@ 0x34
 8001764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        outBuff[i] = 0;
 8001768:	ac04      	add	r4, sp, #16
 800176a:	2100      	movs	r1, #0
 800176c:	2220      	movs	r2, #32
 800176e:	4620      	mov	r0, r4
 8001770:	f006 f94a 	bl	8007a08 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001774:	f8d5 70c0 	ldr.w	r7, [r5, #192]	@ 0xc0
 8001778:	f10d 0112 	add.w	r1, sp, #18
 800177c:	1e7b      	subs	r3, r7, #1
 800177e:	f107 061c 	add.w	r6, r7, #28
 8001782:	e004      	b.n	800178e <MCP_ReceivedFrame+0xf6>
 8001784:	42b3      	cmp	r3, r6
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001786:	f801 2f01 	strb.w	r2, [r1, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800178a:	f000 829a 	beq.w	8001cc2 <MCP_ReceivedFrame+0x62a>
        outBuff[3+i] = pHandle->s_fwVer[i];
 800178e:	4618      	mov	r0, r3
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001790:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001794:	2a09      	cmp	r2, #9
 8001796:	d1f5      	bne.n	8001784 <MCP_ReceivedFrame+0xec>
 8001798:	f1c7 0301 	rsb	r3, r7, #1
 800179c:	4403      	add	r3, r0
      outBuff[0] = pHandle->s_fwVer[i+5];
 800179e:	1d5a      	adds	r2, r3, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 80017a0:	1dd9      	adds	r1, r3, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 80017a2:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 80017a4:	5cba      	ldrb	r2, [r7, r2]
 80017a6:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80017aa:	5c7a      	ldrb	r2, [r7, r1]
 80017ac:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 80017b0:	5cfb      	ldrb	r3, [r7, r3]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80017b2:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
      outBuff[2] = pHandle->s_fwVer[i+9];
 80017b4:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80017b8:	e17b      	b.n	8001ab2 <MCP_ReceivedFrame+0x41a>
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 80017ba:	88b2      	ldrh	r2, [r6, #4]
 80017bc:	6831      	ldr	r1, [r6, #0]
 80017be:	4628      	mov	r0, r5
 80017c0:	f001 fa4e 	bl	8002c60 <UI_ExecSpeedRamp>
 80017c4:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80017c8:	e7c3      	b.n	8001752 <MCP_ReceivedFrame+0xba>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 80017ca:	f10d 030e 	add.w	r3, sp, #14
 80017ce:	7831      	ldrb	r1, [r6, #0]
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	f10d 020a 	add.w	r2, sp, #10
 80017d6:	ab03      	add	r3, sp, #12
 80017d8:	4628      	mov	r0, r5
 80017da:	f001 fa5d 	bl	8002c98 <UI_GetRevupData>
      outBuff[4] = (uint8_t)(FinalTorque);
 80017de:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 80017e2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80017e6:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
 80017e8:	2308      	movs	r3, #8
      outBuff[0] = (uint8_t)(rpm);
 80017ea:	2200      	movs	r2, #0
 80017ec:	f360 0207 	bfi	r2, r0, #0, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80017f0:	4118      	asrs	r0, r3
      outBuff[0] = (uint8_t)(rpm);
 80017f2:	f360 220f 	bfi	r2, r0, #8, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80017f6:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
      outBuff[0] = (uint8_t)(rpm);
 80017fa:	f361 4217 	bfi	r2, r1, #16, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80017fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001802:	40d9      	lsrs	r1, r3
      outBuff[0] = (uint8_t)(rpm);
 8001804:	f361 621f 	bfi	r2, r1, #24, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001808:	0040      	lsls	r0, r0, #1
      outBuff[0] = (uint8_t)(rpm);
 800180a:	9205      	str	r2, [sp, #20]
 800180c:	9004      	str	r0, [sp, #16]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800180e:	aa04      	add	r2, sp, #16
 8001810:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001812:	21f0      	movs	r1, #240	@ 0xf0
 8001814:	47a0      	blx	r4
    if (bNoError)
 8001816:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800181a:	e79a      	b.n	8001752 <MCP_ReceivedFrame+0xba>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800181c:	f8d6 2001 	ldr.w	r2, [r6, #1]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001820:	4bbc      	ldr	r3, [pc, #752]	@ (8001b14 <MCP_ReceivedFrame+0x47c>)
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001822:	f9b6 1005 	ldrsh.w	r1, [r6, #5]
 8001826:	9100      	str	r1, [sp, #0]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001828:	fb83 0302 	smull	r0, r3, r3, r2
 800182c:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001830:	7831      	ldrb	r1, [r6, #0]
 8001832:	f8b6 2007 	ldrh.w	r2, [r6, #7]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4628      	mov	r0, r5
 800183a:	f001 fa4d 	bl	8002cd8 <UI_SetRevupData>
 800183e:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001842:	e786      	b.n	8001752 <MCP_ReceivedFrame+0xba>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001844:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001846:	2303      	movs	r3, #3
      switch (bRegID)
 8001848:	2961      	cmp	r1, #97	@ 0x61
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800184a:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 800184e:	f200 813f 	bhi.w	8001ad0 <MCP_ReceivedFrame+0x438>
 8001852:	2945      	cmp	r1, #69	@ 0x45
 8001854:	f200 8239 	bhi.w	8001cca <MCP_ReceivedFrame+0x632>
 8001858:	2941      	cmp	r1, #65	@ 0x41
 800185a:	d8dc      	bhi.n	8001816 <MCP_ReceivedFrame+0x17e>
 800185c:	2941      	cmp	r1, #65	@ 0x41
 800185e:	d8da      	bhi.n	8001816 <MCP_ReceivedFrame+0x17e>
 8001860:	a301      	add	r3, pc, #4	@ (adr r3, 8001868 <MCP_ReceivedFrame+0x1d0>)
 8001862:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001866:	bf00      	nop
 8001868:	08001bff 	.word	0x08001bff
 800186c:	08001ba1 	.word	0x08001ba1
 8001870:	08001bff 	.word	0x08001bff
 8001874:	08001bff 	.word	0x08001bff
 8001878:	08001ba1 	.word	0x08001ba1
 800187c:	08001b6d 	.word	0x08001b6d
 8001880:	08001b6d 	.word	0x08001b6d
 8001884:	08001b6d 	.word	0x08001b6d
 8001888:	08001b6d 	.word	0x08001b6d
 800188c:	08001b6d 	.word	0x08001b6d
 8001890:	08001b6d 	.word	0x08001b6d
 8001894:	08001b6d 	.word	0x08001b6d
 8001898:	08001b6d 	.word	0x08001b6d
 800189c:	08001b6d 	.word	0x08001b6d
 80018a0:	08001b6d 	.word	0x08001b6d
 80018a4:	08001b6d 	.word	0x08001b6d
 80018a8:	08001b6d 	.word	0x08001b6d
 80018ac:	08001b6d 	.word	0x08001b6d
 80018b0:	08001b6d 	.word	0x08001b6d
 80018b4:	08001b6d 	.word	0x08001b6d
 80018b8:	08001b6d 	.word	0x08001b6d
 80018bc:	08001b6d 	.word	0x08001b6d
 80018c0:	08001b6d 	.word	0x08001b6d
 80018c4:	08001b6d 	.word	0x08001b6d
 80018c8:	08001b6d 	.word	0x08001b6d
 80018cc:	08001b6d 	.word	0x08001b6d
 80018d0:	08001b6d 	.word	0x08001b6d
 80018d4:	08001b6d 	.word	0x08001b6d
 80018d8:	08001c9f 	.word	0x08001c9f
 80018dc:	08001c77 	.word	0x08001c77
 80018e0:	08001ba1 	.word	0x08001ba1
 80018e4:	08001b6d 	.word	0x08001b6d
 80018e8:	08001b6d 	.word	0x08001b6d
 80018ec:	08001b6d 	.word	0x08001b6d
 80018f0:	08001bff 	.word	0x08001bff
 80018f4:	08001817 	.word	0x08001817
 80018f8:	08001817 	.word	0x08001817
 80018fc:	08001817 	.word	0x08001817
 8001900:	08001817 	.word	0x08001817
 8001904:	08001817 	.word	0x08001817
 8001908:	08001817 	.word	0x08001817
 800190c:	08001817 	.word	0x08001817
 8001910:	08001817 	.word	0x08001817
 8001914:	08001817 	.word	0x08001817
 8001918:	08001817 	.word	0x08001817
 800191c:	08001817 	.word	0x08001817
 8001920:	08001817 	.word	0x08001817
 8001924:	08001817 	.word	0x08001817
 8001928:	08001817 	.word	0x08001817
 800192c:	08001817 	.word	0x08001817
 8001930:	08001817 	.word	0x08001817
 8001934:	08001817 	.word	0x08001817
 8001938:	08001817 	.word	0x08001817
 800193c:	08001817 	.word	0x08001817
 8001940:	08001817 	.word	0x08001817
 8001944:	08001817 	.word	0x08001817
 8001948:	08001817 	.word	0x08001817
 800194c:	08001817 	.word	0x08001817
 8001950:	08001817 	.word	0x08001817
 8001954:	08001817 	.word	0x08001817
 8001958:	08001817 	.word	0x08001817
 800195c:	08001817 	.word	0x08001817
 8001960:	08001817 	.word	0x08001817
 8001964:	08001817 	.word	0x08001817
 8001968:	08001817 	.word	0x08001817
 800196c:	08001b6d 	.word	0x08001b6d
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001970:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001972:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001974:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001978:	4628      	mov	r0, r5
 800197a:	f001 f93b 	bl	8002bf4 <UI_ExecCmd>
 800197e:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001982:	e6e6      	b.n	8001752 <MCP_ReceivedFrame+0xba>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001984:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001986:	2305      	movs	r3, #5
      switch (bRegID)
 8001988:	2948      	cmp	r1, #72	@ 0x48
      bErrorCode = ERROR_CODE_WRONG_SET;
 800198a:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 800198e:	f200 80c5 	bhi.w	8001b1c <MCP_ReceivedFrame+0x484>
 8001992:	2948      	cmp	r1, #72	@ 0x48
 8001994:	f200 80e4 	bhi.w	8001b60 <MCP_ReceivedFrame+0x4c8>
 8001998:	e8df f011 	tbh	[pc, r1, lsl #1]
 800199c:	00e2015e 	.word	0x00e2015e
 80019a0:	015700e2 	.word	0x015700e2
 80019a4:	00fa00e2 	.word	0x00fa00e2
 80019a8:	00fa00fa 	.word	0x00fa00fa
 80019ac:	00fa00fa 	.word	0x00fa00fa
 80019b0:	00fa00fa 	.word	0x00fa00fa
 80019b4:	00fa00fa 	.word	0x00fa00fa
 80019b8:	00fa00fa 	.word	0x00fa00fa
 80019bc:	01140114 	.word	0x01140114
 80019c0:	00e200e2 	.word	0x00e200e2
 80019c4:	00fa00fa 	.word	0x00fa00fa
 80019c8:	00fa00fa 	.word	0x00fa00fa
 80019cc:	00e200fa 	.word	0x00e200fa
 80019d0:	00e200e2 	.word	0x00e200e2
 80019d4:	0143014d 	.word	0x0143014d
 80019d8:	00e200e2 	.word	0x00e200e2
 80019dc:	00e200e2 	.word	0x00e200e2
 80019e0:	00e200e2 	.word	0x00e200e2
 80019e4:	00e200e2 	.word	0x00e200e2
 80019e8:	00e200e2 	.word	0x00e200e2
 80019ec:	00e200e2 	.word	0x00e200e2
 80019f0:	00e200e2 	.word	0x00e200e2
 80019f4:	00e200e2 	.word	0x00e200e2
 80019f8:	00e200e2 	.word	0x00e200e2
 80019fc:	00e200e2 	.word	0x00e200e2
 8001a00:	00e200e2 	.word	0x00e200e2
 8001a04:	00e200e2 	.word	0x00e200e2
 8001a08:	00e200e2 	.word	0x00e200e2
 8001a0c:	00e200e2 	.word	0x00e200e2
 8001a10:	00e200e2 	.word	0x00e200e2
 8001a14:	00e200e2 	.word	0x00e200e2
 8001a18:	00e200e2 	.word	0x00e200e2
 8001a1c:	00fa00e2 	.word	0x00fa00e2
 8001a20:	00e200e2 	.word	0x00e200e2
 8001a24:	00e200e2 	.word	0x00e200e2
 8001a28:	01140114 	.word	0x01140114
 8001a2c:	0114      	.short	0x0114
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001a2e:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8001a32:	f9b6 1000 	ldrsh.w	r1, [r6]
 8001a36:	4628      	mov	r0, r5
 8001a38:	f001 f968 	bl	8002d0c <UI_SetCurrentReferences>
      bNoError = true;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001a42:	e688      	b.n	8001756 <MCP_ReceivedFrame+0xbe>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001a44:	4c34      	ldr	r4, [pc, #208]	@ (8001b18 <MCP_ReceivedFrame+0x480>)
      stepList.data = buffer;
 8001a46:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001a48:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001a4e:	f88d 9014 	strb.w	r9, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001a52:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001a56:	f001 f967 	bl	8002d28 <UI_GetMPInfo>
 8001a5a:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	f43f ae40 	beq.w	80016e4 <MCP_ReceivedFrame+0x4c>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001a64:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8001a66:	7923      	ldrb	r3, [r4, #4]
 8001a68:	6822      	ldr	r2, [r4, #0]
 8001a6a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001a6c:	21f0      	movs	r1, #240	@ 0xf0
 8001a6e:	47b0      	blx	r6
  if (RequireAck)
 8001a70:	e63f      	b.n	80016f2 <MCP_ReceivedFrame+0x5a>
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001a72:	6831      	ldr	r1, [r6, #0]
 8001a74:	88b2      	ldrh	r2, [r6, #4]
 8001a76:	b209      	sxth	r1, r1
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f001 f903 	bl	8002c84 <UI_ExecTorqueRamp>
 8001a7e:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001a82:	e666      	b.n	8001752 <MCP_ReceivedFrame+0xba>
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001a84:	f8d5 30c0 	ldr.w	r3, [r5, #192]	@ 0xc0
 8001a88:	ac04      	add	r4, sp, #16
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	2000      	movs	r0, #0
 8001a90:	e004      	b.n	8001a9c <MCP_ReceivedFrame+0x404>
 8001a92:	3001      	adds	r0, #1
 8001a94:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001a96:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001a9a:	d009      	beq.n	8001ab0 <MCP_ReceivedFrame+0x418>
 8001a9c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001aa0:	2900      	cmp	r1, #0
 8001aa2:	d1f6      	bne.n	8001a92 <MCP_ReceivedFrame+0x3fa>
        outBuff[i] = 0;
 8001aa4:	f1c0 0220 	rsb	r2, r0, #32
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	4420      	add	r0, r4
 8001aac:	f005 ffac 	bl	8007a08 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001ab0:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8001ab2:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001ab4:	2320      	movs	r3, #32
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	21f0      	movs	r1, #240	@ 0xf0
 8001aba:	47b0      	blx	r6
      bNoError = true;
 8001abc:	2301      	movs	r3, #1
 8001abe:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001ac2:	e648      	b.n	8001756 <MCP_ReceivedFrame+0xbe>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001ac4:	2301      	movs	r3, #1
    if (bNoError)
 8001ac6:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001aca:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001ace:	e640      	b.n	8001752 <MCP_ReceivedFrame+0xba>
      switch (bRegID)
 8001ad0:	060b      	lsls	r3, r1, #24
 8001ad2:	d57f      	bpl.n	8001bd4 <MCP_ReceivedFrame+0x53c>
 8001ad4:	f081 0380 	eor.w	r3, r1, #128	@ 0x80
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 8001ade:	f63f ae9a 	bhi.w	8001816 <MCP_ReceivedFrame+0x17e>
 8001ae2:	2a08      	cmp	r2, #8
 8001ae4:	f63f ae97 	bhi.w	8001816 <MCP_ReceivedFrame+0x17e>
 8001ae8:	a301      	add	r3, pc, #4	@ (adr r3, 8001af0 <MCP_ReceivedFrame+0x458>)
 8001aea:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001aee:	bf00      	nop
 8001af0:	08001bff 	.word	0x08001bff
 8001af4:	08001817 	.word	0x08001817
 8001af8:	08001bff 	.word	0x08001bff
 8001afc:	08001ba1 	.word	0x08001ba1
 8001b00:	08001ba1 	.word	0x08001ba1
 8001b04:	08001ba1 	.word	0x08001ba1
 8001b08:	08001b6d 	.word	0x08001b6d
 8001b0c:	08001b6d 	.word	0x08001b6d
 8001b10:	08001b6d 	.word	0x08001b6d
 8001b14:	2aaaaaab 	.word	0x2aaaaaab
 8001b18:	200009c4 	.word	0x200009c4
      switch (bRegID)
 8001b1c:	2965      	cmp	r1, #101	@ 0x65
 8001b1e:	d913      	bls.n	8001b48 <MCP_ReceivedFrame+0x4b0>
 8001b20:	f1a1 0374 	sub.w	r3, r1, #116	@ 0x74
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	2a14      	cmp	r2, #20
 8001b28:	d81a      	bhi.n	8001b60 <MCP_ReceivedFrame+0x4c8>
 8001b2a:	2b14      	cmp	r3, #20
 8001b2c:	d818      	bhi.n	8001b60 <MCP_ReceivedFrame+0x4c8>
 8001b2e:	e8df f003 	tbb	[pc, r3]
 8001b32:	498c      	.short	0x498c
 8001b34:	49494949 	.word	0x49494949
 8001b38:	49171717 	.word	0x49171717
 8001b3c:	17171749 	.word	0x17171749
 8001b40:	17171717 	.word	0x17171717
 8001b44:	2f2f      	.short	0x2f2f
 8001b46:	2f          	.byte	0x2f
 8001b47:	00          	.byte	0x00
 8001b48:	294e      	cmp	r1, #78	@ 0x4e
 8001b4a:	d909      	bls.n	8001b60 <MCP_ReceivedFrame+0x4c8>
 8001b4c:	f1a1 024f 	sub.w	r2, r1, #79	@ 0x4f
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	2301      	movs	r3, #1
 8001b54:	4093      	lsls	r3, r2
 8001b56:	4a66      	ldr	r2, [pc, #408]	@ (8001cf0 <MCP_ReceivedFrame+0x658>)
 8001b58:	4213      	tst	r3, r2
 8001b5a:	d119      	bne.n	8001b90 <MCP_ReceivedFrame+0x4f8>
 8001b5c:	295b      	cmp	r1, #91	@ 0x5b
 8001b5e:	d031      	beq.n	8001bc4 <MCP_ReceivedFrame+0x52c>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001b60:	2302      	movs	r3, #2
    if (bNoError)
 8001b62:	f89d 0009 	ldrb.w	r0, [sp, #9]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001b66:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001b6a:	e5f2      	b.n	8001752 <MCP_ReceivedFrame+0xba>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001b6c:	f10d 0209 	add.w	r2, sp, #9
 8001b70:	4628      	mov	r0, r5
 8001b72:	f001 f8ed 	bl	8002d50 <UI_GetReg>
          if ( bNoError == true )
 8001b76:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001b7a:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f43f adb1 	beq.w	80016e4 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001b82:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	@ 0x30
 8001b86:	2302      	movs	r3, #2
 8001b88:	aa04      	add	r2, sp, #16
 8001b8a:	21f0      	movs	r1, #240	@ 0xf0
 8001b8c:	47a0      	blx	r4
  if (RequireAck)
 8001b8e:	e5b0      	b.n	80016f2 <MCP_ReceivedFrame+0x5a>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001b90:	f8b6 2001 	ldrh.w	r2, [r6, #1]
 8001b94:	4628      	mov	r0, r5
 8001b96:	f000 fec5 	bl	8002924 <UI_SetReg>
 8001b9a:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001b9e:	e5d8      	b.n	8001752 <MCP_ReceivedFrame+0xba>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001ba0:	f10d 0209 	add.w	r2, sp, #9
 8001ba4:	4628      	mov	r0, r5
 8001ba6:	f001 f8d3 	bl	8002d50 <UI_GetReg>
          if ( bNoError == true )
 8001baa:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001bae:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f43f ad97 	beq.w	80016e4 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001bb6:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	@ 0x30
 8001bba:	2304      	movs	r3, #4
 8001bbc:	aa04      	add	r2, sp, #16
 8001bbe:	21f0      	movs	r1, #240	@ 0xf0
 8001bc0:	47a0      	blx	r4
  if (RequireAck)
 8001bc2:	e596      	b.n	80016f2 <MCP_ReceivedFrame+0x5a>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001bc4:	f8d6 2001 	ldr.w	r2, [r6, #1]
 8001bc8:	4628      	mov	r0, r5
 8001bca:	f000 feab 	bl	8002924 <UI_SetReg>
 8001bce:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001bd2:	e5be      	b.n	8001752 <MCP_ReceivedFrame+0xba>
      switch (bRegID)
 8001bd4:	2963      	cmp	r1, #99	@ 0x63
 8001bd6:	f67f ae1e 	bls.w	8001816 <MCP_ReceivedFrame+0x17e>
 8001bda:	f1a1 0364 	sub.w	r3, r1, #100	@ 0x64
 8001bde:	4845      	ldr	r0, [pc, #276]	@ (8001cf4 <MCP_ReceivedFrame+0x65c>)
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2201      	movs	r2, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	4018      	ands	r0, r3
 8001bea:	2800      	cmp	r0, #0
 8001bec:	d1d8      	bne.n	8001ba0 <MCP_ReceivedFrame+0x508>
 8001bee:	f64c 4203 	movw	r2, #52227	@ 0xcc03
 8001bf2:	4213      	tst	r3, r2
 8001bf4:	d1ba      	bne.n	8001b6c <MCP_ReceivedFrame+0x4d4>
 8001bf6:	4a40      	ldr	r2, [pc, #256]	@ (8001cf8 <MCP_ReceivedFrame+0x660>)
 8001bf8:	4213      	tst	r3, r2
 8001bfa:	f43f ae0c 	beq.w	8001816 <MCP_ReceivedFrame+0x17e>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001bfe:	f10d 0209 	add.w	r2, sp, #9
 8001c02:	4628      	mov	r0, r5
 8001c04:	f001 f8a4 	bl	8002d50 <UI_GetReg>
           if ( bNoError == true )
 8001c08:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001c0c:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f43f ad68 	beq.w	80016e4 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001c14:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	@ 0x30
 8001c18:	2301      	movs	r3, #1
 8001c1a:	aa04      	add	r2, sp, #16
 8001c1c:	21f0      	movs	r1, #240	@ 0xf0
 8001c1e:	47a0      	blx	r4
  if (RequireAck)
 8001c20:	e567      	b.n	80016f2 <MCP_ReceivedFrame+0x5a>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8001c22:	7872      	ldrb	r2, [r6, #1]
 8001c24:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 8001c28:	2101      	movs	r1, #1
 8001c2a:	f001 f887 	bl	8002d3c <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001c34:	e58f      	b.n	8001756 <MCP_ReceivedFrame+0xbe>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 8001c36:	7872      	ldrb	r2, [r6, #1]
 8001c38:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f001 f87d 	bl	8002d3c <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001c42:	2301      	movs	r3, #1
 8001c44:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001c48:	e585      	b.n	8001756 <MCP_ReceivedFrame+0xbe>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001c4a:	7872      	ldrb	r2, [r6, #1]
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	f000 fe69 	bl	8002924 <UI_SetReg>
 8001c52:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001c56:	e57c      	b.n	8001752 <MCP_ReceivedFrame+0xba>
          int32_t wValue = (int32_t)(buffer[1]);
 8001c58:	7874      	ldrb	r4, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 8001c5a:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 8001c5e:	4622      	mov	r2, r4
 8001c60:	2100      	movs	r1, #0
 8001c62:	f000 fe5f 	bl	8002924 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001c66:	4622      	mov	r2, r4
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4628      	mov	r0, r5
 8001c6c:	f000 fe5a 	bl	8002924 <UI_SetReg>
 8001c70:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001c74:	e56d      	b.n	8001752 <MCP_ReceivedFrame+0xba>
          if (pHandle->pDAC)
 8001c76:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	f43f adcb 	beq.w	8001816 <MCP_ReceivedFrame+0x17e>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001c80:	2101      	movs	r1, #1
 8001c82:	f001 f85f 	bl	8002d44 <UI_GetDAC>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001c86:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001c88:	f88d 0010 	strb.w	r0, [sp, #16]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001c8c:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
 8001c8e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001c90:	aa04      	add	r2, sp, #16
 8001c92:	21f0      	movs	r1, #240	@ 0xf0
 8001c94:	47a0      	blx	r4
            bNoError = true;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001c9c:	e55b      	b.n	8001756 <MCP_ReceivedFrame+0xbe>
          if (pHandle->pDAC)
 8001c9e:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	f43f adb7 	beq.w	8001816 <MCP_ReceivedFrame+0x17e>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8001ca8:	2100      	movs	r1, #0
 8001caa:	f001 f84b 	bl	8002d44 <UI_GetDAC>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	f88d 2010 	strb.w	r2, [sp, #16]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001cb4:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	@ 0x30
 8001cb8:	2301      	movs	r3, #1
 8001cba:	aa04      	add	r2, sp, #16
 8001cbc:	21f0      	movs	r1, #240	@ 0xf0
 8001cbe:	47a0      	blx	r4
  if (RequireAck)
 8001cc0:	e517      	b.n	80016f2 <MCP_ReceivedFrame+0x5a>
 8001cc2:	2326      	movs	r3, #38	@ 0x26
 8001cc4:	2124      	movs	r1, #36	@ 0x24
 8001cc6:	2222      	movs	r2, #34	@ 0x22
 8001cc8:	e56c      	b.n	80017a4 <MCP_ReceivedFrame+0x10c>
      switch (bRegID)
 8001cca:	f1a1 0246 	sub.w	r2, r1, #70	@ 0x46
 8001cce:	480b      	ldr	r0, [pc, #44]	@ (8001cfc <MCP_ReceivedFrame+0x664>)
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	4093      	lsls	r3, r2
 8001cd6:	4203      	tst	r3, r0
 8001cd8:	f47f af48 	bne.w	8001b6c <MCP_ReceivedFrame+0x4d4>
 8001cdc:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <MCP_ReceivedFrame+0x668>)
 8001cde:	4213      	tst	r3, r2
 8001ce0:	f47f af5e 	bne.w	8001ba0 <MCP_ReceivedFrame+0x508>
 8001ce4:	4a07      	ldr	r2, [pc, #28]	@ (8001d04 <MCP_ReceivedFrame+0x66c>)
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	f43f ad94 	beq.w	8001816 <MCP_ReceivedFrame+0x17e>
 8001cee:	e786      	b.n	8001bfe <MCP_ReceivedFrame+0x566>
 8001cf0:	006407f1 	.word	0x006407f1
 8001cf4:	0ffe11f0 	.word	0x0ffe11f0
 8001cf8:	0001020c 	.word	0x0001020c
 8001cfc:	0f8ffe78 	.word	0x0f8ffe78
 8001d00:	00200107 	.word	0x00200107
 8001d04:	00100080 	.word	0x00100080

08001d08 <MCP_WaitNextFrame>:
{
 8001d08:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001d0a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
{
 8001d0c:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001d0e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8001d10:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001d12:	2280      	movs	r2, #128	@ 0x80
 8001d14:	f884 20c8 	strb.w	r2, [r4, #200]	@ 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8001d18:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001d1a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
}
 8001d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001d20:	4718      	bx	r3
 8001d22:	bf00      	nop

08001d24 <MCP_Init>:
{
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	4604      	mov	r4, r0
 8001d2a:	461d      	mov	r5, r3
 8001d2c:	9b07      	ldr	r3, [sp, #28]
  pHandle->pDAC = pDAC;
 8001d2e:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
{
 8001d32:	9b08      	ldr	r3, [sp, #32]
  pHandle->s_fwVer = s_fwVer;
 8001d34:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
  FCP_SetClient( pFCP, pHandle,
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <MCP_Init+0x3c>)
  pHandle->pFCP = pFCP;
 8001d3a:	6321      	str	r1, [r4, #48]	@ 0x30
{
 8001d3c:	4608      	mov	r0, r1
 8001d3e:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	4a08      	ldr	r2, [pc, #32]	@ (8001d64 <MCP_Init+0x40>)
 8001d44:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <MCP_Init+0x44>)
 8001d46:	4621      	mov	r1, r4
 8001d48:	f004 f846 	bl	8005dd8 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001d4c:	9b06      	ldr	r3, [sp, #24]
 8001d4e:	63e3      	str	r3, [r4, #60]	@ 0x3c
  pHandle->fFcpReceive = fFcpReceive;
 8001d50:	e9c4 650d 	strd	r6, r5, [r4, #52]	@ 0x34
  MCP_WaitNextFrame(pHandle);
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff ffd7 	bl	8001d08 <MCP_WaitNextFrame>
}
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd70      	pop	{r4, r5, r6, pc}
 8001d5e:	bf00      	nop
 8001d60:	08001d6d 	.word	0x08001d6d
 8001d64:	08001d75 	.word	0x08001d75
 8001d68:	08001699 	.word	0x08001699

08001d6c <MCP_OnTimeOut>:
{
 8001d6c:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001d6e:	f7ff ffcb 	bl	8001d08 <MCP_WaitNextFrame>
}
 8001d72:	bd08      	pop	{r3, pc}

08001d74 <MCP_SentFrame>:
{
 8001d74:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001d76:	f7ff ffc7 	bl	8001d08 <MCP_WaitNextFrame>
}
 8001d7a:	bd08      	pop	{r3, pc}

08001d7c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001d7c:	b530      	push	{r4, r5, lr}
 8001d7e:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001d80:	f002 ff26 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001d86:	4d0c      	ldr	r5, [pc, #48]	@ (8001db8 <MX_MotorControl_Init+0x3c>)
 8001d88:	4c0c      	ldr	r4, [pc, #48]	@ (8001dbc <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001d8a:	fba3 3000 	umull	r3, r0, r3, r0
 8001d8e:	09c0      	lsrs	r0, r0, #7
 8001d90:	f002 f846 	bl	8003e20 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001d94:	4629      	mov	r1, r5
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7ff f846 	bl	8000e28 <MCboot>
  mc_lock_pins();
 8001d9c:	f7ff fc2a 	bl	80015f4 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001da0:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <MX_MotorControl_Init+0x44>)
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4807      	ldr	r0, [pc, #28]	@ (8001dc4 <MX_MotorControl_Init+0x48>)
 8001da6:	462b      	mov	r3, r5
 8001da8:	4622      	mov	r2, r4
 8001daa:	2101      	movs	r1, #1
 8001dac:	f000 fce6 	bl	800277c <UI_TaskInit>
}
 8001db0:	b003      	add	sp, #12
 8001db2:	bd30      	pop	{r4, r5, pc}
 8001db4:	10624dd3 	.word	0x10624dd3
 8001db8:	200009cc 	.word	0x200009cc
 8001dbc:	200009d0 	.word	0x200009d0
 8001dc0:	08007aa4 	.word	0x08007aa4
 8001dc4:	200006d0 	.word	0x200006d0

08001dc8 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 8001dc8:	b4f0      	push	{r4, r5, r6, r7}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001dca:	4d80      	ldr	r5, [pc, #512]	@ (8001fcc <RCM_RegisterRegConv+0x204>)
 8001dcc:	682a      	ldr	r2, [r5, #0]
{
 8001dce:	4604      	mov	r4, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001dd0:	2a00      	cmp	r2, #0
 8001dd2:	d033      	beq.n	8001e3c <RCM_RegisterRegConv+0x74>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001dd4:	7901      	ldrb	r1, [r0, #4]
 8001dd6:	7913      	ldrb	r3, [r2, #4]
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d01f      	beq.n	8001e1c <RCM_RegisterRegConv+0x54>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001ddc:	686e      	ldr	r6, [r5, #4]
 8001dde:	2e00      	cmp	r6, #0
 8001de0:	f000 80c3 	beq.w	8001f6a <RCM_RegisterRegConv+0x1a2>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001de4:	7933      	ldrb	r3, [r6, #4]
 8001de6:	428b      	cmp	r3, r1
 8001de8:	f000 80cf 	beq.w	8001f8a <RCM_RegisterRegConv+0x1c2>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001dec:	68af      	ldr	r7, [r5, #8]
 8001dee:	2f00      	cmp	r7, #0
 8001df0:	f000 80ac 	beq.w	8001f4c <RCM_RegisterRegConv+0x184>
  uint8_t handle=255;
 8001df4:	20ff      	movs	r0, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001df6:	793b      	ldrb	r3, [r7, #4]
 8001df8:	428b      	cmp	r3, r1
 8001dfa:	d02e      	beq.n	8001e5a <RCM_RegisterRegConv+0x92>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001dfc:	68eb      	ldr	r3, [r5, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80bd 	beq.w	8001f7e <RCM_RegisterRegConv+0x1b6>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e04:	791a      	ldrb	r2, [r3, #4]
 8001e06:	428a      	cmp	r2, r1
 8001e08:	f000 80c7 	beq.w	8001f9a <RCM_RegisterRegConv+0x1d2>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001e0c:	2803      	cmp	r0, #3
 8001e0e:	bf98      	it	ls
 8001e10:	6823      	ldrls	r3, [r4, #0]
 8001e12:	f240 8099 	bls.w	8001f48 <RCM_RegisterRegConv+0x180>
 8001e16:	20ff      	movs	r0, #255	@ 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001e18:	bcf0      	pop	{r4, r5, r6, r7}
 8001e1a:	4770      	bx	lr
            (RCM_handle_array [i]->regADC == regConv->regADC))
 8001e1c:	6803      	ldr	r3, [r0, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d021      	beq.n	8001e68 <RCM_RegisterRegConv+0xa0>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001e24:	686e      	ldr	r6, [r5, #4]
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	f000 809f 	beq.w	8001f6a <RCM_RegisterRegConv+0x1a2>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e2c:	7932      	ldrb	r2, [r6, #4]
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	f000 80c1 	beq.w	8001fb6 <RCM_RegisterRegConv+0x1ee>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001e34:	68af      	ldr	r7, [r5, #8]
 8001e36:	2f00      	cmp	r7, #0
 8001e38:	d1dc      	bne.n	8001df4 <RCM_RegisterRegConv+0x2c>
 8001e3a:	e088      	b.n	8001f4e <RCM_RegisterRegConv+0x186>
 8001e3c:	686e      	ldr	r6, [r5, #4]
 8001e3e:	2e00      	cmp	r6, #0
 8001e40:	f000 80a6 	beq.w	8001f90 <RCM_RegisterRegConv+0x1c8>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e44:	7901      	ldrb	r1, [r0, #4]
 8001e46:	7933      	ldrb	r3, [r6, #4]
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	d069      	beq.n	8001f20 <RCM_RegisterRegConv+0x158>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001e4c:	68af      	ldr	r7, [r5, #8]
 8001e4e:	2f00      	cmp	r7, #0
 8001e50:	f000 80a9 	beq.w	8001fa6 <RCM_RegisterRegConv+0x1de>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8001e54:	4610      	mov	r0, r2
 8001e56:	e7ce      	b.n	8001df6 <RCM_RegisterRegConv+0x2e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e58:	2001      	movs	r0, #1
 8001e5a:	683a      	ldr	r2, [r7, #0]
            (RCM_handle_array [i]->regADC == regConv->regADC))
 8001e5c:	6823      	ldr	r3, [r4, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d1cc      	bne.n	8001dfc <RCM_RegisterRegConv+0x34>
      i++;
 8001e62:	2002      	movs	r0, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001e64:	4602      	mov	r2, r0
 8001e66:	e001      	b.n	8001e6c <RCM_RegisterRegConv+0xa4>
  uint8_t i=0;
 8001e68:	2000      	movs	r0, #0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001e6a:	4602      	mov	r2, r0
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001e6c:	4e58      	ldr	r6, [pc, #352]	@ (8001fd0 <RCM_RegisterRegConv+0x208>)
      RCM_handle_array [handle] = regConv;
 8001e6e:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
 8001e72:	2500      	movs	r5, #0
 8001e74:	46ac      	mov	ip, r5
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001e76:	f846 5032 	str.w	r5, [r6, r2, lsl #3]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e7a:	689d      	ldr	r5, [r3, #8]
 8001e7c:	f360 0c07 	bfi	ip, r0, #0, #8
 8001e80:	07ef      	lsls	r7, r5, #31
 8001e82:	f360 2c0f 	bfi	ip, r0, #8, #8
 8001e86:	d422      	bmi.n	8001ece <RCM_RegisterRegConv+0x106>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001e88:	685d      	ldr	r5, [r3, #4]
 8001e8a:	f025 0504 	bic.w	r5, r5, #4
 8001e8e:	605d      	str	r5, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001e90:	2504      	movs	r5, #4
 8001e92:	601d      	str	r5, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8001e94:	685d      	ldr	r5, [r3, #4]
 8001e96:	f025 0520 	bic.w	r5, r5, #32
 8001e9a:	605d      	str	r5, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8001e9c:	2520      	movs	r5, #32
 8001e9e:	601d      	str	r5, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001ea0:	689d      	ldr	r5, [r3, #8]
 8001ea2:	f025 4540 	bic.w	r5, r5, #3221225472	@ 0xc0000000
 8001ea6:	f025 053f 	bic.w	r5, r5, #63	@ 0x3f
 8001eaa:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 8001eae:	609d      	str	r5, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001eb0:	689d      	ldr	r5, [r3, #8]
 8001eb2:	2d00      	cmp	r5, #0
 8001eb4:	dbfc      	blt.n	8001eb0 <RCM_RegisterRegConv+0xe8>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8001eb6:	681d      	ldr	r5, [r3, #0]
 8001eb8:	07ee      	lsls	r6, r5, #31
 8001eba:	d408      	bmi.n	8001ece <RCM_RegisterRegConv+0x106>
  MODIFY_REG(ADCx->CR,
 8001ebc:	4e45      	ldr	r6, [pc, #276]	@ (8001fd4 <RCM_RegisterRegConv+0x20c>)
 8001ebe:	689d      	ldr	r5, [r3, #8]
 8001ec0:	4035      	ands	r5, r6
 8001ec2:	f045 0501 	orr.w	r5, r5, #1
 8001ec6:	609d      	str	r5, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8001ec8:	681d      	ldr	r5, [r3, #0]
 8001eca:	07ed      	lsls	r5, r5, #31
 8001ecc:	d5f7      	bpl.n	8001ebe <RCM_RegisterRegConv+0xf6>
      RCM_NoInj_array [handle].enable = false;
 8001ece:	4e42      	ldr	r6, [pc, #264]	@ (8001fd8 <RCM_RegisterRegConv+0x210>)
 8001ed0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ed4:	0055      	lsls	r5, r2, #1
      RCM_NoInj_array [handle].prev = handle;
 8001ed6:	1d37      	adds	r7, r6, #4
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001ed8:	2201      	movs	r2, #1
      RCM_NoInj_array [handle].prev = handle;
 8001eda:	f827 c005 	strh.w	ip, [r7, r5]
      RCM_NoInj_array [handle].enable = false;
 8001ede:	2700      	movs	r7, #0
 8001ee0:	5577      	strb	r7, [r6, r5]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001ee2:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001ee4:	408a      	lsls	r2, r1
 8001ee6:	f025 050f 	bic.w	r5, r5, #15
 8001eea:	2909      	cmp	r1, #9
 8001eec:	631d      	str	r5, [r3, #48]	@ 0x30
 8001eee:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8001ef2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 8001ef6:	d832      	bhi.n	8001f5e <RCM_RegisterRegConv+0x196>
 8001ef8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001efc:	0dd5      	lsrs	r5, r2, #23
 8001efe:	f005 0504 	and.w	r5, r5, #4
 8001f02:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8001f04:	68a4      	ldr	r4, [r4, #8]
 8001f06:	5959      	ldr	r1, [r3, r5]
 8001f08:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8001f0c:	2607      	movs	r6, #7
 8001f0e:	4094      	lsls	r4, r2
 8001f10:	fa06 f202 	lsl.w	r2, r6, r2
 8001f14:	ea21 0202 	bic.w	r2, r1, r2
 8001f18:	4322      	orrs	r2, r4
 8001f1a:	515a      	str	r2, [r3, r5]
}
 8001f1c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f1e:	4770      	bx	lr
 8001f20:	6823      	ldr	r3, [r4, #0]
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8001f22:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001f24:	6832      	ldr	r2, [r6, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d03f      	beq.n	8001faa <RCM_RegisterRegConv+0x1e2>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001f2a:	68af      	ldr	r7, [r5, #8]
 8001f2c:	2f00      	cmp	r7, #0
 8001f2e:	f47f af62 	bne.w	8001df6 <RCM_RegisterRegConv+0x2e>
 8001f32:	2804      	cmp	r0, #4
 8001f34:	d80b      	bhi.n	8001f4e <RCM_RegisterRegConv+0x186>
 8001f36:	4638      	mov	r0, r7
 8001f38:	68ea      	ldr	r2, [r5, #12]
 8001f3a:	b12a      	cbz	r2, 8001f48 <RCM_RegisterRegConv+0x180>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001f3c:	7916      	ldrb	r6, [r2, #4]
 8001f3e:	428e      	cmp	r6, r1
 8001f40:	d102      	bne.n	8001f48 <RCM_RegisterRegConv+0x180>
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d01d      	beq.n	8001f84 <RCM_RegisterRegConv+0x1bc>
      RCM_handle_array [handle] = regConv;
 8001f48:	4602      	mov	r2, r0
 8001f4a:	e78f      	b.n	8001e6c <RCM_RegisterRegConv+0xa4>
 8001f4c:	6803      	ldr	r3, [r0, #0]
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001f4e:	68ea      	ldr	r2, [r5, #12]
 8001f50:	b112      	cbz	r2, 8001f58 <RCM_RegisterRegConv+0x190>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001f52:	7910      	ldrb	r0, [r2, #4]
 8001f54:	4288      	cmp	r0, r1
 8001f56:	d030      	beq.n	8001fba <RCM_RegisterRegConv+0x1f2>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8001f58:	2002      	movs	r0, #2
      RCM_handle_array [handle] = regConv;
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	e786      	b.n	8001e6c <RCM_RegisterRegConv+0xa4>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001f5e:	3d1e      	subs	r5, #30
 8001f60:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 8001f64:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8001f68:	e7c8      	b.n	8001efc <RCM_RegisterRegConv+0x134>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001f6a:	68af      	ldr	r7, [r5, #8]
 8001f6c:	b307      	cbz	r7, 8001fb0 <RCM_RegisterRegConv+0x1e8>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001f6e:	793b      	ldrb	r3, [r7, #4]
 8001f70:	428b      	cmp	r3, r1
 8001f72:	f43f af71 	beq.w	8001e58 <RCM_RegisterRegConv+0x90>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001f76:	68eb      	ldr	r3, [r5, #12]
 8001f78:	b31b      	cbz	r3, 8001fc2 <RCM_RegisterRegConv+0x1fa>
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	e742      	b.n	8001e04 <RCM_RegisterRegConv+0x3c>
 8001f7e:	2804      	cmp	r0, #4
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	d9e1      	bls.n	8001f48 <RCM_RegisterRegConv+0x180>
 8001f84:	2003      	movs	r0, #3
      RCM_handle_array [handle] = regConv;
 8001f86:	4602      	mov	r2, r0
 8001f88:	e770      	b.n	8001e6c <RCM_RegisterRegConv+0xa4>
 8001f8a:	6823      	ldr	r3, [r4, #0]
  uint8_t handle=255;
 8001f8c:	20ff      	movs	r0, #255	@ 0xff
 8001f8e:	e7c9      	b.n	8001f24 <RCM_RegisterRegConv+0x15c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001f90:	68af      	ldr	r7, [r5, #8]
 8001f92:	7901      	ldrb	r1, [r0, #4]
 8001f94:	b13f      	cbz	r7, 8001fa6 <RCM_RegisterRegConv+0x1de>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8001f96:	4630      	mov	r0, r6
 8001f98:	e72d      	b.n	8001df6 <RCM_RegisterRegConv+0x2e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001f9a:	681a      	ldr	r2, [r3, #0]
            (RCM_handle_array [i]->regADC == regConv->regADC))
 8001f9c:	6823      	ldr	r3, [r4, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	f47f af34 	bne.w	8001e0c <RCM_RegisterRegConv+0x44>
 8001fa4:	e7ee      	b.n	8001f84 <RCM_RegisterRegConv+0x1bc>
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	e7c5      	b.n	8001f36 <RCM_RegisterRegConv+0x16e>
      i++;
 8001faa:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fac:	4602      	mov	r2, r0
 8001fae:	e75d      	b.n	8001e6c <RCM_RegisterRegConv+0xa4>
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	e7c0      	b.n	8001f38 <RCM_RegisterRegConv+0x170>
  uint8_t handle=255;
 8001fb6:	20ff      	movs	r0, #255	@ 0xff
 8001fb8:	e7b4      	b.n	8001f24 <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d0e1      	beq.n	8001f84 <RCM_RegisterRegConv+0x1bc>
 8001fc0:	e7ca      	b.n	8001f58 <RCM_RegisterRegConv+0x190>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	6823      	ldr	r3, [r4, #0]
      RCM_handle_array [handle] = regConv;
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	e750      	b.n	8001e6c <RCM_RegisterRegConv+0xa4>
 8001fca:	bf00      	nop
 8001fcc:	20000a14 	.word	0x20000a14
 8001fd0:	200009f4 	.word	0x200009f4
 8001fd4:	7fffffc0 	.word	0x7fffffc0
 8001fd8:	200009dc 	.word	0x200009dc

08001fdc <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 8001fdc:	4b5d      	ldr	r3, [pc, #372]	@ (8002154 <RCM_ExecRegularConv+0x178>)
 8001fde:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 8001fe2:	b530      	push	{r4, r5, lr}
  if (RCM_NoInj_array [handle].enable == false)
 8001fe4:	f813 1012 	ldrb.w	r1, [r3, r2, lsl #1]
 8001fe8:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8001fec:	2900      	cmp	r1, #0
 8001fee:	d138      	bne.n	8002062 <RCM_ExecRegularConv+0x86>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	b992      	cbnz	r2, 800201a <RCM_ExecRegularConv+0x3e>
  uint8_t LastEnable = RCM_MAX_CONV;
 8001ff4:	2104      	movs	r1, #4
      if (RCM_NoInj_array [i].enable == true)
 8001ff6:	799a      	ldrb	r2, [r3, #6]
 8001ff8:	2a00      	cmp	r2, #0
 8001ffa:	d173      	bne.n	80020e4 <RCM_ExecRegularConv+0x108>
 8001ffc:	7b1a      	ldrb	r2, [r3, #12]
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d175      	bne.n	80020ee <RCM_ExecRegularConv+0x112>
 8002002:	7c9a      	ldrb	r2, [r3, #18]
 8002004:	2a00      	cmp	r2, #0
 8002006:	f000 8098 	beq.w	800213a <RCM_ExecRegularConv+0x15e>
      {
        if (RCM_NoInj_array [i].next > handle)
 800200a:	7dda      	ldrb	r2, [r3, #23]
 800200c:	4282      	cmp	r2, r0
 800200e:	f240 809e 	bls.w	800214e <RCM_ExecRegularConv+0x172>
 8002012:	f04f 0e03 	mov.w	lr, #3
 8002016:	4671      	mov	r1, lr
 8002018:	e003      	b.n	8002022 <RCM_ExecRegularConv+0x46>
 800201a:	795a      	ldrb	r2, [r3, #5]
 800201c:	4290      	cmp	r0, r2
 800201e:	d2ea      	bcs.n	8001ff6 <RCM_ExecRegularConv+0x1a>
  uint8_t i=0;
 8002020:	468e      	mov	lr, r1
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array [handle].next = formerNext;
 8002022:	eb0c 0400 	add.w	r4, ip, r0
 8002026:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array [handle].prev = i;
          RCM_NoInj_array [i].next = handle;
 800202a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 800202e:	7162      	strb	r2, [r4, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 8002030:	eb02 0242 	add.w	r2, r2, r2, lsl #1
          RCM_NoInj_array [handle].prev = i;
 8002034:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array [formerNext].prev = handle;
 8002038:	eb03 0242 	add.w	r2, r3, r2, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800203c:	4c46      	ldr	r4, [pc, #280]	@ (8002158 <RCM_ExecRegularConv+0x17c>)
          RCM_NoInj_array [formerNext].prev = handle;
 800203e:	7110      	strb	r0, [r2, #4]
          RCM_NoInj_array [i].next = handle;
 8002040:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002044:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array [i].next = handle;
 8002046:	7148      	strb	r0, [r1, #5]
    RCM_NoInj_array [handle].enable = true;
 8002048:	eb0c 0100 	add.w	r1, ip, r0
 800204c:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800204e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 8002052:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002056:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800205a:	7852      	ldrb	r2, [r2, #1]
 800205c:	42aa      	cmp	r2, r5
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 800205e:	bf18      	it	ne
 8002060:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8002062:	4a3e      	ldr	r2, [pc, #248]	@ (800215c <RCM_ExecRegularConv+0x180>)
 8002064:	f892 206a 	ldrb.w	r2, [r2, #106]	@ 0x6a
 8002068:	2a00      	cmp	r2, #0
 800206a:	d136      	bne.n	80020da <RCM_ExecRegularConv+0xfe>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800206c:	4a3c      	ldr	r2, [pc, #240]	@ (8002160 <RCM_ExecRegularConv+0x184>)
 800206e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002072:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002074:	6811      	ldr	r1, [r2, #0]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002076:	2201      	movs	r2, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002078:	2c09      	cmp	r4, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800207a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800207e:	fa02 f204 	lsl.w	r2, r2, r4
 8002082:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8002086:	bf84      	itt	hi
 8002088:	3d1e      	subhi	r5, #30
 800208a:	ea42 5205 	orrhi.w	r2, r2, r5, lsl #20
  MODIFY_REG(*preg,
 800208e:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002090:	bf94      	ite	ls
 8002092:	ea42 5205 	orrls.w	r2, r2, r5, lsl #20
 8002096:	f042 7200 	orrhi.w	r2, r2, #33554432	@ 0x2000000
 800209a:	0d12      	lsrs	r2, r2, #20
 800209c:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
 80020a0:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 80020a4:	4322      	orrs	r2, r4
 80020a6:	630a      	str	r2, [r1, #48]	@ 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80020a8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 80020aa:	688a      	ldr	r2, [r1, #8]
 80020ac:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020b0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80020b4:	f042 0204 	orr.w	r2, r2, #4
 80020b8:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80020ba:	680a      	ldr	r2, [r1, #0]
 80020bc:	0752      	lsls	r2, r2, #29
 80020be:	d5fc      	bpl.n	80020ba <RCM_ExecRegularConv+0xde>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 80020c0:	eb0c 0200 	add.w	r2, ip, r0
 80020c4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 80020c8:	4c23      	ldr	r4, [pc, #140]	@ (8002158 <RCM_ExecRegularConv+0x17c>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80020ca:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 80020cc:	f892 e005 	ldrb.w	lr, [r2, #5]
 80020d0:	8055      	strh	r5, [r2, #2]
    RCM_NoInj_array [handle].status = valid;
 80020d2:	2102      	movs	r1, #2
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 80020d4:	f884 e000 	strb.w	lr, [r4]
    RCM_NoInj_array [handle].status = valid;
 80020d8:	7051      	strb	r1, [r2, #1]
  }
  retVal = RCM_NoInj_array [handle].value;
 80020da:	4484      	add	ip, r0
 80020dc:	eb03 034c 	add.w	r3, r3, ip, lsl #1
return retVal;
}
 80020e0:	8858      	ldrh	r0, [r3, #2]
 80020e2:	bd30      	pop	{r4, r5, pc}
        if (RCM_NoInj_array [i].next > handle)
 80020e4:	7ada      	ldrb	r2, [r3, #11]
 80020e6:	4290      	cmp	r0, r2
 80020e8:	d31d      	bcc.n	8002126 <RCM_ExecRegularConv+0x14a>
      if (RCM_NoInj_array [i].enable == true)
 80020ea:	7b1a      	ldrb	r2, [r3, #12]
 80020ec:	b1fa      	cbz	r2, 800212e <RCM_ExecRegularConv+0x152>
        if (RCM_NoInj_array [i].next > handle)
 80020ee:	7c5a      	ldrb	r2, [r3, #17]
 80020f0:	4282      	cmp	r2, r0
 80020f2:	d828      	bhi.n	8002146 <RCM_ExecRegularConv+0x16a>
      if (RCM_NoInj_array [i].enable == true)
 80020f4:	7c9a      	ldrb	r2, [r3, #18]
 80020f6:	2a00      	cmp	r2, #0
 80020f8:	d187      	bne.n	800200a <RCM_ExecRegularConv+0x2e>
          LastEnable = i;
 80020fa:	2202      	movs	r2, #2
         formerNext = RCM_NoInj_array [LastEnable].next;
 80020fc:	4611      	mov	r1, r2
 80020fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 8002102:	eb0c 0400 	add.w	r4, ip, r0
 8002106:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array [LastEnable].next;
 800210a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 800210e:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array [LastEnable].next;
 8002110:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array [handle].next = formerNext;
 8002112:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 8002114:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002118:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800211c:	4c0e      	ldr	r4, [pc, #56]	@ (8002158 <RCM_ExecRegularConv+0x17c>)
         RCM_NoInj_array [formerNext].prev = handle;
 800211e:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array [LastEnable].next = handle;
 8002120:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002122:	7822      	ldrb	r2, [r4, #0]
 8002124:	e790      	b.n	8002048 <RCM_ExecRegularConv+0x6c>
        if (RCM_NoInj_array [i].next > handle)
 8002126:	f04f 0e01 	mov.w	lr, #1
      if (RCM_NoInj_array [i].enable == true)
 800212a:	4671      	mov	r1, lr
 800212c:	e779      	b.n	8002022 <RCM_ExecRegularConv+0x46>
 800212e:	7c9a      	ldrb	r2, [r3, #18]
 8002130:	2a00      	cmp	r2, #0
 8002132:	f47f af6a 	bne.w	800200a <RCM_ExecRegularConv+0x2e>
          LastEnable = i;
 8002136:	2201      	movs	r2, #1
 8002138:	e7e0      	b.n	80020fc <RCM_ExecRegularConv+0x120>
       if (LastEnable != RCM_MAX_CONV )
 800213a:	2900      	cmp	r1, #0
 800213c:	d0de      	beq.n	80020fc <RCM_ExecRegularConv+0x120>
         RCM_currentHandle = handle;
 800213e:	4c06      	ldr	r4, [pc, #24]	@ (8002158 <RCM_ExecRegularConv+0x17c>)
 8002140:	4602      	mov	r2, r0
 8002142:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 8002144:	e780      	b.n	8002048 <RCM_ExecRegularConv+0x6c>
        if (RCM_NoInj_array [i].next > handle)
 8002146:	f04f 0e02 	mov.w	lr, #2
      if (RCM_NoInj_array [i].enable == true)
 800214a:	4671      	mov	r1, lr
 800214c:	e769      	b.n	8002022 <RCM_ExecRegularConv+0x46>
 800214e:	2103      	movs	r1, #3
          LastEnable = i;
 8002150:	460a      	mov	r2, r1
 8002152:	e7d4      	b.n	80020fe <RCM_ExecRegularConv+0x122>
 8002154:	200009dc 	.word	0x200009dc
 8002158:	200009d9 	.word	0x200009d9
 800215c:	2000041c 	.word	0x2000041c
 8002160:	20000a14 	.word	0x20000a14

08002164 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002164:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8002166:	4c12      	ldr	r4, [pc, #72]	@ (80021b0 <RCM_ExecUserConv+0x4c>)
 8002168:	7823      	ldrb	r3, [r4, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d000      	beq.n	8002170 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 800216e:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002170:	4d10      	ldr	r5, [pc, #64]	@ (80021b4 <RCM_ExecUserConv+0x50>)
 8002172:	7828      	ldrb	r0, [r5, #0]
 8002174:	f7ff ff32 	bl	8001fdc <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002178:	782b      	ldrb	r3, [r5, #0]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800217a:	4d0f      	ldr	r5, [pc, #60]	@ (80021b8 <RCM_ExecUserConv+0x54>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800217c:	4a0f      	ldr	r2, [pc, #60]	@ (80021bc <RCM_ExecUserConv+0x58>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800217e:	8028      	strh	r0, [r5, #0]
 8002180:	4601      	mov	r1, r0
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002182:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8002186:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800218a:	7852      	ldrb	r2, [r2, #1]
 800218c:	b10a      	cbz	r2, 8002192 <RCM_ExecUserConv+0x2e>
      RCM_UserConvState = RCM_USERCONV_EOC;
 800218e:	2202      	movs	r2, #2
 8002190:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002192:	4a0b      	ldr	r2, [pc, #44]	@ (80021c0 <RCM_ExecUserConv+0x5c>)
 8002194:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8002198:	2d00      	cmp	r5, #0
 800219a:	d0e8      	beq.n	800216e <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800219c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80021a0:	4618      	mov	r0, r3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80021a6:	6852      	ldr	r2, [r2, #4]
 80021a8:	462b      	mov	r3, r5
}
 80021aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80021ae:	4718      	bx	r3
 80021b0:	200009d4 	.word	0x200009d4
 80021b4:	200009d8 	.word	0x200009d8
 80021b8:	200009d6 	.word	0x200009d6
 80021bc:	200009dc 	.word	0x200009dc
 80021c0:	200009f4 	.word	0x200009f4

080021c4 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 80021c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <RCM_ExecNextConv+0x7c>)
 80021c6:	491f      	ldr	r1, [pc, #124]	@ (8002244 <RCM_ExecNextConv+0x80>)
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80021ce:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80021d2:	b3a3      	cbz	r3, 800223e <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80021d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002248 <RCM_ExecNextConv+0x84>)
{
 80021d6:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80021d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021dc:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80021de:	2404      	movs	r4, #4
 80021e0:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80021e2:	f893 c004 	ldrb.w	ip, [r3, #4]
 80021e6:	2301      	movs	r3, #1
 80021e8:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80021ec:	f1bc 0f09 	cmp.w	ip, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80021f0:	fa03 f30c 	lsl.w	r3, r3, ip
 80021f4:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 80021f8:	bf84      	itt	hi
 80021fa:	3c1e      	subhi	r4, #30
 80021fc:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 8002200:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002204:	bf98      	it	ls
 8002206:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 800220a:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800220c:	bf88      	it	hi
 800220e:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 8002212:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002214:	0d1b      	lsrs	r3, r3, #20
 8002216:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800221a:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 800221e:	4313      	orrs	r3, r2
 8002220:	6303      	str	r3, [r0, #48]	@ 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002222:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8002224:	6883      	ldr	r3, [r0, #8]
 8002226:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 800222a:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 800222e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002232:	2401      	movs	r4, #1
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	6083      	str	r3, [r0, #8]
 800223a:	704c      	strb	r4, [r1, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 800223c:	bd10      	pop	{r4, pc}
 800223e:	4770      	bx	lr
 8002240:	200009d9 	.word	0x200009d9
 8002244:	200009dc 	.word	0x200009dc
 8002248:	20000a14 	.word	0x20000a14

0800224c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 800224c:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 800224e:	4c10      	ldr	r4, [pc, #64]	@ (8002290 <RCM_ReadOngoingConv+0x44>)
 8002250:	4a10      	ldr	r2, [pc, #64]	@ (8002294 <RCM_ReadOngoingConv+0x48>)
 8002252:	7823      	ldrb	r3, [r4, #0]
 8002254:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002258:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800225c:	0058      	lsls	r0, r3, #1
 800225e:	f891 c001 	ldrb.w	ip, [r1, #1]
 8002262:	f1bc 0f01 	cmp.w	ip, #1
 8002266:	d006      	beq.n	8002276 <RCM_ReadOngoingConv+0x2a>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8002268:	4403      	add	r3, r0
 800226a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800226e:	7953      	ldrb	r3, [r2, #5]
 8002270:	7023      	strb	r3, [r4, #0]
}
 8002272:	bc70      	pop	{r4, r5, r6}
 8002274:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8002276:	4d08      	ldr	r5, [pc, #32]	@ (8002298 <RCM_ReadOngoingConv+0x4c>)
 8002278:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 800227c:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800227e:	682e      	ldr	r6, [r5, #0]
 8002280:	0776      	lsls	r6, r6, #29
 8002282:	d5f1      	bpl.n	8002268 <RCM_ReadOngoingConv+0x1c>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002284:	6c2d      	ldr	r5, [r5, #64]	@ 0x40
 8002286:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8002288:	2502      	movs	r5, #2
 800228a:	704d      	strb	r5, [r1, #1]
 800228c:	e7ec      	b.n	8002268 <RCM_ReadOngoingConv+0x1c>
 800228e:	bf00      	nop
 8002290:	200009d9 	.word	0x200009d9
 8002294:	200009dc 	.word	0x200009dc
 8002298:	20000a14 	.word	0x20000a14

0800229c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800229c:	b500      	push	{lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	4b0e      	ldr	r3, [pc, #56]	@ (80022d8 <HAL_MspInit+0x3c>)
 80022a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022a2:	f042 0201 	orr.w	r2, r2, #1
{
 80022a6:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80022aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022ac:	f002 0201 	and.w	r2, r2, #1
 80022b0:	9200      	str	r2, [sp, #0]
 80022b2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022b6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80022ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80022bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80022c4:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80022c8:	f001 fd4e 	bl	8003d68 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022cc:	b003      	add	sp, #12
 80022ce:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80022d2:	f002 b8f7 	b.w	80044c4 <HAL_PWREx_DisableUCPDDeadBattery>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	00000000 	.word	0x00000000

080022e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022e0:	b510      	push	{r4, lr}
 80022e2:	4604      	mov	r4, r0
 80022e4:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e8:	2244      	movs	r2, #68	@ 0x44
 80022ea:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80022f0:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80022f4:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f6:	f005 fb87 	bl	8007a08 <memset>
  if(hadc->Instance==ADC1)
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002300:	d004      	beq.n	800230c <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002302:	4a3b      	ldr	r2, [pc, #236]	@ (80023f0 <HAL_ADC_MspInit+0x110>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d033      	beq.n	8002370 <HAL_ADC_MspInit+0x90>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002308:	b01a      	add	sp, #104	@ 0x68
 800230a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800230c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002310:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002314:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002316:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002318:	9318      	str	r3, [sp, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800231a:	f002 fc8b 	bl	8004c34 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	2800      	cmp	r0, #0
 8002320:	d157      	bne.n	80023d2 <HAL_ADC_MspInit+0xf2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002322:	4a34      	ldr	r2, [pc, #208]	@ (80023f4 <HAL_ADC_MspInit+0x114>)
 8002324:	6813      	ldr	r3, [r2, #0]
 8002326:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002328:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800232a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800232c:	d109      	bne.n	8002342 <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800232e:	4b32      	ldr	r3, [pc, #200]	@ (80023f8 <HAL_ADC_MspInit+0x118>)
 8002330:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002332:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002336:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <HAL_ADC_MspInit+0x118>)
 8002344:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 800234e:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 80023e0 <HAL_ADC_MspInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8002358:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 800235c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8002360:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002364:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8002368:	f001 fe7c 	bl	8004064 <HAL_GPIO_Init>
}
 800236c:	b01a      	add	sp, #104	@ 0x68
 800236e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002370:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002374:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002378:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800237a:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800237c:	9318      	str	r3, [sp, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237e:	f002 fc59 	bl	8004c34 <HAL_RCCEx_PeriphCLKConfig>
 8002382:	bb48      	cbnz	r0, 80023d8 <HAL_ADC_MspInit+0xf8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002384:	4a1b      	ldr	r2, [pc, #108]	@ (80023f4 <HAL_ADC_MspInit+0x114>)
 8002386:	6813      	ldr	r3, [r2, #0]
 8002388:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800238a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800238c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800238e:	d109      	bne.n	80023a4 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_ADC_MspInit+0x118>)
 8002392:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002394:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002398:	64da      	str	r2, [r3, #76]	@ 0x4c
 800239a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023a0:	9302      	str	r3, [sp, #8]
 80023a2:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a4:	4b14      	ldr	r3, [pc, #80]	@ (80023f8 <HAL_ADC_MspInit+0x118>)
 80023a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	64da      	str	r2, [r3, #76]	@ 0x4c
 80023ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80023b0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80023e8 <HAL_ADC_MspInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80023ba:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80023be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80023c2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80023ca:	f001 fe4b 	bl	8004064 <HAL_GPIO_Init>
}
 80023ce:	b01a      	add	sp, #104	@ 0x68
 80023d0:	bd10      	pop	{r4, pc}
      Error_Handler();
 80023d2:	f7fe fb33 	bl	8000a3c <Error_Handler>
 80023d6:	e7a4      	b.n	8002322 <HAL_ADC_MspInit+0x42>
      Error_Handler();
 80023d8:	f7fe fb30 	bl	8000a3c <Error_Handler>
 80023dc:	e7d2      	b.n	8002384 <HAL_ADC_MspInit+0xa4>
 80023de:	bf00      	nop
 80023e0:	00000001 	.word	0x00000001
 80023e4:	00000003 	.word	0x00000003
 80023e8:	00000002 	.word	0x00000002
 80023ec:	00000003 	.word	0x00000003
 80023f0:	50000100 	.word	0x50000100
 80023f4:	20000a24 	.word	0x20000a24
 80023f8:	40021000 	.word	0x40021000

080023fc <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80023fc:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <HAL_CORDIC_MspInit+0x28>)
 80023fe:	6802      	ldr	r2, [r0, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d000      	beq.n	8002406 <HAL_CORDIC_MspInit+0xa>
 8002404:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002406:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 800240a:	f042 0208 	orr.w	r2, r2, #8
{
 800240e:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002410:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002414:	649a      	str	r2, [r3, #72]	@ 0x48
 8002416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002420:	b002      	add	sp, #8
 8002422:	4770      	bx	lr
 8002424:	40020c00 	.word	0x40020c00

08002428 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002428:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 800242a:	4a1b      	ldr	r2, [pc, #108]	@ (8002498 <HAL_DAC_MspInit+0x70>)
 800242c:	6801      	ldr	r1, [r0, #0]
{
 800242e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 8002432:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002438:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800243c:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC1)
 800243e:	d002      	beq.n	8002446 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002440:	b009      	add	sp, #36	@ 0x24
 8002442:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002446:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800244a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 800244e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8002490 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002454:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002458:	64da      	str	r2, [r3, #76]	@ 0x4c
 800245a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800245c:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8002460:	9200      	str	r2, [sp, #0]
 8002462:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002464:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8002474:	a902      	add	r1, sp, #8
 8002476:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 800247a:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8002480:	f001 fdf0 	bl	8004064 <HAL_GPIO_Init>
}
 8002484:	b009      	add	sp, #36	@ 0x24
 8002486:	f85d fb04 	ldr.w	pc, [sp], #4
 800248a:	bf00      	nop
 800248c:	f3af 8000 	nop.w
 8002490:	00000010 	.word	0x00000010
 8002494:	00000003 	.word	0x00000003
 8002498:	50000800 	.word	0x50000800

0800249c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 800249c:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_TIM_Base_MspInit+0x28>)
 800249e:	6802      	ldr	r2, [r0, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d000      	beq.n	80024a6 <HAL_TIM_Base_MspInit+0xa>
 80024a4:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024a6:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
{
 80024aa:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024b2:	661a      	str	r2, [r3, #96]	@ 0x60
 80024b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80024be:	b002      	add	sp, #8
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40012c00 	.word	0x40012c00

080024c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024c8:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80024ca:	4a20      	ldr	r2, [pc, #128]	@ (800254c <HAL_TIM_MspPostInit+0x84>)
 80024cc:	6801      	ldr	r1, [r0, #0]
{
 80024ce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80024d2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80024d8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80024dc:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80024de:	d001      	beq.n	80024e4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024e0:	b008      	add	sp, #32
 80024e2:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80024e8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80024ec:	f44f 60f0 	mov.w	r0, #1920	@ 0x780
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80024f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024fa:	f002 0201 	and.w	r2, r2, #1
 80024fe:	9200      	str	r2, [sp, #0]
 8002500:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002504:	f042 0202 	orr.w	r2, r2, #2
 8002508:	64da      	str	r2, [r3, #76]	@ 0x4c
 800250a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800250c:	2102      	movs	r1, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002512:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002516:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002518:	2602      	movs	r6, #2
 800251a:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800251c:	2406      	movs	r4, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	a902      	add	r1, sp, #8
 8002520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002524:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002526:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002528:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	f001 fd9a 	bl	8004064 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002530:	2203      	movs	r2, #3
 8002532:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002534:	4806      	ldr	r0, [pc, #24]	@ (8002550 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002536:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800253a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800253e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002542:	f001 fd8f 	bl	8004064 <HAL_GPIO_Init>
}
 8002546:	b008      	add	sp, #32
 8002548:	bdd0      	pop	{r4, r6, r7, pc}
 800254a:	bf00      	nop
 800254c:	40012c00 	.word	0x40012c00
 8002550:	48000400 	.word	0x48000400
 8002554:	00000000 	.word	0x00000000

08002558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002558:	b510      	push	{r4, lr}
 800255a:	4604      	mov	r4, r0
 800255c:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002560:	2244      	movs	r2, #68	@ 0x44
 8002562:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002568:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800256c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800256e:	f005 fa4b 	bl	8007a08 <memset>
  if(huart->Instance==USART3)
 8002572:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <HAL_UART_MspInit+0x90>)
 8002574:	6822      	ldr	r2, [r4, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d001      	beq.n	800257e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800257a:	b018      	add	sp, #96	@ 0x60
 800257c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800257e:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002580:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002582:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002584:	f002 fb56 	bl	8004c34 <HAL_RCCEx_PeriphCLKConfig>
 8002588:	bb10      	cbnz	r0, 80025d0 <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART3_CLK_ENABLE();
 800258a:	4b18      	ldr	r3, [pc, #96]	@ (80025ec <HAL_UART_MspInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258c:	4818      	ldr	r0, [pc, #96]	@ (80025f0 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800258e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002590:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002594:	659a      	str	r2, [r3, #88]	@ 0x58
 8002596:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002598:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800259c:	9200      	str	r2, [sp, #0]
 800259e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80025a2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80025d8 <HAL_UART_MspInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	f042 0202 	orr.w	r2, r2, #2
 80025aa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80025ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80025b2:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80025e0 <HAL_UART_MspInit+0x88>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025bc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025be:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80025c0:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c4:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025c6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c8:	f001 fd4c 	bl	8004064 <HAL_GPIO_Init>
}
 80025cc:	b018      	add	sp, #96	@ 0x60
 80025ce:	bd10      	pop	{r4, pc}
      Error_Handler();
 80025d0:	f7fe fa34 	bl	8000a3c <Error_Handler>
 80025d4:	e7d9      	b.n	800258a <HAL_UART_MspInit+0x32>
 80025d6:	bf00      	nop
 80025d8:	00000500 	.word	0x00000500
 80025dc:	00000002 	.word	0x00000002
	...
 80025e8:	40004800 	.word	0x40004800
 80025ec:	40021000 	.word	0x40021000
 80025f0:	48000400 	.word	0x48000400

080025f4 <ADC1_2_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 80025f4:	b508      	push	{r3, lr}
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80025f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025fa:	2240      	movs	r2, #64	@ 0x40
 80025fc:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  UI_DACUpdate(TSK_HighFrequencyTask());
 80025fe:	f7fe fec5 	bl	800138c <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */

 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 8002602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UI_DACUpdate(TSK_HighFrequencyTask());
 8002606:	f000 b94f 	b.w	80028a8 <UI_DACUpdate>
 800260a:	bf00      	nop

0800260c <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800260c:	4b03      	ldr	r3, [pc, #12]	@ (800261c <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800260e:	4804      	ldr	r0, [pc, #16]	@ (8002620 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002610:	f06f 0201 	mvn.w	r2, #1
 8002614:	611a      	str	r2, [r3, #16]
 8002616:	f003 be95 	b.w	8006344 <ICS_TIMx_UP_IRQHandler>
 800261a:	bf00      	nop
 800261c:	40012c00 	.word	0x40012c00
 8002620:	2000041c 	.word	0x2000041c

08002624 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8002624:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002626:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	0611      	lsls	r1, r2, #24
 800262c:	d505      	bpl.n	800263a <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800262e:	f06f 0280 	mvn.w	r2, #128	@ 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
      ICS_BRK_IRQHandler(&PWM_Handle_M1);
 8002632:	480a      	ldr	r0, [pc, #40]	@ (800265c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002634:	611a      	str	r2, [r3, #16]
 8002636:	f003 feb7 	bl	80063a8 <ICS_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800263a:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	05d2      	lsls	r2, r2, #23
 8002640:	d505      	bpl.n	800264e <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8002642:	f46f 7280 	mvn.w	r2, #256	@ 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    ICS_BRK2_IRQHandler(&PWM_Handle_M1);
 8002646:	4805      	ldr	r0, [pc, #20]	@ (800265c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002648:	611a      	str	r2, [r3, #16]
 800264a:	f003 fe8f 	bl	800636c <ICS_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800264e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002652:	f7fe be6f 	b.w	8001334 <MC_Scheduler>
 8002656:	bf00      	nop
 8002658:	40012c00 	.word	0x40012c00
 800265c:	2000041c 	.word	0x2000041c

08002660 <USART3_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002660:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002662:	4c18      	ldr	r4, [pc, #96]	@ (80026c4 <USART3_IRQHandler+0x64>)
 8002664:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	0691      	lsls	r1, r2, #26
 800266c:	d50b      	bpl.n	8002686 <USART3_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800266e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002670:	4620      	mov	r0, r4
 8002672:	b2c9      	uxtb	r1, r1
 8002674:	f005 f848 	bl	8007708 <UFCP_RX_IRQ_Handler>
 8002678:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 800267a:	2b01      	cmp	r3, #1
 800267c:	d01a      	beq.n	80026b4 <USART3_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 800267e:	2b02      	cmp	r3, #2
 8002680:	d01d      	beq.n	80026be <USART3_IRQHandler+0x5e>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002682:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	0612      	lsls	r2, r2, #24
 800268a:	d504      	bpl.n	8002696 <USART3_IRQHandler+0x36>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 800268c:	480d      	ldr	r0, [pc, #52]	@ (80026c4 <USART3_IRQHandler+0x64>)
 800268e:	f004 ff97 	bl	80075c0 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002692:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	071b      	lsls	r3, r3, #28
 800269a:	d50a      	bpl.n	80026b2 <USART3_IRQHandler+0x52>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 800269c:	4809      	ldr	r0, [pc, #36]	@ (80026c4 <USART3_IRQHandler+0x64>)
 800269e:	f005 f897 	bl	80077d0 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80026a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80026a6:	2208      	movs	r2, #8
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 80026a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026ac:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 80026ae:	f000 b90b 	b.w	80028c8 <UI_SerialCommunicationTimeOutStop>
}
 80026b2:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 80026b4:	f000 f90e 	bl	80028d4 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80026b8:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 80026bc:	e7e3      	b.n	8002686 <USART3_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 80026be:	f000 f903 	bl	80028c8 <UI_SerialCommunicationTimeOutStop>
 80026c2:	e7de      	b.n	8002682 <USART3_IRQHandler+0x22>
 80026c4:	20000000 	.word	0x20000000

080026c8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80026c8:	b538      	push	{r3, r4, r5, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80026ca:	f7fe ff83 	bl	80015d4 <TSK_HardwareFaultTask>
 80026ce:	4c18      	ldr	r4, [pc, #96]	@ (8002730 <HardFault_Handler+0x68>)
 80026d0:	2508      	movs	r5, #8

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80026d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	0711      	lsls	r1, r2, #28
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80026da:	4620      	mov	r0, r4
 80026dc:	d508      	bpl.n	80026f0 <HardFault_Handler+0x28>
 80026de:	f005 f877 	bl	80077d0 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80026e2:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80026e6:	621d      	str	r5, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 80026e8:	f000 f8ee 	bl	80028c8 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80026ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	0612      	lsls	r2, r2, #24
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 80026f4:	4620      	mov	r0, r4
 80026f6:	d513      	bpl.n	8002720 <HardFault_Handler+0x58>
 80026f8:	f004 ff62 	bl	80075c0 <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80026fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	0691      	lsls	r1, r2, #26
 8002704:	d5e7      	bpl.n	80026d6 <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002706:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002708:	4620      	mov	r0, r4
 800270a:	b2c9      	uxtb	r1, r1
 800270c:	f004 fffc 	bl	8007708 <UFCP_RX_IRQ_Handler>
 8002710:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002712:	2b01      	cmp	r3, #1
 8002714:	d008      	beq.n	8002728 <HardFault_Handler+0x60>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002716:	2b02      	cmp	r3, #2
 8002718:	d1db      	bne.n	80026d2 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 800271a:	f000 f8d5 	bl	80028c8 <UI_SerialCommunicationTimeOutStop>
 800271e:	e7d8      	b.n	80026d2 <HardFault_Handler+0xa>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	0692      	lsls	r2, r2, #26
 8002724:	d5d7      	bpl.n	80026d6 <HardFault_Handler+0xe>
 8002726:	e7ee      	b.n	8002706 <HardFault_Handler+0x3e>
          UI_SerialCommunicationTimeOutStart();
 8002728:	f000 f8d4 	bl	80028d4 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 800272c:	e7d1      	b.n	80026d2 <HardFault_Handler+0xa>
 800272e:	bf00      	nop
 8002730:	20000000 	.word	0x20000000

08002734 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002734:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002736:	4c0a      	ldr	r4, [pc, #40]	@ (8002760 <SysTick_Handler+0x2c>)
 8002738:	7823      	ldrb	r3, [r4, #0]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d006      	beq.n	800274c <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800273e:	3301      	adds	r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002748:	f7fe bf34 	b.w	80015b4 <MC_RunMotorControlTasks>
    HAL_IncTick();
 800274c:	f000 fe74 	bl	8003438 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002750:	f001 fb82 	bl	8003e58 <HAL_SYSTICK_IRQHandler>
 8002754:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002756:	7023      	strb	r3, [r4, #0]
}
 8002758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800275c:	f7fe bf2a 	b.w	80015b4 <MC_RunMotorControlTasks>
 8002760:	200006d4 	.word	0x200006d4

08002764 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <EXTI15_10_IRQHandler+0x14>)
 8002766:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8002768:	0492      	lsls	r2, r2, #18
 800276a:	d400      	bmi.n	800276e <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

}
 800276c:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800276e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002772:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002774:	f000 b8b4 	b.w	80028e0 <UI_HandleStartStopButton_cb>
 8002778:	40010400 	.word	0x40010400

0800277c <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 800277c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pDAC = &DAC_UI_Params;
      pDAC->_Super = UI_Params;
 8002780:	f8df a0d0 	ldr.w	sl, [pc, #208]	@ 8002854 <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;
 8002784:	f8df e0d0 	ldr.w	lr, [pc, #208]	@ 8002858 <UI_TaskInit+0xdc>
 8002788:	4d2d      	ldr	r5, [pc, #180]	@ (8002840 <UI_TaskInit+0xc4>)
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 800278a:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 800285c <UI_TaskInit+0xe0>
{
 800278e:	b087      	sub	sp, #28
 8002790:	4698      	mov	r8, r3
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8002792:	9000      	str	r0, [sp, #0]
{
 8002794:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002796:	9305      	str	r3, [sp, #20]
      pDAC->_Super = UI_Params;
 8002798:	4654      	mov	r4, sl
{
 800279a:	460e      	mov	r6, r1
 800279c:	4617      	mov	r7, r2
 800279e:	4681      	mov	r9, r0
      pDAC->_Super = UI_Params;
 80027a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a2:	46f4      	mov	ip, lr
 80027a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80027a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80027ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
      pDAC = &DAC_UI_Params;
 80027b2:	f8c5 e000 	str.w	lr, [r5]
      pDAC->_Super = UI_Params;
 80027b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80027ba:	4670      	mov	r0, lr
 80027bc:	4643      	mov	r3, r8
 80027be:	463a      	mov	r2, r7
 80027c0:	4631      	mov	r1, r6
 80027c2:	f000 f899 	bl	80028f8 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 80027c6:	6828      	ldr	r0, [r5, #0]
 80027c8:	f000 fab0 	bl	8002d2c <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
 80027cc:	6828      	ldr	r0, [r5, #0]
 80027ce:	2223      	movs	r2, #35	@ 0x23
 80027d0:	2100      	movs	r1, #0
 80027d2:	f000 fab3 	bl	8002d3c <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );
 80027d6:	6828      	ldr	r0, [r5, #0]
 80027d8:	2224      	movs	r2, #36	@ 0x24
 80027da:	2101      	movs	r1, #1
 80027dc:	f000 faae 	bl	8002d3c <UI_SetDAC>
    pMCP = &MCP_UI_Params;
 80027e0:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <UI_TaskInit+0xc8>)
    pMCP->_Super = UI_Params;
 80027e2:	46d6      	mov	lr, sl
    pMCP = &MCP_UI_Params;
 80027e4:	f8df a078 	ldr.w	sl, [pc, #120]	@ 8002860 <UI_TaskInit+0xe4>
    pMCP->_Super = UI_Params;
 80027e8:	469c      	mov	ip, r3
    pMCP = &MCP_UI_Params;
 80027ea:	f8ca 3000 	str.w	r3, [sl]
    pMCP->_Super = UI_Params;
 80027ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80027f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80027f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80027fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80027fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002802:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 8002806:	4658      	mov	r0, fp
 8002808:	f004 fed8 	bl	80075bc <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 800280c:	9b05      	ldr	r3, [sp, #20]
 800280e:	9302      	str	r3, [sp, #8]
 8002810:	682b      	ldr	r3, [r5, #0]
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <UI_TaskInit+0xcc>)
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	f8da 0000 	ldr.w	r0, [sl]
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <UI_TaskInit+0xd0>)
 800281e:	4a0c      	ldr	r2, [pc, #48]	@ (8002850 <UI_TaskInit+0xd4>)
 8002820:	4659      	mov	r1, fp
 8002822:	f7ff fa7f 	bl	8001d24 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002826:	f8da 0000 	ldr.w	r0, [sl]
 800282a:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 800282e:	4643      	mov	r3, r8
 8002830:	463a      	mov	r2, r7
 8002832:	4631      	mov	r1, r6

}
 8002834:	b007      	add	sp, #28
 8002836:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800283a:	f000 b85d 	b.w	80028f8 <UI_Init>
 800283e:	bf00      	nop
 8002840:	20000afc 	.word	0x20000afc
 8002844:	20000a2c 	.word	0x20000a2c
 8002848:	080077f1 	.word	0x080077f1
 800284c:	08007629 	.word	0x08007629
 8002850:	08007651 	.word	0x08007651
 8002854:	20000244 	.word	0x20000244
 8002858:	20000208 	.word	0x20000208
 800285c:	20000000 	.word	0x20000000
 8002860:	20000af8 	.word	0x20000af8

08002864 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002864:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <UI_Scheduler+0x38>)
 8002866:	8813      	ldrh	r3, [r2, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	b11b      	cbz	r3, 8002874 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 800286c:	8813      	ldrh	r3, [r2, #0]
 800286e:	3b01      	subs	r3, #1
 8002870:	b29b      	uxth	r3, r3
 8002872:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002874:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <UI_Scheduler+0x3c>)
 8002876:	8813      	ldrh	r3, [r2, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d903      	bls.n	8002886 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 800287e:	8813      	ldrh	r3, [r2, #0]
 8002880:	3b01      	subs	r3, #1
 8002882:	b29b      	uxth	r3, r3
 8002884:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002886:	4a07      	ldr	r2, [pc, #28]	@ (80028a4 <UI_Scheduler+0x40>)
 8002888:	8813      	ldrh	r3, [r2, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d903      	bls.n	8002898 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002890:	8813      	ldrh	r3, [r2, #0]
 8002892:	3b01      	subs	r3, #1
 8002894:	b29b      	uxth	r3, r3
 8002896:	8013      	strh	r3, [r2, #0]
  }
}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000a2a 	.word	0x20000a2a
 80028a0:	20000a28 	.word	0x20000a28
 80028a4:	200006d6 	.word	0x200006d6

080028a8 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 80028a8:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80028aa:	4d06      	ldr	r5, [pc, #24]	@ (80028c4 <UI_DACUpdate+0x1c>)
{
 80028ac:	4604      	mov	r4, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80028ae:	6828      	ldr	r0, [r5, #0]
 80028b0:	f000 f834 	bl	800291c <UI_GetSelectedMC>
 80028b4:	42a0      	cmp	r0, r4
 80028b6:	d000      	beq.n	80028ba <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 80028b8:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80028ba:	6828      	ldr	r0, [r5, #0]
}
 80028bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80028c0:	f000 ba38 	b.w	8002d34 <UI_DACExec>
 80028c4:	20000afc 	.word	0x20000afc

080028c8 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 80028c8:	4b01      	ldr	r3, [pc, #4]	@ (80028d0 <UI_SerialCommunicationTimeOutStop+0x8>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	801a      	strh	r2, [r3, #0]
}
 80028ce:	4770      	bx	lr
 80028d0:	20000a28 	.word	0x20000a28

080028d4 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80028d4:	4b01      	ldr	r3, [pc, #4]	@ (80028dc <UI_SerialCommunicationTimeOutStart+0x8>)
 80028d6:	224f      	movs	r2, #79	@ 0x4f
 80028d8:	801a      	strh	r2, [r3, #0]
}
 80028da:	4770      	bx	lr
 80028dc:	20000a28 	.word	0x20000a28

080028e0 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80028e0:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 80028e2:	f7fe f8b9 	bl	8000a58 <MC_GetSTMStateMotor1>
 80028e6:	b918      	cbnz	r0, 80028f0 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80028e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 80028ec:	f7fe b8a8 	b.w	8000a40 <MC_StartMotor1>
}
 80028f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 80028f4:	f7fe b8aa 	b.w	8000a4c <MC_StopMotor1>

080028f8 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 80028f8:	e9c0 2308 	strd	r2, r3, [r0, #32]
  pHandle->bDriveNum = bMCNum;
 80028fc:	7701      	strb	r1, [r0, #28]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 80028fe:	9b00      	ldr	r3, [sp, #0]
 8002900:	6283      	str	r3, [r0, #40]	@ 0x28
  pHandle->bSelectedDrive = 0u;
 8002902:	2100      	movs	r1, #0
 8002904:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop

0800290c <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 800290c:	7f03      	ldrb	r3, [r0, #28]
 800290e:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002910:	bf86      	itte	hi
 8002912:	f880 102c 	strbhi.w	r1, [r0, #44]	@ 0x2c
  bool retVal = true;
 8002916:	2001      	movhi	r0, #1
    retVal = false;
 8002918:	2000      	movls	r0, #0
  }
  return retVal;
}
 800291a:	4770      	bx	lr

0800291c <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 800291c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop

08002924 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002924:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002926:	6a04      	ldr	r4, [r0, #32]
 8002928:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800292c:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8002930:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002932:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8002934:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002936:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 800293a:	295b      	cmp	r1, #91	@ 0x5b
 800293c:	d85d      	bhi.n	80029fa <UI_SetReg+0xd6>
 800293e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002942:	0123      	.short	0x0123
 8002944:	005c005c 	.word	0x005c005c
 8002948:	005c0114 	.word	0x005c0114
 800294c:	010a010f 	.word	0x010a010f
 8002950:	01270132 	.word	0x01270132
 8002954:	00c400c9 	.word	0x00c400c9
 8002958:	00d800e3 	.word	0x00d800e3
 800295c:	00ce00d3 	.word	0x00ce00d3
 8002960:	00e80105 	.word	0x00e80105
 8002964:	005c00a8 	.word	0x005c00a8
 8002968:	008c005c 	.word	0x008c005c
 800296c:	005c0070 	.word	0x005c0070
 8002970:	005c005c 	.word	0x005c005c
 8002974:	005c005c 	.word	0x005c005c
 8002978:	005c005c 	.word	0x005c005c
 800297c:	005c005c 	.word	0x005c005c
 8002980:	005c005c 	.word	0x005c005c
 8002984:	005c005c 	.word	0x005c005c
 8002988:	005c005c 	.word	0x005c005c
 800298c:	005c005c 	.word	0x005c005c
 8002990:	005c005c 	.word	0x005c005c
 8002994:	005c005c 	.word	0x005c005c
 8002998:	005c005c 	.word	0x005c005c
 800299c:	005c005c 	.word	0x005c005c
 80029a0:	005c005c 	.word	0x005c005c
 80029a4:	005c005c 	.word	0x005c005c
 80029a8:	005c005c 	.word	0x005c005c
 80029ac:	005c005c 	.word	0x005c005c
 80029b0:	005c005c 	.word	0x005c005c
 80029b4:	005c005c 	.word	0x005c005c
 80029b8:	005c005c 	.word	0x005c005c
 80029bc:	005c005c 	.word	0x005c005c
 80029c0:	005c005c 	.word	0x005c005c
 80029c4:	005c006b 	.word	0x005c006b
 80029c8:	005c005c 	.word	0x005c005c
 80029cc:	005c005c 	.word	0x005c005c
 80029d0:	005c005c 	.word	0x005c005c
 80029d4:	005c005c 	.word	0x005c005c
 80029d8:	005c005c 	.word	0x005c005c
 80029dc:	005c005c 	.word	0x005c005c
 80029e0:	005c005c 	.word	0x005c005c
 80029e4:	005c005c 	.word	0x005c005c
 80029e8:	005c005c 	.word	0x005c005c
 80029ec:	005c005c 	.word	0x005c005c
 80029f0:	005c005c 	.word	0x005c005c
 80029f4:	005c005c 	.word	0x005c005c
 80029f8:	005f      	.short	0x005f
 80029fa:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 80029fc:	b003      	add	sp, #12
 80029fe:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002a00:	497b      	ldr	r1, [pc, #492]	@ (8002bf0 <UI_SetReg+0x2cc>)
 8002a02:	fb81 3104 	smull	r3, r1, r1, r4
 8002a06:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	b209      	sxth	r1, r1
 8002a0e:	4628      	mov	r0, r5
 8002a10:	f7fe f836 	bl	8000a80 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002a14:	2001      	movs	r0, #1
 8002a16:	e7f1      	b.n	80029fc <UI_SetReg+0xd8>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002a18:	b221      	sxth	r1, r4
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f7fe f91c 	bl	8000c58 <MCI_SetIdref>
    break;
 8002a20:	e7f8      	b.n	8002a14 <UI_SetReg+0xf0>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a22:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002a24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a28:	0f19      	lsrs	r1, r3, #28
 8002a2a:	2909      	cmp	r1, #9
 8002a2c:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002a30:	f000 80be 	beq.w	8002bb0 <UI_SetReg+0x28c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a34:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8002a38:	d1ec      	bne.n	8002a14 <UI_SetReg+0xf0>
        pSPD = pMCT->pSpeedSensorAux;
 8002a3a:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002a3c:	2d00      	cmp	r5, #0
 8002a3e:	d0e9      	beq.n	8002a14 <UI_SetReg+0xf0>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002a40:	aa01      	add	r2, sp, #4
 8002a42:	f10d 0102 	add.w	r1, sp, #2
 8002a46:	4628      	mov	r0, r5
 8002a48:	f004 fd76 	bl	8007538 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8002a4c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002a50:	b221      	sxth	r1, r4
 8002a52:	4628      	mov	r0, r5
 8002a54:	f004 fd7e 	bl	8007554 <STO_SetPLLGains>
    break;
 8002a58:	e7dc      	b.n	8002a14 <UI_SetReg+0xf0>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a5a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002a5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a60:	0f19      	lsrs	r1, r3, #28
 8002a62:	2909      	cmp	r1, #9
 8002a64:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002a68:	f000 80b3 	beq.w	8002bd2 <UI_SetReg+0x2ae>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a6c:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8002a70:	d1d0      	bne.n	8002a14 <UI_SetReg+0xf0>
        pSPD = pMCT->pSpeedSensorAux;
 8002a72:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002a74:	2d00      	cmp	r5, #0
 8002a76:	d0cd      	beq.n	8002a14 <UI_SetReg+0xf0>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002a78:	aa01      	add	r2, sp, #4
 8002a7a:	f10d 0102 	add.w	r1, sp, #2
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f004 fd5a 	bl	8007538 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8002a84:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002a88:	b222      	sxth	r2, r4
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	f004 fd62 	bl	8007554 <STO_SetPLLGains>
    break;
 8002a90:	e7c0      	b.n	8002a14 <UI_SetReg+0xf0>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a92:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002a94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a98:	0f19      	lsrs	r1, r3, #28
 8002a9a:	2909      	cmp	r1, #9
 8002a9c:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002aa0:	f000 8091 	beq.w	8002bc6 <UI_SetReg+0x2a2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aa4:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8002aa8:	d1b4      	bne.n	8002a14 <UI_SetReg+0xf0>
        pSPD = pMCT->pSpeedSensorAux;
 8002aaa:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002aac:	2d00      	cmp	r5, #0
 8002aae:	d0b1      	beq.n	8002a14 <UI_SetReg+0xf0>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002ab0:	aa01      	add	r2, sp, #4
 8002ab2:	f10d 0102 	add.w	r1, sp, #2
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	f004 fd32 	bl	8007520 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8002abc:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002ac0:	b222      	sxth	r2, r4
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f004 fd34 	bl	8007530 <STO_PLL_SetObserverGains>
    break;
 8002ac8:	e7a4      	b.n	8002a14 <UI_SetReg+0xf0>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002aca:	6850      	ldr	r0, [r2, #4]
 8002acc:	b221      	sxth	r1, r4
 8002ace:	f003 fd1f 	bl	8006510 <PID_SetKI>
    break;
 8002ad2:	e79f      	b.n	8002a14 <UI_SetReg+0xf0>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002ad4:	6850      	ldr	r0, [r2, #4]
 8002ad6:	b221      	sxth	r1, r4
 8002ad8:	f003 fd18 	bl	800650c <PID_SetKP>
    break;
 8002adc:	e79a      	b.n	8002a14 <UI_SetReg+0xf0>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002ade:	6890      	ldr	r0, [r2, #8]
 8002ae0:	b221      	sxth	r1, r4
 8002ae2:	f003 fd15 	bl	8006510 <PID_SetKI>
    break;
 8002ae6:	e795      	b.n	8002a14 <UI_SetReg+0xf0>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002ae8:	6890      	ldr	r0, [r2, #8]
 8002aea:	b221      	sxth	r1, r4
 8002aec:	f003 fd0e 	bl	800650c <PID_SetKP>
    break;
 8002af0:	e790      	b.n	8002a14 <UI_SetReg+0xf0>
      currComp = MCI_GetIqdref(pMCI);
 8002af2:	4628      	mov	r0, r5
 8002af4:	f7fe f88e 	bl	8000c14 <MCI_GetIqdref>
 8002af8:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002afa:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002afe:	9901      	ldr	r1, [sp, #4]
 8002b00:	4628      	mov	r0, r5
 8002b02:	f7fd ffd1 	bl	8000aa8 <MCI_SetCurrentReferences>
    break;
 8002b06:	e785      	b.n	8002a14 <UI_SetReg+0xf0>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002b08:	6850      	ldr	r0, [r2, #4]
 8002b0a:	b221      	sxth	r1, r4
 8002b0c:	f003 fd10 	bl	8006530 <PID_SetKD>
    break;
 8002b10:	e780      	b.n	8002a14 <UI_SetReg+0xf0>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002b12:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002b14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b18:	0f19      	lsrs	r1, r3, #28
 8002b1a:	2909      	cmp	r1, #9
 8002b1c:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002b20:	d04c      	beq.n	8002bbc <UI_SetReg+0x298>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b22:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8002b26:	f47f af75 	bne.w	8002a14 <UI_SetReg+0xf0>
        pSPD = pMCT->pSpeedSensorAux;
 8002b2a:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002b2c:	2d00      	cmp	r5, #0
 8002b2e:	f43f af71 	beq.w	8002a14 <UI_SetReg+0xf0>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002b32:	aa01      	add	r2, sp, #4
 8002b34:	f10d 0102 	add.w	r1, sp, #2
 8002b38:	4628      	mov	r0, r5
 8002b3a:	f004 fcf1 	bl	8007520 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8002b3e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002b42:	b221      	sxth	r1, r4
 8002b44:	4628      	mov	r0, r5
 8002b46:	f004 fcf3 	bl	8007530 <STO_PLL_SetObserverGains>
    break;
 8002b4a:	e763      	b.n	8002a14 <UI_SetReg+0xf0>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002b4c:	6890      	ldr	r0, [r2, #8]
 8002b4e:	b221      	sxth	r1, r4
 8002b50:	f003 fcee 	bl	8006530 <PID_SetKD>
    break;
 8002b54:	e75e      	b.n	8002a14 <UI_SetReg+0xf0>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002b56:	6810      	ldr	r0, [r2, #0]
 8002b58:	b221      	sxth	r1, r4
 8002b5a:	f003 fcd9 	bl	8006510 <PID_SetKI>
    break;
 8002b5e:	e759      	b.n	8002a14 <UI_SetReg+0xf0>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002b60:	6810      	ldr	r0, [r2, #0]
 8002b62:	b221      	sxth	r1, r4
 8002b64:	f003 fcd2 	bl	800650c <PID_SetKP>
    break;
 8002b68:	e754      	b.n	8002a14 <UI_SetReg+0xf0>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002b6a:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8002b6e:	d036      	beq.n	8002bde <UI_SetReg+0x2ba>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002b70:	2c01      	cmp	r4, #1
 8002b72:	f47f af4f 	bne.w	8002a14 <UI_SetReg+0xf0>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002b76:	4628      	mov	r0, r5
 8002b78:	f7fe f82a 	bl	8000bd0 <MCI_GetMecSpeedRefUnit>
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4628      	mov	r0, r5
 8002b82:	f7fd ff7d 	bl	8000a80 <MCI_ExecSpeedRamp>
 8002b86:	e745      	b.n	8002a14 <UI_SetReg+0xf0>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002b88:	b2e1      	uxtb	r1, r4
 8002b8a:	f7ff febf 	bl	800290c <UI_SelectMC>
    break;
 8002b8e:	e735      	b.n	80029fc <UI_SetReg+0xd8>
      currComp = MCI_GetIqdref(pMCI);
 8002b90:	4628      	mov	r0, r5
 8002b92:	f7fe f83f 	bl	8000c14 <MCI_GetIqdref>
 8002b96:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002b98:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002b9c:	9901      	ldr	r1, [sp, #4]
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	f7fd ff82 	bl	8000aa8 <MCI_SetCurrentReferences>
    break;
 8002ba4:	e736      	b.n	8002a14 <UI_SetReg+0xf0>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002ba6:	6810      	ldr	r0, [r2, #0]
 8002ba8:	b221      	sxth	r1, r4
 8002baa:	f003 fcc1 	bl	8006530 <PID_SetKD>
    break;
 8002bae:	e731      	b.n	8002a14 <UI_SetReg+0xf0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bb0:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8002bb4:	f43f af41 	beq.w	8002a3a <UI_SetReg+0x116>
        pSPD = pMCT->pSpeedSensorMain;
 8002bb8:	6995      	ldr	r5, [r2, #24]
 8002bba:	e73f      	b.n	8002a3c <UI_SetReg+0x118>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bbc:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8002bc0:	d0b3      	beq.n	8002b2a <UI_SetReg+0x206>
        pSPD = pMCT->pSpeedSensorMain;
 8002bc2:	6995      	ldr	r5, [r2, #24]
 8002bc4:	e7b2      	b.n	8002b2c <UI_SetReg+0x208>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bc6:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8002bca:	f43f af6e 	beq.w	8002aaa <UI_SetReg+0x186>
        pSPD = pMCT->pSpeedSensorMain;
 8002bce:	6995      	ldr	r5, [r2, #24]
 8002bd0:	e76c      	b.n	8002aac <UI_SetReg+0x188>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bd2:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8002bd6:	f43f af4c 	beq.w	8002a72 <UI_SetReg+0x14e>
        pSPD = pMCT->pSpeedSensorMain;
 8002bda:	6995      	ldr	r5, [r2, #24]
 8002bdc:	e74a      	b.n	8002a74 <UI_SetReg+0x150>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002bde:	4628      	mov	r0, r5
 8002be0:	f7fe f836 	bl	8000c50 <MCI_GetTeref>
 8002be4:	4622      	mov	r2, r4
 8002be6:	4601      	mov	r1, r0
 8002be8:	4628      	mov	r0, r5
 8002bea:	f7fd ff53 	bl	8000a94 <MCI_ExecTorqueRamp>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002bee:	e711      	b.n	8002a14 <UI_SetReg+0xf0>
 8002bf0:	2aaaaaab 	.word	0x2aaaaaab

08002bf4 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002bf4:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002bf6:	6a03      	ldr	r3, [r0, #32]
 8002bf8:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c

  switch (bCmdID)
 8002bfc:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002bfe:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002c02:	290d      	cmp	r1, #13
 8002c04:	d811      	bhi.n	8002c2a <UI_ExecCmd+0x36>
 8002c06:	e8df f001 	tbb	[pc, r1]
 8002c0a:	0b12      	.short	0x0b12
 8002c0c:	070e0e16 	.word	0x070e0e16
 8002c10:	1027231f 	.word	0x1027231f
 8002c14:	0b101010 	.word	0x0b101010
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7fd ff9d 	bl	8000b58 <MCI_GetSTMState>
 8002c1e:	b130      	cbz	r0, 8002c2e <UI_ExecCmd+0x3a>
      MCI_StopMotor(pMCI);
 8002c20:	4620      	mov	r0, r4
 8002c22:	f7fd ff55 	bl	8000ad0 <MCI_StopMotor>
  bool retVal = true;
 8002c26:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002c28:	bd10      	pop	{r4, pc}
    retVal = false;
 8002c2a:	2000      	movs	r0, #0
}
 8002c2c:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7fd ff44 	bl	8000abc <MCI_StartMotor>
 8002c34:	e7f7      	b.n	8002c26 <UI_ExecCmd+0x32>
      if (MCI_GetSTMState(pMCI) == RUN)
 8002c36:	4620      	mov	r0, r4
 8002c38:	f7fd ff8e 	bl	8000b58 <MCI_GetSTMState>
 8002c3c:	2806      	cmp	r0, #6
 8002c3e:	d1f2      	bne.n	8002c26 <UI_ExecCmd+0x32>
        MCI_StopRamp(pMCI);
 8002c40:	4620      	mov	r0, r4
 8002c42:	f7fd ffb9 	bl	8000bb8 <MCI_StopRamp>
 8002c46:	e7ee      	b.n	8002c26 <UI_ExecCmd+0x32>
      MCI_FaultAcknowledged(pMCI);
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7fd ff45 	bl	8000ad8 <MCI_FaultAcknowledged>
    break;
 8002c4e:	e7ea      	b.n	8002c26 <UI_ExecCmd+0x32>
      MCI_EncoderAlign(pMCI);
 8002c50:	4620      	mov	r0, r4
 8002c52:	f7fd ff45 	bl	8000ae0 <MCI_EncoderAlign>
    break;
 8002c56:	e7e6      	b.n	8002c26 <UI_ExecCmd+0x32>
      MCI_Clear_Iqdref(pMCI);
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7fe f807 	bl	8000c6c <MCI_Clear_Iqdref>
    break;
 8002c5e:	e7e2      	b.n	8002c26 <UI_ExecCmd+0x32>

08002c60 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002c60:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002c62:	4b07      	ldr	r3, [pc, #28]	@ (8002c80 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c64:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 8002c68:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002c6a:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8002c6e:	fb83 c301 	smull	ip, r3, r3, r1
 8002c72:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002c76:	b209      	sxth	r1, r1
 8002c78:	f7fd ff02 	bl	8000a80 <MCI_ExecSpeedRamp>
  return true;
}
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	bd08      	pop	{r3, pc}
 8002c80:	2aaaaaab 	.word	0x2aaaaaab

08002c84 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002c84:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c86:	6a03      	ldr	r3, [r0, #32]
 8002c88:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002c8c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002c90:	f7fd ff00 	bl	8000a94 <MCI_ExecTorqueRamp>
  return true;
}
 8002c94:	2001      	movs	r0, #1
 8002c96:	bd08      	pop	{r3, pc}

08002c98 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9a:	4617      	mov	r7, r2
 8002c9c:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002c9e:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8002ca2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca8:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 8002caa:	b194      	cbz	r4, 8002cd2 <UI_GetRevupData+0x3a>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002cac:	4620      	mov	r0, r4
 8002cae:	460d      	mov	r5, r1
 8002cb0:	f003 ffc4 	bl	8006c3c <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002cb4:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002cb6:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f003 ffc5 	bl	8006c48 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002cbe:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002cc0:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f003 ffc8 	bl	8006c58 <RUC_GetPhaseFinalTorque>
 8002cc8:	9a06      	ldr	r2, [sp, #24]
 8002cca:	4603      	mov	r3, r0
 8002ccc:	8013      	strh	r3, [r2, #0]
  bool hRetVal = true;
 8002cce:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8002cd2:	4620      	mov	r0, r4
}
 8002cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cd6:	bf00      	nop

08002cd8 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	461e      	mov	r6, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002cdc:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8002ce0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8002ce2:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002ce6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002cea:	695d      	ldr	r5, [r3, #20]
{
 8002cec:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f003 ff92 	bl	8006c18 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002cf4:	4632      	mov	r2, r6
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f003 ff93 	bl	8006c24 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002cfe:	4628      	mov	r0, r5
 8002d00:	463a      	mov	r2, r7
 8002d02:	4621      	mov	r1, r4
 8002d04:	f003 ff94 	bl	8006c30 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002d08:	2001      	movs	r0, #1
 8002d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d0c <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002d0c:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d0e:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 8002d12:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 8002d14:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8002d18:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002d1c:	9901      	ldr	r1, [sp, #4]
 8002d1e:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 8002d22:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8002d24:	f7fd bec0 	b.w	8000aa8 <MCI_SetCurrentReferences>

08002d28 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002d28:	2000      	movs	r0, #0
 8002d2a:	4770      	bx	lr

08002d2c <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8002d2c:	6943      	ldr	r3, [r0, #20]
 8002d2e:	b103      	cbz	r3, 8002d32 <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 8002d30:	4718      	bx	r3
  }
}
 8002d32:	4770      	bx	lr

08002d34 <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 8002d34:	6983      	ldr	r3, [r0, #24]
 8002d36:	b103      	cbz	r3, 8002d3a <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 8002d38:	4718      	bx	r3
  }
}
 8002d3a:	4770      	bx	lr

08002d3c <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 8002d3c:	6843      	ldr	r3, [r0, #4]
 8002d3e:	b103      	cbz	r3, 8002d42 <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 8002d40:	4718      	bx	r3
  }
}
 8002d42:	4770      	bx	lr

08002d44 <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 8002d44:	6883      	ldr	r3, [r0, #8]
 8002d46:	b103      	cbz	r3, 8002d4a <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 8002d48:	4718      	bx	r3
  }
  return retVal;
}
 8002d4a:	2089      	movs	r0, #137	@ 0x89
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop

08002d50 <UI_GetReg>:
{
 8002d50:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002d52:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8002d54:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d58:	6a05      	ldr	r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002d5a:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d5e:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8002d62:	b091      	sub	sp, #68	@ 0x44
  if ( success != (bool *) 0 )
 8002d64:	2a00      	cmp	r2, #0
 8002d66:	f000 808b 	beq.w	8002e80 <UI_GetReg+0x130>
    *success = true;
 8002d6a:	f04f 0c01 	mov.w	ip, #1
 8002d6e:	f882 c000 	strb.w	ip, [r2]
  switch (bRegID)
 8002d72:	2981      	cmp	r1, #129	@ 0x81
 8002d74:	f200 8111 	bhi.w	8002f9a <UI_GetReg+0x24a>
 8002d78:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002d7c:	02ba01ea 	.word	0x02ba01ea
 8002d80:	029a02b6 	.word	0x029a02b6
 8002d84:	02b20293 	.word	0x02b20293
 8002d88:	015e02ae 	.word	0x015e02ae
 8002d8c:	027c0113 	.word	0x027c0113
 8002d90:	029e02a2 	.word	0x029e02a2
 8002d94:	01ae0109 	.word	0x01ae0109
 8002d98:	01a601aa 	.word	0x01a601aa
 8002d9c:	022c0280 	.word	0x022c0280
 8002da0:	010f010f 	.word	0x010f010f
 8002da4:	026d021c 	.word	0x026d021c
 8002da8:	010f010f 	.word	0x010f010f
 8002dac:	0269010f 	.word	0x0269010f
 8002db0:	02a602aa 	.word	0x02a602aa
 8002db4:	01fe0218 	.word	0x01fe0218
 8002db8:	011d01f7 	.word	0x011d01f7
 8002dbc:	010f0118 	.word	0x010f0118
 8002dc0:	020c0211 	.word	0x020c0211
 8002dc4:	02020207 	.word	0x02020207
 8002dc8:	011d01f2 	.word	0x011d01f2
 8002dcc:	01130118 	.word	0x01130118
 8002dd0:	01ed0109 	.word	0x01ed0109
 8002dd4:	015701a1 	.word	0x015701a1
 8002dd8:	010f0152 	.word	0x010f0152
 8002ddc:	0140010f 	.word	0x0140010f
 8002de0:	0254012e 	.word	0x0254012e
 8002de4:	01c70240 	.word	0x01c70240
 8002de8:	010f01b2 	.word	0x010f01b2
 8002dec:	010f010f 	.word	0x010f010f
 8002df0:	010f010f 	.word	0x010f010f
 8002df4:	0128010f 	.word	0x0128010f
 8002df8:	01e30122 	.word	0x01e30122
 8002dfc:	010901dc 	.word	0x010901dc
 8002e00:	0177018a 	.word	0x0177018a
 8002e04:	010f010f 	.word	0x010f010f
 8002e08:	010f010f 	.word	0x010f010f
 8002e0c:	010f010f 	.word	0x010f010f
 8002e10:	010f010f 	.word	0x010f010f
 8002e14:	010f010f 	.word	0x010f010f
 8002e18:	010f010f 	.word	0x010f010f
 8002e1c:	010f010f 	.word	0x010f010f
 8002e20:	010f010f 	.word	0x010f010f
 8002e24:	010f010f 	.word	0x010f010f
 8002e28:	010f010f 	.word	0x010f010f
 8002e2c:	010f010f 	.word	0x010f010f
 8002e30:	016a010f 	.word	0x016a010f
 8002e34:	010f010f 	.word	0x010f010f
 8002e38:	010f010f 	.word	0x010f010f
 8002e3c:	010f010f 	.word	0x010f010f
 8002e40:	010f010f 	.word	0x010f010f
 8002e44:	010f010f 	.word	0x010f010f
 8002e48:	010f010f 	.word	0x010f010f
 8002e4c:	010f010f 	.word	0x010f010f
 8002e50:	010f010f 	.word	0x010f010f
 8002e54:	010f010f 	.word	0x010f010f
 8002e58:	01620166 	.word	0x01620166
 8002e5c:	010f019f 	.word	0x010f019f
 8002e60:	0111015c 	.word	0x0111015c
 8002e64:	010f010f 	.word	0x010f010f
 8002e68:	010f010f 	.word	0x010f010f
 8002e6c:	010f010f 	.word	0x010f010f
 8002e70:	010f010f 	.word	0x010f010f
 8002e74:	010f010f 	.word	0x010f010f
 8002e78:	010f010f 	.word	0x010f010f
 8002e7c:	0111010f 	.word	0x0111010f
 8002e80:	2981      	cmp	r1, #129	@ 0x81
 8002e82:	f200 808c 	bhi.w	8002f9e <UI_GetReg+0x24e>
 8002e86:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002e8a:	0163      	.short	0x0163
 8002e8c:	022f0233 	.word	0x022f0233
 8002e90:	020c0213 	.word	0x020c0213
 8002e94:	0227022b 	.word	0x0227022b
 8002e98:	008c00d7 	.word	0x008c00d7
 8002e9c:	021b01f5 	.word	0x021b01f5
 8002ea0:	00820217 	.word	0x00820217
 8002ea4:	01230127 	.word	0x01230127
 8002ea8:	01f9011f 	.word	0x01f9011f
 8002eac:	008a01a5 	.word	0x008a01a5
 8002eb0:	0195008a 	.word	0x0195008a
 8002eb4:	008a01e6 	.word	0x008a01e6
 8002eb8:	008a008a 	.word	0x008a008a
 8002ebc:	022301e2 	.word	0x022301e2
 8002ec0:	0191021f 	.word	0x0191021f
 8002ec4:	01700177 	.word	0x01700177
 8002ec8:	00910096 	.word	0x00910096
 8002ecc:	018a008a 	.word	0x018a008a
 8002ed0:	01800185 	.word	0x01800185
 8002ed4:	016b017b 	.word	0x016b017b
 8002ed8:	00910096 	.word	0x00910096
 8002edc:	0082008c 	.word	0x0082008c
 8002ee0:	011a0166 	.word	0x011a0166
 8002ee4:	00cb00d0 	.word	0x00cb00d0
 8002ee8:	008a008a 	.word	0x008a008a
 8002eec:	00a700b9 	.word	0x00a700b9
 8002ef0:	01b901cd 	.word	0x01b901cd
 8002ef4:	012b0140 	.word	0x012b0140
 8002ef8:	008a008a 	.word	0x008a008a
 8002efc:	008a008a 	.word	0x008a008a
 8002f00:	008a008a 	.word	0x008a008a
 8002f04:	009b00a1 	.word	0x009b00a1
 8002f08:	0155015c 	.word	0x0155015c
 8002f0c:	01030082 	.word	0x01030082
 8002f10:	008a00f0 	.word	0x008a00f0
 8002f14:	008a008a 	.word	0x008a008a
 8002f18:	008a008a 	.word	0x008a008a
 8002f1c:	008a008a 	.word	0x008a008a
 8002f20:	008a008a 	.word	0x008a008a
 8002f24:	008a008a 	.word	0x008a008a
 8002f28:	008a008a 	.word	0x008a008a
 8002f2c:	008a008a 	.word	0x008a008a
 8002f30:	008a008a 	.word	0x008a008a
 8002f34:	008a008a 	.word	0x008a008a
 8002f38:	008a008a 	.word	0x008a008a
 8002f3c:	008a008a 	.word	0x008a008a
 8002f40:	008a00e3 	.word	0x008a00e3
 8002f44:	008a008a 	.word	0x008a008a
 8002f48:	008a008a 	.word	0x008a008a
 8002f4c:	008a008a 	.word	0x008a008a
 8002f50:	008a008a 	.word	0x008a008a
 8002f54:	008a008a 	.word	0x008a008a
 8002f58:	008a008a 	.word	0x008a008a
 8002f5c:	008a008a 	.word	0x008a008a
 8002f60:	008a008a 	.word	0x008a008a
 8002f64:	00df008a 	.word	0x00df008a
 8002f68:	011800db 	.word	0x011800db
 8002f6c:	00d5008a 	.word	0x00d5008a
 8002f70:	008a008a 	.word	0x008a008a
 8002f74:	008a008a 	.word	0x008a008a
 8002f78:	008a008a 	.word	0x008a008a
 8002f7c:	008a008a 	.word	0x008a008a
 8002f80:	008a008a 	.word	0x008a008a
 8002f84:	008a008a 	.word	0x008a008a
 8002f88:	008a008a 	.word	0x008a008a
 8002f8c:	008a      	.short	0x008a
      bRetVal = MCI_GetIqdref(pMCI).d;
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f7fd fe40 	bl	8000c14 <MCI_GetIqdref>
 8002f94:	1400      	asrs	r0, r0, #16
}
 8002f96:	b011      	add	sp, #68	@ 0x44
 8002f98:	bd30      	pop	{r4, r5, pc}
        *success = false;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	7013      	strb	r3, [r2, #0]
      bRetVal = PWBDID;
 8002f9e:	2000      	movs	r0, #0
  return bRetVal;
 8002fa0:	e7f9      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	f7fd fe36 	bl	8000c14 <MCI_GetIqdref>
 8002fa8:	b200      	sxth	r0, r0
    break;
 8002faa:	e7f4      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = MCI_GetIqd(pMCI).d;
 8002fac:	4628      	mov	r0, r5
 8002fae:	f7fd fe27 	bl	8000c00 <MCI_GetIqd>
 8002fb2:	1400      	asrs	r0, r0, #16
    break;
 8002fb4:	e7ef      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = MCI_GetIqd(pMCI).q;
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f7fd fe22 	bl	8000c00 <MCI_GetIqd>
 8002fbc:	b200      	sxth	r0, r0
    break;
 8002fbe:	e7ea      	b.n	8002f96 <UI_GetReg+0x246>
      if (pHandle->pFctDACGetUserChannelValue)
 8002fc0:	6903      	ldr	r3, [r0, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0eb      	beq.n	8002f9e <UI_GetReg+0x24e>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4798      	blx	r3
 8002fca:	e7e4      	b.n	8002f96 <UI_GetReg+0x246>
      if (pHandle->pFctDACGetUserChannelValue)
 8002fcc:	6903      	ldr	r3, [r0, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0e5      	beq.n	8002f9e <UI_GetReg+0x24e>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4798      	blx	r3
 8002fd6:	e7de      	b.n	8002f96 <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002fd8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8002fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002fde:	0f1a      	lsrs	r2, r3, #28
 8002fe0:	2a09      	cmp	r2, #9
 8002fe2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002fe6:	f000 81a8 	beq.w	800333a <UI_GetReg+0x5ea>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002fea:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8002fee:	d1d6      	bne.n	8002f9e <UI_GetReg+0x24e>
        pSPD = pMCT->pSpeedSensorAux;
 8002ff0:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d0d3      	beq.n	8002f9e <UI_GetReg+0x24e>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002ff6:	f003 fe7d 	bl	8006cf4 <SPD_GetS16Speed>
 8002ffa:	e7cc      	b.n	8002f96 <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002ffc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8002ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003002:	0f1a      	lsrs	r2, r3, #28
 8003004:	2a09      	cmp	r2, #9
 8003006:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800300a:	f000 819c 	beq.w	8003346 <UI_GetReg+0x5f6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800300e:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8003012:	d1c4      	bne.n	8002f9e <UI_GetReg+0x24e>
        pSPD = pMCT->pSpeedSensorAux;
 8003014:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003016:	2800      	cmp	r0, #0
 8003018:	d0c1      	beq.n	8002f9e <UI_GetReg+0x24e>
        bRetVal = SPD_GetElAngle(pSPD);
 800301a:	f003 fe29 	bl	8006c70 <SPD_GetElAngle>
 800301e:	e7ba      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8003020:	4628      	mov	r0, r5
 8003022:	f7fd fe0b 	bl	8000c3c <MCI_GetValphabeta>
 8003026:	1400      	asrs	r0, r0, #16
    break;
 8003028:	e7b5      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 800302a:	4628      	mov	r0, r5
 800302c:	f7fd fe06 	bl	8000c3c <MCI_GetValphabeta>
 8003030:	b200      	sxth	r0, r0
    break;
 8003032:	e7b0      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = CTRBDID;
 8003034:	201d      	movs	r0, #29
    break;
 8003036:	e7ae      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	f003 fa7b 	bl	8006534 <PID_GetKD>
    break;
 800303e:	e7aa      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	f003 fa73 	bl	800652c <PID_GetKIDivisor>
    break;
 8003046:	e7a6      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003048:	6820      	ldr	r0, [r4, #0]
 800304a:	f003 fa6d 	bl	8006528 <PID_GetKPDivisor>
    break;
 800304e:	e7a2      	b.n	8002f96 <UI_GetReg+0x246>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003050:	4628      	mov	r0, r5
 8003052:	f7fd fd85 	bl	8000b60 <MCI_GetControlMode>
 8003056:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003058:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 800305a:	f000 81a1 	beq.w	80033a0 <UI_GetReg+0x650>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 800305e:	f7fd fdb7 	bl	8000bd0 <MCI_GetMecSpeedRefUnit>
 8003062:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003066:	0040      	lsls	r0, r0, #1
 8003068:	e795      	b.n	8002f96 <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800306a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800306c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003070:	0f1a      	lsrs	r2, r3, #28
 8003072:	2a09      	cmp	r2, #9
 8003074:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003078:	f000 8186 	beq.w	8003388 <UI_GetReg+0x638>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800307c:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8003080:	d18d      	bne.n	8002f9e <UI_GetReg+0x24e>
        pSPD = pMCT->pSpeedSensorAux;
 8003082:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003084:	2800      	cmp	r0, #0
 8003086:	d08a      	beq.n	8002f9e <UI_GetReg+0x24e>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8003088:	f004 fa80 	bl	800758c <STO_PLL_GetObservedBemfLevel>
 800308c:	1400      	asrs	r0, r0, #16
 800308e:	e782      	b.n	8002f96 <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003090:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003096:	0f1a      	lsrs	r2, r3, #28
 8003098:	2a09      	cmp	r2, #9
 800309a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800309e:	f000 8179 	beq.w	8003394 <UI_GetReg+0x644>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030a2:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 80030a6:	f47f af7a 	bne.w	8002f9e <UI_GetReg+0x24e>
        pSPD = pMCT->pSpeedSensorAux;
 80030aa:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80030ac:	2800      	cmp	r0, #0
 80030ae:	f43f af76 	beq.w	8002f9e <UI_GetReg+0x24e>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 80030b2:	f004 fa67 	bl	8007584 <STO_PLL_GetEstimatedBemfLevel>
 80030b6:	1400      	asrs	r0, r0, #16
 80030b8:	e76d      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)(MC_UID);
 80030ba:	48b2      	ldr	r0, [pc, #712]	@ (8003384 <UI_GetReg+0x634>)
 80030bc:	e76b      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = MCI_GetVqd(pMCI).d;
 80030be:	4628      	mov	r0, r5
 80030c0:	f7fd fdb2 	bl	8000c28 <MCI_GetVqd>
 80030c4:	1400      	asrs	r0, r0, #16
    break;
 80030c6:	e766      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 80030c8:	68a0      	ldr	r0, [r4, #8]
 80030ca:	f003 fa33 	bl	8006534 <PID_GetKD>
    break;
 80030ce:	e762      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80030d0:	68a0      	ldr	r0, [r4, #8]
 80030d2:	f003 fa23 	bl	800651c <PID_GetKI>
    break;
 80030d6:	e75e      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80030d8:	68a0      	ldr	r0, [r4, #8]
 80030da:	f003 fa1b 	bl	8006514 <PID_GetKP>
    break;
 80030de:	e75a      	b.n	8002f96 <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80030e0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80030e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030e6:	0f1a      	lsrs	r2, r3, #28
 80030e8:	2a09      	cmp	r2, #9
 80030ea:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80030ee:	f000 8118 	beq.w	8003322 <UI_GetReg+0x5d2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030f2:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 80030f6:	f47f af52 	bne.w	8002f9e <UI_GetReg+0x24e>
        pSPD = pMCT->pSpeedSensorAux;
 80030fa:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80030fc:	2800      	cmp	r0, #0
 80030fe:	f43f af4e 	beq.w	8002f9e <UI_GetReg+0x24e>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8003102:	f004 f9f7 	bl	80074f4 <STO_PLL_GetEstimatedBemf>
 8003106:	1400      	asrs	r0, r0, #16
 8003108:	e745      	b.n	8002f96 <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800310a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800310c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003110:	0f1a      	lsrs	r2, r3, #28
 8003112:	2a09      	cmp	r2, #9
 8003114:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003118:	f000 8120 	beq.w	800335c <UI_GetReg+0x60c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800311c:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8003120:	f47f af3d 	bne.w	8002f9e <UI_GetReg+0x24e>
        pSPD =  pMCT->pSpeedSensorAux;
 8003124:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003126:	2800      	cmp	r0, #0
 8003128:	f43f af39 	beq.w	8002f9e <UI_GetReg+0x24e>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 800312c:	f004 f9e2 	bl	80074f4 <STO_PLL_GetEstimatedBemf>
 8003130:	b200      	sxth	r0, r0
 8003132:	e730      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8003134:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003136:	f003 feb7 	bl	8006ea8 <STC_GetMinAppNegativeMecSpeedUnit>
 800313a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800313e:	0040      	lsls	r0, r0, #1
    break;
 8003140:	e729      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8003142:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003144:	f003 feae 	bl	8006ea4 <STC_GetMaxAppPositiveMecSpeedUnit>
 8003148:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800314c:	0040      	lsls	r0, r0, #1
    break;
 800314e:	e722      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8003150:	f7ff fbe4 	bl	800291c <UI_GetSelectedMC>
    break;
 8003154:	e71f      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = MCI_GetVqd(pMCI).q;
 8003156:	4628      	mov	r0, r5
 8003158:	f7fd fd66 	bl	8000c28 <MCI_GetVqd>
 800315c:	b200      	sxth	r0, r0
    break;
 800315e:	e71a      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8003160:	4628      	mov	r0, r5
 8003162:	f7fd fd43 	bl	8000bec <MCI_GetIalphabeta>
 8003166:	1400      	asrs	r0, r0, #16
    break;
 8003168:	e715      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 800316a:	4628      	mov	r0, r5
 800316c:	f7fd fd28 	bl	8000bc0 <MCI_GetAvrgMecSpeedUnit>
 8003170:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003174:	0040      	lsls	r0, r0, #1
    break;
 8003176:	e70e      	b.n	8002f96 <UI_GetReg+0x246>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 8003178:	2101      	movs	r1, #1
 800317a:	f7ff fde3 	bl	8002d44 <UI_GetDAC>
    break;
 800317e:	e70a      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8003180:	4628      	mov	r0, r5
 8003182:	f7fd fd33 	bl	8000bec <MCI_GetIalphabeta>
 8003186:	b200      	sxth	r0, r0
    break;
 8003188:	e705      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = MCI_GetIab(pMCI).b;
 800318a:	4628      	mov	r0, r5
 800318c:	f7fd fd24 	bl	8000bd8 <MCI_GetIab>
 8003190:	1400      	asrs	r0, r0, #16
    break;
 8003192:	e700      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = MCI_GetIab(pMCI).a;
 8003194:	4628      	mov	r0, r5
 8003196:	f7fd fd1f 	bl	8000bd8 <MCI_GetIab>
 800319a:	b200      	sxth	r0, r0
    break;
 800319c:	e6fb      	b.n	8002f96 <UI_GetReg+0x246>
      if (pMCT->pRevupCtrl)
 800319e:	6960      	ldr	r0, [r4, #20]
 80031a0:	2800      	cmp	r0, #0
 80031a2:	f43f aefc 	beq.w	8002f9e <UI_GetReg+0x24e>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80031a6:	f003 fd5f 	bl	8006c68 <RUC_GetNumberOfPhases>
 80031aa:	e6f4      	b.n	8002f96 <UI_GetReg+0x246>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 80031ac:	2100      	movs	r1, #0
 80031ae:	f7ff fdc9 	bl	8002d44 <UI_GetDAC>
    break;
 80031b2:	e6f0      	b.n	8002f96 <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80031b4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80031b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031ba:	0f1a      	lsrs	r2, r3, #28
 80031bc:	2a09      	cmp	r2, #9
 80031be:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80031c2:	f000 80a9 	beq.w	8003318 <UI_GetReg+0x5c8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031c6:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 80031ca:	f000 809c 	beq.w	8003306 <UI_GetReg+0x5b6>
      bRetVal = (int32_t)hIgain;
 80031ce:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	@ 0x3c
    break;
 80031d2:	e6e0      	b.n	8002f96 <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80031d4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80031d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031da:	0f1a      	lsrs	r2, r3, #28
 80031dc:	2a09      	cmp	r2, #9
 80031de:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80031e2:	f000 80a4 	beq.w	800332e <UI_GetReg+0x5de>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031e6:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 80031ea:	d1f0      	bne.n	80031ce <UI_GetReg+0x47e>
        pSPD = pMCT->pSpeedSensorAux;
 80031ec:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d0ed      	beq.n	80031ce <UI_GetReg+0x47e>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80031f2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80031f4:	a90e      	add	r1, sp, #56	@ 0x38
 80031f6:	f004 f993 	bl	8007520 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 80031fa:	e7e8      	b.n	80031ce <UI_GetReg+0x47e>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80031fc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80031fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003202:	0f1a      	lsrs	r2, r3, #28
 8003204:	2a09      	cmp	r2, #9
 8003206:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800320a:	d077      	beq.n	80032fc <UI_GetReg+0x5ac>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800320c:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8003210:	f47f aec5 	bne.w	8002f9e <UI_GetReg+0x24e>
        pSPD = pMCT->pSpeedSensorAux;
 8003214:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003216:	2800      	cmp	r0, #0
 8003218:	f43f aec1 	beq.w	8002f9e <UI_GetReg+0x24e>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 800321c:	f004 f96e 	bl	80074fc <STO_PLL_GetEstimatedCurrent>
 8003220:	1400      	asrs	r0, r0, #16
 8003222:	e6b8      	b.n	8002f96 <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003224:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800322a:	0f1a      	lsrs	r2, r3, #28
 800322c:	2a09      	cmp	r2, #9
 800322e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003232:	f000 80bb 	beq.w	80033ac <UI_GetReg+0x65c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003236:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 800323a:	f47f aeb0 	bne.w	8002f9e <UI_GetReg+0x24e>
        pSPD = pMCT->pSpeedSensorAux;
 800323e:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003240:	2800      	cmp	r0, #0
 8003242:	f43f aeac 	beq.w	8002f9e <UI_GetReg+0x24e>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8003246:	f004 f959 	bl	80074fc <STO_PLL_GetEstimatedCurrent>
 800324a:	b200      	sxth	r0, r0
 800324c:	e6a3      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 800324e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003250:	f002 fd6e 	bl	8005d30 <VBS_GetAvBusVoltage_V>
    break;
 8003254:	e69f      	b.n	8002f96 <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003256:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800325c:	0f1a      	lsrs	r2, r3, #28
 800325e:	2a09      	cmp	r2, #9
 8003260:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003264:	f000 8089 	beq.w	800337a <UI_GetReg+0x62a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003268:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 800326c:	d07c      	beq.n	8003368 <UI_GetReg+0x618>
      bRetVal = (int32_t)hPgain;
 800326e:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
    break;
 8003272:	e690      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8003274:	6860      	ldr	r0, [r4, #4]
 8003276:	f003 f94d 	bl	8006514 <PID_GetKP>
    break;
 800327a:	e68c      	b.n	8002f96 <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800327c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003282:	0f1a      	lsrs	r2, r3, #28
 8003284:	2a09      	cmp	r2, #9
 8003286:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800328a:	d062      	beq.n	8003352 <UI_GetReg+0x602>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800328c:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8003290:	d1ed      	bne.n	800326e <UI_GetReg+0x51e>
        pSPD = pMCT->pSpeedSensorAux;
 8003292:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003294:	2800      	cmp	r0, #0
 8003296:	d0ea      	beq.n	800326e <UI_GetReg+0x51e>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003298:	aa0f      	add	r2, sp, #60	@ 0x3c
 800329a:	a90e      	add	r1, sp, #56	@ 0x38
 800329c:	f004 f940 	bl	8007520 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 80032a0:	e7e5      	b.n	800326e <UI_GetReg+0x51e>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 80032a2:	4628      	mov	r0, r5
 80032a4:	f7fd fc94 	bl	8000bd0 <MCI_GetMecSpeedRefUnit>
 80032a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80032ac:	0040      	lsls	r0, r0, #1
    break;
 80032ae:	e672      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 80032b0:	4628      	mov	r0, r5
 80032b2:	f7fd fc55 	bl	8000b60 <MCI_GetControlMode>
    break;
 80032b6:	e66e      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80032b8:	6860      	ldr	r0, [r4, #4]
 80032ba:	f003 f93b 	bl	8006534 <PID_GetKD>
    break;
 80032be:	e66a      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80032c0:	6860      	ldr	r0, [r4, #4]
 80032c2:	f003 f92b 	bl	800651c <PID_GetKI>
    break;
 80032c6:	e666      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80032c8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80032ca:	f003 f8bd 	bl	8006448 <MPM_GetAvrgElMotorPowerW>
    break;
 80032ce:	e662      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80032d0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80032d2:	f003 f8fd 	bl	80064d0 <NTC_GetAvTemp_C>
    break;
 80032d6:	e65e      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 80032d8:	6820      	ldr	r0, [r4, #0]
 80032da:	f003 f91f 	bl	800651c <PID_GetKI>
    break;
 80032de:	e65a      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 80032e0:	6820      	ldr	r0, [r4, #0]
 80032e2:	f003 f917 	bl	8006514 <PID_GetKP>
    break;
 80032e6:	e656      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 80032e8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80032ea:	f003 fe8d 	bl	8007008 <STM_GetState>
	break;
 80032ee:	e652      	b.n	8002f96 <UI_GetReg+0x246>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80032f0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
}
 80032f2:	b011      	add	sp, #68	@ 0x44
 80032f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80032f8:	f003 be94 	b.w	8007024 <STM_GetFaultState>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032fc:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8003300:	d088      	beq.n	8003214 <UI_GetReg+0x4c4>
        pSPD = pMCT->pSpeedSensorMain;
 8003302:	69a0      	ldr	r0, [r4, #24]
 8003304:	e787      	b.n	8003216 <UI_GetReg+0x4c6>
        pSPD = pMCT->pSpeedSensorAux;
 8003306:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003308:	2800      	cmp	r0, #0
 800330a:	f43f af60 	beq.w	80031ce <UI_GetReg+0x47e>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800330e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003310:	a90e      	add	r1, sp, #56	@ 0x38
 8003312:	f004 f911 	bl	8007538 <STO_GetPLLGains>
 8003316:	e75a      	b.n	80031ce <UI_GetReg+0x47e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003318:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 800331c:	d0f3      	beq.n	8003306 <UI_GetReg+0x5b6>
        pSPD = pMCT->pSpeedSensorMain;
 800331e:	69a0      	ldr	r0, [r4, #24]
 8003320:	e7f2      	b.n	8003308 <UI_GetReg+0x5b8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003322:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8003326:	f43f aee8 	beq.w	80030fa <UI_GetReg+0x3aa>
       pSPD = pMCT->pSpeedSensorMain;
 800332a:	69a0      	ldr	r0, [r4, #24]
 800332c:	e6e6      	b.n	80030fc <UI_GetReg+0x3ac>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800332e:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8003332:	f43f af5b 	beq.w	80031ec <UI_GetReg+0x49c>
        pSPD = pMCT->pSpeedSensorMain;
 8003336:	69a0      	ldr	r0, [r4, #24]
 8003338:	e759      	b.n	80031ee <UI_GetReg+0x49e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800333a:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 800333e:	f43f ae57 	beq.w	8002ff0 <UI_GetReg+0x2a0>
        pSPD = pMCT->pSpeedSensorMain;
 8003342:	69a0      	ldr	r0, [r4, #24]
 8003344:	e655      	b.n	8002ff2 <UI_GetReg+0x2a2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003346:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 800334a:	f43f ae63 	beq.w	8003014 <UI_GetReg+0x2c4>
        pSPD = pMCT->pSpeedSensorMain;
 800334e:	69a0      	ldr	r0, [r4, #24]
 8003350:	e661      	b.n	8003016 <UI_GetReg+0x2c6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003352:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8003356:	d09c      	beq.n	8003292 <UI_GetReg+0x542>
        pSPD = pMCT->pSpeedSensorMain;
 8003358:	69a0      	ldr	r0, [r4, #24]
 800335a:	e79b      	b.n	8003294 <UI_GetReg+0x544>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800335c:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8003360:	f43f aee0 	beq.w	8003124 <UI_GetReg+0x3d4>
        pSPD = pMCT->pSpeedSensorMain;
 8003364:	69a0      	ldr	r0, [r4, #24]
 8003366:	e6de      	b.n	8003126 <UI_GetReg+0x3d6>
        pSPD = pMCT->pSpeedSensorAux;
 8003368:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800336a:	2800      	cmp	r0, #0
 800336c:	f43f af7f 	beq.w	800326e <UI_GetReg+0x51e>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003370:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003372:	a90e      	add	r1, sp, #56	@ 0x38
 8003374:	f004 f8e0 	bl	8007538 <STO_GetPLLGains>
 8003378:	e779      	b.n	800326e <UI_GetReg+0x51e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800337a:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 800337e:	d0f3      	beq.n	8003368 <UI_GetReg+0x618>
        pSPD = pMCT->pSpeedSensorMain;
 8003380:	69a0      	ldr	r0, [r4, #24]
 8003382:	e7f2      	b.n	800336a <UI_GetReg+0x61a>
 8003384:	34a6847a 	.word	0x34a6847a
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003388:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 800338c:	f43f ae79 	beq.w	8003082 <UI_GetReg+0x332>
        pSPD = pMCT->pSpeedSensorMain;
 8003390:	69a0      	ldr	r0, [r4, #24]
 8003392:	e677      	b.n	8003084 <UI_GetReg+0x334>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003394:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8003398:	f43f ae87 	beq.w	80030aa <UI_GetReg+0x35a>
        pSPD = pMCT->pSpeedSensorMain;
 800339c:	69a0      	ldr	r0, [r4, #24]
 800339e:	e685      	b.n	80030ac <UI_GetReg+0x35c>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80033a0:	f7fd fc02 	bl	8000ba8 <MCI_GetLastRampFinalSpeed>
 80033a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80033a8:	0040      	lsls	r0, r0, #1
 80033aa:	e5f4      	b.n	8002f96 <UI_GetReg+0x246>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ac:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 80033b0:	f43f af45 	beq.w	800323e <UI_GetReg+0x4ee>
        pSPD = pMCT->pSpeedSensorMain;
 80033b4:	69a0      	ldr	r0, [r4, #24]
 80033b6:	e743      	b.n	8003240 <UI_GetReg+0x4f0>

080033b8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033b8:	4a03      	ldr	r2, [pc, #12]	@ (80033c8 <SystemInit+0x10>)
 80033ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80033be:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033c2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033cc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80033ce:	4b0f      	ldr	r3, [pc, #60]	@ (800340c <HAL_InitTick+0x40>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	b90b      	cbnz	r3, 80033d8 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80033d4:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80033d8:	490d      	ldr	r1, [pc, #52]	@ (8003410 <HAL_InitTick+0x44>)
 80033da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033de:	4605      	mov	r5, r0
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	6808      	ldr	r0, [r1, #0]
 80033e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80033ea:	f000 fd19 	bl	8003e20 <HAL_SYSTICK_Config>
 80033ee:	4604      	mov	r4, r0
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d1ef      	bne.n	80033d4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f4:	2d0f      	cmp	r5, #15
 80033f6:	d8ed      	bhi.n	80033d4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033f8:	4602      	mov	r2, r0
 80033fa:	4629      	mov	r1, r5
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	f000 fcc4 	bl	8003d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003404:	4b03      	ldr	r3, [pc, #12]	@ (8003414 <HAL_InitTick+0x48>)
 8003406:	4620      	mov	r0, r4
 8003408:	601d      	str	r5, [r3, #0]
}
 800340a:	bd38      	pop	{r3, r4, r5, pc}
 800340c:	200006dc 	.word	0x200006dc
 8003410:	200006d8 	.word	0x200006d8
 8003414:	200006e0 	.word	0x200006e0

08003418 <HAL_Init>:
{
 8003418:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800341a:	2003      	movs	r0, #3
 800341c:	f000 fca4 	bl	8003d68 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003420:	2004      	movs	r0, #4
 8003422:	f7ff ffd3 	bl	80033cc <HAL_InitTick>
 8003426:	b110      	cbz	r0, 800342e <HAL_Init+0x16>
    status = HAL_ERROR;
 8003428:	2401      	movs	r4, #1
}
 800342a:	4620      	mov	r0, r4
 800342c:	bd10      	pop	{r4, pc}
 800342e:	4604      	mov	r4, r0
    HAL_MspInit();
 8003430:	f7fe ff34 	bl	800229c <HAL_MspInit>
}
 8003434:	4620      	mov	r0, r4
 8003436:	bd10      	pop	{r4, pc}

08003438 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003438:	4a03      	ldr	r2, [pc, #12]	@ (8003448 <HAL_IncTick+0x10>)
 800343a:	4904      	ldr	r1, [pc, #16]	@ (800344c <HAL_IncTick+0x14>)
 800343c:	6813      	ldr	r3, [r2, #0]
 800343e:	6809      	ldr	r1, [r1, #0]
 8003440:	440b      	add	r3, r1
 8003442:	6013      	str	r3, [r2, #0]
}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000b00 	.word	0x20000b00
 800344c:	200006dc 	.word	0x200006dc

08003450 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003450:	4b01      	ldr	r3, [pc, #4]	@ (8003458 <HAL_GetTick+0x8>)
 8003452:	6818      	ldr	r0, [r3, #0]
}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000b00 	.word	0x20000b00

0800345c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800345c:	b538      	push	{r3, r4, r5, lr}
 800345e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003460:	f7ff fff6 	bl	8003450 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003464:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003466:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003468:	d002      	beq.n	8003470 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800346a:	4b04      	ldr	r3, [pc, #16]	@ (800347c <HAL_Delay+0x20>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003470:	f7ff ffee 	bl	8003450 <HAL_GetTick>
 8003474:	1b40      	subs	r0, r0, r5
 8003476:	42a0      	cmp	r0, r4
 8003478:	d3fa      	bcc.n	8003470 <HAL_Delay+0x14>
  {
  }
}
 800347a:	bd38      	pop	{r3, r4, r5, pc}
 800347c:	200006dc 	.word	0x200006dc

08003480 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003480:	b530      	push	{r4, r5, lr}
 8003482:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003484:	2300      	movs	r3, #0
 8003486:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003488:	2800      	cmp	r0, #0
 800348a:	f000 808c 	beq.w	80035a6 <HAL_ADC_Init+0x126>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800348e:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8003490:	4604      	mov	r4, r0
 8003492:	2d00      	cmp	r5, #0
 8003494:	f000 808c 	beq.w	80035b0 <HAL_ADC_Init+0x130>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003498:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800349a:	6893      	ldr	r3, [r2, #8]
 800349c:	0098      	lsls	r0, r3, #2
 800349e:	d505      	bpl.n	80034ac <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80034a0:	6893      	ldr	r3, [r2, #8]
 80034a2:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80034a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034aa:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034ac:	6893      	ldr	r3, [r2, #8]
 80034ae:	00d9      	lsls	r1, r3, #3
 80034b0:	d419      	bmi.n	80034e6 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034b2:	4b6b      	ldr	r3, [pc, #428]	@ (8003660 <HAL_ADC_Init+0x1e0>)
 80034b4:	486b      	ldr	r0, [pc, #428]	@ (8003664 <HAL_ADC_Init+0x1e4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80034b8:	6891      	ldr	r1, [r2, #8]
 80034ba:	099b      	lsrs	r3, r3, #6
 80034bc:	fba0 0303 	umull	r0, r3, r0, r3
 80034c0:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80034ca:	3301      	adds	r3, #1
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80034d2:	6091      	str	r1, [r2, #8]
 80034d4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80034d6:	9b01      	ldr	r3, [sp, #4]
 80034d8:	b12b      	cbz	r3, 80034e6 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80034da:	9b01      	ldr	r3, [sp, #4]
 80034dc:	3b01      	subs	r3, #1
 80034de:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80034e0:	9b01      	ldr	r3, [sp, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f9      	bne.n	80034da <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034e6:	6893      	ldr	r3, [r2, #8]
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	d45f      	bmi.n	80035ac <HAL_ADC_Init+0x12c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ec:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80034ee:	f043 0310 	orr.w	r3, r3, #16
 80034f2:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f4:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80034f6:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f8:	4303      	orrs	r3, r0
 80034fa:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034fc:	6893      	ldr	r3, [r2, #8]
 80034fe:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003502:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003504:	d14b      	bne.n	800359e <HAL_ADC_Init+0x11e>
 8003506:	06dd      	lsls	r5, r3, #27
 8003508:	d449      	bmi.n	800359e <HAL_ADC_Init+0x11e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800350a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800350c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003510:	f043 0302 	orr.w	r3, r3, #2
 8003514:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003516:	6893      	ldr	r3, [r2, #8]
 8003518:	07d9      	lsls	r1, r3, #31
 800351a:	d409      	bmi.n	8003530 <HAL_ADC_Init+0xb0>
 800351c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f013 0f01 	tst.w	r3, #1
 8003526:	4b50      	ldr	r3, [pc, #320]	@ (8003668 <HAL_ADC_Init+0x1e8>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	d101      	bne.n	8003530 <HAL_ADC_Init+0xb0>
 800352c:	07db      	lsls	r3, r3, #31
 800352e:	d57f      	bpl.n	8003630 <HAL_ADC_Init+0x1b0>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8003530:	68e5      	ldr	r5, [r4, #12]
 8003532:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003534:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                hadc->Init.DataAlign                                                   |
 8003538:	432b      	orrs	r3, r5
 800353a:	68a5      	ldr	r5, [r4, #8]
 800353c:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800353e:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003540:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8003542:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003546:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800354a:	d059      	beq.n	8003600 <HAL_ADC_Init+0x180>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800354c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800354e:	b121      	cbz	r1, 800355a <HAL_ADC_Init+0xda>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8003550:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003552:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003556:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003558:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800355a:	68d5      	ldr	r5, [r2, #12]
 800355c:	4943      	ldr	r1, [pc, #268]	@ (800366c <HAL_ADC_Init+0x1ec>)
 800355e:	4029      	ands	r1, r5
 8003560:	4319      	orrs	r1, r3
 8003562:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003564:	6913      	ldr	r3, [r2, #16]
 8003566:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003568:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800356c:	430b      	orrs	r3, r1
 800356e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003570:	6891      	ldr	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003572:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003574:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	430b      	orrs	r3, r1
 800357e:	d01d      	beq.n	80035bc <HAL_ADC_Init+0x13c>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003580:	6963      	ldr	r3, [r4, #20]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d041      	beq.n	800360a <HAL_ADC_Init+0x18a>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003586:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003588:	f023 030f 	bic.w	r3, r3, #15
 800358c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800358e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003590:	f023 0303 	bic.w	r3, r3, #3
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800359a:	b003      	add	sp, #12
 800359c:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80035a0:	f043 0310 	orr.w	r3, r3, #16
 80035a4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80035a6:	2001      	movs	r0, #1
}
 80035a8:	b003      	add	sp, #12
 80035aa:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ac:	2000      	movs	r0, #0
 80035ae:	e7a5      	b.n	80034fc <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 80035b0:	f7fe fe96 	bl	80022e0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80035b4:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 80035b6:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 80035ba:	e76d      	b.n	8003498 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035bc:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035be:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035c2:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035c4:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035c8:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035ca:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80035ce:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035d2:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 80035d4:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035d6:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035d8:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80035da:	b9f1      	cbnz	r1, 800361a <HAL_ADC_Init+0x19a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e0:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80035e2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80035e6:	f36f 030d 	bfc	r3, #0, #14
 80035ea:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80035ee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d024      	beq.n	8003640 <HAL_ADC_Init+0x1c0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035f6:	6913      	ldr	r3, [r2, #16]
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6113      	str	r3, [r2, #16]
 80035fe:	e7bf      	b.n	8003580 <HAL_ADC_Init+0x100>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003600:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003602:	3901      	subs	r1, #1
 8003604:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003608:	e7a0      	b.n	800354c <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800360a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800360c:	6a23      	ldr	r3, [r4, #32]
 800360e:	f021 010f 	bic.w	r1, r1, #15
 8003612:	3b01      	subs	r3, #1
 8003614:	430b      	orrs	r3, r1
 8003616:	6313      	str	r3, [r2, #48]	@ 0x30
 8003618:	e7b9      	b.n	800358e <HAL_ADC_Init+0x10e>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800361a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800361e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003620:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8003624:	f36f 030d 	bfc	r3, #0, #14
 8003628:	430b      	orrs	r3, r1
 800362a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800362e:	e7de      	b.n	80035ee <HAL_ADC_Init+0x16e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003630:	490f      	ldr	r1, [pc, #60]	@ (8003670 <HAL_ADC_Init+0x1f0>)
 8003632:	6865      	ldr	r5, [r4, #4]
 8003634:	688b      	ldr	r3, [r1, #8]
 8003636:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800363a:	432b      	orrs	r3, r5
 800363c:	608b      	str	r3, [r1, #8]
}
 800363e:	e777      	b.n	8003530 <HAL_ADC_Init+0xb0>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003640:	6911      	ldr	r1, [r2, #16]
 8003642:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003644:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8003646:	f36f 018a 	bfc	r1, #2, #9
 800364a:	432b      	orrs	r3, r5
 800364c:	430b      	orrs	r3, r1
 800364e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8003650:	430b      	orrs	r3, r1
 8003652:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003654:	430b      	orrs	r3, r1
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6113      	str	r3, [r2, #16]
 800365c:	e790      	b.n	8003580 <HAL_ADC_Init+0x100>
 800365e:	bf00      	nop
 8003660:	200006d8 	.word	0x200006d8
 8003664:	053e2d63 	.word	0x053e2d63
 8003668:	50000100 	.word	0x50000100
 800366c:	fff04007 	.word	0xfff04007
 8003670:	50000300 	.word	0x50000300

08003674 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003678:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 800367c:	b083      	sub	sp, #12
 800367e:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8003680:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8003682:	f04f 0000 	mov.w	r0, #0
 8003686:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003688:	f000 8174 	beq.w	8003974 <HAL_ADCEx_InjectedConfigChannel+0x300>
 800368c:	2301      	movs	r3, #1
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800368e:	6955      	ldr	r5, [r2, #20]
  __HAL_LOCK(hadc);
 8003690:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003694:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003698:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800369a:	2d00      	cmp	r5, #0
 800369c:	d06c      	beq.n	8003778 <HAL_ADCEx_InjectedConfigChannel+0x104>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800369e:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80036a0:	2d01      	cmp	r5, #1
 80036a2:	d069      	beq.n	8003778 <HAL_ADCEx_InjectedConfigChannel+0x104>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80036a4:	6e96      	ldr	r6, [r2, #104]	@ 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80036a6:	f000 001f 	and.w	r0, r0, #31
 80036aa:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80036ae:	fa0c fc00 	lsl.w	ip, ip, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80036b2:	2e00      	cmp	r6, #0
 80036b4:	f040 8113 	bne.w	80038de <HAL_ADCEx_InjectedConfigChannel+0x26a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80036b8:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80036ba:	3d01      	subs	r5, #1
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80036bc:	2800      	cmp	r0, #0
 80036be:	f000 821b 	beq.w	8003af8 <HAL_ADCEx_InjectedConfigChannel+0x484>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80036c2:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80036c4:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 80036c8:	4328      	orrs	r0, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80036ca:	4330      	orrs	r0, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80036cc:	ea40 000c 	orr.w	r0, r0, ip
 80036d0:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036d4:	6898      	ldr	r0, [r3, #8]
 80036d6:	0700      	lsls	r0, r0, #28
 80036d8:	d410      	bmi.n	80036fc <HAL_ADCEx_InjectedConfigChannel+0x88>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80036da:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80036de:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 80036e2:	0540      	lsls	r0, r0, #21
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80036e4:	2d00      	cmp	r5, #0
 80036e6:	f040 80ef 	bne.w	80038c8 <HAL_ADCEx_InjectedConfigChannel+0x254>
      MODIFY_REG(hadc->Instance->CFGR,
 80036ea:	68dd      	ldr	r5, [r3, #12]
 80036ec:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 80036f0:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80036f4:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 80036f8:	4328      	orrs	r0, r5
 80036fa:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036fc:	6898      	ldr	r0, [r3, #8]
 80036fe:	f010 0004 	ands.w	r0, r0, #4
 8003702:	d04f      	beq.n	80037a4 <HAL_ADCEx_InjectedConfigChannel+0x130>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003704:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003706:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003708:	689d      	ldr	r5, [r3, #8]
 800370a:	07ee      	lsls	r6, r5, #31
 800370c:	d40c      	bmi.n	8003728 <HAL_ADCEx_InjectedConfigChannel+0xb4>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800370e:	4ea3      	ldr	r6, [pc, #652]	@ (800399c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8003710:	68cf      	ldr	r7, [r1, #12]
 8003712:	42b7      	cmp	r7, r6
    SET_BIT(ADCx->DIFSEL,
 8003714:	f3c4 0512 	ubfx	r5, r4, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003718:	f000 80fd 	beq.w	8003916 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
    CLEAR_BIT(ADCx->DIFSEL,
 800371c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003720:	ea21 0105 	bic.w	r1, r1, r5
 8003724:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003728:	499d      	ldr	r1, [pc, #628]	@ (80039a0 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800372a:	420c      	tst	r4, r1
 800372c:	d01e      	beq.n	800376c <HAL_ADCEx_InjectedConfigChannel+0xf8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800372e:	4e9d      	ldr	r6, [pc, #628]	@ (80039a4 <HAL_ADCEx_InjectedConfigChannel+0x330>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003730:	4d9d      	ldr	r5, [pc, #628]	@ (80039a8 <HAL_ADCEx_InjectedConfigChannel+0x334>)
 8003732:	68b1      	ldr	r1, [r6, #8]
 8003734:	42ac      	cmp	r4, r5
 8003736:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 800373a:	f000 809f 	beq.w	800387c <HAL_ADCEx_InjectedConfigChannel+0x208>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800373e:	4d9b      	ldr	r5, [pc, #620]	@ (80039ac <HAL_ADCEx_InjectedConfigChannel+0x338>)
 8003740:	42ac      	cmp	r4, r5
 8003742:	f000 809b 	beq.w	800387c <HAL_ADCEx_InjectedConfigChannel+0x208>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003746:	4d9a      	ldr	r5, [pc, #616]	@ (80039b0 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8003748:	42ac      	cmp	r4, r5
 800374a:	f000 8117 	beq.w	800397c <HAL_ADCEx_InjectedConfigChannel+0x308>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800374e:	4d99      	ldr	r5, [pc, #612]	@ (80039b4 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8003750:	42ac      	cmp	r4, r5
 8003752:	d10b      	bne.n	800376c <HAL_ADCEx_InjectedConfigChannel+0xf8>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003754:	0249      	lsls	r1, r1, #9
 8003756:	d409      	bmi.n	800376c <HAL_ADCEx_InjectedConfigChannel+0xf8>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8003758:	4997      	ldr	r1, [pc, #604]	@ (80039b8 <HAL_ADCEx_InjectedConfigChannel+0x344>)
 800375a:	428b      	cmp	r3, r1
 800375c:	d006      	beq.n	800376c <HAL_ADCEx_InjectedConfigChannel+0xf8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800375e:	68b3      	ldr	r3, [r6, #8]
 8003760:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8003764:	433b      	orrs	r3, r7
 8003766:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800376a:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376c:	2300      	movs	r3, #0
 800376e:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003772:	b003      	add	sp, #12
 8003774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003778:	2809      	cmp	r0, #9
 800377a:	d1ab      	bne.n	80036d4 <HAL_ADCEx_InjectedConfigChannel+0x60>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800377c:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800377e:	0c65      	lsrs	r5, r4, #17
 8003780:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003784:	b120      	cbz	r0, 8003790 <HAL_ADCEx_InjectedConfigChannel+0x11c>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003786:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003788:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800378c:	4330      	orrs	r0, r6
 800378e:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003790:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003792:	4e8a      	ldr	r6, [pc, #552]	@ (80039bc <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8003794:	4030      	ands	r0, r6
 8003796:	4328      	orrs	r0, r5
 8003798:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800379a:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800379c:	6655      	str	r5, [r2, #100]	@ 0x64
 800379e:	0700      	lsls	r0, r0, #28
 80037a0:	d4ac      	bmi.n	80036fc <HAL_ADCEx_InjectedConfigChannel+0x88>
 80037a2:	e79a      	b.n	80036da <HAL_ADCEx_InjectedConfigChannel+0x66>
 80037a4:	689d      	ldr	r5, [r3, #8]
 80037a6:	072f      	lsls	r7, r5, #28
 80037a8:	d4ae      	bmi.n	8003708 <HAL_ADCEx_InjectedConfigChannel+0x94>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80037aa:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80037ac:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80037b0:	2d00      	cmp	r5, #0
 80037b2:	f040 80a7 	bne.w	8003904 <HAL_ADCEx_InjectedConfigChannel+0x290>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80037b6:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80037b8:	68d8      	ldr	r0, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80037ba:	f000 819f 	beq.w	8003afc <HAL_ADCEx_InjectedConfigChannel+0x488>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80037be:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 80037c2:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c4:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80037c6:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80037ca:	2d01      	cmp	r5, #1
 80037cc:	f000 8189 	beq.w	8003ae2 <HAL_ADCEx_InjectedConfigChannel+0x46e>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80037d0:	691d      	ldr	r5, [r3, #16]
 80037d2:	f025 0502 	bic.w	r5, r5, #2
 80037d6:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80037d8:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 80037da:	f3c4 5704 	ubfx	r7, r4, #20, #5
 80037de:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037e0:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 80037e2:	40bd      	lsls	r5, r7
 80037e4:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037e8:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80037ec:	ea6f 0505 	mvn.w	r5, r5
 80037f0:	f000 816d 	beq.w	8003ace <HAL_ADCEx_InjectedConfigChannel+0x45a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037f4:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 80037f8:	40be      	lsls	r6, r7
 80037fa:	f85c 7004 	ldr.w	r7, [ip, r4]
 80037fe:	403d      	ands	r5, r7
 8003800:	4335      	orrs	r5, r6
 8003802:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003806:	695c      	ldr	r4, [r3, #20]
 8003808:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800380c:	615c      	str	r4, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800380e:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003810:	680c      	ldr	r4, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003812:	694d      	ldr	r5, [r1, #20]
 8003814:	68de      	ldr	r6, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003816:	2f04      	cmp	r7, #4
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003818:	46a4      	mov	ip, r4
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800381a:	f000 8110 	beq.w	8003a3e <HAL_ADCEx_InjectedConfigChannel+0x3ca>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800381e:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8003822:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8003824:	f004 4cf8 	and.w	ip, r4, #2080374784	@ 0x7c000000
 8003828:	fa05 f406 	lsl.w	r4, r5, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800382c:	f103 0560 	add.w	r5, r3, #96	@ 0x60
  MODIFY_REG(*preg,
 8003830:	4e63      	ldr	r6, [pc, #396]	@ (80039c0 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8003832:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 8003836:	ea0e 0606 	and.w	r6, lr, r6
 800383a:	ea46 060c 	orr.w	r6, r6, ip
 800383e:	4334      	orrs	r4, r6
 8003840:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8003844:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003848:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 800384a:	698e      	ldr	r6, [r1, #24]
 800384c:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8003850:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8003854:	4334      	orrs	r4, r6
 8003856:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800385a:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800385c:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 800385e:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8003862:	f1a6 0601 	sub.w	r6, r6, #1
 8003866:	fab6 f686 	clz	r6, r6
 800386a:	0976      	lsrs	r6, r6, #5
 800386c:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 8003870:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8003874:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003878:	680c      	ldr	r4, [r1, #0]
}
 800387a:	e745      	b.n	8003708 <HAL_ADCEx_InjectedConfigChannel+0x94>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800387c:	020d      	lsls	r5, r1, #8
 800387e:	f53f af75 	bmi.w	800376c <HAL_ADCEx_InjectedConfigChannel+0xf8>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003882:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003886:	f47f af71 	bne.w	800376c <HAL_ADCEx_InjectedConfigChannel+0xf8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800388a:	4946      	ldr	r1, [pc, #280]	@ (80039a4 <HAL_ADCEx_InjectedConfigChannel+0x330>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 800388c:	4c4d      	ldr	r4, [pc, #308]	@ (80039c4 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 800388e:	688b      	ldr	r3, [r1, #8]
 8003890:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8003894:	433b      	orrs	r3, r7
 8003896:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800389a:	608b      	str	r3, [r1, #8]
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	494a      	ldr	r1, [pc, #296]	@ (80039c8 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	fba1 1303 	umull	r1, r3, r1, r3
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	3318      	adds	r3, #24
 80038b0:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80038b2:	9b01      	ldr	r3, [sp, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f43f af59 	beq.w	800376c <HAL_ADCEx_InjectedConfigChannel+0xf8>
          wait_loop_index--;
 80038ba:	9b01      	ldr	r3, [sp, #4]
 80038bc:	3b01      	subs	r3, #1
 80038be:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80038c0:	9b01      	ldr	r3, [sp, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f9      	bne.n	80038ba <HAL_ADCEx_InjectedConfigChannel+0x246>
 80038c6:	e751      	b.n	800376c <HAL_ADCEx_InjectedConfigChannel+0xf8>
      MODIFY_REG(hadc->Instance->CFGR,
 80038c8:	68dd      	ldr	r5, [r3, #12]
 80038ca:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80038ce:	4328      	orrs	r0, r5
 80038d0:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038d2:	6898      	ldr	r0, [r3, #8]
 80038d4:	f010 0004 	ands.w	r0, r0, #4
 80038d8:	f43f af64 	beq.w	80037a4 <HAL_ADCEx_InjectedConfigChannel+0x130>
 80038dc:	e712      	b.n	8003704 <HAL_ADCEx_InjectedConfigChannel+0x90>
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80038de:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 80038e0:	3e01      	subs	r6, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80038e2:	ea4c 0505 	orr.w	r5, ip, r5
    hadc->InjectionConfig.ChannelCount--;
 80038e6:	6696      	str	r6, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80038e8:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80038ea:	2e00      	cmp	r6, #0
 80038ec:	f47f aef2 	bne.w	80036d4 <HAL_ADCEx_InjectedConfigChannel+0x60>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80038f0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80038f2:	4e32      	ldr	r6, [pc, #200]	@ (80039bc <HAL_ADCEx_InjectedConfigChannel+0x348>)
 80038f4:	4030      	ands	r0, r6
 80038f6:	4328      	orrs	r0, r5
 80038f8:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038fa:	6898      	ldr	r0, [r3, #8]
 80038fc:	0700      	lsls	r0, r0, #28
 80038fe:	f53f aefd 	bmi.w	80036fc <HAL_ADCEx_InjectedConfigChannel+0x88>
 8003902:	e6ea      	b.n	80036da <HAL_ADCEx_InjectedConfigChannel+0x66>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003904:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8003906:	2d00      	cmp	r5, #0
 8003908:	f43f af55 	beq.w	80037b6 <HAL_ADCEx_InjectedConfigChannel+0x142>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800390c:	2801      	cmp	r0, #1
 800390e:	f000 811b 	beq.w	8003b48 <HAL_ADCEx_InjectedConfigChannel+0x4d4>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003912:	68d8      	ldr	r0, [r3, #12]
 8003914:	e753      	b.n	80037be <HAL_ADCEx_InjectedConfigChannel+0x14a>
    SET_BIT(ADCx->DIFSEL,
 8003916:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 800391a:	432e      	orrs	r6, r5
 800391c:	f8c3 60b0 	str.w	r6, [r3, #176]	@ 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003920:	2d00      	cmp	r5, #0
 8003922:	d153      	bne.n	80039cc <HAL_ADCEx_InjectedConfigChannel+0x358>
 8003924:	0ea4      	lsrs	r4, r4, #26
 8003926:	3401      	adds	r4, #1
 8003928:	f004 061f 	and.w	r6, r4, #31
 800392c:	2501      	movs	r5, #1
 800392e:	06a4      	lsls	r4, r4, #26
 8003930:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8003934:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003936:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003938:	ea45 0504 	orr.w	r5, r5, r4
 800393c:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003940:	f200 80fd 	bhi.w	8003b3e <HAL_ADCEx_InjectedConfigChannel+0x4ca>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003944:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003946:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003948:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 800394a:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800394c:	f006 0604 	and.w	r6, r6, #4
 8003950:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8003954:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8003958:	fa05 fc04 	lsl.w	ip, r5, r4
 800395c:	f04f 0e07 	mov.w	lr, #7
 8003960:	59bd      	ldr	r5, [r7, r6]
 8003962:	fa0e f404 	lsl.w	r4, lr, r4
 8003966:	ea25 0404 	bic.w	r4, r5, r4
 800396a:	ea44 040c 	orr.w	r4, r4, ip
 800396e:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003970:	680c      	ldr	r4, [r1, #0]
}
 8003972:	e6d9      	b.n	8003728 <HAL_ADCEx_InjectedConfigChannel+0xb4>
  __HAL_LOCK(hadc);
 8003974:	2002      	movs	r0, #2
}
 8003976:	b003      	add	sp, #12
 8003978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800397c:	01cc      	lsls	r4, r1, #7
 800397e:	f53f aef5 	bmi.w	800376c <HAL_ADCEx_InjectedConfigChannel+0xf8>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003982:	490d      	ldr	r1, [pc, #52]	@ (80039b8 <HAL_ADCEx_InjectedConfigChannel+0x344>)
 8003984:	428b      	cmp	r3, r1
 8003986:	f43f aef1 	beq.w	800376c <HAL_ADCEx_InjectedConfigChannel+0xf8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800398a:	68b3      	ldr	r3, [r6, #8]
 800398c:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8003990:	433b      	orrs	r3, r7
 8003992:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003996:	60b3      	str	r3, [r6, #8]
}
 8003998:	e6e8      	b.n	800376c <HAL_ADCEx_InjectedConfigChannel+0xf8>
 800399a:	bf00      	nop
 800399c:	407f0000 	.word	0x407f0000
 80039a0:	80080000 	.word	0x80080000
 80039a4:	50000300 	.word	0x50000300
 80039a8:	c3210000 	.word	0xc3210000
 80039ac:	90c00010 	.word	0x90c00010
 80039b0:	c7520000 	.word	0xc7520000
 80039b4:	cb840000 	.word	0xcb840000
 80039b8:	50000100 	.word	0x50000100
 80039bc:	04104000 	.word	0x04104000
 80039c0:	03fff000 	.word	0x03fff000
 80039c4:	200006d8 	.word	0x200006d8
 80039c8:	053e2d63 	.word	0x053e2d63
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039d0:	2d00      	cmp	r5, #0
 80039d2:	f000 80be 	beq.w	8003b52 <HAL_ADCEx_InjectedConfigChannel+0x4de>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80039d6:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039da:	3501      	adds	r5, #1
 80039dc:	f005 051f 	and.w	r5, r5, #31
 80039e0:	2d09      	cmp	r5, #9
 80039e2:	f240 80b6 	bls.w	8003b52 <HAL_ADCEx_InjectedConfigChannel+0x4de>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80039ea:	2d00      	cmp	r5, #0
 80039ec:	f000 812b 	beq.w	8003c46 <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 80039f0:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80039f4:	3501      	adds	r5, #1
 80039f6:	06ad      	lsls	r5, r5, #26
 80039f8:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8003a00:	2e00      	cmp	r6, #0
 8003a02:	f000 811e 	beq.w	8003c42 <HAL_ADCEx_InjectedConfigChannel+0x5ce>
  return __builtin_clz(value);
 8003a06:	fab6 f686 	clz	r6, r6
 8003a0a:	3601      	adds	r6, #1
 8003a0c:	f006 061f 	and.w	r6, r6, #31
 8003a10:	2701      	movs	r7, #1
 8003a12:	fa07 f606 	lsl.w	r6, r7, r6
 8003a16:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8003a1c:	2c00      	cmp	r4, #0
 8003a1e:	f000 8109 	beq.w	8003c34 <HAL_ADCEx_InjectedConfigChannel+0x5c0>
  return __builtin_clz(value);
 8003a22:	fab4 f484 	clz	r4, r4
 8003a26:	1c66      	adds	r6, r4, #1
 8003a28:	f006 061f 	and.w	r6, r6, #31
 8003a2c:	2403      	movs	r4, #3
 8003a2e:	f06f 071d 	mvn.w	r7, #29
 8003a32:	fb14 7406 	smlabb	r4, r4, r6, r7
 8003a36:	0524      	lsls	r4, r4, #20
 8003a38:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8003a3c:	e783      	b.n	8003946 <HAL_ADCEx_InjectedConfigChannel+0x2d2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a3e:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8003a40:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003a42:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a46:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003a4a:	2e00      	cmp	r6, #0
 8003a4c:	d05a      	beq.n	8003b04 <HAL_ADCEx_InjectedConfigChannel+0x490>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8003a52:	b126      	cbz	r6, 8003a5e <HAL_ADCEx_InjectedConfigChannel+0x3ea>
  return __builtin_clz(value);
 8003a54:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a58:	42b5      	cmp	r5, r6
 8003a5a:	f000 80ce 	beq.w	8003bfa <HAL_ADCEx_InjectedConfigChannel+0x586>
 8003a5e:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003a60:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a62:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a66:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003a6a:	f103 0864 	add.w	r8, r3, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	fa9c f7ac 	rbit	r7, ip
 8003a72:	f105 0e08 	add.w	lr, r5, #8
 8003a76:	46f1      	mov	r9, lr
  if (value == 0U)
 8003a78:	2f00      	cmp	r7, #0
 8003a7a:	f000 80dd 	beq.w	8003c38 <HAL_ADCEx_InjectedConfigChannel+0x5c4>
  return __builtin_clz(value);
 8003a7e:	fab7 f787 	clz	r7, r7
 8003a82:	42b7      	cmp	r7, r6
 8003a84:	f000 80a3 	beq.w	8003bce <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a88:	f8de 6000 	ldr.w	r6, [lr]
 8003a8c:	f8de 6000 	ldr.w	r6, [lr]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a90:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	fa9c f8ac 	rbit	r8, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a98:	f105 070c 	add.w	r7, r5, #12
 8003a9c:	46b9      	mov	r9, r7
  if (value == 0U)
 8003a9e:	f1b8 0f00 	cmp.w	r8, #0
 8003aa2:	f000 80d3 	beq.w	8003c4c <HAL_ADCEx_InjectedConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003aa6:	fab8 f888 	clz	r8, r8
 8003aaa:	45b0      	cmp	r8, r6
 8003aac:	d077      	beq.n	8003b9e <HAL_ADCEx_InjectedConfigChannel+0x52a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003aae:	683d      	ldr	r5, [r7, #0]
 8003ab0:	683d      	ldr	r5, [r7, #0]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ab2:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 8003aba:	2e00      	cmp	r6, #0
 8003abc:	f43f ae24 	beq.w	8003708 <HAL_ADCEx_InjectedConfigChannel+0x94>
  return __builtin_clz(value);
 8003ac0:	fab6 f486 	clz	r4, r6
 8003ac4:	42ac      	cmp	r4, r5
 8003ac6:	f000 80af 	beq.w	8003c28 <HAL_ADCEx_InjectedConfigChannel+0x5b4>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003aca:	4664      	mov	r4, ip
 8003acc:	e61c      	b.n	8003708 <HAL_ADCEx_InjectedConfigChannel+0x94>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ace:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8003ad2:	593e      	ldr	r6, [r7, r4]
 8003ad4:	4035      	ands	r5, r6
 8003ad6:	513d      	str	r5, [r7, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ad8:	695c      	ldr	r4, [r3, #20]
 8003ada:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8003ade:	615c      	str	r4, [r3, #20]
}
 8003ae0:	e695      	b.n	800380e <HAL_ADCEx_InjectedConfigChannel+0x19a>
      MODIFY_REG(hadc->Instance->CFGR2,
 8003ae2:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 8003ae6:	691e      	ldr	r6, [r3, #16]
 8003ae8:	433d      	orrs	r5, r7
 8003aea:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 8003aee:	4335      	orrs	r5, r6
 8003af0:	f045 0502 	orr.w	r5, r5, #2
 8003af4:	611d      	str	r5, [r3, #16]
 8003af6:	e66f      	b.n	80037d8 <HAL_ADCEx_InjectedConfigChannel+0x164>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003af8:	4628      	mov	r0, r5
 8003afa:	e5e7      	b.n	80036cc <HAL_ADCEx_InjectedConfigChannel+0x58>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003afc:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8003b00:	60d8      	str	r0, [r3, #12]
 8003b02:	e65f      	b.n	80037c4 <HAL_ADCEx_InjectedConfigChannel+0x150>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003b04:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b08:	42a5      	cmp	r5, r4
 8003b0a:	d076      	beq.n	8003bfa <HAL_ADCEx_InjectedConfigChannel+0x586>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b0c:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003b0e:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b10:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b14:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003b18:	f103 0864 	add.w	r8, r3, #100	@ 0x64
 8003b1c:	42a6      	cmp	r6, r4
 8003b1e:	d054      	beq.n	8003bca <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b20:	68ae      	ldr	r6, [r5, #8]
 8003b22:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b24:	f105 0e08 	add.w	lr, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b28:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003b2c:	42a6      	cmp	r6, r4
 8003b2e:	d034      	beq.n	8003b9a <HAL_ADCEx_InjectedConfigChannel+0x526>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b30:	68ee      	ldr	r6, [r5, #12]
 8003b32:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b34:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b38:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8003b3c:	e7c2      	b.n	8003ac4 <HAL_ADCEx_InjectedConfigChannel+0x450>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003b3e:	3c1e      	subs	r4, #30
 8003b40:	0524      	lsls	r4, r4, #20
 8003b42:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8003b46:	e6fe      	b.n	8003946 <HAL_ADCEx_InjectedConfigChannel+0x2d2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b48:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 8003b4a:	f045 0520 	orr.w	r5, r5, #32
 8003b4e:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8003b50:	e639      	b.n	80037c6 <HAL_ADCEx_InjectedConfigChannel+0x152>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8003b56:	2d00      	cmp	r5, #0
 8003b58:	f000 8082 	beq.w	8003c60 <HAL_ADCEx_InjectedConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003b5c:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003b60:	3501      	adds	r5, #1
 8003b62:	06ad      	lsls	r5, r5, #26
 8003b64:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8003b6c:	2e00      	cmp	r6, #0
 8003b6e:	d075      	beq.n	8003c5c <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return __builtin_clz(value);
 8003b70:	fab6 f686 	clz	r6, r6
 8003b74:	3601      	adds	r6, #1
 8003b76:	f006 061f 	and.w	r6, r6, #31
 8003b7a:	2701      	movs	r7, #1
 8003b7c:	fa07 f606 	lsl.w	r6, r7, r6
 8003b80:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8003b86:	2c00      	cmp	r4, #0
 8003b88:	d065      	beq.n	8003c56 <HAL_ADCEx_InjectedConfigChannel+0x5e2>
  return __builtin_clz(value);
 8003b8a:	fab4 f484 	clz	r4, r4
 8003b8e:	3401      	adds	r4, #1
 8003b90:	f004 041f 	and.w	r4, r4, #31
 8003b94:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003b98:	e6d4      	b.n	8003944 <HAL_ADCEx_InjectedConfigChannel+0x2d0>
 8003b9a:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 8003b9e:	f8de 4000 	ldr.w	r4, [lr]
 8003ba2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003ba6:	f8ce 4000 	str.w	r4, [lr]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003baa:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bae:	68ec      	ldr	r4, [r5, #12]
 8003bb0:	68ed      	ldr	r5, [r5, #12]
 8003bb2:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bb6:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bb8:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003bbc:	4664      	mov	r4, ip
 8003bbe:	2e00      	cmp	r6, #0
 8003bc0:	f47f af79 	bne.w	8003ab6 <HAL_ADCEx_InjectedConfigChannel+0x442>
 8003bc4:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8003bc8:	e77c      	b.n	8003ac4 <HAL_ADCEx_InjectedConfigChannel+0x450>
 8003bca:	f105 0908 	add.w	r9, r5, #8
  MODIFY_REG(*preg,
 8003bce:	f8d8 4000 	ldr.w	r4, [r8]
 8003bd2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003bd6:	f8c8 4000 	str.w	r4, [r8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003bda:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bde:	68ac      	ldr	r4, [r5, #8]
 8003be0:	68ae      	ldr	r6, [r5, #8]
 8003be2:	f3cc 0712 	ubfx	r7, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003be6:	46ce      	mov	lr, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003be8:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003bec:	4664      	mov	r4, ip
 8003bee:	2f00      	cmp	r7, #0
 8003bf0:	f47f af50 	bne.w	8003a94 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8003bf4:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8003bf8:	e798      	b.n	8003b2c <HAL_ADCEx_InjectedConfigChannel+0x4b8>
  MODIFY_REG(*preg,
 8003bfa:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8003bfc:	461d      	mov	r5, r3
 8003bfe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003c02:	f845 4f60 	str.w	r4, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003c06:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c0a:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8003c0c:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8003c0e:	f3cc 0712 	ubfx	r7, ip, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c12:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c16:	f103 0864 	add.w	r8, r3, #100	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003c1a:	4664      	mov	r4, ip
 8003c1c:	2f00      	cmp	r7, #0
 8003c1e:	f47f af26 	bne.w	8003a6e <HAL_ADCEx_InjectedConfigChannel+0x3fa>
 8003c22:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8003c26:	e779      	b.n	8003b1c <HAL_ADCEx_InjectedConfigChannel+0x4a8>
  MODIFY_REG(*preg,
 8003c28:	683c      	ldr	r4, [r7, #0]
 8003c2a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003c2e:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003c30:	680c      	ldr	r4, [r1, #0]
}
 8003c32:	e569      	b.n	8003708 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8003c34:	4c0c      	ldr	r4, [pc, #48]	@ (8003c68 <HAL_ADCEx_InjectedConfigChannel+0x5f4>)
 8003c36:	e686      	b.n	8003946 <HAL_ADCEx_InjectedConfigChannel+0x2d2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c38:	68ae      	ldr	r6, [r5, #8]
 8003c3a:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c3c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003c40:	e728      	b.n	8003a94 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8003c42:	2602      	movs	r6, #2
 8003c44:	e6e7      	b.n	8003a16 <HAL_ADCEx_InjectedConfigChannel+0x3a2>
 8003c46:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8003c4a:	e6d7      	b.n	80039fc <HAL_ADCEx_InjectedConfigChannel+0x388>
 8003c4c:	68ee      	ldr	r6, [r5, #12]
 8003c4e:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c50:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8003c54:	e72f      	b.n	8003ab6 <HAL_ADCEx_InjectedConfigChannel+0x442>
 8003c56:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 8003c5a:	e674      	b.n	8003946 <HAL_ADCEx_InjectedConfigChannel+0x2d2>
 8003c5c:	2602      	movs	r6, #2
 8003c5e:	e78f      	b.n	8003b80 <HAL_ADCEx_InjectedConfigChannel+0x50c>
 8003c60:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8003c64:	e780      	b.n	8003b68 <HAL_ADCEx_InjectedConfigChannel+0x4f4>
 8003c66:	bf00      	nop
 8003c68:	fe500000 	.word	0xfe500000

08003c6c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c6c:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8003c70:	2a01      	cmp	r2, #1
 8003c72:	d045      	beq.n	8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x94>
{
 8003c74:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c76:	6804      	ldr	r4, [r0, #0]
{
 8003c78:	b09c      	sub	sp, #112	@ 0x70
 8003c7a:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003c7c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003c7e:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c80:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003c84:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8003c86:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003c8a:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c8c:	d008      	beq.n	8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c8e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c94:	f041 0120 	orr.w	r1, r1, #32
 8003c98:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003c9a:	b01c      	add	sp, #112	@ 0x70
 8003c9c:	bcf0      	pop	{r4, r5, r6, r7}
 8003c9e:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ca0:	4a22      	ldr	r2, [pc, #136]	@ (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8003ca2:	6890      	ldr	r0, [r2, #8]
 8003ca4:	0740      	lsls	r0, r0, #29
 8003ca6:	d50b      	bpl.n	8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8003ca8:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003caa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cac:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8003cb0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8003cba:	b01c      	add	sp, #112	@ 0x70
 8003cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	68a0      	ldr	r0, [r4, #8]
 8003cc2:	0745      	lsls	r5, r0, #29
 8003cc4:	d4f1      	bmi.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cc6:	680d      	ldr	r5, [r1, #0]
 8003cc8:	b1e5      	cbz	r5, 8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003cca:	4e19      	ldr	r6, [pc, #100]	@ (8003d30 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8003ccc:	684f      	ldr	r7, [r1, #4]
 8003cce:	68b0      	ldr	r0, [r6, #8]
 8003cd0:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 8003cd4:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8003cd8:	4338      	orrs	r0, r7
 8003cda:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8003cde:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ce0:	68a0      	ldr	r0, [r4, #8]
 8003ce2:	6892      	ldr	r2, [r2, #8]
 8003ce4:	07c0      	lsls	r0, r0, #31
 8003ce6:	d41e      	bmi.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8003ce8:	07d7      	lsls	r7, r2, #31
 8003cea:	d41c      	bmi.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 8003cec:	68b2      	ldr	r2, [r6, #8]
 8003cee:	6889      	ldr	r1, [r1, #8]
 8003cf0:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003cf4:	430d      	orrs	r5, r1
 8003cf6:	f022 020f 	bic.w	r2, r2, #15
 8003cfa:	4315      	orrs	r5, r2
 8003cfc:	60b5      	str	r5, [r6, #8]
 8003cfe:	e012      	b.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0xba>
  __HAL_LOCK(hadc);
 8003d00:	2002      	movs	r0, #2
}
 8003d02:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d04:	480a      	ldr	r0, [pc, #40]	@ (8003d30 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8003d06:	6881      	ldr	r1, [r0, #8]
 8003d08:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003d0c:	6081      	str	r1, [r0, #8]
 8003d0e:	68a1      	ldr	r1, [r4, #8]
 8003d10:	6892      	ldr	r2, [r2, #8]
 8003d12:	07cd      	lsls	r5, r1, #31
 8003d14:	d407      	bmi.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8003d16:	07d4      	lsls	r4, r2, #31
 8003d18:	d405      	bmi.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0xba>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d1a:	6882      	ldr	r2, [r0, #8]
 8003d1c:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003d20:	f022 020f 	bic.w	r2, r2, #15
 8003d24:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d26:	2000      	movs	r0, #0
 8003d28:	e7c4      	b.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8003d2a:	bf00      	nop
 8003d2c:	50000100 	.word	0x50000100
 8003d30:	50000300 	.word	0x50000300

08003d34 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8003d34:	b1b0      	cbz	r0, 8003d64 <HAL_CORDIC_Init+0x30>
{
 8003d36:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8003d38:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003d42:	b153      	cbz	r3, 8003d5a <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8003d44:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8003d46:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8003d48:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8003d4a:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 8003d4e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 8003d52:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8003d56:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8003d58:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8003d5a:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8003d5e:	f7fe fb4d 	bl	80023fc <HAL_CORDIC_MspInit>
 8003d62:	e7ef      	b.n	8003d44 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8003d64:	2001      	movs	r0, #1
}
 8003d66:	4770      	bx	lr

08003d68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d68:	4907      	ldr	r1, [pc, #28]	@ (8003d88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003d6a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d6c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d6e:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d72:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d76:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d78:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d7a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003d82:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dfc <HAL_NVIC_SetPriority+0x70>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d94:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d96:	f1c3 0e07 	rsb	lr, r3, #7
 8003d9a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d9e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da2:	bf28      	it	cs
 8003da4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da8:	f1bc 0f06 	cmp.w	ip, #6
 8003dac:	d91c      	bls.n	8003de8 <HAL_NVIC_SetPriority+0x5c>
 8003dae:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003db2:	f04f 33ff 	mov.w	r3, #4294967295
 8003db6:	fa03 f30c 	lsl.w	r3, r3, ip
 8003dba:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	fa03 f30e 	lsl.w	r3, r3, lr
 8003dc6:	ea21 0303 	bic.w	r3, r1, r3
 8003dca:	fa03 f30c 	lsl.w	r3, r3, ip
 8003dce:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd0:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8003dd2:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003dd6:	db0a      	blt.n	8003dee <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003ddc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003de0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003de4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003de8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dea:	4694      	mov	ip, r2
 8003dec:	e7e7      	b.n	8003dbe <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dee:	4a04      	ldr	r2, [pc, #16]	@ (8003e00 <HAL_NVIC_SetPriority+0x74>)
 8003df0:	f000 000f 	and.w	r0, r0, #15
 8003df4:	4402      	add	r2, r0
 8003df6:	7613      	strb	r3, [r2, #24]
 8003df8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dfc:	e000ed00 	.word	0xe000ed00
 8003e00:	e000ecfc 	.word	0xe000ecfc

08003e04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e04:	2800      	cmp	r0, #0
 8003e06:	db07      	blt.n	8003e18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e08:	4a04      	ldr	r2, [pc, #16]	@ (8003e1c <HAL_NVIC_EnableIRQ+0x18>)
 8003e0a:	0941      	lsrs	r1, r0, #5
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f000 001f 	and.w	r0, r0, #31
 8003e12:	4083      	lsls	r3, r0
 8003e14:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000e100 	.word	0xe000e100

08003e20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e20:	3801      	subs	r0, #1
 8003e22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003e26:	d301      	bcc.n	8003e2c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e28:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003e2a:	4770      	bx	lr
{
 8003e2c:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e2e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e32:	4c07      	ldr	r4, [pc, #28]	@ (8003e50 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e34:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e36:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8003e3a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e3e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e40:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e42:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e44:	619a      	str	r2, [r3, #24]
}
 8003e46:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e4a:	6119      	str	r1, [r3, #16]
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	e000ed00 	.word	0xe000ed00

08003e54 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop

08003e58 <HAL_SYSTICK_IRQHandler>:
{
 8003e58:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003e5a:	f7ff fffb 	bl	8003e54 <HAL_SYSTICK_Callback>
}
 8003e5e:	bd08      	pop	{r3, pc}

08003e60 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8003e60:	b188      	cbz	r0, 8003e86 <HAL_DAC_Init+0x26>
{
 8003e62:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003e64:	7903      	ldrb	r3, [r0, #4]
 8003e66:	4604      	mov	r4, r0
 8003e68:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003e6c:	b13b      	cbz	r3, 8003e7e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e6e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e70:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e72:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e74:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e76:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8003e78:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8003e7a:	4618      	mov	r0, r3
}
 8003e7c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003e7e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003e80:	f7fe fad2 	bl	8002428 <HAL_DAC_MspInit>
 8003e84:	e7f3      	b.n	8003e6e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8003e86:	2001      	movs	r0, #1
}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop

08003e8c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e90:	7943      	ldrb	r3, [r0, #5]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	f000 80cf 	beq.w	8004036 <HAL_DAC_ConfigChannel+0x1aa>
 8003e98:	4616      	mov	r6, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e9a:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ea0:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003ea2:	4688      	mov	r8, r1
 8003ea4:	6889      	ldr	r1, [r1, #8]
 8003ea6:	2904      	cmp	r1, #4
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	d07b      	beq.n	8003fa4 <HAL_DAC_ConfigChannel+0x118>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003eac:	6807      	ldr	r7, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003eae:	f006 0610 	and.w	r6, r6, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003eb2:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d109      	bne.n	8003ece <HAL_DAC_ConfigChannel+0x42>
    tmpreg1 = hdac->Instance->CCR;
 8003eba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ebc:	f8d8 3020 	ldr.w	r3, [r8, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003ec0:	201f      	movs	r0, #31
 8003ec2:	40b0      	lsls	r0, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ec4:	40b3      	lsls	r3, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003ec6:	ea22 0200 	bic.w	r2, r2, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003eca:	4313      	orrs	r3, r2
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003ece:	f8d8 2018 	ldr.w	r2, [r8, #24]
  tmpreg1 = hdac->Instance->MCR;
 8003ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003ed4:	f8d8 c014 	ldr.w	ip, [r8, #20]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003ed8:	2a01      	cmp	r2, #1
 8003eda:	d05f      	beq.n	8003f9c <HAL_DAC_ConfigChannel+0x110>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003edc:	2a02      	cmp	r2, #2
 8003ede:	d05f      	beq.n	8003fa0 <HAL_DAC_ConfigChannel+0x114>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003ee0:	fabc f08c 	clz	r0, ip
 8003ee4:	0940      	lsrs	r0, r0, #5
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003ee6:	f898 4004 	ldrb.w	r4, [r8, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003eea:	f898 2005 	ldrb.w	r2, [r8, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003eee:	f1a4 0401 	sub.w	r4, r4, #1
 8003ef2:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003ef6:	f1a2 0201 	sub.w	r2, r2, #1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003efa:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003efc:	fab2 f282 	clz	r2, r2
 8003f00:	0952      	lsrs	r2, r2, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003f02:	0224      	lsls	r4, r4, #8
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003f04:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 8003f08:	f240 2207 	movw	r2, #519	@ 0x207
 8003f0c:	40b2      	lsls	r2, r6
 8003f0e:	ea23 0902 	bic.w	r9, r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003f12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f16:	40b3      	lsls	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003f18:	ea29 0903 	bic.w	r9, r9, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003f1c:	f8d8 3000 	ldr.w	r3, [r8]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003f20:	ea44 040c 	orr.w	r4, r4, ip
 8003f24:	430c      	orrs	r4, r1
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003f26:	2b02      	cmp	r3, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003f28:	ea44 0400 	orr.w	r4, r4, r0
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003f2c:	f429 4940 	bic.w	r9, r9, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003f30:	d078      	beq.n	8004024 <HAL_DAC_ConfigChannel+0x198>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003f32:	ea49 0903 	orr.w	r9, r9, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f36:	40b4      	lsls	r4, r6
 8003f38:	ea44 0409 	orr.w	r4, r4, r9
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003f3c:	63fc      	str	r4, [r7, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f44:	40b2      	lsls	r2, r6
 8003f46:	ea23 0302 	bic.w	r3, r3, r2
 8003f4a:	603b      	str	r3, [r7, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003f4c:	e9d8 2303 	ldrd	r2, r3, [r8, #12]
  tmpreg1 = hdac->Instance->CR;
 8003f50:	6838      	ldr	r0, [r7, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003f52:	f640 71fe 	movw	r1, #4094	@ 0xffe
 8003f56:	40b1      	lsls	r1, r6
 8003f58:	ea20 0001 	bic.w	r0, r0, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f5c:	fa02 f106 	lsl.w	r1, r2, r6
 8003f60:	4301      	orrs	r1, r0
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003f62:	019b      	lsls	r3, r3, #6
  hdac->Instance->CR = tmpreg1;
 8003f64:	6039      	str	r1, [r7, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003f66:	f3c2 0283 	ubfx	r2, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003f6a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003f6e:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003f70:	20c0      	movs	r0, #192	@ 0xc0
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	40b0      	lsls	r0, r6
 8003f76:	ea22 0200 	bic.w	r2, r2, r0
 8003f7a:	603a      	str	r2, [r7, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003f7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f7e:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003f82:	40b1      	lsls	r1, r6
 8003f84:	ea22 0201 	bic.w	r2, r2, r1
 8003f88:	40b3      	lsls	r3, r6
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f8a:	2100      	movs	r1, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003f8c:	4313      	orrs	r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8003f8e:	2201      	movs	r2, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003f90:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Return function status */
  return HAL_OK;
 8003f92:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8003f94:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 8003f96:	7169      	strb	r1, [r5, #5]
}
 8003f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    connectOnChip = 0x00000000UL;
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	e7a2      	b.n	8003ee6 <HAL_DAC_ConfigChannel+0x5a>
    connectOnChip = DAC_MCR_MODE1_0;
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	e7a0      	b.n	8003ee6 <HAL_DAC_ConfigChannel+0x5a>
    tickstart = HAL_GetTick();
 8003fa4:	f7ff fa54 	bl	8003450 <HAL_GetTick>
 8003fa8:	4604      	mov	r4, r0
    if (Channel == DAC_CHANNEL_1)
 8003faa:	b12e      	cbz	r6, 8003fb8 <HAL_DAC_ConfigChannel+0x12c>
 8003fac:	e015      	b.n	8003fda <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003fae:	f7ff fa4f 	bl	8003450 <HAL_GetTick>
 8003fb2:	1b00      	subs	r0, r0, r4
 8003fb4:	2801      	cmp	r0, #1
 8003fb6:	d841      	bhi.n	800403c <HAL_DAC_ConfigChannel+0x1b0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	d4f6      	bmi.n	8003fae <HAL_DAC_ConfigChannel+0x122>
      HAL_Delay(1);
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f7ff fa4b 	bl	800345c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003fc6:	682f      	ldr	r7, [r5, #0]
 8003fc8:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 8003fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fce:	e00f      	b.n	8003ff0 <HAL_DAC_ConfigChannel+0x164>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003fd0:	f7ff fa3e 	bl	8003450 <HAL_GetTick>
 8003fd4:	1b00      	subs	r0, r0, r4
 8003fd6:	2801      	cmp	r0, #1
 8003fd8:	d830      	bhi.n	800403c <HAL_DAC_ConfigChannel+0x1b0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003fda:	682b      	ldr	r3, [r5, #0]
 8003fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	dbf6      	blt.n	8003fd0 <HAL_DAC_ConfigChannel+0x144>
      HAL_Delay(1U);
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	f7ff fa3a 	bl	800345c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003fe8:	682f      	ldr	r7, [r5, #0]
 8003fea:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 8003fee:	647b      	str	r3, [r7, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003ff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ff2:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 8003ff6:	f006 0610 	and.w	r6, r6, #16
 8003ffa:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003ffe:	40b1      	lsls	r1, r6
 8004000:	40b2      	lsls	r2, r6
 8004002:	ea23 0301 	bic.w	r3, r3, r1
 8004006:	4313      	orrs	r3, r2
 8004008:	64bb      	str	r3, [r7, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800400a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800400c:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8004010:	21ff      	movs	r1, #255	@ 0xff
 8004012:	40b1      	lsls	r1, r6
 8004014:	ea23 0301 	bic.w	r3, r3, r1
 8004018:	40b2      	lsls	r2, r6
 800401a:	4313      	orrs	r3, r2
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800401c:	f8d8 1008 	ldr.w	r1, [r8, #8]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004022:	e746      	b.n	8003eb2 <HAL_DAC_ConfigChannel+0x26>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004024:	f000 fdd4 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004028:	4b0c      	ldr	r3, [pc, #48]	@ (800405c <HAL_DAC_ConfigChannel+0x1d0>)
 800402a:	4298      	cmp	r0, r3
 800402c:	d90e      	bls.n	800404c <HAL_DAC_ConfigChannel+0x1c0>
  hdac->Instance->MCR = tmpreg1;
 800402e:	682f      	ldr	r7, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004030:	f449 4900 	orr.w	r9, r9, #32768	@ 0x8000
 8004034:	e77f      	b.n	8003f36 <HAL_DAC_ConfigChannel+0xaa>
  __HAL_LOCK(hdac);
 8004036:	2002      	movs	r0, #2
}
 8004038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800403c:	692b      	ldr	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800403e:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004040:	f043 0308 	orr.w	r3, r3, #8
 8004044:	612b      	str	r3, [r5, #16]
          return HAL_TIMEOUT;
 8004046:	2003      	movs	r0, #3
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004048:	712a      	strb	r2, [r5, #4]
          return HAL_TIMEOUT;
 800404a:	e7a5      	b.n	8003f98 <HAL_DAC_ConfigChannel+0x10c>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800404c:	4b04      	ldr	r3, [pc, #16]	@ (8004060 <HAL_DAC_ConfigChannel+0x1d4>)
  hdac->Instance->MCR = tmpreg1;
 800404e:	682f      	ldr	r7, [r5, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004050:	4298      	cmp	r0, r3
 8004052:	f67f af70 	bls.w	8003f36 <HAL_DAC_ConfigChannel+0xaa>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004056:	f449 4980 	orr.w	r9, r9, #16384	@ 0x4000
 800405a:	e76c      	b.n	8003f36 <HAL_DAC_ConfigChannel+0xaa>
 800405c:	09896800 	.word	0x09896800
 8004060:	04c4b400 	.word	0x04c4b400

08004064 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004064:	680b      	ldr	r3, [r1, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 8198 	beq.w	800439c <HAL_GPIO_Init+0x338>
{
 800406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004070:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8004074:	b085      	sub	sp, #20
  uint32_t position = 0x00U;
 8004076:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800407a:	f04f 0b01 	mov.w	fp, #1
 800407e:	f000 810d 	beq.w	800429c <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004082:	f8df e34c 	ldr.w	lr, [pc, #844]	@ 80043d0 <HAL_GPIO_Init+0x36c>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004086:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 8004088:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800408a:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 800408e:	ea1c 0a03 	ands.w	sl, ip, r3
 8004092:	d077      	beq.n	8004184 <HAL_GPIO_Init+0x120>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004094:	684d      	ldr	r5, [r1, #4]
 8004096:	f005 0703 	and.w	r7, r5, #3
 800409a:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800409c:	2303      	movs	r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800409e:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040a2:	fa03 f604 	lsl.w	r6, r3, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040a6:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040aa:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040ae:	f240 8119 	bls.w	80042e4 <HAL_GPIO_Init+0x280>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040b2:	2f03      	cmp	r7, #3
 80040b4:	f040 8179 	bne.w	80043aa <HAL_GPIO_Init+0x346>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b8:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 80040bc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040be:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040c0:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040c2:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80040c6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040c8:	d05c      	beq.n	8004184 <HAL_GPIO_Init+0x120>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ca:	4ebe      	ldr	r6, [pc, #760]	@ (80043c4 <HAL_GPIO_Init+0x360>)
 80040cc:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 80040ce:	f044 0401 	orr.w	r4, r4, #1
 80040d2:	6634      	str	r4, [r6, #96]	@ 0x60
 80040d4:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 80040d6:	f004 0401 	and.w	r4, r4, #1
 80040da:	9403      	str	r4, [sp, #12]
 80040dc:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80040de:	f022 0403 	bic.w	r4, r2, #3
 80040e2:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040e6:	f002 0703 	and.w	r7, r2, #3
 80040ea:	230f      	movs	r3, #15
 80040ec:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 80040f0:	00bf      	lsls	r7, r7, #2
 80040f2:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040f6:	4bb4      	ldr	r3, [pc, #720]	@ (80043c8 <HAL_GPIO_Init+0x364>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80040f8:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040fa:	4298      	cmp	r0, r3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040fc:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004100:	f000 8140 	beq.w	8004384 <HAL_GPIO_Init+0x320>
 8004104:	4bb1      	ldr	r3, [pc, #708]	@ (80043cc <HAL_GPIO_Init+0x368>)
 8004106:	4298      	cmp	r0, r3
 8004108:	f000 812d 	beq.w	8004366 <HAL_GPIO_Init+0x302>
 800410c:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 80043d4 <HAL_GPIO_Init+0x370>
 8004110:	4560      	cmp	r0, ip
 8004112:	f000 813d 	beq.w	8004390 <HAL_GPIO_Init+0x32c>
 8004116:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 80043d8 <HAL_GPIO_Init+0x374>
 800411a:	4560      	cmp	r0, ip
 800411c:	f000 813f 	beq.w	800439e <HAL_GPIO_Init+0x33a>
 8004120:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 80043dc <HAL_GPIO_Init+0x378>
 8004124:	4560      	cmp	r0, ip
 8004126:	bf0c      	ite	eq
 8004128:	f04f 0c05 	moveq.w	ip, #5
 800412c:	f04f 0c06 	movne.w	ip, #6
 8004130:	fa0c f707 	lsl.w	r7, ip, r7
 8004134:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004136:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 8004138:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 800413c:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004140:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 8004142:	bf54      	ite	pl
 8004144:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004146:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR1 = temp;
 800414a:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 800414e:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004152:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 8004154:	bf54      	ite	pl
 8004156:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004158:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR1 = temp;
 800415c:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR1;
 8004160:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004164:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8004166:	bf54      	ite	pl
 8004168:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800416a:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR1 = temp;
 800416e:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004172:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004176:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 8004178:	bf54      	ite	pl
 800417a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800417c:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR1 = temp;
 8004180:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004184:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 8004186:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004188:	fa33 f402 	lsrs.w	r4, r3, r2
 800418c:	f47f af7c 	bne.w	8004088 <HAL_GPIO_Init+0x24>
  }
}
 8004190:	b005      	add	sp, #20
 8004192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004196:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800419a:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800419c:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041a0:	fa06 f807 	lsl.w	r8, r6, r7
 80041a4:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80041a8:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80041ac:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041b0:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041b4:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 80041b8:	fa0e fe02 	lsl.w	lr, lr, r2
 80041bc:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80041c0:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80041c4:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041c8:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041ca:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ce:	fa06 fe07 	lsl.w	lr, r6, r7
 80041d2:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041d6:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80041d8:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041dc:	d119      	bne.n	8004212 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->AFR[position >> 3U];
 80041de:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041e2:	690e      	ldr	r6, [r1, #16]
 80041e4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041e8:	f002 0807 	and.w	r8, r2, #7
 80041ec:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 80041f0:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041f4:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3U];
 80041f8:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041fc:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041fe:	260f      	movs	r6, #15
 8004200:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004204:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004206:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800420a:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 800420e:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004212:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8004214:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004216:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800421a:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800421c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004220:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004222:	d036      	beq.n	8004292 <HAL_GPIO_Init+0x22e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004224:	4f67      	ldr	r7, [pc, #412]	@ (80043c4 <HAL_GPIO_Init+0x360>)
 8004226:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8004228:	f044 0401 	orr.w	r4, r4, #1
 800422c:	663c      	str	r4, [r7, #96]	@ 0x60
 800422e:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8004230:	f004 0401 	and.w	r4, r4, #1
 8004234:	9403      	str	r4, [sp, #12]
 8004236:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004238:	f022 0403 	bic.w	r4, r2, #3
 800423c:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8004240:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004244:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004248:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800424c:	260f      	movs	r6, #15
 800424e:	00bf      	lsls	r7, r7, #2
 8004250:	fa06 f707 	lsl.w	r7, r6, r7
 8004254:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004258:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 800425a:	4c5d      	ldr	r4, [pc, #372]	@ (80043d0 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800425c:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 800425e:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8004260:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004264:	d47c      	bmi.n	8004360 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 8004266:	403c      	ands	r4, r7
        EXTI->RTSR1 = temp;
 8004268:	4e59      	ldr	r6, [pc, #356]	@ (80043d0 <HAL_GPIO_Init+0x36c>)
 800426a:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR1;
 800426c:	68f4      	ldr	r4, [r6, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800426e:	02ae      	lsls	r6, r5, #10
 8004270:	f100 8085 	bmi.w	800437e <HAL_GPIO_Init+0x31a>
        temp &= ~(iocurrent);
 8004274:	403c      	ands	r4, r7
        EXTI->FTSR1 = temp;
 8004276:	4e56      	ldr	r6, [pc, #344]	@ (80043d0 <HAL_GPIO_Init+0x36c>)
 8004278:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR1;
 800427a:	6874      	ldr	r4, [r6, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800427c:	03ae      	lsls	r6, r5, #14
 800427e:	d47b      	bmi.n	8004378 <HAL_GPIO_Init+0x314>
        temp &= ~(iocurrent);
 8004280:	403c      	ands	r4, r7
        EXTI->EMR1 = temp;
 8004282:	4e53      	ldr	r6, [pc, #332]	@ (80043d0 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004284:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 8004286:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 8004288:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800428a:	d472      	bmi.n	8004372 <HAL_GPIO_Init+0x30e>
        temp &= ~(iocurrent);
 800428c:	403c      	ands	r4, r7
        EXTI->IMR1 = temp;
 800428e:	4d50      	ldr	r5, [pc, #320]	@ (80043d0 <HAL_GPIO_Init+0x36c>)
 8004290:	602c      	str	r4, [r5, #0]
    position++;
 8004292:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004294:	fa33 f402 	lsrs.w	r4, r3, r2
 8004298:	f43f af7a 	beq.w	8004190 <HAL_GPIO_Init+0x12c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800429c:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 80042a0:	ea13 0c0e 	ands.w	ip, r3, lr
 80042a4:	d0f5      	beq.n	8004292 <HAL_GPIO_Init+0x22e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042a6:	684d      	ldr	r5, [r1, #4]
 80042a8:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042aa:	2603      	movs	r6, #3
 80042ac:	fa06 f807 	lsl.w	r8, r6, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042b0:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042b4:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042b8:	f104 38ff 	add.w	r8, r4, #4294967295
 80042bc:	f1b8 0f01 	cmp.w	r8, #1
 80042c0:	f67f af69 	bls.w	8004196 <HAL_GPIO_Init+0x132>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042c4:	2c03      	cmp	r4, #3
 80042c6:	d0a4      	beq.n	8004212 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->PUPDR;
 80042c8:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042cc:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 80042ce:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042d2:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042d6:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042da:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 80042de:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e2:	e796      	b.n	8004212 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->OSPEEDR;
 80042e4:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042e8:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042ea:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042ee:	fa03 f804 	lsl.w	r8, r3, r4
 80042f2:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80042f6:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80042fa:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042fe:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004300:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004304:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 8004308:	fa0c fc02 	lsl.w	ip, ip, r2
 800430c:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 8004310:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8004314:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004318:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800431c:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004320:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004324:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 8004326:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800432a:	f47f aec5 	bne.w	80040b8 <HAL_GPIO_Init+0x54>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800432e:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8004330:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004334:	f002 0c07 	and.w	ip, r2, #7
 8004338:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800433c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004340:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8004344:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004348:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800434a:	230f      	movs	r3, #15
 800434c:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004350:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004352:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004356:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 800435a:	f8c8 c020 	str.w	ip, [r8, #32]
 800435e:	e6ab      	b.n	80040b8 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8004360:	ea44 040c 	orr.w	r4, r4, ip
 8004364:	e780      	b.n	8004268 <HAL_GPIO_Init+0x204>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004366:	f04f 0c02 	mov.w	ip, #2
 800436a:	fa0c f707 	lsl.w	r7, ip, r7
 800436e:	433e      	orrs	r6, r7
 8004370:	e6e1      	b.n	8004136 <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8004372:	ea4c 0404 	orr.w	r4, ip, r4
 8004376:	e78a      	b.n	800428e <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 8004378:	ea44 040c 	orr.w	r4, r4, ip
 800437c:	e781      	b.n	8004282 <HAL_GPIO_Init+0x21e>
          temp |= iocurrent;
 800437e:	ea4c 0404 	orr.w	r4, ip, r4
 8004382:	e778      	b.n	8004276 <HAL_GPIO_Init+0x212>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004384:	f04f 0c01 	mov.w	ip, #1
 8004388:	fa0c f707 	lsl.w	r7, ip, r7
 800438c:	433e      	orrs	r6, r7
 800438e:	e6d2      	b.n	8004136 <HAL_GPIO_Init+0xd2>
 8004390:	f04f 0c03 	mov.w	ip, #3
 8004394:	fa0c f707 	lsl.w	r7, ip, r7
 8004398:	433e      	orrs	r6, r7
 800439a:	e6cc      	b.n	8004136 <HAL_GPIO_Init+0xd2>
 800439c:	4770      	bx	lr
 800439e:	f04f 0c04 	mov.w	ip, #4
 80043a2:	fa0c f707 	lsl.w	r7, ip, r7
 80043a6:	433e      	orrs	r6, r7
 80043a8:	e6c5      	b.n	8004136 <HAL_GPIO_Init+0xd2>
        temp = GPIOx->PUPDR;
 80043aa:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ae:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043b0:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b4:	fa03 fc04 	lsl.w	ip, r3, r4
 80043b8:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 80043bc:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c0:	e67a      	b.n	80040b8 <HAL_GPIO_Init+0x54>
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	48000400 	.word	0x48000400
 80043cc:	48000800 	.word	0x48000800
 80043d0:	40010400 	.word	0x40010400
 80043d4:	48000c00 	.word	0x48000c00
 80043d8:	48001000 	.word	0x48001000
 80043dc:	48001400 	.word	0x48001400

080043e0 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043e0:	4a35      	ldr	r2, [pc, #212]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80043e2:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043e4:	b960      	cbnz	r0, 8004400 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043ee:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043f2:	d01b      	beq.n	800442c <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80043fc:	2000      	movs	r0, #0
}
 80043fe:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004400:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004404:	d006      	beq.n	8004414 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004406:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800440a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800440e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004410:	2000      	movs	r0, #0
}
 8004412:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004414:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800441c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004420:	d029      	beq.n	8004476 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004426:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800442a:	e7f1      	b.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800442c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004430:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004434:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004436:	4821      	ldr	r0, [pc, #132]	@ (80044bc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004438:	4921      	ldr	r1, [pc, #132]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800443a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800443e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004442:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004444:	6803      	ldr	r3, [r0, #0]
 8004446:	2032      	movs	r0, #50	@ 0x32
 8004448:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800444c:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800444e:	fba1 1303 	umull	r1, r3, r1, r3
 8004452:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004454:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004456:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800445a:	d506      	bpl.n	800446a <HAL_PWREx_ControlVoltageScaling+0x8a>
 800445c:	e000      	b.n	8004460 <HAL_PWREx_ControlVoltageScaling+0x80>
 800445e:	b123      	cbz	r3, 800446a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004460:	6951      	ldr	r1, [r2, #20]
 8004462:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004464:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004468:	d4f9      	bmi.n	800445e <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800446a:	4b13      	ldr	r3, [pc, #76]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	055b      	lsls	r3, r3, #21
 8004470:	d5ce      	bpl.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8004472:	2003      	movs	r0, #3
 8004474:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800447a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800447e:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004480:	480e      	ldr	r0, [pc, #56]	@ (80044bc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004482:	490f      	ldr	r1, [pc, #60]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004484:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004488:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800448c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800448e:	6803      	ldr	r3, [r0, #0]
 8004490:	2032      	movs	r0, #50	@ 0x32
 8004492:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004496:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004498:	fba1 1303 	umull	r1, r3, r1, r3
 800449c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800449e:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044a0:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044a4:	d5e1      	bpl.n	800446a <HAL_PWREx_ControlVoltageScaling+0x8a>
 80044a6:	e001      	b.n	80044ac <HAL_PWREx_ControlVoltageScaling+0xcc>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0de      	beq.n	800446a <HAL_PWREx_ControlVoltageScaling+0x8a>
 80044ac:	6951      	ldr	r1, [r2, #20]
 80044ae:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80044b0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b4:	d5d9      	bpl.n	800446a <HAL_PWREx_ControlVoltageScaling+0x8a>
 80044b6:	e7f7      	b.n	80044a8 <HAL_PWREx_ControlVoltageScaling+0xc8>
 80044b8:	40007000 	.word	0x40007000
 80044bc:	200006d8 	.word	0x200006d8
 80044c0:	431bde83 	.word	0x431bde83

080044c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80044c4:	4a02      	ldr	r2, [pc, #8]	@ (80044d0 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80044c6:	6893      	ldr	r3, [r2, #8]
 80044c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044cc:	6093      	str	r3, [r2, #8]
}
 80044ce:	4770      	bx	lr
 80044d0:	40007000 	.word	0x40007000

080044d4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044d4:	2800      	cmp	r0, #0
 80044d6:	f000 8239 	beq.w	800494c <HAL_RCC_OscConfig+0x478>
{
 80044da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	6803      	ldr	r3, [r0, #0]
 80044e0:	07d9      	lsls	r1, r3, #31
{
 80044e2:	b082      	sub	sp, #8
 80044e4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e6:	d512      	bpl.n	800450e <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044e8:	49a3      	ldr	r1, [pc, #652]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
 80044ea:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044ec:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ee:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80044f2:	2a0c      	cmp	r2, #12
 80044f4:	f000 80d6 	beq.w	80046a4 <HAL_RCC_OscConfig+0x1d0>
 80044f8:	2a08      	cmp	r2, #8
 80044fa:	f040 80d8 	bne.w	80046ae <HAL_RCC_OscConfig+0x1da>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fe:	4a9e      	ldr	r2, [pc, #632]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	0392      	lsls	r2, r2, #14
 8004504:	d503      	bpl.n	800450e <HAL_RCC_OscConfig+0x3a>
 8004506:	6862      	ldr	r2, [r4, #4]
 8004508:	2a00      	cmp	r2, #0
 800450a:	f000 81a4 	beq.w	8004856 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450e:	079a      	lsls	r2, r3, #30
 8004510:	d522      	bpl.n	8004558 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004512:	4a99      	ldr	r2, [pc, #612]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
 8004514:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004516:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004518:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800451c:	2b0c      	cmp	r3, #12
 800451e:	f000 80fe 	beq.w	800471e <HAL_RCC_OscConfig+0x24a>
 8004522:	2b04      	cmp	r3, #4
 8004524:	f040 8100 	bne.w	8004728 <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004528:	4b93      	ldr	r3, [pc, #588]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	055b      	lsls	r3, r3, #21
 800452e:	d503      	bpl.n	8004538 <HAL_RCC_OscConfig+0x64>
 8004530:	68e3      	ldr	r3, [r4, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 818f 	beq.w	8004856 <HAL_RCC_OscConfig+0x382>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004538:	4a8f      	ldr	r2, [pc, #572]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
 800453a:	6920      	ldr	r0, [r4, #16]
 800453c:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800453e:	498f      	ldr	r1, [pc, #572]	@ (800477c <HAL_RCC_OscConfig+0x2a8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004540:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004544:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004548:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800454a:	6808      	ldr	r0, [r1, #0]
 800454c:	f7fe ff3e 	bl	80033cc <HAL_InitTick>
 8004550:	2800      	cmp	r0, #0
 8004552:	f040 8180 	bne.w	8004856 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	071a      	lsls	r2, r3, #28
 800455a:	d519      	bpl.n	8004590 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800455c:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455e:	4d86      	ldr	r5, [pc, #536]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 80c8 	beq.w	80046f6 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_ENABLE();
 8004566:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004572:	f7fe ff6d 	bl	8003450 <HAL_GetTick>
 8004576:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004578:	e005      	b.n	8004586 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800457a:	f7fe ff69 	bl	8003450 <HAL_GetTick>
 800457e:	1b80      	subs	r0, r0, r6
 8004580:	2802      	cmp	r0, #2
 8004582:	f200 8118 	bhi.w	80047b6 <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004586:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800458a:	079b      	lsls	r3, r3, #30
 800458c:	d5f5      	bpl.n	800457a <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	075d      	lsls	r5, r3, #29
 8004592:	d541      	bpl.n	8004618 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004594:	4b78      	ldr	r3, [pc, #480]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
 8004596:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004598:	00d0      	lsls	r0, r2, #3
 800459a:	f100 8110 	bmi.w	80047be <HAL_RCC_OscConfig+0x2ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80045a0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80045a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80045a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80045b0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b2:	4e73      	ldr	r6, [pc, #460]	@ (8004780 <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	6833      	ldr	r3, [r6, #0]
 80045b6:	05d9      	lsls	r1, r3, #23
 80045b8:	f140 812f 	bpl.w	800481a <HAL_RCC_OscConfig+0x346>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045bc:	68a3      	ldr	r3, [r4, #8]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	f000 80ff 	beq.w	80047c2 <HAL_RCC_OscConfig+0x2ee>
 80045c4:	2b05      	cmp	r3, #5
 80045c6:	f000 8185 	beq.w	80048d4 <HAL_RCC_OscConfig+0x400>
 80045ca:	4e6b      	ldr	r6, [pc, #428]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
 80045cc:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 80045d0:	f022 0201 	bic.w	r2, r2, #1
 80045d4:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 80045d8:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 80045dc:	f022 0204 	bic.w	r2, r2, #4
 80045e0:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f040 80f3 	bne.w	80047d0 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ea:	f7fe ff31 	bl	8003450 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80045f2:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045f4:	e005      	b.n	8004602 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f6:	f7fe ff2b 	bl	8003450 <HAL_GetTick>
 80045fa:	1bc0      	subs	r0, r0, r7
 80045fc:	4540      	cmp	r0, r8
 80045fe:	f200 80da 	bhi.w	80047b6 <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004602:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8004606:	0799      	lsls	r1, r3, #30
 8004608:	d4f5      	bmi.n	80045f6 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800460a:	b125      	cbz	r5, 8004616 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460c:	4a5a      	ldr	r2, [pc, #360]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
 800460e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004614:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	069a      	lsls	r2, r3, #26
 800461a:	d518      	bpl.n	800464e <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800461c:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800461e:	4d56      	ldr	r5, [pc, #344]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80e6 	beq.w	80047f2 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSI48_ENABLE();
 8004626:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004632:	f7fe ff0d 	bl	8003450 <HAL_GetTick>
 8004636:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004638:	e005      	b.n	8004646 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800463a:	f7fe ff09 	bl	8003450 <HAL_GetTick>
 800463e:	1b80      	subs	r0, r0, r6
 8004640:	2802      	cmp	r0, #2
 8004642:	f200 80b8 	bhi.w	80047b6 <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004646:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800464a:	079b      	lsls	r3, r3, #30
 800464c:	d5f5      	bpl.n	800463a <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800464e:	69e3      	ldr	r3, [r4, #28]
 8004650:	b323      	cbz	r3, 800469c <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004652:	4d49      	ldr	r5, [pc, #292]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
 8004654:	68aa      	ldr	r2, [r5, #8]
 8004656:	f002 020c 	and.w	r2, r2, #12
 800465a:	2a0c      	cmp	r2, #12
 800465c:	f000 8148 	beq.w	80048f0 <HAL_RCC_OscConfig+0x41c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004660:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004662:	682b      	ldr	r3, [r5, #0]
 8004664:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004668:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800466a:	f000 80f6 	beq.w	800485a <HAL_RCC_OscConfig+0x386>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800466e:	68eb      	ldr	r3, [r5, #12]
 8004670:	f023 0303 	bic.w	r3, r3, #3
 8004674:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004676:	68eb      	ldr	r3, [r5, #12]
 8004678:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800467c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004680:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fe fee5 	bl	8003450 <HAL_GetTick>
 8004686:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004688:	e005      	b.n	8004696 <HAL_RCC_OscConfig+0x1c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468a:	f7fe fee1 	bl	8003450 <HAL_GetTick>
 800468e:	1b00      	subs	r0, r0, r4
 8004690:	2802      	cmp	r0, #2
 8004692:	f200 8090 	bhi.w	80047b6 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004696:	682b      	ldr	r3, [r5, #0]
 8004698:	019b      	lsls	r3, r3, #6
 800469a:	d4f6      	bmi.n	800468a <HAL_RCC_OscConfig+0x1b6>
      }
    }
  }
  }

  return HAL_OK;
 800469c:	2000      	movs	r0, #0
}
 800469e:	b002      	add	sp, #8
 80046a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046a4:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046a8:	2903      	cmp	r1, #3
 80046aa:	f43f af28 	beq.w	80044fe <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ae:	6863      	ldr	r3, [r4, #4]
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b4:	d055      	beq.n	8004762 <HAL_RCC_OscConfig+0x28e>
 80046b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046ba:	f000 80bf 	beq.w	800483c <HAL_RCC_OscConfig+0x368>
 80046be:	4d2e      	ldr	r5, [pc, #184]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
 80046c0:	682a      	ldr	r2, [r5, #0]
 80046c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80046c6:	602a      	str	r2, [r5, #0]
 80046c8:	682a      	ldr	r2, [r5, #0]
 80046ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046ce:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d14b      	bne.n	800476c <HAL_RCC_OscConfig+0x298>
        tickstart = HAL_GetTick();
 80046d4:	f7fe febc 	bl	8003450 <HAL_GetTick>
 80046d8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046da:	e004      	b.n	80046e6 <HAL_RCC_OscConfig+0x212>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046dc:	f7fe feb8 	bl	8003450 <HAL_GetTick>
 80046e0:	1b80      	subs	r0, r0, r6
 80046e2:	2864      	cmp	r0, #100	@ 0x64
 80046e4:	d867      	bhi.n	80047b6 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046e6:	682b      	ldr	r3, [r5, #0]
 80046e8:	0399      	lsls	r1, r3, #14
 80046ea:	d4f7      	bmi.n	80046dc <HAL_RCC_OscConfig+0x208>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	079a      	lsls	r2, r3, #30
 80046f0:	f57f af32 	bpl.w	8004558 <HAL_RCC_OscConfig+0x84>
 80046f4:	e70d      	b.n	8004512 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 80046f6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004702:	f7fe fea5 	bl	8003450 <HAL_GetTick>
 8004706:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004708:	e004      	b.n	8004714 <HAL_RCC_OscConfig+0x240>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470a:	f7fe fea1 	bl	8003450 <HAL_GetTick>
 800470e:	1b80      	subs	r0, r0, r6
 8004710:	2802      	cmp	r0, #2
 8004712:	d850      	bhi.n	80047b6 <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004714:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004718:	079f      	lsls	r7, r3, #30
 800471a:	d4f6      	bmi.n	800470a <HAL_RCC_OscConfig+0x236>
 800471c:	e737      	b.n	800458e <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800471e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004722:	2a02      	cmp	r2, #2
 8004724:	f43f af00 	beq.w	8004528 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004728:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800472a:	4d13      	ldr	r5, [pc, #76]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800472c:	2b00      	cmp	r3, #0
 800472e:	d032      	beq.n	8004796 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_HSI_ENABLE();
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004736:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004738:	f7fe fe8a 	bl	8003450 <HAL_GetTick>
 800473c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800473e:	e004      	b.n	800474a <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004740:	f7fe fe86 	bl	8003450 <HAL_GetTick>
 8004744:	1b80      	subs	r0, r0, r6
 8004746:	2802      	cmp	r0, #2
 8004748:	d835      	bhi.n	80047b6 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800474a:	682b      	ldr	r3, [r5, #0]
 800474c:	055f      	lsls	r7, r3, #21
 800474e:	d5f7      	bpl.n	8004740 <HAL_RCC_OscConfig+0x26c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004750:	686b      	ldr	r3, [r5, #4]
 8004752:	6922      	ldr	r2, [r4, #16]
 8004754:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004758:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800475c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	e6fa      	b.n	8004558 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004762:	4a05      	ldr	r2, [pc, #20]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
 8004764:	6813      	ldr	r3, [r2, #0]
 8004766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800476a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800476c:	f7fe fe70 	bl	8003450 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004770:	4e01      	ldr	r6, [pc, #4]	@ (8004778 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8004772:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004774:	e00b      	b.n	800478e <HAL_RCC_OscConfig+0x2ba>
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
 800477c:	200006e0 	.word	0x200006e0
 8004780:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004784:	f7fe fe64 	bl	8003450 <HAL_GetTick>
 8004788:	1b40      	subs	r0, r0, r5
 800478a:	2864      	cmp	r0, #100	@ 0x64
 800478c:	d813      	bhi.n	80047b6 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478e:	6833      	ldr	r3, [r6, #0]
 8004790:	039f      	lsls	r7, r3, #14
 8004792:	d5f7      	bpl.n	8004784 <HAL_RCC_OscConfig+0x2b0>
 8004794:	e7aa      	b.n	80046ec <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_DISABLE();
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800479c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800479e:	f7fe fe57 	bl	8003450 <HAL_GetTick>
 80047a2:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	0559      	lsls	r1, r3, #21
 80047a8:	f57f aed5 	bpl.w	8004556 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ac:	f7fe fe50 	bl	8003450 <HAL_GetTick>
 80047b0:	1b80      	subs	r0, r0, r6
 80047b2:	2802      	cmp	r0, #2
 80047b4:	d9f6      	bls.n	80047a4 <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 80047b6:	2003      	movs	r0, #3
}
 80047b8:	b002      	add	sp, #8
 80047ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80047be:	2500      	movs	r5, #0
 80047c0:	e6f7      	b.n	80045b2 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c2:	4a63      	ldr	r2, [pc, #396]	@ (8004950 <HAL_RCC_OscConfig+0x47c>)
 80047c4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80047d0:	f7fe fe3e 	bl	8003450 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d4:	4f5e      	ldr	r7, [pc, #376]	@ (8004950 <HAL_RCC_OscConfig+0x47c>)
      tickstart = HAL_GetTick();
 80047d6:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d8:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047dc:	e004      	b.n	80047e8 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047de:	f7fe fe37 	bl	8003450 <HAL_GetTick>
 80047e2:	1b80      	subs	r0, r0, r6
 80047e4:	4540      	cmp	r0, r8
 80047e6:	d8e6      	bhi.n	80047b6 <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80047ec:	079b      	lsls	r3, r3, #30
 80047ee:	d5f6      	bpl.n	80047de <HAL_RCC_OscConfig+0x30a>
 80047f0:	e70b      	b.n	800460a <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 80047f2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80047fe:	f7fe fe27 	bl	8003450 <HAL_GetTick>
 8004802:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004804:	e004      	b.n	8004810 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004806:	f7fe fe23 	bl	8003450 <HAL_GetTick>
 800480a:	1b80      	subs	r0, r0, r6
 800480c:	2802      	cmp	r0, #2
 800480e:	d8d2      	bhi.n	80047b6 <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004810:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004814:	079f      	lsls	r7, r3, #30
 8004816:	d4f6      	bmi.n	8004806 <HAL_RCC_OscConfig+0x332>
 8004818:	e719      	b.n	800464e <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800481a:	6833      	ldr	r3, [r6, #0]
 800481c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004820:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004822:	f7fe fe15 	bl	8003450 <HAL_GetTick>
 8004826:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	05da      	lsls	r2, r3, #23
 800482c:	f53f aec6 	bmi.w	80045bc <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004830:	f7fe fe0e 	bl	8003450 <HAL_GetTick>
 8004834:	1bc0      	subs	r0, r0, r7
 8004836:	2802      	cmp	r0, #2
 8004838:	d9f6      	bls.n	8004828 <HAL_RCC_OscConfig+0x354>
 800483a:	e7bc      	b.n	80047b6 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800483c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004840:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004852:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004854:	e78a      	b.n	800476c <HAL_RCC_OscConfig+0x298>
    return HAL_ERROR;
 8004856:	2001      	movs	r0, #1
 8004858:	e721      	b.n	800469e <HAL_RCC_OscConfig+0x1ca>
        tickstart = HAL_GetTick();
 800485a:	f7fe fdf9 	bl	8003450 <HAL_GetTick>
 800485e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004860:	e004      	b.n	800486c <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004862:	f7fe fdf5 	bl	8003450 <HAL_GetTick>
 8004866:	1b80      	subs	r0, r0, r6
 8004868:	2802      	cmp	r0, #2
 800486a:	d8a4      	bhi.n	80047b6 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	0199      	lsls	r1, r3, #6
 8004870:	d4f7      	bmi.n	8004862 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004872:	68e9      	ldr	r1, [r5, #12]
 8004874:	4b37      	ldr	r3, [pc, #220]	@ (8004954 <HAL_RCC_OscConfig+0x480>)
 8004876:	6a22      	ldr	r2, [r4, #32]
 8004878:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800487a:	400b      	ands	r3, r1
 800487c:	4313      	orrs	r3, r2
 800487e:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8004882:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004886:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800488a:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 800488e:	3801      	subs	r0, #1
 8004890:	0849      	lsrs	r1, r1, #1
 8004892:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004896:	3901      	subs	r1, #1
 8004898:	0852      	lsrs	r2, r2, #1
 800489a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800489e:	3a01      	subs	r2, #1
 80048a0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80048a4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80048a6:	682b      	ldr	r3, [r5, #0]
 80048a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ac:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048ae:	68eb      	ldr	r3, [r5, #12]
 80048b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048b4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80048b6:	f7fe fdcb 	bl	8003450 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ba:	4d25      	ldr	r5, [pc, #148]	@ (8004950 <HAL_RCC_OscConfig+0x47c>)
        tickstart = HAL_GetTick();
 80048bc:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048be:	e005      	b.n	80048cc <HAL_RCC_OscConfig+0x3f8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c0:	f7fe fdc6 	bl	8003450 <HAL_GetTick>
 80048c4:	1b00      	subs	r0, r0, r4
 80048c6:	2802      	cmp	r0, #2
 80048c8:	f63f af75 	bhi.w	80047b6 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	019a      	lsls	r2, r3, #6
 80048d0:	d5f6      	bpl.n	80048c0 <HAL_RCC_OscConfig+0x3ec>
 80048d2:	e6e3      	b.n	800469c <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004950 <HAL_RCC_OscConfig+0x47c>)
 80048d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80048da:	f042 0204 	orr.w	r2, r2, #4
 80048de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80048e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ee:	e76f      	b.n	80047d0 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d0b0      	beq.n	8004856 <HAL_RCC_OscConfig+0x382>
      temp_pllckcfg = RCC->PLLCFGR;
 80048f4:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	6a22      	ldr	r2, [r4, #32]
 80048f8:	f003 0103 	and.w	r1, r3, #3
 80048fc:	4291      	cmp	r1, r2
 80048fe:	d1aa      	bne.n	8004856 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004900:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004902:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004906:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004908:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800490c:	d1a3      	bne.n	8004856 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800490e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004910:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004914:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004918:	d19d      	bne.n	8004856 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800491a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800491c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004920:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004924:	d197      	bne.n	8004856 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004926:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004928:	0852      	lsrs	r2, r2, #1
 800492a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800492e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004930:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004934:	d18f      	bne.n	8004856 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004936:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004938:	0852      	lsrs	r2, r2, #1
 800493a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800493e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004940:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004944:	bf14      	ite	ne
 8004946:	2001      	movne	r0, #1
 8004948:	2000      	moveq	r0, #0
 800494a:	e6a8      	b.n	800469e <HAL_RCC_OscConfig+0x1ca>
    return HAL_ERROR;
 800494c:	2001      	movs	r0, #1
}
 800494e:	4770      	bx	lr
 8004950:	40021000 	.word	0x40021000
 8004954:	019f800c 	.word	0x019f800c

08004958 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004958:	4b18      	ldr	r3, [pc, #96]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x64>)
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	f002 020c 	and.w	r2, r2, #12
 8004960:	2a04      	cmp	r2, #4
 8004962:	d026      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	f002 020c 	and.w	r2, r2, #12
 800496a:	2a08      	cmp	r2, #8
 800496c:	d023      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	f002 020c 	and.w	r2, r2, #12
 8004974:	2a0c      	cmp	r2, #12
 8004976:	d001      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8004978:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800497a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800497c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800497e:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004980:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004982:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8004986:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004988:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800498c:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004990:	bf0c      	ite	eq
 8004992:	4b0b      	ldreq	r3, [pc, #44]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004994:	4b0b      	ldrne	r3, [pc, #44]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004996:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004998:	fbb3 f3f2 	udiv	r3, r3, r2
 800499c:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049a0:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x64>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80049a8:	3301      	adds	r3, #1
 80049aa:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80049ac:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80049b0:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80049b2:	4804      	ldr	r0, [pc, #16]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x6c>)
 80049b4:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80049b6:	4802      	ldr	r0, [pc, #8]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x68>)
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000
 80049c0:	016e3600 	.word	0x016e3600
 80049c4:	00f42400 	.word	0x00f42400

080049c8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80049c8:	2800      	cmp	r0, #0
 80049ca:	f000 80ee 	beq.w	8004baa <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049ce:	4a78      	ldr	r2, [pc, #480]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1e8>)
{
 80049d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	428b      	cmp	r3, r1
 80049dc:	460d      	mov	r5, r1
 80049de:	4604      	mov	r4, r0
 80049e0:	d20c      	bcs.n	80049fc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	6813      	ldr	r3, [r2, #0]
 80049e4:	f023 030f 	bic.w	r3, r3, #15
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ec:	6813      	ldr	r3, [r2, #0]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	428b      	cmp	r3, r1
 80049f4:	d002      	beq.n	80049fc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80049f6:	2001      	movs	r0, #1
}
 80049f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	07df      	lsls	r7, r3, #31
 8004a00:	d569      	bpl.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a02:	6867      	ldr	r7, [r4, #4]
 8004a04:	2f03      	cmp	r7, #3
 8004a06:	f000 80a0 	beq.w	8004b4a <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0c:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a0e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a10:	f000 8097 	beq.w	8004b42 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a14:	055b      	lsls	r3, r3, #21
 8004a16:	d5ee      	bpl.n	80049f6 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a18:	f7ff ff9e 	bl	8004958 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8004a1c:	4b66      	ldr	r3, [pc, #408]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a1e:	4298      	cmp	r0, r3
 8004a20:	f240 80c0 	bls.w	8004ba4 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a24:	4a63      	ldr	r2, [pc, #396]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a26:	6893      	ldr	r3, [r2, #8]
 8004a28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a32:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a36:	4e5f      	ldr	r6, [pc, #380]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a38:	68b3      	ldr	r3, [r6, #8]
 8004a3a:	f023 0303 	bic.w	r3, r3, #3
 8004a3e:	433b      	orrs	r3, r7
 8004a40:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004a42:	f7fe fd05 	bl	8003450 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a46:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004a4a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4c:	e004      	b.n	8004a58 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4e:	f7fe fcff 	bl	8003450 <HAL_GetTick>
 8004a52:	1bc0      	subs	r0, r0, r7
 8004a54:	4540      	cmp	r0, r8
 8004a56:	d871      	bhi.n	8004b3c <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a58:	68b3      	ldr	r3, [r6, #8]
 8004a5a:	6862      	ldr	r2, [r4, #4]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004a64:	d1f3      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	079f      	lsls	r7, r3, #30
 8004a6a:	d436      	bmi.n	8004ada <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8004a6c:	f1b9 0f00 	cmp.w	r9, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a72:	68b3      	ldr	r3, [r6, #8]
 8004a74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a78:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7a:	4e4d      	ldr	r6, [pc, #308]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1e8>)
 8004a7c:	6833      	ldr	r3, [r6, #0]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	42ab      	cmp	r3, r5
 8004a84:	d846      	bhi.n	8004b14 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	075a      	lsls	r2, r3, #29
 8004a8a:	d506      	bpl.n	8004a9a <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a8c:	4949      	ldr	r1, [pc, #292]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a8e:	68e0      	ldr	r0, [r4, #12]
 8004a90:	688a      	ldr	r2, [r1, #8]
 8004a92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a96:	4302      	orrs	r2, r0
 8004a98:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9a:	071b      	lsls	r3, r3, #28
 8004a9c:	d507      	bpl.n	8004aae <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a9e:	4a45      	ldr	r2, [pc, #276]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004aa0:	6921      	ldr	r1, [r4, #16]
 8004aa2:	6893      	ldr	r3, [r2, #8]
 8004aa4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004aa8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004aac:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aae:	f7ff ff53 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 8004ab2:	4a40      	ldr	r2, [pc, #256]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004ab4:	4c41      	ldr	r4, [pc, #260]	@ (8004bbc <HAL_RCC_ClockConfig+0x1f4>)
 8004ab6:	6892      	ldr	r2, [r2, #8]
 8004ab8:	4941      	ldr	r1, [pc, #260]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8004aba:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004abe:	4603      	mov	r3, r0
 8004ac0:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8004ac2:	4840      	ldr	r0, [pc, #256]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ac4:	f002 021f 	and.w	r2, r2, #31
 8004ac8:	40d3      	lsrs	r3, r2
 8004aca:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8004acc:	6800      	ldr	r0, [r0, #0]
}
 8004ace:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8004ad2:	f7fe bc7b 	b.w	80033cc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad6:	079e      	lsls	r6, r3, #30
 8004ad8:	d5cf      	bpl.n	8004a7a <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ada:	0758      	lsls	r0, r3, #29
 8004adc:	d504      	bpl.n	8004ae8 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ade:	4935      	ldr	r1, [pc, #212]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004ae0:	688a      	ldr	r2, [r1, #8]
 8004ae2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004ae6:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae8:	0719      	lsls	r1, r3, #28
 8004aea:	d506      	bpl.n	8004afa <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004aec:	4a31      	ldr	r2, [pc, #196]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004aee:	6893      	ldr	r3, [r2, #8]
 8004af0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004af4:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004af8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004afa:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004afc:	68a1      	ldr	r1, [r4, #8]
 8004afe:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b00:	4e2b      	ldr	r6, [pc, #172]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b06:	430b      	orrs	r3, r1
 8004b08:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b0a:	6833      	ldr	r3, [r6, #0]
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	d9b8      	bls.n	8004a86 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b14:	6833      	ldr	r3, [r6, #0]
 8004b16:	f023 030f 	bic.w	r3, r3, #15
 8004b1a:	432b      	orrs	r3, r5
 8004b1c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004b1e:	f7fe fc97 	bl	8003450 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b22:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004b26:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b28:	6833      	ldr	r3, [r6, #0]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	42ab      	cmp	r3, r5
 8004b30:	d0a9      	beq.n	8004a86 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b32:	f7fe fc8d 	bl	8003450 <HAL_GetTick>
 8004b36:	1bc0      	subs	r0, r0, r7
 8004b38:	4540      	cmp	r0, r8
 8004b3a:	d9f5      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8004b3c:	2003      	movs	r0, #3
}
 8004b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b42:	039a      	lsls	r2, r3, #14
 8004b44:	f53f af68 	bmi.w	8004a18 <HAL_RCC_ClockConfig+0x50>
 8004b48:	e755      	b.n	80049f6 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b4c:	6811      	ldr	r1, [r2, #0]
 8004b4e:	0188      	lsls	r0, r1, #6
 8004b50:	f57f af51 	bpl.w	80049f6 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b54:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b56:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b58:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8004b5a:	4e17      	ldr	r6, [pc, #92]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b5c:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8004b60:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b62:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b66:	bf0c      	ite	eq
 8004b68:	4817      	ldreq	r0, [pc, #92]	@ (8004bc8 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b6a:	4818      	ldrne	r0, [pc, #96]	@ (8004bcc <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b6c:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b6e:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b72:	4810      	ldr	r0, [pc, #64]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b74:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8004b78:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b7c:	68c1      	ldr	r1, [r0, #12]
 8004b7e:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8004b82:	3101      	adds	r1, #1
 8004b84:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8004b86:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8004b8a:	42b2      	cmp	r2, r6
 8004b8c:	d90a      	bls.n	8004ba4 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b8e:	6882      	ldr	r2, [r0, #8]
 8004b90:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8004b94:	f43f af46 	beq.w	8004a24 <HAL_RCC_ClockConfig+0x5c>
 8004b98:	0799      	lsls	r1, r3, #30
 8004b9a:	d503      	bpl.n	8004ba4 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b9c:	68a3      	ldr	r3, [r4, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f43f af40 	beq.w	8004a24 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ba4:	f04f 0900 	mov.w	r9, #0
 8004ba8:	e745      	b.n	8004a36 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8004baa:	2001      	movs	r0, #1
}
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40022000 	.word	0x40022000
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	04c4b400 	.word	0x04c4b400
 8004bbc:	08007acc 	.word	0x08007acc
 8004bc0:	200006d8 	.word	0x200006d8
 8004bc4:	200006e0 	.word	0x200006e0
 8004bc8:	016e3600 	.word	0x016e3600
 8004bcc:	00f42400 	.word	0x00f42400

08004bd0 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8004bd0:	4b01      	ldr	r3, [pc, #4]	@ (8004bd8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	200006d8 	.word	0x200006d8

08004bdc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bdc:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004bde:	4a06      	ldr	r2, [pc, #24]	@ (8004bf8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004be0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004be2:	4906      	ldr	r1, [pc, #24]	@ (8004bfc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004be4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004be8:	6808      	ldr	r0, [r1, #0]
 8004bea:	5cd3      	ldrb	r3, [r2, r3]
 8004bec:	f003 031f 	and.w	r3, r3, #31
}
 8004bf0:	40d8      	lsrs	r0, r3
 8004bf2:	4770      	bx	lr
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	08007ac4 	.word	0x08007ac4
 8004bfc:	200006d8 	.word	0x200006d8

08004c00 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c00:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004c02:	4a06      	ldr	r2, [pc, #24]	@ (8004c1c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004c04:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004c06:	4906      	ldr	r1, [pc, #24]	@ (8004c20 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c08:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004c0c:	6808      	ldr	r0, [r1, #0]
 8004c0e:	5cd3      	ldrb	r3, [r2, r3]
 8004c10:	f003 031f 	and.w	r3, r3, #31
}
 8004c14:	40d8      	lsrs	r0, r3
 8004c16:	4770      	bx	lr
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	08007ac4 	.word	0x08007ac4
 8004c20:	200006d8 	.word	0x200006d8

08004c24 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004c24:	4a02      	ldr	r2, [pc, #8]	@ (8004c30 <HAL_RCC_EnableCSS+0xc>)
 8004c26:	6813      	ldr	r3, [r2, #0]
 8004c28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c2c:	6013      	str	r3, [r2, #0]
}
 8004c2e:	4770      	bx	lr
 8004c30:	40021000 	.word	0x40021000

08004c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c38:	6803      	ldr	r3, [r0, #0]
{
 8004c3a:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c3c:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8004c40:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c42:	d041      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c44:	4ba0      	ldr	r3, [pc, #640]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004c46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c48:	00d5      	lsls	r5, r2, #3
 8004c4a:	f140 80f7 	bpl.w	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x208>
    FlagStatus       pwrclkchanged = RESET;
 8004c4e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c50:	4d9e      	ldr	r5, [pc, #632]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004c52:	682b      	ldr	r3, [r5, #0]
 8004c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c58:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c5a:	f7fe fbf9 	bl	8003450 <HAL_GetTick>
 8004c5e:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c60:	e004      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x38>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c62:	f7fe fbf5 	bl	8003450 <HAL_GetTick>
 8004c66:	1b83      	subs	r3, r0, r6
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d828      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	05d8      	lsls	r0, r3, #23
 8004c70:	d5f7      	bpl.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c72:	4d95      	ldr	r5, [pc, #596]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c74:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c76:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c7a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004c7e:	f000 8119 	beq.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8004c82:	4293      	cmp	r3, r2
 8004c84:	f000 8116 	beq.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c88:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c8c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c94:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c98:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ca4:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ca8:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8004caa:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cae:	f140 8101 	bpl.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb2:	f7fe fbcd 	bl	8003450 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb6:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004cba:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cbc:	e0f5      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cbe:	2003      	movs	r0, #3
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cc0:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8004cc2:	2f00      	cmp	r7, #0
 8004cc4:	f040 80c5 	bne.w	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cc8:	07de      	lsls	r6, r3, #31
 8004cca:	d508      	bpl.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ccc:	497e      	ldr	r1, [pc, #504]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004cce:	6865      	ldr	r5, [r4, #4]
 8004cd0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004cd4:	f022 0203 	bic.w	r2, r2, #3
 8004cd8:	432a      	orrs	r2, r5
 8004cda:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cde:	079d      	lsls	r5, r3, #30
 8004ce0:	d508      	bpl.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce2:	4979      	ldr	r1, [pc, #484]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004ce4:	68a5      	ldr	r5, [r4, #8]
 8004ce6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004cea:	f022 020c 	bic.w	r2, r2, #12
 8004cee:	432a      	orrs	r2, r5
 8004cf0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cf4:	0759      	lsls	r1, r3, #29
 8004cf6:	d508      	bpl.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cf8:	4973      	ldr	r1, [pc, #460]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004cfa:	68e5      	ldr	r5, [r4, #12]
 8004cfc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004d00:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8004d04:	432a      	orrs	r2, r5
 8004d06:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d0a:	071a      	lsls	r2, r3, #28
 8004d0c:	d508      	bpl.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d0e:	496e      	ldr	r1, [pc, #440]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d10:	6925      	ldr	r5, [r4, #16]
 8004d12:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004d16:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004d1a:	432a      	orrs	r2, r5
 8004d1c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d20:	069f      	lsls	r7, r3, #26
 8004d22:	d508      	bpl.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d24:	4968      	ldr	r1, [pc, #416]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d26:	6965      	ldr	r5, [r4, #20]
 8004d28:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004d2c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004d30:	432a      	orrs	r2, r5
 8004d32:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d36:	065e      	lsls	r6, r3, #25
 8004d38:	d508      	bpl.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d3a:	4963      	ldr	r1, [pc, #396]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d3c:	69a5      	ldr	r5, [r4, #24]
 8004d3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004d42:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004d46:	432a      	orrs	r2, r5
 8004d48:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d4c:	061d      	lsls	r5, r3, #24
 8004d4e:	d508      	bpl.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d50:	495d      	ldr	r1, [pc, #372]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d52:	69e5      	ldr	r5, [r4, #28]
 8004d54:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004d58:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004d5c:	432a      	orrs	r2, r5
 8004d5e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d62:	05d9      	lsls	r1, r3, #23
 8004d64:	d508      	bpl.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d66:	4958      	ldr	r1, [pc, #352]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d68:	6a25      	ldr	r5, [r4, #32]
 8004d6a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004d6e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004d72:	432a      	orrs	r2, r5
 8004d74:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d78:	059a      	lsls	r2, r3, #22
 8004d7a:	d508      	bpl.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d7c:	4952      	ldr	r1, [pc, #328]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d7e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8004d80:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004d84:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004d88:	432a      	orrs	r2, r5
 8004d8a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d8e:	055f      	lsls	r7, r3, #21
 8004d90:	d50b      	bpl.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d92:	494d      	ldr	r1, [pc, #308]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d94:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8004d96:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004d9a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004d9e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004da0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004da4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004da8:	d059      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004daa:	051e      	lsls	r6, r3, #20
 8004dac:	d50b      	bpl.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dae:	4946      	ldr	r1, [pc, #280]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004db0:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8004db2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004db6:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8004dba:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004dbc:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dc0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004dc4:	d050      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dc6:	04dd      	lsls	r5, r3, #19
 8004dc8:	d50b      	bpl.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dca:	493f      	ldr	r1, [pc, #252]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004dcc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8004dce:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004dd2:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004dd6:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004dd8:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ddc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004de0:	d047      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x23e>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004de2:	0499      	lsls	r1, r3, #18
 8004de4:	d50b      	bpl.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004de6:	4938      	ldr	r1, [pc, #224]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004de8:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8004dea:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004dee:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004df2:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004df4:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004df8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dfc:	d03e      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x248>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004dfe:	045a      	lsls	r2, r3, #17
 8004e00:	d50b      	bpl.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e02:	4931      	ldr	r1, [pc, #196]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004e04:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8004e06:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004e0a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004e0e:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e10:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e14:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e18:	d035      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e1a:	041b      	lsls	r3, r3, #16
 8004e1c:	d50b      	bpl.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004e20:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8004e22:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004e26:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8004e2a:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e2c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e34:	d02c      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  }

#endif /* QUADSPI */

  return status;
}
 8004e36:	b002      	add	sp, #8
 8004e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004e3e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004e42:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004e4e:	2701      	movs	r7, #1
 8004e50:	e6fe      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e52:	491d      	ldr	r1, [pc, #116]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004e54:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004e56:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004e5a:	658a      	str	r2, [r1, #88]	@ 0x58
 8004e5c:	e734      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5e:	68ca      	ldr	r2, [r1, #12]
 8004e60:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004e64:	60ca      	str	r2, [r1, #12]
 8004e66:	e7a0      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x176>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e68:	68ca      	ldr	r2, [r1, #12]
 8004e6a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004e6e:	60ca      	str	r2, [r1, #12]
 8004e70:	e7a9      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e72:	68ca      	ldr	r2, [r1, #12]
 8004e74:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004e78:	60ca      	str	r2, [r1, #12]
 8004e7a:	e7b2      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e7c:	68ca      	ldr	r2, [r1, #12]
 8004e7e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004e82:	60ca      	str	r2, [r1, #12]
 8004e84:	e7bb      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e86:	68ca      	ldr	r2, [r1, #12]
 8004e88:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004e8c:	60ca      	str	r2, [r1, #12]
 8004e8e:	e7c4      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e90:	68d3      	ldr	r3, [r2, #12]
 8004e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e96:	60d3      	str	r3, [r2, #12]
}
 8004e98:	b002      	add	sp, #8
 8004e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9e:	f7fe fad7 	bl	8003450 <HAL_GetTick>
 8004ea2:	1b80      	subs	r0, r0, r6
 8004ea4:	4540      	cmp	r0, r8
 8004ea6:	f63f af0a 	bhi.w	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eaa:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004eae:	079b      	lsls	r3, r3, #30
 8004eb0:	d5f5      	bpl.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eb2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004eb4:	4904      	ldr	r1, [pc, #16]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004eb6:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8004eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	e6fb      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	40007000 	.word	0x40007000

08004ed0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed0:	6a03      	ldr	r3, [r0, #32]
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
{
 8004ed6:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ede:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ee2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004ee6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004eea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004eee:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004ef2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ef4:	4d13      	ldr	r5, [pc, #76]	@ (8004f44 <TIM_OC1_SetConfig+0x74>)
 8004ef6:	42a8      	cmp	r0, r5
 8004ef8:	d00f      	beq.n	8004f1a <TIM_OC1_SetConfig+0x4a>
 8004efa:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8004efe:	42a8      	cmp	r0, r5
 8004f00:	d00b      	beq.n	8004f1a <TIM_OC1_SetConfig+0x4a>
 8004f02:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8004f06:	42a8      	cmp	r0, r5
 8004f08:	d007      	beq.n	8004f1a <TIM_OC1_SetConfig+0x4a>
 8004f0a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004f0e:	42a8      	cmp	r0, r5
 8004f10:	d003      	beq.n	8004f1a <TIM_OC1_SetConfig+0x4a>
 8004f12:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004f16:	42a8      	cmp	r0, r5
 8004f18:	d10d      	bne.n	8004f36 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f1a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f1c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004f20:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f22:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f26:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f2a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f2e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f32:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f36:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004f38:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004f3a:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004f3c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8004f3e:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8004f40:	6203      	str	r3, [r0, #32]
}
 8004f42:	4770      	bx	lr
 8004f44:	40012c00 	.word	0x40012c00

08004f48 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f48:	6a03      	ldr	r3, [r0, #32]
 8004f4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
{
 8004f4e:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f50:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f52:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f54:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f56:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f58:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f5a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004f5e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004f62:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f64:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004f66:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f6e:	4d14      	ldr	r5, [pc, #80]	@ (8004fc0 <TIM_OC3_SetConfig+0x78>)
 8004f70:	42a8      	cmp	r0, r5
 8004f72:	d00f      	beq.n	8004f94 <TIM_OC3_SetConfig+0x4c>
 8004f74:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8004f78:	42a8      	cmp	r0, r5
 8004f7a:	d00b      	beq.n	8004f94 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7c:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8004f80:	42a8      	cmp	r0, r5
 8004f82:	d00e      	beq.n	8004fa2 <TIM_OC3_SetConfig+0x5a>
 8004f84:	4d0f      	ldr	r5, [pc, #60]	@ (8004fc4 <TIM_OC3_SetConfig+0x7c>)
 8004f86:	42a8      	cmp	r0, r5
 8004f88:	d00b      	beq.n	8004fa2 <TIM_OC3_SetConfig+0x5a>
 8004f8a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004f8e:	42a8      	cmp	r0, r5
 8004f90:	d10f      	bne.n	8004fb2 <TIM_OC3_SetConfig+0x6a>
 8004f92:	e006      	b.n	8004fa2 <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f94:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f9a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fa2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fa6:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004faa:	ea46 0c05 	orr.w	ip, r6, r5
 8004fae:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fb2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004fb4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004fb6:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004fb8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8004fba:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8004fbc:	6203      	str	r3, [r0, #32]
}
 8004fbe:	4770      	bx	lr
 8004fc0:	40012c00 	.word	0x40012c00
 8004fc4:	40014400 	.word	0x40014400

08004fc8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fc8:	6a03      	ldr	r3, [r0, #32]
 8004fca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
{
 8004fce:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fd0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fd6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fda:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004fde:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fe6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004fe8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fec:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004ff0:	4d14      	ldr	r5, [pc, #80]	@ (8005044 <TIM_OC4_SetConfig+0x7c>)
 8004ff2:	42a8      	cmp	r0, r5
 8004ff4:	d00f      	beq.n	8005016 <TIM_OC4_SetConfig+0x4e>
 8004ff6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8004ffa:	42a8      	cmp	r0, r5
 8004ffc:	d00b      	beq.n	8005016 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffe:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8005002:	42a8      	cmp	r0, r5
 8005004:	d00e      	beq.n	8005024 <TIM_OC4_SetConfig+0x5c>
 8005006:	4d10      	ldr	r5, [pc, #64]	@ (8005048 <TIM_OC4_SetConfig+0x80>)
 8005008:	42a8      	cmp	r0, r5
 800500a:	d00b      	beq.n	8005024 <TIM_OC4_SetConfig+0x5c>
 800500c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005010:	42a8      	cmp	r0, r5
 8005012:	d10f      	bne.n	8005034 <TIM_OC4_SetConfig+0x6c>
 8005014:	e006      	b.n	8005024 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005016:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8005018:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800501c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8005020:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005024:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005028:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800502c:	ea46 0c05 	orr.w	ip, r6, r5
 8005030:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005034:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005036:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005038:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800503a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 800503c:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 800503e:	6203      	str	r3, [r0, #32]
}
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40014400 	.word	0x40014400

0800504c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800504c:	2800      	cmp	r0, #0
 800504e:	d06d      	beq.n	800512c <HAL_TIM_Base_Init+0xe0>
{
 8005050:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005052:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005056:	4604      	mov	r4, r0
 8005058:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800505c:	2b00      	cmp	r3, #0
 800505e:	d060      	beq.n	8005122 <HAL_TIM_Base_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005060:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005062:	4e33      	ldr	r6, [pc, #204]	@ (8005130 <HAL_TIM_Base_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 8005064:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005066:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005068:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 800506a:	2302      	movs	r3, #2
 800506c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005070:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8005072:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005074:	d044      	beq.n	8005100 <HAL_TIM_Base_Init+0xb4>
 8005076:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800507a:	d017      	beq.n	80050ac <HAL_TIM_Base_Init+0x60>
 800507c:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8005080:	42b2      	cmp	r2, r6
 8005082:	d013      	beq.n	80050ac <HAL_TIM_Base_Init+0x60>
 8005084:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005088:	42b2      	cmp	r2, r6
 800508a:	d00f      	beq.n	80050ac <HAL_TIM_Base_Init+0x60>
 800508c:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8005090:	42b2      	cmp	r2, r6
 8005092:	d035      	beq.n	8005100 <HAL_TIM_Base_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005094:	4e27      	ldr	r6, [pc, #156]	@ (8005134 <HAL_TIM_Base_Init+0xe8>)
 8005096:	42b2      	cmp	r2, r6
 8005098:	d036      	beq.n	8005108 <HAL_TIM_Base_Init+0xbc>
 800509a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800509e:	42b2      	cmp	r2, r6
 80050a0:	d032      	beq.n	8005108 <HAL_TIM_Base_Init+0xbc>
 80050a2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80050a6:	42b2      	cmp	r2, r6
 80050a8:	d108      	bne.n	80050bc <HAL_TIM_Base_Init+0x70>
 80050aa:	e02d      	b.n	8005108 <HAL_TIM_Base_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 80050ac:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80050b2:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80050b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ba:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80050c2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050c6:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80050c8:	2301      	movs	r3, #1
 80050ca:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050cc:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80050d4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80050d8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80050dc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80050e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80050ec:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80050f0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80050f4:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80050fc:	2000      	movs	r0, #0
}
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8005100:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005106:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005108:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800510a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800510e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005114:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005116:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005118:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800511a:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800511c:	6963      	ldr	r3, [r4, #20]
 800511e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005120:	e7d2      	b.n	80050c8 <HAL_TIM_Base_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8005122:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005126:	f7fd f9b9 	bl	800249c <HAL_TIM_Base_MspInit>
 800512a:	e799      	b.n	8005060 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 800512c:	2001      	movs	r0, #1
}
 800512e:	4770      	bx	lr
 8005130:	40012c00 	.word	0x40012c00
 8005134:	40014000 	.word	0x40014000

08005138 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop

0800513c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800513c:	2800      	cmp	r0, #0
 800513e:	d06d      	beq.n	800521c <HAL_TIM_PWM_Init+0xe0>
{
 8005140:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005142:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005146:	4604      	mov	r4, r0
 8005148:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800514c:	2b00      	cmp	r3, #0
 800514e:	d060      	beq.n	8005212 <HAL_TIM_PWM_Init+0xd6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005150:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005152:	4e33      	ldr	r6, [pc, #204]	@ (8005220 <HAL_TIM_PWM_Init+0xe4>)
  TIMx->PSC = Structure->Prescaler;
 8005154:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005156:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005158:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 800515a:	2302      	movs	r3, #2
 800515c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005160:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8005162:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005164:	d044      	beq.n	80051f0 <HAL_TIM_PWM_Init+0xb4>
 8005166:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800516a:	d017      	beq.n	800519c <HAL_TIM_PWM_Init+0x60>
 800516c:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8005170:	42b2      	cmp	r2, r6
 8005172:	d013      	beq.n	800519c <HAL_TIM_PWM_Init+0x60>
 8005174:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005178:	42b2      	cmp	r2, r6
 800517a:	d00f      	beq.n	800519c <HAL_TIM_PWM_Init+0x60>
 800517c:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8005180:	42b2      	cmp	r2, r6
 8005182:	d035      	beq.n	80051f0 <HAL_TIM_PWM_Init+0xb4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005184:	4e27      	ldr	r6, [pc, #156]	@ (8005224 <HAL_TIM_PWM_Init+0xe8>)
 8005186:	42b2      	cmp	r2, r6
 8005188:	d036      	beq.n	80051f8 <HAL_TIM_PWM_Init+0xbc>
 800518a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800518e:	42b2      	cmp	r2, r6
 8005190:	d032      	beq.n	80051f8 <HAL_TIM_PWM_Init+0xbc>
 8005192:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005196:	42b2      	cmp	r2, r6
 8005198:	d108      	bne.n	80051ac <HAL_TIM_PWM_Init+0x70>
 800519a:	e02d      	b.n	80051f8 <HAL_TIM_PWM_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 800519c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800519e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80051a2:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051aa:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051b0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80051b2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051b4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80051b6:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80051b8:	2301      	movs	r3, #1
 80051ba:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051bc:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80051c4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80051c8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80051cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80051d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80051dc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80051e0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80051e4:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80051ec:	2000      	movs	r0, #0
}
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80051f0:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80051f6:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051f8:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80051fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051fe:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005204:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005206:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005208:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800520a:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800520c:	6963      	ldr	r3, [r4, #20]
 800520e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005210:	e7d2      	b.n	80051b8 <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8005212:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005216:	f7ff ff8f 	bl	8005138 <HAL_TIM_PWM_MspInit>
 800521a:	e799      	b.n	8005150 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 800521c:	2001      	movs	r0, #1
}
 800521e:	4770      	bx	lr
 8005220:	40012c00 	.word	0x40012c00
 8005224:	40014000 	.word	0x40014000

08005228 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8005228:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d056      	beq.n	80052de <HAL_TIM_SlaveConfigSynchro+0xb6>
 8005230:	4602      	mov	r2, r0
{
 8005232:	b430      	push	{r4, r5}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005234:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8005236:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800523a:	f882 403c 	strb.w	r4, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800523e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005242:	6883      	ldr	r3, [r0, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005244:	684c      	ldr	r4, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005246:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005248:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800524c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005250:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005256:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800525a:	432b      	orrs	r3, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800525c:	2c60      	cmp	r4, #96	@ 0x60
  htim->Instance->SMCR = tmpsmcr;
 800525e:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8005260:	d065      	beq.n	800532e <HAL_TIM_SlaveConfigSynchro+0x106>
 8005262:	d826      	bhi.n	80052b2 <HAL_TIM_SlaveConfigSynchro+0x8a>
 8005264:	2c40      	cmp	r4, #64	@ 0x40
 8005266:	d04f      	beq.n	8005308 <HAL_TIM_SlaveConfigSynchro+0xe0>
 8005268:	d947      	bls.n	80052fa <HAL_TIM_SlaveConfigSynchro+0xd2>
 800526a:	2c50      	cmp	r4, #80	@ 0x50
 800526c:	d12f      	bne.n	80052ce <HAL_TIM_SlaveConfigSynchro+0xa6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800526e:	688b      	ldr	r3, [r1, #8]
 8005270:	690c      	ldr	r4, [r1, #16]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005272:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005274:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005278:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800527a:	6a03      	ldr	r3, [r0, #32]
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005282:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005284:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005288:	ea43 1304 	orr.w	r3, r3, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800528c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800528e:	6201      	str	r1, [r0, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005290:	68c3      	ldr	r3, [r0, #12]
 8005292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005296:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005298:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 800529a:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 800529c:	2401      	movs	r4, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800529e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052a2:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	f882 403d 	strb.w	r4, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80052a8:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c
  return HAL_OK;
 80052ac:	4608      	mov	r0, r1
}
 80052ae:	bc30      	pop	{r4, r5}
 80052b0:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80052b2:	2c70      	cmp	r4, #112	@ 0x70
 80052b4:	d015      	beq.n	80052e2 <HAL_TIM_SlaveConfigSynchro+0xba>
 80052b6:	2c6f      	cmp	r4, #111	@ 0x6f
 80052b8:	d909      	bls.n	80052ce <HAL_TIM_SlaveConfigSynchro+0xa6>
 80052ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005368 <HAL_TIM_SlaveConfigSynchro+0x140>)
 80052bc:	429c      	cmp	r4, r3
 80052be:	d0e7      	beq.n	8005290 <HAL_TIM_SlaveConfigSynchro+0x68>
 80052c0:	d848      	bhi.n	8005354 <HAL_TIM_SlaveConfigSynchro+0x12c>
 80052c2:	f1b4 1f10 	cmp.w	r4, #1048592	@ 0x100010
 80052c6:	d0e3      	beq.n	8005290 <HAL_TIM_SlaveConfigSynchro+0x68>
 80052c8:	3b10      	subs	r3, #16
 80052ca:	429c      	cmp	r4, r3
 80052cc:	d0e0      	beq.n	8005290 <HAL_TIM_SlaveConfigSynchro+0x68>
    htim->State = HAL_TIM_STATE_READY;
 80052ce:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80052d0:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 80052d2:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80052d6:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80052da:	bc30      	pop	{r4, r5}
 80052dc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80052de:	2002      	movs	r0, #2
}
 80052e0:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052e2:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80052e6:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052e8:	432b      	orrs	r3, r5
 80052ea:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ec:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052f0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80052f4:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f6:	6083      	str	r3, [r0, #8]
      break;
 80052f8:	e7ca      	b.n	8005290 <HAL_TIM_SlaveConfigSynchro+0x68>
  switch (sSlaveConfig->InputTrigger)
 80052fa:	2c20      	cmp	r4, #32
 80052fc:	d0c8      	beq.n	8005290 <HAL_TIM_SlaveConfigSynchro+0x68>
 80052fe:	d830      	bhi.n	8005362 <HAL_TIM_SlaveConfigSynchro+0x13a>
 8005300:	f034 0310 	bics.w	r3, r4, #16
 8005304:	d1e3      	bne.n	80052ce <HAL_TIM_SlaveConfigSynchro+0xa6>
 8005306:	e7c3      	b.n	8005290 <HAL_TIM_SlaveConfigSynchro+0x68>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005308:	2d05      	cmp	r5, #5
 800530a:	d0e0      	beq.n	80052ce <HAL_TIM_SlaveConfigSynchro+0xa6>
 800530c:	f1b5 1f01 	cmp.w	r5, #65537	@ 0x10001
 8005310:	d0dd      	beq.n	80052ce <HAL_TIM_SlaveConfigSynchro+0xa6>
      tmpccer = htim->Instance->CCER;
 8005312:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005314:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005316:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005318:	f023 0301 	bic.w	r3, r3, #1
 800531c:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800531e:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005320:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005324:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005328:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 800532a:	6204      	str	r4, [r0, #32]
      break;
 800532c:	e7b0      	b.n	8005290 <HAL_TIM_SlaveConfigSynchro+0x68>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800532e:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005330:	688c      	ldr	r4, [r1, #8]
 8005332:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005334:	f023 0310 	bic.w	r3, r3, #16
 8005338:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533a:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 800533c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533e:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005342:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005346:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800534a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800534e:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8005350:	6203      	str	r3, [r0, #32]
      break;
 8005352:	e79d      	b.n	8005290 <HAL_TIM_SlaveConfigSynchro+0x68>
  switch (sSlaveConfig->InputTrigger)
 8005354:	4b05      	ldr	r3, [pc, #20]	@ (800536c <HAL_TIM_SlaveConfigSynchro+0x144>)
 8005356:	429c      	cmp	r4, r3
 8005358:	d09a      	beq.n	8005290 <HAL_TIM_SlaveConfigSynchro+0x68>
 800535a:	3330      	adds	r3, #48	@ 0x30
 800535c:	429c      	cmp	r4, r3
 800535e:	d1b6      	bne.n	80052ce <HAL_TIM_SlaveConfigSynchro+0xa6>
 8005360:	e796      	b.n	8005290 <HAL_TIM_SlaveConfigSynchro+0x68>
 8005362:	2c30      	cmp	r4, #48	@ 0x30
 8005364:	d1b3      	bne.n	80052ce <HAL_TIM_SlaveConfigSynchro+0xa6>
 8005366:	e793      	b.n	8005290 <HAL_TIM_SlaveConfigSynchro+0x68>
 8005368:	00100030 	.word	0x00100030
 800536c:	00100040 	.word	0x00100040

08005370 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005370:	6a03      	ldr	r3, [r0, #32]
 8005372:	f023 0310 	bic.w	r3, r3, #16
{
 8005376:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005378:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800537a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800537c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800537e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005380:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005382:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8005386:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800538a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800538e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005390:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005394:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005398:	4d14      	ldr	r5, [pc, #80]	@ (80053ec <TIM_OC2_SetConfig+0x7c>)
 800539a:	42a8      	cmp	r0, r5
 800539c:	d00f      	beq.n	80053be <TIM_OC2_SetConfig+0x4e>
 800539e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80053a2:	42a8      	cmp	r0, r5
 80053a4:	d00b      	beq.n	80053be <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a6:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80053aa:	42a8      	cmp	r0, r5
 80053ac:	d00e      	beq.n	80053cc <TIM_OC2_SetConfig+0x5c>
 80053ae:	4d10      	ldr	r5, [pc, #64]	@ (80053f0 <TIM_OC2_SetConfig+0x80>)
 80053b0:	42a8      	cmp	r0, r5
 80053b2:	d00b      	beq.n	80053cc <TIM_OC2_SetConfig+0x5c>
 80053b4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80053b8:	42a8      	cmp	r0, r5
 80053ba:	d10f      	bne.n	80053dc <TIM_OC2_SetConfig+0x6c>
 80053bc:	e006      	b.n	80053cc <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053be:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80053c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80053c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053cc:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053d0:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d4:	ea46 0c05 	orr.w	ip, r6, r5
 80053d8:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80053dc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80053de:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80053e0:	6182      	str	r2, [r0, #24]
}
 80053e2:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80053e4:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80053e6:	6203      	str	r3, [r0, #32]
}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40014400 	.word	0x40014400

080053f4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80053f4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	f000 80dc 	beq.w	80055b6 <HAL_TIM_PWM_ConfigChannel+0x1c2>
 80053fe:	2301      	movs	r3, #1
{
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	4604      	mov	r4, r0
 8005404:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8005406:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800540a:	2a14      	cmp	r2, #20
 800540c:	d80c      	bhi.n	8005428 <HAL_TIM_PWM_ConfigChannel+0x34>
 800540e:	e8df f002 	tbb	[pc, r2]
 8005412:	0b4f      	.short	0x0b4f
 8005414:	0b630b0b 	.word	0x0b630b0b
 8005418:	0b740b0b 	.word	0x0b740b0b
 800541c:	0b840b0b 	.word	0x0b840b0b
 8005420:	0b950b0b 	.word	0x0b950b0b
 8005424:	0b0b      	.short	0x0b0b
 8005426:	10          	.byte	0x10
 8005427:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005428:	2300      	movs	r3, #0
 800542a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 800542e:	2001      	movs	r0, #1
}
 8005430:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005432:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005434:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800543c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800543e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005440:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005442:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005444:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8005448:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800544c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005450:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005452:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005456:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545a:	4e58      	ldr	r6, [pc, #352]	@ (80055bc <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 800545c:	42b3      	cmp	r3, r6
 800545e:	d00f      	beq.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005460:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8005464:	42b3      	cmp	r3, r6
 8005466:	d00b      	beq.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005468:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 800546c:	42b3      	cmp	r3, r6
 800546e:	d007      	beq.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005470:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005474:	42b3      	cmp	r3, r6
 8005476:	d003      	beq.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005478:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800547c:	42b3      	cmp	r3, r6
 800547e:	d104      	bne.n	800548a <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005480:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005482:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005486:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 800548a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800548c:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 800548e:	6869      	ldr	r1, [r5, #4]
 8005490:	64d9      	str	r1, [r3, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 8005492:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005494:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005496:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005498:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800549c:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800549e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054a4:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80054ac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80054ae:	e00e      	b.n	80054ce <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054b0:	6800      	ldr	r0, [r0, #0]
 80054b2:	f7ff fd0d 	bl	8004ed0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054b6:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054b8:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054ba:	f043 0308 	orr.w	r3, r3, #8
 80054be:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054c0:	6983      	ldr	r3, [r0, #24]
 80054c2:	f023 0304 	bic.w	r3, r3, #4
 80054c6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054c8:	6983      	ldr	r3, [r0, #24]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 80054ce:	2300      	movs	r3, #0
 80054d0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80054d4:	2000      	movs	r0, #0
}
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054d8:	6800      	ldr	r0, [r0, #0]
 80054da:	f7ff ff49 	bl	8005370 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054de:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054e0:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80054e6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054e8:	6983      	ldr	r3, [r0, #24]
 80054ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054ee:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054f0:	6983      	ldr	r3, [r0, #24]
 80054f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80054f6:	6183      	str	r3, [r0, #24]
      break;
 80054f8:	e7e9      	b.n	80054ce <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054fa:	6800      	ldr	r0, [r0, #0]
 80054fc:	f7ff fd24 	bl	8004f48 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005500:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005502:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005504:	f043 0308 	orr.w	r3, r3, #8
 8005508:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800550a:	69c3      	ldr	r3, [r0, #28]
 800550c:	f023 0304 	bic.w	r3, r3, #4
 8005510:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005512:	69c3      	ldr	r3, [r0, #28]
 8005514:	4313      	orrs	r3, r2
 8005516:	61c3      	str	r3, [r0, #28]
      break;
 8005518:	e7d9      	b.n	80054ce <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800551a:	6800      	ldr	r0, [r0, #0]
 800551c:	f7ff fd54 	bl	8004fc8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005520:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005522:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005524:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005528:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800552a:	69c3      	ldr	r3, [r0, #28]
 800552c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005530:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005532:	69c3      	ldr	r3, [r0, #28]
 8005534:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005538:	61c3      	str	r3, [r0, #28]
      break;
 800553a:	e7c8      	b.n	80054ce <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800553c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800553e:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005546:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005548:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800554a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800554c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800554e:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8005552:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005556:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005558:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800555a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800555e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005562:	4e16      	ldr	r6, [pc, #88]	@ (80055bc <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8005564:	42b3      	cmp	r3, r6
 8005566:	d00f      	beq.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005568:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 800556c:	42b3      	cmp	r3, r6
 800556e:	d00b      	beq.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005570:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8005574:	42b3      	cmp	r3, r6
 8005576:	d007      	beq.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005578:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800557c:	42b3      	cmp	r3, r6
 800557e:	d003      	beq.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005580:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005584:	42b3      	cmp	r3, r6
 8005586:	d104      	bne.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005588:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800558a:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800558e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8005592:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005594:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8005596:	6869      	ldr	r1, [r5, #4]
 8005598:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 800559a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800559c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800559e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055a0:	f042 0208 	orr.w	r2, r2, #8
 80055a4:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055a8:	f022 0204 	bic.w	r2, r2, #4
 80055ac:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055b0:	430a      	orrs	r2, r1
 80055b2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80055b4:	e78b      	b.n	80054ce <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 80055b6:	2002      	movs	r0, #2
}
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40012c00 	.word	0x40012c00

080055c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055c0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d046      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 80055c8:	b470      	push	{r4, r5, r6}
 80055ca:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055cc:	4e23      	ldr	r6, [pc, #140]	@ (800565c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 80055ce:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	2302      	movs	r3, #2
 80055d2:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055d6:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 80055d8:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055da:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80055dc:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055de:	d024      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80055e0:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80055e4:	42b0      	cmp	r0, r6
 80055e6:	d02b      	beq.n	8005640 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80055ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055f0:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80055f6:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f8:	d00a      	beq.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80055fa:	4b19      	ldr	r3, [pc, #100]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80055fc:	4298      	cmp	r0, r3
 80055fe:	d007      	beq.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005600:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005604:	4298      	cmp	r0, r3
 8005606:	d003      	beq.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005608:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 800560c:	4298      	cmp	r0, r3
 800560e:	d104      	bne.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005610:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005612:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005616:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005618:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800561a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800561c:	2301      	movs	r3, #1
 800561e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005622:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8005626:	bc70      	pop	{r4, r5, r6}
 8005628:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800562a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800562c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005630:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005632:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800563a:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800563c:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800563e:	e7e7      	b.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005640:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005642:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005646:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005648:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800564c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005650:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 8005652:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005654:	e7dc      	b.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 8005656:	2002      	movs	r0, #2
}
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40012c00 	.word	0x40012c00
 8005660:	40000400 	.word	0x40000400

08005664 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005664:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005668:	2b01      	cmp	r3, #1
 800566a:	d045      	beq.n	80056f8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 800566c:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800566e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005676:	4602      	mov	r2, r0
 8005678:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800567a:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800567c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800567e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005682:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005684:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005688:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800568a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800568c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005690:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005692:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005694:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005698:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800569a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800569c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056a0:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056a2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056a4:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056a8:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056ae:	4c13      	ldr	r4, [pc, #76]	@ (80056fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80056b0:	42a0      	cmp	r0, r4
 80056b2:	d00b      	beq.n	80056cc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80056b4:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 80056b8:	42a0      	cmp	r0, r4
 80056ba:	d007      	beq.n	80056cc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80056bc:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80056be:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80056c0:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 80056c4:	4608      	mov	r0, r1
}
 80056c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056ca:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80056cc:	69cc      	ldr	r4, [r1, #28]
 80056ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056d2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80056d4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80056d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80056da:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80056de:	6a0c      	ldr	r4, [r1, #32]
 80056e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056e4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056e6:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80056e8:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056ea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80056ee:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80056f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80056f4:	430b      	orrs	r3, r1
 80056f6:	e7e1      	b.n	80056bc <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 80056f8:	2002      	movs	r0, #2
}
 80056fa:	4770      	bx	lr
 80056fc:	40012c00 	.word	0x40012c00

08005700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	4604      	mov	r4, r0
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005704:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005706:	6882      	ldr	r2, [r0, #8]
 8005708:	6900      	ldr	r0, [r0, #16]
 800570a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800570c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800570e:	4302      	orrs	r2, r0
 8005710:	430a      	orrs	r2, r1
 8005712:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005714:	498e      	ldr	r1, [pc, #568]	@ (8005950 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005716:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005718:	4029      	ands	r1, r5
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005722:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005724:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005728:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800572a:	498a      	ldr	r1, [pc, #552]	@ (8005954 <UART_SetConfig+0x254>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800572c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800572e:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005730:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005732:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005734:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8005738:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800573c:	f000 80b0 	beq.w	80058a0 <UART_SetConfig+0x1a0>
    tmpreg |= huart->Init.OneBitSampling;
 8005740:	6a26      	ldr	r6, [r4, #32]
 8005742:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005744:	430a      	orrs	r2, r1
 8005746:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574a:	f022 020f 	bic.w	r2, r2, #15
 800574e:	432a      	orrs	r2, r5
 8005750:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005752:	4a81      	ldr	r2, [pc, #516]	@ (8005958 <UART_SetConfig+0x258>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d035      	beq.n	80057c4 <UART_SetConfig+0xc4>
 8005758:	4a80      	ldr	r2, [pc, #512]	@ (800595c <UART_SetConfig+0x25c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00d      	beq.n	800577a <UART_SetConfig+0x7a>
 800575e:	4a80      	ldr	r2, [pc, #512]	@ (8005960 <UART_SetConfig+0x260>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d055      	beq.n	8005810 <UART_SetConfig+0x110>
 8005764:	4a7f      	ldr	r2, [pc, #508]	@ (8005964 <UART_SetConfig+0x264>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d040      	beq.n	80057ec <UART_SetConfig+0xec>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 800576a:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800576c:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800576e:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8005772:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 8005776:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 8005778:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800577a:	4b7b      	ldr	r3, [pc, #492]	@ (8005968 <UART_SetConfig+0x268>)
 800577c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005780:	f003 030c 	and.w	r3, r3, #12
 8005784:	2b0c      	cmp	r3, #12
 8005786:	d8f0      	bhi.n	800576a <UART_SetConfig+0x6a>
 8005788:	a201      	add	r2, pc, #4	@ (adr r2, 8005790 <UART_SetConfig+0x90>)
 800578a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578e:	bf00      	nop
 8005790:	08005895 	.word	0x08005895
 8005794:	0800576b 	.word	0x0800576b
 8005798:	0800576b 	.word	0x0800576b
 800579c:	0800576b 	.word	0x0800576b
 80057a0:	08005803 	.word	0x08005803
 80057a4:	0800576b 	.word	0x0800576b
 80057a8:	0800576b 	.word	0x0800576b
 80057ac:	0800576b 	.word	0x0800576b
 80057b0:	08005857 	.word	0x08005857
 80057b4:	0800576b 	.word	0x0800576b
 80057b8:	0800576b 	.word	0x0800576b
 80057bc:	0800576b 	.word	0x0800576b
 80057c0:	08005825 	.word	0x08005825
 80057c4:	4b68      	ldr	r3, [pc, #416]	@ (8005968 <UART_SetConfig+0x268>)
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d041      	beq.n	8005856 <UART_SetConfig+0x156>
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d026      	beq.n	8005824 <UART_SetConfig+0x124>
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d013      	beq.n	8005802 <UART_SetConfig+0x102>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057da:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80057de:	f000 80ac 	beq.w	800593a <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e2:	f7ff fa0d 	bl	8004c00 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80057e6:	b3a0      	cbz	r0, 8005852 <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057e8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80057ea:	e020      	b.n	800582e <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ec:	4b5e      	ldr	r3, [pc, #376]	@ (8005968 <UART_SetConfig+0x268>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057f6:	2b80      	cmp	r3, #128	@ 0x80
 80057f8:	d02d      	beq.n	8005856 <UART_SetConfig+0x156>
 80057fa:	f200 808e 	bhi.w	800591a <UART_SetConfig+0x21a>
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d048      	beq.n	8005894 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005802:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005806:	f000 809e 	beq.w	8005946 <UART_SetConfig+0x246>
        pclk = HAL_RCC_GetSysClockFreq();
 800580a:	f7ff f8a5 	bl	8004958 <HAL_RCC_GetSysClockFreq>
        break;
 800580e:	e7ea      	b.n	80057e6 <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005810:	4b55      	ldr	r3, [pc, #340]	@ (8005968 <UART_SetConfig+0x268>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005816:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800581a:	2b20      	cmp	r3, #32
 800581c:	d01b      	beq.n	8005856 <UART_SetConfig+0x156>
 800581e:	d9ee      	bls.n	80057fe <UART_SetConfig+0xfe>
 8005820:	2b30      	cmp	r3, #48	@ 0x30
 8005822:	d1a2      	bne.n	800576a <UART_SetConfig+0x6a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005824:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005828:	d019      	beq.n	800585e <UART_SetConfig+0x15e>
        pclk = (uint32_t) LSE_VALUE;
 800582a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	4a4e      	ldr	r2, [pc, #312]	@ (800596c <UART_SetConfig+0x26c>)
 8005832:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8005836:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800583e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005842:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005846:	f1a0 0310 	sub.w	r3, r0, #16
 800584a:	4293      	cmp	r3, r2
 800584c:	d88d      	bhi.n	800576a <UART_SetConfig+0x6a>
          huart->Instance->BRR = usartdiv;
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	60d8      	str	r0, [r3, #12]
        pclk = (uint32_t) HSI_VALUE;
 8005852:	2000      	movs	r0, #0
 8005854:	e78a      	b.n	800576c <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005856:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800585a:	4845      	ldr	r0, [pc, #276]	@ (8005970 <UART_SetConfig+0x270>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800585c:	d1e7      	bne.n	800582e <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800585e:	6862      	ldr	r2, [r4, #4]
 8005860:	4b42      	ldr	r3, [pc, #264]	@ (800596c <UART_SetConfig+0x26c>)
 8005862:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8005866:	fbb0 f0f1 	udiv	r0, r0, r1
 800586a:	0853      	lsrs	r3, r2, #1
 800586c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005870:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005874:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005878:	f1a3 0210 	sub.w	r2, r3, #16
 800587c:	428a      	cmp	r2, r1
 800587e:	f63f af74 	bhi.w	800576a <UART_SetConfig+0x6a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005882:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8005886:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005888:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800588a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800588e:	4313      	orrs	r3, r2
 8005890:	60cb      	str	r3, [r1, #12]
 8005892:	e7de      	b.n	8005852 <UART_SetConfig+0x152>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005894:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005898:	d049      	beq.n	800592e <UART_SetConfig+0x22e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800589a:	f7ff f99f 	bl	8004bdc <HAL_RCC_GetPCLK1Freq>
        break;
 800589e:	e7a2      	b.n	80057e6 <UART_SetConfig+0xe6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058a0:	4311      	orrs	r1, r2
 80058a2:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058a6:	4930      	ldr	r1, [pc, #192]	@ (8005968 <UART_SetConfig+0x268>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058a8:	f022 020f 	bic.w	r2, r2, #15
 80058ac:	432a      	orrs	r2, r5
 80058ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058b0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80058b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058bc:	d046      	beq.n	800594c <UART_SetConfig+0x24c>
 80058be:	d82f      	bhi.n	8005920 <UART_SetConfig+0x220>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d03d      	beq.n	8005940 <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetSysClockFreq();
 80058c4:	f7ff f848 	bl	8004958 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d0c2      	beq.n	8005852 <UART_SetConfig+0x152>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058cc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058ce:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058d0:	4b26      	ldr	r3, [pc, #152]	@ (800596c <UART_SetConfig+0x26c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058d2:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058d6:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 80058da:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058de:	4299      	cmp	r1, r3
 80058e0:	f63f af43 	bhi.w	800576a <UART_SetConfig+0x6a>
 80058e4:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80058e8:	f63f af3f 	bhi.w	800576a <UART_SetConfig+0x6a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ec:	2300      	movs	r3, #0
 80058ee:	4619      	mov	r1, r3
 80058f0:	f7fa fc92 	bl	8000218 <__aeabi_uldivmod>
 80058f4:	0872      	lsrs	r2, r6, #1
 80058f6:	0203      	lsls	r3, r0, #8
 80058f8:	0209      	lsls	r1, r1, #8
 80058fa:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80058fe:	1898      	adds	r0, r3, r2
 8005900:	f141 0100 	adc.w	r1, r1, #0
 8005904:	4632      	mov	r2, r6
 8005906:	2300      	movs	r3, #0
 8005908:	f7fa fc86 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800590c:	4b19      	ldr	r3, [pc, #100]	@ (8005974 <UART_SetConfig+0x274>)
 800590e:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8005912:	429a      	cmp	r2, r3
 8005914:	f63f af29 	bhi.w	800576a <UART_SetConfig+0x6a>
 8005918:	e799      	b.n	800584e <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800591a:	2bc0      	cmp	r3, #192	@ 0xc0
 800591c:	d082      	beq.n	8005824 <UART_SetConfig+0x124>
 800591e:	e724      	b.n	800576a <UART_SetConfig+0x6a>
 8005920:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005924:	f47f af21 	bne.w	800576a <UART_SetConfig+0x6a>
        pclk = (uint32_t) LSE_VALUE;
 8005928:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800592c:	e7cf      	b.n	80058ce <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 800592e:	f7ff f955 	bl	8004bdc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005932:	2800      	cmp	r0, #0
 8005934:	d08d      	beq.n	8005852 <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005936:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005938:	e791      	b.n	800585e <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800593a:	f7ff f961 	bl	8004c00 <HAL_RCC_GetPCLK2Freq>
        break;
 800593e:	e7f8      	b.n	8005932 <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005940:	f7ff f94c 	bl	8004bdc <HAL_RCC_GetPCLK1Freq>
        break;
 8005944:	e7c0      	b.n	80058c8 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8005946:	f7ff f807 	bl	8004958 <HAL_RCC_GetSysClockFreq>
        break;
 800594a:	e7f2      	b.n	8005932 <UART_SetConfig+0x232>
        pclk = (uint32_t) HSI_VALUE;
 800594c:	4808      	ldr	r0, [pc, #32]	@ (8005970 <UART_SetConfig+0x270>)
 800594e:	e7be      	b.n	80058ce <UART_SetConfig+0x1ce>
 8005950:	cfff69f3 	.word	0xcfff69f3
 8005954:	40008000 	.word	0x40008000
 8005958:	40013800 	.word	0x40013800
 800595c:	40004400 	.word	0x40004400
 8005960:	40004800 	.word	0x40004800
 8005964:	40004c00 	.word	0x40004c00
 8005968:	40021000 	.word	0x40021000
 800596c:	08007adc 	.word	0x08007adc
 8005970:	00f42400 	.word	0x00f42400
 8005974:	000ffcff 	.word	0x000ffcff

08005978 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005978:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800597a:	07da      	lsls	r2, r3, #31
{
 800597c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800597e:	d506      	bpl.n	800598e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005980:	6801      	ldr	r1, [r0, #0]
 8005982:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005984:	684a      	ldr	r2, [r1, #4]
 8005986:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800598a:	4322      	orrs	r2, r4
 800598c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800598e:	079c      	lsls	r4, r3, #30
 8005990:	d506      	bpl.n	80059a0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005992:	6801      	ldr	r1, [r0, #0]
 8005994:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005996:	684a      	ldr	r2, [r1, #4]
 8005998:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800599c:	4322      	orrs	r2, r4
 800599e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059a0:	0759      	lsls	r1, r3, #29
 80059a2:	d506      	bpl.n	80059b2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059a4:	6801      	ldr	r1, [r0, #0]
 80059a6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80059a8:	684a      	ldr	r2, [r1, #4]
 80059aa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80059ae:	4322      	orrs	r2, r4
 80059b0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059b2:	071a      	lsls	r2, r3, #28
 80059b4:	d506      	bpl.n	80059c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059b6:	6801      	ldr	r1, [r0, #0]
 80059b8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80059ba:	684a      	ldr	r2, [r1, #4]
 80059bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059c0:	4322      	orrs	r2, r4
 80059c2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059c4:	06dc      	lsls	r4, r3, #27
 80059c6:	d506      	bpl.n	80059d6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059c8:	6801      	ldr	r1, [r0, #0]
 80059ca:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80059cc:	688a      	ldr	r2, [r1, #8]
 80059ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059d2:	4322      	orrs	r2, r4
 80059d4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059d6:	0699      	lsls	r1, r3, #26
 80059d8:	d506      	bpl.n	80059e8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059da:	6801      	ldr	r1, [r0, #0]
 80059dc:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80059de:	688a      	ldr	r2, [r1, #8]
 80059e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059e4:	4322      	orrs	r2, r4
 80059e6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059e8:	065a      	lsls	r2, r3, #25
 80059ea:	d509      	bpl.n	8005a00 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059ec:	6801      	ldr	r1, [r0, #0]
 80059ee:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80059f0:	684a      	ldr	r2, [r1, #4]
 80059f2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80059f6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059f8:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059fc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059fe:	d00b      	beq.n	8005a18 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a00:	061b      	lsls	r3, r3, #24
 8005a02:	d506      	bpl.n	8005a12 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a04:	6802      	ldr	r2, [r0, #0]
 8005a06:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005a08:	6853      	ldr	r3, [r2, #4]
 8005a0a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	6053      	str	r3, [r2, #4]
  }
}
 8005a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a16:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a18:	684a      	ldr	r2, [r1, #4]
 8005a1a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8005a1c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8005a20:	4322      	orrs	r2, r4
 8005a22:	604a      	str	r2, [r1, #4]
 8005a24:	e7ec      	b.n	8005a00 <UART_AdvFeatureConfig+0x88>
 8005a26:	bf00      	nop

08005a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a2a:	b085      	sub	sp, #20
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2c:	6804      	ldr	r4, [r0, #0]
{
 8005a2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005a30:	4605      	mov	r5, r0
 8005a32:	1c70      	adds	r0, r6, #1
 8005a34:	d10a      	bne.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x24>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a36:	69e3      	ldr	r3, [r4, #28]
 8005a38:	ea31 0303 	bics.w	r3, r1, r3
 8005a3c:	bf0c      	ite	eq
 8005a3e:	2301      	moveq	r3, #1
 8005a40:	2300      	movne	r3, #0
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d0f7      	beq.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xe>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8005a46:	2000      	movs	r0, #0
}
 8005a48:	b005      	add	sp, #20
 8005a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4c:	69e0      	ldr	r0, [r4, #28]
 8005a4e:	ea31 0000 	bics.w	r0, r1, r0
 8005a52:	bf0c      	ite	eq
 8005a54:	2001      	moveq	r0, #1
 8005a56:	2000      	movne	r0, #0
 8005a58:	4290      	cmp	r0, r2
 8005a5a:	d1f4      	bne.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x1e>
 8005a5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a60:	9101      	str	r1, [sp, #4]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a62:	f7fd fcf5 	bl	8003450 <HAL_GetTick>
 8005a66:	9b03      	ldr	r3, [sp, #12]
 8005a68:	1ac0      	subs	r0, r0, r3
 8005a6a:	42b0      	cmp	r0, r6
 8005a6c:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 8005a70:	d82e      	bhi.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0xa8>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a72:	682c      	ldr	r4, [r5, #0]
 8005a74:	4620      	mov	r0, r4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a76:	b366      	cbz	r6, 8005ad2 <UART_WaitOnFlagUntilTimeout+0xaa>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a78:	6827      	ldr	r7, [r4, #0]
 8005a7a:	077f      	lsls	r7, r7, #29
 8005a7c:	d5e6      	bpl.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x24>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a7e:	69e7      	ldr	r7, [r4, #28]
 8005a80:	053f      	lsls	r7, r7, #20
 8005a82:	d5e3      	bpl.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x24>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a88:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a8e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	e844 3200 	strex	r2, r3, [r4]
 8005a96:	b13a      	cbz	r2, 8005aa8 <UART_WaitOnFlagUntilTimeout+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	e850 3f00 	ldrex	r3, [r0]
 8005a9c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	e840 3200 	strex	r2, r3, [r0]
 8005aa4:	2a00      	cmp	r2, #0
 8005aa6:	d1f7      	bne.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	f100 0308 	add.w	r3, r0, #8
 8005aac:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	f100 0108 	add.w	r1, r0, #8
 8005ab8:	e841 3200 	strex	r2, r3, [r1]
 8005abc:	2a00      	cmp	r2, #0
 8005abe:	d1f3      	bne.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x80>
          huart->gState = HAL_UART_STATE_READY;
 8005ac0:	2320      	movs	r3, #32
 8005ac2:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aca:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          return HAL_TIMEOUT;
 8005ace:	e019      	b.n	8005b04 <UART_WaitOnFlagUntilTimeout+0xdc>
 8005ad0:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ad6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	e840 3200 	strex	r2, r3, [r0]
 8005ade:	2a00      	cmp	r2, #0
 8005ae0:	d1f7      	bne.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xaa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	f100 0308 	add.w	r3, r0, #8
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	f100 0108 	add.w	r1, r0, #8
 8005af2:	e841 3200 	strex	r2, r3, [r1]
 8005af6:	2a00      	cmp	r2, #0
 8005af8:	d1f3      	bne.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xba>
        huart->gState = HAL_UART_STATE_READY;
 8005afa:	2320      	movs	r3, #32
 8005afc:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005b00:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          __HAL_UNLOCK(huart);
 8005b04:	2300      	movs	r3, #0
 8005b06:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
        return HAL_TIMEOUT;
 8005b0a:	2003      	movs	r0, #3
 8005b0c:	e79c      	b.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x20>
 8005b0e:	bf00      	nop

08005b10 <HAL_UART_Init>:
  if (huart == NULL)
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d066      	beq.n	8005be2 <HAL_UART_Init+0xd2>
{
 8005b14:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005b16:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d04c      	beq.n	8005bbc <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8005b22:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005b24:	2324      	movs	r3, #36	@ 0x24
 8005b26:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 8005b2a:	6813      	ldr	r3, [r2, #0]
 8005b2c:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b30:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005b32:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b34:	f7ff fde4 	bl	8005700 <UART_SetConfig>
 8005b38:	2801      	cmp	r0, #1
 8005b3a:	d03c      	beq.n	8005bb6 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b3c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d135      	bne.n	8005bae <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	6859      	ldr	r1, [r3, #4]
 8005b46:	f421 4190 	bic.w	r1, r1, #18432	@ 0x4800
 8005b4a:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b4c:	6899      	ldr	r1, [r3, #8]
 8005b4e:	f021 012a 	bic.w	r1, r1, #42	@ 0x2a
 8005b52:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005b54:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b56:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8005b58:	f041 0101 	orr.w	r1, r1, #1
 8005b5c:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5e:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 8005b62:	f7fd fc75 	bl	8003450 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8005b6c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b6e:	d40e      	bmi.n	8005b8e <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	075b      	lsls	r3, r3, #29
 8005b74:	d427      	bmi.n	8005bc6 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b76:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 8005b7e:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005b82:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 8005b86:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b88:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8005b8a:	b002      	add	sp, #8
 8005b8c:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	462a      	mov	r2, r5
 8005b96:	4603      	mov	r3, r0
 8005b98:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f7ff ff43 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 8005ba2:	b9e0      	cbnz	r0, 8005bde <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	075b      	lsls	r3, r3, #29
 8005baa:	d40c      	bmi.n	8005bc6 <HAL_UART_Init+0xb6>
 8005bac:	e7e3      	b.n	8005b76 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f7ff fee2 	bl	8005978 <UART_AdvFeatureConfig>
 8005bb4:	e7c5      	b.n	8005b42 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8005bb6:	2001      	movs	r0, #1
}
 8005bb8:	b002      	add	sp, #8
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8005bbc:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 8005bc0:	f7fc fcca 	bl	8002558 <HAL_UART_MspInit>
 8005bc4:	e7ad      	b.n	8005b22 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4633      	mov	r3, r6
 8005bd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f7ff ff27 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d0cb      	beq.n	8005b76 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8005bde:	2003      	movs	r0, #3
 8005be0:	e7d3      	b.n	8005b8a <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8005be2:	2001      	movs	r0, #1
}
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop

08005be8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005be8:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d017      	beq.n	8005c20 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bf0:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005bf2:	2324      	movs	r3, #36	@ 0x24
{
 8005bf4:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8005bf6:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bfa:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bfc:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bfe:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8005c00:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c04:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8005c08:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c0a:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c0c:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c0e:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 8005c12:	2220      	movs	r2, #32
 8005c14:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84

  return HAL_OK;
}
 8005c18:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8005c1c:	4618      	mov	r0, r3
}
 8005c1e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005c20:	2002      	movs	r0, #2
}
 8005c22:	4770      	bx	lr

08005c24 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c24:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 8005c28:	2a01      	cmp	r2, #1
 8005c2a:	d037      	beq.n	8005c9c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8005c2c:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c2e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005c30:	2024      	movs	r0, #36	@ 0x24
{
 8005c32:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005c34:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c38:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c3a:	6810      	ldr	r0, [r2, #0]
 8005c3c:	f020 0001 	bic.w	r0, r0, #1
 8005c40:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c42:	6890      	ldr	r0, [r2, #8]
 8005c44:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8005c48:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c4a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c4c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c4e:	b310      	cbz	r0, 8005c96 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c50:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c52:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c54:	4d12      	ldr	r5, [pc, #72]	@ (8005ca0 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c56:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c5a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c5e:	4911      	ldr	r1, [pc, #68]	@ (8005ca4 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8005c60:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c64:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c68:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c6c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c70:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c72:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c74:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c78:	fbb1 f1f5 	udiv	r1, r1, r5
 8005c7c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8005c80:	2100      	movs	r1, #0
 8005c82:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8005c86:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c88:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005c8a:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 8005c8e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005c90:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 8005c94:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8005c96:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005c98:	4608      	mov	r0, r1
 8005c9a:	e7ef      	b.n	8005c7c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005c9c:	2002      	movs	r0, #2
}
 8005c9e:	4770      	bx	lr
 8005ca0:	08007af4 	.word	0x08007af4
 8005ca4:	08007afc 	.word	0x08007afc

08005ca8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8005ca8:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 8005cac:	2a01      	cmp	r2, #1
 8005cae:	d037      	beq.n	8005d20 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8005cb0:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cb2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005cb4:	2024      	movs	r0, #36	@ 0x24
{
 8005cb6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005cb8:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cbc:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005cbe:	6810      	ldr	r0, [r2, #0]
 8005cc0:	f020 0001 	bic.w	r0, r0, #1
 8005cc4:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cc6:	6890      	ldr	r0, [r2, #8]
 8005cc8:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8005ccc:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cce:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cd0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cd2:	b310      	cbz	r0, 8005d1a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cd4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cd6:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cd8:	4d12      	ldr	r5, [pc, #72]	@ (8005d24 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cda:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cde:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ce2:	4911      	ldr	r1, [pc, #68]	@ (8005d28 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005ce4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ce8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cec:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cf0:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cf4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cf6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cf8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cfc:	fbb1 f1f5 	udiv	r1, r1, r5
 8005d00:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8005d04:	2100      	movs	r1, #0
 8005d06:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8005d0a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d0c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005d0e:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 8005d12:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005d14:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 8005d18:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8005d1a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005d1c:	4608      	mov	r0, r1
 8005d1e:	e7ef      	b.n	8005d00 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005d20:	2002      	movs	r0, #2
}
 8005d22:	4770      	bx	lr
 8005d24:	08007af4 	.word	0x08007af4
 8005d28:	08007afc 	.word	0x08007afc

08005d2c <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 8005d2c:	88c0      	ldrh	r0, [r0, #6]
 8005d2e:	4770      	bx	lr

08005d30 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8005d30:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8005d32:	8840      	ldrh	r0, [r0, #2]
 8005d34:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8005d38:	0c00      	lsrs	r0, r0, #16
 8005d3a:	4770      	bx	lr

08005d3c <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8005d3c:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005d3e:	8802      	ldrh	r2, [r0, #0]
 8005d40:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8005d42:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8005d46:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005d4a:	fb02 f202 	mul.w	r2, r2, r2
 8005d4e:	4594      	cmp	ip, r2
{
 8005d50:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005d52:	d919      	bls.n	8005d88 <Circle_Limitation+0x4c>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8005d54:	f890 20b2 	ldrb.w	r2, [r0, #178]	@ 0xb2
 8005d58:	ebc2 621c 	rsb	r2, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	eb00 0042 	add.w	r0, r0, r2, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8005d62:	8882      	ldrh	r2, [r0, #4]
 8005d64:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005d68:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005d6e:	bfbc      	itt	lt
 8005d70:	f501 41ff 	addlt.w	r1, r1, #32640	@ 0x7f80
 8005d74:	317f      	addlt	r1, #127	@ 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bfbc      	itt	lt
 8005d7a:	f503 43ff 	addlt.w	r3, r3, #32640	@ 0x7f80
 8005d7e:	337f      	addlt	r3, #127	@ 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005d80:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8005d84:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8005d88:	b289      	uxth	r1, r1
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	f361 000f 	bfi	r0, r1, #0, #16
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005d96:	b004      	add	sp, #16
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop

08005d9c <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8005d9c:	4408      	add	r0, r1
 8005d9e:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
}
 8005da2:	4770      	bx	lr

08005da4 <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8005da4:	4408      	add	r0, r1
}
 8005da6:	f890 0030 	ldrb.w	r0, [r0, #48]	@ 0x30
 8005daa:	4770      	bx	lr

08005dac <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8005dac:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8005db0:	8642      	strh	r2, [r0, #50]	@ 0x32
}
 8005db2:	4770      	bx	lr

08005db4 <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8005db4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
}
 8005db8:	f9b0 0032 	ldrsh.w	r0, [r0, #50]	@ 0x32
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop

08005dc0 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8005dc4:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8005dc6:	f8c0 3096 	str.w	r3, [r0, #150]	@ 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8005dca:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8005dce:	f8a0 311b 	strh.w	r3, [r0, #283]	@ 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 8005dd2:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
}
 8005dd6:	4770      	bx	lr

08005dd8 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8005dd8:	b120      	cbz	r0, 8005de4 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8005dda:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8005dde:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8005de0:	9b00      	ldr	r3, [sp, #0]
 8005de2:	60c3      	str	r3, [r0, #12]
  }
}
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop

08005de8 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8005de8:	b178      	cbz	r0, 8005e0a <FCP_CalcCRC+0x22>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8005dea:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8005dec:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 8005dee:	440b      	add	r3, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8005df0:	b139      	cbz	r1, 8005e02 <FCP_CalcCRC+0x1a>
 8005df2:	3001      	adds	r0, #1
 8005df4:	4401      	add	r1, r0
    {
      nSum += pFrame->Buffer[idx];
 8005df6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005dfa:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8005dfc:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8005dfe:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8005e00:	d1f9      	bne.n	8005df6 <FCP_CalcCRC+0xe>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8005e02:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8005e06:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  }

  return nCRC ;
}
 8005e0a:	4770      	bx	lr

08005e0c <ICS_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005e0c:	6883      	ldr	r3, [r0, #8]
 8005e0e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005e12:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
    ICS_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void ICS_ADCxInit( ADC_TypeDef * ADCx )
{
 8005e16:	b082      	sub	sp, #8
 8005e18:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005e1a:	6883      	ldr	r3, [r0, #8]
 8005e1c:	00d9      	lsls	r1, r3, #3
 8005e1e:	d418      	bmi.n	8005e52 <ICS_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8005e20:	4b24      	ldr	r3, [pc, #144]	@ (8005eb4 <ICS_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8005e22:	6882      	ldr	r2, [r0, #8]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4924      	ldr	r1, [pc, #144]	@ (8005eb8 <ICS_ADCxInit+0xac>)
 8005e28:	099b      	lsrs	r3, r3, #6
 8005e2a:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8005e2e:	fba1 1303 	umull	r1, r3, r1, r3
 8005e32:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8005e36:	099b      	lsrs	r3, r3, #6
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005e3e:	6082      	str	r2, [r0, #8]
 8005e40:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8005e42:	9b01      	ldr	r3, [sp, #4]
 8005e44:	b12b      	cbz	r3, 8005e52 <ICS_ADCxInit+0x46>
    {
      wait_loop_index--;
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8005e4c:	9b01      	ldr	r3, [sp, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f9      	bne.n	8005e46 <ICS_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8005e52:	6883      	ldr	r3, [r0, #8]
 8005e54:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005e58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e60:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005e62:	6883      	ldr	r3, [r0, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dbfc      	blt.n	8005e62 <ICS_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8005e68:	6803      	ldr	r3, [r0, #0]
 8005e6a:	07da      	lsls	r2, r3, #31
 8005e6c:	d408      	bmi.n	8005e80 <ICS_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8005e6e:	4a13      	ldr	r2, [pc, #76]	@ (8005ebc <ICS_ADCxInit+0xb0>)
 8005e70:	6883      	ldr	r3, [r0, #8]
 8005e72:	4013      	ands	r3, r2
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8005e7a:	6803      	ldr	r3, [r0, #0]
 8005e7c:	07db      	lsls	r3, r3, #31
 8005e7e:	d5f7      	bpl.n	8005e70 <ICS_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8005e80:	6883      	ldr	r3, [r0, #8]
 8005e82:	4a0e      	ldr	r2, [pc, #56]	@ (8005ebc <ICS_ADCxInit+0xb0>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	f043 0308 	orr.w	r3, r3, #8
 8005e8a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8005e8c:	6883      	ldr	r3, [r0, #8]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	f043 0320 	orr.w	r3, r3, #32
 8005e94:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8005e96:	68c3      	ldr	r3, [r0, #12]
 8005e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e9c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ea0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ea4:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8005ea6:	6883      	ldr	r3, [r0, #8]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	f043 0304 	orr.w	r3, r3, #4
 8005eae:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 8005eb0:	b002      	add	sp, #8
 8005eb2:	4770      	bx	lr
 8005eb4:	200006d8 	.word	0x200006d8
 8005eb8:	053e2d63 	.word	0x053e2d63
 8005ebc:	7fffffc0 	.word	0x7fffffc0

08005ec0 <ICS_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005ec0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005ec2:	689a      	ldr	r2, [r3, #8]
{
 8005ec4:	b530      	push	{r4, r5, lr}
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8005ec6:	e9d3 5400 	ldrd	r5, r4, [r3]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005eca:	6853      	ldr	r3, [r2, #4]
 8005ecc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed4:	6053      	str	r3, [r2, #4]
  
  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL value)  */
  reg = ( uint16_t )( ADCx_1->JDR1 );
 8005ed6:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8005eda:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	1a9b      	subs	r3, r3, r2

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 8005ee0:	4a19      	ldr	r2, [pc, #100]	@ (8005f48 <ICS_GetPhaseCurrents+0x88>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	db06      	blt.n	8005ef4 <ICS_GetPhaseCurrents+0x34>
  {
	  Iab->a = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 8005ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eea:	db29      	blt.n	8005f40 <ICS_GetPhaseCurrents+0x80>
 8005eec:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	e002      	b.n	8005efa <ICS_GetPhaseCurrents+0x3a>
 8005ef4:	f248 0301 	movw	r3, #32769	@ 0x8001
 8005ef8:	4696      	mov	lr, r2
  {
	  Iab->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ADCx_2->JDR1 );
 8005efa:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8005efe:	6e04      	ldr	r4, [r0, #96]	@ 0x60
	  Iab->a = -INT16_MAX;
 8005f00:	f8a1 e000 	strh.w	lr, [r1]
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8005f04:	b292      	uxth	r2, r2
 8005f06:	1b12      	subs	r2, r2, r4

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 8005f08:	4c0f      	ldr	r4, [pc, #60]	@ (8005f48 <ICS_GetPhaseCurrents+0x88>)
 8005f0a:	42a2      	cmp	r2, r4
 8005f0c:	db06      	blt.n	8005f1c <ICS_GetPhaseCurrents+0x5c>
  {
	  Iab->b = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 8005f0e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005f12:	db11      	blt.n	8005f38 <ICS_GetPhaseCurrents+0x78>
 8005f14:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8005f18:	4694      	mov	ip, r2
 8005f1a:	e002      	b.n	8005f22 <ICS_GetPhaseCurrents+0x62>
 8005f1c:	46a4      	mov	ip, r4
 8005f1e:	f248 0201 	movw	r2, #32769	@ 0x8001
	  Iab->b = ( int16_t )aux;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005f22:	4413      	add	r3, r2
 8005f24:	425b      	negs	r3, r3
	  Iab->b = -INT16_MAX;
 8005f26:	f8a1 c002 	strh.w	ip, [r1, #2]
  pHandle->_Super.Ia = Iab->a;
 8005f2a:	f8a0 e048 	strh.w	lr, [r0, #72]	@ 0x48
  pHandle->_Super.Ib = Iab->b;
 8005f2e:	f8a0 c04a 	strh.w	ip, [r0, #74]	@ 0x4a
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005f32:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
}
 8005f36:	bd30      	pop	{r4, r5, pc}
	  Iab->b = ( int16_t )aux;
 8005f38:	fa0f fc82 	sxth.w	ip, r2
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005f3c:	b292      	uxth	r2, r2
 8005f3e:	e7f0      	b.n	8005f22 <ICS_GetPhaseCurrents+0x62>
	  Iab->a = ( int16_t )aux;
 8005f40:	fa0f fe83 	sxth.w	lr, r3
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	e7d8      	b.n	8005efa <ICS_GetPhaseCurrents+0x3a>
 8005f48:	ffff8001 	.word	0xffff8001

08005f4c <ICS_WriteTIMRegisters>:
#endif /* __ICCARM__ */
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005f4c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8005f4e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005f50:	689b      	ldr	r3, [r3, #8]

  /* Limit for update event */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005f52:	4a07      	ldr	r2, [pc, #28]	@ (8005f70 <ICS_WriteTIMRegisters+0x24>)
{
 8005f54:	b430      	push	{r4, r5}
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8005f56:	8e45      	ldrh	r5, [r0, #50]	@ 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8005f58:	8e84      	ldrh	r4, [r0, #52]	@ 0x34
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005f5a:	635d      	str	r5, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005f5c:	639c      	str	r4, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005f5e:	63d9      	str	r1, [r3, #60]	@ 0x3c
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	4213      	tst	r3, r2
  else
  {
    Aux = MC_NO_ERROR;
  }
  return Aux;
}
 8005f64:	bf14      	ite	ne
 8005f66:	2001      	movne	r0, #1
 8005f68:	2000      	moveq	r0, #0
 8005f6a:	bc30      	pop	{r4, r5}
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	02000070 	.word	0x02000070

08005f74 <ICS_HFCurrentsPolarization>:
#endif /* __ICCARM__ */
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005f74:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005f76:	689a      	ldr	r2, [r3, #8]
{
 8005f78:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8005f7a:	e9d3 5400 	ldrd	r5, r4, [r3]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005f7e:	6853      	ldr	r3, [r2, #4]
 8005f80:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f88:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005f8a:	f890 3066 	ldrb.w	r3, [r0, #102]	@ 0x66
 8005f8e:	2b0f      	cmp	r3, #15
 8005f90:	d80f      	bhi.n	8005fb2 <ICS_HFCurrentsPolarization+0x3e>
  {
    pHandle-> PhaseAOffset += ADCx_1->JDR1;
 8005f92:	f8d5 2080 	ldr.w	r2, [r5, #128]	@ 0x80
 8005f96:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
    pHandle-> PhaseBOffset += ADCx_2->JDR1;
 8005f98:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
    pHandle-> PhaseAOffset += ADCx_1->JDR1;
 8005f9c:	189c      	adds	r4, r3, r2
    pHandle-> PhaseBOffset += ADCx_2->JDR1;
 8005f9e:	6e02      	ldr	r2, [r0, #96]	@ 0x60
    pHandle->PolarizationCounter++;
 8005fa0:	f890 3066 	ldrb.w	r3, [r0, #102]	@ 0x66
    pHandle-> PhaseBOffset += ADCx_2->JDR1;
 8005fa4:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8005fa6:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCx_2->JDR1;
 8005fa8:	e9c0 4217 	strd	r4, r2, [r0, #92]	@ 0x5c
    pHandle->PolarizationCounter++;
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8005fb2:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8005fb4:	bc30      	pop	{r4, r5}
  Iab->a = 0;
 8005fb6:	600b      	str	r3, [r1, #0]
}
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop

08005fbc <ICS_Init>:
{
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005fbe:	6ec6      	ldr	r6, [r0, #108]	@ 0x6c
{
 8005fc0:	4607      	mov	r7, r0
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8005fc2:	e9d6 0500 	ldrd	r0, r5, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8005fc6:	6843      	ldr	r3, [r0, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005fc8:	68b4      	ldr	r4, [r6, #8]
 8005fca:	f023 0304 	bic.w	r3, r3, #4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8005fce:	2104      	movs	r1, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8005fd0:	6043      	str	r3, [r0, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8005fd2:	6001      	str	r1, [r0, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8005fd4:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8005fd6:	2220      	movs	r2, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8005fd8:	f023 0320 	bic.w	r3, r3, #32
 8005fdc:	6043      	str	r3, [r0, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8005fde:	6002      	str	r2, [r0, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8005fe0:	686b      	ldr	r3, [r5, #4]
 8005fe2:	f023 0304 	bic.w	r3, r3, #4
 8005fe6:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8005fe8:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8005fea:	686b      	ldr	r3, [r5, #4]
 8005fec:	f023 0320 	bic.w	r3, r3, #32
 8005ff0:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8005ff2:	602a      	str	r2, [r5, #0]
    if ( TIMx == TIM1 )
 8005ff4:	4b43      	ldr	r3, [pc, #268]	@ (8006104 <ICS_Init+0x148>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8005ff6:	4a44      	ldr	r2, [pc, #272]	@ (8006108 <ICS_Init+0x14c>)
 8005ff8:	429c      	cmp	r4, r3
 8005ffa:	6913      	ldr	r3, [r2, #16]
 8005ffc:	bf0c      	ite	eq
 8005ffe:	f443 6300 	orreq.w	r3, r3, #2048	@ 0x800
 8006002:	f443 5300 	orrne.w	r3, r3, #8192	@ 0x2000
 8006006:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006008:	6883      	ldr	r3, [r0, #8]
 800600a:	07db      	lsls	r3, r3, #31
 800600c:	d407      	bmi.n	800601e <ICS_Init+0x62>
      ICS_ADCxInit (ADCx_1);
 800600e:	f7ff fefd 	bl	8005e0c <ICS_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8006012:	2340      	movs	r3, #64	@ 0x40
 8006014:	6003      	str	r3, [r0, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8006016:	6843      	ldr	r3, [r0, #4]
 8006018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800601c:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800601e:	68ab      	ldr	r3, [r5, #8]
 8006020:	07d8      	lsls	r0, r3, #31
 8006022:	d548      	bpl.n	80060b6 <ICS_Init+0xfa>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	f023 0301 	bic.w	r3, r3, #1
 800602a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800602c:	6863      	ldr	r3, [r4, #4]
 800602e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006036:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006038:	69a3      	ldr	r3, [r4, #24]
 800603a:	f043 0308 	orr.w	r3, r3, #8
 800603e:	61a3      	str	r3, [r4, #24]
 8006040:	69a3      	ldr	r3, [r4, #24]
 8006042:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006046:	61a3      	str	r3, [r4, #24]
 8006048:	69e3      	ldr	r3, [r4, #28]
 800604a:	f043 0308 	orr.w	r3, r3, #8
 800604e:	61e3      	str	r3, [r4, #28]
 8006050:	69e3      	ldr	r3, [r4, #28]
 8006052:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006056:	61e3      	str	r3, [r4, #28]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006058:	6963      	ldr	r3, [r4, #20]
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	6163      	str	r3, [r4, #20]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8006060:	f896 3029 	ldrb.w	r3, [r6, #41]	@ 0x29
 8006064:	2b02      	cmp	r3, #2
 8006066:	d02a      	beq.n	80060be <ICS_Init+0x102>
    if ( pHandle->_Super.Motor == M1 )
 8006068:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800606c:	b92b      	cbnz	r3, 800607a <ICS_Init+0xbe>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 800606e:	f896 3027 	ldrb.w	r3, [r6, #39]	@ 0x27
 8006072:	2b01      	cmp	r3, #1
 8006074:	d027      	beq.n	80060c6 <ICS_Init+0x10a>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8006076:	2b03      	cmp	r3, #3
 8006078:	d03c      	beq.n	80060f4 <ICS_Init+0x138>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800607a:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 800607e:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8006080:	f896 3028 	ldrb.w	r3, [r6, #40]	@ 0x28
 8006084:	b163      	cbz	r3, 80060a0 <ICS_Init+0xe4>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8006086:	6923      	ldr	r3, [r4, #16]
 8006088:	05d9      	lsls	r1, r3, #23
 800608a:	d509      	bpl.n	80060a0 <ICS_Init+0xe4>
 800608c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8006090:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 8006094:	6121      	str	r1, [r4, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8006096:	6922      	ldr	r2, [r4, #16]
 8006098:	05d2      	lsls	r2, r2, #23
 800609a:	d501      	bpl.n	80060a0 <ICS_Init+0xe4>
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800609c:	3b01      	subs	r3, #1
 800609e:	d1f9      	bne.n	8006094 <ICS_Init+0xd8>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80060a0:	68e3      	ldr	r3, [r4, #12]
 80060a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060a6:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 80060a8:	6a23      	ldr	r3, [r4, #32]
 80060aa:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 80060ae:	f043 0305 	orr.w	r3, r3, #5
 80060b2:	6223      	str	r3, [r4, #32]
}
 80060b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ICS_ADCxInit (ADCx_2);
 80060b6:	4628      	mov	r0, r5
 80060b8:	f7ff fea8 	bl	8005e0c <ICS_ADCxInit>
 80060bc:	e7b2      	b.n	8006024 <ICS_Init+0x68>
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 80060be:	f896 302a 	ldrb.w	r3, [r6, #42]	@ 0x2a
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d00b      	beq.n	80060de <ICS_Init+0x122>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 80060c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80060ca:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 80060cc:	6263      	str	r3, [r4, #36]	@ 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80060ce:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 80060d2:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 80060d4:	f896 3028 	ldrb.w	r3, [r6, #40]	@ 0x28
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0e1      	beq.n	80060a0 <ICS_Init+0xe4>
 80060dc:	e7d3      	b.n	8006086 <ICS_Init+0xca>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80060de:	f896 2027 	ldrb.w	r2, [r6, #39]	@ 0x27
 80060e2:	2a03      	cmp	r2, #3
 80060e4:	d1ef      	bne.n	80060c6 <ICS_Init+0x10a>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80060e6:	6323      	str	r3, [r4, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80060e8:	6963      	ldr	r3, [r4, #20]
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80060f0:	6322      	str	r2, [r4, #48]	@ 0x30
}
 80060f2:	e7e8      	b.n	80060c6 <ICS_Init+0x10a>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80060f4:	2201      	movs	r2, #1
 80060f6:	6322      	str	r2, [r4, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80060f8:	6962      	ldr	r2, [r4, #20]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006100:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8006102:	e7ba      	b.n	800607a <ICS_Init+0xbe>
 8006104:	40012c00 	.word	0x40012c00
 8006108:	e0042000 	.word	0xe0042000

0800610c <ICS_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800610c:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c

  pHandle->_Super.TurnOnLowSidesAction = true;
 800610e:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006112:	688b      	ldr	r3, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8006114:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006118:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800611a:	f06f 0001 	mvn.w	r0, #1
 800611e:	6118      	str	r0, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006120:	635a      	str	r2, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006122:	639a      	str	r2, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006124:	63da      	str	r2, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	07d2      	lsls	r2, r2, #31
 800612a:	d5fc      	bpl.n	8006126 <ICS_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800612c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800612e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006132:	645a      	str	r2, [r3, #68]	@ 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006134:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8006138:	2b02      	cmp	r3, #2
 800613a:	d000      	beq.n	800613e <ICS_TurnOnLowSides+0x32>
 800613c:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800613e:	e9d1 2003 	ldrd	r2, r0, [r1, #12]
{
 8006142:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006144:	694b      	ldr	r3, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006146:	8c0c      	ldrh	r4, [r1, #32]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006148:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800614a:	8c4c      	ldrh	r4, [r1, #34]	@ 0x22
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800614c:	8c8a      	ldrh	r2, [r1, #36]	@ 0x24
 800614e:	6184      	str	r4, [r0, #24]
  }
  return;
}
 8006150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006154:	619a      	str	r2, [r3, #24]
 8006156:	4770      	bx	lr

08006158 <ICS_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006158:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800615a:	f8b0 2064 	ldrh.w	r2, [r0, #100]	@ 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800615e:	688b      	ldr	r3, [r1, #8]
  pHandle->ADCRegularLocked = true;
 8006160:	f04f 0c01 	mov.w	ip, #1
{
 8006164:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->ADCRegularLocked = true;
 8006166:	f880 c06a 	strb.w	ip, [r0, #106]	@ 0x6a
  pHandle->_Super.TurnOnLowSidesAction = false;
 800616a:	f04f 0c00 	mov.w	ip, #0
 800616e:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8006172:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006174:	6358      	str	r0, [r3, #52]	@ 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8006176:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006178:	6398      	str	r0, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800617a:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800617c:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006180:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006182:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	07d2      	lsls	r2, r2, #31
 8006188:	d5fc      	bpl.n	8006184 <ICS_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800618a:	f06f 0201 	mvn.w	r2, #1
 800618e:	611a      	str	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006190:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006192:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006196:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800619a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800619e:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80061a0:	f891 2026 	ldrb.w	r2, [r1, #38]	@ 0x26
 80061a4:	2a02      	cmp	r2, #2
 80061a6:	d008      	beq.n	80061ba <ICS_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80061a8:	f06f 0201 	mvn.w	r2, #1
 80061ac:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 80061b4:	bcf0      	pop	{r4, r5, r6, r7}
 80061b6:	60da      	str	r2, [r3, #12]
 80061b8:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80061ba:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80061bc:	68cf      	ldr	r7, [r1, #12]
 80061be:	f8b1 c020 	ldrh.w	ip, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80061c2:	690d      	ldr	r5, [r1, #16]
 80061c4:	8c4e      	ldrh	r6, [r1, #34]	@ 0x22
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80061c6:	694c      	ldr	r4, [r1, #20]
 80061c8:	8c89      	ldrh	r1, [r1, #36]	@ 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80061ca:	f240 5255 	movw	r2, #1365	@ 0x555
 80061ce:	4210      	tst	r0, r2
 80061d0:	d004      	beq.n	80061dc <ICS_SwitchOnPWM+0x84>
 80061d2:	f8c7 c018 	str.w	ip, [r7, #24]
 80061d6:	61ae      	str	r6, [r5, #24]
 80061d8:	61a1      	str	r1, [r4, #24]
}
 80061da:	e7e5      	b.n	80061a8 <ICS_SwitchOnPWM+0x50>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80061dc:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 80061e0:	62ae      	str	r6, [r5, #40]	@ 0x28
 80061e2:	62a1      	str	r1, [r4, #40]	@ 0x28
}
 80061e4:	e7e0      	b.n	80061a8 <ICS_SwitchOnPWM+0x50>
 80061e6:	bf00      	nop

080061e8 <ICS_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80061e8:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 80061ea:	688b      	ldr	r3, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	f022 0201 	bic.w	r2, r2, #1
 80061f2:	60da      	str	r2, [r3, #12]
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  if ( pHandle->BrakeActionLock == true )
 80061f4:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
  pHandle->_Super.TurnOnLowSidesAction = false;
 80061f8:	f04f 0c00 	mov.w	ip, #0
 80061fc:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  if ( pHandle->BrakeActionLock == true )
 8006200:	b95a      	cbnz	r2, 800621a <ICS_SwitchOffPWM+0x32>
  {
  }
  else
  {
    TIMx->BDTR &= ~( ( uint32_t )( LL_TIM_OSSI_ENABLE ) );
 8006202:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006208:	645a      	str	r2, [r3, #68]	@ 0x44
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800620a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800620c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006210:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_DisableAllOutputs( TIMx );

    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006212:	f891 2026 	ldrb.w	r2, [r1, #38]	@ 0x26
 8006216:	2a02      	cmp	r2, #2
 8006218:	d00c      	beq.n	8006234 <ICS_SwitchOffPWM+0x4c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800621a:	f06f 0201 	mvn.w	r2, #1
 800621e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	07d2      	lsls	r2, r2, #31
 8006224:	d5fc      	bpl.n	8006220 <ICS_SwitchOffPWM+0x38>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006226:	f06f 0101 	mvn.w	r1, #1
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* We allow ADC usage for regular conversion on Systick, cut 2.2 patch */
   pHandle->ADCRegularLocked=false;
 800622a:	2200      	movs	r2, #0
 800622c:	6119      	str	r1, [r3, #16]
 800622e:	f880 206a 	strb.w	r2, [r0, #106]	@ 0x6a
 8006232:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006234:	68ca      	ldr	r2, [r1, #12]
{
 8006236:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006238:	8c0c      	ldrh	r4, [r1, #32]
  WRITE_REG(GPIOx->BRR, PinMask);
 800623a:	6294      	str	r4, [r2, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800623c:	690a      	ldr	r2, [r1, #16]
 800623e:	8c4c      	ldrh	r4, [r1, #34]	@ 0x22
 8006240:	6294      	str	r4, [r2, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006242:	694a      	ldr	r2, [r1, #20]
 8006244:	8c89      	ldrh	r1, [r1, #36]	@ 0x24
 8006246:	6291      	str	r1, [r2, #40]	@ 0x28
 8006248:	f06f 0201 	mvn.w	r2, #1
 800624c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	07d1      	lsls	r1, r2, #31
 8006252:	d5fc      	bpl.n	800624e <ICS_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006254:	f06f 0101 	mvn.w	r1, #1
   pHandle->ADCRegularLocked=false;
 8006258:	2200      	movs	r2, #0
 800625a:	6119      	str	r1, [r3, #16]
}
 800625c:	f85d 4b04 	ldr.w	r4, [sp], #4
   pHandle->ADCRegularLocked=false;
 8006260:	f880 206a 	strb.w	r2, [r0, #106]	@ 0x6a
}
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop

08006268 <ICS_CurrentReadingPolarization>:
{
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800626a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800626c:	689c      	ldr	r4, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800626e:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PhaseAOffset = 0u;
 8006272:	2300      	movs	r3, #0
 8006274:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  pHandle->PolarizationCounter = 0u;
 8006278:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
  CLEAR_BIT(TIMx->CCER, Channels);
 800627c:	6a23      	ldr	r3, [r4, #32]
 800627e:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 8006282:	f023 0305 	bic.w	r3, r3, #5
 8006286:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsPolarization;
 8006288:	4b29      	ldr	r3, [pc, #164]	@ (8006330 <ICS_CurrentReadingPolarization+0xc8>)
 800628a:	6043      	str	r3, [r0, #4]
{
 800628c:	4605      	mov	r5, r0
  ICS_SwitchOnPWM( &pHandle->_Super );
 800628e:	f7ff ff63 	bl	8006158 <ICS_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8006292:	4a28      	ldr	r2, [pc, #160]	@ (8006334 <ICS_CurrentReadingPolarization+0xcc>)
 8006294:	6863      	ldr	r3, [r4, #4]
 8006296:	4013      	ands	r3, r2
 8006298:	2b70      	cmp	r3, #112	@ 0x70
 800629a:	d1fb      	bne.n	8006294 <ICS_CurrentReadingPolarization+0x2c>
  MODIFY_REG(ADCx->CR,
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4a26      	ldr	r2, [pc, #152]	@ (8006338 <ICS_CurrentReadingPolarization+0xd0>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	f043 0308 	orr.w	r3, r3, #8
 80062a6:	60bb      	str	r3, [r7, #8]
 80062a8:	68b3      	ldr	r3, [r6, #8]
 80062aa:	4013      	ands	r3, r2
 80062ac:	f043 0308 	orr.w	r3, r3, #8
  						  pHandle->pParams_str->RepetitionCounter,
 80062b0:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 80062b2:	60b3      	str	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 80062b4:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 80062b8:	f105 0366 	add.w	r3, r5, #102	@ 0x66
 80062bc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80062c0:	4620      	mov	r0, r4
 80062c2:	f000 f9eb 	bl	800669c <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 80062c6:	4628      	mov	r0, r5
 80062c8:	f7ff ff8e 	bl	80061e8 <ICS_SwitchOffPWM>
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 80062cc:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
  pHandle->_Super.pFctSetADCSampPointSectX = &ICS_WriteTIMRegisters;
 80062ce:	4a1b      	ldr	r2, [pc, #108]	@ (800633c <ICS_CurrentReadingPolarization+0xd4>)
 80062d0:	61aa      	str	r2, [r5, #24]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 80062d2:	091b      	lsrs	r3, r3, #4
 80062d4:	65eb      	str	r3, [r5, #92]	@ 0x5c
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80062d6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 80062d8:	4919      	ldr	r1, [pc, #100]	@ (8006340 <ICS_CurrentReadingPolarization+0xd8>)
 80062da:	6069      	str	r1, [r5, #4]
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80062dc:	091b      	lsrs	r3, r3, #4
 80062de:	662b      	str	r3, [r5, #96]	@ 0x60
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80062e0:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 80062e2:	f8b5 3064 	ldrh.w	r3, [r5, #100]	@ 0x64
 80062e6:	f022 0208 	bic.w	r2, r2, #8
 80062ea:	61a2      	str	r2, [r4, #24]
 80062ec:	69a2      	ldr	r2, [r4, #24]
 80062ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062f2:	61a2      	str	r2, [r4, #24]
 80062f4:	69e2      	ldr	r2, [r4, #28]
 80062f6:	f022 0208 	bic.w	r2, r2, #8
 80062fa:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80062fc:	6363      	str	r3, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80062fe:	63a3      	str	r3, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006300:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006302:	69a3      	ldr	r3, [r4, #24]
 8006304:	f043 0308 	orr.w	r3, r3, #8
 8006308:	61a3      	str	r3, [r4, #24]
 800630a:	69a3      	ldr	r3, [r4, #24]
 800630c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006310:	61a3      	str	r3, [r4, #24]
 8006312:	69e3      	ldr	r3, [r4, #28]
 8006314:	f043 0308 	orr.w	r3, r3, #8
 8006318:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 800631a:	6a23      	ldr	r3, [r4, #32]
 800631c:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
  pHandle->BrakeActionLock = false;
 8006320:	2200      	movs	r2, #0
 8006322:	f043 0305 	orr.w	r3, r3, #5
 8006326:	6223      	str	r3, [r4, #32]
 8006328:	f885 2069 	strb.w	r2, [r5, #105]	@ 0x69
}
 800632c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800632e:	bf00      	nop
 8006330:	08005f75 	.word	0x08005f75
 8006334:	02000070 	.word	0x02000070
 8006338:	7fffffc0 	.word	0x7fffffc0
 800633c:	08005f4d 	.word	0x08005f4d
 8006340:	08005ec1 	.word	0x08005ec1

08006344 <ICS_TIMx_UP_IRQHandler>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006344:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006346:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
{
 800634a:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
  

  ADCx_1->JSQR = ( uint32_t ) pHandle->pParams_str->ADCConfig1;
 800634c:	681c      	ldr	r4, [r3, #0]
 800634e:	699d      	ldr	r5, [r3, #24]
  ADCx_2->JSQR = ( uint32_t ) pHandle->pParams_str->ADCConfig2;
 8006350:	69db      	ldr	r3, [r3, #28]
  ADCx_1->JSQR = ( uint32_t ) pHandle->pParams_str->ADCConfig1;
 8006352:	64e5      	str	r5, [r4, #76]	@ 0x4c
  ADCx_2->JSQR = ( uint32_t ) pHandle->pParams_str->ADCConfig2;
 8006354:	64cb      	str	r3, [r1, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006356:	6853      	ldr	r3, [r2, #4]
 8006358:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800635c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006360:	f043 0370 	orr.w	r3, r3, #112	@ 0x70

  /* enable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);

  return &( pHandle->_Super.Motor );
}
 8006364:	3046      	adds	r0, #70	@ 0x46
 8006366:	bc30      	pop	{r4, r5}
 8006368:	6053      	str	r3, [r2, #4]
 800636a:	4770      	bx	lr

0800636c <ICS_BRK2_IRQHandler>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * ICS_BRK2_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  if ( pHandle->BrakeActionLock == false )
 800636c:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 8006370:	b923      	cbnz	r3, 800637c <ICS_BRK2_IRQHandler+0x10>
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006372:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006374:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8006378:	2a02      	cmp	r2, #2
 800637a:	d004      	beq.n	8006386 <ICS_BRK2_IRQHandler+0x1a>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
    }
  }
  pHandle->OverCurrentFlag = true;
 800637c:	2301      	movs	r3, #1
 800637e:	f880 3067 	strb.w	r3, [r0, #103]	@ 0x67

  return &( pHandle->_Super.Motor );
}
 8006382:	3046      	adds	r0, #70	@ 0x46
 8006384:	4770      	bx	lr
{
 8006386:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006388:	e9d3 4103 	ldrd	r4, r1, [r3, #12]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800638c:	8c1d      	ldrh	r5, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800638e:	695a      	ldr	r2, [r3, #20]
 8006390:	62a5      	str	r5, [r4, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006392:	8c5c      	ldrh	r4, [r3, #34]	@ 0x22
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006394:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006396:	628c      	str	r4, [r1, #40]	@ 0x28
 8006398:	6293      	str	r3, [r2, #40]	@ 0x28
  pHandle->OverCurrentFlag = true;
 800639a:	2301      	movs	r3, #1
 800639c:	f880 3067 	strb.w	r3, [r0, #103]	@ 0x67
}
 80063a0:	bc30      	pop	{r4, r5}
 80063a2:	3046      	adds	r0, #70	@ 0x46
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop

080063a8 <ICS_BRK_IRQHandler>:
  * @retval none
  */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80063a8:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 80063aa:	6891      	ldr	r1, [r2, #8]
 80063ac:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 80063ae:	4603      	mov	r3, r0
  pHandle->OverVoltageFlag = true;
 80063b0:	f240 1c01 	movw	ip, #257	@ 0x101
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80063b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063b8:	644a      	str	r2, [r1, #68]	@ 0x44
  pHandle->BrakeActionLock = true;

  return &( pHandle->_Super.Motor );
}
 80063ba:	3046      	adds	r0, #70	@ 0x46
  pHandle->OverVoltageFlag = true;
 80063bc:	f8a3 c068 	strh.w	ip, [r3, #104]	@ 0x68
}
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop

080063c4 <ICS_IsOverCurrentOccurred>:
  * @param  pHdl Pointer on the target component instance
  * @retval uint16_t It returns MC_BREAK_IN whether an overcurrent has been
  *                  detected since last method call, MC_NO_FAULTS otherwise.
  */
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
 80063c4:	4603      	mov	r3, r0
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint16_t retVal = MC_NO_FAULTS;

  if ( pHandle->OverVoltageFlag == true )
 80063c6:	f890 0068 	ldrb.w	r0, [r0, #104]	@ 0x68
 80063ca:	b160      	cbz	r0, 80063e6 <ICS_IsOverCurrentOccurred+0x22>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 80063d2:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 80063d4:	2002      	movs	r0, #2
  }

  if ( pHandle->OverCurrentFlag == true )
 80063d6:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 80063da:	b11a      	cbz	r2, 80063e4 <ICS_IsOverCurrentOccurred+0x20>
  {
    retVal |= MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
    retVal |= MC_BREAK_IN;
 80063e2:	4608      	mov	r0, r1
  }

  return retVal;
}
 80063e4:	4770      	bx	lr
 80063e6:	2140      	movs	r1, #64	@ 0x40
 80063e8:	e7f5      	b.n	80063d6 <ICS_IsOverCurrentOccurred+0x12>
 80063ea:	bf00      	nop

080063ec <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80063ec:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 80063ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 80063f2:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 80063f4:	2100      	movs	r1, #0
 80063f6:	f001 fb07 	bl	8007a08 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80063fa:	2300      	movs	r3, #0
 80063fc:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8006400:	bd10      	pop	{r4, pc}
 8006402:	bf00      	nop

08006404 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006404:	f8b0 c100 	ldrh.w	ip, [r0, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8006408:	f10c 0201 	add.w	r2, ip, #1
 800640c:	b292      	uxth	r2, r2
{
 800640e:	b510      	push	{r4, lr}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8006410:	2a80      	cmp	r2, #128	@ 0x80
{
 8006412:	4604      	mov	r4, r0
    pHandle->hNextMeasBufferIndex = 0u;
 8006414:	bf28      	it	cs
 8006416:	2200      	movcs	r2, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006418:	f824 101c 	strh.w	r1, [r4, ip, lsl #1]
{
 800641c:	4608      	mov	r0, r1
 800641e:	f8a4 2100 	strh.w	r2, [r4, #256]	@ 0x100
 8006422:	1ea3      	subs	r3, r4, #2
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8006424:	f8a4 c102 	strh.w	ip, [r4, #258]	@ 0x102
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006428:	f104 0efe 	add.w	lr, r4, #254	@ 0xfe
  int32_t wAux = 0;
 800642c:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800642e:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006432:	459e      	cmp	lr, r3
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006434:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006436:	d1fa      	bne.n	800642e <MPM_CalcElMotorPower+0x2a>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8006438:	2a00      	cmp	r2, #0
 800643a:	bfb8      	it	lt
 800643c:	327f      	addlt	r2, #127	@ 0x7f
 800643e:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8006440:	f8a4 2104 	strh.w	r2, [r4, #260]	@ 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8006444:	bd10      	pop	{r4, pc}
 8006446:	bf00      	nop

08006448 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8006448:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	@ 0x104
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop

08006450 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8006450:	8a03      	ldrh	r3, [r0, #16]
 8006452:	8b42      	ldrh	r2, [r0, #26]
 8006454:	429a      	cmp	r2, r3
 8006456:	d306      	bcc.n	8006466 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8006458:	8b82      	ldrh	r2, [r0, #28]
 800645a:	429a      	cmp	r2, r3
 800645c:	d901      	bls.n	8006462 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 800645e:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8006460:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8006462:	8ac0      	ldrh	r0, [r0, #22]
 8006464:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8006466:	2008      	movs	r0, #8
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop

0800646c <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 800646c:	2300      	movs	r3, #0
 800646e:	8203      	strh	r3, [r0, #16]
}
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop

08006474 <NTC_Init>:
{
 8006474:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006476:	7803      	ldrb	r3, [r0, #0]
{
 8006478:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 800647a:	b123      	cbz	r3, 8006486 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800647c:	8a43      	ldrh	r3, [r0, #18]
 800647e:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8006480:	2200      	movs	r2, #0
 8006482:	82c2      	strh	r2, [r0, #22]
}
 8006484:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8006486:	3004      	adds	r0, #4
 8006488:	f7fb fc9e 	bl	8001dc8 <RCM_RegisterRegConv>
 800648c:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
    NTC_Clear( pHandle );
 8006490:	4620      	mov	r0, r4
 8006492:	f7ff ffeb 	bl	800646c <NTC_Clear>
}
 8006496:	bd10      	pop	{r4, pc}

08006498 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8006498:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800649a:	7803      	ldrb	r3, [r0, #0]
{
 800649c:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 800649e:	b113      	cbz	r3, 80064a6 <NTC_CalcAvTemp+0xe>
 80064a0:	2000      	movs	r0, #0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 80064a2:	82e0      	strh	r0, [r4, #22]
  {
    pHandle->hFaultState = MC_NO_ERROR;
  }

  return ( pHandle->hFaultState );
}
 80064a4:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80064a6:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80064aa:	f7fb fd97 	bl	8001fdc <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80064ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80064b2:	4298      	cmp	r0, r3
 80064b4:	d007      	beq.n	80064c6 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80064b6:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80064b8:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80064ba:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 80064bc:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 80064c0:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 80064c4:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7ff ffc2 	bl	8006450 <NTC_SetFaultState>
 80064cc:	82e0      	strh	r0, [r4, #22]
}
 80064ce:	bd10      	pop	{r4, pc}

080064d0 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80064d0:	7803      	ldrb	r3, [r0, #0]
 80064d2:	b983      	cbnz	r3, 80064f6 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80064d4:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80064d6:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 80064d8:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80064dc:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 80064de:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 80064e0:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bfbc      	itt	lt
 80064e8:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 80064ec:	33ff      	addlt	r3, #255	@ 0xff
 80064ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 80064f2:	b200      	sxth	r0, r0
 80064f4:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 80064f6:	8a80      	ldrh	r0, [r0, #20]
}
 80064f8:	b200      	sxth	r0, r0
 80064fa:	4770      	bx	lr

080064fc <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 80064fc:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80064fe:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006500:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006502:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006504:	8442      	strh	r2, [r0, #34]	@ 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8006506:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8006508:	6283      	str	r3, [r0, #40]	@ 0x28
}
 800650a:	4770      	bx	lr

0800650c <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 800650c:	8081      	strh	r1, [r0, #4]
}
 800650e:	4770      	bx	lr

08006510 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8006510:	80c1      	strh	r1, [r0, #6]
}
 8006512:	4770      	bx	lr

08006514 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8006514:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop

0800651c <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 800651c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop

08006524 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8006524:	6081      	str	r1, [r0, #8]

  return;
}
 8006526:	4770      	bx	lr

08006528 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8006528:	8b00      	ldrh	r0, [r0, #24]
 800652a:	4770      	bx	lr

0800652c <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 800652c:	8b40      	ldrh	r0, [r0, #26]
 800652e:	4770      	bx	lr

08006530 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8006530:	8441      	strh	r1, [r0, #34]	@ 0x22
}
 8006532:	4770      	bx	lr

08006534 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8006534:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop

0800653c <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800653c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8006540:	4603      	mov	r3, r0
 8006542:	b530      	push	{r4, r5, lr}

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8006544:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006548:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800654c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006550:	fb01 f202 	mul.w	r2, r1, r2
  if ( pHandle->hKiGain == 0 )
 8006554:	b17c      	cbz	r4, 8006576 <PI_Controller+0x3a>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006556:	fb04 f101 	mul.w	r1, r4, r1
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800655a:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
    if ( wIntegral_sum_temp < 0 )
 800655e:	eb15 0e01 	adds.w	lr, r5, r1
 8006562:	d41d      	bmi.n	80065a0 <PI_Controller+0x64>
          wIntegral_sum_temp = -INT32_MAX;
 8006564:	420d      	tst	r5, r1
 8006566:	4914      	ldr	r1, [pc, #80]	@ (80065b8 <PI_Controller+0x7c>)
 8006568:	bf48      	it	mi
 800656a:	468e      	movmi	lr, r1
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800656c:	45a6      	cmp	lr, r4
 800656e:	dc02      	bgt.n	8006576 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8006570:	691c      	ldr	r4, [r3, #16]
 8006572:	4574      	cmp	r4, lr
 8006574:	dd1d      	ble.n	80065b2 <PI_Controller+0x76>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8006576:	8b99      	ldrh	r1, [r3, #28]
 8006578:	410a      	asrs	r2, r1
 800657a:	8bd9      	ldrh	r1, [r3, #30]
 800657c:	fa44 f101 	asr.w	r1, r4, r1
 8006580:	440a      	add	r2, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8006582:	4290      	cmp	r0, r2
 8006584:	da03      	bge.n	800658e <PI_Controller+0x52>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8006586:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8006588:	4414      	add	r4, r2
 800658a:	609c      	str	r4, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 800658c:	bd30      	pop	{r4, r5, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 800658e:	4594      	cmp	ip, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
 8006590:	bfc5      	ittet	gt
 8006592:	ebac 0202 	subgt.w	r2, ip, r2
  pHandle->wIntegralTerm += wDischarge;
 8006596:	18a4      	addgt	r4, r4, r2
  return ( ( int16_t )( wOutput_32 ) );
 8006598:	b210      	sxthle	r0, r2
    wOutput_32 = hLowerOutputLimit;
 800659a:	4660      	movgt	r0, ip
  pHandle->wIntegralTerm += wDischarge;
 800659c:	609c      	str	r4, [r3, #8]
}
 800659e:	bd30      	pop	{r4, r5, pc}
      if ( pHandle->wIntegralTerm > 0 )
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	dde3      	ble.n	800656c <PI_Controller+0x30>
        if ( wIntegral_Term > 0 )
 80065a4:	2900      	cmp	r1, #0
 80065a6:	dde1      	ble.n	800656c <PI_Controller+0x30>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80065a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065ac:	428c      	cmp	r4, r1
 80065ae:	d1e2      	bne.n	8006576 <PI_Controller+0x3a>
          wIntegral_sum_temp = INT32_MAX;
 80065b0:	46a6      	mov	lr, r4
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 80065b2:	4674      	mov	r4, lr
 80065b4:	e7df      	b.n	8006576 <PI_Controller+0x3a>
 80065b6:	bf00      	nop
 80065b8:	80000001 	.word	0x80000001

080065bc <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 80065bc:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
{
 80065c0:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80065c2:	89d1      	ldrh	r1, [r2, #14]
 80065c4:	8b14      	ldrh	r4, [r2, #24]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80065c6:	8993      	ldrh	r3, [r2, #12]
{
 80065c8:	4605      	mov	r5, r0
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80065ca:	8ad0      	ldrh	r0, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80065cc:	f8d5 6108 	ldr.w	r6, [r5, #264]	@ 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80065d0:	fb11 f204 	smulbb	r2, r1, r4
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80065d4:	fb13 2400 	smlabb	r4, r3, r0, r2
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80065d8:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
 80065dc:	f7ff fba8 	bl	8005d30 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 80065e0:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80065e2:	490f      	ldr	r1, [pc, #60]	@ (8006620 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80065e4:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 80065e8:	bfb8      	it	lt
 80065ea:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80065ee:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 80065f2:	bfb8      	it	lt
 80065f4:	33ff      	addlt	r3, #255	@ 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80065f6:	fb81 1000 	smull	r1, r0, r1, r0
 80065fa:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
  wAux /= 65536;
 80065fe:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8006600:	fb02 f303 	mul.w	r3, r2, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8006604:	4907      	ldr	r1, [pc, #28]	@ (8006624 <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8006606:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800660a:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 800660c:	fb81 2103 	smull	r2, r1, r1, r3
 8006610:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006612:	4628      	mov	r0, r5
 8006614:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800661c:	f7ff bef2 	b.w	8006404 <MPM_CalcElMotorPower>
 8006620:	1b4e81b5 	.word	0x1b4e81b5
 8006624:	66666667 	.word	0x66666667

08006628 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8006628:	b410      	push	{r4}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 800662a:	4b19      	ldr	r3, [pc, #100]	@ (8006690 <startTimers+0x68>)
 800662c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800662e:	07d2      	lsls	r2, r2, #31
 8006630:	b083      	sub	sp, #12
 8006632:	d416      	bmi.n	8006662 <startTimers+0x3a>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006634:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800663c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800663e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006642:	f002 0201 	and.w	r2, r2, #1
 8006646:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8006648:	9a01      	ldr	r2, [sp, #4]
 800664a:	694a      	ldr	r2, [r1, #20]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8006652:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006654:	f022 0201 	bic.w	r2, r2, #1
 8006658:	659a      	str	r2, [r3, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 800665a:	b003      	add	sp, #12
 800665c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006660:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8006662:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006666:	480b      	ldr	r0, [pc, #44]	@ (8006694 <startTimers+0x6c>)
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	6859      	ldr	r1, [r3, #4]
 800666c:	4c0a      	ldr	r4, [pc, #40]	@ (8006698 <startTimers+0x70>)
 800666e:	4001      	ands	r1, r0
 8006670:	f041 0120 	orr.w	r1, r1, #32
 8006674:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006676:	6959      	ldr	r1, [r3, #20]
 8006678:	f041 0101 	orr.w	r1, r1, #1
 800667c:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800667e:	6859      	ldr	r1, [r3, #4]
 8006680:	4022      	ands	r2, r4
 8006682:	4001      	ands	r1, r0
 8006684:	430a      	orrs	r2, r1
 8006686:	605a      	str	r2, [r3, #4]
}
 8006688:	b003      	add	sp, #12
 800668a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	40021000 	.word	0x40021000
 8006694:	fdffff8f 	.word	0xfdffff8f
 8006698:	02000070 	.word	0x02000070

0800669c <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 800669c:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 800669e:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 80066a0:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 80066a4:	f102 0201 	add.w	r2, r2, #1
 80066a8:	d11b      	bne.n	80066e2 <waitForPolarizationEnd+0x46>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80066aa:	6804      	ldr	r4, [r0, #0]
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 80066ac:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80066ae:	f06f 0602 	mvn.w	r6, #2
 80066b2:	0155      	lsls	r5, r2, #5
 80066b4:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 80066b6:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 80066b8:	f893 c000 	ldrb.w	ip, [r3]
 80066bc:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 80066c0:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 80066c4:	d80c      	bhi.n	80066e0 <waitForPolarizationEnd+0x44>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80066c6:	6904      	ldr	r4, [r0, #16]
 80066c8:	07a4      	lsls	r4, r4, #30
 80066ca:	d5f5      	bpl.n	80066b8 <waitForPolarizationEnd+0x1c>
      hCalibrationPeriodCounter++;
 80066cc:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80066d0:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80066d2:	6106      	str	r6, [r0, #16]
 80066d4:	d8f0      	bhi.n	80066b8 <waitForPolarizationEnd+0x1c>
      {
        if (*cnt < NB_CONVERSIONS)
 80066d6:	781c      	ldrb	r4, [r3, #0]
 80066d8:	2c0f      	cmp	r4, #15
 80066da:	d8ed      	bhi.n	80066b8 <waitForPolarizationEnd+0x1c>
        {
          *SWerror = 1u;
 80066dc:	2301      	movs	r3, #1
 80066de:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 80066e0:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 80066e2:	2c60      	cmp	r4, #96	@ 0x60
 80066e4:	d1e2      	bne.n	80066ac <waitForPolarizationEnd+0x10>
 80066e6:	e7e2      	b.n	80066ae <waitForPolarizationEnd+0x12>

080066e8 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 80066e8:	6843      	ldr	r3, [r0, #4]
 80066ea:	4718      	bx	r3

080066ec <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 80066ec:	b530      	push	{r4, r5, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80066ee:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80066f2:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80066f4:	ea4f 4c21 	mov.w	ip, r1, asr #16
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80066f8:	b20b      	sxth	r3, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80066fa:	fb04 fc0c 	mul.w	ip, r4, ip
 80066fe:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006702:	fb02 f303 	mul.w	r3, r2, r3

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8006706:	eb03 024c 	add.w	r2, r3, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 800670a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800670e:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006712:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8006716:	1c55      	adds	r5, r2, #1
{
 8006718:	b083      	sub	sp, #12
  {
    if ( wZ < 0 )
    {
      pHandle->Sector = SECTOR_5;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800671a:	ea4f 0494 	mov.w	r4, r4, lsr #2
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800671e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006722:	ea4f 0161 	mov.w	r1, r1, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006726:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  if ( wY < 0 )
 800672a:	db7a      	blt.n	8006822 <PWMC_SetPhaseVoltage+0x136>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800672c:	1c5d      	adds	r5, r3, #1
 800672e:	db57      	blt.n	80067e0 <PWMC_SetPhaseVoltage+0xf4>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006730:	ebb1 010e 	subs.w	r1, r1, lr
 8006734:	bf44      	itt	mi
 8006736:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 800673a:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800673e:	2b00      	cmp	r3, #0
 8006740:	bfbc      	itt	lt
 8006742:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8006746:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800674a:	2a00      	cmp	r2, #0
 800674c:	bfb8      	it	lt
 800674e:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006752:	eb04 41a1 	add.w	r1, r4, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006756:	bfb8      	it	lt
 8006758:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800675c:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006760:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhB;
 8006764:	fa1f fe83 	uxth.w	lr, r3
      pHandle->midDuty = wTimePhA;
 8006768:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhC;
 800676c:	b294      	uxth	r4, r2
 800676e:	2501      	movs	r5, #1
        pHandle->highDuty = wTimePhA;
 8006770:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8006774:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
        pHandle->Sector = SECTOR_4;
 8006778:	f880 503a 	strb.w	r5, [r0, #58]	@ 0x3a
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 800677c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8006780:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8006784:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006788:	b289      	uxth	r1, r1
 800678a:	b29b      	uxth	r3, r3
 800678c:	b292      	uxth	r2, r2
  if ( pHandle->DTTest == 1u )
 800678e:	2c01      	cmp	r4, #1
        pHandle->lowDuty = wTimePhC;
 8006790:	f8a0 e03c 	strh.w	lr, [r0, #60]	@ 0x3c
        pHandle->midDuty = wTimePhB;
 8006794:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8006798:	8641      	strh	r1, [r0, #50]	@ 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 800679a:	8683      	strh	r3, [r0, #52]	@ 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 800679c:	86c2      	strh	r2, [r0, #54]	@ 0x36
  if ( pHandle->DTTest == 1u )
 800679e:	d11a      	bne.n	80067d6 <PWMC_SetPhaseVoltage+0xea>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 80067a0:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	@ 0x48
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 80067a4:	f8b0 4054 	ldrh.w	r4, [r0, #84]	@ 0x54
    if ( pHandle->Ia > 0 )
 80067a8:	2d00      	cmp	r5, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 80067aa:	bfcc      	ite	gt
 80067ac:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 80067ae:	1b09      	suble	r1, r1, r4
 80067b0:	b289      	uxth	r1, r1
 80067b2:	8641      	strh	r1, [r0, #50]	@ 0x32
    }

    if ( pHandle->Ib > 0 )
 80067b4:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	@ 0x4a
 80067b8:	2900      	cmp	r1, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 80067ba:	f9b0 104c 	ldrsh.w	r1, [r0, #76]	@ 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 80067be:	bfcc      	ite	gt
 80067c0:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80067c2:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 80067c4:	2900      	cmp	r1, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80067c6:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 80067c8:	bfcc      	ite	gt
 80067ca:	18a4      	addgt	r4, r4, r2
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80067cc:	1b12      	suble	r2, r2, r4
 80067ce:	8683      	strh	r3, [r0, #52]	@ 0x34
      pHandle->CntPhC += pHandle->DTCompCnt;
 80067d0:	bfcc      	ite	gt
 80067d2:	86c4      	strhgt	r4, [r0, #54]	@ 0x36
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80067d4:	86c2      	strhle	r2, [r0, #54]	@ 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80067d6:	6983      	ldr	r3, [r0, #24]
}
 80067d8:	b003      	add	sp, #12
 80067da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80067de:	4718      	bx	r3
      if ( wX <= 0 )
 80067e0:	f1bc 0f00 	cmp.w	ip, #0
 80067e4:	dd3d      	ble.n	8006862 <PWMC_SetPhaseVoltage+0x176>
        wTimePhB = wTimePhA + wZ / 131072;
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bfb8      	it	lt
 80067ea:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80067ee:	ebac 0e0e 	sub.w	lr, ip, lr
        wTimePhB = wTimePhA + wZ / 131072;
 80067f2:	bfb8      	it	lt
 80067f4:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 80067f8:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80067fc:	eb04 41ae 	add.w	r1, r4, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006800:	bfb8      	it	lt
 8006802:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006806:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800680a:	bfb8      	it	lt
 800680c:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8006810:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhA;
 8006814:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhB;
 8006818:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhC;
 800681c:	b294      	uxth	r4, r2
 800681e:	2500      	movs	r5, #0
 8006820:	e7a6      	b.n	8006770 <PWMC_SetPhaseVoltage+0x84>
    if ( wZ < 0 )
 8006822:	1c5d      	adds	r5, r3, #1
 8006824:	db5d      	blt.n	80068e2 <PWMC_SetPhaseVoltage+0x1f6>
      if ( wX <= 0 )
 8006826:	f1bc 0f00 	cmp.w	ip, #0
 800682a:	dd38      	ble.n	800689e <PWMC_SetPhaseVoltage+0x1b2>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800682c:	ebb1 010c 	subs.w	r1, r1, ip
 8006830:	bf44      	itt	mi
 8006832:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8006836:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800683a:	2a00      	cmp	r2, #0
 800683c:	bfb8      	it	lt
 800683e:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006842:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8006846:	bfb8      	it	lt
 8006848:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
 800684c:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006850:	eb02 436c 	add.w	r3, r2, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8006854:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = wTimePhC;
 8006858:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhA;
 800685c:	b28c      	uxth	r4, r1
 800685e:	2502      	movs	r5, #2
 8006860:	e786      	b.n	8006770 <PWMC_SetPhaseVoltage+0x84>
        wTimePhC = wTimePhA - wY / 131072;
 8006862:	2a00      	cmp	r2, #0
 8006864:	bfb8      	it	lt
 8006866:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800686a:	eba1 010c 	sub.w	r1, r1, ip
        wTimePhC = wTimePhA - wY / 131072;
 800686e:	bfb8      	it	lt
 8006870:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhC + wX / 131072;
 8006874:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006878:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800687c:	bfb8      	it	lt
 800687e:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8006882:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006886:	bfb8      	it	lt
 8006888:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 800688c:	eb02 4363 	add.w	r3, r2, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8006890:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhC;
 8006894:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhB;
 8006898:	b29c      	uxth	r4, r3
 800689a:	2505      	movs	r5, #5
 800689c:	e768      	b.n	8006770 <PWMC_SetPhaseVoltage+0x84>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800689e:	ebbc 0e0e 	subs.w	lr, ip, lr
 80068a2:	bf44      	itt	mi
 80068a4:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 80068a8:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bfbc      	itt	lt
 80068b0:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80068b4:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 80068b8:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80068bc:	eb04 41ae 	add.w	r1, r4, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80068c0:	bfb8      	it	lt
 80068c2:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80068c6:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80068ca:	bfb8      	it	lt
 80068cc:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 80068d0:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhC;
 80068d4:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = wTimePhB;
 80068d8:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhA;
 80068dc:	b28c      	uxth	r4, r1
 80068de:	2503      	movs	r5, #3
 80068e0:	e746      	b.n	8006770 <PWMC_SetPhaseVoltage+0x84>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80068e2:	ebb1 010e 	subs.w	r1, r1, lr
 80068e6:	bf44      	itt	mi
 80068e8:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 80068ec:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bfbc      	itt	lt
 80068f4:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80068f8:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80068fc:	2a00      	cmp	r2, #0
 80068fe:	bfb8      	it	lt
 8006900:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006904:	eb04 41a1 	add.w	r1, r4, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006908:	bfb8      	it	lt
 800690a:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800690e:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006912:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhC;
 8006916:	fa1f fe82 	uxth.w	lr, r2
      pHandle->midDuty = wTimePhA;
 800691a:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhB;
 800691e:	b29c      	uxth	r4, r3
 8006920:	2504      	movs	r5, #4
 8006922:	e725      	b.n	8006770 <PWMC_SetPhaseVoltage+0x84>

08006924 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8006924:	6883      	ldr	r3, [r0, #8]
 8006926:	4718      	bx	r3

08006928 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8006928:	b510      	push	{r4, lr}
 800692a:	4604      	mov	r4, r0
  bool retVal = false;
  if ( action == CRC_START )
 800692c:	b179      	cbz	r1, 800694e <PWMC_CurrentReadingCalibr+0x26>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 800692e:	2901      	cmp	r1, #1
 8006930:	d001      	beq.n	8006936 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8006932:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8006934:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8006936:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 800693a:	b19b      	cbz	r3, 8006964 <PWMC_CurrentReadingCalibr+0x3c>
      pHandle->OffCalibrWaitTimeCounter--;
 800693c:	3b01      	subs	r3, #1
 800693e:	b29b      	uxth	r3, r3
 8006940:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f4      	bne.n	8006932 <PWMC_CurrentReadingCalibr+0xa>
        pHandle->pFctCurrReadingCalib( pHandle );
 8006948:	6903      	ldr	r3, [r0, #16]
 800694a:	4798      	blx	r3
        retVal = true;
 800694c:	e00a      	b.n	8006964 <PWMC_CurrentReadingCalibr+0x3c>
    PWMC_SwitchOffPWM( pHandle );
 800694e:	f7ff ffe9 	bl	8006924 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8006952:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8006956:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e9      	bne.n	8006932 <PWMC_CurrentReadingCalibr+0xa>
      pHandle->pFctCurrReadingCalib( pHandle );
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	4620      	mov	r0, r4
 8006962:	4798      	blx	r3
      retVal = true;
 8006964:	2001      	movs	r0, #1
}
 8006966:	bd10      	pop	{r4, pc}

08006968 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8006968:	69c3      	ldr	r3, [r0, #28]
 800696a:	4718      	bx	r3

0800696c <REMNG_Init>:
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
  pHandle->TargetFinal = 0;
 800696c:	2300      	movs	r3, #0
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800696e:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8006970:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8006974:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8006978:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800697a:	4770      	bx	lr

0800697c <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 800697c:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006980:	2901      	cmp	r1, #1
{
 8006982:	b410      	push	{r4}
 8006984:	4603      	mov	r3, r0
    pHandle->RampRemainingStep --;
  }
  else if ( pHandle->RampRemainingStep == 1u )
  {
    /* Set the backup value of TargetFinal. */
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006986:	6944      	ldr	r4, [r0, #20]
  if ( pHandle->RampRemainingStep > 1u )
 8006988:	d909      	bls.n	800699e <REMNG_Calc+0x22>
    current_ref += pHandle->IncDecAmount;
 800698a:	6900      	ldr	r0, [r0, #16]
    pHandle->RampRemainingStep --;
 800698c:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 800698e:	4402      	add	r2, r0
    pHandle->RampRemainingStep --;
 8006990:	60d9      	str	r1, [r3, #12]
  pHandle->Ext = current_ref;

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8006992:	fb92 f0f4 	sdiv	r0, r2, r4
  pHandle->Ext = current_ref;
 8006996:	609a      	str	r2, [r3, #8]
#endif

  return ret_val;
}
 8006998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800699c:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 800699e:	d005      	beq.n	80069ac <REMNG_Calc+0x30>
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 80069a0:	fb92 f0f4 	sdiv	r0, r2, r4
}
 80069a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->Ext = current_ref;
 80069a8:	609a      	str	r2, [r3, #8]
}
 80069aa:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80069ac:	6840      	ldr	r0, [r0, #4]
 80069ae:	fb04 f200 	mul.w	r2, r4, r0
    pHandle->RampRemainingStep = 0u;
 80069b2:	2100      	movs	r1, #0
}
 80069b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0u;
 80069b8:	60d9      	str	r1, [r3, #12]
  pHandle->Ext = current_ref;
 80069ba:	609a      	str	r2, [r3, #8]
}
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop

080069c0 <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 80069c0:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 80069c2:	fab0 f080 	clz	r0, r0
 80069c6:	0940      	lsrs	r0, r0, #5
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop

080069cc <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 80069cc:	2800      	cmp	r0, #0
 80069ce:	bfb8      	it	lt
 80069d0:	4240      	neglt	r0, r0
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
    if ( TargetAbs >= limit )
 80069d2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80069d6:	d213      	bcs.n	8006a00 <getScalingFactor+0x34>
 80069d8:	2302      	movs	r3, #2
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 80069da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80069de:	e001      	b.n	80069e4 <getScalingFactor+0x18>
  for ( i = 1u; i < 32u; i++ )
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	d00a      	beq.n	80069fa <getScalingFactor+0x2e>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 80069e4:	fa2c f203 	lsr.w	r2, ip, r3
    if ( TargetAbs >= limit )
 80069e8:	4290      	cmp	r0, r2
 80069ea:	4619      	mov	r1, r3
 80069ec:	f103 0301 	add.w	r3, r3, #1
 80069f0:	d3f6      	bcc.n	80069e0 <getScalingFactor+0x14>
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 80069f2:	3901      	subs	r1, #1
 80069f4:	2001      	movs	r0, #1
 80069f6:	4088      	lsls	r0, r1
 80069f8:	4770      	bx	lr
 80069fa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80069fe:	4770      	bx	lr
    if ( TargetAbs >= limit )
 8006a00:	2001      	movs	r0, #1
}
 8006a02:	4770      	bx	lr

08006a04 <REMNG_ExecRamp>:
{
 8006a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a08:	4604      	mov	r4, r0
 8006a0a:	460e      	mov	r6, r1
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8006a0c:	6880      	ldr	r0, [r0, #8]
 8006a0e:	6963      	ldr	r3, [r4, #20]
  if ( Durationms == 0u )
 8006a10:	4615      	mov	r5, r2
 8006a12:	b962      	cbnz	r2, 8006a2e <REMNG_ExecRamp+0x2a>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8006a14:	4608      	mov	r0, r1
 8006a16:	f7ff ffd9 	bl	80069cc <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006a1a:	fb00 f606 	mul.w	r6, r0, r6
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8006a1e:	6160      	str	r0, [r4, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006a20:	4628      	mov	r0, r5
    pHandle->IncDecAmount = 0;
 8006a22:	e9c4 5003 	strd	r5, r0, [r4, #12]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006a26:	60a6      	str	r6, [r4, #8]
}
 8006a28:	2001      	movs	r0, #1
 8006a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8006a2e:	fb90 f8f3 	sdiv	r8, r0, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8006a32:	eba1 0708 	sub.w	r7, r1, r8
 8006a36:	4638      	mov	r0, r7
 8006a38:	f7ff ffc8 	bl	80069cc <getScalingFactor>
 8006a3c:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8006a3e:	4640      	mov	r0, r8
 8006a40:	f7ff ffc4 	bl	80069cc <getScalingFactor>
 8006a44:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8006a46:	4630      	mov	r0, r6
 8006a48:	f7ff ffc0 	bl	80069cc <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8006a4c:	45ca      	cmp	sl, r9
 8006a4e:	d318      	bcc.n	8006a82 <REMNG_ExecRamp+0x7e>
      if ( wScalingFactor2 < wScalingFactor3 )
 8006a50:	4548      	cmp	r0, r9
 8006a52:	bf28      	it	cs
 8006a54:	4648      	movcs	r0, r9
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8006a56:	fb08 f300 	mul.w	r3, r8, r0
 8006a5a:	60a3      	str	r3, [r4, #8]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8006a5c:	6823      	ldr	r3, [r4, #0]
    aux /= 1000u;
 8006a5e:	4a0b      	ldr	r2, [pc, #44]	@ (8006a8c <REMNG_ExecRamp+0x88>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8006a60:	6160      	str	r0, [r4, #20]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8006a62:	fb05 f303 	mul.w	r3, r5, r3
    aux /= 1000u;
 8006a66:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6a:	099b      	lsrs	r3, r3, #6
    pHandle->RampRemainingStep++;
 8006a6c:	1c5d      	adds	r5, r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8006a6e:	fb07 f000 	mul.w	r0, r7, r0
    pHandle->TargetFinal = TargetFinal;
 8006a72:	6066      	str	r6, [r4, #4]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8006a74:	fb90 f0f5 	sdiv	r0, r0, r5
    pHandle->IncDecAmount = 0;
 8006a78:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ( wScalingFactor < wScalingFactor3 )
 8006a82:	4550      	cmp	r0, sl
 8006a84:	bf28      	it	cs
 8006a86:	4650      	movcs	r0, sl
 8006a88:	e7e5      	b.n	8006a56 <REMNG_ExecRamp+0x52>
 8006a8a:	bf00      	nop
 8006a8c:	10624dd3 	.word	0x10624dd3

08006a90 <RUC_Init>:
__weak void RUC_Init( RevUpCtrl_Handle_t * pHandle,
               SpeednTorqCtrl_Handle_t * pSTC,
               VirtualSpeedSensor_Handle_t * pVSS,
               STO_Handle_t * pSNSL,
               PWMC_Handle_t * pPWM )
{
 8006a90:	b500      	push	{lr}
  RevUpCtrl_PhaseParams_t * pRUCPhaseParams = &pHandle->ParamsData[0];
  uint8_t bPhase = 0u;

  pHandle->pSTC = pSTC;
 8006a92:	6681      	str	r1, [r0, #104]	@ 0x68
  pHandle->OTFSCLowside = false;
  pHandle->EnteredZone1 = false;

  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
  {
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8006a94:	6941      	ldr	r1, [r0, #20]
  pHandle->pSNSL = pSNSL;
 8006a96:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
  pHandle->OTFSCLowside = false;
 8006a9a:	f04f 0c00 	mov.w	ip, #0
  pHandle->pPWM = pPWM;
 8006a9e:	9b01      	ldr	r3, [sp, #4]
  pHandle->OTFSCLowside = false;
 8006aa0:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
  pHandle->pPWM = pPWM;
 8006aa4:	6743      	str	r3, [r0, #116]	@ 0x74
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8006aa6:	b1f9      	cbz	r1, 8006ae8 <RUC_Init+0x58>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8006aa8:	688b      	ldr	r3, [r1, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8006aaa:	b313      	cbz	r3, 8006af2 <RUC_Init+0x62>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8006aac:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8006aae:	b31b      	cbz	r3, 8006af8 <RUC_Init+0x68>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8006ab0:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8006ab2:	b323      	cbz	r3, 8006afe <RUC_Init+0x6e>
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f04f 0c05 	mov.w	ip, #5
 8006aba:	2204      	movs	r2, #4
 8006abc:	b1b3      	cbz	r3, 8006aec <RUC_Init+0x5c>
  }
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

  pHandle->bPhaseNbr = bPhase;

  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8006abe:	8803      	ldrh	r3, [r0, #0]
 8006ac0:	4910      	ldr	r1, [pc, #64]	@ (8006b04 <RUC_Init+0x74>)
 8006ac2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8006ac6:	fb0e f303 	mul.w	r3, lr, r3
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006aca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8006ace:	fba1 1303 	umull	r1, r3, r1, r3
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006ad2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006ad6:	2100      	movs	r1, #0
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8006ad8:	099b      	lsrs	r3, r3, #6
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006ada:	6151      	str	r1, [r2, #20]
  pHandle->bPhaseNbr = bPhase;
 8006adc:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8006ae0:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56

}
 8006ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    bPhase++;
 8006ae8:	f04f 0c01 	mov.w	ip, #1
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006aec:	f10c 32ff 	add.w	r2, ip, #4294967295
 8006af0:	e7e5      	b.n	8006abe <RUC_Init+0x2e>
    bPhase++;
 8006af2:	f04f 0c02 	mov.w	ip, #2
 8006af6:	e7f9      	b.n	8006aec <RUC_Init+0x5c>
 8006af8:	f04f 0c03 	mov.w	ip, #3
 8006afc:	e7f6      	b.n	8006aec <RUC_Init+0x5c>
 8006afe:	f04f 0c04 	mov.w	ip, #4
 8006b02:	e7f3      	b.n	8006aec <RUC_Init+0x5c>
 8006b04:	10624dd3 	.word	0x10624dd3

08006b08 <RUC_Clear>:
  * @param  hMotorDirection: rotor rotation direction.
  *         This parameter must be -1 or +1.
  *  @retval none
  */
__weak void RUC_Clear( RevUpCtrl_Handle_t * pHandle, int16_t hMotorDirection )
{
 8006b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0c:	4604      	mov	r4, r0

  pHandle->hDirection = hMotorDirection;
  pHandle->EnteredZone1 = false;

  /*Initializes the rev up stages counter.*/
  pHandle->bStageCnt = 0u;
 8006b0e:	2600      	movs	r6, #0
  VirtualSpeedSensor_Handle_t * pVSS = pHandle->pVSS;
 8006b10:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
  pHandle->bStageCnt = 0u;
 8006b12:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
  pHandle->bOTFRelCounter = 0u;
 8006b16:	f880 6053 	strb.w	r6, [r0, #83]	@ 0x53
  SpeednTorqCtrl_Handle_t * pSTC = pHandle->pSTC;
 8006b1a:	f8d4 8068 	ldr.w	r8, [r4, #104]	@ 0x68
  pHandle->hDirection = hMotorDirection;
 8006b1e:	80c1      	strh	r1, [r0, #6]
  pHandle->OTFSCLowside = false;
 8006b20:	f8a0 6054 	strh.w	r6, [r0, #84]	@ 0x54

  /* Calls the clear method of VSS.*/
  VSS_Clear( pVSS );
 8006b24:	4638      	mov	r0, r7
{
 8006b26:	460d      	mov	r5, r1
  VSS_Clear( pVSS );
 8006b28:	f000 fe70 	bl	800780c <VSS_Clear>

  /* Sets the STC in torque mode.*/
  STC_SetControlMode( pSTC, STC_TORQUE_MODE );
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4640      	mov	r0, r8
 8006b30:	f000 f91c 	bl	8006d6c <STC_SetControlMode>

  /* Sets the mechanical starting angle of VSS.*/
  VSS_SetMecAngle( pVSS, pHandle->hStartingMecAngle * hMotorDirection );
 8006b34:	8861      	ldrh	r1, [r4, #2]
 8006b36:	b2ad      	uxth	r5, r5
 8006b38:	fb11 f105 	smulbb	r1, r1, r5
 8006b3c:	b209      	sxth	r1, r1
 8006b3e:	4638      	mov	r0, r7
 8006b40:	f000 ff12 	bl	8007968 <VSS_SetMecAngle>

  /* Sets to zero the starting torque of STC */
  STC_ExecRamp( pSTC, 0, 0u );
 8006b44:	4632      	mov	r2, r6
 8006b46:	4631      	mov	r1, r6
 8006b48:	4640      	mov	r0, r8
 8006b4a:	f000 f913 	bl	8006d74 <STC_ExecRamp>

  /* Gives the first command to STC and VSS.*/
  STC_ExecRamp( pSTC, pPhaseParams->hFinalTorque * hMotorDirection,
 8006b4e:	8a21      	ldrh	r1, [r4, #16]
 8006b50:	89a2      	ldrh	r2, [r4, #12]
 8006b52:	fb11 f105 	smulbb	r1, r1, r5
 8006b56:	b209      	sxth	r1, r1
 8006b58:	4640      	mov	r0, r8
 8006b5a:	f000 f90b 	bl	8006d74 <STC_ExecRamp>
                ( uint32_t )( pPhaseParams->hDurationms ) );

  VSS_SetMecAcceleration( pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection,
 8006b5e:	89e1      	ldrh	r1, [r4, #14]
 8006b60:	89a2      	ldrh	r2, [r4, #12]
 8006b62:	fb11 f105 	smulbb	r1, r1, r5
 8006b66:	b209      	sxth	r1, r1
 8006b68:	4638      	mov	r0, r7
 8006b6a:	f000 ff05 	bl	8007978 <VSS_SetMecAcceleration>
                          pPhaseParams->hDurationms );

  /* Compute hPhaseRemainingTicks.*/
  pHandle->hPhaseRemainingTicks =
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8006b70:	8821      	ldrh	r1, [r4, #0]
 8006b72:	4a07      	ldr	r2, [pc, #28]	@ (8006b90 <RUC_Clear+0x88>)

  /*Set the next phases parameter pointer.*/
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;

  /*Timeout counter for PLL reset during OTF.*/
  pHandle->bResetPLLCnt = 0u;
 8006b74:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8006b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b80:	099b      	lsrs	r3, r3, #6
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;
 8006b82:	6962      	ldr	r2, [r4, #20]
 8006b84:	60a2      	str	r2, [r4, #8]
  pHandle->hPhaseRemainingTicks++;
 8006b86:	3301      	adds	r3, #1
 8006b88:	80a3      	strh	r3, [r4, #4]
}
 8006b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b8e:	bf00      	nop
 8006b90:	10624dd3 	.word	0x10624dd3

08006b94 <RUC_Exec>:
  */
__weak bool RUC_Exec( RevUpCtrl_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hPhaseRemainingTicks > 0u )
 8006b94:	8883      	ldrh	r3, [r0, #4]
{
 8006b96:	b510      	push	{r4, lr}
 8006b98:	4604      	mov	r4, r0
  if ( pHandle->hPhaseRemainingTicks > 0u )
 8006b9a:	bb4b      	cbnz	r3, 8006bf0 <RUC_Exec+0x5c>

  } /* hPhaseRemainingTicks > 0 */

  if ( pHandle->hPhaseRemainingTicks == 0u )
  {
    if ( pHandle->pCurrentPhaseParams != MC_NULL )
 8006b9c:	68a0      	ldr	r0, [r4, #8]
 8006b9e:	b330      	cbz	r0, 8006bee <RUC_Exec+0x5a>
    {

      /* If it becomes zero the current phase has been completed.*/
      /* Gives the next command to STC and VSS.*/
      STC_ExecRamp( pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8006ba0:	8881      	ldrh	r1, [r0, #4]
 8006ba2:	88e3      	ldrh	r3, [r4, #6]
 8006ba4:	8802      	ldrh	r2, [r0, #0]
 8006ba6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8006ba8:	fb11 f103 	smulbb	r1, r1, r3
 8006bac:	b209      	sxth	r1, r1
 8006bae:	f000 f8e1 	bl	8006d74 <STC_ExecRamp>
                    ( uint32_t )( pHandle->pCurrentPhaseParams->hDurationms ) );

      VSS_SetMecAcceleration( pHandle->pVSS,
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8006bb2:	68a3      	ldr	r3, [r4, #8]
 8006bb4:	88e0      	ldrh	r0, [r4, #6]
 8006bb6:	8859      	ldrh	r1, [r3, #2]
      VSS_SetMecAcceleration( pHandle->pVSS,
 8006bb8:	881a      	ldrh	r2, [r3, #0]
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8006bba:	fb11 f100 	smulbb	r1, r1, r0
      VSS_SetMecAcceleration( pHandle->pVSS,
 8006bbe:	b209      	sxth	r1, r1
 8006bc0:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8006bc2:	f000 fed9 	bl	8007978 <VSS_SetMecAcceleration>
                              pHandle->pCurrentPhaseParams->hDurationms );

      /* Compute hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks =
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8006bc6:	68a2      	ldr	r2, [r4, #8]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8006bc8:	f8b4 c000 	ldrh.w	ip, [r4]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8006bcc:	8813      	ldrh	r3, [r2, #0]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8006bce:	490c      	ldr	r1, [pc, #48]	@ (8006c00 <RUC_Exec+0x6c>)
      pHandle->hPhaseRemainingTicks++;

      /*Set the next phases parameter pointer.*/
      pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext;
 8006bd0:	6890      	ldr	r0, [r2, #8]

      /*Increases the rev up stages counter.*/
      pHandle->bStageCnt++;
 8006bd2:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
      pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext;
 8006bd6:	60a0      	str	r0, [r4, #8]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8006bd8:	fb0c f303 	mul.w	r3, ip, r3
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8006bdc:	fba1 1303 	umull	r1, r3, r1, r3
 8006be0:	099b      	lsrs	r3, r3, #6
      pHandle->hPhaseRemainingTicks++;
 8006be2:	3301      	adds	r3, #1
      pHandle->bStageCnt++;
 8006be4:	3201      	adds	r2, #1
      pHandle->hPhaseRemainingTicks++;
 8006be6:	80a3      	strh	r3, [r4, #4]
      pHandle->bStageCnt++;
 8006be8:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 8006bec:	2001      	movs	r0, #1
    {
      retVal = false;
    }
  }
  return retVal;
}
 8006bee:	bd10      	pop	{r4, pc}
    pHandle->hPhaseRemainingTicks--;
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	8083      	strh	r3, [r0, #4]
  if ( pHandle->hPhaseRemainingTicks == 0u )
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0d0      	beq.n	8006b9c <RUC_Exec+0x8>
  bool retVal = true;
 8006bfa:	2001      	movs	r0, #1
}
 8006bfc:	bd10      	pop	{r4, pc}
 8006bfe:	bf00      	nop
 8006c00:	10624dd3 	.word	0x10624dd3

08006c04 <RUC_FirstAccelerationStageReached>:
  */
__weak bool RUC_FirstAccelerationStageReached( RevUpCtrl_Handle_t * pHandle )
{
  bool retVal = false;

  if ( pHandle->bStageCnt >= pHandle->bFirstAccelerationStage )
 8006c04:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8006c08:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
  {
    retVal = true;
  }
  return retVal;
}
 8006c0c:	4282      	cmp	r2, r0
 8006c0e:	bf34      	ite	cc
 8006c10:	2000      	movcc	r0, #0
 8006c12:	2001      	movcs	r0, #1
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop

08006c18 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8006c18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006c1c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006c20:	8182      	strh	r2, [r0, #12]
}
 8006c22:	4770      	bx	lr

08006c24 <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006c24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006c28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006c2c:	81c2      	strh	r2, [r0, #14]
}
 8006c2e:	4770      	bx	lr

08006c30 <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 8006c30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006c34:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006c38:	8202      	strh	r2, [r0, #16]
}
 8006c3a:	4770      	bx	lr

08006c3c <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 8006c3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006c40:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8006c44:	8980      	ldrh	r0, [r0, #12]
 8006c46:	4770      	bx	lr

08006c48 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8006c48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006c4c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8006c50:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop

08006c58 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8006c58:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006c5c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8006c60:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop

08006c68 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8006c68:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop

08006c70 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8006c70:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop

08006c78 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8006c78:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop

08006c80 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8006c80:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop

08006c88 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8006c88:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	b510      	push	{r4, lr}
  {
    hAux = -( *pMecSpeedUnit );
 8006c90:	fa1f f18c 	uxth.w	r1, ip
  if ( *pMecSpeedUnit < 0 )
 8006c94:	f1bc 0f00 	cmp.w	ip, #0
    hAux = -( *pMecSpeedUnit );
 8006c98:	bfb8      	it	lt
 8006c9a:	4249      	neglt	r1, r1
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006c9c:	f8b3 c016 	ldrh.w	ip, [r3, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006ca0:	78c0      	ldrb	r0, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006ca2:	781a      	ldrb	r2, [r3, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006ca4:	8a9c      	ldrh	r4, [r3, #20]
    hAux = -( *pMecSpeedUnit );
 8006ca6:	bfb8      	it	lt
 8006ca8:	b289      	uxthlt	r1, r1
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006caa:	458c      	cmp	ip, r1
 8006cac:	d818      	bhi.n	8006ce0 <SPD_IsMecSpeedReliable+0x58>
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8006cae:	f9b3 e012 	ldrsh.w	lr, [r3, #18]
  {
    hAux = -( pHandle->hMecAccelUnitP );
 8006cb2:	fa1f fc8e 	uxth.w	ip, lr
  if ( pHandle->hMecAccelUnitP < 0 )
 8006cb6:	f1be 0f00 	cmp.w	lr, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8006cba:	bfb8      	it	lt
 8006cbc:	f1cc 0c00 	rsblt	ip, ip, #0
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006cc0:	f8b3 e018 	ldrh.w	lr, [r3, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 8006cc4:	bfb8      	it	lt
 8006cc6:	fa1f fc8c 	uxthlt.w	ip, ip
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006cca:	45e6      	cmp	lr, ip
 8006ccc:	d308      	bcc.n	8006ce0 <SPD_IsMecSpeedReliable+0x58>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8006cce:	428c      	cmp	r4, r1
 8006cd0:	d306      	bcc.n	8006ce0 <SPD_IsMecSpeedReliable+0x58>
      bSpeedErrorNumber++;
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8006cd2:	4290      	cmp	r0, r2
 8006cd4:	d809      	bhi.n	8006cea <SPD_IsMecSpeedReliable+0x62>
    {
      bSpeedErrorNumber = 0u;
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8006cd6:	1a10      	subs	r0, r2, r0
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006cd8:	701a      	strb	r2, [r3, #0]
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8006cda:	bf18      	it	ne
 8006cdc:	2001      	movne	r0, #1

  return ( SpeedSensorReliability );
}
 8006cde:	bd10      	pop	{r4, pc}
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8006ce0:	4290      	cmp	r0, r2
 8006ce2:	d9f8      	bls.n	8006cd6 <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber++;
 8006ce4:	3201      	adds	r2, #1
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	e7f5      	b.n	8006cd6 <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber = 0u;
 8006cea:	2200      	movs	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006cec:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8006cee:	2001      	movs	r0, #1
}
 8006cf0:	bd10      	pop	{r4, pc}
 8006cf2:	bf00      	nop

08006cf4 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8006cf4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006cf8:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
  wAux *= INT16_MAX;
 8006cfc:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006d00:	fb93 f0f2 	sdiv	r0, r3, r2
  return ( int16_t )wAux;
}
 8006d04:	b200      	sxth	r0, r0
 8006d06:	4770      	bx	lr

08006d08 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8006d08:	b410      	push	{r4}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006d0a:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
  pHandle->PISpeed = pPI;
 8006d0e:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006d10:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
  pHandle->Mode = pHandle->ModeDefault;
 8006d14:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 8006d18:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8006d1a:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006d1c:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006d20:	0409      	lsls	r1, r1, #16
 8006d22:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->SPD = SPD_Handle;
 8006d26:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8006d28:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->TargetFinal = 0;
 8006d2c:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8006d2e:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006d30:	6183      	str	r3, [r0, #24]
}
 8006d32:	4770      	bx	lr

08006d34 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8006d34:	6141      	str	r1, [r0, #20]
}
 8006d36:	4770      	bx	lr

08006d38 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8006d38:	6940      	ldr	r0, [r0, #20]
 8006d3a:	4770      	bx	lr

08006d3c <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006d3c:	7803      	ldrb	r3, [r0, #0]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d000      	beq.n	8006d44 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8006d42:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8006d44:	6900      	ldr	r0, [r0, #16]
 8006d46:	2100      	movs	r1, #0
 8006d48:	f7ff bbec 	b.w	8006524 <PID_SetIntegralTerm>

08006d4c <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8006d4c:	6840      	ldr	r0, [r0, #4]
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	bfbc      	itt	lt
 8006d52:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8006d56:	30ff      	addlt	r0, #255	@ 0xff
}
 8006d58:	1400      	asrs	r0, r0, #16
 8006d5a:	4770      	bx	lr

08006d5c <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8006d5c:	6880      	ldr	r0, [r0, #8]
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	bfbc      	itt	lt
 8006d62:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8006d66:	30ff      	addlt	r0, #255	@ 0xff
}
 8006d68:	1400      	asrs	r0, r0, #16
 8006d6a:	4770      	bx	lr

08006d6c <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006d6c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8006d6e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006d70:	60c3      	str	r3, [r0, #12]
}
 8006d72:	4770      	bx	lr

08006d74 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8006d74:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006d76:	7803      	ldrb	r3, [r0, #0]
{
 8006d78:	4604      	mov	r4, r0
 8006d7a:	460d      	mov	r5, r1
 8006d7c:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006d7e:	b323      	cbz	r3, 8006dca <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006d80:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006d82:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006d84:	2800      	cmp	r0, #0
 8006d86:	bfbc      	itt	lt
 8006d88:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8006d8c:	30ff      	addlt	r0, #255	@ 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006d8e:	428b      	cmp	r3, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006d90:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006d94:	da01      	bge.n	8006d9a <STC_ExecRamp+0x26>
{
 8006d96:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8006d98:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8006d9a:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 8006d9e:	428b      	cmp	r3, r1
 8006da0:	dcf9      	bgt.n	8006d96 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8006da2:	8c23      	ldrh	r3, [r4, #32]
 8006da4:	428b      	cmp	r3, r1
 8006da6:	dd03      	ble.n	8006db0 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8006da8:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 8006dac:	428b      	cmp	r3, r1
 8006dae:	dbf2      	blt.n	8006d96 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8006db0:	b9ae      	cbnz	r6, 8006dde <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006db2:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006db4:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006db6:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8006db8:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006dbc:	bf0c      	ite	eq
 8006dbe:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8006dc0:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8006dc2:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8006dc4:	61a3      	str	r3, [r4, #24]
{
 8006dc6:	2001      	movs	r0, #1
}
 8006dc8:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8006dca:	f7ff ffc7 	bl	8006d5c <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8006dce:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8006dd0:	42ab      	cmp	r3, r5
 8006dd2:	dbe0      	blt.n	8006d96 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8006dd4:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 8006dd8:	42ab      	cmp	r3, r5
 8006dda:	dcdc      	bgt.n	8006d96 <STC_ExecRamp+0x22>
 8006ddc:	e7e8      	b.n	8006db0 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006dde:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8006de0:	4a07      	ldr	r2, [pc, #28]	@ (8006e00 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 8006de2:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006de4:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8006de8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dec:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8006dee:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8006df0:	1a28      	subs	r0, r5, r0
 8006df2:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 8006df4:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8006df6:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 8006dfa:	61a0      	str	r0, [r4, #24]
 8006dfc:	e7e3      	b.n	8006dc6 <STC_ExecRamp+0x52>
 8006dfe:	bf00      	nop
 8006e00:	10624dd3 	.word	0x10624dd3

08006e04 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006e08:	6183      	str	r3, [r0, #24]
}
 8006e0a:	4770      	bx	lr

08006e0c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006e0c:	b570      	push	{r4, r5, r6, lr}
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006e0e:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006e10:	68c3      	ldr	r3, [r0, #12]
{
 8006e12:	4604      	mov	r4, r0
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006e14:	b96a      	cbnz	r2, 8006e32 <STC_CalcTorqueReference+0x26>
  if ( pHandle->RampRemainingStep > 1u )
 8006e16:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->TorqueRef;
 8006e18:	6886      	ldr	r6, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 8006e1a:	d923      	bls.n	8006e64 <STC_CalcTorqueReference+0x58>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8006e1c:	6982      	ldr	r2, [r0, #24]
 8006e1e:	4416      	add	r6, r2

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8006e20:	3b01      	subs	r3, #1
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8006e22:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8006e24:	60c3      	str	r3, [r0, #12]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8006e26:	4630      	mov	r0, r6
 8006e28:	db20      	blt.n	8006e6c <STC_CalcTorqueReference+0x60>
 8006e2a:	1405      	asrs	r5, r0, #16
 8006e2c:	b228      	sxth	r0, r5
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006e2e:	60a6      	str	r6, [r4, #8]
  }

  return hTorqueReference;
}
 8006e30:	bd70      	pop	{r4, r5, r6, pc}
  if ( pHandle->RampRemainingStep > 1u )
 8006e32:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->SpeedRefUnitExt;
 8006e34:	6846      	ldr	r6, [r0, #4]
  if ( pHandle->RampRemainingStep > 1u )
 8006e36:	d91d      	bls.n	8006e74 <STC_CalcTorqueReference+0x68>
    wCurrentReference += pHandle->IncDecAmount;
 8006e38:	6981      	ldr	r1, [r0, #24]
 8006e3a:	440e      	add	r6, r1
    pHandle->RampRemainingStep--;
 8006e3c:	3b01      	subs	r3, #1
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006e3e:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8006e40:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006e42:	4630      	mov	r0, r6
 8006e44:	db1a      	blt.n	8006e7c <STC_CalcTorqueReference+0x70>
 8006e46:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006e48:	2a01      	cmp	r2, #1
 8006e4a:	d1ef      	bne.n	8006e2c <STC_CalcTorqueReference+0x20>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8006e4c:	6960      	ldr	r0, [r4, #20]
 8006e4e:	f7ff ff13 	bl	8006c78 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8006e52:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8006e54:	b209      	sxth	r1, r1
 8006e56:	6920      	ldr	r0, [r4, #16]
 8006e58:	f7ff fb70 	bl	800653c <PI_Controller>
    pHandle->SpeedRefUnitExt = wCurrentReference;
 8006e5c:	6066      	str	r6, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006e5e:	0406      	lsls	r6, r0, #16
 8006e60:	60a6      	str	r6, [r4, #8]
}
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8006e64:	d014      	beq.n	8006e90 <STC_CalcTorqueReference+0x84>
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8006e66:	2e00      	cmp	r6, #0
 8006e68:	4630      	mov	r0, r6
 8006e6a:	dade      	bge.n	8006e2a <STC_CalcTorqueReference+0x1e>
 8006e6c:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8006e70:	30ff      	adds	r0, #255	@ 0xff
 8006e72:	e7da      	b.n	8006e2a <STC_CalcTorqueReference+0x1e>
  else if ( pHandle->RampRemainingStep == 1u )
 8006e74:	d006      	beq.n	8006e84 <STC_CalcTorqueReference+0x78>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006e76:	2e00      	cmp	r6, #0
 8006e78:	4630      	mov	r0, r6
 8006e7a:	dae4      	bge.n	8006e46 <STC_CalcTorqueReference+0x3a>
 8006e7c:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8006e80:	30ff      	adds	r0, #255	@ 0xff
 8006e82:	e7e0      	b.n	8006e46 <STC_CalcTorqueReference+0x3a>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006e84:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8006e88:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006e8a:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8006e8c:	60c3      	str	r3, [r0, #12]
 8006e8e:	e7db      	b.n	8006e48 <STC_CalcTorqueReference+0x3c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006e90:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8006e94:	60c2      	str	r2, [r0, #12]
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006e96:	042e      	lsls	r6, r5, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006e98:	e7c8      	b.n	8006e2c <STC_CalcTorqueReference+0x20>
 8006e9a:	bf00      	nop

08006e9c <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8006e9c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop

08006ea4 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8006ea4:	8bc0      	ldrh	r0, [r0, #30]
 8006ea6:	4770      	bx	lr

08006ea8 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8006ea8:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	@ 0x24
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop

08006eb0 <STC_GetDefaultIqdref>:
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
}
 8006eb0:	f8d0 002e 	ldr.w	r0, [r0, #46]	@ 0x2e
{
 8006eb4:	b082      	sub	sp, #8
}
 8006eb6:	b002      	add	sp, #8
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop

08006ebc <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8006ec0:	6940      	ldr	r0, [r0, #20]
 8006ec2:	f7ff fed9 	bl	8006c78 <SPD_GetAvrgMecSpeedUnit>
 8006ec6:	0400      	lsls	r0, r0, #16
 8006ec8:	6060      	str	r0, [r4, #4]
}
 8006eca:	bd10      	pop	{r4, pc}

08006ecc <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8006ed0:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop

08006ed8 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8006ed8:	b500      	push	{lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006eda:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006edc:	f8b0 e004 	ldrh.w	lr, [r0, #4]
{
 8006ee0:	4684      	mov	ip, r0
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006ee2:	430b      	orrs	r3, r1
  State_t LocalState =  pHandle->bState;
 8006ee4:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006ee6:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8006eea:	ea41 010e 	orr.w	r1, r1, lr
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006eee:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8006ef0:	280a      	cmp	r0, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006ef2:	f8ac 2002 	strh.w	r2, [ip, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006ef6:	f8ac 1004 	strh.w	r1, [ip, #4]
  if ( LocalState == FAULT_NOW )
 8006efa:	d008      	beq.n	8006f0e <STM_FaultProcessing+0x36>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8006efc:	b90a      	cbnz	r2, 8006f02 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8006efe:	f85d fb04 	ldr.w	pc, [sp], #4
      pHandle->bState = FAULT_NOW;
 8006f02:	230a      	movs	r3, #10
 8006f04:	f88c 3000 	strb.w	r3, [ip]
      LocalState = FAULT_NOW;
 8006f08:	200a      	movs	r0, #10
}
 8006f0a:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8006f0e:	2a00      	cmp	r2, #0
 8006f10:	d1fa      	bne.n	8006f08 <STM_FaultProcessing+0x30>
      pHandle->bState = FAULT_OVER;
 8006f12:	200b      	movs	r0, #11
 8006f14:	f88c 0000 	strb.w	r0, [ip]
}
 8006f18:	f85d fb04 	ldr.w	pc, [sp], #4

08006f1c <STM_NextState>:
{
 8006f1c:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8006f1e:	7803      	ldrb	r3, [r0, #0]
 8006f20:	2b14      	cmp	r3, #20
 8006f22:	d810      	bhi.n	8006f46 <STM_NextState+0x2a>
 8006f24:	e8df f003 	tbb	[pc, r3]
 8006f28:	170d282f 	.word	0x170d282f
 8006f2c:	5b0d5e62 	.word	0x5b0d5e62
 8006f30:	0f0f5358 	.word	0x0f0f5358
 8006f34:	484b0b50 	.word	0x484b0b50
 8006f38:	373b3e45 	.word	0x373b3e45
 8006f3c:	25          	.byte	0x25
 8006f3d:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006f3e:	290e      	cmp	r1, #14
 8006f40:	d00f      	beq.n	8006f62 <STM_NextState+0x46>
      if ( bState == ANY_STOP )
 8006f42:	2907      	cmp	r1, #7
 8006f44:	d00d      	beq.n	8006f62 <STM_NextState+0x46>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006f46:	2907      	cmp	r1, #7
 8006f48:	d80e      	bhi.n	8006f68 <STM_NextState+0x4c>
 8006f4a:	238a      	movs	r3, #138	@ 0x8a
 8006f4c:	40cb      	lsrs	r3, r1
 8006f4e:	07db      	lsls	r3, r3, #31
 8006f50:	d50a      	bpl.n	8006f68 <STM_NextState+0x4c>
 8006f52:	2000      	movs	r0, #0
}
 8006f54:	bd08      	pop	{r3, pc}
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 8006f56:	2911      	cmp	r1, #17
 8006f58:	d806      	bhi.n	8006f68 <STM_NextState+0x4c>
 8006f5a:	4b28      	ldr	r3, [pc, #160]	@ (8006ffc <STM_NextState+0xe0>)
 8006f5c:	40cb      	lsrs	r3, r1
 8006f5e:	07da      	lsls	r2, r3, #31
 8006f60:	d5f1      	bpl.n	8006f46 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8006f62:	7001      	strb	r1, [r0, #0]
 8006f64:	2001      	movs	r0, #1
}
 8006f66:	bd08      	pop	{r3, pc}
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2180      	movs	r1, #128	@ 0x80
 8006f6c:	f7ff ffb4 	bl	8006ed8 <STM_FaultProcessing>
 8006f70:	e7ef      	b.n	8006f52 <STM_NextState+0x36>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8006f72:	2912      	cmp	r1, #18
 8006f74:	d1e5      	bne.n	8006f42 <STM_NextState+0x26>
 8006f76:	e7f4      	b.n	8006f62 <STM_NextState+0x46>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8006f78:	2907      	cmp	r1, #7
 8006f7a:	d0f2      	beq.n	8006f62 <STM_NextState+0x46>
 8006f7c:	f1a1 030d 	sub.w	r3, r1, #13
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d8e0      	bhi.n	8006f46 <STM_NextState+0x2a>
 8006f84:	e7ed      	b.n	8006f62 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006f86:	290c      	cmp	r1, #12
 8006f88:	d8ee      	bhi.n	8006f68 <STM_NextState+0x4c>
 8006f8a:	f241 030a 	movw	r3, #4106	@ 0x100a
 8006f8e:	40cb      	lsrs	r3, r1
 8006f90:	07db      	lsls	r3, r3, #31
 8006f92:	d4e6      	bmi.n	8006f62 <STM_NextState+0x46>
 8006f94:	e7d7      	b.n	8006f46 <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006f96:	1f0b      	subs	r3, r1, #4
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d8d2      	bhi.n	8006f42 <STM_NextState+0x26>
 8006f9c:	e7e1      	b.n	8006f62 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8006f9e:	2904      	cmp	r1, #4
 8006fa0:	d1cf      	bne.n	8006f42 <STM_NextState+0x26>
 8006fa2:	e7de      	b.n	8006f62 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8006fa4:	2914      	cmp	r1, #20
 8006fa6:	d8df      	bhi.n	8006f68 <STM_NextState+0x4c>
 8006fa8:	4b15      	ldr	r3, [pc, #84]	@ (8007000 <STM_NextState+0xe4>)
 8006faa:	40cb      	lsrs	r3, r1
 8006fac:	07db      	lsls	r3, r3, #31
 8006fae:	d4d8      	bmi.n	8006f62 <STM_NextState+0x46>
 8006fb0:	e7c9      	b.n	8006f46 <STM_NextState+0x2a>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006fb2:	2911      	cmp	r1, #17
 8006fb4:	d1c5      	bne.n	8006f42 <STM_NextState+0x26>
 8006fb6:	e7d4      	b.n	8006f62 <STM_NextState+0x46>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8006fb8:	2902      	cmp	r1, #2
 8006fba:	d1c2      	bne.n	8006f42 <STM_NextState+0x26>
 8006fbc:	e7d1      	b.n	8006f62 <STM_NextState+0x46>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8006fbe:	f001 03f7 	and.w	r3, r1, #247	@ 0xf7
 8006fc2:	2b07      	cmp	r3, #7
 8006fc4:	d1bf      	bne.n	8006f46 <STM_NextState+0x2a>
 8006fc6:	e7cc      	b.n	8006f62 <STM_NextState+0x46>
      if ( bState == IDLE )
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	d0ca      	beq.n	8006f62 <STM_NextState+0x46>
 8006fcc:	e7bb      	b.n	8006f46 <STM_NextState+0x2a>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8006fce:	2900      	cmp	r1, #0
 8006fd0:	d0c7      	beq.n	8006f62 <STM_NextState+0x46>
 8006fd2:	290c      	cmp	r1, #12
 8006fd4:	d1b7      	bne.n	8006f46 <STM_NextState+0x2a>
 8006fd6:	e7c4      	b.n	8006f62 <STM_NextState+0x46>
      if ( bState == STOP_IDLE )
 8006fd8:	2909      	cmp	r1, #9
 8006fda:	d1b4      	bne.n	8006f46 <STM_NextState+0x2a>
 8006fdc:	e7c1      	b.n	8006f62 <STM_NextState+0x46>
      if ( bState == STOP )
 8006fde:	2908      	cmp	r1, #8
 8006fe0:	d1b1      	bne.n	8006f46 <STM_NextState+0x2a>
 8006fe2:	e7be      	b.n	8006f62 <STM_NextState+0x46>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8006fe4:	1f8b      	subs	r3, r1, #6
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d8ad      	bhi.n	8006f46 <STM_NextState+0x2a>
 8006fea:	e7ba      	b.n	8006f62 <STM_NextState+0x46>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006fec:	2913      	cmp	r1, #19
 8006fee:	d8bb      	bhi.n	8006f68 <STM_NextState+0x4c>
 8006ff0:	4b04      	ldr	r3, [pc, #16]	@ (8007004 <STM_NextState+0xe8>)
 8006ff2:	40cb      	lsrs	r3, r1
 8006ff4:	07da      	lsls	r2, r3, #31
 8006ff6:	d4b4      	bmi.n	8006f62 <STM_NextState+0x46>
 8006ff8:	e7a5      	b.n	8006f46 <STM_NextState+0x2a>
 8006ffa:	bf00      	nop
 8006ffc:	00030092 	.word	0x00030092
 8007000:	00140080 	.word	0x00140080
 8007004:	000800a0 	.word	0x000800a0

08007008 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8007008:	7800      	ldrb	r0, [r0, #0]
 800700a:	4770      	bx	lr

0800700c <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 800700c:	7803      	ldrb	r3, [r0, #0]
 800700e:	2b0b      	cmp	r3, #11
 8007010:	d001      	beq.n	8007016 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8007012:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8007014:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8007016:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8007018:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 800701a:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800701c:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800701e:	2001      	movs	r0, #1
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop

08007024 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8007024:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8007026:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8007028:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop

08007030 <STO_PLL_CalcElAngle>:
  * @param  pHandle: handler of the current instance of the STO component
  * @param  pInputVars_str pointer to the observer inputs structure
  * @retval int16_t rotor electrical angle (s16Degrees)
  */
__weak int16_t STO_PLL_CalcElAngle( STO_PLL_Handle_t * pHandle, Observer_Inputs_t * pInputs )
{
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t wBemf_alfa_est_Next, wBemf_beta_est_Next;
  int16_t hAux, hAux_Alfa, hAux_Beta, hIalfa_err, hIbeta_err, hRotor_Speed,
          hValfa, hVbeta;


  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 8007034:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 8007038:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 800703a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800703e:	429f      	cmp	r7, r3
{
 8007040:	b087      	sub	sp, #28
 8007042:	4604      	mov	r4, r0
  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 8007044:	f340 80c9 	ble.w	80071da <STO_PLL_CalcElAngle+0x1aa>
  {
    pHandle->wBemf_alfa_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
 8007048:	6683      	str	r3, [r0, #104]	@ 0x68
 800704a:	461f      	mov	r7, r3
  {
  }
#ifdef FULL_MISRA_C_COMPLIANCY
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est / pHandle->hF2 );
#else
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 800704c:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#endif

  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8007050:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 8007052:	fa47 f205 	asr.w	r2, r7, r5
  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8007056:	42b3      	cmp	r3, r6
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 8007058:	9200      	str	r2, [sp, #0]
 800705a:	fa0f fc82 	sxth.w	ip, r2
  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 800705e:	f2c0 80b9 	blt.w	80071d4 <STO_PLL_CalcElAngle+0x1a4>
  {
    pHandle->wBemf_beta_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
  }
  else if ( pHandle->wBemf_beta_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8007062:	425b      	negs	r3, r3
 8007064:	429e      	cmp	r6, r3
 8007066:	f340 80b5 	ble.w	80071d4 <STO_PLL_CalcElAngle+0x1a4>
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est / pHandle->hF2 );
#else
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
#endif

  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 800706a:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 800706e:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 8007072:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 8007076:	fa46 f205 	asr.w	r2, r6, r5
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 800707a:	4599      	cmp	r9, r3
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 800707c:	9201      	str	r2, [sp, #4]
 800707e:	b210      	sxth	r0, r2
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8007080:	f340 80b1 	ble.w	80071e6 <STO_PLL_CalcElAngle+0x1b6>
  {
    pHandle->Ialfa_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
 8007084:	6623      	str	r3, [r4, #96]	@ 0x60
 8007086:	4699      	mov	r9, r3
  }
  else
  {
  }

  if ( pHandle->Ibeta_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8007088:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 800708c:	4543      	cmp	r3, r8
 800708e:	f2c0 809e 	blt.w	80071ce <STO_PLL_CalcElAngle+0x19e>
  {
    pHandle->Ibeta_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
  }
  else if ( pHandle->Ibeta_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8007092:	425b      	negs	r3, r3
 8007094:	4598      	cmp	r8, r3
 8007096:	f340 809a 	ble.w	80071ce <STO_PLL_CalcElAngle+0x19e>
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est / pHandle->hF1 );
#else
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
#endif

  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800709a:	88cb      	ldrh	r3, [r1, #6]

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 800709c:	f8b1 a008 	ldrh.w	sl, [r1, #8]
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80070a0:	f8ad 300c 	strh.w	r3, [sp, #12]
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 80070a4:	f9b1 3000 	ldrsh.w	r3, [r1]
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 80070a8:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80070ac:	888d      	ldrh	r5, [r1, #4]
  hValfa = ( int16_t ) ( wAux / 65536 );
#else
  hValfa = ( int16_t ) ( wAux >> 16 );
#endif

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 80070ae:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
  hAux = ( int16_t ) ( pHandle->Ialfa_est / pHandle->hF1 );
#else
  hAux = ( int16_t ) ( pHandle->Ialfa_est >> pHandle->F1LOG );
#endif

  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 80070b2:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
  wAux = wAux * pHandle->hC6;
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
  wBemf_beta_est_Next -= wAux;

  /*Calls the PLL blockset*/
  pHandle->hBemf_alfa_est = hAux_Alfa;
 80070b6:	f8a4 c070 	strh.w	ip, [r4, #112]	@ 0x70
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 80070ba:	fb0a f303 	mul.w	r3, sl, r3
  hValfa = ( int16_t ) ( wAux >> 16 );
 80070be:	141b      	asrs	r3, r3, #16
 80070c0:	9302      	str	r3, [sp, #8]
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 80070c2:	fa49 f302 	asr.w	r3, r9, r2
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80070c6:	1b59      	subs	r1, r3, r5
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80070c8:	9d03      	ldr	r5, [sp, #12]
  pHandle->hBemf_beta_est = hAux_Beta;
 80070ca:	f8a4 0072 	strh.w	r0, [r4, #114]	@ 0x72
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 80070ce:	fa48 f202 	asr.w	r2, r8, r2
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 80070d2:	fb0a fe0e 	mul.w	lr, sl, lr
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80070d6:	eba2 0a05 	sub.w	sl, r2, r5
  wAux = ( int32_t )  ( pHandle->hC1 ) * hAux;
 80070da:	fb12 f20b 	smulbb	r2, r2, fp
  wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 80070de:	eba8 0202 	sub.w	r2, r8, r2
  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 80070e2:	fb13 f30b 	smulbb	r3, r3, fp
  wAux = ( int32_t ) ( pHandle->hC2 ) * hIalfa_err;
 80070e6:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
  wIalfa_est_Next += wAux;
 80070ea:	9d02      	ldr	r5, [sp, #8]
  wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 80070ec:	eba9 0303 	sub.w	r3, r9, r3
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80070f0:	b209      	sxth	r1, r1
  wAux = ( int32_t ) ( pHandle->hC5 ) * hValfa;
 80070f2:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80070f6:	fa0f fa8a 	sxth.w	sl, sl
  wIalfa_est_Next += wAux;
 80070fa:	fb08 3301 	mla	r3, r8, r1, r3
  hVbeta = ( int16_t ) ( wAux >> 16 );
 80070fe:	ea4f 4e2e 	mov.w	lr, lr, asr #16
  wIbeta_est_Next += wAux;
 8007102:	fb08 280a 	mla	r8, r8, sl, r2
  wIbeta_est_Next += wAux;
 8007106:	fb09 880e 	mla	r8, r9, lr, r8
  wAux = ( int32_t )( pHandle->hC4 ) * hIalfa_err;
 800710a:	f9b4 e026 	ldrsh.w	lr, [r4, #38]	@ 0x26
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 800710e:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
  wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8007110:	fb01 710e 	mla	r1, r1, lr, r7
  wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8007114:	fb0e 6e0a 	mla	lr, lr, sl, r6
  wAux = ( int32_t )  ( pHandle->hC3 ) * hAux_Alfa;
 8007118:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
  wIalfa_est_Next += wAux;
 800711c:	fb09 3305 	mla	r3, r9, r5, r3
  wAux = wAux * pHandle->hC6;
 8007120:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
  wIalfa_est_Next -= wAux;
 8007124:	fb06 371c 	mls	r7, r6, ip, r3
  wIbeta_est_Next -= wAux;
 8007128:	fb06 8610 	mls	r6, r6, r0, r8
  wAux = ( int32_t ) hAux_Alfa >> pHandle->F3POW2;
 800712c:	fa4c fc02 	asr.w	ip, ip, r2
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 8007130:	4110      	asrs	r0, r2
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8007132:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  wAux = wAux * pHandle->hC6;
 8007136:	fb0c f309 	mul.w	r3, ip, r9
  wBemf_beta_est_Next -= wAux;
 800713a:	fb03 e812 	mls	r8, r3, r2, lr

  if (pHandle->hForcedDirection ==0)
 800713e:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
  wAux = wAux * pHandle->hC6;
 8007142:	fb00 f009 	mul.w	r0, r0, r9
  wBemf_alfa_est_Next += wAux;
 8007146:	fb00 1902 	mla	r9, r0, r2, r1
  if (pHandle->hForcedDirection ==0)
 800714a:	2b00      	cmp	r3, #0
 800714c:	d151      	bne.n	80071f2 <STO_PLL_CalcElAngle+0x1c2>
  {
    /* we are in auxiliary mode, then rely on the speed detected */
    if(pHandle->_Super.hElSpeedDpp >= 0)
 800714e:	2a00      	cmp	r2, #0
 8007150:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8007154:	bfa8      	it	ge
 8007156:	f04f 0a01 	movge.w	sl, #1
  int32_t wAlfa_Sin_tmp, wBeta_Cos_tmp;
  int16_t hOutput;
  Trig_Components Local_Components;
  int16_t hAux1, hAux2;

  Local_Components = MCM_Trig_Functions( pHandle->_Super.hElAngle );
 800715a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800715e:	f7f9 fdb9 	bl	8000cd4 <MCM_Trig_Functions>
  hAux_Beta = ( int16_t )( hAux_Beta * wDirection  );
 8007162:	9b01      	ldr	r3, [sp, #4]
 8007164:	fb13 f50a 	smulbb	r5, r3, sl
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 8007168:	9b00      	ldr	r3, [sp, #0]
  hRotor_Speed = STO_ExecutePLL( pHandle, hAux_Alfa, -hAux_Beta );
 800716a:	426d      	negs	r5, r5
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 800716c:	fb13 f30a 	smulbb	r3, r3, sl

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
  wBeta_Cos_tmp = ( int32_t )( hBemf_beta_est ) * ( int32_t )Local_Components.hCos;
 8007170:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
 8007174:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = ( int16_t )( wAlfa_Sin_tmp >> 15 );
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller( & pHandle->PIRegulator, ( int32_t )( hAux1 ) - hAux2 );
 8007178:	f345 35cf 	sbfx	r5, r5, #15, #16
 800717c:	f340 31cf 	sbfx	r1, r0, #15, #16
 8007180:	1a69      	subs	r1, r5, r1
 8007182:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8007186:	f7ff f9d9 	bl	800653c <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800718a:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 800718e:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
  pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8007192:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8007194:	3301      	adds	r3, #1
 8007196:	b2db      	uxtb	r3, r3
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 8007198:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800719a:	bf12      	itee	ne
 800719c:	461a      	movne	r2, r3
 800719e:	2200      	moveq	r2, #0
    bBuffer_index = 0u;
 80071a0:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 80071a2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80071a6:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 80071aa:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 80071ae:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 80071b2:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
  pHandle->_Super.hElAngle += hRotor_Speed;
 80071b6:	88a3      	ldrh	r3, [r4, #4]
  pHandle->Ialfa_est = wIalfa_est_Next;
 80071b8:	6627      	str	r7, [r4, #96]	@ 0x60
  pHandle->_Super.hElAngle += hRotor_Speed;
 80071ba:	4418      	add	r0, r3
 80071bc:	b200      	sxth	r0, r0
  pHandle->Ibeta_est = wIbeta_est_Next;
 80071be:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
  pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 80071c2:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
  pHandle->_Super.hElAngle += hRotor_Speed;
 80071c6:	80a0      	strh	r0, [r4, #4]
}
 80071c8:	b007      	add	sp, #28
 80071ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pHandle->Ibeta_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 80071ce:	6663      	str	r3, [r4, #100]	@ 0x64
 80071d0:	4698      	mov	r8, r3
 80071d2:	e762      	b.n	800709a <STO_PLL_CalcElAngle+0x6a>
    pHandle->wBemf_beta_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 80071d4:	66e3      	str	r3, [r4, #108]	@ 0x6c
 80071d6:	461e      	mov	r6, r3
 80071d8:	e747      	b.n	800706a <STO_PLL_CalcElAngle+0x3a>
  else if ( pHandle->wBemf_alfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 80071da:	425a      	negs	r2, r3
 80071dc:	4297      	cmp	r7, r2
    pHandle->wBemf_alfa_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 80071de:	bfdc      	itt	le
 80071e0:	6682      	strle	r2, [r0, #104]	@ 0x68
 80071e2:	4617      	movle	r7, r2
 80071e4:	e732      	b.n	800704c <STO_PLL_CalcElAngle+0x1c>
  else if ( pHandle->Ialfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 80071e6:	425a      	negs	r2, r3
 80071e8:	4591      	cmp	r9, r2
    pHandle->Ialfa_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 80071ea:	bfdc      	itt	le
 80071ec:	6622      	strle	r2, [r4, #96]	@ 0x60
 80071ee:	4691      	movle	r9, r2
 80071f0:	e74a      	b.n	8007088 <STO_PLL_CalcElAngle+0x58>
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 80071f2:	fa1f fa83 	uxth.w	sl, r3
 80071f6:	e7b0      	b.n	800715a <STO_PLL_CalcElAngle+0x12a>

080071f8 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 80071f8:	b570      	push	{r4, r5, r6, lr}
  uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 80071fa:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80071fe:	2d00      	cmp	r5, #0
 8007200:	f000 8095 	beq.w	800732e <STO_PLL_CalcAvrgMecSpeedUnit+0x136>
 8007204:	f100 0c72 	add.w	ip, r0, #114	@ 0x72
 8007208:	eb0c 0445 	add.w	r4, ip, r5, lsl #1
 800720c:	4662      	mov	r2, ip
  int32_t wAvrSpeed_dpp = ( int32_t )0;
 800720e:	2300      	movs	r3, #0
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 8007210:	f932 ef02 	ldrsh.w	lr, [r2, #2]!
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 8007214:	42a2      	cmp	r2, r4
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 8007216:	4473      	add	r3, lr
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 8007218:	d1fa      	bne.n	8007210 <STO_PLL_CalcAvrgMecSpeedUnit+0x18>
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 800721a:	fb93 f2f5 	sdiv	r2, r3, r5
  int32_t wError, wAux, wAvrSquareSpeed, wAvrQuadraticError = 0;
 800721e:	f04f 0e00 	mov.w	lr, #0
    wError = ( int32_t )( pHandle->Speed_Buffer[i] ) - wAvrSpeed_dpp;
 8007222:	f93c 3f02 	ldrsh.w	r3, [ip, #2]!
 8007226:	1a9b      	subs	r3, r3, r2
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 8007228:	45a4      	cmp	ip, r4
    wAvrQuadraticError += wError;
 800722a:	fb03 ee03 	mla	lr, r3, r3, lr
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 800722e:	d1f8      	bne.n	8007222 <STO_PLL_CalcAvrgMecSpeedUnit+0x2a>
  wAvrQuadraticError = wAvrQuadraticError / ( int16_t )bSpeedBufferSizeUnit;
 8007230:	fb9e fef5 	sdiv	lr, lr, r5
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 8007234:	f8b0 4110 	ldrh.w	r4, [r0, #272]	@ 0x110
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8007238:	8b45      	ldrh	r5, [r0, #26]
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 800723a:	f890 6104 	ldrb.w	r6, [r0, #260]	@ 0x104
  wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800723e:	fb02 f302 	mul.w	r3, r2, r2
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 8007242:	fb04 f303 	mul.w	r3, r4, r3
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8007246:	fb02 f505 	mul.w	r5, r2, r5
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 800724a:	ebbe 1fe3 	cmp.w	lr, r3, asr #7
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 800724e:	ea4f 12e3 	mov.w	r2, r3, asr #7
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 8007252:	7883      	ldrb	r3, [r0, #2]
  wAux = wAux / ( int32_t )( pHandle->_Super.DPPConvFactor);
 8007254:	69c4      	ldr	r4, [r0, #28]
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 8007256:	fb05 f303 	mul.w	r3, r5, r3
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 800725a:	bfb4      	ite	lt
 800725c:	2501      	movlt	r5, #1
 800725e:	2500      	movge	r5, #0
  wAux = wAux / ( int32_t )( pHandle->_Super.DPPConvFactor);
 8007260:	fb93 f3f4 	sdiv	r3, r3, r4
  wAux = wAux / ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007264:	7844      	ldrb	r4, [r0, #1]
 8007266:	fb93 f3f4 	sdiv	r3, r3, r4
  *pMecSpeedUnit = ( int16_t )wAux;
 800726a:	b21c      	sxth	r4, r3
 800726c:	800c      	strh	r4, [r1, #0]
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 800726e:	f880 50f5 	strb.w	r5, [r0, #245]	@ 0xf5
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wAux;
 8007272:	8184      	strh	r4, [r0, #12]
  if ( pHandle->IsAlgorithmConverged == false )
 8007274:	f890 50f8 	ldrb.w	r5, [r0, #248]	@ 0xf8
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 8007278:	2e00      	cmp	r6, #0
 800727a:	d046      	beq.n	800730a <STO_PLL_CalcAvrgMecSpeedUnit+0x112>
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 800727c:	2b00      	cmp	r3, #0
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 800727e:	f8b0 411a 	ldrh.w	r4, [r0, #282]	@ 0x11a
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 8007282:	bfb8      	it	lt
 8007284:	425b      	neglt	r3, r3
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 8007286:	429c      	cmp	r4, r3
 8007288:	dd49      	ble.n	800731e <STO_PLL_CalcAvrgMecSpeedUnit+0x126>
      wObsBemf = ( int32_t )( pHandle->hBemf_alfa_est );
 800728a:	f9b0 4070 	ldrsh.w	r4, [r0, #112]	@ 0x70
      wObsBemf = ( int32_t )( pHandle->hBemf_beta_est );
 800728e:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	@ 0x72
      wObsBemfSq = wObsBemf * wObsBemf;
 8007292:	fb04 fc04 	mul.w	ip, r4, r4
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 8007296:	f890 4119 	ldrb.w	r4, [r0, #281]	@ 0x119
      wObsBemfSq += wObsBemf * wObsBemf;
 800729a:	fb06 c606 	mla	r6, r6, r6, ip
      wEstBemf = ( wAux * 32767 ) / ( int16_t )( pHandle->_Super.hMaxReliableMecSpeedUnit );
 800729e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 80072a2:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 80072a6:	fb93 f3fc 	sdiv	r3, r3, ip
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 80072aa:	fb03 f404 	mul.w	r4, r3, r4
 80072ae:	2c00      	cmp	r4, #0
 80072b0:	bfb8      	it	lt
 80072b2:	343f      	addlt	r4, #63	@ 0x3f
 80072b4:	11a4      	asrs	r4, r4, #6
      wEstBemfSq *= wEstBemf;
 80072b6:	fb04 f303 	mul.w	r3, r4, r3
                     ( wEstBemfSq / 64 ) * ( int32_t )( pHandle->BemfConsistencyCheck );
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	461c      	mov	r4, r3
 80072be:	f890 c118 	ldrb.w	ip, [r0, #280]	@ 0x118
 80072c2:	bfb8      	it	lt
 80072c4:	f103 043f 	addlt.w	r4, r3, #63	@ 0x3f
 80072c8:	11a4      	asrs	r4, r4, #6
    pHandle->Est_Bemf_Level = wEstBemfSq;
 80072ca:	e9c0 633f 	strd	r6, r3, [r0, #252]	@ 0xfc
      wEstBemfSqLo = wEstBemfSq -
 80072ce:	fb0c 3314 	mls	r3, ip, r4, r3
      if ( wObsBemfSq > wEstBemfSqLo )
 80072d2:	429e      	cmp	r6, r3
 80072d4:	bfd4      	ite	le
 80072d6:	2400      	movle	r4, #0
 80072d8:	2401      	movgt	r4, #1
 80072da:	f880 40f9 	strb.w	r4, [r0, #249]	@ 0xf9
  if ( pHandle->IsAlgorithmConverged == false )
 80072de:	b1d5      	cbz	r5, 8007316 <STO_PLL_CalcAvrgMecSpeedUnit+0x11e>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 80072e0:	4596      	cmp	lr, r2
 80072e2:	da01      	bge.n	80072e8 <STO_PLL_CalcAvrgMecSpeedUnit+0xf0>
 80072e4:	429e      	cmp	r6, r3
 80072e6:	dc13      	bgt.n	8007310 <STO_PLL_CalcAvrgMecSpeedUnit+0x118>
      pHandle->ReliabilityCounter++;
 80072e8:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 80072ec:	f890 2117 	ldrb.w	r2, [r0, #279]	@ 0x117
      pHandle->ReliabilityCounter++;
 80072f0:	3301      	adds	r3, #1
 80072f2:	b2db      	uxtb	r3, r3
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 80072f4:	429a      	cmp	r2, r3
      pHandle->ReliabilityCounter++;
 80072f6:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 80072fa:	d80c      	bhi.n	8007316 <STO_PLL_CalcAvrgMecSpeedUnit+0x11e>
        pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80072fc:	78c2      	ldrb	r2, [r0, #3]
 80072fe:	7002      	strb	r2, [r0, #0]
        pHandle->ReliabilityCounter = 0u;
 8007300:	2300      	movs	r3, #0
 8007302:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 8007306:	4618      	mov	r0, r3
 8007308:	bd70      	pop	{r4, r5, r6, pc}
  if ( pHandle->IsAlgorithmConverged == false )
 800730a:	b125      	cbz	r5, 8007316 <STO_PLL_CalcAvrgMecSpeedUnit+0x11e>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 800730c:	4596      	cmp	lr, r2
 800730e:	daeb      	bge.n	80072e8 <STO_PLL_CalcAvrgMecSpeedUnit+0xf0>
      pHandle->ReliabilityCounter = 0u;
 8007310:	2300      	movs	r3, #0
 8007312:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 8007316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bAux = SPD_IsMecSpeedReliable ( &pHandle->_Super, pMecSpeedUnit );
 800731a:	f7ff bcb5 	b.w	8006c88 <SPD_IsMecSpeedReliable>
    pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800731e:	2300      	movs	r3, #0
    pHandle->Est_Bemf_Level = wEstBemfSq;
 8007320:	e9c0 333f 	strd	r3, r3, [r0, #252]	@ 0xfc
    pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8007324:	f880 30f9 	strb.w	r3, [r0, #249]	@ 0xf9
  if ( pHandle->IsAlgorithmConverged == false )
 8007328:	2d00      	cmp	r5, #0
 800732a:	d1dd      	bne.n	80072e8 <STO_PLL_CalcAvrgMecSpeedUnit+0xf0>
 800732c:	e7f3      	b.n	8007316 <STO_PLL_CalcAvrgMecSpeedUnit+0x11e>
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 800732e:	deff      	udf	#255	@ 0xff

08007330 <STO_PLL_CalcAvrgElSpeedDpp>:
  int16_t hIndexNew = ( int16_t )pHandle->Speed_Buffer_Index;
 8007330:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
  int16_t hSpeedBufferSizeUnit = ( int16_t )( pHandle->SpeedBufferSizeUnit );
 8007334:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8007338:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 800733c:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 8007340:	b410      	push	{r4}
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8007342:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8007346:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800734a:	ebac 0101 	sub.w	r1, ip, r1
 800734e:	b289      	uxth	r1, r1
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8007350:	4423      	add	r3, r4
  if ( hBufferSizeDiff == 0 )
 8007352:	b959      	cbnz	r1, 800736c <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
           pHandle->SpeedBufferOldestEl;
 8007354:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8007358:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800735a:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
  pHandle->DppBufferSum = wSum;
 800735e:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8007362:	4113      	asrs	r3, r2
}
 8007364:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.hElSpeedDpp = ( int16_t )wAvrSpeed_dpp;
 8007368:	81c3      	strh	r3, [r0, #14]
}
 800736a:	4770      	bx	lr
    hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800736c:	440a      	add	r2, r1
 800736e:	b291      	uxth	r1, r2
 8007370:	b212      	sxth	r2, r2
    if ( hIndexOldTemp >= hSpeedBufferSizeUnit )
 8007372:	4594      	cmp	ip, r2
      hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8007374:	bfdc      	itt	le
 8007376:	eba1 010c 	suble.w	r1, r1, ip
 800737a:	b20a      	sxthle	r2, r1
           pHandle->Speed_Buffer[hIndexOld];
 800737c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007380:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	e7e8      	b.n	800735a <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

08007388 <STO_PLL_Clear>:
{
 8007388:	b510      	push	{r4, lr}
  * @retval none
  */
static void STO_InitSpeedBuffer( STO_PLL_Handle_t * pHandle )
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800738a:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
  pHandle->Ialfa_est = ( int32_t )0;
 800738e:	2100      	movs	r1, #0
  pHandle->Ibeta_est = ( int32_t )0;
 8007390:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
  pHandle->wBemf_beta_est = ( int32_t )0;
 8007394:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
  pHandle->Est_Bemf_Level = ( int32_t )0;
 8007398:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 800739c:	4604      	mov	r4, r0
  pHandle->_Super.hElAngle = ( int16_t )0;
 800739e:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hElSpeedDpp = ( int16_t )0;
 80073a0:	81c1      	strh	r1, [r0, #14]
  pHandle->ConsistencyCounter = 0u;
 80073a2:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
  pHandle->IsAlgorithmConverged = false;
 80073a6:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
  pHandle->DppBufferSum = ( int32_t )0;
 80073aa:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
  pHandle->ForceConvergency = false;
 80073ae:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /*init speed buffer*/
  for ( b_i = 0u; b_i < bSpeedBufferSize; b_i++ )
 80073b2:	b11a      	cbz	r2, 80073bc <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = ( int16_t )0;
 80073b4:	0052      	lsls	r2, r2, #1
 80073b6:	3074      	adds	r0, #116	@ 0x74
 80073b8:	f000 fb26 	bl	8007a08 <memset>
  }
  pHandle->Speed_Buffer_Index = 0u;
 80073bc:	2100      	movs	r1, #0
 80073be:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = ( int16_t )0;
 80073c2:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 80073c6:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 80073ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 80073ce:	f7ff b8a9 	b.w	8006524 <PID_SetIntegralTerm>
 80073d2:	bf00      	nop

080073d4 <STO_PLL_Init>:
{
 80073d4:	b510      	push	{r4, lr}
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80073d6:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 80073da:	4b19      	ldr	r3, [pc, #100]	@ (8007440 <STO_PLL_Init+0x6c>)
 80073dc:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80073e0:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
  pHandle->EnableDualCheck = true;
 80073e4:	2201      	movs	r2, #1
  pHandle->F3POW2 = 0u;
 80073e6:	2100      	movs	r1, #0
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 80073e8:	fb93 f3fe 	sdiv	r3, r3, lr
 80073ec:	b21b      	sxth	r3, r3
{
 80073ee:	4604      	mov	r4, r0
  pHandle->EnableDualCheck = true;
 80073f0:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
  pHandle->F3POW2 = 0u;
 80073f4:	8641      	strh	r1, [r0, #50]	@ 0x32
  while ( htempk != 0 )
 80073f6:	b30b      	cbz	r3, 800743c <STO_PLL_Init+0x68>
  wAux = ( int32_t )1;
 80073f8:	4611      	mov	r1, r2
    htempk /= ( int16_t )2;
 80073fa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  while ( htempk != 0 )
 80073fe:	f102 0c01 	add.w	ip, r2, #1
 8007402:	105b      	asrs	r3, r3, #1
 8007404:	4610      	mov	r0, r2
    wAux *= ( int32_t )2;
 8007406:	ea4f 0141 	mov.w	r1, r1, lsl #1
  while ( htempk != 0 )
 800740a:	fa1f f28c 	uxth.w	r2, ip
 800740e:	d1f4      	bne.n	80073fa <STO_PLL_Init+0x26>
  pHandle->hF3 = ( int16_t )wAux;
 8007410:	b20a      	sxth	r2, r1
 8007412:	8660      	strh	r0, [r4, #50]	@ 0x32
  wAux = ( int32_t )( pHandle->hF2 ) * pHandle->hF3;
 8007414:	fb0e f102 	mul.w	r1, lr, r2
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 8007418:	480a      	ldr	r0, [pc, #40]	@ (8007444 <STO_PLL_Init+0x70>)
  pHandle->hF3 = ( int16_t )wAux;
 800741a:	8622      	strh	r2, [r4, #48]	@ 0x30
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 800741c:	17cb      	asrs	r3, r1, #31
 800741e:	fb80 0101 	smull	r0, r1, r0, r1
 8007422:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8007426:	8563      	strh	r3, [r4, #42]	@ 0x2a
  STO_PLL_Clear( pHandle );
 8007428:	4620      	mov	r0, r4
 800742a:	f7ff ffad 	bl	8007388 <STO_PLL_Clear>
  PID_HandleInit( & pHandle->PIRegulator );
 800742e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8007432:	f7ff f863 	bl	80064fc <PID_HandleInit>
  pHandle->_Super.hMecAccelUnitP = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	8263      	strh	r3, [r4, #18]
}
 800743a:	bd10      	pop	{r4, pc}
 800743c:	4671      	mov	r1, lr
 800743e:	e7eb      	b.n	8007418 <STO_PLL_Init+0x44>
 8007440:	000fea5e 	.word	0x000fea5e
 8007444:	06488dc5 	.word	0x06488dc5

08007448 <STO_PLL_IsObserverConverged>:
  int16_t hEstimatedSpeedUnit, hUpperThreshold, hLowerThreshold;
  int32_t wAux;
  bool bAux = false;
  int32_t wtemp;
  
  if ( pHandle->ForceConvergency2 == true )
 8007448:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 800744c:	4603      	mov	r3, r0
  if ( pHandle->ForceConvergency2 == true )
 800744e:	b10a      	cbz	r2, 8007454 <STO_PLL_IsObserverConverged+0xc>
  {
    hForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007450:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  }

  if ( pHandle->ForceConvergency == true )
 8007454:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 8007458:	b128      	cbz	r0, 8007466 <STO_PLL_IsObserverConverged+0x1e>
  {
    bAux = true;
    pHandle->IsAlgorithmConverged = true;
 800745a:	2001      	movs	r0, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 800745c:	2200      	movs	r2, #0
    pHandle->IsAlgorithmConverged = true;
 800745e:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
    pHandle->_Super.bSpeedErrorNumber = 0u;
 8007462:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ( bAux );
}
 8007464:	4770      	bx	lr
    hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007466:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 800746a:	fb02 fc01 	mul.w	ip, r2, r1
    if ( wtemp > 0 )
 800746e:	f1bc 0f00 	cmp.w	ip, #0
{
 8007472:	b530      	push	{r4, r5, lr}
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 8007474:	468e      	mov	lr, r1
    if ( wtemp > 0 )
 8007476:	dd37      	ble.n	80074e8 <STO_PLL_IsObserverConverged+0xa0>
      if ( hEstimatedSpeedUnit < 0 )
 8007478:	2a00      	cmp	r2, #0
        hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800747a:	bfbc      	itt	lt
 800747c:	4252      	neglt	r2, r2
 800747e:	b212      	sxthlt	r2, r2
      if ( pHandle->IsSpeedReliable == true )
 8007480:	f893 40f5 	ldrb.w	r4, [r3, #245]	@ 0xf5
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 8007484:	f893 c112 	ldrb.w	ip, [r3, #274]	@ 0x112
      if ( hForcedMecSpeedUnit < 0 )
 8007488:	2900      	cmp	r1, #0
        hForcedMecSpeedUnit = -hForcedMecSpeedUnit;
 800748a:	bfbc      	itt	lt
 800748c:	4249      	neglt	r1, r1
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 800748e:	fa0f fe81 	sxthlt.w	lr, r1
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_L;
 8007492:	f893 1113 	ldrb.w	r1, [r3, #275]	@ 0x113
      if ( pHandle->IsSpeedReliable == true )
 8007496:	b344      	cbz	r4, 80074ea <STO_PLL_IsObserverConverged+0xa2>
        if ( ( uint16_t )hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed )
 8007498:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 800749c:	b294      	uxth	r4, r2
 800749e:	42a5      	cmp	r5, r4
 80074a0:	d223      	bcs.n	80074ea <STO_PLL_IsObserverConverged+0xa2>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_L;
 80074a2:	fb0e f101 	mul.w	r1, lr, r1
      hLowerThreshold = ( int16_t )( wAux / ( int32_t )16 );
 80074a6:	2900      	cmp	r1, #0
 80074a8:	bfb8      	it	lt
 80074aa:	310f      	addlt	r1, #15
          if ( hEstimatedSpeedUnit >= hLowerThreshold )
 80074ac:	f341 110f 	sbfx	r1, r1, #4, #16
 80074b0:	428a      	cmp	r2, r1
 80074b2:	db1a      	blt.n	80074ea <STO_PLL_IsObserverConverged+0xa2>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 80074b4:	fb0e fc0c 	mul.w	ip, lr, ip
      hUpperThreshold = ( int16_t )( wAux / ( int32_t )16 );
 80074b8:	f1bc 0f00 	cmp.w	ip, #0
 80074bc:	bfb8      	it	lt
 80074be:	f10c 0c0f 	addlt.w	ip, ip, #15
            if ( hEstimatedSpeedUnit <= hUpperThreshold )
 80074c2:	f34c 1c0f 	sbfx	ip, ip, #4, #16
 80074c6:	4562      	cmp	r2, ip
 80074c8:	dc0f      	bgt.n	80074ea <STO_PLL_IsObserverConverged+0xa2>
              pHandle->ConsistencyCounter++;
 80074ca:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
              if ( pHandle->ConsistencyCounter >=
 80074ce:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
              pHandle->ConsistencyCounter++;
 80074d2:	3201      	adds	r2, #1
 80074d4:	b2d2      	uxtb	r2, r2
              if ( pHandle->ConsistencyCounter >=
 80074d6:	4291      	cmp	r1, r2
              pHandle->ConsistencyCounter++;
 80074d8:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
              if ( pHandle->ConsistencyCounter >=
 80074dc:	d804      	bhi.n	80074e8 <STO_PLL_IsObserverConverged+0xa0>
    pHandle->IsAlgorithmConverged = true;
 80074de:	2001      	movs	r0, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 80074e0:	2200      	movs	r2, #0
    pHandle->IsAlgorithmConverged = true;
 80074e2:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
    pHandle->_Super.bSpeedErrorNumber = 0u;
 80074e6:	701a      	strb	r2, [r3, #0]
}
 80074e8:	bd30      	pop	{r4, r5, pc}
              pHandle->ConsistencyCounter = 0u;
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 80074f0:	bd30      	pop	{r4, r5, pc}
 80074f2:	bf00      	nop

080074f4 <STO_PLL_GetEstimatedBemf>:
{
  alphabeta_t Vaux;
  Vaux.alpha = pHandle->hBemf_alfa_est;
  Vaux.beta = pHandle->hBemf_beta_est;
  return ( Vaux );
}
 80074f4:	6f00      	ldr	r0, [r0, #112]	@ 0x70
{
 80074f6:	b082      	sub	sp, #8
}
 80074f8:	b002      	add	sp, #8
 80074fa:	4770      	bx	lr

080074fc <STO_PLL_GetEstimatedCurrent>:
  *         observer
  * @param  pHandle: handler of the current instance of the STO component
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent( STO_PLL_Handle_t * pHandle )
{
 80074fc:	4603      	mov	r3, r0
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est / ( pHandle->hF1 ) );
#else
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
#endif

  return ( Iaux );
 80074fe:	2000      	movs	r0, #0
  Iaux.alpha = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8007500:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 8007504:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  Iaux.alpha = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8007508:	410a      	asrs	r2, r1
  return ( Iaux );
 800750a:	410b      	asrs	r3, r1
 800750c:	b292      	uxth	r2, r2
 800750e:	f362 000f 	bfi	r0, r2, #0, #16
 8007512:	b29b      	uxth	r3, r3
{
 8007514:	b082      	sub	sp, #8
  return ( Iaux );
 8007516:	f363 401f 	bfi	r0, r3, #16, #16
}
 800751a:	b002      	add	sp, #8
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop

08007520 <STO_PLL_GetObserverGains>:
  * @param  phC4 pointer to int16_t used to return parameters hhC4
  * @retval none
  */
__weak void STO_PLL_GetObserverGains( STO_PLL_Handle_t * pHandle, int16_t * phC2, int16_t * phC4 )
{
  *phC2 = pHandle->hC2;
 8007520:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8007524:	800b      	strh	r3, [r1, #0]
  *phC4 = pHandle->hC4;
 8007526:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 800752a:	8013      	strh	r3, [r2, #0]
}
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop

08007530 <STO_PLL_SetObserverGains>:
  * @retval none
  */
__weak void STO_PLL_SetObserverGains( STO_PLL_Handle_t * pHandle, int16_t hhC1, int16_t hhC2 )
{

  pHandle->hC2 = hhC1;
 8007530:	8441      	strh	r1, [r0, #34]	@ 0x22
  pHandle->hC4 = hhC2;
 8007532:	84c2      	strh	r2, [r0, #38]	@ 0x26
}
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop

08007538 <STO_GetPLLGains>:
  * @param  pPgain pointer to int16_t used to return PLL proportional gain
  * @param  pIgain pointer to int16_t used to return PLL integral gain
  * @retval none
  */
__weak void STO_GetPLLGains( STO_PLL_Handle_t * pHandle, int16_t * pPgain, int16_t * pIgain )
{
 8007538:	b570      	push	{r4, r5, r6, lr}

  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 800753a:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800753e:	4620      	mov	r0, r4
{
 8007540:	460e      	mov	r6, r1
 8007542:	4615      	mov	r5, r2
  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 8007544:	f7fe ffe6 	bl	8006514 <PID_GetKP>
 8007548:	8030      	strh	r0, [r6, #0]
  *pIgain = PID_GetKI( & pHandle->PIRegulator );
 800754a:	4620      	mov	r0, r4
 800754c:	f7fe ffe6 	bl	800651c <PID_GetKI>
 8007550:	8028      	strh	r0, [r5, #0]
}
 8007552:	bd70      	pop	{r4, r5, r6, pc}

08007554 <STO_SetPLLGains>:
  * @param  hPgain new value for PLL proportional gain
  * @param  hIgain new value for PLL integral gain
  * @retval none
  */
__weak void STO_SetPLLGains( STO_PLL_Handle_t * pHandle, int16_t hPgain, int16_t hIgain )
{
 8007554:	b538      	push	{r3, r4, r5, lr}
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 8007556:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800755a:	4620      	mov	r0, r4
{
 800755c:	4615      	mov	r5, r2
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 800755e:	f7fe ffd5 	bl	800650c <PID_SetKP>
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 8007562:	4629      	mov	r1, r5
 8007564:	4620      	mov	r0, r4
}
 8007566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 800756a:	f7fe bfd1 	b.w	8006510 <PID_SetKI>
 800756e:	bf00      	nop

08007570 <STO_OTF_ResetPLL>:
  * @retval none
  */
__weak void STO_OTF_ResetPLL( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  PID_SetIntegralTerm( &pHdl->PIRegulator, ( int32_t )0 );
 8007570:	6800      	ldr	r0, [r0, #0]
 8007572:	2100      	movs	r1, #0
 8007574:	3034      	adds	r0, #52	@ 0x34
 8007576:	f7fe bfd5 	b.w	8006524 <PID_SetIntegralTerm>
 800757a:	bf00      	nop

0800757c <STO_ResetPLL>:
  * @param  pHandle: handler of the current instance of the STO component
  * @retval none
  */
__weak void STO_ResetPLL( STO_PLL_Handle_t * pHandle )
{
  PID_SetIntegralTerm( &pHandle->PIRegulator, ( int32_t )0 );
 800757c:	2100      	movs	r1, #0
 800757e:	3034      	adds	r0, #52	@ 0x34
 8007580:	f7fe bfd0 	b.w	8006524 <PID_SetIntegralTerm>

08007584 <STO_PLL_GetEstimatedBemfLevel>:
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetEstimatedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Est_Bemf_Level );
}
 8007584:	f8d0 0100 	ldr.w	r0, [r0, #256]	@ 0x100
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop

0800758c <STO_PLL_GetObservedBemfLevel>:
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetObservedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Obs_Bemf_Level );
}
 800758c:	f8d0 00fc 	ldr.w	r0, [r0, #252]	@ 0xfc
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop

08007594 <STO_PLL_IsVarianceTight>:
  * @retval bool Variance state
  */
__weak bool STO_PLL_IsVarianceTight( const STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  return ( pHdl->IsSpeedReliable );
 8007594:	6803      	ldr	r3, [r0, #0]
}
 8007596:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 800759a:	4770      	bx	lr

0800759c <STO_PLL_ForceConvergency1>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency1( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency = true;
 800759c:	6803      	ldr	r3, [r0, #0]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop

080075a8 <STO_PLL_ForceConvergency2>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency2( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency2 = true;
 80075a8:	6803      	ldr	r3, [r0, #0]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop

080075b4 <STO_SetDirection>:
  * @brief  forces the rotation direction
  * @param  direction: imposed direction
  */
__weak void STO_SetDirection( STO_PLL_Handle_t * pHandle, uint8_t direction )
{
  pHandle->hForcedDirection = direction;
 80075b4:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
}
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop

080075bc <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 80075bc:	f7fe bc00 	b.w	8005dc0 <FCP_Init>

080075c0 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80075c0:	f890 3097 	ldrb.w	r3, [r0, #151]	@ 0x97
 80075c4:	b17b      	cbz	r3, 80075e6 <UFCP_TX_IRQ_Handler+0x26>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80075c6:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80075ca:	f8d0 1120 	ldr.w	r1, [r0, #288]	@ 0x120
 80075ce:	4602      	mov	r2, r0
    switch ( pBaseHandle->TxFrameLevel )
 80075d0:	b183      	cbz	r3, 80075f4 <UFCP_TX_IRQ_Handler+0x34>
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d008      	beq.n	80075e8 <UFCP_TX_IRQ_Handler+0x28>
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80075d6:	7d40      	ldrb	r0, [r0, #21]
 80075d8:	3001      	adds	r0, #1
 80075da:	4298      	cmp	r0, r3
 80075dc:	db10      	blt.n	8007600 <UFCP_TX_IRQ_Handler+0x40>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80075de:	18d0      	adds	r0, r2, r3
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80075e0:	7d00      	ldrb	r0, [r0, #20]
 80075e2:	6288      	str	r0, [r1, #40]	@ 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80075e4:	e002      	b.n	80075ec <UFCP_TX_IRQ_Handler+0x2c>
 80075e6:	4770      	bx	lr
 80075e8:	7d40      	ldrb	r0, [r0, #21]
 80075ea:	6288      	str	r0, [r1, #40]	@ 0x28
    {
      pBaseHandle->TxFrameLevel++;
 80075ec:	3301      	adds	r3, #1
 80075ee:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 80075f2:	4770      	bx	lr
 80075f4:	7d00      	ldrb	r0, [r0, #20]
 80075f6:	6288      	str	r0, [r1, #40]	@ 0x28
 80075f8:	3301      	adds	r3, #1
 80075fa:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 80075fe:	4770      	bx	lr
{
 8007600:	b410      	push	{r4}
 8007602:	f892 3096 	ldrb.w	r3, [r2, #150]	@ 0x96
 8007606:	628b      	str	r3, [r1, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800760c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	e841 3400 	strex	r4, r3, [r1]
 8007614:	2c00      	cmp	r4, #0
 8007616:	d1f7      	bne.n	8007608 <UFCP_TX_IRQ_Handler+0x48>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8007618:	f882 4097 	strb.w	r4, [r2, #151]	@ 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800761c:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8007620:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8007624:	4718      	bx	r3
 8007626:	bf00      	nop

08007628 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8007628:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 800762c:	b973      	cbnz	r3, 800764c <UFCP_Receive+0x24>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800762e:	2301      	movs	r3, #1

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8007630:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8007634:	f8a0 311c 	strh.w	r3, [r0, #284]	@ 0x11c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800763c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	e842 3100 	strex	r1, r3, [r2]
 8007644:	2900      	cmp	r1, #0
 8007646:	d1f7      	bne.n	8007638 <UFCP_Receive+0x10>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8007648:	2002      	movs	r0, #2
 800764a:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800764c:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800764e:	4770      	bx	lr

08007650 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8007654:	f890 0097 	ldrb.w	r0, [r0, #151]	@ 0x97
 8007658:	bb88      	cbnz	r0, 80076be <UFCP_Send+0x6e>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 800765a:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800765c:	f104 0516 	add.w	r5, r4, #22
    pHandle->TxFrame.Code = code;
 8007660:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8007662:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8007664:	b2c0      	uxtb	r0, r0
 8007666:	b193      	cbz	r3, 800768e <UFCP_Send+0x3e>
 8007668:	2805      	cmp	r0, #5
 800766a:	f102 0101 	add.w	r1, r2, #1
 800766e:	d902      	bls.n	8007676 <UFCP_Send+0x26>
 8007670:	1a6e      	subs	r6, r5, r1
 8007672:	2e02      	cmp	r6, #2
 8007674:	d825      	bhi.n	80076c2 <UFCP_Send+0x72>
 8007676:	3001      	adds	r0, #1
 8007678:	f104 0315 	add.w	r3, r4, #21
 800767c:	4402      	add	r2, r0
 800767e:	e000      	b.n	8007682 <UFCP_Send+0x32>
 8007680:	3101      	adds	r1, #1
 8007682:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8007686:	f803 0f01 	strb.w	r0, [r3, #1]!
 800768a:	428a      	cmp	r2, r1
 800768c:	d1f8      	bne.n	8007680 <UFCP_Send+0x30>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800768e:	f104 0014 	add.w	r0, r4, #20
 8007692:	f7fe fba9 	bl	8005de8 <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
 8007696:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8007698:	2301      	movs	r3, #1

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800769a:	f8d4 2120 	ldr.w	r2, [r4, #288]	@ 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800769e:	f884 0096 	strb.w	r0, [r4, #150]	@ 0x96
    pHandle->TxFrameLevel = 0;
 80076a2:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80076a6:	f884 3097 	strb.w	r3, [r4, #151]	@ 0x97
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80076ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	e842 3100 	strex	r1, r3, [r2]
 80076b6:	2900      	cmp	r1, #0
 80076b8:	d1f7      	bne.n	80076aa <UFCP_Send+0x5a>
 80076ba:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 80076bc:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80076be:	2001      	movs	r0, #1
}
 80076c0:	bd70      	pop	{r4, r5, r6, pc}
 80076c2:	089e      	lsrs	r6, r3, #2
 80076c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80076c8:	4611      	mov	r1, r2
 80076ca:	46ac      	mov	ip, r5
    while ( size-- ) *dest++ = *buffer++;
 80076cc:	f851 eb04 	ldr.w	lr, [r1], #4
 80076d0:	f84c eb04 	str.w	lr, [ip], #4
 80076d4:	428e      	cmp	r6, r1
 80076d6:	d1f9      	bne.n	80076cc <UFCP_Send+0x7c>
 80076d8:	f003 01fc 	and.w	r1, r3, #252	@ 0xfc
 80076dc:	1a40      	subs	r0, r0, r1
 80076de:	079b      	lsls	r3, r3, #30
 80076e0:	b2c0      	uxtb	r0, r0
 80076e2:	eb02 0c01 	add.w	ip, r2, r1
 80076e6:	eb05 0601 	add.w	r6, r5, r1
 80076ea:	d0d0      	beq.n	800768e <UFCP_Send+0x3e>
 80076ec:	5c53      	ldrb	r3, [r2, r1]
 80076ee:	546b      	strb	r3, [r5, r1]
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d0cc      	beq.n	800768e <UFCP_Send+0x3e>
 80076f4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80076f8:	7073      	strb	r3, [r6, #1]
 80076fa:	2801      	cmp	r0, #1
 80076fc:	d0c7      	beq.n	800768e <UFCP_Send+0x3e>
 80076fe:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8007702:	70b3      	strb	r3, [r6, #2]
 8007704:	e7c3      	b.n	800768e <UFCP_Send+0x3e>
 8007706:	bf00      	nop

08007708 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8007708:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 800770c:	b90b      	cbnz	r3, 8007712 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800770e:	482d      	ldr	r0, [pc, #180]	@ (80077c4 <UFCP_RX_IRQ_Handler+0xbc>)
}
 8007710:	4770      	bx	lr
{
 8007712:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8007714:	f890 311d 	ldrb.w	r3, [r0, #285]	@ 0x11d
{
 8007718:	b083      	sub	sp, #12
 800771a:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 800771c:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 800771e:	b1c3      	cbz	r3, 8007752 <UFCP_RX_IRQ_Handler+0x4a>
 8007720:	2b01      	cmp	r3, #1
 8007722:	d00b      	beq.n	800773c <UFCP_RX_IRQ_Handler+0x34>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8007724:	f890 109a 	ldrb.w	r1, [r0, #154]	@ 0x9a
 8007728:	3101      	adds	r1, #1
 800772a:	4299      	cmp	r1, r3
 800772c:	db1b      	blt.n	8007766 <UFCP_RX_IRQ_Handler+0x5e>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800772e:	18c1      	adds	r1, r0, r3
          pBaseHandle->RxFrameLevel++;
 8007730:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8007732:	f881 2099 	strb.w	r2, [r1, #153]	@ 0x99
          pBaseHandle->RxFrameLevel++;
 8007736:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
 800773a:	e007      	b.n	800774c <UFCP_RX_IRQ_Handler+0x44>
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800773c:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 800773e:	bf54      	ite	pl
 8007740:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8007742:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 8007744:	f880 209a 	strb.w	r2, [r0, #154]	@ 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 8007748:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800774c:	481d      	ldr	r0, [pc, #116]	@ (80077c4 <UFCP_RX_IRQ_Handler+0xbc>)
}
 800774e:	b003      	add	sp, #12
 8007750:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8007752:	8a01      	ldrh	r1, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8007754:	481c      	ldr	r0, [pc, #112]	@ (80077c8 <UFCP_RX_IRQ_Handler+0xc0>)
        pBaseHandle->RxFrame.Code = rx_byte;
 8007756:	f884 2099 	strb.w	r2, [r4, #153]	@ 0x99
        pBaseHandle->RxFrameLevel++;
 800775a:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800775c:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 800775e:	f884 311d 	strb.w	r3, [r4, #285]	@ 0x11d
}
 8007762:	b003      	add	sp, #12
 8007764:	bd30      	pop	{r4, r5, pc}
          pBaseHandle->RxTimeoutCountdown = 0;
 8007766:	2300      	movs	r3, #0
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8007768:	f8d0 1120 	ldr.w	r1, [r0, #288]	@ 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800776c:	f880 211b 	strb.w	r2, [r0, #283]	@ 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8007770:	8243      	strh	r3, [r0, #18]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007776:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	e841 3200 	strex	r2, r3, [r1]
 800777e:	2a00      	cmp	r2, #0
 8007780:	d1f7      	bne.n	8007772 <UFCP_RX_IRQ_Handler+0x6a>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007782:	f884 211c 	strb.w	r2, [r4, #284]	@ 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8007786:	f104 0099 	add.w	r0, r4, #153	@ 0x99
 800778a:	f7fe fb2d 	bl	8005de8 <FCP_CalcCRC>
 800778e:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 8007792:	4283      	cmp	r3, r0
 8007794:	d10a      	bne.n	80077ac <UFCP_RX_IRQ_Handler+0xa4>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8007796:	68a5      	ldr	r5, [r4, #8]
 8007798:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 800779c:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 80077a0:	6820      	ldr	r0, [r4, #0]
 80077a2:	f104 029b 	add.w	r2, r4, #155	@ 0x9b
 80077a6:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80077a8:	4808      	ldr	r0, [pc, #32]	@ (80077cc <UFCP_RX_IRQ_Handler+0xc4>)
  return ret_val;
 80077aa:	e7d0      	b.n	800774e <UFCP_RX_IRQ_Handler+0x46>
            error_code = FCP_MSG_RX_BAD_CRC;
 80077ac:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80077ae:	2301      	movs	r3, #1
 80077b0:	f10d 0207 	add.w	r2, sp, #7
 80077b4:	21ff      	movs	r1, #255	@ 0xff
 80077b6:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 80077b8:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80077bc:	f7ff ff48 	bl	8007650 <UFCP_Send>
 80077c0:	e7f2      	b.n	80077a8 <UFCP_RX_IRQ_Handler+0xa0>
 80077c2:	bf00      	nop
 80077c4:	08007b08 	.word	0x08007b08
 80077c8:	08007b06 	.word	0x08007b06
 80077cc:	08007b04 	.word	0x08007b04

080077d0 <UFCP_OVR_IRQ_Handler>:
{
 80077d0:	b500      	push	{lr}
 80077d2:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 80077d4:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80077d8:	2301      	movs	r3, #1
 80077da:	f10d 0207 	add.w	r2, sp, #7
 80077de:	21ff      	movs	r1, #255	@ 0xff
  error_code = UFCP_MSG_OVERRUN;
 80077e0:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80077e4:	f7ff ff34 	bl	8007650 <UFCP_Send>
}
 80077e8:	b003      	add	sp, #12
 80077ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80077ee:	bf00      	nop

080077f0 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80077f0:	2300      	movs	r3, #0
 80077f2:	f880 311c 	strb.w	r3, [r0, #284]	@ 0x11c
}
 80077f6:	4770      	bx	lr

080077f8 <VVBS_Init>:
  * @retval none
  */
__weak void VVBS_Init( VirtualBusVoltageSensor_Handle_t * pHandle )
{
  pHandle->_Super.FaultState = MC_NO_ERROR;
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 80077f8:	8941      	ldrh	r1, [r0, #10]
  pHandle->_Super.FaultState = MC_NO_ERROR;
 80077fa:	2200      	movs	r2, #0
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 80077fc:	4613      	mov	r3, r2
 80077fe:	f361 030f 	bfi	r3, r1, #0, #16
 8007802:	f361 431f 	bfi	r3, r1, #16, #16
  pHandle->_Super.FaultState = MC_NO_ERROR;
 8007806:	8102      	strh	r2, [r0, #8]
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 8007808:	6043      	str	r3, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = pHandle->ExpectedVbus_d;
}
 800780a:	4770      	bx	lr

0800780c <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800780c:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800780e:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8007810:	7003      	strb	r3, [r0, #0]
  pHandle->wElSpeedDpp32 = 0;
 8007812:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.hElAngle = 0;
 8007816:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8007818:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 800781a:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 800781c:	8503      	strh	r3, [r0, #40]	@ 0x28
  pHandle->bTransitionStarted = false;
 800781e:	8583      	strh	r3, [r0, #44]	@ 0x2c
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8007820:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  pHandle->hElAngleAccu = 0;
 8007822:	6303      	str	r3, [r0, #48]	@ 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop

08007828 <VSS_Init>:
{
 8007828:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 800782a:	f7ff ffef 	bl	800780c <VSS_Clear>
}
 800782e:	bd08      	pop	{r3, pc}

08007830 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8007830:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 8007834:	4603      	mov	r3, r0
  if ( pHandle->bCopyObserver == true )
 8007836:	b11a      	cbz	r2, 8007840 <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 8007838:	f9b1 0000 	ldrsh.w	r0, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 800783c:	8098      	strh	r0, [r3, #4]
  return hRetAngle;
}
 800783e:	4770      	bx	lr
{
 8007840:	b530      	push	{r4, r5, lr}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007842:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8007846:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007848:	88dd      	ldrh	r5, [r3, #6]
    if ( pHandle->bTransitionStarted == true )
 800784a:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 800784e:	785a      	ldrb	r2, [r3, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007850:	fb9c f2f2 	sdiv	r2, ip, r2
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007854:	4460      	add	r0, ip
 8007856:	fa1f fe80 	uxth.w	lr, r0
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800785a:	442a      	add	r2, r5
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800785c:	b200      	sxth	r0, r0
 800785e:	8618      	strh	r0, [r3, #48]	@ 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007860:	80da      	strh	r2, [r3, #6]
    if ( pHandle->bTransitionStarted == true )
 8007862:	b1fc      	cbz	r4, 80078a4 <VSS_CalcElAngle+0x74>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8007864:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 8007868:	b1f2      	cbz	r2, 80078a8 <VSS_CalcElAngle+0x78>
        pHandle->hTransitionRemainingSteps--;
 800786a:	3a01      	subs	r2, #1
 800786c:	b212      	sxth	r2, r2
 800786e:	85da      	strh	r2, [r3, #46]	@ 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8007870:	f1bc 0f00 	cmp.w	ip, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8007874:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8007876:	db26      	blt.n	80078c6 <VSS_CalcElAngle+0x96>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8007878:	eba1 0e0e 	sub.w	lr, r1, lr
 800787c:	fa0f fe8e 	sxth.w	lr, lr
 8007880:	2501      	movs	r5, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8007882:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 8007886:	fb0e f202 	mul.w	r2, lr, r2
        if ( hAngleDiff >= 0 )
 800788a:	f1be 0f00 	cmp.w	lr, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 800788e:	fb92 f2f4 	sdiv	r2, r2, r4
        hAngleCorr *= hSignCorr;
 8007892:	fb12 f205 	smulbb	r2, r2, r5
 8007896:	b292      	uxth	r2, r2
        if ( hAngleDiff >= 0 )
 8007898:	db0e      	blt.n	80078b8 <VSS_CalcElAngle+0x88>
          pHandle->bTransitionLocked = true;
 800789a:	2001      	movs	r0, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 800789c:	1a8a      	subs	r2, r1, r2
          pHandle->bTransitionLocked = true;
 800789e:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80078a2:	b210      	sxth	r0, r2
  pHandle->_Super.hElAngle = hRetAngle;
 80078a4:	8098      	strh	r0, [r3, #4]
}
 80078a6:	bd30      	pop	{r4, r5, pc}
        hRetAngle = *( int16_t * )pInputVars_str;
 80078a8:	f9b1 0000 	ldrsh.w	r0, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 80078ac:	701a      	strb	r2, [r3, #0]
        pHandle->bTransitionEnded = true;
 80078ae:	2401      	movs	r4, #1
 80078b0:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 80078b4:	8098      	strh	r0, [r3, #4]
}
 80078b6:	bd30      	pop	{r4, r5, pc}
          if ( pHandle->bTransitionLocked == false )
 80078b8:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 80078bc:	2c00      	cmp	r4, #0
 80078be:	d0f1      	beq.n	80078a4 <VSS_CalcElAngle+0x74>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 80078c0:	440a      	add	r2, r1
 80078c2:	b210      	sxth	r0, r2
 80078c4:	e7ee      	b.n	80078a4 <VSS_CalcElAngle+0x74>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 80078c6:	ebae 0e01 	sub.w	lr, lr, r1
 80078ca:	fa0f fe8e 	sxth.w	lr, lr
 80078ce:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 80078d2:	e7d6      	b.n	8007882 <VSS_CalcElAngle+0x52>

080078d4 <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 80078d4:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 80078d6:	2a01      	cmp	r2, #1
{
 80078d8:	4603      	mov	r3, r0
  if ( pHandle->hRemainingStep > 1u )
 80078da:	d924      	bls.n	8007926 <VSS_CalcAvrgMecSpeedUnit+0x52>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80078dc:	e9d0 0208 	ldrd	r0, r2, [r0, #32]
 80078e0:	4410      	add	r0, r2
 80078e2:	6258      	str	r0, [r3, #36]	@ 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 80078e4:	2800      	cmp	r0, #0
 80078e6:	bfb8      	it	lt
 80078e8:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 80078ec:	8b5a      	ldrh	r2, [r3, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80078ee:	f893 c001 	ldrb.w	ip, [r3, #1]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 80078f2:	bfb8      	it	lt
 80078f4:	30ff      	addlt	r0, #255	@ 0xff
 80078f6:	1400      	asrs	r0, r0, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 80078f8:	fb00 f202 	mul.w	r2, r0, r2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 80078fc:	81d8      	strh	r0, [r3, #14]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80078fe:	69d8      	ldr	r0, [r3, #28]
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8007900:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8007904:	fb00 f00c 	mul.w	r0, r0, ip
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8007908:	0052      	lsls	r2, r2, #1
 800790a:	fb92 f2f0 	sdiv	r2, r2, r0
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800790e:	b212      	sxth	r2, r2
 8007910:	800a      	strh	r2, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8007912:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007914:	819a      	strh	r2, [r3, #12]
    pHandle->hRemainingStep--;
 8007916:	1e42      	subs	r2, r0, #1
 8007918:	851a      	strh	r2, [r3, #40]	@ 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 800791a:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
 800791e:	b950      	cbnz	r0, 8007936 <VSS_CalcAvrgMecSpeedUnit+0x62>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007920:	78da      	ldrb	r2, [r3, #3]
 8007922:	701a      	strb	r2, [r3, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8007924:	4770      	bx	lr
  else if ( pHandle->hRemainingStep == 1u )
 8007926:	d009      	beq.n	800793c <VSS_CalcAvrgMecSpeedUnit+0x68>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007928:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
  if ( pHandle->bTransitionEnded == false )
 800792c:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007930:	800a      	strh	r2, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 8007932:	2800      	cmp	r0, #0
 8007934:	d0f4      	beq.n	8007920 <VSS_CalcAvrgMecSpeedUnit+0x4c>
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 8007936:	4618      	mov	r0, r3
 8007938:	f7ff b9a6 	b.w	8006c88 <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800793c:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 8007940:	f8a1 c000 	strh.w	ip, [r1]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007944:	8b42      	ldrh	r2, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8007946:	69c0      	ldr	r0, [r0, #28]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007948:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800794c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007950:	0052      	lsls	r2, r2, #1
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8007952:	fb00 f00c 	mul.w	r0, r0, ip
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 8007956:	fb90 f0f2 	sdiv	r0, r0, r2
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800795a:	785a      	ldrb	r2, [r3, #1]
 800795c:	fb12 f200 	smulbb	r2, r2, r0
    pHandle->hRemainingStep = 0u;
 8007960:	2000      	movs	r0, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007962:	81da      	strh	r2, [r3, #14]
    pHandle->hRemainingStep = 0u;
 8007964:	8518      	strh	r0, [r3, #40]	@ 0x28
 8007966:	e7d8      	b.n	800791a <VSS_CalcAvrgMecSpeedUnit+0x46>

08007968 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8007968:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 800796a:	8601      	strh	r1, [r0, #48]	@ 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800796c:	fb91 f3f3 	sdiv	r3, r1, r3
  pHandle->_Super.hElAngle = hMecAngle;
 8007970:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8007972:	80c3      	strh	r3, [r0, #6]
}
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop

08007978 <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8007978:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800797c:	b9a3      	cbnz	r3, 80079a8 <VSS_SetMecAcceleration+0x30>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800797e:	8b43      	ldrh	r3, [r0, #26]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007980:	f890 c001 	ldrb.w	ip, [r0, #1]
{
 8007984:	b510      	push	{r4, lr}
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8007986:	69c4      	ldr	r4, [r0, #28]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007988:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800798c:	fb04 fe01 	mul.w	lr, r4, r1
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007990:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8007992:	fb9e fef3 	sdiv	lr, lr, r3
    if ( hDurationms == 0u )
 8007996:	b942      	cbnz	r2, 80079aa <VSS_SetMecAcceleration+0x32>
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007998:	fb1e fe0c 	smulbb	lr, lr, ip
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800799c:	8181      	strh	r1, [r0, #12]
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800799e:	f8a0 e00e 	strh.w	lr, [r0, #14]

      pHandle->hRemainingStep = 0u;
 80079a2:	8502      	strh	r2, [r0, #40]	@ 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80079a4:	8541      	strh	r1, [r0, #42]	@ 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 80079a6:	bd10      	pop	{r4, pc}
 80079a8:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 80079aa:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80079ac:	8541      	strh	r1, [r0, #42]	@ 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 80079ae:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 80079b2:	4a0b      	ldr	r2, [pc, #44]	@ (80079e0 <VSS_SetMecAcceleration+0x68>)
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 80079b4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 80079b8:	fba2 2303 	umull	r2, r3, r2, r3
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 80079bc:	f3c3 138f 	ubfx	r3, r3, #6, #16
      hNbrStep++;
 80079c0:	3301      	adds	r3, #1
 80079c2:	b29b      	uxth	r3, r3
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 80079c4:	fb91 f2fc 	sdiv	r2, r1, ip
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 80079c8:	ebae 0202 	sub.w	r2, lr, r2
      pHandle->hRemainingStep = hNbrStep;
 80079cc:	8503      	strh	r3, [r0, #40]	@ 0x28
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 80079ce:	0412      	lsls	r2, r2, #16
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 80079d0:	0409      	lsls	r1, r1, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 80079d2:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 80079d6:	fb0c f303 	mul.w	r3, ip, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 80079da:	e9c0 3108 	strd	r3, r1, [r0, #32]
}
 80079de:	bd10      	pop	{r4, pc}
 80079e0:	10624dd3 	.word	0x10624dd3

080079e4 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 80079e4:	b151      	cbz	r1, 80079fc <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 80079e6:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
    pHandle->bTransitionStarted = true;
 80079ea:	2201      	movs	r2, #1
 80079ec:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 80079f0:	b923      	cbnz	r3, 80079fc <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 80079f2:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 80079f6:	7003      	strb	r3, [r0, #0]
      bAux = false;
 80079f8:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 80079fa:	4770      	bx	lr
  bool bAux = true;
 80079fc:	2001      	movs	r0, #1
 80079fe:	4770      	bx	lr

08007a00 <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8007a00:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop

08007a08 <memset>:
 8007a08:	4402      	add	r2, r0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d100      	bne.n	8007a12 <memset+0xa>
 8007a10:	4770      	bx	lr
 8007a12:	f803 1b01 	strb.w	r1, [r3], #1
 8007a16:	e7f9      	b.n	8007a0c <memset+0x4>

08007a18 <__libc_init_array>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8007a50 <__libc_init_array+0x38>)
 8007a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8007a54 <__libc_init_array+0x3c>)
 8007a1e:	1b64      	subs	r4, r4, r5
 8007a20:	10a4      	asrs	r4, r4, #2
 8007a22:	2600      	movs	r6, #0
 8007a24:	42a6      	cmp	r6, r4
 8007a26:	d109      	bne.n	8007a3c <__libc_init_array+0x24>
 8007a28:	4d0b      	ldr	r5, [pc, #44]	@ (8007a58 <__libc_init_array+0x40>)
 8007a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8007a5c <__libc_init_array+0x44>)
 8007a2c:	f000 f818 	bl	8007a60 <_init>
 8007a30:	1b64      	subs	r4, r4, r5
 8007a32:	10a4      	asrs	r4, r4, #2
 8007a34:	2600      	movs	r6, #0
 8007a36:	42a6      	cmp	r6, r4
 8007a38:	d105      	bne.n	8007a46 <__libc_init_array+0x2e>
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a40:	4798      	blx	r3
 8007a42:	3601      	adds	r6, #1
 8007a44:	e7ee      	b.n	8007a24 <__libc_init_array+0xc>
 8007a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a4a:	4798      	blx	r3
 8007a4c:	3601      	adds	r6, #1
 8007a4e:	e7f2      	b.n	8007a36 <__libc_init_array+0x1e>
 8007a50:	08007b14 	.word	0x08007b14
 8007a54:	08007b14 	.word	0x08007b14
 8007a58:	08007b14 	.word	0x08007b14
 8007a5c:	08007b18 	.word	0x08007b18

08007a60 <_init>:
 8007a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a62:	bf00      	nop
 8007a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a66:	bc08      	pop	{r3}
 8007a68:	469e      	mov	lr, r3
 8007a6a:	4770      	bx	lr

08007a6c <_fini>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr
