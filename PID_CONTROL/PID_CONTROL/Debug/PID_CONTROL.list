
PID_CONTROL.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800352c  0800352c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800352c  0800352c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800352c  0800352c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800352c  0800352c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003530  08003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000084  080035b8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080035b8  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006015  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fe6  00000000  00000000  000260c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000290  00000000  00000000  000270a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000208  00000000  00000000  00027338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000032ef  00000000  00000000  00027540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003a5f  00000000  00000000  0002a82f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b002  00000000  00000000  0002e28e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00039290  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d20  00000000  00000000  0003930c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000084 	.word	0x20000084
 800014c:	00000000 	.word	0x00000000
 8000150:	080034d8 	.word	0x080034d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000088 	.word	0x20000088
 800016c:	080034d8 	.word	0x080034d8

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	d1ed      	bne.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2iz>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000720:	d30f      	bcc.n	8000742 <__aeabi_f2iz+0x2a>
 8000722:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d90d      	bls.n	8000748 <__aeabi_f2iz+0x30>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000734:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000738:	fa23 f002 	lsr.w	r0, r3, r2
 800073c:	bf18      	it	ne
 800073e:	4240      	negne	r0, r0
 8000740:	4770      	bx	lr
 8000742:	f04f 0000 	mov.w	r0, #0
 8000746:	4770      	bx	lr
 8000748:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800074c:	d101      	bne.n	8000752 <__aeabi_f2iz+0x3a>
 800074e:	0242      	lsls	r2, r0, #9
 8000750:	d105      	bne.n	800075e <__aeabi_f2iz+0x46>
 8000752:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000756:	bf08      	it	eq
 8000758:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr

08000764 <__aeabi_f2uiz>:
 8000764:	0042      	lsls	r2, r0, #1
 8000766:	d20e      	bcs.n	8000786 <__aeabi_f2uiz+0x22>
 8000768:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800076c:	d30b      	bcc.n	8000786 <__aeabi_f2uiz+0x22>
 800076e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000772:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000776:	d409      	bmi.n	800078c <__aeabi_f2uiz+0x28>
 8000778:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800077c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000780:	fa23 f002 	lsr.w	r0, r3, r2
 8000784:	4770      	bx	lr
 8000786:	f04f 0000 	mov.w	r0, #0
 800078a:	4770      	bx	lr
 800078c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000790:	d101      	bne.n	8000796 <__aeabi_f2uiz+0x32>
 8000792:	0242      	lsls	r2, r0, #9
 8000794:	d102      	bne.n	800079c <__aeabi_f2uiz+0x38>
 8000796:	f04f 30ff 	mov.w	r0, #4294967295
 800079a:	4770      	bx	lr
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <main>:
//===================================
int X=0;
char text[4]={0};

int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af04      	add	r7, sp, #16
	//*******************************************************
	//=====================SYSTEM INIT ======================
	//*******************************************************
	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);//speed of CPU to 36MHz
 80007aa:	2100      	movs	r1, #0
 80007ac:	2000      	movs	r0, #0
 80007ae:	f001 f8f9 	bl	80019a4 <MCAL_speed_init>
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,clk);
 80007b2:	4b49      	ldr	r3, [pc, #292]	; (80008d8 <main+0x134>)
 80007b4:	9302      	str	r3, [sp, #8]
 80007b6:	2300      	movs	r3, #0
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2300      	movs	r3, #0
 80007c2:	2200      	movs	r2, #0
 80007c4:	210c      	movs	r1, #12
 80007c6:	4845      	ldr	r0, [pc, #276]	; (80008dc <main+0x138>)
 80007c8:	f001 ff00 	bl	80025cc <USART_INIT>
	EXTI(GPIOA,pin4,EXTI_Trigger_Rising,intA);// INIT external interrupt to encoder
 80007cc:	4b44      	ldr	r3, [pc, #272]	; (80008e0 <main+0x13c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	2104      	movs	r1, #4
 80007d2:	4844      	ldr	r0, [pc, #272]	; (80008e4 <main+0x140>)
 80007d4:	f001 f9d8 	bl	8001b88 <EXTI>
	//===================== WHILE ===========================
	//*******************************************************

	while(1){

			pid_read=PID(200,X);
 80007d8:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <main+0x144>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	20c8      	movs	r0, #200	; 0xc8
 80007e0:	f000 f88e 	bl	8000900 <PID>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fd7c 	bl	80002e4 <__aeabi_i2f>
 80007ec:	4602      	mov	r2, r0
 80007ee:	4b3f      	ldr	r3, [pc, #252]	; (80008ec <main+0x148>)
 80007f0:	601a      	str	r2, [r3, #0]
			if(pid_read>0){//right control
 80007f2:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <main+0x148>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f04f 0100 	mov.w	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff82 	bl	8000704 <__aeabi_fcmpgt>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d017      	beq.n	8000836 <main+0x92>
				PWM(TIM1, CH_3,0,3500, clk);
 8000806:	4b34      	ldr	r3, [pc, #208]	; (80008d8 <main+0x134>)
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	f640 53ac 	movw	r3, #3500	; 0xdac
 800080e:	2200      	movs	r2, #0
 8000810:	2103      	movs	r1, #3
 8000812:	4837      	ldr	r0, [pc, #220]	; (80008f0 <main+0x14c>)
 8000814:	f000 fac0 	bl	8000d98 <PWM>
				PWM(TIM1, CH_1,pid_read,3500, clk);
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <main+0x148>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ffa1 	bl	8000764 <__aeabi_f2uiz>
 8000822:	4602      	mov	r2, r0
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <main+0x134>)
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	f640 53ac 	movw	r3, #3500	; 0xdac
 800082c:	2101      	movs	r1, #1
 800082e:	4830      	ldr	r0, [pc, #192]	; (80008f0 <main+0x14c>)
 8000830:	f000 fab2 	bl	8000d98 <PWM>
 8000834:	e035      	b.n	80008a2 <main+0xfe>
			}
			else if(pid_read<0){//left control
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <main+0x148>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f04f 0100 	mov.w	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff42 	bl	80006c8 <__aeabi_fcmplt>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d019      	beq.n	800087e <main+0xda>
				PWM(TIM1, CH_1,0,3500, clk);
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <main+0x134>)
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000852:	2200      	movs	r2, #0
 8000854:	2101      	movs	r1, #1
 8000856:	4826      	ldr	r0, [pc, #152]	; (80008f0 <main+0x14c>)
 8000858:	f000 fa9e 	bl	8000d98 <PWM>
				PWM(TIM1, CH_3,-pid_read,3500, clk);
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <main+0x148>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff7d 	bl	8000764 <__aeabi_f2uiz>
 800086a:	4602      	mov	r2, r0
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <main+0x134>)
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000874:	2103      	movs	r1, #3
 8000876:	481e      	ldr	r0, [pc, #120]	; (80008f0 <main+0x14c>)
 8000878:	f000 fa8e 	bl	8000d98 <PWM>
 800087c:	e011      	b.n	80008a2 <main+0xfe>
			}
			else{//stop range
				PWM(TIM1, CH_1,0,3500, clk);
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <main+0x134>)
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000886:	2200      	movs	r2, #0
 8000888:	2101      	movs	r1, #1
 800088a:	4819      	ldr	r0, [pc, #100]	; (80008f0 <main+0x14c>)
 800088c:	f000 fa84 	bl	8000d98 <PWM>
				PWM(TIM1, CH_3,0,3500, clk);
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <main+0x134>)
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000898:	2200      	movs	r2, #0
 800089a:	2103      	movs	r1, #3
 800089c:	4814      	ldr	r0, [pc, #80]	; (80008f0 <main+0x14c>)
 800089e:	f000 fa7b 	bl	8000d98 <PWM>

			//analysis
			//*******************************************************
			//==================-SEND_ANALYSIS- =====================
			//*******************************************************
			USART_SEND_STRING(USART1,"\n ");
 80008a2:	4914      	ldr	r1, [pc, #80]	; (80008f4 <main+0x150>)
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <main+0x138>)
 80008a6:	f001 ff75 	bl	8002794 <USART_SEND_STRING>
			delay(3, U_ms, clk);
 80008aa:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <main+0x134>)
 80008ac:	2100      	movs	r1, #0
 80008ae:	2003      	movs	r0, #3
 80008b0:	f000 fe00 	bl	80014b4 <delay>
			sprintf(text,"%d",X);
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <main+0x144>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	490f      	ldr	r1, [pc, #60]	; (80008f8 <main+0x154>)
 80008bc:	480f      	ldr	r0, [pc, #60]	; (80008fc <main+0x158>)
 80008be:	f002 f9f9 	bl	8002cb4 <siprintf>
			USART_SEND_STRING(USART1,text);
 80008c2:	490e      	ldr	r1, [pc, #56]	; (80008fc <main+0x158>)
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <main+0x138>)
 80008c6:	f001 ff65 	bl	8002794 <USART_SEND_STRING>
			delay(5, U_ms, clk);
 80008ca:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <main+0x134>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	2005      	movs	r0, #5
 80008d0:	f000 fdf0 	bl	80014b4 <delay>
			pid_read=PID(200,X);
 80008d4:	e780      	b.n	80007d8 <main+0x34>
 80008d6:	bf00      	nop
 80008d8:	02255100 	.word	0x02255100
 80008dc:	40013800 	.word	0x40013800
 80008e0:	080009f9 	.word	0x080009f9
 80008e4:	40010800 	.word	0x40010800
 80008e8:	200000a0 	.word	0x200000a0
 80008ec:	200000c8 	.word	0x200000c8
 80008f0:	40012c00 	.word	0x40012c00
 80008f4:	080034f0 	.word	0x080034f0
 80008f8:	080034f4 	.word	0x080034f4
 80008fc:	200000a4 	.word	0x200000a4

08000900 <PID>:


//*******************************************************
//===================== -PID- ===========================
//*******************************************************
int PID (int target_position,int actual_position){
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]

	error = target_position - actual_position;
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fce7 	bl	80002e4 <__aeabi_i2f>
 8000916:	4602      	mov	r2, r0
 8000918:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <PID+0xd8>)
 800091a:	601a      	str	r2, [r3, #0]
	pid_d =error - prev_error;
 800091c:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <PID+0xd8>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <PID+0xdc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	4610      	mov	r0, r2
 8000928:	f7ff fc26 	bl	8000178 <__aeabi_fsub>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <PID+0xe0>)
 8000932:	601a      	str	r2, [r3, #0]
	integral+=error;
 8000934:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <PID+0xe4>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <PID+0xd8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	4610      	mov	r0, r2
 8000940:	f7ff fc1c 	bl	800017c <__addsf3>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <PID+0xe4>)
 800094a:	601a      	str	r2, [r3, #0]
	pid_res =error * kp + pid_d * kd+integral*ki;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <PID+0xd8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a25      	ldr	r2, [pc, #148]	; (80009e8 <PID+0xe8>)
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fd19 	bl	800038c <__aeabi_fmul>
 800095a:	4603      	mov	r3, r0
 800095c:	461c      	mov	r4, r3
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <PID+0xe0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a22      	ldr	r2, [pc, #136]	; (80009ec <PID+0xec>)
 8000964:	4611      	mov	r1, r2
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fd10 	bl	800038c <__aeabi_fmul>
 800096c:	4603      	mov	r3, r0
 800096e:	4619      	mov	r1, r3
 8000970:	4620      	mov	r0, r4
 8000972:	f7ff fc03 	bl	800017c <__addsf3>
 8000976:	4603      	mov	r3, r0
 8000978:	461c      	mov	r4, r3
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <PID+0xe4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f04f 0200 	mov.w	r2, #0
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fd01 	bl	800038c <__aeabi_fmul>
 800098a:	4603      	mov	r3, r0
 800098c:	4619      	mov	r1, r3
 800098e:	4620      	mov	r0, r4
 8000990:	f7ff fbf4 	bl	800017c <__addsf3>
 8000994:	4603      	mov	r3, r0
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff febe 	bl	8000718 <__aeabi_f2iz>
 800099c:	4602      	mov	r2, r0
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <PID+0xf0>)
 80009a0:	601a      	str	r2, [r3, #0]

	if(pid_res<-max_speed){
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <PID+0xf0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80009aa:	da02      	bge.n	80009b2 <PID+0xb2>
		pid_res=-max_speed;
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <PID+0xf0>)
 80009ae:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <PID+0xf4>)
 80009b0:	601a      	str	r2, [r3, #0]
	}

	if(pid_res>max_speed){
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <PID+0xf0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009ba:	dd03      	ble.n	80009c4 <PID+0xc4>
		pid_res=max_speed;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <PID+0xf0>)
 80009be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009c2:	601a      	str	r2, [r3, #0]
	}

	prev_error=error;
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <PID+0xd8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <PID+0xdc>)
 80009ca:	6013      	str	r3, [r2, #0]
	return pid_res ;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <PID+0xf0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	200000cc 	.word	0x200000cc
 80009dc:	200000d0 	.word	0x200000d0
 80009e0:	200000c0 	.word	0x200000c0
 80009e4:	200000d4 	.word	0x200000d4
 80009e8:	42700000 	.word	0x42700000
 80009ec:	41200000 	.word	0x41200000
 80009f0:	200000c4 	.word	0x200000c4
 80009f4:	fffffc18 	.word	0xfffffc18

080009f8 <intA>:


//*******************************************************
//===================== encoder ISR =====================
//*******************************************************
void intA(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	int b = READ_PIN(GPIOA, pin5);
 80009fe:	2105      	movs	r1, #5
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <intA+0x38>)
 8000a02:	f000 f9b5 	bl	8000d70 <READ_PIN>
 8000a06:	4603      	mov	r3, r0
 8000a08:	607b      	str	r3, [r7, #4]
	if(b > 0){
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	dd05      	ble.n	8000a1c <intA+0x24>
		X--;
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <intA+0x3c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <intA+0x3c>)
 8000a18:	6013      	str	r3, [r2, #0]
	}
	else{
		X++;
	}
}
 8000a1a:	e004      	b.n	8000a26 <intA+0x2e>
		X++;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <intA+0x3c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <intA+0x3c>)
 8000a24:	6013      	str	r3, [r2, #0]
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40010800 	.word	0x40010800
 8000a34:	200000a0 	.word	0x200000a0

08000a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <_sbrk+0x5c>)
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <_sbrk+0x60>)
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <_sbrk+0x64>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <_sbrk+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d207      	bcs.n	8000a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a68:	f002 f8fa 	bl	8002c60 <__errno>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	230c      	movs	r3, #12
 8000a70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e009      	b.n	8000a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <_sbrk+0x64>)
 8000a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20005000 	.word	0x20005000
 8000a98:	00000400 	.word	0x00000400
 8000a9c:	200000a8 	.word	0x200000a8
 8000aa0:	20000168 	.word	0x20000168

08000aa4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000aa8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <LoopForever+0xe>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	; (8000af0 <LoopForever+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ad2:	f002 f8cb 	bl	8002c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad6:	f7ff fe65 	bl	80007a4 <main>

08000ada <LoopForever>:

LoopForever:
    b LoopForever
 8000ada:	e7fe      	b.n	8000ada <LoopForever>
  ldr   r0, =_estack
 8000adc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000ae8:	08003534 	.word	0x08003534
  ldr r2, =_sbss
 8000aec:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000af0:	20000164 	.word	0x20000164

08000af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_2_IRQHandler>

08000af6 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000af6:	b480      	push	{r7}
 8000af8:	b085      	sub	sp, #20
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <getposition+0x14>
		rval =0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d101      	bne.n	8000b14 <getposition+0x1e>
		rval =4;
 8000b10:	2304      	movs	r3, #4
 8000b12:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d101      	bne.n	8000b1e <getposition+0x28>
		rval =8;
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d101      	bne.n	8000b28 <getposition+0x32>
		rval =12;
 8000b24:	230c      	movs	r3, #12
 8000b26:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d101      	bne.n	8000b32 <getposition+0x3c>
		rval =16;
 8000b2e:	2310      	movs	r3, #16
 8000b30:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	2b05      	cmp	r3, #5
 8000b36:	d101      	bne.n	8000b3c <getposition+0x46>
		rval =20;
 8000b38:	2314      	movs	r3, #20
 8000b3a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d101      	bne.n	8000b46 <getposition+0x50>
		rval =24;
 8000b42:	2318      	movs	r3, #24
 8000b44:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	2b07      	cmp	r3, #7
 8000b4a:	d101      	bne.n	8000b50 <getposition+0x5a>
		rval =28;
 8000b4c:	231c      	movs	r3, #28
 8000b4e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	2b08      	cmp	r3, #8
 8000b54:	d101      	bne.n	8000b5a <getposition+0x64>
		rval =0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	2b09      	cmp	r3, #9
 8000b5e:	d101      	bne.n	8000b64 <getposition+0x6e>
		rval =4;
 8000b60:	2304      	movs	r3, #4
 8000b62:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	2b0a      	cmp	r3, #10
 8000b68:	d101      	bne.n	8000b6e <getposition+0x78>
		rval =8;
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	2b0b      	cmp	r3, #11
 8000b72:	d101      	bne.n	8000b78 <getposition+0x82>
		rval =12;
 8000b74:	230c      	movs	r3, #12
 8000b76:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	2b0c      	cmp	r3, #12
 8000b7c:	d101      	bne.n	8000b82 <getposition+0x8c>
		rval =16;
 8000b7e:	2310      	movs	r3, #16
 8000b80:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	2b0d      	cmp	r3, #13
 8000b86:	d101      	bne.n	8000b8c <getposition+0x96>
		rval =20;
 8000b88:	2314      	movs	r3, #20
 8000b8a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	2b0e      	cmp	r3, #14
 8000b90:	d101      	bne.n	8000b96 <getposition+0xa0>
		rval =24;
 8000b92:	2318      	movs	r3, #24
 8000b94:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d101      	bne.n	8000ba0 <getposition+0xaa>
		rval =28;
 8000b9c:	231c      	movs	r3, #28
 8000b9e:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]


}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4a69      	ldr	r2, [pc, #420]	; (8000d64 <pinmode+0x1b8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d106      	bne.n	8000bd0 <pinmode+0x24>
		GPIOA_Clock_Enable();
 8000bc2:	4b69      	ldr	r3, [pc, #420]	; (8000d68 <pinmode+0x1bc>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	4a68      	ldr	r2, [pc, #416]	; (8000d68 <pinmode+0x1bc>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	e010      	b.n	8000bf2 <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4a66      	ldr	r2, [pc, #408]	; (8000d6c <pinmode+0x1c0>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d106      	bne.n	8000be6 <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8000bd8:	4b63      	ldr	r3, [pc, #396]	; (8000d68 <pinmode+0x1bc>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a62      	ldr	r2, [pc, #392]	; (8000d68 <pinmode+0x1bc>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	e005      	b.n	8000bf2 <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 8000be6:	4b60      	ldr	r3, [pc, #384]	; (8000d68 <pinmode+0x1bc>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	4a5f      	ldr	r2, [pc, #380]	; (8000d68 <pinmode+0x1bc>)
 8000bec:	f043 0310 	orr.w	r3, r3, #16
 8000bf0:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8000bf2:	897b      	ldrh	r3, [r7, #10]
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	d856      	bhi.n	8000ca6 <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 8000bf8:	897b      	ldrh	r3, [r7, #10]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff7b 	bl	8000af6 <getposition>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	230f      	movs	r3, #15
 8000c06:	4093      	lsls	r3, r2
 8000c08:	43da      	mvns	r2, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d002      	beq.n	8000c20 <pinmode+0x74>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b18      	cmp	r3, #24
 8000c1e:	d133      	bne.n	8000c88 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b18      	cmp	r3, #24
 8000c24:	d117      	bne.n	8000c56 <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000c26:	897b      	ldrh	r3, [r7, #10]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff64 	bl	8000af6 <getposition>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	2308      	movs	r3, #8
 8000c34:	fa03 f202 	lsl.w	r2, r3, r2
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	897a      	ldrh	r2, [r7, #10]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000c54:	e081      	b.n	8000d5a <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000c56:	897b      	ldrh	r3, [r7, #10]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff4c 	bl	8000af6 <getposition>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	2308      	movs	r3, #8
 8000c64:	fa03 f202 	lsl.w	r2, r3, r2
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	897a      	ldrh	r2, [r7, #10]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7e:	43d2      	mvns	r2, r2
 8000c80:	401a      	ands	r2, r3
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000c86:	e068      	b.n	8000d5a <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 8000c88:	897b      	ldrh	r3, [r7, #10]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff33 	bl	8000af6 <getposition>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	fa03 f202 	lsl.w	r2, r3, r2
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	601a      	str	r2, [r3, #0]

	}



}
 8000ca4:	e059      	b.n	8000d5a <pinmode+0x1ae>
	else if(pin>7){
 8000ca6:	897b      	ldrh	r3, [r7, #10]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	d956      	bls.n	8000d5a <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 8000cac:	897b      	ldrh	r3, [r7, #10]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff21 	bl	8000af6 <getposition>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	230f      	movs	r3, #15
 8000cba:	4093      	lsls	r3, r2
 8000cbc:	43da      	mvns	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	d002      	beq.n	8000cd4 <pinmode+0x128>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b18      	cmp	r3, #24
 8000cd2:	d133      	bne.n	8000d3c <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b18      	cmp	r3, #24
 8000cd8:	d117      	bne.n	8000d0a <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000cda:	897b      	ldrh	r3, [r7, #10]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff0a 	bl	8000af6 <getposition>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	fa03 f202 	lsl.w	r2, r3, r2
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	897a      	ldrh	r2, [r7, #10]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000d02:	431a      	orrs	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000d08:	e027      	b.n	8000d5a <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000d0a:	897b      	ldrh	r3, [r7, #10]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fef2 	bl	8000af6 <getposition>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461a      	mov	r2, r3
 8000d16:	2308      	movs	r3, #8
 8000d18:	fa03 f202 	lsl.w	r2, r3, r2
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	897a      	ldrh	r2, [r7, #10]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d32:	43d2      	mvns	r2, r2
 8000d34:	401a      	ands	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000d3a:	e00e      	b.n	8000d5a <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8000d3c:	897b      	ldrh	r3, [r7, #10]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fed9 	bl	8000af6 <getposition>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	fa03 f202 	lsl.w	r2, r3, r2
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	431a      	orrs	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	605a      	str	r2, [r3, #4]
}
 8000d58:	e7ff      	b.n	8000d5a <pinmode+0x1ae>
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40010800 	.word	0x40010800
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010c00 	.word	0x40010c00

08000d70 <READ_PIN>:
 * @param [in]      - Pin: GPIOx PIN Number
 * @retval          - uint8_t
 * Note             - none
 */

uint8_t READ_PIN(GPIO_typeDef* GPIOx, uint16_t pin){
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
	return (GPIOx->GPIOx_IDR>>pin)&1;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	fa22 f303 	lsr.w	r3, r2, r3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	b2db      	uxtb	r3, r3
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <PWM>:
//==================================== stepper motor
static uint32_t stepper_steps=0;
static uint8_t stepper_flage=0;
//===============================================================================================

void PWM(TIMERS_typeDef* TIMERx,uint32_t CH,uint32_t duty_cycle,uint32_t freq,uint32_t clk){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]

	TIMERx->TIMx_CR1 &=~(1<<0);//Counter disabled
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f023 0201 	bic.w	r2, r3, #1
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	601a      	str	r2, [r3, #0]


	char user_flage=1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]

	while(user_flage==1){
 8000dbe:	e011      	b.n	8000de4 <PWM+0x4c>
		user_top = (clk)/(freq * user_pre );
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
 8000dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000dd6:	d303      	bcc.n	8000de0 <PWM+0x48>
			user_pre+=2;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3302      	adds	r3, #2
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e001      	b.n	8000de4 <PWM+0x4c>
		}
		else{
			user_flage=0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 8000de4:	7ffb      	ldrb	r3, [r7, #31]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d0ea      	beq.n	8000dc0 <PWM+0x28>
	}

	//====================TIM1===================


	if(TIMERx==TIM1){
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4a8e      	ldr	r2, [pc, #568]	; (8001028 <PWM+0x290>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	f040 80d7 	bne.w	8000fa2 <PWM+0x20a>
		TIMER1_CLOCK_Enable();//enable timer1 clock
 8000df4:	4b8d      	ldr	r3, [pc, #564]	; (800102c <PWM+0x294>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a8c      	ldr	r2, [pc, #560]	; (800102c <PWM+0x294>)
 8000dfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dfe:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();//enable porta clock
 8000e00:	4b8a      	ldr	r3, [pc, #552]	; (800102c <PWM+0x294>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a89      	ldr	r2, [pc, #548]	; (800102c <PWM+0x294>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 8000e0c:	4b87      	ldr	r3, [pc, #540]	; (800102c <PWM+0x294>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a86      	ldr	r2, [pc, #536]	; (800102c <PWM+0x294>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6193      	str	r3, [r2, #24]
		if(CH==CH_1){
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d12d      	bne.n	8000e7a <PWM+0xe2>
			pinmode(GPIOA, pin8, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000e1e:	220b      	movs	r2, #11
 8000e20:	2108      	movs	r1, #8
 8000e22:	4883      	ldr	r0, [pc, #524]	; (8001030 <PWM+0x298>)
 8000e24:	f7ff fec2 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3); //Output compare 1 preload enable
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f043 0208 	orr.w	r2, r3, #8
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0); // Capture/Compare 1 output enable
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	f043 0201 	orr.w	r2, r3, #1
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);//110: PWM mode 1 - In upcounting, channel 1 is active
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	4a77      	ldr	r2, [pc, #476]	; (8001034 <PWM+0x29c>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	099a      	lsrs	r2, r3, #6
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_BDTR |=(1<<15); // Main output enable
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b11<<0);//Update interrupt enable Capture/Compare 1 interrupt enable
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f043 0203 	orr.w	r2, r3, #3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	e2f6      	b.n	8001468 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d12d      	bne.n	8000edc <PWM+0x144>
			pinmode(GPIOA, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000e80:	220b      	movs	r2, #11
 8000e82:	2109      	movs	r1, #9
 8000e84:	486a      	ldr	r0, [pc, #424]	; (8001030 <PWM+0x298>)
 8000e86:	f7ff fe91 	bl	8000bac <pinmode>
			//pinmode(GPIOA, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	f043 0210 	orr.w	r2, r3, #16
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	4a5f      	ldr	r2, [pc, #380]	; (8001034 <PWM+0x29c>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	099a      	lsrs	r2, r3, #6
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_BDTR |=(1<<15);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b101<<0);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	f043 0205 	orr.w	r2, r3, #5
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	e2c5      	b.n	8001468 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d12d      	bne.n	8000f3e <PWM+0x1a6>
			pinmode(GPIOA, pin10, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000ee2:	220b      	movs	r2, #11
 8000ee4:	210a      	movs	r1, #10
 8000ee6:	4852      	ldr	r0, [pc, #328]	; (8001030 <PWM+0x298>)
 8000ee8:	f7ff fe60 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	f043 0208 	orr.w	r2, r3, #8
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	fb02 f303 	mul.w	r3, r2, r3
 8000f18:	4a46      	ldr	r2, [pc, #280]	; (8001034 <PWM+0x29c>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	099a      	lsrs	r2, r3, #6
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_BDTR |=(1<<15);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f28:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	f043 0209 	orr.w	r2, r3, #9
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	e294      	b.n	8001468 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	f040 8291 	bne.w	8001468 <PWM+0x6d0>
			pinmode(GPIOA, pin11, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000f46:	220b      	movs	r2, #11
 8000f48:	210b      	movs	r1, #11
 8000f4a:	4839      	ldr	r0, [pc, #228]	; (8001030 <PWM+0x298>)
 8000f4c:	f7ff fe2e 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	fb02 f303 	mul.w	r3, r2, r3
 8000f7c:	4a2d      	ldr	r2, [pc, #180]	; (8001034 <PWM+0x29c>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	099a      	lsrs	r2, r3, #6
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_BDTR |=(1<<15);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	f043 0211 	orr.w	r2, r3, #17
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	e262      	b.n	8001468 <PWM+0x6d0>
		}
	}

	//====================TIM2===================

	else if (TIMERx==TIM2){
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa8:	f040 80c8 	bne.w	800113c <PWM+0x3a4>
		TIMER2_CLOCK_Enable();//enable timer2 clock
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <PWM+0x294>)
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	4a1e      	ldr	r2, [pc, #120]	; (800102c <PWM+0x294>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();//enable porta clock
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <PWM+0x294>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	; (800102c <PWM+0x294>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <PWM+0x294>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a18      	ldr	r2, [pc, #96]	; (800102c <PWM+0x294>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d130      	bne.n	8001038 <PWM+0x2a0>
			pinmode(GPIOA, pin0, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000fd6:	220b      	movs	r2, #11
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4815      	ldr	r0, [pc, #84]	; (8001030 <PWM+0x298>)
 8000fdc:	f7ff fde6 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f043 0208 	orr.w	r2, r3, #8
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	f043 0201 	orr.w	r2, r3, #1
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	fb02 f303 	mul.w	r3, r2, r3
 800100c:	4a09      	ldr	r2, [pc, #36]	; (8001034 <PWM+0x29c>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	099a      	lsrs	r2, r3, #6
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	f043 0203 	orr.w	r2, r3, #3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	e220      	b.n	8001468 <PWM+0x6d0>
 8001026:	bf00      	nop
 8001028:	40012c00 	.word	0x40012c00
 800102c:	40021000 	.word	0x40021000
 8001030:	40010800 	.word	0x40010800
 8001034:	10624dd3 	.word	0x10624dd3
		}
		else if(CH==CH_2){
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d127      	bne.n	800108e <PWM+0x2f6>
			pinmode(GPIOA, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800103e:	220b      	movs	r2, #11
 8001040:	2101      	movs	r1, #1
 8001042:	488d      	ldr	r0, [pc, #564]	; (8001278 <PWM+0x4e0>)
 8001044:	f7ff fdb2 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f043 0210 	orr.w	r2, r3, #16
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	fb02 f303 	mul.w	r3, r2, r3
 8001074:	4a81      	ldr	r2, [pc, #516]	; (800127c <PWM+0x4e4>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	099a      	lsrs	r2, r3, #6
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	f043 0205 	orr.w	r2, r3, #5
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	e1ec      	b.n	8001468 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b03      	cmp	r3, #3
 8001092:	d127      	bne.n	80010e4 <PWM+0x34c>
			pinmode(GPIOA, pin2, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001094:	220b      	movs	r2, #11
 8001096:	2102      	movs	r1, #2
 8001098:	4877      	ldr	r0, [pc, #476]	; (8001278 <PWM+0x4e0>)
 800109a:	f7ff fd87 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f043 0208 	orr.w	r2, r3, #8
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	fb02 f303 	mul.w	r3, r2, r3
 80010ca:	4a6c      	ldr	r2, [pc, #432]	; (800127c <PWM+0x4e4>)
 80010cc:	fba2 2303 	umull	r2, r3, r2, r3
 80010d0:	099a      	lsrs	r2, r3, #6
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	f043 0209 	orr.w	r2, r3, #9
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	e1c1      	b.n	8001468 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	f040 81be 	bne.w	8001468 <PWM+0x6d0>
			pinmode(GPIOA, pin3, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80010ec:	220b      	movs	r2, #11
 80010ee:	2103      	movs	r1, #3
 80010f0:	4861      	ldr	r0, [pc, #388]	; (8001278 <PWM+0x4e0>)
 80010f2:	f7ff fd5b 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	4a56      	ldr	r2, [pc, #344]	; (800127c <PWM+0x4e4>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	099a      	lsrs	r2, r3, #6
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	f043 0211 	orr.w	r2, r3, #17
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	e195      	b.n	8001468 <PWM+0x6d0>
		}
	}
	//====================TIM3===================

	else if (TIMERx==TIM3){
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4a50      	ldr	r2, [pc, #320]	; (8001280 <PWM+0x4e8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	f040 80cf 	bne.w	80012e4 <PWM+0x54c>
		TIMER3_CLOCK_Enable();//enable timer3 clock
 8001146:	4b4f      	ldr	r3, [pc, #316]	; (8001284 <PWM+0x4ec>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a4e      	ldr	r2, [pc, #312]	; (8001284 <PWM+0x4ec>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();//enable porta clock
 8001152:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <PWM+0x4ec>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a4b      	ldr	r2, [pc, #300]	; (8001284 <PWM+0x4ec>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6193      	str	r3, [r2, #24]
		GPIOB_Clock_Enable();//enable porta clock
 800115e:	4b49      	ldr	r3, [pc, #292]	; (8001284 <PWM+0x4ec>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	4a48      	ldr	r2, [pc, #288]	; (8001284 <PWM+0x4ec>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <PWM+0x4ec>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a45      	ldr	r2, [pc, #276]	; (8001284 <PWM+0x4ec>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d127      	bne.n	80011cc <PWM+0x434>
			pinmode(GPIOA, pin6, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800117c:	220b      	movs	r2, #11
 800117e:	2106      	movs	r1, #6
 8001180:	483d      	ldr	r0, [pc, #244]	; (8001278 <PWM+0x4e0>)
 8001182:	f7ff fd13 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f043 0208 	orr.w	r2, r3, #8
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	f043 0201 	orr.w	r2, r3, #1
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	4a32      	ldr	r2, [pc, #200]	; (800127c <PWM+0x4e4>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	099a      	lsrs	r2, r3, #6
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	f043 0203 	orr.w	r2, r3, #3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	e14d      	b.n	8001468 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d127      	bne.n	8001222 <PWM+0x48a>
			pinmode(GPIOA, pin7, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80011d2:	220b      	movs	r2, #11
 80011d4:	2107      	movs	r1, #7
 80011d6:	4828      	ldr	r0, [pc, #160]	; (8001278 <PWM+0x4e0>)
 80011d8:	f7ff fce8 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	f043 0210 	orr.w	r2, r3, #16
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	4a1c      	ldr	r2, [pc, #112]	; (800127c <PWM+0x4e4>)
 800120a:	fba2 2303 	umull	r2, r3, r2, r3
 800120e:	099a      	lsrs	r2, r3, #6
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	f043 0205 	orr.w	r2, r3, #5
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	e122      	b.n	8001468 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d131      	bne.n	800128c <PWM+0x4f4>
			pinmode(GPIOB, pin0, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001228:	220b      	movs	r2, #11
 800122a:	2100      	movs	r1, #0
 800122c:	4816      	ldr	r0, [pc, #88]	; (8001288 <PWM+0x4f0>)
 800122e:	f7ff fcbd 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f043 0208 	orr.w	r2, r3, #8
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	fb02 f303 	mul.w	r3, r2, r3
 800125e:	4a07      	ldr	r2, [pc, #28]	; (800127c <PWM+0x4e4>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	099a      	lsrs	r2, r3, #6
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	f043 0209 	orr.w	r2, r3, #9
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	e0f7      	b.n	8001468 <PWM+0x6d0>
 8001278:	40010800 	.word	0x40010800
 800127c:	10624dd3 	.word	0x10624dd3
 8001280:	40000400 	.word	0x40000400
 8001284:	40021000 	.word	0x40021000
 8001288:	40010c00 	.word	0x40010c00
		}
		else if(CH==CH_4){
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b04      	cmp	r3, #4
 8001290:	f040 80ea 	bne.w	8001468 <PWM+0x6d0>
			pinmode(GPIOB, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001294:	220b      	movs	r2, #11
 8001296:	2101      	movs	r1, #1
 8001298:	4882      	ldr	r0, [pc, #520]	; (80014a4 <PWM+0x70c>)
 800129a:	f7ff fc87 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	4a77      	ldr	r2, [pc, #476]	; (80014a8 <PWM+0x710>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	099a      	lsrs	r2, r3, #6
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f043 0211 	orr.w	r2, r3, #17
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	e0c1      	b.n	8001468 <PWM+0x6d0>
	}


	//====================TIM4===================

	else if (TIMERx==TIM4){
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4a71      	ldr	r2, [pc, #452]	; (80014ac <PWM+0x714>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	f040 80bd 	bne.w	8001468 <PWM+0x6d0>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 80012ee:	4b70      	ldr	r3, [pc, #448]	; (80014b0 <PWM+0x718>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a6f      	ldr	r2, [pc, #444]	; (80014b0 <PWM+0x718>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();//enable porta clock
 80012fa:	4b6d      	ldr	r3, [pc, #436]	; (80014b0 <PWM+0x718>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	4a6c      	ldr	r2, [pc, #432]	; (80014b0 <PWM+0x718>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 8001306:	4b6a      	ldr	r3, [pc, #424]	; (80014b0 <PWM+0x718>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a69      	ldr	r2, [pc, #420]	; (80014b0 <PWM+0x718>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d127      	bne.n	8001368 <PWM+0x5d0>
			pinmode(GPIOB, pin6, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001318:	220b      	movs	r2, #11
 800131a:	2106      	movs	r1, #6
 800131c:	4861      	ldr	r0, [pc, #388]	; (80014a4 <PWM+0x70c>)
 800131e:	f7ff fc45 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f043 0208 	orr.w	r2, r3, #8
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	f043 0201 	orr.w	r2, r3, #1
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	4a56      	ldr	r2, [pc, #344]	; (80014a8 <PWM+0x710>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	099a      	lsrs	r2, r3, #6
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f043 0203 	orr.w	r2, r3, #3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	e07f      	b.n	8001468 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d127      	bne.n	80013be <PWM+0x626>
			pinmode(GPIOB, pin7, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800136e:	220b      	movs	r2, #11
 8001370:	2107      	movs	r1, #7
 8001372:	484c      	ldr	r0, [pc, #304]	; (80014a4 <PWM+0x70c>)
 8001374:	f7ff fc1a 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	f043 0210 	orr.w	r2, r3, #16
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	fb02 f303 	mul.w	r3, r2, r3
 80013a4:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <PWM+0x710>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	099a      	lsrs	r2, r3, #6
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	f043 0205 	orr.w	r2, r3, #5
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	e054      	b.n	8001468 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d127      	bne.n	8001414 <PWM+0x67c>
			pinmode(GPIOB, pin8, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80013c4:	220b      	movs	r2, #11
 80013c6:	2108      	movs	r1, #8
 80013c8:	4836      	ldr	r0, [pc, #216]	; (80014a4 <PWM+0x70c>)
 80013ca:	f7ff fbef 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f043 0208 	orr.w	r2, r3, #8
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	4a2b      	ldr	r2, [pc, #172]	; (80014a8 <PWM+0x710>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	099a      	lsrs	r2, r3, #6
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f043 0209 	orr.w	r2, r3, #9
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	e029      	b.n	8001468 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b04      	cmp	r3, #4
 8001418:	d126      	bne.n	8001468 <PWM+0x6d0>
			pinmode(GPIOB, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800141a:	220b      	movs	r2, #11
 800141c:	2109      	movs	r1, #9
 800141e:	4821      	ldr	r0, [pc, #132]	; (80014a4 <PWM+0x70c>)
 8001420:	f7ff fbc4 	bl	8000bac <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <PWM+0x710>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	099a      	lsrs	r2, r3, #6
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f043 0211 	orr.w	r2, r3, #17
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	60da      	str	r2, [r3, #12]


	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->TIMx_CR1 |=(1<<7);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	601a      	str	r2, [r3, #0]


	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	TIMERx->TIMx_ARR=user_top;//frec peak value
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c

	TIMERx->TIMx_PSC=(user_pre-1);//prescaller
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	1e5a      	subs	r2, r3, #1
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	TIMERx->TIMx_EGR |=(1<<0);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f043 0201 	orr.w	r2, r3, #1
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	615a      	str	r2, [r3, #20]

	TIMERx->TIMx_CR1 |=(1<<0);//enable the timer
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	601a      	str	r2, [r3, #0]

}
 800149a:	bf00      	nop
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40010c00 	.word	0x40010c00
 80014a8:	10624dd3 	.word	0x10624dd3
 80014ac:	40000800 	.word	0x40000800
 80014b0:	40021000 	.word	0x40021000

080014b4 <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(uint16_t time,uint8_t U,uint32_t clk){
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	603a      	str	r2, [r7, #0]
 80014be:	80fb      	strh	r3, [r7, #6]
 80014c0:	460b      	mov	r3, r1
 80014c2:	717b      	strb	r3, [r7, #5]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 80014c4:	4b4f      	ldr	r3, [pc, #316]	; (8001604 <delay+0x150>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	4a4e      	ldr	r2, [pc, #312]	; (8001604 <delay+0x150>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80014d0:	4b4d      	ldr	r3, [pc, #308]	; (8001608 <delay+0x154>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b4c      	ldr	r3, [pc, #304]	; (8001608 <delay+0x154>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
	uint32_t unit =1000;
 80014ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f0:	613b      	str	r3, [r7, #16]
	uint8_t  increase=2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	73fb      	strb	r3, [r7, #15]

	if (U == 0){
 80014f6:	797b      	ldrb	r3, [r7, #5]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10d      	bne.n	8001518 <delay+0x64>
		unit = 1000;
 80014fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001500:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 100;
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001508:	4293      	cmp	r3, r2
 800150a:	d902      	bls.n	8001512 <delay+0x5e>
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e030      	b.n	8001574 <delay+0xc0>
		else increase = 10;
 8001512:	230a      	movs	r3, #10
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e02d      	b.n	8001574 <delay+0xc0>
	}
	else {
		unit = 1000000;
 8001518:	4b3c      	ldr	r3, [pc, #240]	; (800160c <delay+0x158>)
 800151a:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 10;
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001522:	4293      	cmp	r3, r2
 8001524:	d902      	bls.n	800152c <delay+0x78>
 8001526:	230a      	movs	r3, #10
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e023      	b.n	8001574 <delay+0xc0>
		else increase = 5;
 800152c:	2305      	movs	r3, #5
 800152e:	73fb      	strb	r3, [r7, #15]
	}

	while(user_flage==1){
 8001530:	e020      	b.n	8001574 <delay+0xc0>
		user_top = (clk/unit*time)/( user_pre );
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	88fa      	ldrh	r2, [r7, #6]
 800153c:	fb02 f203 	mul.w	r2, r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fbb2 f3f3 	udiv	r3, r2, r3
 8001546:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800154e:	d30f      	bcc.n	8001570 <delay+0xbc>

			if(user_pre>65530){
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001556:	4293      	cmp	r3, r2
 8001558:	d905      	bls.n	8001566 <delay+0xb2>
				user_pre=65530;
 800155a:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800155e:	617b      	str	r3, [r7, #20]
				user_flage=0;
 8001560:	2300      	movs	r3, #0
 8001562:	77fb      	strb	r3, [r7, #31]
 8001564:	e006      	b.n	8001574 <delay+0xc0>
			}
			else user_pre+=increase;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	4413      	add	r3, r2
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e001      	b.n	8001574 <delay+0xc0>

		}
		else{
			user_flage=0;
 8001570:	2300      	movs	r3, #0
 8001572:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 8001574:	7ffb      	ldrb	r3, [r7, #31]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d0db      	beq.n	8001532 <delay+0x7e>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <delay+0x154>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <delay+0x154>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0201 	bic.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <delay+0x154>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <delay+0x154>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0204 	orr.w	r2, r2, #4
 8001598:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <delay+0x154>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <delay+0x154>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0201 	orr.w	r2, r2, #1
 80015a8:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <delay+0x154>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <delay+0x154>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	3a01      	subs	r2, #1
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <delay+0x154>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	695a      	ldr	r2, [r3, #20]
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <delay+0x154>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <delay+0x154>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <delay+0x154>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <delay+0x15c>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <delay+0x160>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <delay+0x160>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 80015ee:	bf00      	nop
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <delay+0x15c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1fb      	bne.n	80015f0 <delay+0x13c>

	}
}
 80015f8:	bf00      	nop
 80015fa:	3724      	adds	r7, #36	; 0x24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	2000001c 	.word	0x2000001c
 800160c:	000f4240 	.word	0x000f4240
 8001610:	20000018 	.word	0x20000018
 8001614:	e000e100 	.word	0xe000e100

08001618 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 8001626:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <SPWM_timer_INIT+0x100>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <SPWM_timer_INIT+0x100>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d12f      	bne.n	800169c <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <SPWM_timer_INIT+0x100>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699a      	ldr	r2, [r3, #24]
 8001642:	4b35      	ldr	r3, [pc, #212]	; (8001718 <SPWM_timer_INIT+0x100>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800164a:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <SPWM_timer_INIT+0x100>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <SPWM_timer_INIT+0x100>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800165a:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <SPWM_timer_INIT+0x100>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	699a      	ldr	r2, [r3, #24]
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <SPWM_timer_INIT+0x100>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0208 	orr.w	r2, r2, #8
 800166a:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <SPWM_timer_INIT+0x100>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <SPWM_timer_INIT+0x100>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800167a:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 800167c:	4b26      	ldr	r3, [pc, #152]	; (8001718 <SPWM_timer_INIT+0x100>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6a1a      	ldr	r2, [r3, #32]
 8001682:	4b25      	ldr	r3, [pc, #148]	; (8001718 <SPWM_timer_INIT+0x100>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0210 	orr.w	r2, r2, #16
 800168a:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 800168c:	4b22      	ldr	r3, [pc, #136]	; (8001718 <SPWM_timer_INIT+0x100>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6a1a      	ldr	r2, [r3, #32]
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <SPWM_timer_INIT+0x100>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <SPWM_timer_INIT+0x100>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <SPWM_timer_INIT+0x100>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016aa:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <SPWM_timer_INIT+0x100>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <SPWM_timer_INIT+0x100>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <SPWM_timer_INIT+0x100>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <SPWM_timer_INIT+0x100>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <SPWM_timer_INIT+0x100>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <SPWM_timer_INIT+0x100>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016da:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <SPWM_timer_INIT+0x100>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <SPWM_timer_INIT+0x100>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <SPWM_timer_INIT+0x100>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <SPWM_timer_INIT+0x100>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <SPWM_timer_INIT+0x100>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SPWM_timer_INIT+0x100>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000000 	.word	0x20000000

0800171c <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <TIM2_IRQHandler+0x34>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <TIM2_IRQHandler+0x34>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <TIM2_IRQHandler+0x38>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <TIM2_IRQHandler+0x34>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <TIM2_IRQHandler+0x34>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0201 	bic.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]

}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2000001c 	.word	0x2000001c
 8001754:	20000018 	.word	0x20000018

08001758 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <TIM3_IRQHandler+0x6c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d119      	bne.n	8001798 <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <TIM3_IRQHandler+0x70>)
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <TIM3_IRQHandler+0x70>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <TIM3_IRQHandler+0x74>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <TIM3_IRQHandler+0x74>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <TIM3_IRQHandler+0x74>)
 8001780:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 8001782:	e01c      	b.n	80017be <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <TIM3_IRQHandler+0x6c>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <TIM3_IRQHandler+0x70>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <TIM3_IRQHandler+0x70>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6013      	str	r3, [r2, #0]
}
 8001796:	e012      	b.n	80017be <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <TIM3_IRQHandler+0x78>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <TIM3_IRQHandler+0x78>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0201 	bic.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <TIM3_IRQHandler+0x78>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <TIM3_IRQHandler+0x78>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <TIM3_IRQHandler+0x7c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4798      	blx	r3
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200000b4 	.word	0x200000b4
 80017c8:	40000400 	.word	0x40000400
 80017cc:	200000b0 	.word	0x200000b0
 80017d0:	200000e8 	.word	0x200000e8
 80017d4:	200000dc 	.word	0x200000dc

080017d8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <TIM4_IRQHandler+0x24>)
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	4a06      	ldr	r2, [pc, #24]	; (80017fc <TIM4_IRQHandler+0x24>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	6113      	str	r3, [r2, #16]
	overflowtims++;
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <TIM4_IRQHandler+0x28>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <TIM4_IRQHandler+0x28>)
 80017f2:	801a      	strh	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40000800 	.word	0x40000800
 8001800:	200000ae 	.word	0x200000ae

08001804 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 8001808:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <TIM1_UP_IRQHandler+0x17c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <TIM1_UP_IRQHandler+0x180>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d911      	bls.n	8001838 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 8001814:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <TIM1_UP_IRQHandler+0x184>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
		flage1=0;
 800181a:	4b5c      	ldr	r3, [pc, #368]	; (800198c <TIM1_UP_IRQHandler+0x188>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 8001820:	4b58      	ldr	r3, [pc, #352]	; (8001984 <TIM1_UP_IRQHandler+0x180>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a5a      	ldr	r2, [pc, #360]	; (8001990 <TIM1_UP_IRQHandler+0x18c>)
 8001826:	7812      	ldrb	r2, [r2, #0]
 8001828:	fbb3 f2f2 	udiv	r2, r3, r2
 800182c:	4b55      	ldr	r3, [pc, #340]	; (8001984 <TIM1_UP_IRQHandler+0x180>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4413      	add	r3, r2
 8001832:	4a53      	ldr	r2, [pc, #332]	; (8001980 <TIM1_UP_IRQHandler+0x17c>)
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e018      	b.n	800186a <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 8001838:	4b51      	ldr	r3, [pc, #324]	; (8001980 <TIM1_UP_IRQHandler+0x17c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b63      	cmp	r3, #99	; 0x63
 800183e:	d814      	bhi.n	800186a <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 8001840:	4b51      	ldr	r3, [pc, #324]	; (8001988 <TIM1_UP_IRQHandler+0x184>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
		flage1=1;
 8001846:	4b51      	ldr	r3, [pc, #324]	; (800198c <TIM1_UP_IRQHandler+0x188>)
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 800184c:	4b51      	ldr	r3, [pc, #324]	; (8001994 <TIM1_UP_IRQHandler+0x190>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f083 0301 	eor.w	r3, r3, #1
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <TIM1_UP_IRQHandler+0x190>)
 8001858:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <TIM1_UP_IRQHandler+0x180>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a4c      	ldr	r2, [pc, #304]	; (8001990 <TIM1_UP_IRQHandler+0x18c>)
 8001860:	7812      	ldrb	r2, [r2, #0]
 8001862:	fbb3 f3f2 	udiv	r3, r3, r2
 8001866:	4a46      	ldr	r2, [pc, #280]	; (8001980 <TIM1_UP_IRQHandler+0x17c>)
 8001868:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 800186a:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <TIM1_UP_IRQHandler+0x190>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d110      	bne.n	8001894 <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 8001872:	4b49      	ldr	r3, [pc, #292]	; (8001998 <TIM1_UP_IRQHandler+0x194>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a1a      	ldr	r2, [r3, #32]
 8001878:	4b47      	ldr	r3, [pc, #284]	; (8001998 <TIM1_UP_IRQHandler+0x194>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 8001882:	4b45      	ldr	r3, [pc, #276]	; (8001998 <TIM1_UP_IRQHandler+0x194>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a1a      	ldr	r2, [r3, #32]
 8001888:	4b43      	ldr	r3, [pc, #268]	; (8001998 <TIM1_UP_IRQHandler+0x194>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0210 	orr.w	r2, r2, #16
 8001890:	621a      	str	r2, [r3, #32]
 8001892:	e013      	b.n	80018bc <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 8001894:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <TIM1_UP_IRQHandler+0x190>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10f      	bne.n	80018bc <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 800189c:	4b3e      	ldr	r3, [pc, #248]	; (8001998 <TIM1_UP_IRQHandler+0x194>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6a1a      	ldr	r2, [r3, #32]
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <TIM1_UP_IRQHandler+0x194>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0210 	bic.w	r2, r2, #16
 80018aa:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 80018ac:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <TIM1_UP_IRQHandler+0x194>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6a1a      	ldr	r2, [r3, #32]
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <TIM1_UP_IRQHandler+0x194>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 80018bc:	4b33      	ldr	r3, [pc, #204]	; (800198c <TIM1_UP_IRQHandler+0x188>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d11c      	bne.n	80018fe <TIM1_UP_IRQHandler+0xfa>
 80018c4:	4b30      	ldr	r3, [pc, #192]	; (8001988 <TIM1_UP_IRQHandler+0x184>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d118      	bne.n	80018fe <TIM1_UP_IRQHandler+0xfa>
		top=c;
 80018cc:	4b33      	ldr	r3, [pc, #204]	; (800199c <TIM1_UP_IRQHandler+0x198>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a2c      	ldr	r2, [pc, #176]	; (8001984 <TIM1_UP_IRQHandler+0x180>)
 80018d2:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <TIM1_UP_IRQHandler+0x19c>)
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	4b29      	ldr	r3, [pc, #164]	; (8001980 <TIM1_UP_IRQHandler+0x17c>)
 80018da:	6819      	ldr	r1, [r3, #0]
 80018dc:	4b29      	ldr	r3, [pc, #164]	; (8001984 <TIM1_UP_IRQHandler+0x180>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2301      	movs	r3, #1
 80018e2:	f7ff fe99 	bl	8001618 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 80018e6:	4b27      	ldr	r3, [pc, #156]	; (8001984 <TIM1_UP_IRQHandler+0x180>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a29      	ldr	r2, [pc, #164]	; (8001990 <TIM1_UP_IRQHandler+0x18c>)
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80018f2:	4b23      	ldr	r3, [pc, #140]	; (8001980 <TIM1_UP_IRQHandler+0x17c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a21      	ldr	r2, [pc, #132]	; (8001980 <TIM1_UP_IRQHandler+0x17c>)
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e035      	b.n	800196a <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <TIM1_UP_IRQHandler+0x184>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d129      	bne.n	800195a <TIM1_UP_IRQHandler+0x156>
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <TIM1_UP_IRQHandler+0x188>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d125      	bne.n	800195a <TIM1_UP_IRQHandler+0x156>
		top=c;
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <TIM1_UP_IRQHandler+0x198>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <TIM1_UP_IRQHandler+0x180>)
 8001914:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <TIM1_UP_IRQHandler+0x17c>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <TIM1_UP_IRQHandler+0x180>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	491c      	ldr	r1, [pc, #112]	; (8001990 <TIM1_UP_IRQHandler+0x18c>)
 8001920:	7809      	ldrb	r1, [r1, #0]
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	4a15      	ldr	r2, [pc, #84]	; (8001980 <TIM1_UP_IRQHandler+0x17c>)
 800192a:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 800192c:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <TIM1_UP_IRQHandler+0x19c>)
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <TIM1_UP_IRQHandler+0x17c>)
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <TIM1_UP_IRQHandler+0x180>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	f7ff fe6d 	bl	8001618 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <TIM1_UP_IRQHandler+0x180>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a13      	ldr	r2, [pc, #76]	; (8001990 <TIM1_UP_IRQHandler+0x18c>)
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	fbb3 f2f2 	udiv	r2, r3, r2
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <TIM1_UP_IRQHandler+0x17c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d10b      	bne.n	800196a <TIM1_UP_IRQHandler+0x166>
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <TIM1_UP_IRQHandler+0x17c>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e007      	b.n	800196a <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <TIM1_UP_IRQHandler+0x194>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <TIM1_UP_IRQHandler+0x194>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0201 	bic.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <TIM1_UP_IRQHandler+0x194>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <TIM1_UP_IRQHandler+0x194>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	611a      	str	r2, [r3, #16]
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000014 	.word	0x20000014
 8001984:	20000008 	.word	0x20000008
 8001988:	200000ac 	.word	0x200000ac
 800198c:	20000004 	.word	0x20000004
 8001990:	200000e4 	.word	0x200000e4
 8001994:	20000005 	.word	0x20000005
 8001998:	20000000 	.word	0x20000000
 800199c:	20000010 	.word	0x20000010
 80019a0:	2000000c 	.word	0x2000000c

080019a4 <MCAL_speed_init>:
 *      Author: mo
 */

#include "stm32_speed_DRIVER.h"

void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	460a      	mov	r2, r1
 80019ae:	71fb      	strb	r3, [r7, #7]
 80019b0:	4613      	mov	r3, r2
 80019b2:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d139      	bne.n	8001a2e <MCAL_speed_init+0x8a>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 80019ba:	79bb      	ldrb	r3, [r7, #6]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d175      	bne.n	8001aac <MCAL_speed_init+0x108>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 80019c0:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <MCAL_speed_init+0x114>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	4a3c      	ldr	r2, [pc, #240]	; (8001ab8 <MCAL_speed_init+0x114>)
 80019c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ca:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 80019cc:	4b3a      	ldr	r3, [pc, #232]	; (8001ab8 <MCAL_speed_init+0x114>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4a39      	ldr	r2, [pc, #228]	; (8001ab8 <MCAL_speed_init+0x114>)
 80019d2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80019d6:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 80019d8:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <MCAL_speed_init+0x114>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a36      	ldr	r2, [pc, #216]	; (8001ab8 <MCAL_speed_init+0x114>)
 80019de:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80019e2:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 80019e4:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <MCAL_speed_init+0x114>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a33      	ldr	r2, [pc, #204]	; (8001ab8 <MCAL_speed_init+0x114>)
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ee:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 80019f0:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <MCAL_speed_init+0x114>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4a30      	ldr	r2, [pc, #192]	; (8001ab8 <MCAL_speed_init+0x114>)
 80019f6:	f023 0303 	bic.w	r3, r3, #3
 80019fa:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <MCAL_speed_init+0x114>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4a2d      	ldr	r2, [pc, #180]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a2a      	ldr	r2, [pc, #168]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a12:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a1a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a1e:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4a24      	ldr	r2, [pc, #144]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a2a:	6053      	str	r3, [r2, #4]

		}
	}


}
 8001a2c:	e03e      	b.n	8001aac <MCAL_speed_init+0x108>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 8001a2e:	79bb      	ldrb	r3, [r7, #6]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d13b      	bne.n	8001aac <MCAL_speed_init+0x108>
			RCC->RCC_CR &=~(1<<18);
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1f      	ldr	r2, [pc, #124]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]
			RCC->RCC_CR|=(1<<16);
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR|=(1<<16);
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a56:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a5e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001a62:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a76:	f023 0303 	bic.w	r3, r3, #3
 8001a7a:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a92:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001a9a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a9e:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <MCAL_speed_init+0x114>)
 8001aa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aaa:	6053      	str	r3, [r2, #4]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000

08001abc <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d854      	bhi.n	8001b76 <Enable_NVIC+0xba>
 8001acc:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <Enable_NVIC+0x18>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001b15 	.word	0x08001b15
 8001ad8:	08001b23 	.word	0x08001b23
 8001adc:	08001b31 	.word	0x08001b31
 8001ae0:	08001b3f 	.word	0x08001b3f
 8001ae4:	08001b4d 	.word	0x08001b4d
 8001ae8:	08001b5b 	.word	0x08001b5b
 8001aec:	08001b5b 	.word	0x08001b5b
 8001af0:	08001b5b 	.word	0x08001b5b
 8001af4:	08001b5b 	.word	0x08001b5b
 8001af8:	08001b5b 	.word	0x08001b5b
 8001afc:	08001b69 	.word	0x08001b69
 8001b00:	08001b69 	.word	0x08001b69
 8001b04:	08001b69 	.word	0x08001b69
 8001b08:	08001b69 	.word	0x08001b69
 8001b0c:	08001b69 	.word	0x08001b69
 8001b10:	08001b69 	.word	0x08001b69
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <Enable_NVIC+0xc4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <Enable_NVIC+0xc4>)
 8001b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1e:	6013      	str	r3, [r2, #0]
		break;
 8001b20:	e029      	b.n	8001b76 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <Enable_NVIC+0xc4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <Enable_NVIC+0xc4>)
 8001b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2c:	6013      	str	r3, [r2, #0]
		break;
 8001b2e:	e022      	b.n	8001b76 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <Enable_NVIC+0xc4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <Enable_NVIC+0xc4>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
		break;
 8001b3c:	e01b      	b.n	8001b76 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <Enable_NVIC+0xc4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <Enable_NVIC+0xc4>)
 8001b44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b48:	6013      	str	r3, [r2, #0]
		break;
 8001b4a:	e014      	b.n	8001b76 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <Enable_NVIC+0xc4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <Enable_NVIC+0xc4>)
 8001b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b56:	6013      	str	r3, [r2, #0]
		break;
 8001b58:	e00d      	b.n	8001b76 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <Enable_NVIC+0xc4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <Enable_NVIC+0xc4>)
 8001b60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b64:	6013      	str	r3, [r2, #0]
		break;
 8001b66:	e006      	b.n	8001b76 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <Enable_NVIC+0xc8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <Enable_NVIC+0xc8>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	6013      	str	r3, [r2, #0]
		break;
 8001b74:	bf00      	nop
	}


}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	e000e100 	.word	0xe000e100
 8001b84:	e000e104 	.word	0xe000e104

08001b88 <EXTI>:
 * @param [in]      -function_addres : app ISR function
 * @retval          - none
 * Note             -
 *================================================================ */

void EXTI(GPIO_typeDef* PORTx ,uint16_t pin,uint16_t triggercase,void (*function_addres) (void)){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	817b      	strh	r3, [r7, #10]
 8001b96:	4613      	mov	r3, r2
 8001b98:	813b      	strh	r3, [r7, #8]

	pinmode(PORTx,pin,GPIO_MODE_INTPUT_AF);//set pin to _INTPUT_AF
 8001b9a:	897b      	ldrh	r3, [r7, #10]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7ff f803 	bl	8000bac <pinmode>
		//	0000: PA[x] pin
		//	0001: PB[x] pin
		//	0010: PC[x] pin
		//	0011: PD[x] pin

		switch(pin){
 8001ba6:	897b      	ldrh	r3, [r7, #10]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	f200 8385 	bhi.w	80022b8 <EXTI+0x730>
 8001bae:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <EXTI+0x2c>)
 8001bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb4:	08001bf5 	.word	0x08001bf5
 8001bb8:	08001c5b 	.word	0x08001c5b
 8001bbc:	08001cc1 	.word	0x08001cc1
 8001bc0:	08001d27 	.word	0x08001d27
 8001bc4:	08001d8d 	.word	0x08001d8d
 8001bc8:	08001df3 	.word	0x08001df3
 8001bcc:	08001e6d 	.word	0x08001e6d
 8001bd0:	08001ed3 	.word	0x08001ed3
 8001bd4:	08001f39 	.word	0x08001f39
 8001bd8:	08001f9f 	.word	0x08001f9f
 8001bdc:	08002005 	.word	0x08002005
 8001be0:	0800206b 	.word	0x0800206b
 8001be4:	080020e7 	.word	0x080020e7
 8001be8:	0800214d 	.word	0x0800214d
 8001bec:	080021b3 	.word	0x080021b3
 8001bf0:	08002217 	.word	0x08002217
		case pin0:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<0);
 8001bf4:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <EXTI+0x2b8>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a91      	ldr	r2, [pc, #580]	; (8001e40 <EXTI+0x2b8>)
 8001bfa:	f023 030f 	bic.w	r3, r3, #15
 8001bfe:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<0);}
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a90      	ldr	r2, [pc, #576]	; (8001e44 <EXTI+0x2bc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d106      	bne.n	8001c16 <EXTI+0x8e>
 8001c08:	4b8d      	ldr	r3, [pc, #564]	; (8001e40 <EXTI+0x2b8>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a8c      	ldr	r2, [pc, #560]	; (8001e40 <EXTI+0x2b8>)
 8001c0e:	f023 030f 	bic.w	r3, r3, #15
 8001c12:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}

			break;
 8001c14:	e331      	b.n	800227a <EXTI+0x6f2>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4a8b      	ldr	r2, [pc, #556]	; (8001e48 <EXTI+0x2c0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d106      	bne.n	8001c2c <EXTI+0xa4>
 8001c1e:	4b88      	ldr	r3, [pc, #544]	; (8001e40 <EXTI+0x2b8>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	4a87      	ldr	r2, [pc, #540]	; (8001e40 <EXTI+0x2b8>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6093      	str	r3, [r2, #8]
			break;
 8001c2a:	e326      	b.n	800227a <EXTI+0x6f2>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4a87      	ldr	r2, [pc, #540]	; (8001e4c <EXTI+0x2c4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d106      	bne.n	8001c42 <EXTI+0xba>
 8001c34:	4b82      	ldr	r3, [pc, #520]	; (8001e40 <EXTI+0x2b8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4a81      	ldr	r2, [pc, #516]	; (8001e40 <EXTI+0x2b8>)
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	6093      	str	r3, [r2, #8]
			break;
 8001c40:	e31b      	b.n	800227a <EXTI+0x6f2>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4a82      	ldr	r2, [pc, #520]	; (8001e50 <EXTI+0x2c8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	f040 8317 	bne.w	800227a <EXTI+0x6f2>
 8001c4c:	4b7c      	ldr	r3, [pc, #496]	; (8001e40 <EXTI+0x2b8>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4a7b      	ldr	r2, [pc, #492]	; (8001e40 <EXTI+0x2b8>)
 8001c52:	f043 0303 	orr.w	r3, r3, #3
 8001c56:	6093      	str	r3, [r2, #8]
			break;
 8001c58:	e30f      	b.n	800227a <EXTI+0x6f2>
		case pin1:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<4);
 8001c5a:	4b79      	ldr	r3, [pc, #484]	; (8001e40 <EXTI+0x2b8>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4a78      	ldr	r2, [pc, #480]	; (8001e40 <EXTI+0x2b8>)
 8001c60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c64:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<4);}
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4a76      	ldr	r2, [pc, #472]	; (8001e44 <EXTI+0x2bc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d106      	bne.n	8001c7c <EXTI+0xf4>
 8001c6e:	4b74      	ldr	r3, [pc, #464]	; (8001e40 <EXTI+0x2b8>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4a73      	ldr	r2, [pc, #460]	; (8001e40 <EXTI+0x2b8>)
 8001c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c78:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}

			break;
 8001c7a:	e300      	b.n	800227e <EXTI+0x6f6>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4a72      	ldr	r2, [pc, #456]	; (8001e48 <EXTI+0x2c0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d106      	bne.n	8001c92 <EXTI+0x10a>
 8001c84:	4b6e      	ldr	r3, [pc, #440]	; (8001e40 <EXTI+0x2b8>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a6d      	ldr	r2, [pc, #436]	; (8001e40 <EXTI+0x2b8>)
 8001c8a:	f043 0310 	orr.w	r3, r3, #16
 8001c8e:	6093      	str	r3, [r2, #8]
			break;
 8001c90:	e2f5      	b.n	800227e <EXTI+0x6f6>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4a6d      	ldr	r2, [pc, #436]	; (8001e4c <EXTI+0x2c4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d106      	bne.n	8001ca8 <EXTI+0x120>
 8001c9a:	4b69      	ldr	r3, [pc, #420]	; (8001e40 <EXTI+0x2b8>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4a68      	ldr	r2, [pc, #416]	; (8001e40 <EXTI+0x2b8>)
 8001ca0:	f043 0320 	orr.w	r3, r3, #32
 8001ca4:	6093      	str	r3, [r2, #8]
			break;
 8001ca6:	e2ea      	b.n	800227e <EXTI+0x6f6>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a69      	ldr	r2, [pc, #420]	; (8001e50 <EXTI+0x2c8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	f040 82e6 	bne.w	800227e <EXTI+0x6f6>
 8001cb2:	4b63      	ldr	r3, [pc, #396]	; (8001e40 <EXTI+0x2b8>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	4a62      	ldr	r2, [pc, #392]	; (8001e40 <EXTI+0x2b8>)
 8001cb8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001cbc:	6093      	str	r3, [r2, #8]
			break;
 8001cbe:	e2de      	b.n	800227e <EXTI+0x6f6>
		case pin2:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<8);
 8001cc0:	4b5f      	ldr	r3, [pc, #380]	; (8001e40 <EXTI+0x2b8>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4a5e      	ldr	r2, [pc, #376]	; (8001e40 <EXTI+0x2b8>)
 8001cc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cca:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<8);}
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4a5d      	ldr	r2, [pc, #372]	; (8001e44 <EXTI+0x2bc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d106      	bne.n	8001ce2 <EXTI+0x15a>
 8001cd4:	4b5a      	ldr	r3, [pc, #360]	; (8001e40 <EXTI+0x2b8>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4a59      	ldr	r2, [pc, #356]	; (8001e40 <EXTI+0x2b8>)
 8001cda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cde:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}

			break;
 8001ce0:	e2cf      	b.n	8002282 <EXTI+0x6fa>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <EXTI+0x2c0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d106      	bne.n	8001cf8 <EXTI+0x170>
 8001cea:	4b55      	ldr	r3, [pc, #340]	; (8001e40 <EXTI+0x2b8>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4a54      	ldr	r2, [pc, #336]	; (8001e40 <EXTI+0x2b8>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf4:	6093      	str	r3, [r2, #8]
			break;
 8001cf6:	e2c4      	b.n	8002282 <EXTI+0x6fa>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4a54      	ldr	r2, [pc, #336]	; (8001e4c <EXTI+0x2c4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d106      	bne.n	8001d0e <EXTI+0x186>
 8001d00:	4b4f      	ldr	r3, [pc, #316]	; (8001e40 <EXTI+0x2b8>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4a4e      	ldr	r2, [pc, #312]	; (8001e40 <EXTI+0x2b8>)
 8001d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0a:	6093      	str	r3, [r2, #8]
			break;
 8001d0c:	e2b9      	b.n	8002282 <EXTI+0x6fa>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4a4f      	ldr	r2, [pc, #316]	; (8001e50 <EXTI+0x2c8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	f040 82b5 	bne.w	8002282 <EXTI+0x6fa>
 8001d18:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <EXTI+0x2b8>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4a48      	ldr	r2, [pc, #288]	; (8001e40 <EXTI+0x2b8>)
 8001d1e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d22:	6093      	str	r3, [r2, #8]
			break;
 8001d24:	e2ad      	b.n	8002282 <EXTI+0x6fa>
		case pin3:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<12);
 8001d26:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <EXTI+0x2b8>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4a45      	ldr	r2, [pc, #276]	; (8001e40 <EXTI+0x2b8>)
 8001d2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d30:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<12);}
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4a43      	ldr	r2, [pc, #268]	; (8001e44 <EXTI+0x2bc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d106      	bne.n	8001d48 <EXTI+0x1c0>
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <EXTI+0x2b8>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4a40      	ldr	r2, [pc, #256]	; (8001e40 <EXTI+0x2b8>)
 8001d40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d44:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}

			break;
 8001d46:	e29e      	b.n	8002286 <EXTI+0x6fe>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a3f      	ldr	r2, [pc, #252]	; (8001e48 <EXTI+0x2c0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d106      	bne.n	8001d5e <EXTI+0x1d6>
 8001d50:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <EXTI+0x2b8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4a3a      	ldr	r2, [pc, #232]	; (8001e40 <EXTI+0x2b8>)
 8001d56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d5a:	6093      	str	r3, [r2, #8]
			break;
 8001d5c:	e293      	b.n	8002286 <EXTI+0x6fe>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4a3a      	ldr	r2, [pc, #232]	; (8001e4c <EXTI+0x2c4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d106      	bne.n	8001d74 <EXTI+0x1ec>
 8001d66:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <EXTI+0x2b8>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	4a35      	ldr	r2, [pc, #212]	; (8001e40 <EXTI+0x2b8>)
 8001d6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d70:	6093      	str	r3, [r2, #8]
			break;
 8001d72:	e288      	b.n	8002286 <EXTI+0x6fe>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a36      	ldr	r2, [pc, #216]	; (8001e50 <EXTI+0x2c8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	f040 8284 	bne.w	8002286 <EXTI+0x6fe>
 8001d7e:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <EXTI+0x2b8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	4a2f      	ldr	r2, [pc, #188]	; (8001e40 <EXTI+0x2b8>)
 8001d84:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001d88:	6093      	str	r3, [r2, #8]
			break;
 8001d8a:	e27c      	b.n	8002286 <EXTI+0x6fe>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin4:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<0);
 8001d8c:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <EXTI+0x2b8>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4a2b      	ldr	r2, [pc, #172]	; (8001e40 <EXTI+0x2b8>)
 8001d92:	f023 030f 	bic.w	r3, r3, #15
 8001d96:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<0);}
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a2a      	ldr	r2, [pc, #168]	; (8001e44 <EXTI+0x2bc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d106      	bne.n	8001dae <EXTI+0x226>
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <EXTI+0x2b8>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <EXTI+0x2b8>)
 8001da6:	f023 030f 	bic.w	r3, r3, #15
 8001daa:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}

			break;
 8001dac:	e26d      	b.n	800228a <EXTI+0x702>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a25      	ldr	r2, [pc, #148]	; (8001e48 <EXTI+0x2c0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d106      	bne.n	8001dc4 <EXTI+0x23c>
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <EXTI+0x2b8>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4a21      	ldr	r2, [pc, #132]	; (8001e40 <EXTI+0x2b8>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	60d3      	str	r3, [r2, #12]
			break;
 8001dc2:	e262      	b.n	800228a <EXTI+0x702>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <EXTI+0x2c4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d106      	bne.n	8001dda <EXTI+0x252>
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <EXTI+0x2b8>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <EXTI+0x2b8>)
 8001dd2:	f043 0302 	orr.w	r3, r3, #2
 8001dd6:	60d3      	str	r3, [r2, #12]
			break;
 8001dd8:	e257      	b.n	800228a <EXTI+0x702>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <EXTI+0x2c8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	f040 8253 	bne.w	800228a <EXTI+0x702>
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <EXTI+0x2b8>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <EXTI+0x2b8>)
 8001dea:	f043 0303 	orr.w	r3, r3, #3
 8001dee:	60d3      	str	r3, [r2, #12]
			break;
 8001df0:	e24b      	b.n	800228a <EXTI+0x702>
		case pin5:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<4);
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <EXTI+0x2b8>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <EXTI+0x2b8>)
 8001df8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dfc:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<4);}
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <EXTI+0x2bc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d106      	bne.n	8001e14 <EXTI+0x28c>
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <EXTI+0x2b8>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <EXTI+0x2b8>)
 8001e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e10:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}

			break;
 8001e12:	e23c      	b.n	800228e <EXTI+0x706>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <EXTI+0x2c0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d106      	bne.n	8001e2a <EXTI+0x2a2>
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <EXTI+0x2b8>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <EXTI+0x2b8>)
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	60d3      	str	r3, [r2, #12]
			break;
 8001e28:	e231      	b.n	800228e <EXTI+0x706>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <EXTI+0x2c4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d110      	bne.n	8001e54 <EXTI+0x2cc>
 8001e32:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <EXTI+0x2b8>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	4a02      	ldr	r2, [pc, #8]	; (8001e40 <EXTI+0x2b8>)
 8001e38:	f043 0320 	orr.w	r3, r3, #32
 8001e3c:	60d3      	str	r3, [r2, #12]
			break;
 8001e3e:	e226      	b.n	800228e <EXTI+0x706>
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40010800 	.word	0x40010800
 8001e48:	40010c00 	.word	0x40010c00
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40011400 	.word	0x40011400
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4a93      	ldr	r2, [pc, #588]	; (80020a4 <EXTI+0x51c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	f040 8218 	bne.w	800228e <EXTI+0x706>
 8001e5e:	4b92      	ldr	r3, [pc, #584]	; (80020a8 <EXTI+0x520>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	4a91      	ldr	r2, [pc, #580]	; (80020a8 <EXTI+0x520>)
 8001e64:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001e68:	60d3      	str	r3, [r2, #12]
			break;
 8001e6a:	e210      	b.n	800228e <EXTI+0x706>
		case pin6:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<8);
 8001e6c:	4b8e      	ldr	r3, [pc, #568]	; (80020a8 <EXTI+0x520>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a8d      	ldr	r2, [pc, #564]	; (80020a8 <EXTI+0x520>)
 8001e72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e76:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<8);}
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a8c      	ldr	r2, [pc, #560]	; (80020ac <EXTI+0x524>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d106      	bne.n	8001e8e <EXTI+0x306>
 8001e80:	4b89      	ldr	r3, [pc, #548]	; (80020a8 <EXTI+0x520>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4a88      	ldr	r2, [pc, #544]	; (80020a8 <EXTI+0x520>)
 8001e86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e8a:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}

			break;
 8001e8c:	e201      	b.n	8002292 <EXTI+0x70a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4a87      	ldr	r2, [pc, #540]	; (80020b0 <EXTI+0x528>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d106      	bne.n	8001ea4 <EXTI+0x31c>
 8001e96:	4b84      	ldr	r3, [pc, #528]	; (80020a8 <EXTI+0x520>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	4a83      	ldr	r2, [pc, #524]	; (80020a8 <EXTI+0x520>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	60d3      	str	r3, [r2, #12]
			break;
 8001ea2:	e1f6      	b.n	8002292 <EXTI+0x70a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a83      	ldr	r2, [pc, #524]	; (80020b4 <EXTI+0x52c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d106      	bne.n	8001eba <EXTI+0x332>
 8001eac:	4b7e      	ldr	r3, [pc, #504]	; (80020a8 <EXTI+0x520>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a7d      	ldr	r2, [pc, #500]	; (80020a8 <EXTI+0x520>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	60d3      	str	r3, [r2, #12]
			break;
 8001eb8:	e1eb      	b.n	8002292 <EXTI+0x70a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4a79      	ldr	r2, [pc, #484]	; (80020a4 <EXTI+0x51c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	f040 81e7 	bne.w	8002292 <EXTI+0x70a>
 8001ec4:	4b78      	ldr	r3, [pc, #480]	; (80020a8 <EXTI+0x520>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4a77      	ldr	r2, [pc, #476]	; (80020a8 <EXTI+0x520>)
 8001eca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ece:	60d3      	str	r3, [r2, #12]
			break;
 8001ed0:	e1df      	b.n	8002292 <EXTI+0x70a>
		case pin7:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<12);
 8001ed2:	4b75      	ldr	r3, [pc, #468]	; (80020a8 <EXTI+0x520>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	4a74      	ldr	r2, [pc, #464]	; (80020a8 <EXTI+0x520>)
 8001ed8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001edc:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<12);}
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4a72      	ldr	r2, [pc, #456]	; (80020ac <EXTI+0x524>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d106      	bne.n	8001ef4 <EXTI+0x36c>
 8001ee6:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <EXTI+0x520>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4a6f      	ldr	r2, [pc, #444]	; (80020a8 <EXTI+0x520>)
 8001eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ef0:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}

			break;
 8001ef2:	e1d0      	b.n	8002296 <EXTI+0x70e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a6e      	ldr	r2, [pc, #440]	; (80020b0 <EXTI+0x528>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d106      	bne.n	8001f0a <EXTI+0x382>
 8001efc:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <EXTI+0x520>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a69      	ldr	r2, [pc, #420]	; (80020a8 <EXTI+0x520>)
 8001f02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f06:	60d3      	str	r3, [r2, #12]
			break;
 8001f08:	e1c5      	b.n	8002296 <EXTI+0x70e>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a69      	ldr	r2, [pc, #420]	; (80020b4 <EXTI+0x52c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d106      	bne.n	8001f20 <EXTI+0x398>
 8001f12:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <EXTI+0x520>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4a64      	ldr	r2, [pc, #400]	; (80020a8 <EXTI+0x520>)
 8001f18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f1c:	60d3      	str	r3, [r2, #12]
			break;
 8001f1e:	e1ba      	b.n	8002296 <EXTI+0x70e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a60      	ldr	r2, [pc, #384]	; (80020a4 <EXTI+0x51c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	f040 81b6 	bne.w	8002296 <EXTI+0x70e>
 8001f2a:	4b5f      	ldr	r3, [pc, #380]	; (80020a8 <EXTI+0x520>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	4a5e      	ldr	r2, [pc, #376]	; (80020a8 <EXTI+0x520>)
 8001f30:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001f34:	60d3      	str	r3, [r2, #12]
			break;
 8001f36:	e1ae      	b.n	8002296 <EXTI+0x70e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin8:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<0);
 8001f38:	4b5b      	ldr	r3, [pc, #364]	; (80020a8 <EXTI+0x520>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	4a5a      	ldr	r2, [pc, #360]	; (80020a8 <EXTI+0x520>)
 8001f3e:	f023 030f 	bic.w	r3, r3, #15
 8001f42:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<0);}
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4a59      	ldr	r2, [pc, #356]	; (80020ac <EXTI+0x524>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d106      	bne.n	8001f5a <EXTI+0x3d2>
 8001f4c:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <EXTI+0x520>)
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	4a55      	ldr	r2, [pc, #340]	; (80020a8 <EXTI+0x520>)
 8001f52:	f023 030f 	bic.w	r3, r3, #15
 8001f56:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}

			break;
 8001f58:	e19f      	b.n	800229a <EXTI+0x712>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4a54      	ldr	r2, [pc, #336]	; (80020b0 <EXTI+0x528>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d106      	bne.n	8001f70 <EXTI+0x3e8>
 8001f62:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <EXTI+0x520>)
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	4a50      	ldr	r2, [pc, #320]	; (80020a8 <EXTI+0x520>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6113      	str	r3, [r2, #16]
			break;
 8001f6e:	e194      	b.n	800229a <EXTI+0x712>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a50      	ldr	r2, [pc, #320]	; (80020b4 <EXTI+0x52c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d106      	bne.n	8001f86 <EXTI+0x3fe>
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <EXTI+0x520>)
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	4a4a      	ldr	r2, [pc, #296]	; (80020a8 <EXTI+0x520>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	6113      	str	r3, [r2, #16]
			break;
 8001f84:	e189      	b.n	800229a <EXTI+0x712>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4a46      	ldr	r2, [pc, #280]	; (80020a4 <EXTI+0x51c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	f040 8185 	bne.w	800229a <EXTI+0x712>
 8001f90:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <EXTI+0x520>)
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	4a44      	ldr	r2, [pc, #272]	; (80020a8 <EXTI+0x520>)
 8001f96:	f043 0303 	orr.w	r3, r3, #3
 8001f9a:	6113      	str	r3, [r2, #16]
			break;
 8001f9c:	e17d      	b.n	800229a <EXTI+0x712>
		case pin9:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<4);
 8001f9e:	4b42      	ldr	r3, [pc, #264]	; (80020a8 <EXTI+0x520>)
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	4a41      	ldr	r2, [pc, #260]	; (80020a8 <EXTI+0x520>)
 8001fa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fa8:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<4);}
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4a3f      	ldr	r2, [pc, #252]	; (80020ac <EXTI+0x524>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d106      	bne.n	8001fc0 <EXTI+0x438>
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <EXTI+0x520>)
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	4a3c      	ldr	r2, [pc, #240]	; (80020a8 <EXTI+0x520>)
 8001fb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fbc:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}

			break;
 8001fbe:	e16e      	b.n	800229e <EXTI+0x716>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4a3b      	ldr	r2, [pc, #236]	; (80020b0 <EXTI+0x528>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d106      	bne.n	8001fd6 <EXTI+0x44e>
 8001fc8:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <EXTI+0x520>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	4a36      	ldr	r2, [pc, #216]	; (80020a8 <EXTI+0x520>)
 8001fce:	f043 0310 	orr.w	r3, r3, #16
 8001fd2:	6113      	str	r3, [r2, #16]
			break;
 8001fd4:	e163      	b.n	800229e <EXTI+0x716>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4a36      	ldr	r2, [pc, #216]	; (80020b4 <EXTI+0x52c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d106      	bne.n	8001fec <EXTI+0x464>
 8001fde:	4b32      	ldr	r3, [pc, #200]	; (80020a8 <EXTI+0x520>)
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	4a31      	ldr	r2, [pc, #196]	; (80020a8 <EXTI+0x520>)
 8001fe4:	f043 0320 	orr.w	r3, r3, #32
 8001fe8:	6113      	str	r3, [r2, #16]
			break;
 8001fea:	e158      	b.n	800229e <EXTI+0x716>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a2d      	ldr	r2, [pc, #180]	; (80020a4 <EXTI+0x51c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	f040 8154 	bne.w	800229e <EXTI+0x716>
 8001ff6:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <EXTI+0x520>)
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <EXTI+0x520>)
 8001ffc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002000:	6113      	str	r3, [r2, #16]
			break;
 8002002:	e14c      	b.n	800229e <EXTI+0x716>
		case pin10:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<8);
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <EXTI+0x520>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <EXTI+0x520>)
 800200a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800200e:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<8);}
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a26      	ldr	r2, [pc, #152]	; (80020ac <EXTI+0x524>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d106      	bne.n	8002026 <EXTI+0x49e>
 8002018:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <EXTI+0x520>)
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <EXTI+0x520>)
 800201e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002022:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}

			break;
 8002024:	e13d      	b.n	80022a2 <EXTI+0x71a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <EXTI+0x528>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d106      	bne.n	800203c <EXTI+0x4b4>
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <EXTI+0x520>)
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <EXTI+0x520>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6113      	str	r3, [r2, #16]
			break;
 800203a:	e132      	b.n	80022a2 <EXTI+0x71a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <EXTI+0x52c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d106      	bne.n	8002052 <EXTI+0x4ca>
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <EXTI+0x520>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <EXTI+0x520>)
 800204a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204e:	6113      	str	r3, [r2, #16]
			break;
 8002050:	e127      	b.n	80022a2 <EXTI+0x71a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <EXTI+0x51c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	f040 8123 	bne.w	80022a2 <EXTI+0x71a>
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <EXTI+0x520>)
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <EXTI+0x520>)
 8002062:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002066:	6113      	str	r3, [r2, #16]
			break;
 8002068:	e11b      	b.n	80022a2 <EXTI+0x71a>
		case pin11:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<12);
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <EXTI+0x520>)
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <EXTI+0x520>)
 8002070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002074:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<12);}
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <EXTI+0x524>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d106      	bne.n	800208c <EXTI+0x504>
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <EXTI+0x520>)
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <EXTI+0x520>)
 8002084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002088:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}

			break;
 800208a:	e10c      	b.n	80022a6 <EXTI+0x71e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <EXTI+0x528>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d111      	bne.n	80020b8 <EXTI+0x530>
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <EXTI+0x520>)
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <EXTI+0x520>)
 800209a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800209e:	6113      	str	r3, [r2, #16]
			break;
 80020a0:	e101      	b.n	80022a6 <EXTI+0x71e>
 80020a2:	bf00      	nop
 80020a4:	40011400 	.word	0x40011400
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010800 	.word	0x40010800
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	40011000 	.word	0x40011000
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a98      	ldr	r2, [pc, #608]	; (800231c <EXTI+0x794>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d106      	bne.n	80020ce <EXTI+0x546>
 80020c0:	4b97      	ldr	r3, [pc, #604]	; (8002320 <EXTI+0x798>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4a96      	ldr	r2, [pc, #600]	; (8002320 <EXTI+0x798>)
 80020c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ca:	6113      	str	r3, [r2, #16]
			break;
 80020cc:	e0eb      	b.n	80022a6 <EXTI+0x71e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a94      	ldr	r2, [pc, #592]	; (8002324 <EXTI+0x79c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	f040 80e7 	bne.w	80022a6 <EXTI+0x71e>
 80020d8:	4b91      	ldr	r3, [pc, #580]	; (8002320 <EXTI+0x798>)
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	4a90      	ldr	r2, [pc, #576]	; (8002320 <EXTI+0x798>)
 80020de:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80020e2:	6113      	str	r3, [r2, #16]
			break;
 80020e4:	e0df      	b.n	80022a6 <EXTI+0x71e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin12:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<0);
 80020e6:	4b8e      	ldr	r3, [pc, #568]	; (8002320 <EXTI+0x798>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4a8d      	ldr	r2, [pc, #564]	; (8002320 <EXTI+0x798>)
 80020ec:	f023 030f 	bic.w	r3, r3, #15
 80020f0:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<0);}
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a8c      	ldr	r2, [pc, #560]	; (8002328 <EXTI+0x7a0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d106      	bne.n	8002108 <EXTI+0x580>
 80020fa:	4b89      	ldr	r3, [pc, #548]	; (8002320 <EXTI+0x798>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4a88      	ldr	r2, [pc, #544]	; (8002320 <EXTI+0x798>)
 8002100:	f023 030f 	bic.w	r3, r3, #15
 8002104:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}

			break;
 8002106:	e0d0      	b.n	80022aa <EXTI+0x722>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4a88      	ldr	r2, [pc, #544]	; (800232c <EXTI+0x7a4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d106      	bne.n	800211e <EXTI+0x596>
 8002110:	4b83      	ldr	r3, [pc, #524]	; (8002320 <EXTI+0x798>)
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	4a82      	ldr	r2, [pc, #520]	; (8002320 <EXTI+0x798>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6153      	str	r3, [r2, #20]
			break;
 800211c:	e0c5      	b.n	80022aa <EXTI+0x722>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4a7e      	ldr	r2, [pc, #504]	; (800231c <EXTI+0x794>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d106      	bne.n	8002134 <EXTI+0x5ac>
 8002126:	4b7e      	ldr	r3, [pc, #504]	; (8002320 <EXTI+0x798>)
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	4a7d      	ldr	r2, [pc, #500]	; (8002320 <EXTI+0x798>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6153      	str	r3, [r2, #20]
			break;
 8002132:	e0ba      	b.n	80022aa <EXTI+0x722>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4a7b      	ldr	r2, [pc, #492]	; (8002324 <EXTI+0x79c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	f040 80b6 	bne.w	80022aa <EXTI+0x722>
 800213e:	4b78      	ldr	r3, [pc, #480]	; (8002320 <EXTI+0x798>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	4a77      	ldr	r2, [pc, #476]	; (8002320 <EXTI+0x798>)
 8002144:	f043 0303 	orr.w	r3, r3, #3
 8002148:	6153      	str	r3, [r2, #20]
			break;
 800214a:	e0ae      	b.n	80022aa <EXTI+0x722>
		case pin13:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<4);
 800214c:	4b74      	ldr	r3, [pc, #464]	; (8002320 <EXTI+0x798>)
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	4a73      	ldr	r2, [pc, #460]	; (8002320 <EXTI+0x798>)
 8002152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002156:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<4);}
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4a73      	ldr	r2, [pc, #460]	; (8002328 <EXTI+0x7a0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d106      	bne.n	800216e <EXTI+0x5e6>
 8002160:	4b6f      	ldr	r3, [pc, #444]	; (8002320 <EXTI+0x798>)
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	4a6e      	ldr	r2, [pc, #440]	; (8002320 <EXTI+0x798>)
 8002166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800216a:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}

			break;
 800216c:	e09f      	b.n	80022ae <EXTI+0x726>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4a6e      	ldr	r2, [pc, #440]	; (800232c <EXTI+0x7a4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d106      	bne.n	8002184 <EXTI+0x5fc>
 8002176:	4b6a      	ldr	r3, [pc, #424]	; (8002320 <EXTI+0x798>)
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	4a69      	ldr	r2, [pc, #420]	; (8002320 <EXTI+0x798>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	6153      	str	r3, [r2, #20]
			break;
 8002182:	e094      	b.n	80022ae <EXTI+0x726>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4a65      	ldr	r2, [pc, #404]	; (800231c <EXTI+0x794>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d106      	bne.n	800219a <EXTI+0x612>
 800218c:	4b64      	ldr	r3, [pc, #400]	; (8002320 <EXTI+0x798>)
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	4a63      	ldr	r2, [pc, #396]	; (8002320 <EXTI+0x798>)
 8002192:	f043 0320 	orr.w	r3, r3, #32
 8002196:	6153      	str	r3, [r2, #20]
			break;
 8002198:	e089      	b.n	80022ae <EXTI+0x726>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4a61      	ldr	r2, [pc, #388]	; (8002324 <EXTI+0x79c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	f040 8085 	bne.w	80022ae <EXTI+0x726>
 80021a4:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <EXTI+0x798>)
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <EXTI+0x798>)
 80021aa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80021ae:	6153      	str	r3, [r2, #20]
			break;
 80021b0:	e07d      	b.n	80022ae <EXTI+0x726>
		case pin14:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<8);
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <EXTI+0x798>)
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	4a5a      	ldr	r2, [pc, #360]	; (8002320 <EXTI+0x798>)
 80021b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021bc:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<8);}
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4a59      	ldr	r2, [pc, #356]	; (8002328 <EXTI+0x7a0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d106      	bne.n	80021d4 <EXTI+0x64c>
 80021c6:	4b56      	ldr	r3, [pc, #344]	; (8002320 <EXTI+0x798>)
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	4a55      	ldr	r2, [pc, #340]	; (8002320 <EXTI+0x798>)
 80021cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021d0:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}

			break;
 80021d2:	e06e      	b.n	80022b2 <EXTI+0x72a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4a55      	ldr	r2, [pc, #340]	; (800232c <EXTI+0x7a4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d106      	bne.n	80021ea <EXTI+0x662>
 80021dc:	4b50      	ldr	r3, [pc, #320]	; (8002320 <EXTI+0x798>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	4a4f      	ldr	r2, [pc, #316]	; (8002320 <EXTI+0x798>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e6:	6153      	str	r3, [r2, #20]
			break;
 80021e8:	e063      	b.n	80022b2 <EXTI+0x72a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4a4b      	ldr	r2, [pc, #300]	; (800231c <EXTI+0x794>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d106      	bne.n	8002200 <EXTI+0x678>
 80021f2:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <EXTI+0x798>)
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	4a4a      	ldr	r2, [pc, #296]	; (8002320 <EXTI+0x798>)
 80021f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fc:	6153      	str	r3, [r2, #20]
			break;
 80021fe:	e058      	b.n	80022b2 <EXTI+0x72a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4a48      	ldr	r2, [pc, #288]	; (8002324 <EXTI+0x79c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d154      	bne.n	80022b2 <EXTI+0x72a>
 8002208:	4b45      	ldr	r3, [pc, #276]	; (8002320 <EXTI+0x798>)
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	4a44      	ldr	r2, [pc, #272]	; (8002320 <EXTI+0x798>)
 800220e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002212:	6153      	str	r3, [r2, #20]
			break;
 8002214:	e04d      	b.n	80022b2 <EXTI+0x72a>
		case pin15:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<12);
 8002216:	4b42      	ldr	r3, [pc, #264]	; (8002320 <EXTI+0x798>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4a41      	ldr	r2, [pc, #260]	; (8002320 <EXTI+0x798>)
 800221c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002220:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<12);}
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a40      	ldr	r2, [pc, #256]	; (8002328 <EXTI+0x7a0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d106      	bne.n	8002238 <EXTI+0x6b0>
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <EXTI+0x798>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	4a3c      	ldr	r2, [pc, #240]	; (8002320 <EXTI+0x798>)
 8002230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002234:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}

			break;
 8002236:	e03e      	b.n	80022b6 <EXTI+0x72e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a3c      	ldr	r2, [pc, #240]	; (800232c <EXTI+0x7a4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d106      	bne.n	800224e <EXTI+0x6c6>
 8002240:	4b37      	ldr	r3, [pc, #220]	; (8002320 <EXTI+0x798>)
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	4a36      	ldr	r2, [pc, #216]	; (8002320 <EXTI+0x798>)
 8002246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800224a:	6153      	str	r3, [r2, #20]
			break;
 800224c:	e033      	b.n	80022b6 <EXTI+0x72e>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a32      	ldr	r2, [pc, #200]	; (800231c <EXTI+0x794>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d106      	bne.n	8002264 <EXTI+0x6dc>
 8002256:	4b32      	ldr	r3, [pc, #200]	; (8002320 <EXTI+0x798>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	4a31      	ldr	r2, [pc, #196]	; (8002320 <EXTI+0x798>)
 800225c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002260:	6153      	str	r3, [r2, #20]
			break;
 8002262:	e028      	b.n	80022b6 <EXTI+0x72e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a2f      	ldr	r2, [pc, #188]	; (8002324 <EXTI+0x79c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d124      	bne.n	80022b6 <EXTI+0x72e>
 800226c:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <EXTI+0x798>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <EXTI+0x798>)
 8002272:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002276:	6153      	str	r3, [r2, #20]
			break;
 8002278:	e01d      	b.n	80022b6 <EXTI+0x72e>
			break;
 800227a:	bf00      	nop
 800227c:	e01c      	b.n	80022b8 <EXTI+0x730>
			break;
 800227e:	bf00      	nop
 8002280:	e01a      	b.n	80022b8 <EXTI+0x730>
			break;
 8002282:	bf00      	nop
 8002284:	e018      	b.n	80022b8 <EXTI+0x730>
			break;
 8002286:	bf00      	nop
 8002288:	e016      	b.n	80022b8 <EXTI+0x730>
			break;
 800228a:	bf00      	nop
 800228c:	e014      	b.n	80022b8 <EXTI+0x730>
			break;
 800228e:	bf00      	nop
 8002290:	e012      	b.n	80022b8 <EXTI+0x730>
			break;
 8002292:	bf00      	nop
 8002294:	e010      	b.n	80022b8 <EXTI+0x730>
			break;
 8002296:	bf00      	nop
 8002298:	e00e      	b.n	80022b8 <EXTI+0x730>
			break;
 800229a:	bf00      	nop
 800229c:	e00c      	b.n	80022b8 <EXTI+0x730>
			break;
 800229e:	bf00      	nop
 80022a0:	e00a      	b.n	80022b8 <EXTI+0x730>
			break;
 80022a2:	bf00      	nop
 80022a4:	e008      	b.n	80022b8 <EXTI+0x730>
			break;
 80022a6:	bf00      	nop
 80022a8:	e006      	b.n	80022b8 <EXTI+0x730>
			break;
 80022aa:	bf00      	nop
 80022ac:	e004      	b.n	80022b8 <EXTI+0x730>
			break;
 80022ae:	bf00      	nop
 80022b0:	e002      	b.n	80022b8 <EXTI+0x730>
			break;
 80022b2:	bf00      	nop
 80022b4:	e000      	b.n	80022b8 <EXTI+0x730>
			break;
 80022b6:	bf00      	nop
		}
	//================================================
	//3- Update Rising or Falling Register
	EXIT->EXTI_RTSR &=~(1<<pin);
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <EXTI+0x7a8>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	897a      	ldrh	r2, [r7, #10]
 80022be:	2101      	movs	r1, #1
 80022c0:	fa01 f202 	lsl.w	r2, r1, r2
 80022c4:	43d2      	mvns	r2, r2
 80022c6:	4611      	mov	r1, r2
 80022c8:	4a19      	ldr	r2, [pc, #100]	; (8002330 <EXTI+0x7a8>)
 80022ca:	400b      	ands	r3, r1
 80022cc:	6093      	str	r3, [r2, #8]
	EXIT->EXTI_FTSR &=~(1<<pin);
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <EXTI+0x7a8>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	897a      	ldrh	r2, [r7, #10]
 80022d4:	2101      	movs	r1, #1
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	43d2      	mvns	r2, r2
 80022dc:	4611      	mov	r1, r2
 80022de:	4a14      	ldr	r2, [pc, #80]	; (8002330 <EXTI+0x7a8>)
 80022e0:	400b      	ands	r3, r1
 80022e2:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 80022e4:	893b      	ldrh	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10a      	bne.n	8002300 <EXTI+0x778>
		EXIT->EXTI_RTSR |= (1<<pin);
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <EXTI+0x7a8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	897a      	ldrh	r2, [r7, #10]
 80022f0:	2101      	movs	r1, #1
 80022f2:	fa01 f202 	lsl.w	r2, r1, r2
 80022f6:	4611      	mov	r1, r2
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <EXTI+0x7a8>)
 80022fa:	430b      	orrs	r3, r1
 80022fc:	6093      	str	r3, [r2, #8]
 80022fe:	e02d      	b.n	800235c <EXTI+0x7d4>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 8002300:	893b      	ldrh	r3, [r7, #8]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d116      	bne.n	8002334 <EXTI+0x7ac>
		EXIT->EXTI_FTSR |= (1<<pin);
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <EXTI+0x7a8>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	897a      	ldrh	r2, [r7, #10]
 800230c:	2101      	movs	r1, #1
 800230e:	fa01 f202 	lsl.w	r2, r1, r2
 8002312:	4611      	mov	r1, r2
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <EXTI+0x7a8>)
 8002316:	430b      	orrs	r3, r1
 8002318:	60d3      	str	r3, [r2, #12]
 800231a:	e01f      	b.n	800235c <EXTI+0x7d4>
 800231c:	40011000 	.word	0x40011000
 8002320:	40010000 	.word	0x40010000
 8002324:	40011400 	.word	0x40011400
 8002328:	40010800 	.word	0x40010800
 800232c:	40010c00 	.word	0x40010c00
 8002330:	40010400 	.word	0x40010400
	}
	else{
		EXIT->EXTI_RTSR |= (1<<pin);
 8002334:	4b15      	ldr	r3, [pc, #84]	; (800238c <EXTI+0x804>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	897a      	ldrh	r2, [r7, #10]
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f202 	lsl.w	r2, r1, r2
 8002340:	4611      	mov	r1, r2
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <EXTI+0x804>)
 8002344:	430b      	orrs	r3, r1
 8002346:	6093      	str	r3, [r2, #8]
		EXIT->EXTI_FTSR |= (1<<pin);
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <EXTI+0x804>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	897a      	ldrh	r2, [r7, #10]
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f202 	lsl.w	r2, r1, r2
 8002354:	4611      	mov	r1, r2
 8002356:	4a0d      	ldr	r2, [pc, #52]	; (800238c <EXTI+0x804>)
 8002358:	430b      	orrs	r3, r1
 800235a:	60d3      	str	r3, [r2, #12]
	}
	//4- Update IRQ Handling callback
	GP_IRQ_Callback[pin] =function_addres;
 800235c:	897b      	ldrh	r3, [r7, #10]
 800235e:	490c      	ldr	r1, [pc, #48]	; (8002390 <EXTI+0x808>)
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	EXIT->EXTI_IMR |=(1<<pin);
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <EXTI+0x804>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	897a      	ldrh	r2, [r7, #10]
 800236c:	2101      	movs	r1, #1
 800236e:	fa01 f202 	lsl.w	r2, r1, r2
 8002372:	4611      	mov	r1, r2
 8002374:	4a05      	ldr	r2, [pc, #20]	; (800238c <EXTI+0x804>)
 8002376:	430b      	orrs	r3, r1
 8002378:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 800237a:	897b      	ldrh	r3, [r7, #10]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fb9d 	bl	8001abc <Enable_NVIC>
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40010400 	.word	0x40010400
 8002390:	200000ec 	.word	0x200000ec

08002394 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <EXTI0_IRQHandler+0x1c>)
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <EXTI0_IRQHandler+0x1c>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <EXTI0_IRQHandler+0x20>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4798      	blx	r3
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40010400 	.word	0x40010400
 80023b4:	200000ec 	.word	0x200000ec

080023b8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <EXTI1_IRQHandler+0x1c>)
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <EXTI1_IRQHandler+0x1c>)
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <EXTI1_IRQHandler+0x20>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4798      	blx	r3

}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40010400 	.word	0x40010400
 80023d8:	200000ec 	.word	0x200000ec

080023dc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <EXTI2_IRQHandler+0x1c>)
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <EXTI2_IRQHandler+0x1c>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <EXTI2_IRQHandler+0x20>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4798      	blx	r3
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40010400 	.word	0x40010400
 80023fc:	200000ec 	.word	0x200000ec

08002400 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <EXTI3_IRQHandler+0x1c>)
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <EXTI3_IRQHandler+0x1c>)
 800240a:	f043 0308 	orr.w	r3, r3, #8
 800240e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <EXTI3_IRQHandler+0x20>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4798      	blx	r3
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40010400 	.word	0x40010400
 8002420:	200000ec 	.word	0x200000ec

08002424 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <EXTI4_IRQHandler+0x1c>)
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <EXTI4_IRQHandler+0x1c>)
 800242e:	f043 0310 	orr.w	r3, r3, #16
 8002432:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <EXTI4_IRQHandler+0x20>)
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	4798      	blx	r3
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40010400 	.word	0x40010400
 8002444:	200000ec 	.word	0x200000ec

08002448 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5]();  }
 800244c:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <EXTI9_5_IRQHandler+0x22>
 8002458:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	4a22      	ldr	r2, [pc, #136]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 800245e:	f043 0320 	orr.w	r3, r3, #32
 8002462:	6153      	str	r3, [r2, #20]
 8002464:	4b21      	ldr	r3, [pc, #132]	; (80024ec <EXTI9_5_IRQHandler+0xa4>)
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6]();  }
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <EXTI9_5_IRQHandler+0x40>
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	4a1b      	ldr	r2, [pc, #108]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 800247c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002480:	6153      	str	r3, [r2, #20]
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <EXTI9_5_IRQHandler+0xa4>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7]();  }
 8002488:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <EXTI9_5_IRQHandler+0x5e>
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 800249a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249e:	6153      	str	r3, [r2, #20]
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <EXTI9_5_IRQHandler+0xa4>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8]();  }
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <EXTI9_5_IRQHandler+0x7c>
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	4a0c      	ldr	r2, [pc, #48]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6153      	str	r3, [r2, #20]
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <EXTI9_5_IRQHandler+0xa4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9]();  }
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <EXTI9_5_IRQHandler+0x9a>
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <EXTI9_5_IRQHandler+0xa0>)
 80024d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024da:	6153      	str	r3, [r2, #20]
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <EXTI9_5_IRQHandler+0xa4>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	4798      	blx	r3
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40010400 	.word	0x40010400
 80024ec:	200000ec 	.word	0x200000ec

080024f0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10]();  }
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <EXTI15_10_IRQHandler+0x22>
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	4a29      	ldr	r2, [pc, #164]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 8002506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800250a:	6153      	str	r3, [r2, #20]
 800250c:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <EXTI15_10_IRQHandler+0xc0>)
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11]();  }
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <EXTI15_10_IRQHandler+0x40>
 800251e:	4b23      	ldr	r3, [pc, #140]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	4a22      	ldr	r2, [pc, #136]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 8002524:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002528:	6153      	str	r3, [r2, #20]
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <EXTI15_10_IRQHandler+0xc0>)
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12]();  }
 8002530:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <EXTI15_10_IRQHandler+0x5e>
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	4a1a      	ldr	r2, [pc, #104]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 8002542:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002546:	6153      	str	r3, [r2, #20]
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <EXTI15_10_IRQHandler+0xc0>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13]();  }
 800254e:	4b17      	ldr	r3, [pc, #92]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <EXTI15_10_IRQHandler+0x7c>
 800255a:	4b14      	ldr	r3, [pc, #80]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	4a13      	ldr	r2, [pc, #76]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 8002560:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002564:	6153      	str	r3, [r2, #20]
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <EXTI15_10_IRQHandler+0xc0>)
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14]();  }
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <EXTI15_10_IRQHandler+0x9a>
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 800257e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002582:	6153      	str	r3, [r2, #20]
 8002584:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <EXTI15_10_IRQHandler+0xc0>)
 8002586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002588:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15]();  }
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <EXTI15_10_IRQHandler+0xb8>
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	4a04      	ldr	r2, [pc, #16]	; (80025ac <EXTI15_10_IRQHandler+0xbc>)
 800259c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a0:	6153      	str	r3, [r2, #20]
 80025a2:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <EXTI15_10_IRQHandler+0xc0>)
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	4798      	blx	r3

}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40010400 	.word	0x40010400
 80025b0:	200000ec 	.word	0x200000ec

080025b4 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
	//slave only todo
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
	//slave only todo
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <USART_INIT>:
//===============================================================
void send_string (){

}
//===============================================================
void USART_INIT(USART_typeDef* USARTx,uint32_t mode,uint32_t word_length,uint32_t stop_bits,uint32_t baud_rate,uint32_t parity,uint32_t CLCK){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]

	if(USARTx ==USART1){
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a55      	ldr	r2, [pc, #340]	; (8002734 <USART_INIT+0x168>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d11f      	bne.n	8002622 <USART_INIT+0x56>
		USART1_Clock_Enable();
 80025e2:	4b55      	ldr	r3, [pc, #340]	; (8002738 <USART_INIT+0x16c>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4a54      	ldr	r2, [pc, #336]	; (8002738 <USART_INIT+0x16c>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ec:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();
 80025ee:	4b52      	ldr	r3, [pc, #328]	; (8002738 <USART_INIT+0x16c>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	4a51      	ldr	r2, [pc, #324]	; (8002738 <USART_INIT+0x16c>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6193      	str	r3, [r2, #24]
		NVIC_USART1_interrupt_Enable;
 80025fa:	4b50      	ldr	r3, [pc, #320]	; (800273c <USART_INIT+0x170>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a4f      	ldr	r2, [pc, #316]	; (800273c <USART_INIT+0x170>)
 8002600:	f043 0320 	orr.w	r3, r3, #32
 8002604:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin9,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8002606:	2209      	movs	r2, #9
 8002608:	2109      	movs	r1, #9
 800260a:	484d      	ldr	r0, [pc, #308]	; (8002740 <USART_INIT+0x174>)
 800260c:	f7fe face 	bl	8000bac <pinmode>
		//RX
		pinmode(GPIOA, pin10,GPIO_MODE_INTPUT_AF);
 8002610:	2204      	movs	r2, #4
 8002612:	210a      	movs	r1, #10
 8002614:	484a      	ldr	r0, [pc, #296]	; (8002740 <USART_INIT+0x174>)
 8002616:	f7fe fac9 	bl	8000bac <pinmode>
		arr[0]=USART1;
 800261a:	4b4a      	ldr	r3, [pc, #296]	; (8002744 <USART_INIT+0x178>)
 800261c:	4a45      	ldr	r2, [pc, #276]	; (8002734 <USART_INIT+0x168>)
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e042      	b.n	80026a8 <USART_INIT+0xdc>
	}
	else if(USARTx ==USART2){
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a48      	ldr	r2, [pc, #288]	; (8002748 <USART_INIT+0x17c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d11f      	bne.n	800266a <USART_INIT+0x9e>
		USART2_Clock_Enable();
 800262a:	4b43      	ldr	r3, [pc, #268]	; (8002738 <USART_INIT+0x16c>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	4a42      	ldr	r2, [pc, #264]	; (8002738 <USART_INIT+0x16c>)
 8002630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002634:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();
 8002636:	4b40      	ldr	r3, [pc, #256]	; (8002738 <USART_INIT+0x16c>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <USART_INIT+0x16c>)
 800263c:	f043 0304 	orr.w	r3, r3, #4
 8002640:	6193      	str	r3, [r2, #24]
		NVIC_USART2_interrupt_Enable;
 8002642:	4b3e      	ldr	r3, [pc, #248]	; (800273c <USART_INIT+0x170>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a3d      	ldr	r2, [pc, #244]	; (800273c <USART_INIT+0x170>)
 8002648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264c:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin2,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 800264e:	2209      	movs	r2, #9
 8002650:	2102      	movs	r1, #2
 8002652:	483b      	ldr	r0, [pc, #236]	; (8002740 <USART_INIT+0x174>)
 8002654:	f7fe faaa 	bl	8000bac <pinmode>
		//RX
		pinmode(GPIOA, pin3,GPIO_MODE_INTPUT_AF);
 8002658:	2204      	movs	r2, #4
 800265a:	2103      	movs	r1, #3
 800265c:	4838      	ldr	r0, [pc, #224]	; (8002740 <USART_INIT+0x174>)
 800265e:	f7fe faa5 	bl	8000bac <pinmode>
		arr[1]=USART2;
 8002662:	4b38      	ldr	r3, [pc, #224]	; (8002744 <USART_INIT+0x178>)
 8002664:	4a38      	ldr	r2, [pc, #224]	; (8002748 <USART_INIT+0x17c>)
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	e01e      	b.n	80026a8 <USART_INIT+0xdc>
	}
	else{
		USART3_Clock_Enable();
 800266a:	4b33      	ldr	r3, [pc, #204]	; (8002738 <USART_INIT+0x16c>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4a32      	ldr	r2, [pc, #200]	; (8002738 <USART_INIT+0x16c>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002674:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <USART_INIT+0x16c>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	4a2f      	ldr	r2, [pc, #188]	; (8002738 <USART_INIT+0x16c>)
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	6193      	str	r3, [r2, #24]
		NVIC_USART3_interrupt_Enable;
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <USART_INIT+0x170>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a2d      	ldr	r2, [pc, #180]	; (800273c <USART_INIT+0x170>)
 8002688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268c:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 800268e:	2209      	movs	r2, #9
 8002690:	210a      	movs	r1, #10
 8002692:	482e      	ldr	r0, [pc, #184]	; (800274c <USART_INIT+0x180>)
 8002694:	f7fe fa8a 	bl	8000bac <pinmode>
		//RX
		pinmode(GPIOB, pin11,GPIO_MODE_INTPUT_AF);
 8002698:	2204      	movs	r2, #4
 800269a:	210b      	movs	r1, #11
 800269c:	482b      	ldr	r0, [pc, #172]	; (800274c <USART_INIT+0x180>)
 800269e:	f7fe fa85 	bl	8000bac <pinmode>
		arr[2]=USART3;
 80026a2:	4b28      	ldr	r3, [pc, #160]	; (8002744 <USART_INIT+0x178>)
 80026a4:	4a2a      	ldr	r2, [pc, #168]	; (8002750 <USART_INIT+0x184>)
 80026a6:	609a      	str	r2, [r3, #8]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enabled
	USARTx->USART_CR1 |=(1<<13);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	60da      	str	r2, [r3, #12]
	//STEP 2
	//	Bit 12 M: Word length
	//	This bit determines the word length. It is set or cleared by software.
	//	0: 1 Start bit, 8 Data bits, n Stop bit
	//	1: 1 Start bit, 9 Data bits, n Stop bit
	USARTx->USART_CR1 |=word_length;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	60da      	str	r2, [r3, #12]
	//	These bits are used for programming the stop bits.
	//	00: 1 Stop bit
	//	01: 0.5 Stop bit
	//	10: 2 Stop bits
	//	11: 1.5 Stop bit
	USARTx->USART_CR2 |=stop_bits;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	611a      	str	r2, [r3, #16]
	//	2: When TE is set there is a 1 bit-time delay before the transmission starts.
	//	Bit 2 RE: Receiver enable
	//	This bit enables the receiver. It is set and cleared by software.
	//	0: Receiver is disabled
	//	1: Receiver is enabled and begins searching for a start bit
	USARTx->USART_CR1 |=mode;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	60da      	str	r2, [r3, #12]
	//	Bit 9 PS: Parity selection
	//	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	//	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	//	0: Even parity
	//	1: Odd parity
	USARTx->USART_CR1 |=parity;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	431a      	orrs	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	60da      	str	r2, [r3, #12]
	//	Bits 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV
	//	These 12 bits define the mantissa of the USART Divider (USARTDIV)
	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV
	//	These 4 bits define the fraction of the USART Divider (USARTDIV)

	uint16_t DIV_Mantissa =CLCK /(baud_rate*16);
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	82fb      	strh	r3, [r7, #22]
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	4a17      	ldr	r2, [pc, #92]	; (8002754 <USART_INIT+0x188>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	8afa      	ldrh	r2, [r7, #22]
 8002704:	2164      	movs	r1, #100	; 0x64
 8002706:	fb01 f202 	mul.w	r2, r1, r2
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	4a11      	ldr	r2, [pc, #68]	; (8002754 <USART_INIT+0x188>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	82bb      	strh	r3, [r7, #20]
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );
 8002718:	8afb      	ldrh	r3, [r7, #22]
 800271a:	011a      	lsls	r2, r3, #4
 800271c:	8abb      	ldrh	r3, [r7, #20]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	4313      	orrs	r3, r2
 8002724:	461a      	mov	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	609a      	str	r2, [r3, #8]


}
 800272a:	bf00      	nop
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40013800 	.word	0x40013800
 8002738:	40021000 	.word	0x40021000
 800273c:	e000e104 	.word	0xe000e104
 8002740:	40010800 	.word	0x40010800
 8002744:	20000128 	.word	0x20000128
 8002748:	40004400 	.word	0x40004400
 800274c:	40010c00 	.word	0x40010c00
 8002750:	40004800 	.word	0x40004800
 8002754:	51eb851f 	.word	0x51eb851f

08002758 <USART_SEND>:
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	0b1b      	lsrs	r3, r3, #12
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d106      	bne.n	800277e <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 800277c:	e004      	b.n	8002788 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	605a      	str	r2, [r3, #4]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
	...

08002794 <USART_SEND_STRING>:
		*data=arr_data_RES[2];
	}

}

void USART_SEND_STRING(USART_typeDef* USARTx,uint8_t* data){
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <USART_SEND_STRING+0x5c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d105      	bne.n	80027b2 <USART_SEND_STRING+0x1e>
		arr_data[0]=data;
 80027a6:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <USART_SEND_STRING+0x60>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6013      	str	r3, [r2, #0]
		arr[0]=USART1;
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <USART_SEND_STRING+0x64>)
 80027ae:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <USART_SEND_STRING+0x5c>)
 80027b0:	601a      	str	r2, [r3, #0]
	}
	if(USARTx==USART2){
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a11      	ldr	r2, [pc, #68]	; (80027fc <USART_SEND_STRING+0x68>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d105      	bne.n	80027c6 <USART_SEND_STRING+0x32>
		arr_data[1]=data;
 80027ba:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <USART_SEND_STRING+0x60>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6053      	str	r3, [r2, #4]
		arr[1]=USART2;
 80027c0:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <USART_SEND_STRING+0x64>)
 80027c2:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <USART_SEND_STRING+0x68>)
 80027c4:	605a      	str	r2, [r3, #4]
	}
	if(USARTx==USART3){
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <USART_SEND_STRING+0x6c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d105      	bne.n	80027da <USART_SEND_STRING+0x46>
		arr_data[2]=data;
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <USART_SEND_STRING+0x60>)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	6093      	str	r3, [r2, #8]
		arr[2]=USART3;
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <USART_SEND_STRING+0x64>)
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <USART_SEND_STRING+0x6c>)
 80027d8:	609a      	str	r2, [r3, #8]
	}
	//Bit 7 TXEIE: TXE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
	USARTx->USART_CR1 |=Transmit_data_register_empty;//open flage of interrupt
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	60da      	str	r2, [r3, #12]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40013800 	.word	0x40013800
 80027f4:	2000013c 	.word	0x2000013c
 80027f8:	20000128 	.word	0x20000128
 80027fc:	40004400 	.word	0x40004400
 8002800:	40004800 	.word	0x40004800

08002804 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800280a:	4b56      	ldr	r3, [pc, #344]	; (8002964 <USART1_IRQHandler+0x160>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	09db      	lsrs	r3, r3, #7
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d122      	bne.n	8002860 <USART1_IRQHandler+0x5c>
 800281a:	4b52      	ldr	r3, [pc, #328]	; (8002964 <USART1_IRQHandler+0x160>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	09db      	lsrs	r3, r3, #7
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d11a      	bne.n	8002860 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 800282a:	4b4f      	ldr	r3, [pc, #316]	; (8002968 <USART1_IRQHandler+0x164>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00d      	beq.n	8002850 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 8002834:	4b4b      	ldr	r3, [pc, #300]	; (8002964 <USART1_IRQHandler+0x160>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <USART1_IRQHandler+0x164>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4619      	mov	r1, r3
 800283e:	4610      	mov	r0, r2
 8002840:	f7ff ff8a 	bl	8002758 <USART_SEND>
			++arr_data[0];
 8002844:	4b48      	ldr	r3, [pc, #288]	; (8002968 <USART1_IRQHandler+0x164>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3301      	adds	r3, #1
 800284a:	4a47      	ldr	r2, [pc, #284]	; (8002968 <USART1_IRQHandler+0x164>)
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e007      	b.n	8002860 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 8002850:	4b44      	ldr	r3, [pc, #272]	; (8002964 <USART1_IRQHandler+0x160>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	4b43      	ldr	r3, [pc, #268]	; (8002964 <USART1_IRQHandler+0x160>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800285e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 8002860:	4b40      	ldr	r3, [pc, #256]	; (8002964 <USART1_IRQHandler+0x160>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d166      	bne.n	800293e <USART1_IRQHandler+0x13a>
 8002870:	4b3c      	ldr	r3, [pc, #240]	; (8002964 <USART1_IRQHandler+0x160>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d15e      	bne.n	800293e <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 8002880:	4b38      	ldr	r3, [pc, #224]	; (8002964 <USART1_IRQHandler+0x160>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	0b1b      	lsrs	r3, r3, #12
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d117      	bne.n	80028c0 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8002890:	4b34      	ldr	r3, [pc, #208]	; (8002964 <USART1_IRQHandler+0x160>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	0a9b      	lsrs	r3, r3, #10
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d108      	bne.n	80028b2 <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 80028a0:	4b30      	ldr	r3, [pc, #192]	; (8002964 <USART1_IRQHandler+0x160>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	4b2f      	ldr	r3, [pc, #188]	; (800296c <USART1_IRQHandler+0x168>)
 80028ae:	801a      	strh	r2, [r3, #0]
 80028b0:	e020      	b.n	80028f4 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 80028b2:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <USART1_IRQHandler+0x160>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	4b2c      	ldr	r3, [pc, #176]	; (800296c <USART1_IRQHandler+0x168>)
 80028bc:	801a      	strh	r2, [r3, #0]
 80028be:	e019      	b.n	80028f4 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 80028c0:	4b28      	ldr	r3, [pc, #160]	; (8002964 <USART1_IRQHandler+0x160>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	0a9b      	lsrs	r3, r3, #10
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d109      	bne.n	80028e4 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <USART1_IRQHandler+0x160>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028dc:	b29a      	uxth	r2, r3
 80028de:	4b23      	ldr	r3, [pc, #140]	; (800296c <USART1_IRQHandler+0x168>)
 80028e0:	801a      	strh	r2, [r3, #0]
 80028e2:	e007      	b.n	80028f4 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 80028e4:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <USART1_IRQHandler+0x160>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b1e      	ldr	r3, [pc, #120]	; (800296c <USART1_IRQHandler+0x168>)
 80028f2:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 80028f4:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <USART1_IRQHandler+0x16c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	e002      	b.n	8002906 <USART1_IRQHandler+0x102>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3301      	adds	r3, #1
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800290c:	4293      	cmp	r3, r2
 800290e:	ddf7      	ble.n	8002900 <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <USART1_IRQHandler+0x160>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <USART1_IRQHandler+0x160>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0220 	bic.w	r2, r2, #32
 800291e:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <USART1_IRQHandler+0x160>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <USART1_IRQHandler+0x170>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	b29b      	uxth	r3, r3
 800292c:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <USART1_IRQHandler+0x160>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <USART1_IRQHandler+0x160>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0220 	bic.w	r2, r2, #32
 800293c:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <USART1_IRQHandler+0x160>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <USART1_IRQHandler+0x170>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	b29b      	uxth	r3, r3
 800294a:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <USART1_IRQHandler+0x160>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b04      	ldr	r3, [pc, #16]	; (8002964 <USART1_IRQHandler+0x160>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0220 	bic.w	r2, r2, #32
 800295a:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000128 	.word	0x20000128
 8002968:	2000013c 	.word	0x2000013c
 800296c:	20000134 	.word	0x20000134
 8002970:	20000148 	.word	0x20000148
 8002974:	40013800 	.word	0x40013800

08002978 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800297e:	4b56      	ldr	r3, [pc, #344]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	09db      	lsrs	r3, r3, #7
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b01      	cmp	r3, #1
 800298c:	d122      	bne.n	80029d4 <USART2_IRQHandler+0x5c>
 800298e:	4b52      	ldr	r3, [pc, #328]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	09db      	lsrs	r3, r3, #7
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d11a      	bne.n	80029d4 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 800299e:	4b4f      	ldr	r3, [pc, #316]	; (8002adc <USART2_IRQHandler+0x164>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00d      	beq.n	80029c4 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 80029a8:	4b4b      	ldr	r3, [pc, #300]	; (8002ad8 <USART2_IRQHandler+0x160>)
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <USART2_IRQHandler+0x164>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f7ff fed0 	bl	8002758 <USART_SEND>
			++arr_data[1];
 80029b8:	4b48      	ldr	r3, [pc, #288]	; (8002adc <USART2_IRQHandler+0x164>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	3301      	adds	r3, #1
 80029be:	4a47      	ldr	r2, [pc, #284]	; (8002adc <USART2_IRQHandler+0x164>)
 80029c0:	6053      	str	r3, [r2, #4]
 80029c2:	e007      	b.n	80029d4 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 80029c4:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <USART2_IRQHandler+0x160>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <USART2_IRQHandler+0x160>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d2:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 80029d4:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <USART2_IRQHandler+0x160>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d166      	bne.n	8002ab2 <USART2_IRQHandler+0x13a>
 80029e4:	4b3c      	ldr	r3, [pc, #240]	; (8002ad8 <USART2_IRQHandler+0x160>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d15e      	bne.n	8002ab2 <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 80029f4:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <USART2_IRQHandler+0x160>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	0b1b      	lsrs	r3, r3, #12
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d117      	bne.n	8002a34 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8002a04:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	0a9b      	lsrs	r3, r3, #10
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d108      	bne.n	8002a26 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <USART2_IRQHandler+0x168>)
 8002a22:	805a      	strh	r2, [r3, #2]
 8002a24:	e020      	b.n	8002a68 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 8002a26:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <USART2_IRQHandler+0x168>)
 8002a30:	805a      	strh	r2, [r3, #2]
 8002a32:	e019      	b.n	8002a68 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	0a9b      	lsrs	r3, r3, #10
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d109      	bne.n	8002a58 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <USART2_IRQHandler+0x168>)
 8002a54:	805a      	strh	r2, [r3, #2]
 8002a56:	e007      	b.n	8002a68 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <USART2_IRQHandler+0x168>)
 8002a66:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 8002a68:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <USART2_IRQHandler+0x16c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	e002      	b.n	8002a7a <USART2_IRQHandler+0x102>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3301      	adds	r3, #1
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002a80:	4293      	cmp	r3, r2
 8002a82:	ddf7      	ble.n	8002a74 <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f022 0220 	bic.w	r2, r2, #32
 8002a92:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <USART2_IRQHandler+0x170>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f022 0220 	bic.w	r2, r2, #32
 8002ab0:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <USART2_IRQHandler+0x170>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <USART2_IRQHandler+0x160>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f022 0220 	bic.w	r2, r2, #32
 8002ace:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000128 	.word	0x20000128
 8002adc:	2000013c 	.word	0x2000013c
 8002ae0:	20000134 	.word	0x20000134
 8002ae4:	20000148 	.word	0x20000148
 8002ae8:	40004400 	.word	0x40004400

08002aec <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8002af2:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	09db      	lsrs	r3, r3, #7
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d122      	bne.n	8002b48 <USART3_IRQHandler+0x5c>
 8002b02:	4b52      	ldr	r3, [pc, #328]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	09db      	lsrs	r3, r3, #7
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d11a      	bne.n	8002b48 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 8002b12:	4b4f      	ldr	r3, [pc, #316]	; (8002c50 <USART3_IRQHandler+0x164>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00d      	beq.n	8002b38 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 8002b1c:	4b4b      	ldr	r3, [pc, #300]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <USART3_IRQHandler+0x164>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f7ff fe16 	bl	8002758 <USART_SEND>
			++arr_data[2];
 8002b2c:	4b48      	ldr	r3, [pc, #288]	; (8002c50 <USART3_IRQHandler+0x164>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	3301      	adds	r3, #1
 8002b32:	4a47      	ldr	r2, [pc, #284]	; (8002c50 <USART3_IRQHandler+0x164>)
 8002b34:	6093      	str	r3, [r2, #8]
 8002b36:	e007      	b.n	8002b48 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 8002b38:	4b44      	ldr	r3, [pc, #272]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	4b43      	ldr	r3, [pc, #268]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b46:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 8002b48:	4b40      	ldr	r3, [pc, #256]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d166      	bne.n	8002c26 <USART3_IRQHandler+0x13a>
 8002b58:	4b3c      	ldr	r3, [pc, #240]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d15e      	bne.n	8002c26 <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 8002b68:	4b38      	ldr	r3, [pc, #224]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	0b1b      	lsrs	r3, r3, #12
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d117      	bne.n	8002ba8 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8002b78:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	0a9b      	lsrs	r3, r3, #10
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d108      	bne.n	8002b9a <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8002b88:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <USART3_IRQHandler+0x168>)
 8002b96:	809a      	strh	r2, [r3, #4]
 8002b98:	e020      	b.n	8002bdc <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 8002b9a:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	4b2c      	ldr	r3, [pc, #176]	; (8002c54 <USART3_IRQHandler+0x168>)
 8002ba4:	809a      	strh	r2, [r3, #4]
 8002ba6:	e019      	b.n	8002bdc <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8002ba8:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	0a9b      	lsrs	r3, r3, #10
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d109      	bne.n	8002bcc <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 8002bb8:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <USART3_IRQHandler+0x168>)
 8002bc8:	809a      	strh	r2, [r3, #4]
 8002bca:	e007      	b.n	8002bdc <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8002bcc:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <USART3_IRQHandler+0x168>)
 8002bda:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <USART3_IRQHandler+0x16c>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	e002      	b.n	8002bee <USART3_IRQHandler+0x102>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3301      	adds	r3, #1
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	ddf7      	ble.n	8002be8 <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 8002bf8:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f022 0220 	bic.w	r2, r2, #32
 8002c06:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 8002c08:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <USART3_IRQHandler+0x170>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f022 0220 	bic.w	r2, r2, #32
 8002c24:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <USART3_IRQHandler+0x170>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <USART3_IRQHandler+0x160>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f022 0220 	bic.w	r2, r2, #32
 8002c42:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000128 	.word	0x20000128
 8002c50:	2000013c 	.word	0x2000013c
 8002c54:	20000134 	.word	0x20000134
 8002c58:	20000148 	.word	0x20000148
 8002c5c:	40004800 	.word	0x40004800

08002c60 <__errno>:
 8002c60:	4b01      	ldr	r3, [pc, #4]	; (8002c68 <__errno+0x8>)
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000020 	.word	0x20000020

08002c6c <__libc_init_array>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	2500      	movs	r5, #0
 8002c70:	4e0c      	ldr	r6, [pc, #48]	; (8002ca4 <__libc_init_array+0x38>)
 8002c72:	4c0d      	ldr	r4, [pc, #52]	; (8002ca8 <__libc_init_array+0x3c>)
 8002c74:	1ba4      	subs	r4, r4, r6
 8002c76:	10a4      	asrs	r4, r4, #2
 8002c78:	42a5      	cmp	r5, r4
 8002c7a:	d109      	bne.n	8002c90 <__libc_init_array+0x24>
 8002c7c:	f000 fc2c 	bl	80034d8 <_init>
 8002c80:	2500      	movs	r5, #0
 8002c82:	4e0a      	ldr	r6, [pc, #40]	; (8002cac <__libc_init_array+0x40>)
 8002c84:	4c0a      	ldr	r4, [pc, #40]	; (8002cb0 <__libc_init_array+0x44>)
 8002c86:	1ba4      	subs	r4, r4, r6
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	42a5      	cmp	r5, r4
 8002c8c:	d105      	bne.n	8002c9a <__libc_init_array+0x2e>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c94:	4798      	blx	r3
 8002c96:	3501      	adds	r5, #1
 8002c98:	e7ee      	b.n	8002c78 <__libc_init_array+0xc>
 8002c9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c9e:	4798      	blx	r3
 8002ca0:	3501      	adds	r5, #1
 8002ca2:	e7f2      	b.n	8002c8a <__libc_init_array+0x1e>
 8002ca4:	0800352c 	.word	0x0800352c
 8002ca8:	0800352c 	.word	0x0800352c
 8002cac:	0800352c 	.word	0x0800352c
 8002cb0:	08003530 	.word	0x08003530

08002cb4 <siprintf>:
 8002cb4:	b40e      	push	{r1, r2, r3}
 8002cb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cba:	b500      	push	{lr}
 8002cbc:	b09c      	sub	sp, #112	; 0x70
 8002cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8002cc0:	9002      	str	r0, [sp, #8]
 8002cc2:	9006      	str	r0, [sp, #24]
 8002cc4:	9107      	str	r1, [sp, #28]
 8002cc6:	9104      	str	r1, [sp, #16]
 8002cc8:	4808      	ldr	r0, [pc, #32]	; (8002cec <siprintf+0x38>)
 8002cca:	4909      	ldr	r1, [pc, #36]	; (8002cf0 <siprintf+0x3c>)
 8002ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cd0:	9105      	str	r1, [sp, #20]
 8002cd2:	6800      	ldr	r0, [r0, #0]
 8002cd4:	a902      	add	r1, sp, #8
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	f000 f8e6 	bl	8002ea8 <_svfiprintf_r>
 8002cdc:	2200      	movs	r2, #0
 8002cde:	9b02      	ldr	r3, [sp, #8]
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	b01c      	add	sp, #112	; 0x70
 8002ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ce8:	b003      	add	sp, #12
 8002cea:	4770      	bx	lr
 8002cec:	20000020 	.word	0x20000020
 8002cf0:	ffff0208 	.word	0xffff0208

08002cf4 <_malloc_r>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	1ccd      	adds	r5, r1, #3
 8002cf8:	f025 0503 	bic.w	r5, r5, #3
 8002cfc:	3508      	adds	r5, #8
 8002cfe:	2d0c      	cmp	r5, #12
 8002d00:	bf38      	it	cc
 8002d02:	250c      	movcc	r5, #12
 8002d04:	2d00      	cmp	r5, #0
 8002d06:	4606      	mov	r6, r0
 8002d08:	db01      	blt.n	8002d0e <_malloc_r+0x1a>
 8002d0a:	42a9      	cmp	r1, r5
 8002d0c:	d903      	bls.n	8002d16 <_malloc_r+0x22>
 8002d0e:	230c      	movs	r3, #12
 8002d10:	6033      	str	r3, [r6, #0]
 8002d12:	2000      	movs	r0, #0
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
 8002d16:	f000 fb89 	bl	800342c <__malloc_lock>
 8002d1a:	4a21      	ldr	r2, [pc, #132]	; (8002da0 <_malloc_r+0xac>)
 8002d1c:	6814      	ldr	r4, [r2, #0]
 8002d1e:	4621      	mov	r1, r4
 8002d20:	b991      	cbnz	r1, 8002d48 <_malloc_r+0x54>
 8002d22:	4c20      	ldr	r4, [pc, #128]	; (8002da4 <_malloc_r+0xb0>)
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	b91b      	cbnz	r3, 8002d30 <_malloc_r+0x3c>
 8002d28:	4630      	mov	r0, r6
 8002d2a:	f000 fb3d 	bl	80033a8 <_sbrk_r>
 8002d2e:	6020      	str	r0, [r4, #0]
 8002d30:	4629      	mov	r1, r5
 8002d32:	4630      	mov	r0, r6
 8002d34:	f000 fb38 	bl	80033a8 <_sbrk_r>
 8002d38:	1c43      	adds	r3, r0, #1
 8002d3a:	d124      	bne.n	8002d86 <_malloc_r+0x92>
 8002d3c:	230c      	movs	r3, #12
 8002d3e:	4630      	mov	r0, r6
 8002d40:	6033      	str	r3, [r6, #0]
 8002d42:	f000 fb74 	bl	800342e <__malloc_unlock>
 8002d46:	e7e4      	b.n	8002d12 <_malloc_r+0x1e>
 8002d48:	680b      	ldr	r3, [r1, #0]
 8002d4a:	1b5b      	subs	r3, r3, r5
 8002d4c:	d418      	bmi.n	8002d80 <_malloc_r+0x8c>
 8002d4e:	2b0b      	cmp	r3, #11
 8002d50:	d90f      	bls.n	8002d72 <_malloc_r+0x7e>
 8002d52:	600b      	str	r3, [r1, #0]
 8002d54:	18cc      	adds	r4, r1, r3
 8002d56:	50cd      	str	r5, [r1, r3]
 8002d58:	4630      	mov	r0, r6
 8002d5a:	f000 fb68 	bl	800342e <__malloc_unlock>
 8002d5e:	f104 000b 	add.w	r0, r4, #11
 8002d62:	1d23      	adds	r3, r4, #4
 8002d64:	f020 0007 	bic.w	r0, r0, #7
 8002d68:	1ac3      	subs	r3, r0, r3
 8002d6a:	d0d3      	beq.n	8002d14 <_malloc_r+0x20>
 8002d6c:	425a      	negs	r2, r3
 8002d6e:	50e2      	str	r2, [r4, r3]
 8002d70:	e7d0      	b.n	8002d14 <_malloc_r+0x20>
 8002d72:	684b      	ldr	r3, [r1, #4]
 8002d74:	428c      	cmp	r4, r1
 8002d76:	bf16      	itet	ne
 8002d78:	6063      	strne	r3, [r4, #4]
 8002d7a:	6013      	streq	r3, [r2, #0]
 8002d7c:	460c      	movne	r4, r1
 8002d7e:	e7eb      	b.n	8002d58 <_malloc_r+0x64>
 8002d80:	460c      	mov	r4, r1
 8002d82:	6849      	ldr	r1, [r1, #4]
 8002d84:	e7cc      	b.n	8002d20 <_malloc_r+0x2c>
 8002d86:	1cc4      	adds	r4, r0, #3
 8002d88:	f024 0403 	bic.w	r4, r4, #3
 8002d8c:	42a0      	cmp	r0, r4
 8002d8e:	d005      	beq.n	8002d9c <_malloc_r+0xa8>
 8002d90:	1a21      	subs	r1, r4, r0
 8002d92:	4630      	mov	r0, r6
 8002d94:	f000 fb08 	bl	80033a8 <_sbrk_r>
 8002d98:	3001      	adds	r0, #1
 8002d9a:	d0cf      	beq.n	8002d3c <_malloc_r+0x48>
 8002d9c:	6025      	str	r5, [r4, #0]
 8002d9e:	e7db      	b.n	8002d58 <_malloc_r+0x64>
 8002da0:	200000b8 	.word	0x200000b8
 8002da4:	200000bc 	.word	0x200000bc

08002da8 <_realloc_r>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	4607      	mov	r7, r0
 8002dac:	4614      	mov	r4, r2
 8002dae:	460e      	mov	r6, r1
 8002db0:	b921      	cbnz	r1, 8002dbc <_realloc_r+0x14>
 8002db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002db6:	4611      	mov	r1, r2
 8002db8:	f7ff bf9c 	b.w	8002cf4 <_malloc_r>
 8002dbc:	b922      	cbnz	r2, 8002dc8 <_realloc_r+0x20>
 8002dbe:	f000 fb37 	bl	8003430 <_free_r>
 8002dc2:	4625      	mov	r5, r4
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dc8:	f000 fb7e 	bl	80034c8 <_malloc_usable_size_r>
 8002dcc:	42a0      	cmp	r0, r4
 8002dce:	d20f      	bcs.n	8002df0 <_realloc_r+0x48>
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	4638      	mov	r0, r7
 8002dd4:	f7ff ff8e 	bl	8002cf4 <_malloc_r>
 8002dd8:	4605      	mov	r5, r0
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d0f2      	beq.n	8002dc4 <_realloc_r+0x1c>
 8002dde:	4631      	mov	r1, r6
 8002de0:	4622      	mov	r2, r4
 8002de2:	f000 faff 	bl	80033e4 <memcpy>
 8002de6:	4631      	mov	r1, r6
 8002de8:	4638      	mov	r0, r7
 8002dea:	f000 fb21 	bl	8003430 <_free_r>
 8002dee:	e7e9      	b.n	8002dc4 <_realloc_r+0x1c>
 8002df0:	4635      	mov	r5, r6
 8002df2:	e7e7      	b.n	8002dc4 <_realloc_r+0x1c>

08002df4 <__ssputs_r>:
 8002df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df8:	688e      	ldr	r6, [r1, #8]
 8002dfa:	4682      	mov	sl, r0
 8002dfc:	429e      	cmp	r6, r3
 8002dfe:	460c      	mov	r4, r1
 8002e00:	4690      	mov	r8, r2
 8002e02:	4699      	mov	r9, r3
 8002e04:	d837      	bhi.n	8002e76 <__ssputs_r+0x82>
 8002e06:	898a      	ldrh	r2, [r1, #12]
 8002e08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e0c:	d031      	beq.n	8002e72 <__ssputs_r+0x7e>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	6825      	ldr	r5, [r4, #0]
 8002e12:	6909      	ldr	r1, [r1, #16]
 8002e14:	1a6f      	subs	r7, r5, r1
 8002e16:	6965      	ldr	r5, [r4, #20]
 8002e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e1c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e20:	f109 0301 	add.w	r3, r9, #1
 8002e24:	443b      	add	r3, r7
 8002e26:	429d      	cmp	r5, r3
 8002e28:	bf38      	it	cc
 8002e2a:	461d      	movcc	r5, r3
 8002e2c:	0553      	lsls	r3, r2, #21
 8002e2e:	d530      	bpl.n	8002e92 <__ssputs_r+0x9e>
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7ff ff5f 	bl	8002cf4 <_malloc_r>
 8002e36:	4606      	mov	r6, r0
 8002e38:	b950      	cbnz	r0, 8002e50 <__ssputs_r+0x5c>
 8002e3a:	230c      	movs	r3, #12
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f8ca 3000 	str.w	r3, [sl]
 8002e44:	89a3      	ldrh	r3, [r4, #12]
 8002e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e4a:	81a3      	strh	r3, [r4, #12]
 8002e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e50:	463a      	mov	r2, r7
 8002e52:	6921      	ldr	r1, [r4, #16]
 8002e54:	f000 fac6 	bl	80033e4 <memcpy>
 8002e58:	89a3      	ldrh	r3, [r4, #12]
 8002e5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e62:	81a3      	strh	r3, [r4, #12]
 8002e64:	6126      	str	r6, [r4, #16]
 8002e66:	443e      	add	r6, r7
 8002e68:	6026      	str	r6, [r4, #0]
 8002e6a:	464e      	mov	r6, r9
 8002e6c:	6165      	str	r5, [r4, #20]
 8002e6e:	1bed      	subs	r5, r5, r7
 8002e70:	60a5      	str	r5, [r4, #8]
 8002e72:	454e      	cmp	r6, r9
 8002e74:	d900      	bls.n	8002e78 <__ssputs_r+0x84>
 8002e76:	464e      	mov	r6, r9
 8002e78:	4632      	mov	r2, r6
 8002e7a:	4641      	mov	r1, r8
 8002e7c:	6820      	ldr	r0, [r4, #0]
 8002e7e:	f000 fabc 	bl	80033fa <memmove>
 8002e82:	68a3      	ldr	r3, [r4, #8]
 8002e84:	2000      	movs	r0, #0
 8002e86:	1b9b      	subs	r3, r3, r6
 8002e88:	60a3      	str	r3, [r4, #8]
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	441e      	add	r6, r3
 8002e8e:	6026      	str	r6, [r4, #0]
 8002e90:	e7dc      	b.n	8002e4c <__ssputs_r+0x58>
 8002e92:	462a      	mov	r2, r5
 8002e94:	f7ff ff88 	bl	8002da8 <_realloc_r>
 8002e98:	4606      	mov	r6, r0
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	d1e2      	bne.n	8002e64 <__ssputs_r+0x70>
 8002e9e:	6921      	ldr	r1, [r4, #16]
 8002ea0:	4650      	mov	r0, sl
 8002ea2:	f000 fac5 	bl	8003430 <_free_r>
 8002ea6:	e7c8      	b.n	8002e3a <__ssputs_r+0x46>

08002ea8 <_svfiprintf_r>:
 8002ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eac:	461d      	mov	r5, r3
 8002eae:	898b      	ldrh	r3, [r1, #12]
 8002eb0:	b09d      	sub	sp, #116	; 0x74
 8002eb2:	061f      	lsls	r7, r3, #24
 8002eb4:	4680      	mov	r8, r0
 8002eb6:	460c      	mov	r4, r1
 8002eb8:	4616      	mov	r6, r2
 8002eba:	d50f      	bpl.n	8002edc <_svfiprintf_r+0x34>
 8002ebc:	690b      	ldr	r3, [r1, #16]
 8002ebe:	b96b      	cbnz	r3, 8002edc <_svfiprintf_r+0x34>
 8002ec0:	2140      	movs	r1, #64	; 0x40
 8002ec2:	f7ff ff17 	bl	8002cf4 <_malloc_r>
 8002ec6:	6020      	str	r0, [r4, #0]
 8002ec8:	6120      	str	r0, [r4, #16]
 8002eca:	b928      	cbnz	r0, 8002ed8 <_svfiprintf_r+0x30>
 8002ecc:	230c      	movs	r3, #12
 8002ece:	f8c8 3000 	str.w	r3, [r8]
 8002ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed6:	e0c8      	b.n	800306a <_svfiprintf_r+0x1c2>
 8002ed8:	2340      	movs	r3, #64	; 0x40
 8002eda:	6163      	str	r3, [r4, #20]
 8002edc:	2300      	movs	r3, #0
 8002ede:	9309      	str	r3, [sp, #36]	; 0x24
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ee6:	2330      	movs	r3, #48	; 0x30
 8002ee8:	f04f 0b01 	mov.w	fp, #1
 8002eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ef0:	9503      	str	r5, [sp, #12]
 8002ef2:	4637      	mov	r7, r6
 8002ef4:	463d      	mov	r5, r7
 8002ef6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002efa:	b10b      	cbz	r3, 8002f00 <_svfiprintf_r+0x58>
 8002efc:	2b25      	cmp	r3, #37	; 0x25
 8002efe:	d13e      	bne.n	8002f7e <_svfiprintf_r+0xd6>
 8002f00:	ebb7 0a06 	subs.w	sl, r7, r6
 8002f04:	d00b      	beq.n	8002f1e <_svfiprintf_r+0x76>
 8002f06:	4653      	mov	r3, sl
 8002f08:	4632      	mov	r2, r6
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	4640      	mov	r0, r8
 8002f0e:	f7ff ff71 	bl	8002df4 <__ssputs_r>
 8002f12:	3001      	adds	r0, #1
 8002f14:	f000 80a4 	beq.w	8003060 <_svfiprintf_r+0x1b8>
 8002f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f1a:	4453      	add	r3, sl
 8002f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f1e:	783b      	ldrb	r3, [r7, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 809d 	beq.w	8003060 <_svfiprintf_r+0x1b8>
 8002f26:	2300      	movs	r3, #0
 8002f28:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f30:	9304      	str	r3, [sp, #16]
 8002f32:	9307      	str	r3, [sp, #28]
 8002f34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f38:	931a      	str	r3, [sp, #104]	; 0x68
 8002f3a:	462f      	mov	r7, r5
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002f42:	4850      	ldr	r0, [pc, #320]	; (8003084 <_svfiprintf_r+0x1dc>)
 8002f44:	f000 fa40 	bl	80033c8 <memchr>
 8002f48:	9b04      	ldr	r3, [sp, #16]
 8002f4a:	b9d0      	cbnz	r0, 8002f82 <_svfiprintf_r+0xda>
 8002f4c:	06d9      	lsls	r1, r3, #27
 8002f4e:	bf44      	itt	mi
 8002f50:	2220      	movmi	r2, #32
 8002f52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f56:	071a      	lsls	r2, r3, #28
 8002f58:	bf44      	itt	mi
 8002f5a:	222b      	movmi	r2, #43	; 0x2b
 8002f5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f60:	782a      	ldrb	r2, [r5, #0]
 8002f62:	2a2a      	cmp	r2, #42	; 0x2a
 8002f64:	d015      	beq.n	8002f92 <_svfiprintf_r+0xea>
 8002f66:	462f      	mov	r7, r5
 8002f68:	2000      	movs	r0, #0
 8002f6a:	250a      	movs	r5, #10
 8002f6c:	9a07      	ldr	r2, [sp, #28]
 8002f6e:	4639      	mov	r1, r7
 8002f70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f74:	3b30      	subs	r3, #48	; 0x30
 8002f76:	2b09      	cmp	r3, #9
 8002f78:	d94d      	bls.n	8003016 <_svfiprintf_r+0x16e>
 8002f7a:	b1b8      	cbz	r0, 8002fac <_svfiprintf_r+0x104>
 8002f7c:	e00f      	b.n	8002f9e <_svfiprintf_r+0xf6>
 8002f7e:	462f      	mov	r7, r5
 8002f80:	e7b8      	b.n	8002ef4 <_svfiprintf_r+0x4c>
 8002f82:	4a40      	ldr	r2, [pc, #256]	; (8003084 <_svfiprintf_r+0x1dc>)
 8002f84:	463d      	mov	r5, r7
 8002f86:	1a80      	subs	r0, r0, r2
 8002f88:	fa0b f000 	lsl.w	r0, fp, r0
 8002f8c:	4318      	orrs	r0, r3
 8002f8e:	9004      	str	r0, [sp, #16]
 8002f90:	e7d3      	b.n	8002f3a <_svfiprintf_r+0x92>
 8002f92:	9a03      	ldr	r2, [sp, #12]
 8002f94:	1d11      	adds	r1, r2, #4
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	9103      	str	r1, [sp, #12]
 8002f9a:	2a00      	cmp	r2, #0
 8002f9c:	db01      	blt.n	8002fa2 <_svfiprintf_r+0xfa>
 8002f9e:	9207      	str	r2, [sp, #28]
 8002fa0:	e004      	b.n	8002fac <_svfiprintf_r+0x104>
 8002fa2:	4252      	negs	r2, r2
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	9207      	str	r2, [sp, #28]
 8002faa:	9304      	str	r3, [sp, #16]
 8002fac:	783b      	ldrb	r3, [r7, #0]
 8002fae:	2b2e      	cmp	r3, #46	; 0x2e
 8002fb0:	d10c      	bne.n	8002fcc <_svfiprintf_r+0x124>
 8002fb2:	787b      	ldrb	r3, [r7, #1]
 8002fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8002fb6:	d133      	bne.n	8003020 <_svfiprintf_r+0x178>
 8002fb8:	9b03      	ldr	r3, [sp, #12]
 8002fba:	3702      	adds	r7, #2
 8002fbc:	1d1a      	adds	r2, r3, #4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	9203      	str	r2, [sp, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bfb8      	it	lt
 8002fc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fca:	9305      	str	r3, [sp, #20]
 8002fcc:	4d2e      	ldr	r5, [pc, #184]	; (8003088 <_svfiprintf_r+0x1e0>)
 8002fce:	2203      	movs	r2, #3
 8002fd0:	7839      	ldrb	r1, [r7, #0]
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f000 f9f8 	bl	80033c8 <memchr>
 8002fd8:	b138      	cbz	r0, 8002fea <_svfiprintf_r+0x142>
 8002fda:	2340      	movs	r3, #64	; 0x40
 8002fdc:	1b40      	subs	r0, r0, r5
 8002fde:	fa03 f000 	lsl.w	r0, r3, r0
 8002fe2:	9b04      	ldr	r3, [sp, #16]
 8002fe4:	3701      	adds	r7, #1
 8002fe6:	4303      	orrs	r3, r0
 8002fe8:	9304      	str	r3, [sp, #16]
 8002fea:	7839      	ldrb	r1, [r7, #0]
 8002fec:	2206      	movs	r2, #6
 8002fee:	4827      	ldr	r0, [pc, #156]	; (800308c <_svfiprintf_r+0x1e4>)
 8002ff0:	1c7e      	adds	r6, r7, #1
 8002ff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ff6:	f000 f9e7 	bl	80033c8 <memchr>
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	d038      	beq.n	8003070 <_svfiprintf_r+0x1c8>
 8002ffe:	4b24      	ldr	r3, [pc, #144]	; (8003090 <_svfiprintf_r+0x1e8>)
 8003000:	bb13      	cbnz	r3, 8003048 <_svfiprintf_r+0x1a0>
 8003002:	9b03      	ldr	r3, [sp, #12]
 8003004:	3307      	adds	r3, #7
 8003006:	f023 0307 	bic.w	r3, r3, #7
 800300a:	3308      	adds	r3, #8
 800300c:	9303      	str	r3, [sp, #12]
 800300e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003010:	444b      	add	r3, r9
 8003012:	9309      	str	r3, [sp, #36]	; 0x24
 8003014:	e76d      	b.n	8002ef2 <_svfiprintf_r+0x4a>
 8003016:	fb05 3202 	mla	r2, r5, r2, r3
 800301a:	2001      	movs	r0, #1
 800301c:	460f      	mov	r7, r1
 800301e:	e7a6      	b.n	8002f6e <_svfiprintf_r+0xc6>
 8003020:	2300      	movs	r3, #0
 8003022:	250a      	movs	r5, #10
 8003024:	4619      	mov	r1, r3
 8003026:	3701      	adds	r7, #1
 8003028:	9305      	str	r3, [sp, #20]
 800302a:	4638      	mov	r0, r7
 800302c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003030:	3a30      	subs	r2, #48	; 0x30
 8003032:	2a09      	cmp	r2, #9
 8003034:	d903      	bls.n	800303e <_svfiprintf_r+0x196>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0c8      	beq.n	8002fcc <_svfiprintf_r+0x124>
 800303a:	9105      	str	r1, [sp, #20]
 800303c:	e7c6      	b.n	8002fcc <_svfiprintf_r+0x124>
 800303e:	fb05 2101 	mla	r1, r5, r1, r2
 8003042:	2301      	movs	r3, #1
 8003044:	4607      	mov	r7, r0
 8003046:	e7f0      	b.n	800302a <_svfiprintf_r+0x182>
 8003048:	ab03      	add	r3, sp, #12
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	4622      	mov	r2, r4
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <_svfiprintf_r+0x1ec>)
 8003050:	a904      	add	r1, sp, #16
 8003052:	4640      	mov	r0, r8
 8003054:	f3af 8000 	nop.w
 8003058:	f1b0 3fff 	cmp.w	r0, #4294967295
 800305c:	4681      	mov	r9, r0
 800305e:	d1d6      	bne.n	800300e <_svfiprintf_r+0x166>
 8003060:	89a3      	ldrh	r3, [r4, #12]
 8003062:	065b      	lsls	r3, r3, #25
 8003064:	f53f af35 	bmi.w	8002ed2 <_svfiprintf_r+0x2a>
 8003068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800306a:	b01d      	add	sp, #116	; 0x74
 800306c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003070:	ab03      	add	r3, sp, #12
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	4622      	mov	r2, r4
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <_svfiprintf_r+0x1ec>)
 8003078:	a904      	add	r1, sp, #16
 800307a:	4640      	mov	r0, r8
 800307c:	f000 f882 	bl	8003184 <_printf_i>
 8003080:	e7ea      	b.n	8003058 <_svfiprintf_r+0x1b0>
 8003082:	bf00      	nop
 8003084:	080034f7 	.word	0x080034f7
 8003088:	080034fd 	.word	0x080034fd
 800308c:	08003501 	.word	0x08003501
 8003090:	00000000 	.word	0x00000000
 8003094:	08002df5 	.word	0x08002df5

08003098 <_printf_common>:
 8003098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800309c:	4691      	mov	r9, r2
 800309e:	461f      	mov	r7, r3
 80030a0:	688a      	ldr	r2, [r1, #8]
 80030a2:	690b      	ldr	r3, [r1, #16]
 80030a4:	4606      	mov	r6, r0
 80030a6:	4293      	cmp	r3, r2
 80030a8:	bfb8      	it	lt
 80030aa:	4613      	movlt	r3, r2
 80030ac:	f8c9 3000 	str.w	r3, [r9]
 80030b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030b4:	460c      	mov	r4, r1
 80030b6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030ba:	b112      	cbz	r2, 80030c2 <_printf_common+0x2a>
 80030bc:	3301      	adds	r3, #1
 80030be:	f8c9 3000 	str.w	r3, [r9]
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	0699      	lsls	r1, r3, #26
 80030c6:	bf42      	ittt	mi
 80030c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030cc:	3302      	addmi	r3, #2
 80030ce:	f8c9 3000 	strmi.w	r3, [r9]
 80030d2:	6825      	ldr	r5, [r4, #0]
 80030d4:	f015 0506 	ands.w	r5, r5, #6
 80030d8:	d107      	bne.n	80030ea <_printf_common+0x52>
 80030da:	f104 0a19 	add.w	sl, r4, #25
 80030de:	68e3      	ldr	r3, [r4, #12]
 80030e0:	f8d9 2000 	ldr.w	r2, [r9]
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	42ab      	cmp	r3, r5
 80030e8:	dc29      	bgt.n	800313e <_printf_common+0xa6>
 80030ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030ee:	6822      	ldr	r2, [r4, #0]
 80030f0:	3300      	adds	r3, #0
 80030f2:	bf18      	it	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	0692      	lsls	r2, r2, #26
 80030f8:	d42e      	bmi.n	8003158 <_printf_common+0xc0>
 80030fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030fe:	4639      	mov	r1, r7
 8003100:	4630      	mov	r0, r6
 8003102:	47c0      	blx	r8
 8003104:	3001      	adds	r0, #1
 8003106:	d021      	beq.n	800314c <_printf_common+0xb4>
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	68e5      	ldr	r5, [r4, #12]
 800310c:	f003 0306 	and.w	r3, r3, #6
 8003110:	2b04      	cmp	r3, #4
 8003112:	bf18      	it	ne
 8003114:	2500      	movne	r5, #0
 8003116:	f8d9 2000 	ldr.w	r2, [r9]
 800311a:	f04f 0900 	mov.w	r9, #0
 800311e:	bf08      	it	eq
 8003120:	1aad      	subeq	r5, r5, r2
 8003122:	68a3      	ldr	r3, [r4, #8]
 8003124:	6922      	ldr	r2, [r4, #16]
 8003126:	bf08      	it	eq
 8003128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800312c:	4293      	cmp	r3, r2
 800312e:	bfc4      	itt	gt
 8003130:	1a9b      	subgt	r3, r3, r2
 8003132:	18ed      	addgt	r5, r5, r3
 8003134:	341a      	adds	r4, #26
 8003136:	454d      	cmp	r5, r9
 8003138:	d11a      	bne.n	8003170 <_printf_common+0xd8>
 800313a:	2000      	movs	r0, #0
 800313c:	e008      	b.n	8003150 <_printf_common+0xb8>
 800313e:	2301      	movs	r3, #1
 8003140:	4652      	mov	r2, sl
 8003142:	4639      	mov	r1, r7
 8003144:	4630      	mov	r0, r6
 8003146:	47c0      	blx	r8
 8003148:	3001      	adds	r0, #1
 800314a:	d103      	bne.n	8003154 <_printf_common+0xbc>
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003154:	3501      	adds	r5, #1
 8003156:	e7c2      	b.n	80030de <_printf_common+0x46>
 8003158:	2030      	movs	r0, #48	; 0x30
 800315a:	18e1      	adds	r1, r4, r3
 800315c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003166:	4422      	add	r2, r4
 8003168:	3302      	adds	r3, #2
 800316a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800316e:	e7c4      	b.n	80030fa <_printf_common+0x62>
 8003170:	2301      	movs	r3, #1
 8003172:	4622      	mov	r2, r4
 8003174:	4639      	mov	r1, r7
 8003176:	4630      	mov	r0, r6
 8003178:	47c0      	blx	r8
 800317a:	3001      	adds	r0, #1
 800317c:	d0e6      	beq.n	800314c <_printf_common+0xb4>
 800317e:	f109 0901 	add.w	r9, r9, #1
 8003182:	e7d8      	b.n	8003136 <_printf_common+0x9e>

08003184 <_printf_i>:
 8003184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003188:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800318c:	460c      	mov	r4, r1
 800318e:	7e09      	ldrb	r1, [r1, #24]
 8003190:	b085      	sub	sp, #20
 8003192:	296e      	cmp	r1, #110	; 0x6e
 8003194:	4617      	mov	r7, r2
 8003196:	4606      	mov	r6, r0
 8003198:	4698      	mov	r8, r3
 800319a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800319c:	f000 80b3 	beq.w	8003306 <_printf_i+0x182>
 80031a0:	d822      	bhi.n	80031e8 <_printf_i+0x64>
 80031a2:	2963      	cmp	r1, #99	; 0x63
 80031a4:	d036      	beq.n	8003214 <_printf_i+0x90>
 80031a6:	d80a      	bhi.n	80031be <_printf_i+0x3a>
 80031a8:	2900      	cmp	r1, #0
 80031aa:	f000 80b9 	beq.w	8003320 <_printf_i+0x19c>
 80031ae:	2958      	cmp	r1, #88	; 0x58
 80031b0:	f000 8083 	beq.w	80032ba <_printf_i+0x136>
 80031b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80031bc:	e032      	b.n	8003224 <_printf_i+0xa0>
 80031be:	2964      	cmp	r1, #100	; 0x64
 80031c0:	d001      	beq.n	80031c6 <_printf_i+0x42>
 80031c2:	2969      	cmp	r1, #105	; 0x69
 80031c4:	d1f6      	bne.n	80031b4 <_printf_i+0x30>
 80031c6:	6820      	ldr	r0, [r4, #0]
 80031c8:	6813      	ldr	r3, [r2, #0]
 80031ca:	0605      	lsls	r5, r0, #24
 80031cc:	f103 0104 	add.w	r1, r3, #4
 80031d0:	d52a      	bpl.n	8003228 <_printf_i+0xa4>
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6011      	str	r1, [r2, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	da03      	bge.n	80031e2 <_printf_i+0x5e>
 80031da:	222d      	movs	r2, #45	; 0x2d
 80031dc:	425b      	negs	r3, r3
 80031de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031e2:	486f      	ldr	r0, [pc, #444]	; (80033a0 <_printf_i+0x21c>)
 80031e4:	220a      	movs	r2, #10
 80031e6:	e039      	b.n	800325c <_printf_i+0xd8>
 80031e8:	2973      	cmp	r1, #115	; 0x73
 80031ea:	f000 809d 	beq.w	8003328 <_printf_i+0x1a4>
 80031ee:	d808      	bhi.n	8003202 <_printf_i+0x7e>
 80031f0:	296f      	cmp	r1, #111	; 0x6f
 80031f2:	d020      	beq.n	8003236 <_printf_i+0xb2>
 80031f4:	2970      	cmp	r1, #112	; 0x70
 80031f6:	d1dd      	bne.n	80031b4 <_printf_i+0x30>
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	f043 0320 	orr.w	r3, r3, #32
 80031fe:	6023      	str	r3, [r4, #0]
 8003200:	e003      	b.n	800320a <_printf_i+0x86>
 8003202:	2975      	cmp	r1, #117	; 0x75
 8003204:	d017      	beq.n	8003236 <_printf_i+0xb2>
 8003206:	2978      	cmp	r1, #120	; 0x78
 8003208:	d1d4      	bne.n	80031b4 <_printf_i+0x30>
 800320a:	2378      	movs	r3, #120	; 0x78
 800320c:	4865      	ldr	r0, [pc, #404]	; (80033a4 <_printf_i+0x220>)
 800320e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003212:	e055      	b.n	80032c0 <_printf_i+0x13c>
 8003214:	6813      	ldr	r3, [r2, #0]
 8003216:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800321a:	1d19      	adds	r1, r3, #4
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6011      	str	r1, [r2, #0]
 8003220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003224:	2301      	movs	r3, #1
 8003226:	e08c      	b.n	8003342 <_printf_i+0x1be>
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800322e:	6011      	str	r1, [r2, #0]
 8003230:	bf18      	it	ne
 8003232:	b21b      	sxthne	r3, r3
 8003234:	e7cf      	b.n	80031d6 <_printf_i+0x52>
 8003236:	6813      	ldr	r3, [r2, #0]
 8003238:	6825      	ldr	r5, [r4, #0]
 800323a:	1d18      	adds	r0, r3, #4
 800323c:	6010      	str	r0, [r2, #0]
 800323e:	0628      	lsls	r0, r5, #24
 8003240:	d501      	bpl.n	8003246 <_printf_i+0xc2>
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	e002      	b.n	800324c <_printf_i+0xc8>
 8003246:	0668      	lsls	r0, r5, #25
 8003248:	d5fb      	bpl.n	8003242 <_printf_i+0xbe>
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	296f      	cmp	r1, #111	; 0x6f
 800324e:	bf14      	ite	ne
 8003250:	220a      	movne	r2, #10
 8003252:	2208      	moveq	r2, #8
 8003254:	4852      	ldr	r0, [pc, #328]	; (80033a0 <_printf_i+0x21c>)
 8003256:	2100      	movs	r1, #0
 8003258:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800325c:	6865      	ldr	r5, [r4, #4]
 800325e:	2d00      	cmp	r5, #0
 8003260:	60a5      	str	r5, [r4, #8]
 8003262:	f2c0 8095 	blt.w	8003390 <_printf_i+0x20c>
 8003266:	6821      	ldr	r1, [r4, #0]
 8003268:	f021 0104 	bic.w	r1, r1, #4
 800326c:	6021      	str	r1, [r4, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d13d      	bne.n	80032ee <_printf_i+0x16a>
 8003272:	2d00      	cmp	r5, #0
 8003274:	f040 808e 	bne.w	8003394 <_printf_i+0x210>
 8003278:	4665      	mov	r5, ip
 800327a:	2a08      	cmp	r2, #8
 800327c:	d10b      	bne.n	8003296 <_printf_i+0x112>
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	07db      	lsls	r3, r3, #31
 8003282:	d508      	bpl.n	8003296 <_printf_i+0x112>
 8003284:	6923      	ldr	r3, [r4, #16]
 8003286:	6862      	ldr	r2, [r4, #4]
 8003288:	429a      	cmp	r2, r3
 800328a:	bfde      	ittt	le
 800328c:	2330      	movle	r3, #48	; 0x30
 800328e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003292:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003296:	ebac 0305 	sub.w	r3, ip, r5
 800329a:	6123      	str	r3, [r4, #16]
 800329c:	f8cd 8000 	str.w	r8, [sp]
 80032a0:	463b      	mov	r3, r7
 80032a2:	aa03      	add	r2, sp, #12
 80032a4:	4621      	mov	r1, r4
 80032a6:	4630      	mov	r0, r6
 80032a8:	f7ff fef6 	bl	8003098 <_printf_common>
 80032ac:	3001      	adds	r0, #1
 80032ae:	d14d      	bne.n	800334c <_printf_i+0x1c8>
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	b005      	add	sp, #20
 80032b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032ba:	4839      	ldr	r0, [pc, #228]	; (80033a0 <_printf_i+0x21c>)
 80032bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80032c0:	6813      	ldr	r3, [r2, #0]
 80032c2:	6821      	ldr	r1, [r4, #0]
 80032c4:	1d1d      	adds	r5, r3, #4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6015      	str	r5, [r2, #0]
 80032ca:	060a      	lsls	r2, r1, #24
 80032cc:	d50b      	bpl.n	80032e6 <_printf_i+0x162>
 80032ce:	07ca      	lsls	r2, r1, #31
 80032d0:	bf44      	itt	mi
 80032d2:	f041 0120 	orrmi.w	r1, r1, #32
 80032d6:	6021      	strmi	r1, [r4, #0]
 80032d8:	b91b      	cbnz	r3, 80032e2 <_printf_i+0x15e>
 80032da:	6822      	ldr	r2, [r4, #0]
 80032dc:	f022 0220 	bic.w	r2, r2, #32
 80032e0:	6022      	str	r2, [r4, #0]
 80032e2:	2210      	movs	r2, #16
 80032e4:	e7b7      	b.n	8003256 <_printf_i+0xd2>
 80032e6:	064d      	lsls	r5, r1, #25
 80032e8:	bf48      	it	mi
 80032ea:	b29b      	uxthmi	r3, r3
 80032ec:	e7ef      	b.n	80032ce <_printf_i+0x14a>
 80032ee:	4665      	mov	r5, ip
 80032f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80032f4:	fb02 3311 	mls	r3, r2, r1, r3
 80032f8:	5cc3      	ldrb	r3, [r0, r3]
 80032fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032fe:	460b      	mov	r3, r1
 8003300:	2900      	cmp	r1, #0
 8003302:	d1f5      	bne.n	80032f0 <_printf_i+0x16c>
 8003304:	e7b9      	b.n	800327a <_printf_i+0xf6>
 8003306:	6813      	ldr	r3, [r2, #0]
 8003308:	6825      	ldr	r5, [r4, #0]
 800330a:	1d18      	adds	r0, r3, #4
 800330c:	6961      	ldr	r1, [r4, #20]
 800330e:	6010      	str	r0, [r2, #0]
 8003310:	0628      	lsls	r0, r5, #24
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	d501      	bpl.n	800331a <_printf_i+0x196>
 8003316:	6019      	str	r1, [r3, #0]
 8003318:	e002      	b.n	8003320 <_printf_i+0x19c>
 800331a:	066a      	lsls	r2, r5, #25
 800331c:	d5fb      	bpl.n	8003316 <_printf_i+0x192>
 800331e:	8019      	strh	r1, [r3, #0]
 8003320:	2300      	movs	r3, #0
 8003322:	4665      	mov	r5, ip
 8003324:	6123      	str	r3, [r4, #16]
 8003326:	e7b9      	b.n	800329c <_printf_i+0x118>
 8003328:	6813      	ldr	r3, [r2, #0]
 800332a:	1d19      	adds	r1, r3, #4
 800332c:	6011      	str	r1, [r2, #0]
 800332e:	681d      	ldr	r5, [r3, #0]
 8003330:	6862      	ldr	r2, [r4, #4]
 8003332:	2100      	movs	r1, #0
 8003334:	4628      	mov	r0, r5
 8003336:	f000 f847 	bl	80033c8 <memchr>
 800333a:	b108      	cbz	r0, 8003340 <_printf_i+0x1bc>
 800333c:	1b40      	subs	r0, r0, r5
 800333e:	6060      	str	r0, [r4, #4]
 8003340:	6863      	ldr	r3, [r4, #4]
 8003342:	6123      	str	r3, [r4, #16]
 8003344:	2300      	movs	r3, #0
 8003346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800334a:	e7a7      	b.n	800329c <_printf_i+0x118>
 800334c:	6923      	ldr	r3, [r4, #16]
 800334e:	462a      	mov	r2, r5
 8003350:	4639      	mov	r1, r7
 8003352:	4630      	mov	r0, r6
 8003354:	47c0      	blx	r8
 8003356:	3001      	adds	r0, #1
 8003358:	d0aa      	beq.n	80032b0 <_printf_i+0x12c>
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	079b      	lsls	r3, r3, #30
 800335e:	d413      	bmi.n	8003388 <_printf_i+0x204>
 8003360:	68e0      	ldr	r0, [r4, #12]
 8003362:	9b03      	ldr	r3, [sp, #12]
 8003364:	4298      	cmp	r0, r3
 8003366:	bfb8      	it	lt
 8003368:	4618      	movlt	r0, r3
 800336a:	e7a3      	b.n	80032b4 <_printf_i+0x130>
 800336c:	2301      	movs	r3, #1
 800336e:	464a      	mov	r2, r9
 8003370:	4639      	mov	r1, r7
 8003372:	4630      	mov	r0, r6
 8003374:	47c0      	blx	r8
 8003376:	3001      	adds	r0, #1
 8003378:	d09a      	beq.n	80032b0 <_printf_i+0x12c>
 800337a:	3501      	adds	r5, #1
 800337c:	68e3      	ldr	r3, [r4, #12]
 800337e:	9a03      	ldr	r2, [sp, #12]
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	42ab      	cmp	r3, r5
 8003384:	dcf2      	bgt.n	800336c <_printf_i+0x1e8>
 8003386:	e7eb      	b.n	8003360 <_printf_i+0x1dc>
 8003388:	2500      	movs	r5, #0
 800338a:	f104 0919 	add.w	r9, r4, #25
 800338e:	e7f5      	b.n	800337c <_printf_i+0x1f8>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ac      	bne.n	80032ee <_printf_i+0x16a>
 8003394:	7803      	ldrb	r3, [r0, #0]
 8003396:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800339a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800339e:	e76c      	b.n	800327a <_printf_i+0xf6>
 80033a0:	08003508 	.word	0x08003508
 80033a4:	08003519 	.word	0x08003519

080033a8 <_sbrk_r>:
 80033a8:	b538      	push	{r3, r4, r5, lr}
 80033aa:	2300      	movs	r3, #0
 80033ac:	4c05      	ldr	r4, [pc, #20]	; (80033c4 <_sbrk_r+0x1c>)
 80033ae:	4605      	mov	r5, r0
 80033b0:	4608      	mov	r0, r1
 80033b2:	6023      	str	r3, [r4, #0]
 80033b4:	f7fd fb40 	bl	8000a38 <_sbrk>
 80033b8:	1c43      	adds	r3, r0, #1
 80033ba:	d102      	bne.n	80033c2 <_sbrk_r+0x1a>
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	b103      	cbz	r3, 80033c2 <_sbrk_r+0x1a>
 80033c0:	602b      	str	r3, [r5, #0]
 80033c2:	bd38      	pop	{r3, r4, r5, pc}
 80033c4:	20000160 	.word	0x20000160

080033c8 <memchr>:
 80033c8:	b510      	push	{r4, lr}
 80033ca:	b2c9      	uxtb	r1, r1
 80033cc:	4402      	add	r2, r0
 80033ce:	4290      	cmp	r0, r2
 80033d0:	4603      	mov	r3, r0
 80033d2:	d101      	bne.n	80033d8 <memchr+0x10>
 80033d4:	2300      	movs	r3, #0
 80033d6:	e003      	b.n	80033e0 <memchr+0x18>
 80033d8:	781c      	ldrb	r4, [r3, #0]
 80033da:	3001      	adds	r0, #1
 80033dc:	428c      	cmp	r4, r1
 80033de:	d1f6      	bne.n	80033ce <memchr+0x6>
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd10      	pop	{r4, pc}

080033e4 <memcpy>:
 80033e4:	b510      	push	{r4, lr}
 80033e6:	1e43      	subs	r3, r0, #1
 80033e8:	440a      	add	r2, r1
 80033ea:	4291      	cmp	r1, r2
 80033ec:	d100      	bne.n	80033f0 <memcpy+0xc>
 80033ee:	bd10      	pop	{r4, pc}
 80033f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033f8:	e7f7      	b.n	80033ea <memcpy+0x6>

080033fa <memmove>:
 80033fa:	4288      	cmp	r0, r1
 80033fc:	b510      	push	{r4, lr}
 80033fe:	eb01 0302 	add.w	r3, r1, r2
 8003402:	d807      	bhi.n	8003414 <memmove+0x1a>
 8003404:	1e42      	subs	r2, r0, #1
 8003406:	4299      	cmp	r1, r3
 8003408:	d00a      	beq.n	8003420 <memmove+0x26>
 800340a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800340e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003412:	e7f8      	b.n	8003406 <memmove+0xc>
 8003414:	4283      	cmp	r3, r0
 8003416:	d9f5      	bls.n	8003404 <memmove+0xa>
 8003418:	1881      	adds	r1, r0, r2
 800341a:	1ad2      	subs	r2, r2, r3
 800341c:	42d3      	cmn	r3, r2
 800341e:	d100      	bne.n	8003422 <memmove+0x28>
 8003420:	bd10      	pop	{r4, pc}
 8003422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003426:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800342a:	e7f7      	b.n	800341c <memmove+0x22>

0800342c <__malloc_lock>:
 800342c:	4770      	bx	lr

0800342e <__malloc_unlock>:
 800342e:	4770      	bx	lr

08003430 <_free_r>:
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	4605      	mov	r5, r0
 8003434:	2900      	cmp	r1, #0
 8003436:	d043      	beq.n	80034c0 <_free_r+0x90>
 8003438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800343c:	1f0c      	subs	r4, r1, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	bfb8      	it	lt
 8003442:	18e4      	addlt	r4, r4, r3
 8003444:	f7ff fff2 	bl	800342c <__malloc_lock>
 8003448:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <_free_r+0x94>)
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	4610      	mov	r0, r2
 800344e:	b933      	cbnz	r3, 800345e <_free_r+0x2e>
 8003450:	6063      	str	r3, [r4, #4]
 8003452:	6014      	str	r4, [r2, #0]
 8003454:	4628      	mov	r0, r5
 8003456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800345a:	f7ff bfe8 	b.w	800342e <__malloc_unlock>
 800345e:	42a3      	cmp	r3, r4
 8003460:	d90b      	bls.n	800347a <_free_r+0x4a>
 8003462:	6821      	ldr	r1, [r4, #0]
 8003464:	1862      	adds	r2, r4, r1
 8003466:	4293      	cmp	r3, r2
 8003468:	bf01      	itttt	eq
 800346a:	681a      	ldreq	r2, [r3, #0]
 800346c:	685b      	ldreq	r3, [r3, #4]
 800346e:	1852      	addeq	r2, r2, r1
 8003470:	6022      	streq	r2, [r4, #0]
 8003472:	6063      	str	r3, [r4, #4]
 8003474:	6004      	str	r4, [r0, #0]
 8003476:	e7ed      	b.n	8003454 <_free_r+0x24>
 8003478:	4613      	mov	r3, r2
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	b10a      	cbz	r2, 8003482 <_free_r+0x52>
 800347e:	42a2      	cmp	r2, r4
 8003480:	d9fa      	bls.n	8003478 <_free_r+0x48>
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	1858      	adds	r0, r3, r1
 8003486:	42a0      	cmp	r0, r4
 8003488:	d10b      	bne.n	80034a2 <_free_r+0x72>
 800348a:	6820      	ldr	r0, [r4, #0]
 800348c:	4401      	add	r1, r0
 800348e:	1858      	adds	r0, r3, r1
 8003490:	4282      	cmp	r2, r0
 8003492:	6019      	str	r1, [r3, #0]
 8003494:	d1de      	bne.n	8003454 <_free_r+0x24>
 8003496:	6810      	ldr	r0, [r2, #0]
 8003498:	6852      	ldr	r2, [r2, #4]
 800349a:	4401      	add	r1, r0
 800349c:	6019      	str	r1, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	e7d8      	b.n	8003454 <_free_r+0x24>
 80034a2:	d902      	bls.n	80034aa <_free_r+0x7a>
 80034a4:	230c      	movs	r3, #12
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	e7d4      	b.n	8003454 <_free_r+0x24>
 80034aa:	6820      	ldr	r0, [r4, #0]
 80034ac:	1821      	adds	r1, r4, r0
 80034ae:	428a      	cmp	r2, r1
 80034b0:	bf01      	itttt	eq
 80034b2:	6811      	ldreq	r1, [r2, #0]
 80034b4:	6852      	ldreq	r2, [r2, #4]
 80034b6:	1809      	addeq	r1, r1, r0
 80034b8:	6021      	streq	r1, [r4, #0]
 80034ba:	6062      	str	r2, [r4, #4]
 80034bc:	605c      	str	r4, [r3, #4]
 80034be:	e7c9      	b.n	8003454 <_free_r+0x24>
 80034c0:	bd38      	pop	{r3, r4, r5, pc}
 80034c2:	bf00      	nop
 80034c4:	200000b8 	.word	0x200000b8

080034c8 <_malloc_usable_size_r>:
 80034c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034cc:	1f18      	subs	r0, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bfbc      	itt	lt
 80034d2:	580b      	ldrlt	r3, [r1, r0]
 80034d4:	18c0      	addlt	r0, r0, r3
 80034d6:	4770      	bx	lr

080034d8 <_init>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	bf00      	nop
 80034dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034de:	bc08      	pop	{r3}
 80034e0:	469e      	mov	lr, r3
 80034e2:	4770      	bx	lr

080034e4 <_fini>:
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e6:	bf00      	nop
 80034e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ea:	bc08      	pop	{r3}
 80034ec:	469e      	mov	lr, r3
 80034ee:	4770      	bx	lr
