
ISO_B-ISO_P-SMART_BMS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005284  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080053b8  080053b8  000153b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f4  080054f4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080054f4  080054f4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054f4  080054f4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f4  080054f4  000154f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080054fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  20000084  08005580  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08005580  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0c5  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cb6  00000000  00000000  0002b172  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004c0  00000000  00000000  0002ce28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003d8  00000000  00000000  0002d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004932  00000000  00000000  0002d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006a2c  00000000  00000000  00031ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00011ac1  00000000  00000000  00038a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004a4df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001954  00000000  00000000  0004a55c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000084 	.word	0x20000084
 800014c:	00000000 	.word	0x00000000
 8000150:	0800539c 	.word	0x0800539c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000088 	.word	0x20000088
 800016c:	0800539c 	.word	0x0800539c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__aeabi_drsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000188:	e002      	b.n	8000190 <__adddf3>
 800018a:	bf00      	nop

0800018c <__aeabi_dsub>:
 800018c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000190 <__adddf3>:
 8000190:	b530      	push	{r4, r5, lr}
 8000192:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000196:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019a:	ea94 0f05 	teq	r4, r5
 800019e:	bf08      	it	eq
 80001a0:	ea90 0f02 	teqeq	r0, r2
 80001a4:	bf1f      	itttt	ne
 80001a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b6:	f000 80e2 	beq.w	800037e <__adddf3+0x1ee>
 80001ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c2:	bfb8      	it	lt
 80001c4:	426d      	neglt	r5, r5
 80001c6:	dd0c      	ble.n	80001e2 <__adddf3+0x52>
 80001c8:	442c      	add	r4, r5
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	ea82 0000 	eor.w	r0, r2, r0
 80001d6:	ea83 0101 	eor.w	r1, r3, r1
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	2d36      	cmp	r5, #54	; 0x36
 80001e4:	bf88      	it	hi
 80001e6:	bd30      	pophi	{r4, r5, pc}
 80001e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x70>
 80001fa:	4240      	negs	r0, r0
 80001fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000200:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000204:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000208:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800020c:	d002      	beq.n	8000214 <__adddf3+0x84>
 800020e:	4252      	negs	r2, r2
 8000210:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000214:	ea94 0f05 	teq	r4, r5
 8000218:	f000 80a7 	beq.w	800036a <__adddf3+0x1da>
 800021c:	f1a4 0401 	sub.w	r4, r4, #1
 8000220:	f1d5 0e20 	rsbs	lr, r5, #32
 8000224:	db0d      	blt.n	8000242 <__adddf3+0xb2>
 8000226:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022a:	fa22 f205 	lsr.w	r2, r2, r5
 800022e:	1880      	adds	r0, r0, r2
 8000230:	f141 0100 	adc.w	r1, r1, #0
 8000234:	fa03 f20e 	lsl.w	r2, r3, lr
 8000238:	1880      	adds	r0, r0, r2
 800023a:	fa43 f305 	asr.w	r3, r3, r5
 800023e:	4159      	adcs	r1, r3
 8000240:	e00e      	b.n	8000260 <__adddf3+0xd0>
 8000242:	f1a5 0520 	sub.w	r5, r5, #32
 8000246:	f10e 0e20 	add.w	lr, lr, #32
 800024a:	2a01      	cmp	r2, #1
 800024c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000250:	bf28      	it	cs
 8000252:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000256:	fa43 f305 	asr.w	r3, r3, r5
 800025a:	18c0      	adds	r0, r0, r3
 800025c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000264:	d507      	bpl.n	8000276 <__adddf3+0xe6>
 8000266:	f04f 0e00 	mov.w	lr, #0
 800026a:	f1dc 0c00 	rsbs	ip, ip, #0
 800026e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000272:	eb6e 0101 	sbc.w	r1, lr, r1
 8000276:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027a:	d31b      	bcc.n	80002b4 <__adddf3+0x124>
 800027c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000280:	d30c      	bcc.n	800029c <__adddf3+0x10c>
 8000282:	0849      	lsrs	r1, r1, #1
 8000284:	ea5f 0030 	movs.w	r0, r0, rrx
 8000288:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800028c:	f104 0401 	add.w	r4, r4, #1
 8000290:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000294:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000298:	f080 809a 	bcs.w	80003d0 <__adddf3+0x240>
 800029c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a0:	bf08      	it	eq
 80002a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a6:	f150 0000 	adcs.w	r0, r0, #0
 80002aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ae:	ea41 0105 	orr.w	r1, r1, r5
 80002b2:	bd30      	pop	{r4, r5, pc}
 80002b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b8:	4140      	adcs	r0, r0
 80002ba:	eb41 0101 	adc.w	r1, r1, r1
 80002be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002c2:	f1a4 0401 	sub.w	r4, r4, #1
 80002c6:	d1e9      	bne.n	800029c <__adddf3+0x10c>
 80002c8:	f091 0f00 	teq	r1, #0
 80002cc:	bf04      	itt	eq
 80002ce:	4601      	moveq	r1, r0
 80002d0:	2000      	moveq	r0, #0
 80002d2:	fab1 f381 	clz	r3, r1
 80002d6:	bf08      	it	eq
 80002d8:	3320      	addeq	r3, #32
 80002da:	f1a3 030b 	sub.w	r3, r3, #11
 80002de:	f1b3 0220 	subs.w	r2, r3, #32
 80002e2:	da0c      	bge.n	80002fe <__adddf3+0x16e>
 80002e4:	320c      	adds	r2, #12
 80002e6:	dd08      	ble.n	80002fa <__adddf3+0x16a>
 80002e8:	f102 0c14 	add.w	ip, r2, #20
 80002ec:	f1c2 020c 	rsb	r2, r2, #12
 80002f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f4:	fa21 f102 	lsr.w	r1, r1, r2
 80002f8:	e00c      	b.n	8000314 <__adddf3+0x184>
 80002fa:	f102 0214 	add.w	r2, r2, #20
 80002fe:	bfd8      	it	le
 8000300:	f1c2 0c20 	rsble	ip, r2, #32
 8000304:	fa01 f102 	lsl.w	r1, r1, r2
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	bfdc      	itt	le
 800030e:	ea41 010c 	orrle.w	r1, r1, ip
 8000312:	4090      	lslle	r0, r2
 8000314:	1ae4      	subs	r4, r4, r3
 8000316:	bfa2      	ittt	ge
 8000318:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800031c:	4329      	orrge	r1, r5
 800031e:	bd30      	popge	{r4, r5, pc}
 8000320:	ea6f 0404 	mvn.w	r4, r4
 8000324:	3c1f      	subs	r4, #31
 8000326:	da1c      	bge.n	8000362 <__adddf3+0x1d2>
 8000328:	340c      	adds	r4, #12
 800032a:	dc0e      	bgt.n	800034a <__adddf3+0x1ba>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0220 	rsb	r2, r4, #32
 8000334:	fa20 f004 	lsr.w	r0, r0, r4
 8000338:	fa01 f302 	lsl.w	r3, r1, r2
 800033c:	ea40 0003 	orr.w	r0, r0, r3
 8000340:	fa21 f304 	lsr.w	r3, r1, r4
 8000344:	ea45 0103 	orr.w	r1, r5, r3
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f1c4 040c 	rsb	r4, r4, #12
 800034e:	f1c4 0220 	rsb	r2, r4, #32
 8000352:	fa20 f002 	lsr.w	r0, r0, r2
 8000356:	fa01 f304 	lsl.w	r3, r1, r4
 800035a:	ea40 0003 	orr.w	r0, r0, r3
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	fa21 f004 	lsr.w	r0, r1, r4
 8000366:	4629      	mov	r1, r5
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f094 0f00 	teq	r4, #0
 800036e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000372:	bf06      	itte	eq
 8000374:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000378:	3401      	addeq	r4, #1
 800037a:	3d01      	subne	r5, #1
 800037c:	e74e      	b.n	800021c <__adddf3+0x8c>
 800037e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000382:	bf18      	it	ne
 8000384:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000388:	d029      	beq.n	80003de <__adddf3+0x24e>
 800038a:	ea94 0f05 	teq	r4, r5
 800038e:	bf08      	it	eq
 8000390:	ea90 0f02 	teqeq	r0, r2
 8000394:	d005      	beq.n	80003a2 <__adddf3+0x212>
 8000396:	ea54 0c00 	orrs.w	ip, r4, r0
 800039a:	bf04      	itt	eq
 800039c:	4619      	moveq	r1, r3
 800039e:	4610      	moveq	r0, r2
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	ea91 0f03 	teq	r1, r3
 80003a6:	bf1e      	ittt	ne
 80003a8:	2100      	movne	r1, #0
 80003aa:	2000      	movne	r0, #0
 80003ac:	bd30      	popne	{r4, r5, pc}
 80003ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b2:	d105      	bne.n	80003c0 <__adddf3+0x230>
 80003b4:	0040      	lsls	r0, r0, #1
 80003b6:	4149      	adcs	r1, r1
 80003b8:	bf28      	it	cs
 80003ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c4:	bf3c      	itt	cc
 80003c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ca:	bd30      	popcc	{r4, r5, pc}
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf1a      	itte	ne
 80003e4:	4619      	movne	r1, r3
 80003e6:	4610      	movne	r0, r2
 80003e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003ec:	bf1c      	itt	ne
 80003ee:	460b      	movne	r3, r1
 80003f0:	4602      	movne	r2, r0
 80003f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f6:	bf06      	itte	eq
 80003f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003fc:	ea91 0f03 	teqeq	r1, r3
 8000400:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	bf00      	nop

08000408 <__aeabi_ui2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f04f 0500 	mov.w	r5, #0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e750      	b.n	80002c8 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_i2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000440:	bf48      	it	mi
 8000442:	4240      	negmi	r0, r0
 8000444:	f04f 0100 	mov.w	r1, #0
 8000448:	e73e      	b.n	80002c8 <__adddf3+0x138>
 800044a:	bf00      	nop

0800044c <__aeabi_f2d>:
 800044c:	0042      	lsls	r2, r0, #1
 800044e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000452:	ea4f 0131 	mov.w	r1, r1, rrx
 8000456:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045a:	bf1f      	itttt	ne
 800045c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000464:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000468:	4770      	bxne	lr
 800046a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046e:	bf08      	it	eq
 8000470:	4770      	bxeq	lr
 8000472:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000476:	bf04      	itt	eq
 8000478:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800048c:	e71c      	b.n	80002c8 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_ul2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f04f 0500 	mov.w	r5, #0
 800049e:	e00a      	b.n	80004b6 <__aeabi_l2d+0x16>

080004a0 <__aeabi_l2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ae:	d502      	bpl.n	80004b6 <__aeabi_l2d+0x16>
 80004b0:	4240      	negs	r0, r0
 80004b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c2:	f43f aed8 	beq.w	8000276 <__adddf3+0xe6>
 80004c6:	f04f 0203 	mov.w	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d6:	bf18      	it	ne
 80004d8:	3203      	addne	r2, #3
 80004da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004de:	f1c2 0320 	rsb	r3, r2, #32
 80004e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ee:	ea40 000e 	orr.w	r0, r0, lr
 80004f2:	fa21 f102 	lsr.w	r1, r1, r2
 80004f6:	4414      	add	r4, r2
 80004f8:	e6bd      	b.n	8000276 <__adddf3+0xe6>
 80004fa:	bf00      	nop

080004fc <__aeabi_dmul>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000502:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000506:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050a:	bf1d      	ittte	ne
 800050c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000510:	ea94 0f0c 	teqne	r4, ip
 8000514:	ea95 0f0c 	teqne	r5, ip
 8000518:	f000 f8de 	bleq	80006d8 <__aeabi_dmul+0x1dc>
 800051c:	442c      	add	r4, r5
 800051e:	ea81 0603 	eor.w	r6, r1, r3
 8000522:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000526:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052e:	bf18      	it	ne
 8000530:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000534:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800053c:	d038      	beq.n	80005b0 <__aeabi_dmul+0xb4>
 800053e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000542:	f04f 0500 	mov.w	r5, #0
 8000546:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000552:	f04f 0600 	mov.w	r6, #0
 8000556:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055a:	f09c 0f00 	teq	ip, #0
 800055e:	bf18      	it	ne
 8000560:	f04e 0e01 	orrne.w	lr, lr, #1
 8000564:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000568:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800056c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000570:	d204      	bcs.n	800057c <__aeabi_dmul+0x80>
 8000572:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000576:	416d      	adcs	r5, r5
 8000578:	eb46 0606 	adc.w	r6, r6, r6
 800057c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000580:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000584:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000588:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800058c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000590:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000594:	bf88      	it	hi
 8000596:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059a:	d81e      	bhi.n	80005da <__aeabi_dmul+0xde>
 800059c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b4:	ea46 0101 	orr.w	r1, r6, r1
 80005b8:	ea40 0002 	orr.w	r0, r0, r2
 80005bc:	ea81 0103 	eor.w	r1, r1, r3
 80005c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c4:	bfc2      	ittt	gt
 80005c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	popgt	{r4, r5, r6, pc}
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f04f 0e00 	mov.w	lr, #0
 80005d8:	3c01      	subs	r4, #1
 80005da:	f300 80ab 	bgt.w	8000734 <__aeabi_dmul+0x238>
 80005de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e2:	bfde      	ittt	le
 80005e4:	2000      	movle	r0, #0
 80005e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd70      	pople	{r4, r5, r6, pc}
 80005ec:	f1c4 0400 	rsb	r4, r4, #0
 80005f0:	3c20      	subs	r4, #32
 80005f2:	da35      	bge.n	8000660 <__aeabi_dmul+0x164>
 80005f4:	340c      	adds	r4, #12
 80005f6:	dc1b      	bgt.n	8000630 <__aeabi_dmul+0x134>
 80005f8:	f104 0414 	add.w	r4, r4, #20
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f305 	lsl.w	r3, r0, r5
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f205 	lsl.w	r2, r1, r5
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	fa21 f604 	lsr.w	r6, r1, r4
 8000620:	eb42 0106 	adc.w	r1, r2, r6
 8000624:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000628:	bf08      	it	eq
 800062a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f1c4 040c 	rsb	r4, r4, #12
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f304 	lsl.w	r3, r0, r4
 800063c:	fa20 f005 	lsr.w	r0, r0, r5
 8000640:	fa01 f204 	lsl.w	r2, r1, r4
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000650:	f141 0100 	adc.w	r1, r1, #0
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f205 	lsl.w	r2, r0, r5
 8000668:	ea4e 0e02 	orr.w	lr, lr, r2
 800066c:	fa20 f304 	lsr.w	r3, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea43 0302 	orr.w	r3, r3, r2
 8000678:	fa21 f004 	lsr.w	r0, r1, r4
 800067c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000680:	fa21 f204 	lsr.w	r2, r1, r4
 8000684:	ea20 0002 	bic.w	r0, r0, r2
 8000688:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f094 0f00 	teq	r4, #0
 800069c:	d10f      	bne.n	80006be <__aeabi_dmul+0x1c2>
 800069e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a2:	0040      	lsls	r0, r0, #1
 80006a4:	eb41 0101 	adc.w	r1, r1, r1
 80006a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3c01      	subeq	r4, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1a6>
 80006b2:	ea41 0106 	orr.w	r1, r1, r6
 80006b6:	f095 0f00 	teq	r5, #0
 80006ba:	bf18      	it	ne
 80006bc:	4770      	bxne	lr
 80006be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c2:	0052      	lsls	r2, r2, #1
 80006c4:	eb43 0303 	adc.w	r3, r3, r3
 80006c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3d01      	subeq	r5, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1c6>
 80006d2:	ea43 0306 	orr.w	r3, r3, r6
 80006d6:	4770      	bx	lr
 80006d8:	ea94 0f0c 	teq	r4, ip
 80006dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e0:	bf18      	it	ne
 80006e2:	ea95 0f0c 	teqne	r5, ip
 80006e6:	d00c      	beq.n	8000702 <__aeabi_dmul+0x206>
 80006e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ec:	bf18      	it	ne
 80006ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f2:	d1d1      	bne.n	8000698 <__aeabi_dmul+0x19c>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f04f 0000 	mov.w	r0, #0
 8000700:	bd70      	pop	{r4, r5, r6, pc}
 8000702:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000706:	bf06      	itte	eq
 8000708:	4610      	moveq	r0, r2
 800070a:	4619      	moveq	r1, r3
 800070c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000710:	d019      	beq.n	8000746 <__aeabi_dmul+0x24a>
 8000712:	ea94 0f0c 	teq	r4, ip
 8000716:	d102      	bne.n	800071e <__aeabi_dmul+0x222>
 8000718:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800071c:	d113      	bne.n	8000746 <__aeabi_dmul+0x24a>
 800071e:	ea95 0f0c 	teq	r5, ip
 8000722:	d105      	bne.n	8000730 <__aeabi_dmul+0x234>
 8000724:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000728:	bf1c      	itt	ne
 800072a:	4610      	movne	r0, r2
 800072c:	4619      	movne	r1, r3
 800072e:	d10a      	bne.n	8000746 <__aeabi_dmul+0x24a>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074e:	bd70      	pop	{r4, r5, r6, pc}

08000750 <__aeabi_ddiv>:
 8000750:	b570      	push	{r4, r5, r6, lr}
 8000752:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000756:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075e:	bf1d      	ittte	ne
 8000760:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000764:	ea94 0f0c 	teqne	r4, ip
 8000768:	ea95 0f0c 	teqne	r5, ip
 800076c:	f000 f8a7 	bleq	80008be <__aeabi_ddiv+0x16e>
 8000770:	eba4 0405 	sub.w	r4, r4, r5
 8000774:	ea81 0e03 	eor.w	lr, r1, r3
 8000778:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800077c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000780:	f000 8088 	beq.w	8000894 <__aeabi_ddiv+0x144>
 8000784:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000788:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800078c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000790:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000794:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000798:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800079c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a8:	429d      	cmp	r5, r3
 80007aa:	bf08      	it	eq
 80007ac:	4296      	cmpeq	r6, r2
 80007ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b6:	d202      	bcs.n	80007be <__aeabi_ddiv+0x6e>
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	1ab6      	subs	r6, r6, r2
 80007c0:	eb65 0503 	sbc.w	r5, r5, r3
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	ebb6 0e02 	subs.w	lr, r6, r2
 8000806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080a:	bf22      	ittt	cs
 800080c:	1ab6      	subcs	r6, r6, r2
 800080e:	4675      	movcs	r5, lr
 8000810:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800082c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000830:	d018      	beq.n	8000864 <__aeabi_ddiv+0x114>
 8000832:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000836:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000842:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000846:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084e:	d1c0      	bne.n	80007d2 <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	d10b      	bne.n	800086e <__aeabi_ddiv+0x11e>
 8000856:	ea41 0100 	orr.w	r1, r1, r0
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000862:	e7b6      	b.n	80007d2 <__aeabi_ddiv+0x82>
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf04      	itt	eq
 800086a:	4301      	orreq	r1, r0
 800086c:	2000      	moveq	r0, #0
 800086e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000872:	bf88      	it	hi
 8000874:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000878:	f63f aeaf 	bhi.w	80005da <__aeabi_dmul+0xde>
 800087c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000880:	bf04      	itt	eq
 8000882:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000886:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088a:	f150 0000 	adcs.w	r0, r0, #0
 800088e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000898:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800089c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a0:	bfc2      	ittt	gt
 80008a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008aa:	bd70      	popgt	{r4, r5, r6, pc}
 80008ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b0:	f04f 0e00 	mov.w	lr, #0
 80008b4:	3c01      	subs	r4, #1
 80008b6:	e690      	b.n	80005da <__aeabi_dmul+0xde>
 80008b8:	ea45 0e06 	orr.w	lr, r5, r6
 80008bc:	e68d      	b.n	80005da <__aeabi_dmul+0xde>
 80008be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c2:	ea94 0f0c 	teq	r4, ip
 80008c6:	bf08      	it	eq
 80008c8:	ea95 0f0c 	teqeq	r5, ip
 80008cc:	f43f af3b 	beq.w	8000746 <__aeabi_dmul+0x24a>
 80008d0:	ea94 0f0c 	teq	r4, ip
 80008d4:	d10a      	bne.n	80008ec <__aeabi_ddiv+0x19c>
 80008d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008da:	f47f af34 	bne.w	8000746 <__aeabi_dmul+0x24a>
 80008de:	ea95 0f0c 	teq	r5, ip
 80008e2:	f47f af25 	bne.w	8000730 <__aeabi_dmul+0x234>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e72c      	b.n	8000746 <__aeabi_dmul+0x24a>
 80008ec:	ea95 0f0c 	teq	r5, ip
 80008f0:	d106      	bne.n	8000900 <__aeabi_ddiv+0x1b0>
 80008f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f6:	f43f aefd 	beq.w	80006f4 <__aeabi_dmul+0x1f8>
 80008fa:	4610      	mov	r0, r2
 80008fc:	4619      	mov	r1, r3
 80008fe:	e722      	b.n	8000746 <__aeabi_dmul+0x24a>
 8000900:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000904:	bf18      	it	ne
 8000906:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090a:	f47f aec5 	bne.w	8000698 <__aeabi_dmul+0x19c>
 800090e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000912:	f47f af0d 	bne.w	8000730 <__aeabi_dmul+0x234>
 8000916:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091a:	f47f aeeb 	bne.w	80006f4 <__aeabi_dmul+0x1f8>
 800091e:	e712      	b.n	8000746 <__aeabi_dmul+0x24a>

08000920 <__gedf2>:
 8000920:	f04f 3cff 	mov.w	ip, #4294967295
 8000924:	e006      	b.n	8000934 <__cmpdf2+0x4>
 8000926:	bf00      	nop

08000928 <__ledf2>:
 8000928:	f04f 0c01 	mov.w	ip, #1
 800092c:	e002      	b.n	8000934 <__cmpdf2+0x4>
 800092e:	bf00      	nop

08000930 <__cmpdf2>:
 8000930:	f04f 0c01 	mov.w	ip, #1
 8000934:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000938:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800093c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000940:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000944:	bf18      	it	ne
 8000946:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094a:	d01b      	beq.n	8000984 <__cmpdf2+0x54>
 800094c:	b001      	add	sp, #4
 800094e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000952:	bf0c      	ite	eq
 8000954:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000958:	ea91 0f03 	teqne	r1, r3
 800095c:	bf02      	ittt	eq
 800095e:	ea90 0f02 	teqeq	r0, r2
 8000962:	2000      	moveq	r0, #0
 8000964:	4770      	bxeq	lr
 8000966:	f110 0f00 	cmn.w	r0, #0
 800096a:	ea91 0f03 	teq	r1, r3
 800096e:	bf58      	it	pl
 8000970:	4299      	cmppl	r1, r3
 8000972:	bf08      	it	eq
 8000974:	4290      	cmpeq	r0, r2
 8000976:	bf2c      	ite	cs
 8000978:	17d8      	asrcs	r0, r3, #31
 800097a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097e:	f040 0001 	orr.w	r0, r0, #1
 8000982:	4770      	bx	lr
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d102      	bne.n	8000994 <__cmpdf2+0x64>
 800098e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000992:	d107      	bne.n	80009a4 <__cmpdf2+0x74>
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d1d6      	bne.n	800094c <__cmpdf2+0x1c>
 800099e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a2:	d0d3      	beq.n	800094c <__cmpdf2+0x1c>
 80009a4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_cdrcmple>:
 80009ac:	4684      	mov	ip, r0
 80009ae:	4610      	mov	r0, r2
 80009b0:	4662      	mov	r2, ip
 80009b2:	468c      	mov	ip, r1
 80009b4:	4619      	mov	r1, r3
 80009b6:	4663      	mov	r3, ip
 80009b8:	e000      	b.n	80009bc <__aeabi_cdcmpeq>
 80009ba:	bf00      	nop

080009bc <__aeabi_cdcmpeq>:
 80009bc:	b501      	push	{r0, lr}
 80009be:	f7ff ffb7 	bl	8000930 <__cmpdf2>
 80009c2:	2800      	cmp	r0, #0
 80009c4:	bf48      	it	mi
 80009c6:	f110 0f00 	cmnmi.w	r0, #0
 80009ca:	bd01      	pop	{r0, pc}

080009cc <__aeabi_dcmpeq>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff fff4 	bl	80009bc <__aeabi_cdcmpeq>
 80009d4:	bf0c      	ite	eq
 80009d6:	2001      	moveq	r0, #1
 80009d8:	2000      	movne	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmplt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffea 	bl	80009bc <__aeabi_cdcmpeq>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmple>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffe0 	bl	80009bc <__aeabi_cdcmpeq>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpge>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffce 	bl	80009ac <__aeabi_cdrcmple>
 8000a10:	bf94      	ite	ls
 8000a12:	2001      	movls	r0, #1
 8000a14:	2000      	movhi	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpgt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffc4 	bl	80009ac <__aeabi_cdrcmple>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_frsub>:
 8000b20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	e002      	b.n	8000b2c <__addsf3>
 8000b26:	bf00      	nop

08000b28 <__aeabi_fsub>:
 8000b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b2c <__addsf3>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	bf1f      	itttt	ne
 8000b30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b34:	ea92 0f03 	teqne	r2, r3
 8000b38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b40:	d06a      	beq.n	8000c18 <__addsf3+0xec>
 8000b42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4a:	bfc1      	itttt	gt
 8000b4c:	18d2      	addgt	r2, r2, r3
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	4048      	eorgt	r0, r1
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	bf88      	it	hi
 8000b5c:	4770      	bxhi	lr
 8000b5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4249      	negne	r1, r1
 8000b7e:	ea92 0f03 	teq	r2, r3
 8000b82:	d03f      	beq.n	8000c04 <__addsf3+0xd8>
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	fa41 fc03 	asr.w	ip, r1, r3
 8000b8c:	eb10 000c 	adds.w	r0, r0, ip
 8000b90:	f1c3 0320 	rsb	r3, r3, #32
 8000b94:	fa01 f103 	lsl.w	r1, r1, r3
 8000b98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9c:	d502      	bpl.n	8000ba4 <__addsf3+0x78>
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba8:	d313      	bcc.n	8000bd2 <__addsf3+0xa6>
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bae:	d306      	bcc.n	8000bbe <__addsf3+0x92>
 8000bb0:	0840      	lsrs	r0, r0, #1
 8000bb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb6:	f102 0201 	add.w	r2, r2, #1
 8000bba:	2afe      	cmp	r2, #254	; 0xfe
 8000bbc:	d251      	bcs.n	8000c62 <__addsf3+0x136>
 8000bbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	ea40 0003 	orr.w	r0, r0, r3
 8000bd0:	4770      	bx	lr
 8000bd2:	0049      	lsls	r1, r1, #1
 8000bd4:	eb40 0000 	adc.w	r0, r0, r0
 8000bd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	d1ed      	bne.n	8000bbe <__addsf3+0x92>
 8000be2:	fab0 fc80 	clz	ip, r0
 8000be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bea:	ebb2 020c 	subs.w	r2, r2, ip
 8000bee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf2:	bfaa      	itet	ge
 8000bf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf8:	4252      	neglt	r2, r2
 8000bfa:	4318      	orrge	r0, r3
 8000bfc:	bfbc      	itt	lt
 8000bfe:	40d0      	lsrlt	r0, r2
 8000c00:	4318      	orrlt	r0, r3
 8000c02:	4770      	bx	lr
 8000c04:	f092 0f00 	teq	r2, #0
 8000c08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c0c:	bf06      	itte	eq
 8000c0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c12:	3201      	addeq	r2, #1
 8000c14:	3b01      	subne	r3, #1
 8000c16:	e7b5      	b.n	8000b84 <__addsf3+0x58>
 8000c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	bf18      	it	ne
 8000c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c26:	d021      	beq.n	8000c6c <__addsf3+0x140>
 8000c28:	ea92 0f03 	teq	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__addsf3+0x10c>
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	bf08      	it	eq
 8000c34:	4608      	moveq	r0, r1
 8000c36:	4770      	bx	lr
 8000c38:	ea90 0f01 	teq	r0, r1
 8000c3c:	bf1c      	itt	ne
 8000c3e:	2000      	movne	r0, #0
 8000c40:	4770      	bxne	lr
 8000c42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c46:	d104      	bne.n	8000c52 <__addsf3+0x126>
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c56:	bf3c      	itt	cc
 8000c58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bxcc	lr
 8000c5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	4770      	bx	lr
 8000c6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c70:	bf16      	itet	ne
 8000c72:	4608      	movne	r0, r1
 8000c74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c78:	4601      	movne	r1, r0
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	bf06      	itte	eq
 8000c7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c82:	ea90 0f01 	teqeq	r0, r1
 8000c86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_ui2f>:
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e004      	b.n	8000c9c <__aeabi_i2f+0x8>
 8000c92:	bf00      	nop

08000c94 <__aeabi_i2f>:
 8000c94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	bf48      	it	mi
 8000c9a:	4240      	negmi	r0, r0
 8000c9c:	ea5f 0c00 	movs.w	ip, r0
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca8:	4601      	mov	r1, r0
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	e01c      	b.n	8000cea <__aeabi_l2f+0x2a>

08000cb0 <__aeabi_ul2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e00a      	b.n	8000cd4 <__aeabi_l2f+0x14>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_l2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_l2f+0x14>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	ea5f 0c01 	movs.w	ip, r1
 8000cd8:	bf02      	ittt	eq
 8000cda:	4684      	moveq	ip, r0
 8000cdc:	4601      	moveq	r1, r0
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce4:	bf08      	it	eq
 8000ce6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cee:	fabc f28c 	clz	r2, ip
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf8:	db10      	blt.n	8000d1c <__aeabi_l2f+0x5c>
 8000cfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	f020 0001 	biceq.w	r0, r0, #1
 8000d1a:	4770      	bx	lr
 8000d1c:	f102 0220 	add.w	r2, r2, #32
 8000d20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_fmul>:
 8000d3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d44:	bf1e      	ittt	ne
 8000d46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4a:	ea92 0f0c 	teqne	r2, ip
 8000d4e:	ea93 0f0c 	teqne	r3, ip
 8000d52:	d06f      	beq.n	8000e34 <__aeabi_fmul+0xf8>
 8000d54:	441a      	add	r2, r3
 8000d56:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5a:	0240      	lsls	r0, r0, #9
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d62:	d01e      	beq.n	8000da2 <__aeabi_fmul+0x66>
 8000d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d68:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d6c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d70:	fba0 3101 	umull	r3, r1, r0, r1
 8000d74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d7c:	bf3e      	ittt	cc
 8000d7e:	0049      	lslcc	r1, r1, #1
 8000d80:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d84:	005b      	lslcc	r3, r3, #1
 8000d86:	ea40 0001 	orr.w	r0, r0, r1
 8000d8a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d8e:	2afd      	cmp	r2, #253	; 0xfd
 8000d90:	d81d      	bhi.n	8000dce <__aeabi_fmul+0x92>
 8000d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9a:	bf08      	it	eq
 8000d9c:	f020 0001 	biceq.w	r0, r0, #1
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000daa:	bf08      	it	eq
 8000dac:	0249      	lsleq	r1, r1, #9
 8000dae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000db6:	3a7f      	subs	r2, #127	; 0x7f
 8000db8:	bfc2      	ittt	gt
 8000dba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dbe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc2:	4770      	bxgt	lr
 8000dc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	dc5d      	bgt.n	8000e8c <__aeabi_fmul+0x150>
 8000dd0:	f112 0f19 	cmn.w	r2, #25
 8000dd4:	bfdc      	itt	le
 8000dd6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dda:	4770      	bxle	lr
 8000ddc:	f1c2 0200 	rsb	r2, r2, #0
 8000de0:	0041      	lsls	r1, r0, #1
 8000de2:	fa21 f102 	lsr.w	r1, r1, r2
 8000de6:	f1c2 0220 	rsb	r2, r2, #32
 8000dea:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dee:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df2:	f140 0000 	adc.w	r0, r0, #0
 8000df6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfa:	bf08      	it	eq
 8000dfc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e00:	4770      	bx	lr
 8000e02:	f092 0f00 	teq	r2, #0
 8000e06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0040      	lsleq	r0, r0, #1
 8000e0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e12:	3a01      	subeq	r2, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xce>
 8000e16:	ea40 000c 	orr.w	r0, r0, ip
 8000e1a:	f093 0f00 	teq	r3, #0
 8000e1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0049      	lsleq	r1, r1, #1
 8000e26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2a:	3b01      	subeq	r3, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xe6>
 8000e2e:	ea41 010c 	orr.w	r1, r1, ip
 8000e32:	e78f      	b.n	8000d54 <__aeabi_fmul+0x18>
 8000e34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	bf18      	it	ne
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d00a      	beq.n	8000e5a <__aeabi_fmul+0x11e>
 8000e44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e48:	bf18      	it	ne
 8000e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	d1d8      	bne.n	8000e02 <__aeabi_fmul+0xc6>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	4770      	bx	lr
 8000e5a:	f090 0f00 	teq	r0, #0
 8000e5e:	bf17      	itett	ne
 8000e60:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e64:	4608      	moveq	r0, r1
 8000e66:	f091 0f00 	teqne	r1, #0
 8000e6a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e6e:	d014      	beq.n	8000e9a <__aeabi_fmul+0x15e>
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d101      	bne.n	8000e7a <__aeabi_fmul+0x13e>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d10f      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e7a:	ea93 0f0c 	teq	r3, ip
 8000e7e:	d103      	bne.n	8000e88 <__aeabi_fmul+0x14c>
 8000e80:	024b      	lsls	r3, r1, #9
 8000e82:	bf18      	it	ne
 8000e84:	4608      	movne	r0, r1
 8000e86:	d108      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e98:	4770      	bx	lr
 8000e9a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fdiv>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d069      	beq.n	8000f90 <__aeabi_fdiv+0xec>
 8000ebc:	eba2 0203 	sub.w	r2, r2, r3
 8000ec0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec4:	0249      	lsls	r1, r1, #9
 8000ec6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eca:	d037      	beq.n	8000f3c <__aeabi_fdiv+0x98>
 8000ecc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000edc:	428b      	cmp	r3, r1
 8000ede:	bf38      	it	cc
 8000ee0:	005b      	lslcc	r3, r3, #1
 8000ee2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ee6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eea:	428b      	cmp	r3, r1
 8000eec:	bf24      	itt	cs
 8000eee:	1a5b      	subcs	r3, r3, r1
 8000ef0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef8:	bf24      	itt	cs
 8000efa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000efe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f02:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f06:	bf24      	itt	cs
 8000f08:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	bf18      	it	ne
 8000f22:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f26:	d1e0      	bne.n	8000eea <__aeabi_fdiv+0x46>
 8000f28:	2afd      	cmp	r2, #253	; 0xfd
 8000f2a:	f63f af50 	bhi.w	8000dce <__aeabi_fmul+0x92>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f34:	bf08      	it	eq
 8000f36:	f020 0001 	biceq.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f40:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f44:	327f      	adds	r2, #127	; 0x7f
 8000f46:	bfc2      	ittt	gt
 8000f48:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f4c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f50:	4770      	bxgt	lr
 8000f52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	e737      	b.n	8000dce <__aeabi_fmul+0x92>
 8000f5e:	f092 0f00 	teq	r2, #0
 8000f62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0040      	lsleq	r0, r0, #1
 8000f6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f6e:	3a01      	subeq	r2, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xc2>
 8000f72:	ea40 000c 	orr.w	r0, r0, ip
 8000f76:	f093 0f00 	teq	r3, #0
 8000f7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0049      	lsleq	r1, r1, #1
 8000f82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f86:	3b01      	subeq	r3, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xda>
 8000f8a:	ea41 010c 	orr.w	r1, r1, ip
 8000f8e:	e795      	b.n	8000ebc <__aeabi_fdiv+0x18>
 8000f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f94:	ea92 0f0c 	teq	r2, ip
 8000f98:	d108      	bne.n	8000fac <__aeabi_fdiv+0x108>
 8000f9a:	0242      	lsls	r2, r0, #9
 8000f9c:	f47f af7d 	bne.w	8000e9a <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	f47f af70 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e776      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	d104      	bne.n	8000fbc <__aeabi_fdiv+0x118>
 8000fb2:	024b      	lsls	r3, r1, #9
 8000fb4:	f43f af4c 	beq.w	8000e50 <__aeabi_fmul+0x114>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e76e      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1ca      	bne.n	8000f5e <__aeabi_fdiv+0xba>
 8000fc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fcc:	f47f af5c 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fd0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd4:	f47f af3c 	bne.w	8000e50 <__aeabi_fmul+0x114>
 8000fd8:	e75f      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fda:	bf00      	nop

08000fdc <__gesf2>:
 8000fdc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe0:	e006      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__lesf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	e002      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__cmpsf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ffc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001000:	bf18      	it	ne
 8001002:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001006:	d011      	beq.n	800102c <__cmpsf2+0x40>
 8001008:	b001      	add	sp, #4
 800100a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100e:	bf18      	it	ne
 8001010:	ea90 0f01 	teqne	r0, r1
 8001014:	bf58      	it	pl
 8001016:	ebb2 0003 	subspl.w	r0, r2, r3
 800101a:	bf88      	it	hi
 800101c:	17c8      	asrhi	r0, r1, #31
 800101e:	bf38      	it	cc
 8001020:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001024:	bf18      	it	ne
 8001026:	f040 0001 	orrne.w	r0, r0, #1
 800102a:	4770      	bx	lr
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	d102      	bne.n	8001038 <__cmpsf2+0x4c>
 8001032:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001036:	d105      	bne.n	8001044 <__cmpsf2+0x58>
 8001038:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800103c:	d1e4      	bne.n	8001008 <__cmpsf2+0x1c>
 800103e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001042:	d0e1      	beq.n	8001008 <__cmpsf2+0x1c>
 8001044:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__aeabi_cfrcmple>:
 800104c:	4684      	mov	ip, r0
 800104e:	4608      	mov	r0, r1
 8001050:	4661      	mov	r1, ip
 8001052:	e7ff      	b.n	8001054 <__aeabi_cfcmpeq>

08001054 <__aeabi_cfcmpeq>:
 8001054:	b50f      	push	{r0, r1, r2, r3, lr}
 8001056:	f7ff ffc9 	bl	8000fec <__cmpsf2>
 800105a:	2800      	cmp	r0, #0
 800105c:	bf48      	it	mi
 800105e:	f110 0f00 	cmnmi.w	r0, #0
 8001062:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001064 <__aeabi_fcmpeq>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff fff4 	bl	8001054 <__aeabi_cfcmpeq>
 800106c:	bf0c      	ite	eq
 800106e:	2001      	moveq	r0, #1
 8001070:	2000      	movne	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmplt>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffea 	bl	8001054 <__aeabi_cfcmpeq>
 8001080:	bf34      	ite	cc
 8001082:	2001      	movcc	r0, #1
 8001084:	2000      	movcs	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmple>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffe0 	bl	8001054 <__aeabi_cfcmpeq>
 8001094:	bf94      	ite	ls
 8001096:	2001      	movls	r0, #1
 8001098:	2000      	movhi	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmpge>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffd2 	bl	800104c <__aeabi_cfrcmple>
 80010a8:	bf94      	ite	ls
 80010aa:	2001      	movls	r0, #1
 80010ac:	2000      	movhi	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmpgt>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffc8 	bl	800104c <__aeabi_cfrcmple>
 80010bc:	bf34      	ite	cc
 80010be:	2001      	movcc	r0, #1
 80010c0:	2000      	movcs	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_f2uiz>:
 80010c8:	0042      	lsls	r2, r0, #1
 80010ca:	d20e      	bcs.n	80010ea <__aeabi_f2uiz+0x22>
 80010cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d0:	d30b      	bcc.n	80010ea <__aeabi_f2uiz+0x22>
 80010d2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010da:	d409      	bmi.n	80010f0 <__aeabi_f2uiz+0x28>
 80010dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e4:	fa23 f002 	lsr.w	r0, r3, r2
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2uiz+0x32>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d102      	bne.n	8001100 <__aeabi_f2uiz+0x38>
 80010fa:	f04f 30ff 	mov.w	r0, #4294967295
 80010fe:	4770      	bx	lr
 8001100:	f04f 0000 	mov.w	r0, #0
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <HardFault_Handler>:
 *      Author: 20102
 */
#include "RTOS_CORTEX_M3_PORTING.h"
#include "stm32_speed_DRIVER.h"

void HardFault_Handler(){
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	while(1);
 800110c:	e7fe      	b.n	800110c <HardFault_Handler+0x4>

0800110e <MemManage_Handler>:
}
void	MemManage_Handler(){
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
	while(1);
 8001112:	e7fe      	b.n	8001112 <MemManage_Handler+0x4>

08001114 <BusFault_Handler>:
}
void	BusFault_Handler(){
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
	while(1);
 8001118:	e7fe      	b.n	8001118 <BusFault_Handler+0x4>

0800111a <UsageFault_Handler>:
}
void	UsageFault_Handler(){
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
	while(1);
 800111e:	e7fe      	b.n	800111e <UsageFault_Handler+0x4>

08001120 <SVC_Handler>:


//====================================

__attribute__((naked)) void SVC_Handler(){
	__asm("TST lr,#4 \n\t"
 8001120:	f01e 0f04 	tst.w	lr, #4
 8001124:	bf0c      	ite	eq
 8001126:	f3ef 8008 	mrseq	r0, MSP
 800112a:	f3ef 8009 	mrsne	r0, PSP
 800112e:	f000 b9c1 	b.w	80014b4 <OS_SVC_SERVICES>
			"ITE EQ \n\t"
			"MRSEQ r0,MSP \n\t"
			"MRSNE r0,PSP \n\t"
			"B OS_SVC_SERVICES");
}
 8001132:	bf00      	nop

08001134 <OS_TRIGDER_PENDSV>:



//====================================

void OS_TRIGDER_PENDSV(){
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <OS_TRIGDER_PENDSV+0x18>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a03      	ldr	r2, [pc, #12]	; (800114c <OS_TRIGDER_PENDSV+0x18>)
 800113e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001142:	6053      	str	r3, [r2, #4]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <OS_FIFO_ENQUEUE>:

}

/* *********************************** */

FIFO_status_t OS_FIFO_ENQUEUE (FIFO_BUF_t* fifo,FIFO_TYPE item){
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->lenght)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <OS_FIFO_ENQUEUE+0x1a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	89db      	ldrh	r3, [r3, #14]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <OS_FIFO_ENQUEUE+0x1e>
		return FIFO_NULL;
 800116a:	2301      	movs	r3, #1
 800116c:	e02e      	b.n	80011cc <OS_FIFO_ENQUEUE+0x7c>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->count == fifo->lenght))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	429a      	cmp	r2, r3
 8001178:	d107      	bne.n	800118a <OS_FIFO_ENQUEUE+0x3a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	899a      	ldrh	r2, [r3, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	89db      	ldrh	r3, [r3, #14]
 8001182:	429a      	cmp	r2, r3
 8001184:	d101      	bne.n	800118a <OS_FIFO_ENQUEUE+0x3a>
		return FIFO_FULL;
 8001186:	2302      	movs	r3, #2
 8001188:	e020      	b.n	80011cc <OS_FIFO_ENQUEUE+0x7c>

	*(fifo->tail)=item;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	601a      	str	r2, [r3, #0]
	fifo->count++;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	899b      	ldrh	r3, [r3, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	b29a      	uxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	819a      	strh	r2, [r3, #12]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->lenght )) - 4 ))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6892      	ldr	r2, [r2, #8]
 80011a6:	4611      	mov	r1, r2
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	89d2      	ldrh	r2, [r2, #14]
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	440a      	add	r2, r1
 80011b0:	3a04      	subs	r2, #4
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d104      	bne.n	80011c0 <OS_FIFO_ENQUEUE+0x70>
		fifo->tail = fifo->base;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	e004      	b.n	80011ca <OS_FIFO_ENQUEUE+0x7a>
	else
		fifo->tail++;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	1d1a      	adds	r2, r3, #4
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80011ca:	2300      	movs	r3, #0


}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <OS_FIFO_DEQUEUE>:

/* *********************************** */

FIFO_status_t OS_FIFO_DEQUEUE (FIFO_BUF_t* fifo, FIFO_TYPE* item){
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->lenght)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <OS_FIFO_DEQUEUE+0x1a>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	89db      	ldrh	r3, [r3, #14]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <OS_FIFO_DEQUEUE+0x1e>
		return FIFO_NULL;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e02d      	b.n	8001250 <OS_FIFO_DEQUEUE+0x7a>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d101      	bne.n	8001204 <OS_FIFO_DEQUEUE+0x2e>
		return FIFO_EMPTY;
 8001200:	2303      	movs	r3, #3
 8001202:	e025      	b.n	8001250 <OS_FIFO_DEQUEUE+0x7a>



	*item = *(fifo->head);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	601a      	str	r2, [r3, #0]
	*(fifo->head)=NULL;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
	fifo->count--;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	899b      	ldrh	r3, [r3, #12]
 800121a:	3b01      	subs	r3, #1
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	819a      	strh	r2, [r3, #12]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->lenght )) - 4 ))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6892      	ldr	r2, [r2, #8]
 800122a:	4611      	mov	r1, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	89d2      	ldrh	r2, [r2, #14]
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	440a      	add	r2, r1
 8001234:	3a04      	subs	r2, #4
 8001236:	4293      	cmp	r3, r2
 8001238:	d104      	bne.n	8001244 <OS_FIFO_DEQUEUE+0x6e>
		fifo->head = fifo->base;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e004      	b.n	800124e <OS_FIFO_DEQUEUE+0x78>
	else
		fifo->head++;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	1d1a      	adds	r2, r3, #4
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
	...

0800125c <shell_sort>:
				OS_CONTROL.OS_TASKS[j+1] = temp ;
			}

}

void shell_sort() {
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
	unsigned int i, j, n, gap;
	TASK_FRAME_t *temp;
	n = OS_CONTROL.NUMBER_OF_TASKS;
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <shell_sort+0x94>)
 8001264:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001268:	60bb      	str	r3, [r7, #8]
	for (gap = n / 2; gap > 0; gap /= 2) {
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	085b      	lsrs	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e036      	b.n	80012e0 <shell_sort+0x84>
		for (i = gap; i < n; i++) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	e02c      	b.n	80012d2 <shell_sort+0x76>
			temp = OS_CONTROL.OS_TASKS[i];
 8001278:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <shell_sort+0x94>)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001280:	607b      	str	r3, [r7, #4]
			for (j = i; j >= gap && OS_CONTROL.OS_TASKS[j - gap]->priority > temp->priority; j -= gap) {
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	e00d      	b.n	80012a4 <shell_sort+0x48>
				OS_CONTROL.OS_TASKS[j] = OS_CONTROL.OS_TASKS[j - gap];
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <shell_sort+0x94>)
 8001290:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001294:	4916      	ldr	r1, [pc, #88]	; (80012f0 <shell_sort+0x94>)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (j = i; j >= gap && OS_CONTROL.OS_TASKS[j - gap]->priority > temp->priority; j -= gap) {
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d30a      	bcc.n	80012c2 <shell_sort+0x66>
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <shell_sort+0x94>)
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	791a      	ldrb	r2, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	791b      	ldrb	r3, [r3, #4]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d8e2      	bhi.n	8001288 <shell_sort+0x2c>
			}
			OS_CONTROL.OS_TASKS[j] = temp;
 80012c2:	490b      	ldr	r1, [pc, #44]	; (80012f0 <shell_sort+0x94>)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = gap; i < n; i++) {
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3ce      	bcc.n	8001278 <shell_sort+0x1c>
	for (gap = n / 2; gap > 0; gap /= 2) {
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	085b      	lsrs	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1c5      	bne.n	8001272 <shell_sort+0x16>
		}
	}
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	2000024c 	.word	0x2000024c

080012f4 <free_the_FIFO>:
//=====================

void free_the_FIFO(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	TASK_FRAME_t* temp;//Because I went to pointer to pointer **
	while(OS_FIFO_DEQUEUE(&READY_QUEUE,&temp) !=FIFO_EMPTY){//Address of the pointer
 80012fa:	bf00      	nop
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <free_the_FIFO+0x20>)
 8001302:	f7ff ff68 	bl	80011d6 <OS_FIFO_DEQUEUE>
 8001306:	4603      	mov	r3, r0
 8001308:	2b03      	cmp	r3, #3
 800130a:	d1f7      	bne.n	80012fc <free_the_FIFO+0x8>

	}
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000428 	.word	0x20000428

08001318 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>:
//=====================

void ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
	//=====================
	TASK_FRAME_t *NEXT_TASK,*CURENT_TASK;
	uint8_t i=0;
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
	//=====================
	shell_sort();//Rearrange  the SCEDULER table
 8001322:	f7ff ff9b 	bl	800125c <shell_sort>
	//=====================
	free_the_FIFO(); //free the FIFO
 8001326:	f7ff ffe5 	bl	80012f4 <free_the_FIFO>

	//=====================
	//update the FIFO
	while(i<OS_CONTROL.NUMBER_OF_TASKS)
 800132a:	e03d      	b.n	80013a8 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x90>
	{
		CURENT_TASK=OS_CONTROL.OS_TASKS[i];
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	60bb      	str	r3, [r7, #8]
		NEXT_TASK=OS_CONTROL.OS_TASKS[i+1];
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	3301      	adds	r3, #1
 800133a:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 800133c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001340:	607b      	str	r3, [r7, #4]

		/*
		 * <<I need only the highest  priority element or all  equal highest priority >>
		 */

		if(CURENT_TASK->State!=Suspend){
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001348:	2b00      	cmp	r3, #0
 800134a:	d02a      	beq.n	80013a2 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x8a>
			 * Suspend
			 * wait
			 * >>i++
			 */

			if(NEXT_TASK->State==Suspend){//Suspend or NULL don not care it is the same =0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001352:	2b00      	cmp	r3, #0
 8001354:	d108      	bne.n	8001368 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x50>
				/*
				 * wait go to the fifo
				 * Suspend
				 * */

				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	481a      	ldr	r0, [pc, #104]	; (80013c4 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 800135a:	f7ff fef9 	bl	8001150 <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2202      	movs	r2, #2
 8001362:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				break;
 8001366:	e026      	b.n	80013b6 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x9e>
			/*
			 * wait priority =0 >>>go to the fifo
			 * wait priority= 1
			 *
			 * */
			if(CURENT_TASK->priority < NEXT_TASK->priority){
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	791a      	ldrb	r2, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	791b      	ldrb	r3, [r3, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	d208      	bcs.n	8001386 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x6e>
				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	4813      	ldr	r0, [pc, #76]	; (80013c4 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 8001378:	f7ff feea 	bl	8001150 <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2202      	movs	r2, #2
 8001380:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				break;
 8001384:	e017      	b.n	80013b6 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x9e>
			 * wait priority =1  go to the fifo
			 * wait priority= 1  go to the fifo
			 *
			 * >>> round robin
			 * */
			else if(CURENT_TASK->priority == NEXT_TASK->priority){
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	791a      	ldrb	r2, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	791b      	ldrb	r3, [r3, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	d107      	bne.n	80013a2 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x8a>
				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 8001396:	f7ff fedb 	bl	8001150 <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2202      	movs	r2, #2
 800139e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			}

		}


		i++;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	3301      	adds	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
	while(i<OS_CONTROL.NUMBER_OF_TASKS)
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 80013ae:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d3ba      	bcc.n	800132c <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x14>
	}
	//end while
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000024c 	.word	0x2000024c
 80013c4:	20000428 	.word	0x20000428

080013c8 <OS_SVC_SET>:

//======================================== SVC =====================================================

void OS_SVC_SET(_SVC_ID ID){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	//OS_SVC_SERVICES
	switch(ID){
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d006      	beq.n	80013e6 <OS_SVC_SET+0x1e>
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d006      	beq.n	80013ea <OS_SVC_SET+0x22>
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d000      	beq.n	80013e2 <OS_SVC_SET+0x1a>
		break;
	case SVC_Wating_task:
		__asm("SVC #0x02");//wating
		break;
	}
}
 80013e0:	e005      	b.n	80013ee <OS_SVC_SET+0x26>
		__asm("SVC #0x0");//ACTIVAT
 80013e2:	df00      	svc	0
		break;
 80013e4:	e003      	b.n	80013ee <OS_SVC_SET+0x26>
		__asm("SVC #0x01");//TERMINATE
 80013e6:	df01      	svc	1
		break;
 80013e8:	e001      	b.n	80013ee <OS_SVC_SET+0x26>
		__asm("SVC #0x02");//wating
 80013ea:	df02      	svc	2
		break;
 80013ec:	bf00      	nop
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <OS_WHATE_NEXT>:
//=====================
void OS_WHATE_NEXT(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0

	if((READY_QUEUE.count==0)){
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <OS_WHATE_NEXT+0xb0>)
 80013fe:	899b      	ldrh	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d122      	bne.n	800144a <OS_WHATE_NEXT+0x52>
		//if fifo empty
		if((OS_CONTROL.CURENT_TASK->State==Suspend||OS_CONTROL.CURENT_TASK->State==Running||OS_CONTROL.CURENT_TASK->State==Wating)){
 8001404:	4b29      	ldr	r3, [pc, #164]	; (80014ac <OS_WHATE_NEXT+0xb4>)
 8001406:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800140a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00d      	beq.n	800142e <OS_WHATE_NEXT+0x36>
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <OS_WHATE_NEXT+0xb4>)
 8001414:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001418:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800141c:	2b03      	cmp	r3, #3
 800141e:	d006      	beq.n	800142e <OS_WHATE_NEXT+0x36>
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <OS_WHATE_NEXT+0xb4>)
 8001422:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001426:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800142a:	2b01      	cmp	r3, #1
 800142c:	d13a      	bne.n	80014a4 <OS_WHATE_NEXT+0xac>
			//if CURENT_TASK Wating then it come from ALSHREIF_RTOS_ACTIVAT_TASK(task will be wait)
			//SysTick_Handler will cut it and enter here

			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK); //go to fifo
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <OS_WHATE_NEXT+0xb4>)
 8001430:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001434:	4619      	mov	r1, r3
 8001436:	481c      	ldr	r0, [pc, #112]	; (80014a8 <OS_WHATE_NEXT+0xb0>)
 8001438:	f7ff fe8a 	bl	8001150 <OS_FIFO_ENQUEUE>
			OS_CONTROL.NEXT_TASK=OS_CONTROL.CURENT_TASK;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <OS_WHATE_NEXT+0xb4>)
 800143e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001442:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <OS_WHATE_NEXT+0xb4>)
 8001444:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		if((OS_CONTROL.CURENT_TASK->priority==OS_CONTROL.NEXT_TASK->priority)&&(OS_CONTROL.CURENT_TASK->State!=Suspend)){
			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK);
			OS_CONTROL.CURENT_TASK->State=Ready;
		}
	}
}
 8001448:	e02c      	b.n	80014a4 <OS_WHATE_NEXT+0xac>
		if(READY_QUEUE.count==0){while(1);}//todo}
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <OS_WHATE_NEXT+0xb0>)
 800144c:	899b      	ldrh	r3, [r3, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d100      	bne.n	8001454 <OS_WHATE_NEXT+0x5c>
 8001452:	e7fe      	b.n	8001452 <OS_WHATE_NEXT+0x5a>
		OS_FIFO_DEQUEUE(&READY_QUEUE,&OS_CONTROL.NEXT_TASK);
 8001454:	4916      	ldr	r1, [pc, #88]	; (80014b0 <OS_WHATE_NEXT+0xb8>)
 8001456:	4814      	ldr	r0, [pc, #80]	; (80014a8 <OS_WHATE_NEXT+0xb0>)
 8001458:	f7ff febd 	bl	80011d6 <OS_FIFO_DEQUEUE>
		OS_CONTROL.NEXT_TASK->State=Running;//not if fifo is empty it will access to zero pointer
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <OS_WHATE_NEXT+0xb4>)
 800145e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001462:	2203      	movs	r2, #3
 8001464:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		if((OS_CONTROL.CURENT_TASK->priority==OS_CONTROL.NEXT_TASK->priority)&&(OS_CONTROL.CURENT_TASK->State!=Suspend)){
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <OS_WHATE_NEXT+0xb4>)
 800146a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800146e:	791a      	ldrb	r2, [r3, #4]
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <OS_WHATE_NEXT+0xb4>)
 8001472:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001476:	791b      	ldrb	r3, [r3, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	d113      	bne.n	80014a4 <OS_WHATE_NEXT+0xac>
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <OS_WHATE_NEXT+0xb4>)
 800147e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001482:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00c      	beq.n	80014a4 <OS_WHATE_NEXT+0xac>
			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK);
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <OS_WHATE_NEXT+0xb4>)
 800148c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <OS_WHATE_NEXT+0xb0>)
 8001494:	f7ff fe5c 	bl	8001150 <OS_FIFO_ENQUEUE>
			OS_CONTROL.CURENT_TASK->State=Ready;
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <OS_WHATE_NEXT+0xb4>)
 800149a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800149e:	2202      	movs	r2, #2
 80014a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000428 	.word	0x20000428
 80014ac:	2000024c 	.word	0x2000024c
 80014b0:	200003f0 	.word	0x200003f0

080014b4 <OS_SVC_SERVICES>:
//======================
void OS_SVC_SERVICES(int* STACK_FRAM_POINTER){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	uint8_t SVC_NUM;
	__asm(   "LDR r0,[r0,#24]\n\t"
 80014bc:	6980      	ldr	r0, [r0, #24]
 80014be:	f810 0c02 	ldrb.w	r0, [r0, #-2]
 80014c2:	4603      	mov	r3, r0
 80014c4:	73fb      	strb	r3, [r7, #15]
			"LDRB r0,[r0,#-2]\n\t"
			"MOV %0,r0"
			:"=r"(SVC_NUM));
	//SVC_NUM=*((unsigned char*)(((unsigned char*)STACK_FRAM_POINTER[6])-2));
	switch(SVC_NUM){
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db1f      	blt.n	800150c <OS_SVC_SERVICES+0x58>
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	dd02      	ble.n	80014d6 <OS_SVC_SERVICES+0x22>
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d017      	beq.n	8001504 <OS_SVC_SERVICES+0x50>
		break;

	}


}
 80014d4:	e01a      	b.n	800150c <OS_SVC_SERVICES+0x58>
		ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES();//init to know the next task
 80014d6:	f7ff ff1f 	bl	8001318 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>
		if(OS_CONTROL.OS_MODE==OS_Running){
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <OS_SVC_SERVICES+0x60>)
 80014dc:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d112      	bne.n	800150a <OS_SVC_SERVICES+0x56>
			if(strcmp(OS_CONTROL.CURENT_TASK->NAME,"idle task")!=0){
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <OS_SVC_SERVICES+0x60>)
 80014e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80014ea:	3318      	adds	r3, #24
 80014ec:	490a      	ldr	r1, [pc, #40]	; (8001518 <OS_SVC_SERVICES+0x64>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe fe3e 	bl	8000170 <strcmp>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <OS_SVC_SERVICES+0x56>
				OS_WHATE_NEXT();//to know the next task
 80014fa:	f7ff ff7d 	bl	80013f8 <OS_WHATE_NEXT>
				OS_TRIGDER_PENDSV();//to make context switching
 80014fe:	f7ff fe19 	bl	8001134 <OS_TRIGDER_PENDSV>
		break;
 8001502:	e002      	b.n	800150a <OS_SVC_SERVICES+0x56>
		ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES();//init to know the next task
 8001504:	f7ff ff08 	bl	8001318 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>
		break;
 8001508:	e000      	b.n	800150c <OS_SVC_SERVICES+0x58>
		break;
 800150a:	bf00      	nop
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000024c 	.word	0x2000024c
 8001518:	080053b8 	.word	0x080053b8

0800151c <PendSV_Handler>:
	 * R2
	 * R1
	 * R0
	 * >>>>PSP current because it comes from thread mode
	 */
	OS_get_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT);//PSP-->_PSP_STACK_CURENT
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <PendSV_Handler+0x7c>)
 800151e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001522:	f3ef 8009 	mrs	r0, PSP
 8001526:	4602      	mov	r2, r0
 8001528:	615a      	str	r2, [r3, #20]
	 * r9
	 * r10
	 * r11
	 * */
	//context SAVE
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT -= 8;
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <PendSV_Handler+0x7c>)
 800152c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <PendSV_Handler+0x7c>)
 8001534:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001538:	3a20      	subs	r2, #32
 800153a:	615a      	str	r2, [r3, #20]
	__asm volatile("stmia %0!, {r4-r11}" : : "r" (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT));
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <PendSV_Handler+0x7c>)
 800153e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	e8a3 0ff0 	stmia.w	r3!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// now (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT) will save this address to the next execute of this task
	//and it will enter to make BACK context switching in the next call back :)

	//@context tasks
	if (OS_CONTROL.NEXT_TASK != NULL){
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <PendSV_Handler+0x7c>)
 800154a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d009      	beq.n	8001566 <PendSV_Handler+0x4a>
		OS_CONTROL.CURENT_TASK = OS_CONTROL.NEXT_TASK;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <PendSV_Handler+0x7c>)
 8001554:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001558:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <PendSV_Handler+0x7c>)
 800155a:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_CONTROL.NEXT_TASK = NULL ;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <PendSV_Handler+0x7c>)
 8001560:	2200      	movs	r2, #0
 8001562:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	 * r9
	 * r10
	 * r11
	 * */

	__asm volatile("ldmia %0!, {r4-r11}" : : "r" (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT));
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <PendSV_Handler+0x7c>)
 8001568:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	e8b3 0ff0 	ldmia.w	r3!, {r4, r5, r6, r7, r8, r9, sl, fp}
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT += 8;
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <PendSV_Handler+0x7c>)
 8001574:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <PendSV_Handler+0x7c>)
 800157c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001580:	3220      	adds	r2, #32
 8001582:	615a      	str	r2, [r3, #20]
	 * R2
	 * R1
	 * R0
	 * >>>>PSP current because it comes from thread mode
	 */
	OS_set_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT);//we but the PSP with current psp to force the cpu making this task context
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <PendSV_Handler+0x7c>)
 8001586:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4618      	mov	r0, r3
 800158e:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");//make cpu context back
 8001592:	4770      	bx	lr
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	2000024c 	.word	0x2000024c

0800159c <ALSHREIF_RTOS_WAITING_TIMING>:

	OS_CONTROL.CURENT_TASK->TASK_FUNCTION();
}

//========================================================================================================
void ALSHREIF_RTOS_WAITING_TIMING(){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0

	for(int i=0;i<OS_CONTROL.NUMBER_OF_TASKS;i++){
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	e02d      	b.n	8001604 <ALSHREIF_RTOS_WAITING_TIMING+0x68>
		if(OS_CONTROL.OS_TASKS[i]->State==Suspend){
 80015a8:	4a1c      	ldr	r2, [pc, #112]	; (800161c <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d122      	bne.n	80015fe <ALSHREIF_RTOS_WAITING_TIMING+0x62>
			if(OS_CONTROL.OS_TASKS[i]->wating_time.blocking==enable){
 80015b8:	4a18      	ldr	r2, [pc, #96]	; (800161c <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d11a      	bne.n	80015fe <ALSHREIF_RTOS_WAITING_TIMING+0x62>

				//@ref_sheck_time
				if((--OS_CONTROL.OS_TASKS[i]->wating_time.TICKS)==0){
 80015c8:	4a14      	ldr	r2, [pc, #80]	; (800161c <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d2:	3a01      	subs	r2, #1
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d110      	bne.n	80015fe <ALSHREIF_RTOS_WAITING_TIMING+0x62>
					OS_CONTROL.OS_TASKS[i]->wating_time.blocking=disable;
 80015dc:	4a0f      	ldr	r2, [pc, #60]	; (800161c <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					OS_CONTROL.OS_TASKS[i]->State=Wating;
 80015ea:	4a0c      	ldr	r2, [pc, #48]	; (800161c <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

					OS_SVC_SET(SVC_Wating_task);
 80015f8:	2002      	movs	r0, #2
 80015fa:	f7ff fee5 	bl	80013c8 <OS_SVC_SET>
	for(int i=0;i<OS_CONTROL.NUMBER_OF_TASKS;i++){
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8001606:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4293      	cmp	r3, r2
 8001610:	dbca      	blt.n	80015a8 <ALSHREIF_RTOS_WAITING_TIMING+0xc>
				}
			}
		}
	}
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000024c 	.word	0x2000024c

08001620 <SysTick_Handler>:
//========================================================================================================

void SysTick_Handler(){
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	//=====
	OS_WHATE_NEXT();//to know the next task
 8001624:	f7ff fee8 	bl	80013f8 <OS_WHATE_NEXT>
	//=====
	OS_TRIGDER_PENDSV();//to make context switching
 8001628:	f7ff fd84 	bl	8001134 <OS_TRIGDER_PENDSV>
	//=====
	ALSHREIF_RTOS_WAITING_TIMING();
 800162c:	f7ff ffb6 	bl	800159c <ALSHREIF_RTOS_WAITING_TIMING>
	//=====
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <getposition+0x14>
		rval =0;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <getposition+0x1e>
		rval =4;
 800164e:	2304      	movs	r3, #4
 8001650:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d101      	bne.n	800165c <getposition+0x28>
		rval =8;
 8001658:	2308      	movs	r3, #8
 800165a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d101      	bne.n	8001666 <getposition+0x32>
		rval =12;
 8001662:	230c      	movs	r3, #12
 8001664:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d101      	bne.n	8001670 <getposition+0x3c>
		rval =16;
 800166c:	2310      	movs	r3, #16
 800166e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d101      	bne.n	800167a <getposition+0x46>
		rval =20;
 8001676:	2314      	movs	r3, #20
 8001678:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	2b06      	cmp	r3, #6
 800167e:	d101      	bne.n	8001684 <getposition+0x50>
		rval =24;
 8001680:	2318      	movs	r3, #24
 8001682:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	2b07      	cmp	r3, #7
 8001688:	d101      	bne.n	800168e <getposition+0x5a>
		rval =28;
 800168a:	231c      	movs	r3, #28
 800168c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	2b08      	cmp	r3, #8
 8001692:	d101      	bne.n	8001698 <getposition+0x64>
		rval =0;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	2b09      	cmp	r3, #9
 800169c:	d101      	bne.n	80016a2 <getposition+0x6e>
		rval =4;
 800169e:	2304      	movs	r3, #4
 80016a0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	2b0a      	cmp	r3, #10
 80016a6:	d101      	bne.n	80016ac <getposition+0x78>
		rval =8;
 80016a8:	2308      	movs	r3, #8
 80016aa:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	2b0b      	cmp	r3, #11
 80016b0:	d101      	bne.n	80016b6 <getposition+0x82>
		rval =12;
 80016b2:	230c      	movs	r3, #12
 80016b4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	d101      	bne.n	80016c0 <getposition+0x8c>
		rval =16;
 80016bc:	2310      	movs	r3, #16
 80016be:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	2b0d      	cmp	r3, #13
 80016c4:	d101      	bne.n	80016ca <getposition+0x96>
		rval =20;
 80016c6:	2314      	movs	r3, #20
 80016c8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	2b0e      	cmp	r3, #14
 80016ce:	d101      	bne.n	80016d4 <getposition+0xa0>
		rval =24;
 80016d0:	2318      	movs	r3, #24
 80016d2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	2b0f      	cmp	r3, #15
 80016d8:	d101      	bne.n	80016de <getposition+0xaa>
		rval =28;
 80016da:	231c      	movs	r3, #28
 80016dc:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 80016de:	7bfb      	ldrb	r3, [r7, #15]


}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
	...

080016ec <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	460b      	mov	r3, r1
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4a69      	ldr	r2, [pc, #420]	; (80018a4 <pinmode+0x1b8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d106      	bne.n	8001710 <pinmode+0x24>
		GPIOA_Clock_Enable();
 8001702:	4b69      	ldr	r3, [pc, #420]	; (80018a8 <pinmode+0x1bc>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a68      	ldr	r2, [pc, #416]	; (80018a8 <pinmode+0x1bc>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	e010      	b.n	8001732 <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4a66      	ldr	r2, [pc, #408]	; (80018ac <pinmode+0x1c0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d106      	bne.n	8001726 <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8001718:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <pinmode+0x1bc>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a62      	ldr	r2, [pc, #392]	; (80018a8 <pinmode+0x1bc>)
 800171e:	f043 0308 	orr.w	r3, r3, #8
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	e005      	b.n	8001732 <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 8001726:	4b60      	ldr	r3, [pc, #384]	; (80018a8 <pinmode+0x1bc>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	4a5f      	ldr	r2, [pc, #380]	; (80018a8 <pinmode+0x1bc>)
 800172c:	f043 0310 	orr.w	r3, r3, #16
 8001730:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8001732:	897b      	ldrh	r3, [r7, #10]
 8001734:	2b07      	cmp	r3, #7
 8001736:	d856      	bhi.n	80017e6 <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 8001738:	897b      	ldrh	r3, [r7, #10]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff7a 	bl	8001634 <getposition>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	230f      	movs	r3, #15
 8001746:	4093      	lsls	r3, r2
 8001748:	43da      	mvns	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	401a      	ands	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b08      	cmp	r3, #8
 8001758:	d002      	beq.n	8001760 <pinmode+0x74>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b18      	cmp	r3, #24
 800175e:	d133      	bne.n	80017c8 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b18      	cmp	r3, #24
 8001764:	d117      	bne.n	8001796 <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8001766:	897b      	ldrh	r3, [r7, #10]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff63 	bl	8001634 <getposition>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	2308      	movs	r3, #8
 8001774:	fa03 f202 	lsl.w	r2, r3, r2
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	431a      	orrs	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	897a      	ldrh	r2, [r7, #10]
 8001788:	2101      	movs	r1, #1
 800178a:	fa01 f202 	lsl.w	r2, r1, r2
 800178e:	431a      	orrs	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001794:	e081      	b.n	800189a <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8001796:	897b      	ldrh	r3, [r7, #10]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff4b 	bl	8001634 <getposition>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	2308      	movs	r3, #8
 80017a4:	fa03 f202 	lsl.w	r2, r3, r2
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	897a      	ldrh	r2, [r7, #10]
 80017b8:	2101      	movs	r1, #1
 80017ba:	fa01 f202 	lsl.w	r2, r1, r2
 80017be:	43d2      	mvns	r2, r2
 80017c0:	401a      	ands	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80017c6:	e068      	b.n	800189a <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 80017c8:	897b      	ldrh	r3, [r7, #10]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff32 	bl	8001634 <getposition>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	fa03 f202 	lsl.w	r2, r3, r2
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	431a      	orrs	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	601a      	str	r2, [r3, #0]

	}



}
 80017e4:	e059      	b.n	800189a <pinmode+0x1ae>
	else if(pin>7){
 80017e6:	897b      	ldrh	r3, [r7, #10]
 80017e8:	2b07      	cmp	r3, #7
 80017ea:	d956      	bls.n	800189a <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 80017ec:	897b      	ldrh	r3, [r7, #10]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff20 	bl	8001634 <getposition>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	230f      	movs	r3, #15
 80017fa:	4093      	lsls	r3, r2
 80017fc:	43da      	mvns	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	401a      	ands	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b08      	cmp	r3, #8
 800180c:	d002      	beq.n	8001814 <pinmode+0x128>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b18      	cmp	r3, #24
 8001812:	d133      	bne.n	800187c <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b18      	cmp	r3, #24
 8001818:	d117      	bne.n	800184a <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800181a:	897b      	ldrh	r3, [r7, #10]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff09 	bl	8001634 <getposition>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	2308      	movs	r3, #8
 8001828:	fa03 f202 	lsl.w	r2, r3, r2
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	431a      	orrs	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	897a      	ldrh	r2, [r7, #10]
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f202 	lsl.w	r2, r1, r2
 8001842:	431a      	orrs	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001848:	e027      	b.n	800189a <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800184a:	897b      	ldrh	r3, [r7, #10]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fef1 	bl	8001634 <getposition>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	2308      	movs	r3, #8
 8001858:	fa03 f202 	lsl.w	r2, r3, r2
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	431a      	orrs	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	897a      	ldrh	r2, [r7, #10]
 800186c:	2101      	movs	r1, #1
 800186e:	fa01 f202 	lsl.w	r2, r1, r2
 8001872:	43d2      	mvns	r2, r2
 8001874:	401a      	ands	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800187a:	e00e      	b.n	800189a <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 800187c:	897b      	ldrh	r3, [r7, #10]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fed8 	bl	8001634 <getposition>
 8001884:	4603      	mov	r3, r0
 8001886:	461a      	mov	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	fa03 f202 	lsl.w	r2, r3, r2
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	431a      	orrs	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	605a      	str	r2, [r3, #4]
}
 8001898:	e7ff      	b.n	800189a <pinmode+0x1ae>
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40010800 	.word	0x40010800
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010c00 	.word	0x40010c00

080018b0 <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_typeDef* GPIOx,uint16_t pin,uint8_t status){
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
 80018bc:	4613      	mov	r3, r2
 80018be:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 80018c0:	787b      	ldrb	r3, [r7, #1]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <pinwrite+0x2a>
		GPIOx->GPIOx_ODR |=(1<<pin);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->GPIOx_ODR &=~(1<<pin);

}
 80018d8:	e009      	b.n	80018ee <pinwrite+0x3e>
	else GPIOx->GPIOx_ODR &=~(1<<pin);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	2101      	movs	r1, #1
 80018e2:	fa01 f202 	lsl.w	r2, r1, r2
 80018e6:	43d2      	mvns	r2, r2
 80018e8:	401a      	ands	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60da      	str	r2, [r3, #12]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <_12cdelay_ms>:
 *      Author: 20102
 */
static unsigned flag_init=0;
#include "I2C_LCD.h"
//============================================
void _12cdelay_ms(long x){
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	for(long i=0;i<(x*65);i++);
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e002      	b.n	800190c <_12cdelay_ms+0x14>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3301      	adds	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	019b      	lsls	r3, r3, #6
 8001912:	4413      	add	r3, r2
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbf5      	blt.n	8001906 <_12cdelay_ms+0xe>
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <I2C_LCD_write_CMD>:

void I2C_LCD_write_CMD(I2C_TypeDef* I2Cx,char CMD,uint16_t address){
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af02      	add	r7, sp, #8
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	70fb      	strb	r3, [r7, #3]
 8001930:	4613      	mov	r3, r2
 8001932:	803b      	strh	r3, [r7, #0]

	unsigned char temp = 0x00;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
	uint8_t lcd = 0x0C;//1100  RS=0 RW=0 E=1 backlight =1
 8001938:	230c      	movs	r3, #12
 800193a:	73bb      	strb	r3, [r7, #14]
	lcd &= 0x0F;
 800193c:	7bbb      	ldrb	r3, [r7, #14]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	b2db      	uxtb	r3, r3
 8001944:	73bb      	strb	r3, [r7, #14]
	temp = (CMD & 0xF0);//4 MSB first //1111 0101//  1111 1100  //1111 0100
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	f023 030f 	bic.w	r3, r3, #15
 800194c:	73fb      	strb	r3, [r7, #15]
	lcd |= (temp| 0x04);// 4 MSB of CMD + 1100  RS=0 RW=0 E=1 backlight =1
 800194e:	7bba      	ldrb	r2, [r7, #14]
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	4313      	orrs	r3, r2
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	b2db      	uxtb	r3, r3
 800195c:	73bb      	strb	r3, [r7, #14]

	I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);//send to i2C
 800195e:	883a      	ldrh	r2, [r7, #0]
 8001960:	f107 010e 	add.w	r1, r7, #14
 8001964:	2300      	movs	r3, #0
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	2300      	movs	r3, #0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	4613      	mov	r3, r2
 800196e:	2201      	movs	r2, #1
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fa2d 	bl	8001dd0 <I2C_Master_Send>

	_12cdelay_ms(10);
 8001976:	200a      	movs	r0, #10
 8001978:	f7ff ffbe 	bl	80018f8 <_12cdelay_ms>
	lcd &= ~(0x04);//E=0
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	f023 0304 	bic.w	r3, r3, #4
 8001982:	b2db      	uxtb	r3, r3
 8001984:	73bb      	strb	r3, [r7, #14]
	I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);// 4 MSB of CMD + 1100  RS=0 RW=0 E=0 backlight =1
 8001986:	883a      	ldrh	r2, [r7, #0]
 8001988:	f107 010e 	add.w	r1, r7, #14
 800198c:	2300      	movs	r3, #0
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	2300      	movs	r3, #0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	2201      	movs	r2, #1
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 fa19 	bl	8001dd0 <I2C_Master_Send>
	_12cdelay_ms(10);
 800199e:	200a      	movs	r0, #10
 80019a0:	f7ff ffaa 	bl	80018f8 <_12cdelay_ms>




	if(flag_init)
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <I2C_LCD_write_CMD+0xf8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d02f      	beq.n	8001a0c <I2C_LCD_write_CMD+0xe8>
	{

		temp = ((CMD & 0x0F)<<4);//4 LSB first
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	73fb      	strb	r3, [r7, #15]
		lcd = 0x0C;//1100  RS=0 RW=0 E=1 backlight =1
 80019b2:	230c      	movs	r3, #12
 80019b4:	73bb      	strb	r3, [r7, #14]
		lcd |= (temp| 0x04);// 4 LSB of CMD + 1100  RS=0 RW=0 E=1 backlight =1
 80019b6:	7bba      	ldrb	r2, [r7, #14]
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	73bb      	strb	r3, [r7, #14]

		I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);//send to i2C
 80019c6:	883a      	ldrh	r2, [r7, #0]
 80019c8:	f107 010e 	add.w	r1, r7, #14
 80019cc:	2300      	movs	r3, #0
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4613      	mov	r3, r2
 80019d6:	2201      	movs	r2, #1
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f9f9 	bl	8001dd0 <I2C_Master_Send>
		_12cdelay_ms(10);
 80019de:	200a      	movs	r0, #10
 80019e0:	f7ff ff8a 	bl	80018f8 <_12cdelay_ms>
		lcd &= ~(0x04);//E=0
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	f023 0304 	bic.w	r3, r3, #4
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	73bb      	strb	r3, [r7, #14]
		I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);// 4 LSB of CMD + 1100  RS=0 RW=0 E=0 backlight =1
 80019ee:	883a      	ldrh	r2, [r7, #0]
 80019f0:	f107 010e 	add.w	r1, r7, #14
 80019f4:	2300      	movs	r3, #0
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	2300      	movs	r3, #0
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	4613      	mov	r3, r2
 80019fe:	2201      	movs	r2, #1
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f9e5 	bl	8001dd0 <I2C_Master_Send>
		_12cdelay_ms(5);
 8001a06:	2005      	movs	r0, #5
 8001a08:	f7ff ff76 	bl	80018f8 <_12cdelay_ms>
	}
	_12cdelay_ms(2);
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f7ff ff73 	bl	80018f8 <_12cdelay_ms>
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200000a0 	.word	0x200000a0

08001a20 <I2C_LCD_Init>:
void I2C_LCD_Init(I2C_TypeDef* I2Cx,uint16_t address){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
	I2C_INIT(I2C1,36000000);
 8001a2c:	492a      	ldr	r1, [pc, #168]	; (8001ad8 <I2C_LCD_Init+0xb8>)
 8001a2e:	482b      	ldr	r0, [pc, #172]	; (8001adc <I2C_LCD_Init+0xbc>)
 8001a30:	f000 f92a 	bl	8001c88 <I2C_INIT>
	flag_init=0;
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <I2C_LCD_Init+0xc0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
	_12cdelay_ms(90);
 8001a3a:	205a      	movs	r0, #90	; 0x5a
 8001a3c:	f7ff ff5c 	bl	80018f8 <_12cdelay_ms>
	I2C_LCD_write_CMD(I2Cx,0x03, address);//--- Initialize Sequence
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	461a      	mov	r2, r3
 8001a44:	2103      	movs	r1, #3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff6c 	bl	8001924 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0x03, address);
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2103      	movs	r1, #3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ff66 	bl	8001924 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0x03, address);
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff60 	bl	8001924 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0x20, address);//--- Return to Home
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	461a      	mov	r2, r3
 8001a68:	2120      	movs	r1, #32
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff5a 	bl	8001924 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0x20, address);//--- Return to Home
 8001a70:	887b      	ldrh	r3, [r7, #2]
 8001a72:	461a      	mov	r2, r3
 8001a74:	2120      	movs	r1, #32
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff54 	bl	8001924 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0x80, address);// 2 line and 5x7 pixel N=1 f=0
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff4e 	bl	8001924 <I2C_LCD_write_CMD>
	_12cdelay_ms(2);
 8001a88:	2002      	movs	r0, #2
 8001a8a:	f7ff ff35 	bl	80018f8 <_12cdelay_ms>
	I2C_LCD_write_CMD(I2Cx,0x00, address);
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	461a      	mov	r2, r3
 8001a92:	2100      	movs	r1, #0
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff45 	bl	8001924 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0xC0, address);//cerser
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	21c0      	movs	r1, #192	; 0xc0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff3f 	bl	8001924 <I2C_LCD_write_CMD>
	_12cdelay_ms(2);
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f7ff ff26 	bl	80018f8 <_12cdelay_ms>
	I2C_LCD_write_CMD(I2Cx,0x00, address);
 8001aac:	887b      	ldrh	r3, [r7, #2]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ff36 	bl	8001924 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0x10, address);//--- Clear LCD
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	461a      	mov	r2, r3
 8001abc:	2110      	movs	r1, #16
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff30 	bl	8001924 <I2C_LCD_write_CMD>
	_12cdelay_ms(30);
 8001ac4:	201e      	movs	r0, #30
 8001ac6:	f7ff ff17 	bl	80018f8 <_12cdelay_ms>
flag_init=1;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <I2C_LCD_Init+0xc0>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	02255100 	.word	0x02255100
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	200000a0 	.word	0x200000a0

08001ae4 <I2C_LCD_write_data>:
void I2C_LCD_write_data(I2C_TypeDef* I2Cx ,char data,uint16_t address){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]
 8001af0:	4613      	mov	r3, r2
 8001af2:	803b      	strh	r3, [r7, #0]

	unsigned char temp = 0x00;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
	uint8_t lcd = 0x0D;//1101  RS=1 RW=0 E=1 backlight =1
 8001af8:	230d      	movs	r3, #13
 8001afa:	73bb      	strb	r3, [r7, #14]
	temp = (data & 0xF0);
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f023 030f 	bic.w	r3, r3, #15
 8001b02:	73fb      	strb	r3, [r7, #15]
	lcd |= (temp| 0x04);
 8001b04:	7bba      	ldrb	r2, [r7, #14]
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	73bb      	strb	r3, [r7, #14]

	I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start)	;
 8001b14:	883a      	ldrh	r2, [r7, #0]
 8001b16:	f107 010e 	add.w	r1, r7, #14
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	4613      	mov	r3, r2
 8001b24:	2201      	movs	r2, #1
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f952 	bl	8001dd0 <I2C_Master_Send>

	_12cdelay_ms(1);
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f7ff fee3 	bl	80018f8 <_12cdelay_ms>
	lcd &= ~(0x04);
 8001b32:	7bbb      	ldrb	r3, [r7, #14]
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	73bb      	strb	r3, [r7, #14]
	I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);
 8001b3c:	883a      	ldrh	r2, [r7, #0]
 8001b3e:	f107 010e 	add.w	r1, r7, #14
 8001b42:	2300      	movs	r3, #0
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f93e 	bl	8001dd0 <I2C_Master_Send>
	_12cdelay_ms(1);
 8001b54:	2001      	movs	r0, #1
 8001b56:	f7ff fecf 	bl	80018f8 <_12cdelay_ms>


	temp = ((data & 0x0F)<<4);
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	73fb      	strb	r3, [r7, #15]
	lcd = 0x0D;//1101  RS=1 RW=0 E=1 backlight =1
 8001b60:	230d      	movs	r3, #13
 8001b62:	73bb      	strb	r3, [r7, #14]
	lcd |= (temp|0x04);
 8001b64:	7bba      	ldrb	r2, [r7, #14]
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	73bb      	strb	r3, [r7, #14]
	I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);
 8001b74:	883a      	ldrh	r2, [r7, #0]
 8001b76:	f107 010e 	add.w	r1, r7, #14
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9301      	str	r3, [sp, #4]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	4613      	mov	r3, r2
 8001b84:	2201      	movs	r2, #1
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f922 	bl	8001dd0 <I2C_Master_Send>
	_12cdelay_ms(1);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff feb3 	bl	80018f8 <_12cdelay_ms>
	lcd &= ~(0x04);//E=0
 8001b92:	7bbb      	ldrb	r3, [r7, #14]
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	73bb      	strb	r3, [r7, #14]
	I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);
 8001b9c:	883a      	ldrh	r2, [r7, #0]
 8001b9e:	f107 010e 	add.w	r1, r7, #14
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4613      	mov	r3, r2
 8001bac:	2201      	movs	r2, #1
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f90e 	bl	8001dd0 <I2C_Master_Send>
	_12cdelay_ms(5);
 8001bb4:	2005      	movs	r0, #5
 8001bb6:	f7ff fe9f 	bl	80018f8 <_12cdelay_ms>

}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <I2C_LCD_write_string>:
void I2C_LCD_write_string(I2C_TypeDef* I2Cx ,char* data,uint16_t address){
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	80fb      	strh	r3, [r7, #6]
	while((*data)!=0){
 8001bd0:	e009      	b.n	8001be6 <I2C_LCD_write_string+0x24>

		I2C_LCD_write_data(I2Cx, *data, address);
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	88fa      	ldrh	r2, [r7, #6]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f7ff ff82 	bl	8001ae4 <I2C_LCD_write_data>
		data++;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	3301      	adds	r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
	while((*data)!=0){
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f1      	bne.n	8001bd2 <I2C_LCD_write_string+0x10>
	}

}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <I2C_LCD_setcerser>:
void I2C_LCD_setcerser(I2C_TypeDef* I2Cx,uint16_t address,char ROW , char COL){
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	4608      	mov	r0, r1
 8001c00:	4611      	mov	r1, r2
 8001c02:	461a      	mov	r2, r3
 8001c04:	4603      	mov	r3, r0
 8001c06:	807b      	strh	r3, [r7, #2]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	707b      	strb	r3, [r7, #1]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	703b      	strb	r3, [r7, #0]
	volatile unsigned char location ;
	if(ROW<2 && COL<16){
 8001c10:	787b      	ldrb	r3, [r7, #1]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d80f      	bhi.n	8001c36 <I2C_LCD_setcerser+0x40>
 8001c16:	783b      	ldrb	r3, [r7, #0]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80c      	bhi.n	8001c36 <I2C_LCD_setcerser+0x40>
		location =(0x40 * ROW) + COL ;
 8001c1c:	787b      	ldrb	r3, [r7, #1]
 8001c1e:	019b      	lsls	r3, r3, #6
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	783b      	ldrb	r3, [r7, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	73fb      	strb	r3, [r7, #15]
		location |=(1<<7);
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	73fb      	strb	r3, [r7, #15]
	}

	I2C_LCD_write_CMD(I2Cx,location,address);
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fe70 	bl	8001924 <I2C_LCD_write_CMD>
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <I2C_LCD_write_FLOATnumber>:
void I2C_LCD_clear(I2C_TypeDef* I2Cx,uint16_t address){
	I2C_LCD_write_CMD(I2Cx, LCD_CLEAR_SCREEN, address);
}

void I2C_LCD_write_FLOATnumber(I2C_TypeDef* I2Cx,uint16_t address,float num,unsigned char digit){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	461a      	mov	r2, r3
 8001c58:	460b      	mov	r3, r1
 8001c5a:	817b      	strh	r3, [r7, #10]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	727b      	strb	r3, [r7, #9]
	char text[20];
	gcvt(num,digit,text);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7fe fbf3 	bl	800044c <__aeabi_f2d>
 8001c66:	7a7a      	ldrb	r2, [r7, #9]
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	f002 f82e 	bl	8003ccc <gcvt>
	I2C_LCD_write_string(I2Cx, text, address);
 8001c70:	897a      	ldrh	r2, [r7, #10]
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f7ff ffa2 	bl	8001bc2 <I2C_LCD_write_string>
}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <I2C_INIT>:
#include "STM32_I2C_DRIVER.h"
//SM 100K
//master only
//no stretch

void I2C_INIT(I2C_TypeDef* I2Cx,uint32_t APB_clock){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
	if(I2Cx==I2C1){
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a3a      	ldr	r2, [pc, #232]	; (8001d80 <I2C_INIT+0xf8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d116      	bne.n	8001cc8 <I2C_INIT+0x40>
		I2C1_Clock_Enable();
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <I2C_INIT+0xfc>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	4a39      	ldr	r2, [pc, #228]	; (8001d84 <I2C_INIT+0xfc>)
 8001ca0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ca4:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 8001ca6:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <I2C_INIT+0xfc>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	4a36      	ldr	r2, [pc, #216]	; (8001d84 <I2C_INIT+0xfc>)
 8001cac:	f043 0308 	orr.w	r3, r3, #8
 8001cb0:	6193      	str	r3, [r2, #24]
		//PB6 I2C SCL
		//PB7 IC2 SDA
		pinmode(GPIOB, pin6,GPIO_MODE_OUTPUT_AF_Open_drain_Speed10);
 8001cb2:	220d      	movs	r2, #13
 8001cb4:	2106      	movs	r1, #6
 8001cb6:	4834      	ldr	r0, [pc, #208]	; (8001d88 <I2C_INIT+0x100>)
 8001cb8:	f7ff fd18 	bl	80016ec <pinmode>
		pinmode(GPIOB, pin7,GPIO_MODE_OUTPUT_AF_Open_drain_Speed10);
 8001cbc:	220d      	movs	r2, #13
 8001cbe:	2107      	movs	r1, #7
 8001cc0:	4831      	ldr	r0, [pc, #196]	; (8001d88 <I2C_INIT+0x100>)
 8001cc2:	f7ff fd13 	bl	80016ec <pinmode>
 8001cc6:	e019      	b.n	8001cfc <I2C_INIT+0x74>

	}
	else if(I2Cx==I2C2){
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <I2C_INIT+0x104>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d115      	bne.n	8001cfc <I2C_INIT+0x74>
		I2C2_Clock_Enable();
 8001cd0:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <I2C_INIT+0xfc>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	4a2b      	ldr	r2, [pc, #172]	; (8001d84 <I2C_INIT+0xfc>)
 8001cd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cda:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <I2C_INIT+0xfc>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a28      	ldr	r2, [pc, #160]	; (8001d84 <I2C_INIT+0xfc>)
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	6193      	str	r3, [r2, #24]
		//PB10 I2C SCL
		//PB11 IC2 SDA
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_Open_drain_Speed10);
 8001ce8:	220d      	movs	r2, #13
 8001cea:	210a      	movs	r1, #10
 8001cec:	4826      	ldr	r0, [pc, #152]	; (8001d88 <I2C_INIT+0x100>)
 8001cee:	f7ff fcfd 	bl	80016ec <pinmode>
		pinmode(GPIOB, pin11,GPIO_MODE_OUTPUT_AF_Open_drain_Speed10);
 8001cf2:	220d      	movs	r2, #13
 8001cf4:	210b      	movs	r1, #11
 8001cf6:	4824      	ldr	r0, [pc, #144]	; (8001d88 <I2C_INIT+0x100>)
 8001cf8:	f7ff fcf8 	bl	80016ec <pinmode>
	}

	//• Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	//Bits 5:0 FREQ[5:0]: Peripheral clock frequency
	I2Cx->CR2 &=~(0b111111<<0);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |=((APB_clock/1000000)<<0);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4920      	ldr	r1, [pc, #128]	; (8001d90 <I2C_INIT+0x108>)
 8001d10:	fba1 1303 	umull	r1, r3, r1, r3
 8001d14:	0c9b      	lsrs	r3, r3, #18
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]
	//Bits 11:0 CCR[11:0]: Clock control register in Fm/Sm mode (Master mode)
	//• Configure the clock control registers
	I2Cx->CCR &=~(0b11111111111<<0);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d24:	f023 0307 	bic.w	r3, r3, #7
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	61d3      	str	r3, [r2, #28]
	I2Cx->CCR |=((APB_clock/1000)/(2*100));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	099b      	lsrs	r3, r3, #6
 8001d34:	4917      	ldr	r1, [pc, #92]	; (8001d94 <I2C_INIT+0x10c>)
 8001d36:	fba1 1303 	umull	r1, r3, r1, r3
 8001d3a:	099b      	lsrs	r3, r3, #6
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	61da      	str	r2, [r3, #28]
	//• Configure the rise time register
	//Bits 5:0 TRISE[5:0]: Maximum rise time in Fm/Sm mode (Master mode)
	I2Cx->TRISE &=(0b111111<<0);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	621a      	str	r2, [r3, #32]
	I2Cx->TRISE |=(((APB_clock/1000000)/2)+1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1a      	ldr	r2, [r3, #32]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <I2C_INIT+0x108>)
 8001d56:	fba1 1303 	umull	r1, r3, r1, r3
 8001d5a:	0cdb      	lsrs	r3, r3, #19
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	621a      	str	r2, [r3, #32]

	I2C_Acknowledge(I2Cx,ENABLE);
 8001d64:	2101      	movs	r1, #1
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f937 	bl	8001fda <I2C_Acknowledge>
	//• Program the I2C_CR1 register to enable the peripheral
	//Bit 0 PE: Peripheral enable
	I2Cx->CR1|=(1<<0);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f043 0201 	orr.w	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	601a      	str	r2, [r3, #0]

}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40005400 	.word	0x40005400
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010c00 	.word	0x40010c00
 8001d8c:	40005800 	.word	0x40005800
 8001d90:	431bde83 	.word	0x431bde83
 8001d94:	053e2d63 	.word	0x053e2d63

08001d98 <I2C_Start_PIT>:
void I2C_Start_PIT(I2C_TypeDef* I2Cx,Repeated_Start Start){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]

	if(Start !=RepeatedSart){
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d007      	beq.n	8001dba <I2C_Start_PIT+0x22>
		//check the buss
		while(I2C_GetFlagStatus(I2Cx,I2C_FLAG_BUSY));
 8001daa:	bf00      	nop
 8001dac:	2100      	movs	r1, #0
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f860 	bl	8001e74 <I2C_GetFlagStatus>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f8      	bne.n	8001dac <I2C_Start_PIT+0x14>

	}
	//Bit 8 START: Start generation
	I2Cx->CR1 |=(1<<8);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <I2C_Master_Send>:

void I2C_Master_Send(I2C_TypeDef* I2Cx,uint8_t* data, uint32_t dataLen,uint16_t devAdd,Stop_Condition Stop , Repeated_Start start){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	807b      	strh	r3, [r7, #2]
	int i=0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
	I2C_Start_PIT(I2Cx,start);//start
 8001de2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001de6:	4619      	mov	r1, r3
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff ffd5 	bl	8001d98 <I2C_Start_PIT>
	while(!I2C_GetFlagStatus(I2Cx, EV5));//Start condition generated.
 8001dee:	bf00      	nop
 8001df0:	2101      	movs	r1, #1
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f83e 	bl	8001e74 <I2C_GetFlagStatus>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f8      	beq.n	8001df0 <I2C_Master_Send+0x20>
	I2C_SEND_ADRRESS(I2Cx, devAdd, i2c_direction_Write);
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2200      	movs	r2, #0
 8001e04:	4619      	mov	r1, r3
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f8c4 	bl	8001f94 <I2C_SEND_ADRRESS>
	//2.Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while( !(I2C_GetFlagStatus( I2Cx, EV6)));
 8001e0c:	bf00      	nop
 8001e0e:	2102      	movs	r1, #2
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f82f 	bl	8001e74 <I2C_GetFlagStatus>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f8      	beq.n	8001e0e <I2C_Master_Send+0x3e>

	while( !(I2C_GetFlagStatus( I2Cx, MASTER_BYTE_TRANSMITING)));//Busy MSL TXE TRA
 8001e1c:	bf00      	nop
 8001e1e:	4914      	ldr	r1, [pc, #80]	; (8001e70 <I2C_Master_Send+0xa0>)
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f827 	bl	8001e74 <I2C_GetFlagStatus>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f8      	beq.n	8001e1e <I2C_Master_Send+0x4e>
	for(;i<dataLen;i++){
 8001e2c:	e011      	b.n	8001e52 <I2C_Master_Send+0x82>
		I2Cx->DR=data[i];
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	4413      	add	r3, r2
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
		while(!(I2C_GetFlagStatus( I2Cx, EV8)));
 8001e3c:	bf00      	nop
 8001e3e:	2103      	movs	r1, #3
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f817 	bl	8001e74 <I2C_GetFlagStatus>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f8      	beq.n	8001e3e <I2C_Master_Send+0x6e>
	for(;i<dataLen;i++){
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d8e9      	bhi.n	8001e2e <I2C_Master_Send+0x5e>
	}
	if(Stop == WithStop){
 8001e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <I2C_Master_Send+0x98>
		//Send Stop Condition
		I2C_Stop_PIT(I2Cx);
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f8aa 	bl	8001fbc <I2C_Stop_PIT>
	}

}
 8001e68:	bf00      	nop
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	00070080 	.word	0x00070080

08001e74 <I2C_GetFlagStatus>:
}



FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status Flag)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	FlagStatus bitstatus = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	77fb      	strb	r3, [r7, #31]
	volatile uint32_t dummy_Read;
	uint32_t flag1 = 0 ,flag2 =0 , lastevent =0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]


	switch(Flag)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d806      	bhi.n	8001ea2 <I2C_GetFlagStatus+0x2e>
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d235      	bcs.n	8001f04 <I2C_GetFlagStatus+0x90>
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d017      	beq.n	8001ecc <I2C_GetFlagStatus+0x58>
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d821      	bhi.n	8001ee4 <I2C_GetFlagStatus+0x70>
 8001ea0:	e007      	b.n	8001eb2 <I2C_GetFlagStatus+0x3e>
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d048      	beq.n	8001f38 <I2C_GetFlagStatus+0xc4>
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d339      	bcc.n	8001f1e <I2C_GetFlagStatus+0xaa>
 8001eaa:	4a39      	ldr	r2, [pc, #228]	; (8001f90 <I2C_GetFlagStatus+0x11c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d050      	beq.n	8001f52 <I2C_GetFlagStatus+0xde>
 8001eb0:	e067      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0).

		if(((I2Cx->SR2)>>1) & 1 )
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <I2C_GetFlagStatus+0x52>
			bitstatus = SET;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8001ec4:	e05d      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	77fb      	strb	r3, [r7, #31]
		break;
 8001eca:	e05a      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0		the interface is disabled (PE=0).

		if( (I2Cx->SR1>>0) & 1 )
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <I2C_GetFlagStatus+0x6a>
			bitstatus = SET;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8001edc:	e051      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	77fb      	strb	r3, [r7, #31]
		break;
 8001ee2:	e04e      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
		//			0: No end of address transmission
		//			1: End of address transmission
		//			– For 10-bit addressing, the bit is set after the ACK of the 2nd byte.
		//			– For 7-bit addressing, the bit is set after the ACK of the byte.
		//			Note: ADDR is not set after a NACK reception
		if( (I2Cx->SR1>>1) & 1 )
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <I2C_GetFlagStatus+0x84>
			bitstatus = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	77fb      	strb	r3, [r7, #31]
 8001ef6:	e001      	b.n	8001efc <I2C_GetFlagStatus+0x88>
		else
			bitstatus = RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77fb      	strb	r3, [r7, #31]
		dummy_Read = I2Cx->SR2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	60fb      	str	r3, [r7, #12]

		break;
 8001f02:	e03e      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
		//				– Cleared by software writing to the DR register or by hardware after a start or a stop condition
		//				or when PE=0.
		//				TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
		//				Note: TxE is not cleared by writing the first data being transmitted, or by writing data when
		//				BTF is set, as in both cases the data register is still empty
		if( (I2Cx->SR1>>7) & 1 )
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	09db      	lsrs	r3, r3, #7
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <I2C_GetFlagStatus+0xa4>
			bitstatus = SET;
 8001f12:	2301      	movs	r3, #1
 8001f14:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;


		break;
 8001f16:	e034      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	77fb      	strb	r3, [r7, #31]
		break;
 8001f1c:	e031      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
		//					– Cleared by software reading SR1 followed by either a read or write in the DR register or by
		//					hardware after a start or a stop condition in transmission or when PE=0.
		//					Note: The BTF bit is not set after a NACK reception
		//					The BTF bit is not set if next byte to be transmitted is the PEC (TRA=1 in I2C_SR2
		//					register and PEC=1 in I2C_CR1 register)
		if( (I2Cx->SR1>>2) & 1 )
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <I2C_GetFlagStatus+0xbe>
			bitstatus = SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;


		break;
 8001f30:	e027      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	77fb      	strb	r3, [r7, #31]
		break;
 8001f36:	e024      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
		//					– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		//					– Cleared by software reading or writing the DR register or by hardware when PE=0.
		//					RxNE is not set in case of ARLO event.
		//					Note: RxNE is not cleared by reading data when BTF is set, as the data register is still full

		if( (I2Cx->SR1>>6) & 1 )
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <I2C_GetFlagStatus+0xd8>
			bitstatus = SET;
 8001f46:	2301      	movs	r3, #1
 8001f48:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;


		break;
 8001f4a:	e01a      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	77fb      	strb	r3, [r7, #31]
		break;
 8001f50:	e017      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
	}
	case MASTER_BYTE_TRANSMITING:
	{

		/*Read The I2Cx Statu Register*/
		flag1 = I2Cx->SR1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	617b      	str	r3, [r7, #20]
		flag2 = flag2<<16;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	617b      	str	r3, [r7, #20]
		/*Get the last Event value from I2C Statu Register*/
		lastevent = (flag1 | flag2) & ((uint32_t) 0xffffffff);
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
		//Check whether lastevent contain THE I2C_EVENT
		if((lastevent & MASTER_BYTE_TRANSMITING) == MASTER_BYTE_TRANSMITING)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <I2C_GetFlagStatus+0x11c>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <I2C_GetFlagStatus+0x11c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d102      	bne.n	8001f7e <I2C_GetFlagStatus+0x10a>
			bitstatus = SET;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	77fb      	strb	r3, [r7, #31]
 8001f7c:	e001      	b.n	8001f82 <I2C_GetFlagStatus+0x10e>
		else
			bitstatus = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	77fb      	strb	r3, [r7, #31]
	}
	}
	return bitstatus;
 8001f82:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3724      	adds	r7, #36	; 0x24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	00070080 	.word	0x00070080

08001f94 <I2C_SEND_ADRRESS>:

void I2C_SEND_ADRRESS(I2C_TypeDef* I2Cx,uint8_t address,uint8_t i2c_direction){
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	70bb      	strb	r3, [r7, #2]

	I2Cx->DR = (address << 1 | i2c_direction);
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	005a      	lsls	r2, r3, #1
 8001fa8:	78bb      	ldrb	r3, [r7, #2]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	611a      	str	r2, [r3, #16]

}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <I2C_Stop_PIT>:
void I2C_Stop_PIT(I2C_TypeDef* I2Cx){
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	//	0: No Stop generation.
	//	1: Stop generation after the current byte transfer or after the current Start condition is sent.
	//	In Slave mode:
	//	0: No Stop generation.
	//	1: Release the SCL and SDA lines after the current byte transfer
	I2Cx->CR1 |= (1<<9);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	601a      	str	r2, [r3, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <I2C_Acknowledge>:

void I2C_Acknowledge(I2C_TypeDef *I2Cx,FunctionalState State)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70fb      	strb	r3, [r7, #3]
	//	Bit 10 ACK: Acknowledge enable
	//	This bit is set and cleared by software and cleared by hardware when PE=0.
	//	0: No acknowledge returned
	//	1: Acknowledge returned after a byte is received (matched address or data)

	if(State != DISABLE)
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <I2C_Acknowledge+0x20>
	{
		/*Generate Stop Condition*/
		I2Cx->CR1 |= (1<<10);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	601a      	str	r2, [r3, #0]
	else
	{
		/*Disable  Stop Condition Generation*/
		I2Cx->CR1 &= ~(1<<10);
	}
}
 8001ff8:	e005      	b.n	8002006 <I2C_Acknowledge+0x2c>
		I2Cx->CR1 &= ~(1<<10);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <PWM>:
//==================================== stepper motor
static uint32_t stepper_steps=0;
static uint8_t stepper_flage=0;
//===============================================================================================

void PWM(TIMERS_typeDef* TIMERx,uint32_t CH,uint32_t duty_cycle,uint32_t freq,uint32_t clk){
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]

	TIMERx->TIMx_CR1 &=~(1<<0);//Counter disabled
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 0201 	bic.w	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	601a      	str	r2, [r3, #0]


	char user_flage=1;
 800202a:	2301      	movs	r3, #1
 800202c:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 8002032:	2301      	movs	r3, #1
 8002034:	617b      	str	r3, [r7, #20]

	while(user_flage==1){
 8002036:	e011      	b.n	800205c <PWM+0x4c>
		user_top = (clk)/(freq * user_pre );
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	fb02 f303 	mul.w	r3, r2, r3
 8002040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800204e:	d303      	bcc.n	8002058 <PWM+0x48>
			user_pre+=2;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3302      	adds	r3, #2
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e001      	b.n	800205c <PWM+0x4c>
		}
		else{
			user_flage=0;
 8002058:	2300      	movs	r3, #0
 800205a:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 800205c:	7ffb      	ldrb	r3, [r7, #31]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d0ea      	beq.n	8002038 <PWM+0x28>
	}

	//====================TIM1===================


	if(TIMERx==TIM1){
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4a8e      	ldr	r2, [pc, #568]	; (80022a0 <PWM+0x290>)
 8002066:	4293      	cmp	r3, r2
 8002068:	f040 80d7 	bne.w	800221a <PWM+0x20a>
		TIMER1_CLOCK_Enable();//enable timer1 clock
 800206c:	4b8d      	ldr	r3, [pc, #564]	; (80022a4 <PWM+0x294>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a8c      	ldr	r2, [pc, #560]	; (80022a4 <PWM+0x294>)
 8002072:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002076:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();//enable porta clock
 8002078:	4b8a      	ldr	r3, [pc, #552]	; (80022a4 <PWM+0x294>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	4a89      	ldr	r2, [pc, #548]	; (80022a4 <PWM+0x294>)
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 8002084:	4b87      	ldr	r3, [pc, #540]	; (80022a4 <PWM+0x294>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a86      	ldr	r2, [pc, #536]	; (80022a4 <PWM+0x294>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6193      	str	r3, [r2, #24]
		if(CH==CH_1){
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d12d      	bne.n	80020f2 <PWM+0xe2>
			pinmode(GPIOA, pin8, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8002096:	220b      	movs	r2, #11
 8002098:	2108      	movs	r1, #8
 800209a:	4883      	ldr	r0, [pc, #524]	; (80022a8 <PWM+0x298>)
 800209c:	f7ff fb26 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3); //Output compare 1 preload enable
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f043 0208 	orr.w	r2, r3, #8
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0); // Capture/Compare 1 output enable
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);//110: PWM mode 1 - In upcounting, channel 1 is active
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	4a77      	ldr	r2, [pc, #476]	; (80022ac <PWM+0x29c>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	099a      	lsrs	r2, r3, #6
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_BDTR |=(1<<15); // Main output enable
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b11<<0);//Update interrupt enable Capture/Compare 1 interrupt enable
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f043 0203 	orr.w	r2, r3, #3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	e2f6      	b.n	80026e0 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d12d      	bne.n	8002154 <PWM+0x144>
			pinmode(GPIOA, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80020f8:	220b      	movs	r2, #11
 80020fa:	2109      	movs	r1, #9
 80020fc:	486a      	ldr	r0, [pc, #424]	; (80022a8 <PWM+0x298>)
 80020fe:	f7ff faf5 	bl	80016ec <pinmode>
			//pinmode(GPIOA, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	f043 0210 	orr.w	r2, r3, #16
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	4a5f      	ldr	r2, [pc, #380]	; (80022ac <PWM+0x29c>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	099a      	lsrs	r2, r3, #6
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_BDTR |=(1<<15);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b101<<0);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f043 0205 	orr.w	r2, r3, #5
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	e2c5      	b.n	80026e0 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d12d      	bne.n	80021b6 <PWM+0x1a6>
			pinmode(GPIOA, pin10, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800215a:	220b      	movs	r2, #11
 800215c:	210a      	movs	r1, #10
 800215e:	4852      	ldr	r0, [pc, #328]	; (80022a8 <PWM+0x298>)
 8002160:	f7ff fac4 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	f043 0208 	orr.w	r2, r3, #8
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	4a46      	ldr	r2, [pc, #280]	; (80022ac <PWM+0x29c>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	099a      	lsrs	r2, r3, #6
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_BDTR |=(1<<15);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b1001<<0);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f043 0209 	orr.w	r2, r3, #9
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	e294      	b.n	80026e0 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	f040 8291 	bne.w	80026e0 <PWM+0x6d0>
			pinmode(GPIOA, pin11, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80021be:	220b      	movs	r2, #11
 80021c0:	210b      	movs	r1, #11
 80021c2:	4839      	ldr	r0, [pc, #228]	; (80022a8 <PWM+0x298>)
 80021c4:	f7ff fa92 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	fb02 f303 	mul.w	r3, r2, r3
 80021f4:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <PWM+0x29c>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	099a      	lsrs	r2, r3, #6
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_BDTR |=(1<<15);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b10001<<0);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f043 0211 	orr.w	r2, r3, #17
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	e262      	b.n	80026e0 <PWM+0x6d0>
		}
	}

	//====================TIM2===================

	else if (TIMERx==TIM2){
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	f040 80c8 	bne.w	80023b4 <PWM+0x3a4>
		TIMER2_CLOCK_Enable();//enable timer2 clock
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <PWM+0x294>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	4a1e      	ldr	r2, [pc, #120]	; (80022a4 <PWM+0x294>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();//enable porta clock
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <PWM+0x294>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <PWM+0x294>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <PWM+0x294>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <PWM+0x294>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d130      	bne.n	80022b0 <PWM+0x2a0>
			pinmode(GPIOA, pin0, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800224e:	220b      	movs	r2, #11
 8002250:	2100      	movs	r1, #0
 8002252:	4815      	ldr	r0, [pc, #84]	; (80022a8 <PWM+0x298>)
 8002254:	f7ff fa4a 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f043 0208 	orr.w	r2, r3, #8
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f043 0201 	orr.w	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	4a09      	ldr	r2, [pc, #36]	; (80022ac <PWM+0x29c>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	099a      	lsrs	r2, r3, #6
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f043 0203 	orr.w	r2, r3, #3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	60da      	str	r2, [r3, #12]
 800229c:	e220      	b.n	80026e0 <PWM+0x6d0>
 800229e:	bf00      	nop
 80022a0:	40012c00 	.word	0x40012c00
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40010800 	.word	0x40010800
 80022ac:	10624dd3 	.word	0x10624dd3
		}
		else if(CH==CH_2){
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d127      	bne.n	8002306 <PWM+0x2f6>
			pinmode(GPIOA, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80022b6:	220b      	movs	r2, #11
 80022b8:	2101      	movs	r1, #1
 80022ba:	488d      	ldr	r0, [pc, #564]	; (80024f0 <PWM+0x4e0>)
 80022bc:	f7ff fa16 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f043 0210 	orr.w	r2, r3, #16
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	4a81      	ldr	r2, [pc, #516]	; (80024f4 <PWM+0x4e4>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	099a      	lsrs	r2, r3, #6
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f043 0205 	orr.w	r2, r3, #5
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	e1ec      	b.n	80026e0 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d127      	bne.n	800235c <PWM+0x34c>
			pinmode(GPIOA, pin2, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800230c:	220b      	movs	r2, #11
 800230e:	2102      	movs	r1, #2
 8002310:	4877      	ldr	r0, [pc, #476]	; (80024f0 <PWM+0x4e0>)
 8002312:	f7ff f9eb 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f043 0208 	orr.w	r2, r3, #8
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	4a6c      	ldr	r2, [pc, #432]	; (80024f4 <PWM+0x4e4>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	099a      	lsrs	r2, r3, #6
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f043 0209 	orr.w	r2, r3, #9
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	e1c1      	b.n	80026e0 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b04      	cmp	r3, #4
 8002360:	f040 81be 	bne.w	80026e0 <PWM+0x6d0>
			pinmode(GPIOA, pin3, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8002364:	220b      	movs	r2, #11
 8002366:	2103      	movs	r1, #3
 8002368:	4861      	ldr	r0, [pc, #388]	; (80024f0 <PWM+0x4e0>)
 800236a:	f7ff f9bf 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	4a56      	ldr	r2, [pc, #344]	; (80024f4 <PWM+0x4e4>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	099a      	lsrs	r2, r3, #6
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f043 0211 	orr.w	r2, r3, #17
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	e195      	b.n	80026e0 <PWM+0x6d0>
		}
	}
	//====================TIM3===================

	else if (TIMERx==TIM3){
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4a50      	ldr	r2, [pc, #320]	; (80024f8 <PWM+0x4e8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	f040 80cf 	bne.w	800255c <PWM+0x54c>
		TIMER3_CLOCK_Enable();//enable timer3 clock
 80023be:	4b4f      	ldr	r3, [pc, #316]	; (80024fc <PWM+0x4ec>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a4e      	ldr	r2, [pc, #312]	; (80024fc <PWM+0x4ec>)
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();//enable porta clock
 80023ca:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <PWM+0x4ec>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	4a4b      	ldr	r2, [pc, #300]	; (80024fc <PWM+0x4ec>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6193      	str	r3, [r2, #24]
		GPIOB_Clock_Enable();//enable porta clock
 80023d6:	4b49      	ldr	r3, [pc, #292]	; (80024fc <PWM+0x4ec>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4a48      	ldr	r2, [pc, #288]	; (80024fc <PWM+0x4ec>)
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 80023e2:	4b46      	ldr	r3, [pc, #280]	; (80024fc <PWM+0x4ec>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	4a45      	ldr	r2, [pc, #276]	; (80024fc <PWM+0x4ec>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d127      	bne.n	8002444 <PWM+0x434>
			pinmode(GPIOA, pin6, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80023f4:	220b      	movs	r2, #11
 80023f6:	2106      	movs	r1, #6
 80023f8:	483d      	ldr	r0, [pc, #244]	; (80024f0 <PWM+0x4e0>)
 80023fa:	f7ff f977 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f043 0208 	orr.w	r2, r3, #8
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	4a32      	ldr	r2, [pc, #200]	; (80024f4 <PWM+0x4e4>)
 800242c:	fba2 2303 	umull	r2, r3, r2, r3
 8002430:	099a      	lsrs	r2, r3, #6
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f043 0203 	orr.w	r2, r3, #3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	e14d      	b.n	80026e0 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d127      	bne.n	800249a <PWM+0x48a>
			pinmode(GPIOA, pin7, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800244a:	220b      	movs	r2, #11
 800244c:	2107      	movs	r1, #7
 800244e:	4828      	ldr	r0, [pc, #160]	; (80024f0 <PWM+0x4e0>)
 8002450:	f7ff f94c 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f043 0210 	orr.w	r2, r3, #16
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <PWM+0x4e4>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	099a      	lsrs	r2, r3, #6
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f043 0205 	orr.w	r2, r3, #5
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	e122      	b.n	80026e0 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d131      	bne.n	8002504 <PWM+0x4f4>
			pinmode(GPIOB, pin0, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80024a0:	220b      	movs	r2, #11
 80024a2:	2100      	movs	r1, #0
 80024a4:	4816      	ldr	r0, [pc, #88]	; (8002500 <PWM+0x4f0>)
 80024a6:	f7ff f921 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f043 0208 	orr.w	r2, r3, #8
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <PWM+0x4e4>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	099a      	lsrs	r2, r3, #6
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f043 0209 	orr.w	r2, r3, #9
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	e0f7      	b.n	80026e0 <PWM+0x6d0>
 80024f0:	40010800 	.word	0x40010800
 80024f4:	10624dd3 	.word	0x10624dd3
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40021000 	.word	0x40021000
 8002500:	40010c00 	.word	0x40010c00
		}
		else if(CH==CH_4){
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b04      	cmp	r3, #4
 8002508:	f040 80ea 	bne.w	80026e0 <PWM+0x6d0>
			pinmode(GPIOB, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800250c:	220b      	movs	r2, #11
 800250e:	2101      	movs	r1, #1
 8002510:	4882      	ldr	r0, [pc, #520]	; (800271c <PWM+0x70c>)
 8002512:	f7ff f8eb 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	4a77      	ldr	r2, [pc, #476]	; (8002720 <PWM+0x710>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	099a      	lsrs	r2, r3, #6
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f043 0211 	orr.w	r2, r3, #17
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	e0c1      	b.n	80026e0 <PWM+0x6d0>
	}


	//====================TIM4===================

	else if (TIMERx==TIM4){
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a71      	ldr	r2, [pc, #452]	; (8002724 <PWM+0x714>)
 8002560:	4293      	cmp	r3, r2
 8002562:	f040 80bd 	bne.w	80026e0 <PWM+0x6d0>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 8002566:	4b70      	ldr	r3, [pc, #448]	; (8002728 <PWM+0x718>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a6f      	ldr	r2, [pc, #444]	; (8002728 <PWM+0x718>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();//enable porta clock
 8002572:	4b6d      	ldr	r3, [pc, #436]	; (8002728 <PWM+0x718>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	4a6c      	ldr	r2, [pc, #432]	; (8002728 <PWM+0x718>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 800257e:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <PWM+0x718>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	4a69      	ldr	r2, [pc, #420]	; (8002728 <PWM+0x718>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d127      	bne.n	80025e0 <PWM+0x5d0>
			pinmode(GPIOB, pin6, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8002590:	220b      	movs	r2, #11
 8002592:	2106      	movs	r1, #6
 8002594:	4861      	ldr	r0, [pc, #388]	; (800271c <PWM+0x70c>)
 8002596:	f7ff f8a9 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f043 0208 	orr.w	r2, r3, #8
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f043 0201 	orr.w	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	4a56      	ldr	r2, [pc, #344]	; (8002720 <PWM+0x710>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	099a      	lsrs	r2, r3, #6
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f043 0203 	orr.w	r2, r3, #3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	e07f      	b.n	80026e0 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d127      	bne.n	8002636 <PWM+0x626>
			pinmode(GPIOB, pin7, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80025e6:	220b      	movs	r2, #11
 80025e8:	2107      	movs	r1, #7
 80025ea:	484c      	ldr	r0, [pc, #304]	; (800271c <PWM+0x70c>)
 80025ec:	f7ff f87e 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f043 0210 	orr.w	r2, r3, #16
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	4a40      	ldr	r2, [pc, #256]	; (8002720 <PWM+0x710>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	099a      	lsrs	r2, r3, #6
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f043 0205 	orr.w	r2, r3, #5
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	60da      	str	r2, [r3, #12]
 8002634:	e054      	b.n	80026e0 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d127      	bne.n	800268c <PWM+0x67c>
			pinmode(GPIOB, pin8, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800263c:	220b      	movs	r2, #11
 800263e:	2108      	movs	r1, #8
 8002640:	4836      	ldr	r0, [pc, #216]	; (800271c <PWM+0x70c>)
 8002642:	f7ff f853 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f043 0208 	orr.w	r2, r3, #8
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <PWM+0x710>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	099a      	lsrs	r2, r3, #6
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f043 0209 	orr.w	r2, r3, #9
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	e029      	b.n	80026e0 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b04      	cmp	r3, #4
 8002690:	d126      	bne.n	80026e0 <PWM+0x6d0>
			pinmode(GPIOB, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8002692:	220b      	movs	r2, #11
 8002694:	2109      	movs	r1, #9
 8002696:	4821      	ldr	r0, [pc, #132]	; (800271c <PWM+0x70c>)
 8002698:	f7ff f828 	bl	80016ec <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	4a15      	ldr	r2, [pc, #84]	; (8002720 <PWM+0x710>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	099a      	lsrs	r2, r3, #6
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f043 0211 	orr.w	r2, r3, #17
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	60da      	str	r2, [r3, #12]


	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->TIMx_CR1 |=(1<<7);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	601a      	str	r2, [r3, #0]


	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	TIMERx->TIMx_ARR=user_top;//frec peak value
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	62da      	str	r2, [r3, #44]	; 0x2c

	TIMERx->TIMx_PSC=(user_pre-1);//prescaller
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	1e5a      	subs	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	629a      	str	r2, [r3, #40]	; 0x28
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	TIMERx->TIMx_EGR |=(1<<0);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	615a      	str	r2, [r3, #20]

	TIMERx->TIMx_CR1 |=(1<<0);//enable the timer
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f043 0201 	orr.w	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	601a      	str	r2, [r3, #0]

}
 8002712:	bf00      	nop
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40010c00 	.word	0x40010c00
 8002720:	10624dd3 	.word	0x10624dd3
 8002724:	40000800 	.word	0x40000800
 8002728:	40021000 	.word	0x40021000

0800272c <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(float time,uint8_t U,uint32_t clk){
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b08b      	sub	sp, #44	; 0x2c
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	460b      	mov	r3, r1
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	72fb      	strb	r3, [r7, #11]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 800273a:	4b5b      	ldr	r3, [pc, #364]	; (80028a8 <delay+0x17c>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a5a      	ldr	r2, [pc, #360]	; (80028a8 <delay+0x17c>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8002746:	4b59      	ldr	r3, [pc, #356]	; (80028ac <delay+0x180>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b57      	ldr	r3, [pc, #348]	; (80028ac <delay+0x180>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8002756:	2301      	movs	r3, #1
 8002758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 8002760:	2301      	movs	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
	uint32_t unit =1000;
 8002764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002768:	61bb      	str	r3, [r7, #24]
	uint8_t  increase=2;
 800276a:	2302      	movs	r3, #2
 800276c:	75fb      	strb	r3, [r7, #23]

	if (U == 0){
 800276e:	7afb      	ldrb	r3, [r7, #11]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10f      	bne.n	8002794 <delay+0x68>
		unit = 1000;
 8002774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002778:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 100;
 800277a:	494d      	ldr	r1, [pc, #308]	; (80028b0 <delay+0x184>)
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7fe fc99 	bl	80010b4 <__aeabi_fcmpgt>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <delay+0x62>
 8002788:	2364      	movs	r3, #100	; 0x64
 800278a:	75fb      	strb	r3, [r7, #23]
 800278c:	e045      	b.n	800281a <delay+0xee>
		else increase = 10;
 800278e:	230a      	movs	r3, #10
 8002790:	75fb      	strb	r3, [r7, #23]
 8002792:	e042      	b.n	800281a <delay+0xee>
	}
	else {
		unit = 1000000;
 8002794:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <delay+0x188>)
 8002796:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 10;
 8002798:	4945      	ldr	r1, [pc, #276]	; (80028b0 <delay+0x184>)
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7fe fc8a 	bl	80010b4 <__aeabi_fcmpgt>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <delay+0x80>
 80027a6:	230a      	movs	r3, #10
 80027a8:	75fb      	strb	r3, [r7, #23]
 80027aa:	e036      	b.n	800281a <delay+0xee>
		else increase = 5;
 80027ac:	2305      	movs	r3, #5
 80027ae:	75fb      	strb	r3, [r7, #23]
	}

	while(user_flage==1){
 80027b0:	e033      	b.n	800281a <delay+0xee>
		user_top = (clk/unit*time)/( user_pre );
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fa66 	bl	8000c8c <__aeabi_ui2f>
 80027c0:	4603      	mov	r3, r0
 80027c2:	68f9      	ldr	r1, [r7, #12]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fab9 	bl	8000d3c <__aeabi_fmul>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461c      	mov	r4, r3
 80027ce:	69f8      	ldr	r0, [r7, #28]
 80027d0:	f7fe fa5c 	bl	8000c8c <__aeabi_ui2f>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4619      	mov	r1, r3
 80027d8:	4620      	mov	r0, r4
 80027da:	f7fe fb63 	bl	8000ea4 <__aeabi_fdiv>
 80027de:	4603      	mov	r3, r0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fc71 	bl	80010c8 <__aeabi_f2uiz>
 80027e6:	4603      	mov	r3, r0
 80027e8:	623b      	str	r3, [r7, #32]
		if(user_top>=32000){
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80027f0:	d310      	bcc.n	8002814 <delay+0xe8>

			if(user_pre>65530){
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d906      	bls.n	800280a <delay+0xde>
				user_pre=65530;
 80027fc:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8002800:	61fb      	str	r3, [r7, #28]
				user_flage=0;
 8002802:	2300      	movs	r3, #0
 8002804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002808:	e007      	b.n	800281a <delay+0xee>
			}
			else user_pre+=increase;
 800280a:	7dfb      	ldrb	r3, [r7, #23]
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	e002      	b.n	800281a <delay+0xee>

		}
		else{
			user_flage=0;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(user_flage==1){
 800281a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800281e:	2b01      	cmp	r3, #1
 8002820:	d0c7      	beq.n	80027b2 <delay+0x86>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8002822:	4b22      	ldr	r3, [pc, #136]	; (80028ac <delay+0x180>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b20      	ldr	r3, [pc, #128]	; (80028ac <delay+0x180>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 8002832:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <delay+0x180>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <delay+0x180>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0204 	orr.w	r2, r2, #4
 8002840:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <delay+0x180>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <delay+0x180>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <delay+0x180>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6a3a      	ldr	r2, [r7, #32]
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 800285a:	4b14      	ldr	r3, [pc, #80]	; (80028ac <delay+0x180>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	3a01      	subs	r2, #1
 8002862:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <delay+0x180>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <delay+0x180>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <delay+0x180>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <delay+0x180>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <delay+0x18c>)
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <delay+0x190>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <delay+0x190>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002894:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 8002896:	bf00      	nop
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <delay+0x18c>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1fb      	bne.n	8002898 <delay+0x16c>

	}
}
 80028a0:	bf00      	nop
 80028a2:	372c      	adds	r7, #44	; 0x2c
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd90      	pop	{r4, r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	2000001c 	.word	0x2000001c
 80028b0:	453b8000 	.word	0x453b8000
 80028b4:	000f4240 	.word	0x000f4240
 80028b8:	20000018 	.word	0x20000018
 80028bc:	e000e100 	.word	0xe000e100

080028c0 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 80028ce:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <SPWM_timer_INIT+0x100>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <SPWM_timer_INIT+0x100>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d12f      	bne.n	8002944 <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 80028e4:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <SPWM_timer_INIT+0x100>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	4b35      	ldr	r3, [pc, #212]	; (80029c0 <SPWM_timer_INIT+0x100>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f2:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <SPWM_timer_INIT+0x100>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <SPWM_timer_INIT+0x100>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002902:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8002904:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <SPWM_timer_INIT+0x100>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <SPWM_timer_INIT+0x100>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0208 	orr.w	r2, r2, #8
 8002912:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <SPWM_timer_INIT+0x100>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <SPWM_timer_INIT+0x100>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002922:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8002924:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <SPWM_timer_INIT+0x100>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6a1a      	ldr	r2, [r3, #32]
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <SPWM_timer_INIT+0x100>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0210 	orr.w	r2, r2, #16
 8002932:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8002934:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <SPWM_timer_INIT+0x100>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6a1a      	ldr	r2, [r3, #32]
 800293a:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <SPWM_timer_INIT+0x100>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 8002944:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <SPWM_timer_INIT+0x100>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <SPWM_timer_INIT+0x100>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002952:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <SPWM_timer_INIT+0x100>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <SPWM_timer_INIT+0x100>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <SPWM_timer_INIT+0x100>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <SPWM_timer_INIT+0x100>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <SPWM_timer_INIT+0x100>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <SPWM_timer_INIT+0x100>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002982:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <SPWM_timer_INIT+0x100>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <SPWM_timer_INIT+0x100>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <SPWM_timer_INIT+0x100>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <SPWM_timer_INIT+0x100>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <SPWM_timer_INIT+0x100>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <SPWM_timer_INIT+0x100>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000000 	.word	0x20000000

080029c4 <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <TIM2_IRQHandler+0x34>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <TIM2_IRQHandler+0x34>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <TIM2_IRQHandler+0x38>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <TIM2_IRQHandler+0x34>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <TIM2_IRQHandler+0x34>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	2000001c 	.word	0x2000001c
 80029fc:	20000018 	.word	0x20000018

08002a00 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <TIM3_IRQHandler+0x6c>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d119      	bne.n	8002a40 <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 8002a0c:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <TIM3_IRQHandler+0x70>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <TIM3_IRQHandler+0x70>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 8002a18:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <TIM3_IRQHandler+0x74>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <TIM3_IRQHandler+0x74>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <TIM3_IRQHandler+0x74>)
 8002a28:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 8002a2a:	e01c      	b.n	8002a66 <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <TIM3_IRQHandler+0x6c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <TIM3_IRQHandler+0x70>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <TIM3_IRQHandler+0x70>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6013      	str	r3, [r2, #0]
}
 8002a3e:	e012      	b.n	8002a66 <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8002a40:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <TIM3_IRQHandler+0x78>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <TIM3_IRQHandler+0x78>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <TIM3_IRQHandler+0x78>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <TIM3_IRQHandler+0x78>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <TIM3_IRQHandler+0x7c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4798      	blx	r3
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200000ac 	.word	0x200000ac
 8002a70:	40000400 	.word	0x40000400
 8002a74:	200000a8 	.word	0x200000a8
 8002a78:	20000444 	.word	0x20000444
 8002a7c:	20000438 	.word	0x20000438

08002a80 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <TIM4_IRQHandler+0x24>)
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	4a06      	ldr	r2, [pc, #24]	; (8002aa4 <TIM4_IRQHandler+0x24>)
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	6113      	str	r3, [r2, #16]
	overflowtims++;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <TIM4_IRQHandler+0x28>)
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <TIM4_IRQHandler+0x28>)
 8002a9a:	801a      	strh	r2, [r3, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	200000a6 	.word	0x200000a6

08002aac <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 8002ab0:	4b5d      	ldr	r3, [pc, #372]	; (8002c28 <TIM1_UP_IRQHandler+0x17c>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b5d      	ldr	r3, [pc, #372]	; (8002c2c <TIM1_UP_IRQHandler+0x180>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d911      	bls.n	8002ae0 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 8002abc:	4b5c      	ldr	r3, [pc, #368]	; (8002c30 <TIM1_UP_IRQHandler+0x184>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]
		flage1=0;
 8002ac2:	4b5c      	ldr	r3, [pc, #368]	; (8002c34 <TIM1_UP_IRQHandler+0x188>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 8002ac8:	4b58      	ldr	r3, [pc, #352]	; (8002c2c <TIM1_UP_IRQHandler+0x180>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a5a      	ldr	r2, [pc, #360]	; (8002c38 <TIM1_UP_IRQHandler+0x18c>)
 8002ace:	7812      	ldrb	r2, [r2, #0]
 8002ad0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ad4:	4b55      	ldr	r3, [pc, #340]	; (8002c2c <TIM1_UP_IRQHandler+0x180>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	4a53      	ldr	r2, [pc, #332]	; (8002c28 <TIM1_UP_IRQHandler+0x17c>)
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e018      	b.n	8002b12 <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 8002ae0:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <TIM1_UP_IRQHandler+0x17c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b63      	cmp	r3, #99	; 0x63
 8002ae6:	d814      	bhi.n	8002b12 <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 8002ae8:	4b51      	ldr	r3, [pc, #324]	; (8002c30 <TIM1_UP_IRQHandler+0x184>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
		flage1=1;
 8002aee:	4b51      	ldr	r3, [pc, #324]	; (8002c34 <TIM1_UP_IRQHandler+0x188>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 8002af4:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <TIM1_UP_IRQHandler+0x190>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	f083 0301 	eor.w	r3, r3, #1
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4b4f      	ldr	r3, [pc, #316]	; (8002c3c <TIM1_UP_IRQHandler+0x190>)
 8002b00:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 8002b02:	4b4a      	ldr	r3, [pc, #296]	; (8002c2c <TIM1_UP_IRQHandler+0x180>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a4c      	ldr	r2, [pc, #304]	; (8002c38 <TIM1_UP_IRQHandler+0x18c>)
 8002b08:	7812      	ldrb	r2, [r2, #0]
 8002b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b0e:	4a46      	ldr	r2, [pc, #280]	; (8002c28 <TIM1_UP_IRQHandler+0x17c>)
 8002b10:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 8002b12:	4b4a      	ldr	r3, [pc, #296]	; (8002c3c <TIM1_UP_IRQHandler+0x190>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d110      	bne.n	8002b3c <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 8002b1a:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <TIM1_UP_IRQHandler+0x194>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6a1a      	ldr	r2, [r3, #32]
 8002b20:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <TIM1_UP_IRQHandler+0x194>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 8002b2a:	4b45      	ldr	r3, [pc, #276]	; (8002c40 <TIM1_UP_IRQHandler+0x194>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6a1a      	ldr	r2, [r3, #32]
 8002b30:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <TIM1_UP_IRQHandler+0x194>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0210 	orr.w	r2, r2, #16
 8002b38:	621a      	str	r2, [r3, #32]
 8002b3a:	e013      	b.n	8002b64 <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 8002b3c:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <TIM1_UP_IRQHandler+0x190>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10f      	bne.n	8002b64 <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 8002b44:	4b3e      	ldr	r3, [pc, #248]	; (8002c40 <TIM1_UP_IRQHandler+0x194>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6a1a      	ldr	r2, [r3, #32]
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	; (8002c40 <TIM1_UP_IRQHandler+0x194>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0210 	bic.w	r2, r2, #16
 8002b52:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 8002b54:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <TIM1_UP_IRQHandler+0x194>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6a1a      	ldr	r2, [r3, #32]
 8002b5a:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <TIM1_UP_IRQHandler+0x194>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 8002b64:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <TIM1_UP_IRQHandler+0x188>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d11c      	bne.n	8002ba6 <TIM1_UP_IRQHandler+0xfa>
 8002b6c:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <TIM1_UP_IRQHandler+0x184>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d118      	bne.n	8002ba6 <TIM1_UP_IRQHandler+0xfa>
		top=c;
 8002b74:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <TIM1_UP_IRQHandler+0x198>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <TIM1_UP_IRQHandler+0x180>)
 8002b7a:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8002b7c:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <TIM1_UP_IRQHandler+0x19c>)
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <TIM1_UP_IRQHandler+0x17c>)
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <TIM1_UP_IRQHandler+0x180>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f7ff fe99 	bl	80028c0 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 8002b8e:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <TIM1_UP_IRQHandler+0x180>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a29      	ldr	r2, [pc, #164]	; (8002c38 <TIM1_UP_IRQHandler+0x18c>)
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b9a:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <TIM1_UP_IRQHandler+0x17c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a21      	ldr	r2, [pc, #132]	; (8002c28 <TIM1_UP_IRQHandler+0x17c>)
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	e035      	b.n	8002c12 <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 8002ba6:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <TIM1_UP_IRQHandler+0x184>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d129      	bne.n	8002c02 <TIM1_UP_IRQHandler+0x156>
 8002bae:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <TIM1_UP_IRQHandler+0x188>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d125      	bne.n	8002c02 <TIM1_UP_IRQHandler+0x156>
		top=c;
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <TIM1_UP_IRQHandler+0x198>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <TIM1_UP_IRQHandler+0x180>)
 8002bbc:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <TIM1_UP_IRQHandler+0x17c>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <TIM1_UP_IRQHandler+0x180>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	491c      	ldr	r1, [pc, #112]	; (8002c38 <TIM1_UP_IRQHandler+0x18c>)
 8002bc8:	7809      	ldrb	r1, [r1, #0]
 8002bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <TIM1_UP_IRQHandler+0x17c>)
 8002bd2:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <TIM1_UP_IRQHandler+0x19c>)
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <TIM1_UP_IRQHandler+0x17c>)
 8002bda:	6819      	ldr	r1, [r3, #0]
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <TIM1_UP_IRQHandler+0x180>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2301      	movs	r3, #1
 8002be2:	f7ff fe6d 	bl	80028c0 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <TIM1_UP_IRQHandler+0x180>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <TIM1_UP_IRQHandler+0x18c>)
 8002bec:	7812      	ldrb	r2, [r2, #0]
 8002bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <TIM1_UP_IRQHandler+0x17c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d10b      	bne.n	8002c12 <TIM1_UP_IRQHandler+0x166>
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <TIM1_UP_IRQHandler+0x17c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	e007      	b.n	8002c12 <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 8002c02:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <TIM1_UP_IRQHandler+0x194>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <TIM1_UP_IRQHandler+0x194>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0201 	bic.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <TIM1_UP_IRQHandler+0x194>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <TIM1_UP_IRQHandler+0x194>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	611a      	str	r2, [r3, #16]
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000014 	.word	0x20000014
 8002c2c:	20000008 	.word	0x20000008
 8002c30:	200000a4 	.word	0x200000a4
 8002c34:	20000004 	.word	0x20000004
 8002c38:	20000440 	.word	0x20000440
 8002c3c:	20000005 	.word	0x20000005
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20000010 	.word	0x20000010
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <MCAL_speed_init>:
#include "stm32_speed_DRIVER.h"
#define FLASH_BASE_ADDR     0x40022000
#define FLASH_ACR_OFFSET    0x00
#define FLASH_ACR          (*(volatile unsigned int*)(FLASH_BASE_ADDR + FLASH_ACR_OFFSET))
#define FLASH_ACR_LATENCY_Pos 0
void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	460a      	mov	r2, r1
 8002c56:	71fb      	strb	r3, [r7, #7]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d13a      	bne.n	8002cd8 <MCAL_speed_init+0x8c>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 8002c62:	79bb      	ldrb	r3, [r7, #6]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f040 80cc 	bne.w	8002e02 <MCAL_speed_init+0x1b6>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 8002c6a:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4a67      	ldr	r2, [pc, #412]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c74:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4a64      	ldr	r2, [pc, #400]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002c7c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8002c80:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 8002c82:	4b62      	ldr	r3, [pc, #392]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4a61      	ldr	r2, [pc, #388]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002c88:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002c8c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8002c8e:	4b5f      	ldr	r3, [pc, #380]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a5e      	ldr	r2, [pc, #376]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c98:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 8002c9a:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a5b      	ldr	r2, [pc, #364]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002ca0:	f023 0303 	bic.w	r3, r3, #3
 8002ca4:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8002ca6:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4a58      	ldr	r2, [pc, #352]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 8002cb2:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a55      	ldr	r2, [pc, #340]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002cb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cbc:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 8002cbe:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002cc4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002cc8:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 8002cca:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4a4f      	ldr	r2, [pc, #316]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002cd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cd4:	6053      	str	r3, [r2, #4]

		}
	}


}
 8002cd6:	e094      	b.n	8002e02 <MCAL_speed_init+0x1b6>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 8002cd8:	79bb      	ldrb	r3, [r7, #6]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d150      	bne.n	8002d80 <MCAL_speed_init+0x134>
			RCC->RCC_CR |= (1 << 16);
 8002cde:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a4a      	ldr	r2, [pc, #296]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 8002cea:	bf00      	nop
 8002cec:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f9      	beq.n	8002cec <MCAL_speed_init+0xa0>
			RCC->RCC_CFGR|=(1<<16);
 8002cf8:	4b44      	ldr	r3, [pc, #272]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a43      	ldr	r2, [pc, #268]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d02:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8002d04:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a40      	ldr	r2, [pc, #256]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d0a:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002d0e:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8002d10:	4b3e      	ldr	r3, [pc, #248]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a3d      	ldr	r2, [pc, #244]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 8002d1c:	bf00      	nop
 8002d1e:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f9      	beq.n	8002d1e <MCAL_speed_init+0xd2>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 8002d2a:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <MCAL_speed_init+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a38      	ldr	r2, [pc, #224]	; (8002e10 <MCAL_speed_init+0x1c4>)
 8002d30:	f023 0307 	bic.w	r3, r3, #7
 8002d34:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 8002d36:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <MCAL_speed_init+0x1c4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a35      	ldr	r2, [pc, #212]	; (8002e10 <MCAL_speed_init+0x1c4>)
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8002d42:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d48:	f023 0303 	bic.w	r3, r3, #3
 8002d4c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8002d4e:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4a2e      	ldr	r2, [pc, #184]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 8002d5a:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d64:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8002d66:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4a28      	ldr	r2, [pc, #160]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d6c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002d70:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4a25      	ldr	r2, [pc, #148]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d7c:	6053      	str	r3, [r2, #4]
}
 8002d7e:	e040      	b.n	8002e02 <MCAL_speed_init+0x1b6>
		else if (mood==mood_FAST_MOOD_72MHzCORE72MHzpref){
 8002d80:	79bb      	ldrb	r3, [r7, #6]
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d13d      	bne.n	8002e02 <MCAL_speed_init+0x1b6>
			RCC->RCC_CR |= (1 << 16);
 8002d86:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a20      	ldr	r2, [pc, #128]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 8002d92:	bf00      	nop
 8002d94:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f9      	beq.n	8002d94 <MCAL_speed_init+0x148>
			RCC->RCC_CFGR|=(1<<16);
 8002da0:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002daa:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8002dac:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a16      	ldr	r2, [pc, #88]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002db2:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002db6:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8002db8:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a13      	ldr	r2, [pc, #76]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 8002dc4:	bf00      	nop
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f9      	beq.n	8002dc6 <MCAL_speed_init+0x17a>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <MCAL_speed_init+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <MCAL_speed_init+0x1c4>)
 8002dd8:	f023 0307 	bic.w	r3, r3, #7
 8002ddc:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <MCAL_speed_init+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a0b      	ldr	r2, [pc, #44]	; (8002e10 <MCAL_speed_init+0x1c4>)
 8002de4:	f043 0302 	orr.w	r3, r3, #2
 8002de8:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8002dea:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4a07      	ldr	r2, [pc, #28]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002df0:	f023 0303 	bic.w	r3, r3, #3
 8002df4:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <MCAL_speed_init+0x1c0>)
 8002dfc:	f043 0302 	orr.w	r3, r3, #2
 8002e00:	6053      	str	r3, [r2, #4]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40022000 	.word	0x40022000

08002e14 <ADC_INIT>:
#include "stm32f103c6_ADC.h"


uint8_t flag_ADC_INIT=0;

void ADC_INIT(ADC_typeDef* ADCx,uint8_t ADC_STATE_){
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	70fb      	strb	r3, [r7, #3]

	if(ADC_STATE_==ADC_STATE_START){
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d132      	bne.n	8002e8c <ADC_INIT+0x78>
		if(ADCx==ADC1){
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <ADC_INIT+0xac>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d106      	bne.n	8002e3c <ADC_INIT+0x28>
			ADC1_Clock_Enable();
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <ADC_INIT+0xb0>)
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <ADC_INIT+0xb0>)
 8002e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e38:	6193      	str	r3, [r2, #24]
 8002e3a:	e009      	b.n	8002e50 <ADC_INIT+0x3c>
		}
		else if(ADCx==ADC2){
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <ADC_INIT+0xb4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d105      	bne.n	8002e50 <ADC_INIT+0x3c>
			ADC2_Clock_Enable();
 8002e44:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <ADC_INIT+0xb0>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <ADC_INIT+0xb0>)
 8002e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e4e:	6193      	str	r3, [r2, #24]
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
		//		Bit 1 CONT: Continuous conversion
		//		This bit is set and cleared by software. If set conversion takes place continuously till this bit is
		//		reset.
		//		0: Single conversion mode
		//		1: Continuous conversion mode
		ADCx->ADC_CR2 &=~(1<<1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 0202 	bic.w	r2, r3, #2
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]
		//		Bit 2 CAL: A/D Calibration
		//		This bit is set by software to start the calibration. It is reset by hardware after calibration is
		//		complete.
		//		0: Calibration completed
		//		1: Enable calibratio
		ADCx->ADC_CR2 |=(1<<2);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f043 0204 	orr.w	r2, r3, #4
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	609a      	str	r2, [r3, #8]
		while(((ADCx->ADC_CR2>>2)&1)){};
 8002e74:	bf00      	nop
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f8      	bne.n	8002e76 <ADC_INIT+0x62>


		flag_ADC_INIT=1;
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <ADC_INIT+0xb8>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
		ADC2_Clock_DESABLE();
		flag_ADC_INIT=0;
	}


}
 8002e8a:	e014      	b.n	8002eb6 <ADC_INIT+0xa2>
		ADCx->ADC_CR2 &=~(1<<0);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 0201 	bic.w	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]
		ADC1_Clock_DESABLE();
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <ADC_INIT+0xb0>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <ADC_INIT+0xb0>)
 8002e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea2:	60d3      	str	r3, [r2, #12]
		ADC2_Clock_DESABLE();
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <ADC_INIT+0xb0>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a06      	ldr	r2, [pc, #24]	; (8002ec4 <ADC_INIT+0xb0>)
 8002eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eae:	60d3      	str	r3, [r2, #12]
		flag_ADC_INIT=0;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <ADC_INIT+0xb8>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	40012400 	.word	0x40012400
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40012800 	.word	0x40012800
 8002ecc:	200000ad 	.word	0x200000ad

08002ed0 <ADC_READ>:





uint16_t ADC_READ(ADC_typeDef* ADCx,uint8_t ADC_pin){
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
	if(flag_ADC_INIT){
 8002edc:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <ADC_READ+0x98>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d03b      	beq.n	8002f5c <ADC_READ+0x8c>

		if(ADC_pin<0b0111)
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d807      	bhi.n	8002efa <ADC_READ+0x2a>
			pinmode(GPIOA, ADC_pin, GPIO_MODE_ANALOG);
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	481e      	ldr	r0, [pc, #120]	; (8002f6c <ADC_READ+0x9c>)
 8002ef4:	f7fe fbfa 	bl	80016ec <pinmode>
 8002ef8:	e006      	b.n	8002f08 <ADC_READ+0x38>
		else
			pinmode(GPIOB, ADC_pin, GPIO_MODE_ANALOG);
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2200      	movs	r2, #0
 8002f00:	4619      	mov	r1, r3
 8002f02:	481b      	ldr	r0, [pc, #108]	; (8002f70 <ADC_READ+0xa0>)
 8002f04:	f7fe fbf2 	bl	80016ec <pinmode>

		ADCx->ADC_CR2=0;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
		ADCx->ADC_SQR3 =0;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	635a      	str	r2, [r3, #52]	; 0x34

		//Bits 4:0 SQ1[4:0]: first conversion in regular sequence
		ADCx->ADC_SQR3 |=(ADC_pin << 0);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	635a      	str	r2, [r3, #52]	; 0x34
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
		ADCx->ADC_CR2 |=(1<<0);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	609a      	str	r2, [r3, #8]
		//		This bit is set by software to start conversion and cleared by hardware as soon as
		//		conversion starts. It starts a conversion of a group of regular channels if SWSTART is
		//		selected as trigger event by the EXTSEL[2:0] bits.
		//		0: Reset state
		//		1: Starts conversion of regular channels
		ADCx->ADC_CR2 |=(1<<22);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	609a      	str	r2, [r3, #8]
		//		Bit 1 EOC: End of conversion
		//		This bit is set by hardware at the end of a group channel conversion (regular or injected). It is
		//		cleared by software or by reading the ADC_DR.
		//		0: Conversion is not complete
		//		1: Conversion complete
		while(! ((ADCx->ADC_SR>>1)&1) ){};
 8002f44:	bf00      	nop
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f8      	beq.n	8002f46 <ADC_READ+0x76>

		return((uint16_t)ADCx->ADC_DR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	e000      	b.n	8002f5e <ADC_READ+0x8e>

	}
	else{
		return 0;
 8002f5c:	2300      	movs	r3, #0
	}


}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	200000ad 	.word	0x200000ad
 8002f6c:	40010800 	.word	0x40010800
 8002f70:	40010c00 	.word	0x40010c00

08002f74 <EXTI0_IRQHandler>:
	Enable_NVIC(pin);
}



void EXTI0_IRQHandler(void){
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <EXTI0_IRQHandler+0x20>)
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	4a05      	ldr	r2, [pc, #20]	; (8002f94 <EXTI0_IRQHandler+0x20>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0](ARR_INTERRUPT_TRACK,0);
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <EXTI0_IRQHandler+0x24>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4804      	ldr	r0, [pc, #16]	; (8002f9c <EXTI0_IRQHandler+0x28>)
 8002f8c:	4798      	blx	r3
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40010400 	.word	0x40010400
 8002f98:	20000448 	.word	0x20000448
 8002f9c:	20000484 	.word	0x20000484

08002fa0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <EXTI1_IRQHandler+0x20>)
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <EXTI1_IRQHandler+0x20>)
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1](ARR_INTERRUPT_TRACK,1);
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <EXTI1_IRQHandler+0x24>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4804      	ldr	r0, [pc, #16]	; (8002fc8 <EXTI1_IRQHandler+0x28>)
 8002fb8:	4798      	blx	r3

}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40010400 	.word	0x40010400
 8002fc4:	20000448 	.word	0x20000448
 8002fc8:	20000484 	.word	0x20000484

08002fcc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <EXTI2_IRQHandler+0x20>)
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	4a05      	ldr	r2, [pc, #20]	; (8002fec <EXTI2_IRQHandler+0x20>)
 8002fd6:	f043 0304 	orr.w	r3, r3, #4
 8002fda:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2](ARR_INTERRUPT_TRACK,2);
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <EXTI2_IRQHandler+0x24>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	4804      	ldr	r0, [pc, #16]	; (8002ff4 <EXTI2_IRQHandler+0x28>)
 8002fe4:	4798      	blx	r3
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40010400 	.word	0x40010400
 8002ff0:	20000448 	.word	0x20000448
 8002ff4:	20000484 	.word	0x20000484

08002ff8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <EXTI3_IRQHandler+0x20>)
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	4a05      	ldr	r2, [pc, #20]	; (8003018 <EXTI3_IRQHandler+0x20>)
 8003002:	f043 0308 	orr.w	r3, r3, #8
 8003006:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3](ARR_INTERRUPT_TRACK,3);
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <EXTI3_IRQHandler+0x24>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2103      	movs	r1, #3
 800300e:	4804      	ldr	r0, [pc, #16]	; (8003020 <EXTI3_IRQHandler+0x28>)
 8003010:	4798      	blx	r3
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40010400 	.word	0x40010400
 800301c:	20000448 	.word	0x20000448
 8003020:	20000484 	.word	0x20000484

08003024 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <EXTI4_IRQHandler+0x20>)
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	4a05      	ldr	r2, [pc, #20]	; (8003044 <EXTI4_IRQHandler+0x20>)
 800302e:	f043 0310 	orr.w	r3, r3, #16
 8003032:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4](ARR_INTERRUPT_TRACK,4);
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <EXTI4_IRQHandler+0x24>)
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2104      	movs	r1, #4
 800303a:	4804      	ldr	r0, [pc, #16]	; (800304c <EXTI4_IRQHandler+0x28>)
 800303c:	4798      	blx	r3
}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40010400 	.word	0x40010400
 8003048:	20000448 	.word	0x20000448
 800304c:	20000484 	.word	0x20000484

08003050 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5](ARR_INTERRUPT_TRACK,5);  }
 8003054:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <EXTI9_5_IRQHandler+0x26>
 8003060:	4b28      	ldr	r3, [pc, #160]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	4a27      	ldr	r2, [pc, #156]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 8003066:	f043 0320 	orr.w	r3, r3, #32
 800306a:	6153      	str	r3, [r2, #20]
 800306c:	4b26      	ldr	r3, [pc, #152]	; (8003108 <EXTI9_5_IRQHandler+0xb8>)
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	2105      	movs	r1, #5
 8003072:	4826      	ldr	r0, [pc, #152]	; (800310c <EXTI9_5_IRQHandler+0xbc>)
 8003074:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6](ARR_INTERRUPT_TRACK,6);  }
 8003076:	4b23      	ldr	r3, [pc, #140]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <EXTI9_5_IRQHandler+0x48>
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	4a1f      	ldr	r2, [pc, #124]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 8003088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800308c:	6153      	str	r3, [r2, #20]
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <EXTI9_5_IRQHandler+0xb8>)
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2106      	movs	r1, #6
 8003094:	481d      	ldr	r0, [pc, #116]	; (800310c <EXTI9_5_IRQHandler+0xbc>)
 8003096:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7](ARR_INTERRUPT_TRACK,7);  }
 8003098:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <EXTI9_5_IRQHandler+0x6a>
 80030a4:	4b17      	ldr	r3, [pc, #92]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	4a16      	ldr	r2, [pc, #88]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 80030aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ae:	6153      	str	r3, [r2, #20]
 80030b0:	4b15      	ldr	r3, [pc, #84]	; (8003108 <EXTI9_5_IRQHandler+0xb8>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2107      	movs	r1, #7
 80030b6:	4815      	ldr	r0, [pc, #84]	; (800310c <EXTI9_5_IRQHandler+0xbc>)
 80030b8:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8](ARR_INTERRUPT_TRACK,8);  }
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <EXTI9_5_IRQHandler+0x8c>
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6153      	str	r3, [r2, #20]
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <EXTI9_5_IRQHandler+0xb8>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	2108      	movs	r1, #8
 80030d8:	480c      	ldr	r0, [pc, #48]	; (800310c <EXTI9_5_IRQHandler+0xbc>)
 80030da:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9](ARR_INTERRUPT_TRACK,9);  }
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <EXTI9_5_IRQHandler+0xae>
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	4a05      	ldr	r2, [pc, #20]	; (8003104 <EXTI9_5_IRQHandler+0xb4>)
 80030ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f2:	6153      	str	r3, [r2, #20]
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <EXTI9_5_IRQHandler+0xb8>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	2109      	movs	r1, #9
 80030fa:	4804      	ldr	r0, [pc, #16]	; (800310c <EXTI9_5_IRQHandler+0xbc>)
 80030fc:	4798      	blx	r3
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40010400 	.word	0x40010400
 8003108:	20000448 	.word	0x20000448
 800310c:	20000484 	.word	0x20000484

08003110 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10](ARR_INTERRUPT_TRACK,10);  }
 8003114:	4b33      	ldr	r3, [pc, #204]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <EXTI15_10_IRQHandler+0x26>
 8003120:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	4a2f      	ldr	r2, [pc, #188]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 8003126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800312a:	6153      	str	r3, [r2, #20]
 800312c:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <EXTI15_10_IRQHandler+0xd8>)
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	210a      	movs	r1, #10
 8003132:	482e      	ldr	r0, [pc, #184]	; (80031ec <EXTI15_10_IRQHandler+0xdc>)
 8003134:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11](ARR_INTERRUPT_TRACK,11);  }
 8003136:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <EXTI15_10_IRQHandler+0x48>
 8003142:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 8003148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800314c:	6153      	str	r3, [r2, #20]
 800314e:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <EXTI15_10_IRQHandler+0xd8>)
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	210b      	movs	r1, #11
 8003154:	4825      	ldr	r0, [pc, #148]	; (80031ec <EXTI15_10_IRQHandler+0xdc>)
 8003156:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12](ARR_INTERRUPT_TRACK,12);  }
 8003158:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <EXTI15_10_IRQHandler+0x6a>
 8003164:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 800316a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800316e:	6153      	str	r3, [r2, #20]
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <EXTI15_10_IRQHandler+0xd8>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	210c      	movs	r1, #12
 8003176:	481d      	ldr	r0, [pc, #116]	; (80031ec <EXTI15_10_IRQHandler+0xdc>)
 8003178:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13](ARR_INTERRUPT_TRACK,13);  }
 800317a:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <EXTI15_10_IRQHandler+0x8c>
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 800318c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003190:	6153      	str	r3, [r2, #20]
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <EXTI15_10_IRQHandler+0xd8>)
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	210d      	movs	r1, #13
 8003198:	4814      	ldr	r0, [pc, #80]	; (80031ec <EXTI15_10_IRQHandler+0xdc>)
 800319a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14](ARR_INTERRUPT_TRACK,14);  }
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <EXTI15_10_IRQHandler+0xae>
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 80031ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b2:	6153      	str	r3, [r2, #20]
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <EXTI15_10_IRQHandler+0xd8>)
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	210e      	movs	r1, #14
 80031ba:	480c      	ldr	r0, [pc, #48]	; (80031ec <EXTI15_10_IRQHandler+0xdc>)
 80031bc:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15](ARR_INTERRUPT_TRACK,15);  }
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <EXTI15_10_IRQHandler+0xd0>
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4a05      	ldr	r2, [pc, #20]	; (80031e4 <EXTI15_10_IRQHandler+0xd4>)
 80031d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d4:	6153      	str	r3, [r2, #20]
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <EXTI15_10_IRQHandler+0xd8>)
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	210f      	movs	r1, #15
 80031dc:	4803      	ldr	r0, [pc, #12]	; (80031ec <EXTI15_10_IRQHandler+0xdc>)
 80031de:	4798      	blx	r3

}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40010400 	.word	0x40010400
 80031e8:	20000448 	.word	0x20000448
 80031ec:	20000484 	.word	0x20000484

080031f0 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
	//slave only todo
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
	//slave only todo
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <USART_SEND>:
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );


}
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	0b1b      	lsrs	r3, r3, #12
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d106      	bne.n	800322e <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 800322c:	e004      	b.n	8003238 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	605a      	str	r2, [r3, #4]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
	...

08003244 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800324a:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <USART1_IRQHandler+0x160>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	09db      	lsrs	r3, r3, #7
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d122      	bne.n	80032a0 <USART1_IRQHandler+0x5c>
 800325a:	4b52      	ldr	r3, [pc, #328]	; (80033a4 <USART1_IRQHandler+0x160>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	09db      	lsrs	r3, r3, #7
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d11a      	bne.n	80032a0 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 800326a:	4b4f      	ldr	r3, [pc, #316]	; (80033a8 <USART1_IRQHandler+0x164>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00d      	beq.n	8003290 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 8003274:	4b4b      	ldr	r3, [pc, #300]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b4b      	ldr	r3, [pc, #300]	; (80033a8 <USART1_IRQHandler+0x164>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f7ff ffc2 	bl	8003208 <USART_SEND>
			++arr_data[0];
 8003284:	4b48      	ldr	r3, [pc, #288]	; (80033a8 <USART1_IRQHandler+0x164>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	4a47      	ldr	r2, [pc, #284]	; (80033a8 <USART1_IRQHandler+0x164>)
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e007      	b.n	80032a0 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 8003290:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800329e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 80032a0:	4b40      	ldr	r3, [pc, #256]	; (80033a4 <USART1_IRQHandler+0x160>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d166      	bne.n	800337e <USART1_IRQHandler+0x13a>
 80032b0:	4b3c      	ldr	r3, [pc, #240]	; (80033a4 <USART1_IRQHandler+0x160>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d15e      	bne.n	800337e <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 80032c0:	4b38      	ldr	r3, [pc, #224]	; (80033a4 <USART1_IRQHandler+0x160>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	0b1b      	lsrs	r3, r3, #12
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d117      	bne.n	8003300 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 80032d0:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <USART1_IRQHandler+0x160>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	0a9b      	lsrs	r3, r3, #10
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d108      	bne.n	80032f2 <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 80032e0:	4b30      	ldr	r3, [pc, #192]	; (80033a4 <USART1_IRQHandler+0x160>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <USART1_IRQHandler+0x168>)
 80032ee:	801a      	strh	r2, [r3, #0]
 80032f0:	e020      	b.n	8003334 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 80032f2:	4b2c      	ldr	r3, [pc, #176]	; (80033a4 <USART1_IRQHandler+0x160>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <USART1_IRQHandler+0x168>)
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	e019      	b.n	8003334 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8003300:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	0a9b      	lsrs	r3, r3, #10
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d109      	bne.n	8003324 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 8003310:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800331c:	b29a      	uxth	r2, r3
 800331e:	4b23      	ldr	r3, [pc, #140]	; (80033ac <USART1_IRQHandler+0x168>)
 8003320:	801a      	strh	r2, [r3, #0]
 8003322:	e007      	b.n	8003334 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8003324:	4b1f      	ldr	r3, [pc, #124]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	b29b      	uxth	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	b29a      	uxth	r2, r3
 8003330:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <USART1_IRQHandler+0x168>)
 8003332:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 8003334:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <USART1_IRQHandler+0x16c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	e002      	b.n	8003346 <USART1_IRQHandler+0x102>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3301      	adds	r3, #1
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800334c:	4293      	cmp	r3, r2
 800334e:	ddf7      	ble.n	8003340 <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 8003350:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0220 	bic.w	r2, r2, #32
 800335e:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8003366:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <USART1_IRQHandler+0x170>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	b29b      	uxth	r3, r3
 800336c:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0220 	bic.w	r2, r2, #32
 800337c:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <USART1_IRQHandler+0x170>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	b29b      	uxth	r3, r3
 800338a:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <USART1_IRQHandler+0x160>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <USART1_IRQHandler+0x160>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0220 	bic.w	r2, r2, #32
 800339a:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	200004a4 	.word	0x200004a4
 80033a8:	200004b8 	.word	0x200004b8
 80033ac:	200004b0 	.word	0x200004b0
 80033b0:	200004c4 	.word	0x200004c4
 80033b4:	40013800 	.word	0x40013800

080033b8 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80033be:	4b56      	ldr	r3, [pc, #344]	; (8003518 <USART2_IRQHandler+0x160>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	09db      	lsrs	r3, r3, #7
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d122      	bne.n	8003414 <USART2_IRQHandler+0x5c>
 80033ce:	4b52      	ldr	r3, [pc, #328]	; (8003518 <USART2_IRQHandler+0x160>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	09db      	lsrs	r3, r3, #7
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d11a      	bne.n	8003414 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 80033de:	4b4f      	ldr	r3, [pc, #316]	; (800351c <USART2_IRQHandler+0x164>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 80033e8:	4b4b      	ldr	r3, [pc, #300]	; (8003518 <USART2_IRQHandler+0x160>)
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	4b4b      	ldr	r3, [pc, #300]	; (800351c <USART2_IRQHandler+0x164>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f7ff ff08 	bl	8003208 <USART_SEND>
			++arr_data[1];
 80033f8:	4b48      	ldr	r3, [pc, #288]	; (800351c <USART2_IRQHandler+0x164>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a47      	ldr	r2, [pc, #284]	; (800351c <USART2_IRQHandler+0x164>)
 8003400:	6053      	str	r3, [r2, #4]
 8003402:	e007      	b.n	8003414 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8003404:	4b44      	ldr	r3, [pc, #272]	; (8003518 <USART2_IRQHandler+0x160>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	4b43      	ldr	r3, [pc, #268]	; (8003518 <USART2_IRQHandler+0x160>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003412:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8003414:	4b40      	ldr	r3, [pc, #256]	; (8003518 <USART2_IRQHandler+0x160>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d166      	bne.n	80034f2 <USART2_IRQHandler+0x13a>
 8003424:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <USART2_IRQHandler+0x160>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b01      	cmp	r3, #1
 8003432:	d15e      	bne.n	80034f2 <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 8003434:	4b38      	ldr	r3, [pc, #224]	; (8003518 <USART2_IRQHandler+0x160>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	0b1b      	lsrs	r3, r3, #12
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d117      	bne.n	8003474 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8003444:	4b34      	ldr	r3, [pc, #208]	; (8003518 <USART2_IRQHandler+0x160>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d108      	bne.n	8003466 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8003454:	4b30      	ldr	r3, [pc, #192]	; (8003518 <USART2_IRQHandler+0x160>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	b29b      	uxth	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	b29a      	uxth	r2, r3
 8003460:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <USART2_IRQHandler+0x168>)
 8003462:	805a      	strh	r2, [r3, #2]
 8003464:	e020      	b.n	80034a8 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 8003466:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <USART2_IRQHandler+0x160>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	b29a      	uxth	r2, r3
 800346e:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <USART2_IRQHandler+0x168>)
 8003470:	805a      	strh	r2, [r3, #2]
 8003472:	e019      	b.n	80034a8 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8003474:	4b28      	ldr	r3, [pc, #160]	; (8003518 <USART2_IRQHandler+0x160>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	0a9b      	lsrs	r3, r3, #10
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d109      	bne.n	8003498 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <USART2_IRQHandler+0x160>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003490:	b29a      	uxth	r2, r3
 8003492:	4b23      	ldr	r3, [pc, #140]	; (8003520 <USART2_IRQHandler+0x168>)
 8003494:	805a      	strh	r2, [r3, #2]
 8003496:	e007      	b.n	80034a8 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8003498:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <USART2_IRQHandler+0x160>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <USART2_IRQHandler+0x168>)
 80034a6:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <USART2_IRQHandler+0x16c>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	e002      	b.n	80034ba <USART2_IRQHandler+0x102>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3301      	adds	r3, #1
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80034c0:	4293      	cmp	r3, r2
 80034c2:	ddf7      	ble.n	80034b4 <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <USART2_IRQHandler+0x160>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4b13      	ldr	r3, [pc, #76]	; (8003518 <USART2_IRQHandler+0x160>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f022 0220 	bic.w	r2, r2, #32
 80034d2:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <USART2_IRQHandler+0x160>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <USART2_IRQHandler+0x170>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <USART2_IRQHandler+0x160>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <USART2_IRQHandler+0x160>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f022 0220 	bic.w	r2, r2, #32
 80034f0:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <USART2_IRQHandler+0x160>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <USART2_IRQHandler+0x170>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <USART2_IRQHandler+0x160>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4b04      	ldr	r3, [pc, #16]	; (8003518 <USART2_IRQHandler+0x160>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f022 0220 	bic.w	r2, r2, #32
 800350e:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	200004a4 	.word	0x200004a4
 800351c:	200004b8 	.word	0x200004b8
 8003520:	200004b0 	.word	0x200004b0
 8003524:	200004c4 	.word	0x200004c4
 8003528:	40004400 	.word	0x40004400

0800352c <USART3_IRQHandler>:
void USART3_IRQHandler(){
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8003532:	4b56      	ldr	r3, [pc, #344]	; (800368c <USART3_IRQHandler+0x160>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	09db      	lsrs	r3, r3, #7
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d122      	bne.n	8003588 <USART3_IRQHandler+0x5c>
 8003542:	4b52      	ldr	r3, [pc, #328]	; (800368c <USART3_IRQHandler+0x160>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	09db      	lsrs	r3, r3, #7
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b01      	cmp	r3, #1
 8003550:	d11a      	bne.n	8003588 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 8003552:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <USART3_IRQHandler+0x164>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00d      	beq.n	8003578 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 800355c:	4b4b      	ldr	r3, [pc, #300]	; (800368c <USART3_IRQHandler+0x160>)
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <USART3_IRQHandler+0x164>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4619      	mov	r1, r3
 8003566:	4610      	mov	r0, r2
 8003568:	f7ff fe4e 	bl	8003208 <USART_SEND>
			++arr_data[2];
 800356c:	4b48      	ldr	r3, [pc, #288]	; (8003690 <USART3_IRQHandler+0x164>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	3301      	adds	r3, #1
 8003572:	4a47      	ldr	r2, [pc, #284]	; (8003690 <USART3_IRQHandler+0x164>)
 8003574:	6093      	str	r3, [r2, #8]
 8003576:	e007      	b.n	8003588 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 8003578:	4b44      	ldr	r3, [pc, #272]	; (800368c <USART3_IRQHandler+0x160>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	4b43      	ldr	r3, [pc, #268]	; (800368c <USART3_IRQHandler+0x160>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003586:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 8003588:	4b40      	ldr	r3, [pc, #256]	; (800368c <USART3_IRQHandler+0x160>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d166      	bne.n	8003666 <USART3_IRQHandler+0x13a>
 8003598:	4b3c      	ldr	r3, [pc, #240]	; (800368c <USART3_IRQHandler+0x160>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d15e      	bne.n	8003666 <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 80035a8:	4b38      	ldr	r3, [pc, #224]	; (800368c <USART3_IRQHandler+0x160>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	0b1b      	lsrs	r3, r3, #12
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d117      	bne.n	80035e8 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 80035b8:	4b34      	ldr	r3, [pc, #208]	; (800368c <USART3_IRQHandler+0x160>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	0a9b      	lsrs	r3, r3, #10
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d108      	bne.n	80035da <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 80035c8:	4b30      	ldr	r3, [pc, #192]	; (800368c <USART3_IRQHandler+0x160>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <USART3_IRQHandler+0x168>)
 80035d6:	809a      	strh	r2, [r3, #4]
 80035d8:	e020      	b.n	800361c <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 80035da:	4b2c      	ldr	r3, [pc, #176]	; (800368c <USART3_IRQHandler+0x160>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <USART3_IRQHandler+0x168>)
 80035e4:	809a      	strh	r2, [r3, #4]
 80035e6:	e019      	b.n	800361c <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 80035e8:	4b28      	ldr	r3, [pc, #160]	; (800368c <USART3_IRQHandler+0x160>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	0a9b      	lsrs	r3, r3, #10
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d109      	bne.n	800360c <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 80035f8:	4b24      	ldr	r3, [pc, #144]	; (800368c <USART3_IRQHandler+0x160>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003604:	b29a      	uxth	r2, r3
 8003606:	4b23      	ldr	r3, [pc, #140]	; (8003694 <USART3_IRQHandler+0x168>)
 8003608:	809a      	strh	r2, [r3, #4]
 800360a:	e007      	b.n	800361c <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 800360c:	4b1f      	ldr	r3, [pc, #124]	; (800368c <USART3_IRQHandler+0x160>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	b29b      	uxth	r3, r3
 8003614:	b2db      	uxtb	r3, r3
 8003616:	b29a      	uxth	r2, r3
 8003618:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <USART3_IRQHandler+0x168>)
 800361a:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <USART3_IRQHandler+0x16c>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 8003622:	2300      	movs	r3, #0
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	e002      	b.n	800362e <USART3_IRQHandler+0x102>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3301      	adds	r3, #1
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003634:	4293      	cmp	r3, r2
 8003636:	ddf7      	ble.n	8003628 <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <USART3_IRQHandler+0x160>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <USART3_IRQHandler+0x160>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f022 0220 	bic.w	r2, r2, #32
 8003646:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 8003648:	4b10      	ldr	r3, [pc, #64]	; (800368c <USART3_IRQHandler+0x160>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 800364e:	4b13      	ldr	r3, [pc, #76]	; (800369c <USART3_IRQHandler+0x170>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	b29b      	uxth	r3, r3
 8003654:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <USART3_IRQHandler+0x160>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <USART3_IRQHandler+0x160>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f022 0220 	bic.w	r2, r2, #32
 8003664:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 8003666:	4b09      	ldr	r3, [pc, #36]	; (800368c <USART3_IRQHandler+0x160>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <USART3_IRQHandler+0x170>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	b29b      	uxth	r3, r3
 8003672:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <USART3_IRQHandler+0x160>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <USART3_IRQHandler+0x160>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f022 0220 	bic.w	r2, r2, #32
 8003682:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200004a4 	.word	0x200004a4
 8003690:	200004b8 	.word	0x200004b8
 8003694:	200004b0 	.word	0x200004b0
 8003698:	200004c4 	.word	0x200004c4
 800369c:	40004800 	.word	0x40004800

080036a0 <main>:
#define address 0x3f
uint16_t CELL_VOLTAGE[CELL_NUMB];
float ACTUAL_CELL_VOLTAGE[CELL_NUMB],VOLT_MAIN,VOLT_MIN,VOLT_MIN_ADDRES;
uint8_t count;
int main(void)
{
 80036a0:	b5b0      	push	{r4, r5, r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af02      	add	r7, sp, #8
	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 80036a6:	2100      	movs	r1, #0
 80036a8:	2000      	movs	r0, #0
 80036aa:	f7ff facf 	bl	8002c4c <MCAL_speed_init>
	PWM(TIM1, CH_1,250,FREQ_ISO_POWERSUPPLY, clk);//A8
 80036ae:	4bc0      	ldr	r3, [pc, #768]	; (80039b0 <main+0x310>)
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80036b6:	22fa      	movs	r2, #250	; 0xfa
 80036b8:	2101      	movs	r1, #1
 80036ba:	48be      	ldr	r0, [pc, #760]	; (80039b4 <main+0x314>)
 80036bc:	f7fe fca8 	bl	8002010 <PWM>
	ADC_INIT(ADC1, ADC_STATE_START);
 80036c0:	2101      	movs	r1, #1
 80036c2:	48bd      	ldr	r0, [pc, #756]	; (80039b8 <main+0x318>)
 80036c4:	f7ff fba6 	bl	8002e14 <ADC_INIT>
	I2C_LCD_Init(I2C1,address);//PB6 I2C SCL
 80036c8:	213f      	movs	r1, #63	; 0x3f
 80036ca:	48bc      	ldr	r0, [pc, #752]	; (80039bc <main+0x31c>)
 80036cc:	f7fe f9a8 	bl	8001a20 <I2C_LCD_Init>
	//PB7 IC2 SDA
	pinmode(GPIOB, pin0,GPIO_MODE_OUTPUT_push_pull_Speed10);
 80036d0:	2201      	movs	r2, #1
 80036d2:	2100      	movs	r1, #0
 80036d4:	48ba      	ldr	r0, [pc, #744]	; (80039c0 <main+0x320>)
 80036d6:	f7fe f809 	bl	80016ec <pinmode>
	pinmode(GPIOB, pin1,GPIO_MODE_OUTPUT_push_pull_Speed10);
 80036da:	2201      	movs	r2, #1
 80036dc:	2101      	movs	r1, #1
 80036de:	48b8      	ldr	r0, [pc, #736]	; (80039c0 <main+0x320>)
 80036e0:	f7fe f804 	bl	80016ec <pinmode>
	pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_push_pull_Speed10);
 80036e4:	2201      	movs	r2, #1
 80036e6:	210a      	movs	r1, #10
 80036e8:	48b5      	ldr	r0, [pc, #724]	; (80039c0 <main+0x320>)
 80036ea:	f7fd ffff 	bl	80016ec <pinmode>
	pinmode(GPIOB, pin11,GPIO_MODE_OUTPUT_push_pull_Speed10);
 80036ee:	2201      	movs	r2, #1
 80036f0:	210b      	movs	r1, #11
 80036f2:	48b3      	ldr	r0, [pc, #716]	; (80039c0 <main+0x320>)
 80036f4:	f7fd fffa 	bl	80016ec <pinmode>

	while(1){

		count++;
 80036f8:	4bb2      	ldr	r3, [pc, #712]	; (80039c4 <main+0x324>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	4bb0      	ldr	r3, [pc, #704]	; (80039c4 <main+0x324>)
 8003702:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<4;i++){
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]
 8003708:	e022      	b.n	8003750 <main+0xb0>
			int avr=0;
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
			for(int j=0;j<2;j++){
 800370e:	2300      	movs	r3, #0
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	e00c      	b.n	800372e <main+0x8e>
				avr+=ADC_READ(ADC1,i);
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	4619      	mov	r1, r3
 8003718:	48a7      	ldr	r0, [pc, #668]	; (80039b8 <main+0x318>)
 800371a:	f7ff fbd9 	bl	8002ed0 <ADC_READ>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4413      	add	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
			for(int j=0;j<2;j++){
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3301      	adds	r3, #1
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b01      	cmp	r3, #1
 8003732:	ddef      	ble.n	8003714 <main+0x74>
			}
			avr/=2;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	0fda      	lsrs	r2, r3, #31
 8003738:	4413      	add	r3, r2
 800373a:	105b      	asrs	r3, r3, #1
 800373c:	60bb      	str	r3, [r7, #8]
			CELL_VOLTAGE[i]=avr;
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	b291      	uxth	r1, r2
 8003744:	4aa0      	ldr	r2, [pc, #640]	; (80039c8 <main+0x328>)
 8003746:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i=0;i<4;i++){
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	3301      	adds	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d9d9      	bls.n	800370a <main+0x6a>
		}
		//I2C_LCD_clear( I2C1,address);
		ACTUAL_CELL_VOLTAGE[0]=CELL_VOLTAGE[0]*4.2/4096.0;
 8003756:	4b9c      	ldr	r3, [pc, #624]	; (80039c8 <main+0x328>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fc fe64 	bl	8000428 <__aeabi_i2d>
 8003760:	a389      	add	r3, pc, #548	; (adr r3, 8003988 <main+0x2e8>)
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f7fc fec9 	bl	80004fc <__aeabi_dmul>
 800376a:	4603      	mov	r3, r0
 800376c:	460c      	mov	r4, r1
 800376e:	4618      	mov	r0, r3
 8003770:	4621      	mov	r1, r4
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	4b95      	ldr	r3, [pc, #596]	; (80039cc <main+0x32c>)
 8003778:	f7fc ffea 	bl	8000750 <__aeabi_ddiv>
 800377c:	4603      	mov	r3, r0
 800377e:	460c      	mov	r4, r1
 8003780:	4618      	mov	r0, r3
 8003782:	4621      	mov	r1, r4
 8003784:	f7fd f97c 	bl	8000a80 <__aeabi_d2f>
 8003788:	4602      	mov	r2, r0
 800378a:	4b91      	ldr	r3, [pc, #580]	; (80039d0 <main+0x330>)
 800378c:	601a      	str	r2, [r3, #0]
		ACTUAL_CELL_VOLTAGE[1]=CELL_VOLTAGE[1]*8.4/4096.0-ACTUAL_CELL_VOLTAGE[0];
 800378e:	4b8e      	ldr	r3, [pc, #568]	; (80039c8 <main+0x328>)
 8003790:	885b      	ldrh	r3, [r3, #2]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fc fe48 	bl	8000428 <__aeabi_i2d>
 8003798:	a37d      	add	r3, pc, #500	; (adr r3, 8003990 <main+0x2f0>)
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f7fc fead 	bl	80004fc <__aeabi_dmul>
 80037a2:	4603      	mov	r3, r0
 80037a4:	460c      	mov	r4, r1
 80037a6:	4618      	mov	r0, r3
 80037a8:	4621      	mov	r1, r4
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	4b87      	ldr	r3, [pc, #540]	; (80039cc <main+0x32c>)
 80037b0:	f7fc ffce 	bl	8000750 <__aeabi_ddiv>
 80037b4:	4603      	mov	r3, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	4625      	mov	r5, r4
 80037ba:	461c      	mov	r4, r3
 80037bc:	4b84      	ldr	r3, [pc, #528]	; (80039d0 <main+0x330>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fc fe43 	bl	800044c <__aeabi_f2d>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4620      	mov	r0, r4
 80037cc:	4629      	mov	r1, r5
 80037ce:	f7fc fcdd 	bl	800018c <__aeabi_dsub>
 80037d2:	4603      	mov	r3, r0
 80037d4:	460c      	mov	r4, r1
 80037d6:	4618      	mov	r0, r3
 80037d8:	4621      	mov	r1, r4
 80037da:	f7fd f951 	bl	8000a80 <__aeabi_d2f>
 80037de:	4602      	mov	r2, r0
 80037e0:	4b7b      	ldr	r3, [pc, #492]	; (80039d0 <main+0x330>)
 80037e2:	605a      	str	r2, [r3, #4]
		ACTUAL_CELL_VOLTAGE[2]=(CELL_VOLTAGE[2]*12.6/4096.0)-(CELL_VOLTAGE[1]*8.4/4096.0);
 80037e4:	4b78      	ldr	r3, [pc, #480]	; (80039c8 <main+0x328>)
 80037e6:	889b      	ldrh	r3, [r3, #4]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fc fe1d 	bl	8000428 <__aeabi_i2d>
 80037ee:	a36a      	add	r3, pc, #424	; (adr r3, 8003998 <main+0x2f8>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f7fc fe82 	bl	80004fc <__aeabi_dmul>
 80037f8:	4603      	mov	r3, r0
 80037fa:	460c      	mov	r4, r1
 80037fc:	4618      	mov	r0, r3
 80037fe:	4621      	mov	r1, r4
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	4b71      	ldr	r3, [pc, #452]	; (80039cc <main+0x32c>)
 8003806:	f7fc ffa3 	bl	8000750 <__aeabi_ddiv>
 800380a:	4603      	mov	r3, r0
 800380c:	460c      	mov	r4, r1
 800380e:	4625      	mov	r5, r4
 8003810:	461c      	mov	r4, r3
 8003812:	4b6d      	ldr	r3, [pc, #436]	; (80039c8 <main+0x328>)
 8003814:	885b      	ldrh	r3, [r3, #2]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fc fe06 	bl	8000428 <__aeabi_i2d>
 800381c:	a35c      	add	r3, pc, #368	; (adr r3, 8003990 <main+0x2f0>)
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f7fc fe6b 	bl	80004fc <__aeabi_dmul>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	4b66      	ldr	r3, [pc, #408]	; (80039cc <main+0x32c>)
 8003834:	f7fc ff8c 	bl	8000750 <__aeabi_ddiv>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4620      	mov	r0, r4
 800383e:	4629      	mov	r1, r5
 8003840:	f7fc fca4 	bl	800018c <__aeabi_dsub>
 8003844:	4603      	mov	r3, r0
 8003846:	460c      	mov	r4, r1
 8003848:	4618      	mov	r0, r3
 800384a:	4621      	mov	r1, r4
 800384c:	f7fd f918 	bl	8000a80 <__aeabi_d2f>
 8003850:	4602      	mov	r2, r0
 8003852:	4b5f      	ldr	r3, [pc, #380]	; (80039d0 <main+0x330>)
 8003854:	609a      	str	r2, [r3, #8]
		ACTUAL_CELL_VOLTAGE[3]=CELL_VOLTAGE[3]*16.8/4096.0-CELL_VOLTAGE[2]*12.6/4096.0;
 8003856:	4b5c      	ldr	r3, [pc, #368]	; (80039c8 <main+0x328>)
 8003858:	88db      	ldrh	r3, [r3, #6]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fde4 	bl	8000428 <__aeabi_i2d>
 8003860:	a34f      	add	r3, pc, #316	; (adr r3, 80039a0 <main+0x300>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f7fc fe49 	bl	80004fc <__aeabi_dmul>
 800386a:	4603      	mov	r3, r0
 800386c:	460c      	mov	r4, r1
 800386e:	4618      	mov	r0, r3
 8003870:	4621      	mov	r1, r4
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	4b55      	ldr	r3, [pc, #340]	; (80039cc <main+0x32c>)
 8003878:	f7fc ff6a 	bl	8000750 <__aeabi_ddiv>
 800387c:	4603      	mov	r3, r0
 800387e:	460c      	mov	r4, r1
 8003880:	4625      	mov	r5, r4
 8003882:	461c      	mov	r4, r3
 8003884:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <main+0x328>)
 8003886:	889b      	ldrh	r3, [r3, #4]
 8003888:	4618      	mov	r0, r3
 800388a:	f7fc fdcd 	bl	8000428 <__aeabi_i2d>
 800388e:	a342      	add	r3, pc, #264	; (adr r3, 8003998 <main+0x2f8>)
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f7fc fe32 	bl	80004fc <__aeabi_dmul>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	4b49      	ldr	r3, [pc, #292]	; (80039cc <main+0x32c>)
 80038a6:	f7fc ff53 	bl	8000750 <__aeabi_ddiv>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4620      	mov	r0, r4
 80038b0:	4629      	mov	r1, r5
 80038b2:	f7fc fc6b 	bl	800018c <__aeabi_dsub>
 80038b6:	4603      	mov	r3, r0
 80038b8:	460c      	mov	r4, r1
 80038ba:	4618      	mov	r0, r3
 80038bc:	4621      	mov	r1, r4
 80038be:	f7fd f8df 	bl	8000a80 <__aeabi_d2f>
 80038c2:	4602      	mov	r2, r0
 80038c4:	4b42      	ldr	r3, [pc, #264]	; (80039d0 <main+0x330>)
 80038c6:	60da      	str	r2, [r3, #12]

		VOLT_MIN=ACTUAL_CELL_VOLTAGE[0];
 80038c8:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <main+0x330>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a41      	ldr	r2, [pc, #260]	; (80039d4 <main+0x334>)
 80038ce:	6013      	str	r3, [r2, #0]
		VOLT_MIN_ADDRES=0;
 80038d0:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <main+0x338>)
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
		for(uint8_t i=0;i<4;i++){
 80038d8:	2300      	movs	r3, #0
 80038da:	70fb      	strb	r3, [r7, #3]
 80038dc:	e01c      	b.n	8003918 <main+0x278>
			if(ACTUAL_CELL_VOLTAGE[i]<VOLT_MIN){
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	4a3b      	ldr	r2, [pc, #236]	; (80039d0 <main+0x330>)
 80038e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038e6:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <main+0x334>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	4610      	mov	r0, r2
 80038ee:	f7fd fbc3 	bl	8001078 <__aeabi_fcmplt>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00c      	beq.n	8003912 <main+0x272>
				VOLT_MIN=ACTUAL_CELL_VOLTAGE[i];
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	4a35      	ldr	r2, [pc, #212]	; (80039d0 <main+0x330>)
 80038fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003900:	4a34      	ldr	r2, [pc, #208]	; (80039d4 <main+0x334>)
 8003902:	6013      	str	r3, [r2, #0]
				VOLT_MIN_ADDRES=i;
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	4618      	mov	r0, r3
 8003908:	f7fd f9c0 	bl	8000c8c <__aeabi_ui2f>
 800390c:	4602      	mov	r2, r0
 800390e:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <main+0x338>)
 8003910:	601a      	str	r2, [r3, #0]
		for(uint8_t i=0;i<4;i++){
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	3301      	adds	r3, #1
 8003916:	70fb      	strb	r3, [r7, #3]
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d9df      	bls.n	80038de <main+0x23e>
			}
		}

		if(count>5){
 800391e:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <main+0x324>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b05      	cmp	r3, #5
 8003924:	f240 80f4 	bls.w	8003b10 <main+0x470>
			count=0;
 8003928:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <main+0x324>)
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
			if((VOLT_MIN_ADDRES==3)&&(ACTUAL_CELL_VOLTAGE[3]<4.4)){
 800392e:	4b2a      	ldr	r3, [pc, #168]	; (80039d8 <main+0x338>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	492a      	ldr	r1, [pc, #168]	; (80039dc <main+0x33c>)
 8003934:	4618      	mov	r0, r3
 8003936:	f7fd fb95 	bl	8001064 <__aeabi_fcmpeq>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d04f      	beq.n	80039e0 <main+0x340>
 8003940:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <main+0x330>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fd81 	bl	800044c <__aeabi_f2d>
 800394a:	a317      	add	r3, pc, #92	; (adr r3, 80039a8 <main+0x308>)
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	f7fd f846 	bl	80009e0 <__aeabi_dcmplt>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d042      	beq.n	80039e0 <main+0x340>
				pinwrite(GPIOB, pin0, LOW);
 800395a:	2200      	movs	r2, #0
 800395c:	2100      	movs	r1, #0
 800395e:	4818      	ldr	r0, [pc, #96]	; (80039c0 <main+0x320>)
 8003960:	f7fd ffa6 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin1, LOW);
 8003964:	2200      	movs	r2, #0
 8003966:	2101      	movs	r1, #1
 8003968:	4815      	ldr	r0, [pc, #84]	; (80039c0 <main+0x320>)
 800396a:	f7fd ffa1 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin10, LOW);
 800396e:	2200      	movs	r2, #0
 8003970:	210a      	movs	r1, #10
 8003972:	4813      	ldr	r0, [pc, #76]	; (80039c0 <main+0x320>)
 8003974:	f7fd ff9c 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin11, HIGH);
 8003978:	2201      	movs	r2, #1
 800397a:	210b      	movs	r1, #11
 800397c:	4810      	ldr	r0, [pc, #64]	; (80039c0 <main+0x320>)
 800397e:	f7fd ff97 	bl	80018b0 <pinwrite>
 8003982:	e0c5      	b.n	8003b10 <main+0x470>
 8003984:	f3af 8000 	nop.w
 8003988:	cccccccd 	.word	0xcccccccd
 800398c:	4010cccc 	.word	0x4010cccc
 8003990:	cccccccd 	.word	0xcccccccd
 8003994:	4020cccc 	.word	0x4020cccc
 8003998:	33333333 	.word	0x33333333
 800399c:	40293333 	.word	0x40293333
 80039a0:	cccccccd 	.word	0xcccccccd
 80039a4:	4030cccc 	.word	0x4030cccc
 80039a8:	9999999a 	.word	0x9999999a
 80039ac:	40119999 	.word	0x40119999
 80039b0:	02255100 	.word	0x02255100
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40012400 	.word	0x40012400
 80039bc:	40005400 	.word	0x40005400
 80039c0:	40010c00 	.word	0x40010c00
 80039c4:	200004fc 	.word	0x200004fc
 80039c8:	200004dc 	.word	0x200004dc
 80039cc:	40b00000 	.word	0x40b00000
 80039d0:	200004e4 	.word	0x200004e4
 80039d4:	20000500 	.word	0x20000500
 80039d8:	200004f4 	.word	0x200004f4
 80039dc:	40400000 	.word	0x40400000
			}
			else if ((VOLT_MIN_ADDRES==2)&&(ACTUAL_CELL_VOLTAGE[2]<4.4)) {
 80039e0:	4b7f      	ldr	r3, [pc, #508]	; (8003be0 <main+0x540>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fd fb3b 	bl	8001064 <__aeabi_fcmpeq>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d021      	beq.n	8003a38 <main+0x398>
 80039f4:	4b7b      	ldr	r3, [pc, #492]	; (8003be4 <main+0x544>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fc fd27 	bl	800044c <__aeabi_f2d>
 80039fe:	a376      	add	r3, pc, #472	; (adr r3, 8003bd8 <main+0x538>)
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	f7fc ffec 	bl	80009e0 <__aeabi_dcmplt>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d014      	beq.n	8003a38 <main+0x398>
				pinwrite(GPIOB, pin0, LOW);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2100      	movs	r1, #0
 8003a12:	4875      	ldr	r0, [pc, #468]	; (8003be8 <main+0x548>)
 8003a14:	f7fd ff4c 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin1, LOW);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	4872      	ldr	r0, [pc, #456]	; (8003be8 <main+0x548>)
 8003a1e:	f7fd ff47 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin10, HIGH);
 8003a22:	2201      	movs	r2, #1
 8003a24:	210a      	movs	r1, #10
 8003a26:	4870      	ldr	r0, [pc, #448]	; (8003be8 <main+0x548>)
 8003a28:	f7fd ff42 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin11, LOW);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	210b      	movs	r1, #11
 8003a30:	486d      	ldr	r0, [pc, #436]	; (8003be8 <main+0x548>)
 8003a32:	f7fd ff3d 	bl	80018b0 <pinwrite>
 8003a36:	e06b      	b.n	8003b10 <main+0x470>
			}
			else if ((VOLT_MIN_ADDRES==1)&&(ACTUAL_CELL_VOLTAGE[1]<4.4)) {
 8003a38:	4b69      	ldr	r3, [pc, #420]	; (8003be0 <main+0x540>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fd fb0f 	bl	8001064 <__aeabi_fcmpeq>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d021      	beq.n	8003a90 <main+0x3f0>
 8003a4c:	4b65      	ldr	r3, [pc, #404]	; (8003be4 <main+0x544>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fc fcfb 	bl	800044c <__aeabi_f2d>
 8003a56:	a360      	add	r3, pc, #384	; (adr r3, 8003bd8 <main+0x538>)
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	f7fc ffc0 	bl	80009e0 <__aeabi_dcmplt>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d014      	beq.n	8003a90 <main+0x3f0>
				pinwrite(GPIOB, pin0, LOW);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2100      	movs	r1, #0
 8003a6a:	485f      	ldr	r0, [pc, #380]	; (8003be8 <main+0x548>)
 8003a6c:	f7fd ff20 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin1, HIGH);
 8003a70:	2201      	movs	r2, #1
 8003a72:	2101      	movs	r1, #1
 8003a74:	485c      	ldr	r0, [pc, #368]	; (8003be8 <main+0x548>)
 8003a76:	f7fd ff1b 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin10, LOW);
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	210a      	movs	r1, #10
 8003a7e:	485a      	ldr	r0, [pc, #360]	; (8003be8 <main+0x548>)
 8003a80:	f7fd ff16 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin11, LOW);
 8003a84:	2200      	movs	r2, #0
 8003a86:	210b      	movs	r1, #11
 8003a88:	4857      	ldr	r0, [pc, #348]	; (8003be8 <main+0x548>)
 8003a8a:	f7fd ff11 	bl	80018b0 <pinwrite>
 8003a8e:	e03f      	b.n	8003b10 <main+0x470>
			}
			else if ((VOLT_MIN_ADDRES==0)&&(ACTUAL_CELL_VOLTAGE[0]<4.4)) {
 8003a90:	4b53      	ldr	r3, [pc, #332]	; (8003be0 <main+0x540>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f04f 0100 	mov.w	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fd fae3 	bl	8001064 <__aeabi_fcmpeq>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d021      	beq.n	8003ae8 <main+0x448>
 8003aa4:	4b4f      	ldr	r3, [pc, #316]	; (8003be4 <main+0x544>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fc fccf 	bl	800044c <__aeabi_f2d>
 8003aae:	a34a      	add	r3, pc, #296	; (adr r3, 8003bd8 <main+0x538>)
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	f7fc ff94 	bl	80009e0 <__aeabi_dcmplt>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d014      	beq.n	8003ae8 <main+0x448>
				pinwrite(GPIOB, pin0, HIGH);
 8003abe:	2201      	movs	r2, #1
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4849      	ldr	r0, [pc, #292]	; (8003be8 <main+0x548>)
 8003ac4:	f7fd fef4 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin1, LOW);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2101      	movs	r1, #1
 8003acc:	4846      	ldr	r0, [pc, #280]	; (8003be8 <main+0x548>)
 8003ace:	f7fd feef 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin10, LOW);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	210a      	movs	r1, #10
 8003ad6:	4844      	ldr	r0, [pc, #272]	; (8003be8 <main+0x548>)
 8003ad8:	f7fd feea 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin11, LOW);
 8003adc:	2200      	movs	r2, #0
 8003ade:	210b      	movs	r1, #11
 8003ae0:	4841      	ldr	r0, [pc, #260]	; (8003be8 <main+0x548>)
 8003ae2:	f7fd fee5 	bl	80018b0 <pinwrite>
 8003ae6:	e013      	b.n	8003b10 <main+0x470>
			}else {
				pinwrite(GPIOB, pin0, LOW);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2100      	movs	r1, #0
 8003aec:	483e      	ldr	r0, [pc, #248]	; (8003be8 <main+0x548>)
 8003aee:	f7fd fedf 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin1, LOW);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2101      	movs	r1, #1
 8003af6:	483c      	ldr	r0, [pc, #240]	; (8003be8 <main+0x548>)
 8003af8:	f7fd feda 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin10, LOW);
 8003afc:	2200      	movs	r2, #0
 8003afe:	210a      	movs	r1, #10
 8003b00:	4839      	ldr	r0, [pc, #228]	; (8003be8 <main+0x548>)
 8003b02:	f7fd fed5 	bl	80018b0 <pinwrite>
				pinwrite(GPIOB, pin11, LOW);
 8003b06:	2200      	movs	r2, #0
 8003b08:	210b      	movs	r1, #11
 8003b0a:	4837      	ldr	r0, [pc, #220]	; (8003be8 <main+0x548>)
 8003b0c:	f7fd fed0 	bl	80018b0 <pinwrite>
			}

		}

		//I2C_LCD_clear( I2C1,address);
		I2C_LCD_setcerser(I2C1, address,0,0);
 8003b10:	2300      	movs	r3, #0
 8003b12:	2200      	movs	r2, #0
 8003b14:	213f      	movs	r1, #63	; 0x3f
 8003b16:	4835      	ldr	r0, [pc, #212]	; (8003bec <main+0x54c>)
 8003b18:	f7fe f86d 	bl	8001bf6 <I2C_LCD_setcerser>
		I2C_LCD_write_string(I2C1,"C1 ",address);
 8003b1c:	223f      	movs	r2, #63	; 0x3f
 8003b1e:	4934      	ldr	r1, [pc, #208]	; (8003bf0 <main+0x550>)
 8003b20:	4832      	ldr	r0, [pc, #200]	; (8003bec <main+0x54c>)
 8003b22:	f7fe f84e 	bl	8001bc2 <I2C_LCD_write_string>
		I2C_LCD_write_FLOATnumber(I2C1, address,ACTUAL_CELL_VOLTAGE[0],3);
 8003b26:	4b2f      	ldr	r3, [pc, #188]	; (8003be4 <main+0x544>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	213f      	movs	r1, #63	; 0x3f
 8003b2e:	482f      	ldr	r0, [pc, #188]	; (8003bec <main+0x54c>)
 8003b30:	f7fe f88c 	bl	8001c4c <I2C_LCD_write_FLOATnumber>
		I2C_LCD_write_string(I2C1,"    ",address);
 8003b34:	223f      	movs	r2, #63	; 0x3f
 8003b36:	492f      	ldr	r1, [pc, #188]	; (8003bf4 <main+0x554>)
 8003b38:	482c      	ldr	r0, [pc, #176]	; (8003bec <main+0x54c>)
 8003b3a:	f7fe f842 	bl	8001bc2 <I2C_LCD_write_string>
		I2C_LCD_setcerser(I2C1, address,0,7);
 8003b3e:	2307      	movs	r3, #7
 8003b40:	2200      	movs	r2, #0
 8003b42:	213f      	movs	r1, #63	; 0x3f
 8003b44:	4829      	ldr	r0, [pc, #164]	; (8003bec <main+0x54c>)
 8003b46:	f7fe f856 	bl	8001bf6 <I2C_LCD_setcerser>
		I2C_LCD_write_string(I2C1," C2 ",address);
 8003b4a:	223f      	movs	r2, #63	; 0x3f
 8003b4c:	492a      	ldr	r1, [pc, #168]	; (8003bf8 <main+0x558>)
 8003b4e:	4827      	ldr	r0, [pc, #156]	; (8003bec <main+0x54c>)
 8003b50:	f7fe f837 	bl	8001bc2 <I2C_LCD_write_string>
		I2C_LCD_write_FLOATnumber(I2C1, address,ACTUAL_CELL_VOLTAGE[1],3);
 8003b54:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <main+0x544>)
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	2303      	movs	r3, #3
 8003b5a:	213f      	movs	r1, #63	; 0x3f
 8003b5c:	4823      	ldr	r0, [pc, #140]	; (8003bec <main+0x54c>)
 8003b5e:	f7fe f875 	bl	8001c4c <I2C_LCD_write_FLOATnumber>
		I2C_LCD_write_string(I2C1,"    ",address);
 8003b62:	223f      	movs	r2, #63	; 0x3f
 8003b64:	4923      	ldr	r1, [pc, #140]	; (8003bf4 <main+0x554>)
 8003b66:	4821      	ldr	r0, [pc, #132]	; (8003bec <main+0x54c>)
 8003b68:	f7fe f82b 	bl	8001bc2 <I2C_LCD_write_string>
		I2C_LCD_setcerser(I2C1, address,1,0);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2201      	movs	r2, #1
 8003b70:	213f      	movs	r1, #63	; 0x3f
 8003b72:	481e      	ldr	r0, [pc, #120]	; (8003bec <main+0x54c>)
 8003b74:	f7fe f83f 	bl	8001bf6 <I2C_LCD_setcerser>
		I2C_LCD_write_string(I2C1,"C3 ",address);
 8003b78:	223f      	movs	r2, #63	; 0x3f
 8003b7a:	4920      	ldr	r1, [pc, #128]	; (8003bfc <main+0x55c>)
 8003b7c:	481b      	ldr	r0, [pc, #108]	; (8003bec <main+0x54c>)
 8003b7e:	f7fe f820 	bl	8001bc2 <I2C_LCD_write_string>
		I2C_LCD_write_FLOATnumber(I2C1, address,ACTUAL_CELL_VOLTAGE[2],3);
 8003b82:	4b18      	ldr	r3, [pc, #96]	; (8003be4 <main+0x544>)
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	2303      	movs	r3, #3
 8003b88:	213f      	movs	r1, #63	; 0x3f
 8003b8a:	4818      	ldr	r0, [pc, #96]	; (8003bec <main+0x54c>)
 8003b8c:	f7fe f85e 	bl	8001c4c <I2C_LCD_write_FLOATnumber>
		I2C_LCD_write_string(I2C1,"    ",address);
 8003b90:	223f      	movs	r2, #63	; 0x3f
 8003b92:	4918      	ldr	r1, [pc, #96]	; (8003bf4 <main+0x554>)
 8003b94:	4815      	ldr	r0, [pc, #84]	; (8003bec <main+0x54c>)
 8003b96:	f7fe f814 	bl	8001bc2 <I2C_LCD_write_string>
		I2C_LCD_setcerser(I2C1, address,1,7);
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	213f      	movs	r1, #63	; 0x3f
 8003ba0:	4812      	ldr	r0, [pc, #72]	; (8003bec <main+0x54c>)
 8003ba2:	f7fe f828 	bl	8001bf6 <I2C_LCD_setcerser>
		I2C_LCD_write_string(I2C1," C4 ",address);
 8003ba6:	223f      	movs	r2, #63	; 0x3f
 8003ba8:	4915      	ldr	r1, [pc, #84]	; (8003c00 <main+0x560>)
 8003baa:	4810      	ldr	r0, [pc, #64]	; (8003bec <main+0x54c>)
 8003bac:	f7fe f809 	bl	8001bc2 <I2C_LCD_write_string>
		I2C_LCD_write_FLOATnumber(I2C1, address,ACTUAL_CELL_VOLTAGE[3],3);
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <main+0x544>)
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	213f      	movs	r1, #63	; 0x3f
 8003bb8:	480c      	ldr	r0, [pc, #48]	; (8003bec <main+0x54c>)
 8003bba:	f7fe f847 	bl	8001c4c <I2C_LCD_write_FLOATnumber>
		I2C_LCD_write_string(I2C1,"    ",address);
 8003bbe:	223f      	movs	r2, #63	; 0x3f
 8003bc0:	490c      	ldr	r1, [pc, #48]	; (8003bf4 <main+0x554>)
 8003bc2:	480a      	ldr	r0, [pc, #40]	; (8003bec <main+0x54c>)
 8003bc4:	f7fd fffd 	bl	8001bc2 <I2C_LCD_write_string>
		delay(1000, U_ms,clk);
 8003bc8:	4a0e      	ldr	r2, [pc, #56]	; (8003c04 <main+0x564>)
 8003bca:	2100      	movs	r1, #0
 8003bcc:	480e      	ldr	r0, [pc, #56]	; (8003c08 <main+0x568>)
 8003bce:	f7fe fdad 	bl	800272c <delay>
		count++;
 8003bd2:	e591      	b.n	80036f8 <main+0x58>
 8003bd4:	f3af 8000 	nop.w
 8003bd8:	9999999a 	.word	0x9999999a
 8003bdc:	40119999 	.word	0x40119999
 8003be0:	200004f4 	.word	0x200004f4
 8003be4:	200004e4 	.word	0x200004e4
 8003be8:	40010c00 	.word	0x40010c00
 8003bec:	40005400 	.word	0x40005400
 8003bf0:	080053c4 	.word	0x080053c4
 8003bf4:	080053c8 	.word	0x080053c8
 8003bf8:	080053d0 	.word	0x080053d0
 8003bfc:	080053d8 	.word	0x080053d8
 8003c00:	080053dc 	.word	0x080053dc
 8003c04:	02255100 	.word	0x02255100
 8003c08:	447a0000 	.word	0x447a0000

08003c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c14:	4a14      	ldr	r2, [pc, #80]	; (8003c68 <_sbrk+0x5c>)
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <_sbrk+0x60>)
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c20:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <_sbrk+0x64>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c28:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <_sbrk+0x64>)
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <_sbrk+0x68>)
 8003c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <_sbrk+0x64>)
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d207      	bcs.n	8003c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c3c:	f000 f86a 	bl	8003d14 <__errno>
 8003c40:	4602      	mov	r2, r0
 8003c42:	230c      	movs	r3, #12
 8003c44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4a:	e009      	b.n	8003c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <_sbrk+0x64>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <_sbrk+0x64>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4413      	add	r3, r2
 8003c5a:	4a05      	ldr	r2, [pc, #20]	; (8003c70 <_sbrk+0x64>)
 8003c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20005000 	.word	0x20005000
 8003c6c:	00000400 	.word	0x00000400
 8003c70:	200000b0 	.word	0x200000b0
 8003c74:	20000508 	.word	0x20000508

08003c78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c78:	480d      	ldr	r0, [pc, #52]	; (8003cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c7a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003c7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c80:	480c      	ldr	r0, [pc, #48]	; (8003cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c82:	490d      	ldr	r1, [pc, #52]	; (8003cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c84:	4a0d      	ldr	r2, [pc, #52]	; (8003cbc <LoopForever+0xe>)
  movs r3, #0
 8003c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c88:	e002      	b.n	8003c90 <LoopCopyDataInit>

08003c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c8e:	3304      	adds	r3, #4

08003c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c94:	d3f9      	bcc.n	8003c8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c96:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c98:	4c0a      	ldr	r4, [pc, #40]	; (8003cc4 <LoopForever+0x16>)
  movs r3, #0
 8003c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c9c:	e001      	b.n	8003ca2 <LoopFillZerobss>

08003c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ca0:	3204      	adds	r2, #4

08003ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ca4:	d3fb      	bcc.n	8003c9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003ca6:	f000 f83b 	bl	8003d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003caa:	f7ff fcf9 	bl	80036a0 <main>

08003cae <LoopForever>:

LoopForever:
    b LoopForever
 8003cae:	e7fe      	b.n	8003cae <LoopForever>
  ldr   r0, =_estack
 8003cb0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cb8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003cbc:	080054fc 	.word	0x080054fc
  ldr r2, =_sbss
 8003cc0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8003cc4:	20000508 	.word	0x20000508

08003cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cc8:	e7fe      	b.n	8003cc8 <ADC1_2_IRQHandler>
	...

08003ccc <gcvt>:
 8003ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cce:	461c      	mov	r4, r3
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	4615      	mov	r5, r2
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	4606      	mov	r6, r0
 8003cda:	460f      	mov	r7, r1
 8003cdc:	f7fc fe80 	bl	80009e0 <__aeabi_dcmplt>
 8003ce0:	4623      	mov	r3, r4
 8003ce2:	b118      	cbz	r0, 8003cec <gcvt+0x20>
 8003ce4:	222d      	movs	r2, #45	; 0x2d
 8003ce6:	3d01      	subs	r5, #1
 8003ce8:	f803 2b01 	strb.w	r2, [r3], #1
 8003cec:	2267      	movs	r2, #103	; 0x67
 8003cee:	2100      	movs	r1, #0
 8003cf0:	e9cd 5300 	strd	r5, r3, [sp]
 8003cf4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8003cf8:	4905      	ldr	r1, [pc, #20]	; (8003d10 <gcvt+0x44>)
 8003cfa:	4632      	mov	r2, r6
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	6808      	ldr	r0, [r1, #0]
 8003d00:	f000 f8ae 	bl	8003e60 <_gcvt>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	bf14      	ite	ne
 8003d08:	4620      	movne	r0, r4
 8003d0a:	2000      	moveq	r0, #0
 8003d0c:	b005      	add	sp, #20
 8003d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d10:	20000020 	.word	0x20000020

08003d14 <__errno>:
 8003d14:	4b01      	ldr	r3, [pc, #4]	; (8003d1c <__errno+0x8>)
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000020 	.word	0x20000020

08003d20 <__libc_init_array>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	2500      	movs	r5, #0
 8003d24:	4e0c      	ldr	r6, [pc, #48]	; (8003d58 <__libc_init_array+0x38>)
 8003d26:	4c0d      	ldr	r4, [pc, #52]	; (8003d5c <__libc_init_array+0x3c>)
 8003d28:	1ba4      	subs	r4, r4, r6
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	42a5      	cmp	r5, r4
 8003d2e:	d109      	bne.n	8003d44 <__libc_init_array+0x24>
 8003d30:	f001 fb34 	bl	800539c <_init>
 8003d34:	2500      	movs	r5, #0
 8003d36:	4e0a      	ldr	r6, [pc, #40]	; (8003d60 <__libc_init_array+0x40>)
 8003d38:	4c0a      	ldr	r4, [pc, #40]	; (8003d64 <__libc_init_array+0x44>)
 8003d3a:	1ba4      	subs	r4, r4, r6
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	42a5      	cmp	r5, r4
 8003d40:	d105      	bne.n	8003d4e <__libc_init_array+0x2e>
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
 8003d44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d48:	4798      	blx	r3
 8003d4a:	3501      	adds	r5, #1
 8003d4c:	e7ee      	b.n	8003d2c <__libc_init_array+0xc>
 8003d4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d52:	4798      	blx	r3
 8003d54:	3501      	adds	r5, #1
 8003d56:	e7f2      	b.n	8003d3e <__libc_init_array+0x1e>
 8003d58:	080054f4 	.word	0x080054f4
 8003d5c:	080054f4 	.word	0x080054f4
 8003d60:	080054f4 	.word	0x080054f4
 8003d64:	080054f8 	.word	0x080054f8

08003d68 <memset>:
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4402      	add	r2, r0
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d100      	bne.n	8003d72 <memset+0xa>
 8003d70:	4770      	bx	lr
 8003d72:	f803 1b01 	strb.w	r1, [r3], #1
 8003d76:	e7f9      	b.n	8003d6c <memset+0x4>

08003d78 <print_e>:
 8003d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7a:	b08b      	sub	sp, #44	; 0x2c
 8003d7c:	460f      	mov	r7, r1
 8003d7e:	a908      	add	r1, sp, #32
 8003d80:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003d82:	9104      	str	r1, [sp, #16]
 8003d84:	a907      	add	r1, sp, #28
 8003d86:	9103      	str	r1, [sp, #12]
 8003d88:	a909      	add	r1, sp, #36	; 0x24
 8003d8a:	9102      	str	r1, [sp, #8]
 8003d8c:	1c61      	adds	r1, r4, #1
 8003d8e:	9101      	str	r1, [sp, #4]
 8003d90:	2102      	movs	r1, #2
 8003d92:	9100      	str	r1, [sp, #0]
 8003d94:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8003d98:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003d9a:	f000 fd35 	bl	8004808 <_dtoa_r>
 8003d9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003da2:	4601      	mov	r1, r0
 8003da4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003da6:	4298      	cmp	r0, r3
 8003da8:	d104      	bne.n	8003db4 <print_e+0x3c>
 8003daa:	4638      	mov	r0, r7
 8003dac:	f000 fc96 	bl	80046dc <strcpy>
 8003db0:	b00b      	add	sp, #44	; 0x2c
 8003db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003db4:	780b      	ldrb	r3, [r1, #0]
 8003db6:	703b      	strb	r3, [r7, #0]
 8003db8:	2d00      	cmp	r5, #0
 8003dba:	d142      	bne.n	8003e42 <print_e+0xca>
 8003dbc:	2c00      	cmp	r4, #0
 8003dbe:	d140      	bne.n	8003e42 <print_e+0xca>
 8003dc0:	1c7b      	adds	r3, r7, #1
 8003dc2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003dc6:	b10a      	cbz	r2, 8003dcc <print_e+0x54>
 8003dc8:	2c00      	cmp	r4, #0
 8003dca:	dc3e      	bgt.n	8003e4a <print_e+0xd2>
 8003dcc:	2e67      	cmp	r6, #103	; 0x67
 8003dce:	d043      	beq.n	8003e58 <print_e+0xe0>
 8003dd0:	2e47      	cmp	r6, #71	; 0x47
 8003dd2:	d043      	beq.n	8003e5c <print_e+0xe4>
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2730      	movs	r7, #48	; 0x30
 8003dd8:	191d      	adds	r5, r3, r4
 8003dda:	1aa9      	subs	r1, r5, r2
 8003ddc:	2900      	cmp	r1, #0
 8003dde:	dc38      	bgt.n	8003e52 <print_e+0xda>
 8003de0:	2c00      	cmp	r4, #0
 8003de2:	bfa8      	it	ge
 8003de4:	191b      	addge	r3, r3, r4
 8003de6:	1e41      	subs	r1, r0, #1
 8003de8:	2900      	cmp	r1, #0
 8003dea:	9109      	str	r1, [sp, #36]	; 0x24
 8003dec:	461a      	mov	r2, r3
 8003dee:	bfb7      	itett	lt
 8003df0:	212d      	movlt	r1, #45	; 0x2d
 8003df2:	212b      	movge	r1, #43	; 0x2b
 8003df4:	f1c0 0001 	rsblt	r0, r0, #1
 8003df8:	9009      	strlt	r0, [sp, #36]	; 0x24
 8003dfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dfc:	f802 6b02 	strb.w	r6, [r2], #2
 8003e00:	bfb4      	ite	lt
 8003e02:	7059      	strblt	r1, [r3, #1]
 8003e04:	7059      	strbge	r1, [r3, #1]
 8003e06:	2863      	cmp	r0, #99	; 0x63
 8003e08:	dd0b      	ble.n	8003e22 <print_e+0xaa>
 8003e0a:	2164      	movs	r1, #100	; 0x64
 8003e0c:	fb90 f1f1 	sdiv	r1, r0, r1
 8003e10:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8003e14:	1cda      	adds	r2, r3, #3
 8003e16:	709c      	strb	r4, [r3, #2]
 8003e18:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003e1c:	fb03 0101 	mla	r1, r3, r1, r0
 8003e20:	9109      	str	r1, [sp, #36]	; 0x24
 8003e22:	230a      	movs	r3, #10
 8003e24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e26:	fb91 f3f3 	sdiv	r3, r1, r3
 8003e2a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003e2e:	7010      	strb	r0, [r2, #0]
 8003e30:	f06f 0009 	mvn.w	r0, #9
 8003e34:	fb00 1303 	mla	r3, r0, r3, r1
 8003e38:	3330      	adds	r3, #48	; 0x30
 8003e3a:	7053      	strb	r3, [r2, #1]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	7093      	strb	r3, [r2, #2]
 8003e40:	e7b6      	b.n	8003db0 <print_e+0x38>
 8003e42:	222e      	movs	r2, #46	; 0x2e
 8003e44:	1cbb      	adds	r3, r7, #2
 8003e46:	707a      	strb	r2, [r7, #1]
 8003e48:	e7bb      	b.n	8003dc2 <print_e+0x4a>
 8003e4a:	f803 2b01 	strb.w	r2, [r3], #1
 8003e4e:	3c01      	subs	r4, #1
 8003e50:	e7b7      	b.n	8003dc2 <print_e+0x4a>
 8003e52:	f802 7b01 	strb.w	r7, [r2], #1
 8003e56:	e7c0      	b.n	8003dda <print_e+0x62>
 8003e58:	2665      	movs	r6, #101	; 0x65
 8003e5a:	e7c4      	b.n	8003de6 <print_e+0x6e>
 8003e5c:	2645      	movs	r6, #69	; 0x45
 8003e5e:	e7c2      	b.n	8003de6 <print_e+0x6e>

08003e60 <_gcvt>:
 8003e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e64:	4617      	mov	r7, r2
 8003e66:	461d      	mov	r5, r3
 8003e68:	b08b      	sub	sp, #44	; 0x2c
 8003e6a:	4681      	mov	r9, r0
 8003e6c:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 8003e70:	2200      	movs	r2, #0
 8003e72:	2300      	movs	r3, #0
 8003e74:	4638      	mov	r0, r7
 8003e76:	4629      	mov	r1, r5
 8003e78:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8003e7c:	f7fc fdb0 	bl	80009e0 <__aeabi_dcmplt>
 8003e80:	b108      	cbz	r0, 8003e86 <_gcvt+0x26>
 8003e82:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8003e86:	2200      	movs	r2, #0
 8003e88:	2300      	movs	r3, #0
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	f7fc fd9d 	bl	80009cc <__aeabi_dcmpeq>
 8003e92:	b138      	cbz	r0, 8003ea4 <_gcvt+0x44>
 8003e94:	2330      	movs	r3, #48	; 0x30
 8003e96:	7023      	strb	r3, [r4, #0]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	7063      	strb	r3, [r4, #1]
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	b00b      	add	sp, #44	; 0x2c
 8003ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ea4:	a352      	add	r3, pc, #328	; (adr r3, 8003ff0 <_gcvt+0x190>)
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	4638      	mov	r0, r7
 8003eac:	4629      	mov	r1, r5
 8003eae:	f7fc fda1 	bl	80009f4 <__aeabi_dcmple>
 8003eb2:	b168      	cbz	r0, 8003ed0 <_gcvt+0x70>
 8003eb4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8003eb8:	3e01      	subs	r6, #1
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	f8cd 8008 	str.w	r8, [sp, #8]
 8003ec0:	9600      	str	r6, [sp, #0]
 8003ec2:	463a      	mov	r2, r7
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	4648      	mov	r0, r9
 8003eca:	f7ff ff55 	bl	8003d78 <print_e>
 8003ece:	e7e5      	b.n	8003e9c <_gcvt+0x3c>
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f000 fb6f 	bl	80045b4 <_mprec_log10>
 8003ed6:	463a      	mov	r2, r7
 8003ed8:	462b      	mov	r3, r5
 8003eda:	f7fc fd8b 	bl	80009f4 <__aeabi_dcmple>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d1e8      	bne.n	8003eb4 <_gcvt+0x54>
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	4b44      	ldr	r3, [pc, #272]	; (8003ff8 <_gcvt+0x198>)
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	4638      	mov	r0, r7
 8003eea:	f7fc fd79 	bl	80009e0 <__aeabi_dcmplt>
 8003eee:	a909      	add	r1, sp, #36	; 0x24
 8003ef0:	aa08      	add	r2, sp, #32
 8003ef2:	ab07      	add	r3, sp, #28
 8003ef4:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8003ef8:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8003efc:	b388      	cbz	r0, 8003f62 <_gcvt+0x102>
 8003efe:	2303      	movs	r3, #3
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	463a      	mov	r2, r7
 8003f04:	462b      	mov	r3, r5
 8003f06:	4648      	mov	r0, r9
 8003f08:	f000 fc7e 	bl	8004808 <_dtoa_r>
 8003f0c:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f10:	9a07      	ldr	r2, [sp, #28]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d027      	beq.n	8003f66 <_gcvt+0x106>
 8003f16:	4623      	mov	r3, r4
 8003f18:	4426      	add	r6, r4
 8003f1a:	4607      	mov	r7, r0
 8003f1c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003f20:	1af2      	subs	r2, r6, r3
 8003f22:	9d07      	ldr	r5, [sp, #28]
 8003f24:	b349      	cbz	r1, 8003f7a <_gcvt+0x11a>
 8003f26:	2d00      	cmp	r5, #0
 8003f28:	dc22      	bgt.n	8003f70 <_gcvt+0x110>
 8003f2a:	f1b8 0f00 	cmp.w	r8, #0
 8003f2e:	d102      	bne.n	8003f36 <_gcvt+0xd6>
 8003f30:	7839      	ldrb	r1, [r7, #0]
 8003f32:	2900      	cmp	r1, #0
 8003f34:	d049      	beq.n	8003fca <_gcvt+0x16a>
 8003f36:	429c      	cmp	r4, r3
 8003f38:	bf04      	itt	eq
 8003f3a:	2130      	moveq	r1, #48	; 0x30
 8003f3c:	7021      	strbeq	r1, [r4, #0]
 8003f3e:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f04f 0630 	mov.w	r6, #48	; 0x30
 8003f4a:	bf08      	it	eq
 8003f4c:	1c63      	addeq	r3, r4, #1
 8003f4e:	7019      	strb	r1, [r3, #0]
 8003f50:	9907      	ldr	r1, [sp, #28]
 8003f52:	3301      	adds	r3, #1
 8003f54:	2900      	cmp	r1, #0
 8003f56:	460d      	mov	r5, r1
 8003f58:	db24      	blt.n	8003fa4 <_gcvt+0x144>
 8003f5a:	b100      	cbz	r0, 8003f5e <_gcvt+0xfe>
 8003f5c:	9107      	str	r1, [sp, #28]
 8003f5e:	1e79      	subs	r1, r7, #1
 8003f60:	e02b      	b.n	8003fba <_gcvt+0x15a>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e7cc      	b.n	8003f00 <_gcvt+0xa0>
 8003f66:	4601      	mov	r1, r0
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f000 fbb7 	bl	80046dc <strcpy>
 8003f6e:	e795      	b.n	8003e9c <_gcvt+0x3c>
 8003f70:	3d01      	subs	r5, #1
 8003f72:	f803 1b01 	strb.w	r1, [r3], #1
 8003f76:	9507      	str	r5, [sp, #28]
 8003f78:	e7cf      	b.n	8003f1a <_gcvt+0xba>
 8003f7a:	1aad      	subs	r5, r5, r2
 8003f7c:	2630      	movs	r6, #48	; 0x30
 8003f7e:	e005      	b.n	8003f8c <_gcvt+0x12c>
 8003f80:	2a00      	cmp	r2, #0
 8003f82:	dd06      	ble.n	8003f92 <_gcvt+0x132>
 8003f84:	2101      	movs	r1, #1
 8003f86:	f803 6b01 	strb.w	r6, [r3], #1
 8003f8a:	3a01      	subs	r2, #1
 8003f8c:	18a8      	adds	r0, r5, r2
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	dcf6      	bgt.n	8003f80 <_gcvt+0x120>
 8003f92:	2900      	cmp	r1, #0
 8003f94:	d0c9      	beq.n	8003f2a <_gcvt+0xca>
 8003f96:	9007      	str	r0, [sp, #28]
 8003f98:	e7c7      	b.n	8003f2a <_gcvt+0xca>
 8003f9a:	f803 6b01 	strb.w	r6, [r3], #1
 8003f9e:	3a01      	subs	r2, #1
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	e7d7      	b.n	8003f54 <_gcvt+0xf4>
 8003fa4:	2a00      	cmp	r2, #0
 8003fa6:	f101 0101 	add.w	r1, r1, #1
 8003faa:	dcf6      	bgt.n	8003f9a <_gcvt+0x13a>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d0d6      	beq.n	8003f5e <_gcvt+0xfe>
 8003fb0:	9507      	str	r5, [sp, #28]
 8003fb2:	e7d4      	b.n	8003f5e <_gcvt+0xfe>
 8003fb4:	f803 0b01 	strb.w	r0, [r3], #1
 8003fb8:	3a01      	subs	r2, #1
 8003fba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003fbe:	b108      	cbz	r0, 8003fc4 <_gcvt+0x164>
 8003fc0:	2a00      	cmp	r2, #0
 8003fc2:	dcf7      	bgt.n	8003fb4 <_gcvt+0x154>
 8003fc4:	f1b8 0f00 	cmp.w	r8, #0
 8003fc8:	d10b      	bne.n	8003fe2 <_gcvt+0x182>
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	e765      	b.n	8003e9c <_gcvt+0x3c>
 8003fd0:	f801 6b01 	strb.w	r6, [r1], #1
 8003fd4:	1a68      	subs	r0, r5, r1
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	dcfa      	bgt.n	8003fd0 <_gcvt+0x170>
 8003fda:	2a00      	cmp	r2, #0
 8003fdc:	bfa8      	it	ge
 8003fde:	189b      	addge	r3, r3, r2
 8003fe0:	e7f3      	b.n	8003fca <_gcvt+0x16a>
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	189d      	adds	r5, r3, r2
 8003fe6:	2630      	movs	r6, #48	; 0x30
 8003fe8:	e7f4      	b.n	8003fd4 <_gcvt+0x174>
 8003fea:	bf00      	nop
 8003fec:	f3af 8000 	nop.w
 8003ff0:	eb1c432d 	.word	0xeb1c432d
 8003ff4:	3f1a36e2 	.word	0x3f1a36e2
 8003ff8:	3ff00000 	.word	0x3ff00000

08003ffc <_Balloc>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004000:	4604      	mov	r4, r0
 8004002:	460e      	mov	r6, r1
 8004004:	b93d      	cbnz	r5, 8004016 <_Balloc+0x1a>
 8004006:	2010      	movs	r0, #16
 8004008:	f001 f9b2 	bl	8005370 <malloc>
 800400c:	6260      	str	r0, [r4, #36]	; 0x24
 800400e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004012:	6005      	str	r5, [r0, #0]
 8004014:	60c5      	str	r5, [r0, #12]
 8004016:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004018:	68eb      	ldr	r3, [r5, #12]
 800401a:	b183      	cbz	r3, 800403e <_Balloc+0x42>
 800401c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004024:	b9b8      	cbnz	r0, 8004056 <_Balloc+0x5a>
 8004026:	2101      	movs	r1, #1
 8004028:	fa01 f506 	lsl.w	r5, r1, r6
 800402c:	1d6a      	adds	r2, r5, #5
 800402e:	0092      	lsls	r2, r2, #2
 8004030:	4620      	mov	r0, r4
 8004032:	f000 fadb 	bl	80045ec <_calloc_r>
 8004036:	b160      	cbz	r0, 8004052 <_Balloc+0x56>
 8004038:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800403c:	e00e      	b.n	800405c <_Balloc+0x60>
 800403e:	2221      	movs	r2, #33	; 0x21
 8004040:	2104      	movs	r1, #4
 8004042:	4620      	mov	r0, r4
 8004044:	f000 fad2 	bl	80045ec <_calloc_r>
 8004048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800404a:	60e8      	str	r0, [r5, #12]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e4      	bne.n	800401c <_Balloc+0x20>
 8004052:	2000      	movs	r0, #0
 8004054:	bd70      	pop	{r4, r5, r6, pc}
 8004056:	6802      	ldr	r2, [r0, #0]
 8004058:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800405c:	2300      	movs	r3, #0
 800405e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004062:	e7f7      	b.n	8004054 <_Balloc+0x58>

08004064 <_Bfree>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004068:	4606      	mov	r6, r0
 800406a:	460d      	mov	r5, r1
 800406c:	b93c      	cbnz	r4, 800407e <_Bfree+0x1a>
 800406e:	2010      	movs	r0, #16
 8004070:	f001 f97e 	bl	8005370 <malloc>
 8004074:	6270      	str	r0, [r6, #36]	; 0x24
 8004076:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800407a:	6004      	str	r4, [r0, #0]
 800407c:	60c4      	str	r4, [r0, #12]
 800407e:	b13d      	cbz	r5, 8004090 <_Bfree+0x2c>
 8004080:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004082:	686a      	ldr	r2, [r5, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800408a:	6029      	str	r1, [r5, #0]
 800408c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004090:	bd70      	pop	{r4, r5, r6, pc}

08004092 <__multadd>:
 8004092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004096:	461f      	mov	r7, r3
 8004098:	4606      	mov	r6, r0
 800409a:	460c      	mov	r4, r1
 800409c:	2300      	movs	r3, #0
 800409e:	690d      	ldr	r5, [r1, #16]
 80040a0:	f101 0c14 	add.w	ip, r1, #20
 80040a4:	f8dc 0000 	ldr.w	r0, [ip]
 80040a8:	3301      	adds	r3, #1
 80040aa:	b281      	uxth	r1, r0
 80040ac:	fb02 7101 	mla	r1, r2, r1, r7
 80040b0:	0c00      	lsrs	r0, r0, #16
 80040b2:	0c0f      	lsrs	r7, r1, #16
 80040b4:	fb02 7000 	mla	r0, r2, r0, r7
 80040b8:	b289      	uxth	r1, r1
 80040ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80040be:	429d      	cmp	r5, r3
 80040c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80040c4:	f84c 1b04 	str.w	r1, [ip], #4
 80040c8:	dcec      	bgt.n	80040a4 <__multadd+0x12>
 80040ca:	b1d7      	cbz	r7, 8004102 <__multadd+0x70>
 80040cc:	68a3      	ldr	r3, [r4, #8]
 80040ce:	42ab      	cmp	r3, r5
 80040d0:	dc12      	bgt.n	80040f8 <__multadd+0x66>
 80040d2:	6861      	ldr	r1, [r4, #4]
 80040d4:	4630      	mov	r0, r6
 80040d6:	3101      	adds	r1, #1
 80040d8:	f7ff ff90 	bl	8003ffc <_Balloc>
 80040dc:	4680      	mov	r8, r0
 80040de:	6922      	ldr	r2, [r4, #16]
 80040e0:	f104 010c 	add.w	r1, r4, #12
 80040e4:	3202      	adds	r2, #2
 80040e6:	0092      	lsls	r2, r2, #2
 80040e8:	300c      	adds	r0, #12
 80040ea:	f001 f949 	bl	8005380 <memcpy>
 80040ee:	4621      	mov	r1, r4
 80040f0:	4630      	mov	r0, r6
 80040f2:	f7ff ffb7 	bl	8004064 <_Bfree>
 80040f6:	4644      	mov	r4, r8
 80040f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80040fc:	3501      	adds	r5, #1
 80040fe:	615f      	str	r7, [r3, #20]
 8004100:	6125      	str	r5, [r4, #16]
 8004102:	4620      	mov	r0, r4
 8004104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004108 <__hi0bits>:
 8004108:	0c02      	lsrs	r2, r0, #16
 800410a:	0412      	lsls	r2, r2, #16
 800410c:	4603      	mov	r3, r0
 800410e:	b9b2      	cbnz	r2, 800413e <__hi0bits+0x36>
 8004110:	0403      	lsls	r3, r0, #16
 8004112:	2010      	movs	r0, #16
 8004114:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004118:	bf04      	itt	eq
 800411a:	021b      	lsleq	r3, r3, #8
 800411c:	3008      	addeq	r0, #8
 800411e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004122:	bf04      	itt	eq
 8004124:	011b      	lsleq	r3, r3, #4
 8004126:	3004      	addeq	r0, #4
 8004128:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800412c:	bf04      	itt	eq
 800412e:	009b      	lsleq	r3, r3, #2
 8004130:	3002      	addeq	r0, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	db06      	blt.n	8004144 <__hi0bits+0x3c>
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	d503      	bpl.n	8004142 <__hi0bits+0x3a>
 800413a:	3001      	adds	r0, #1
 800413c:	4770      	bx	lr
 800413e:	2000      	movs	r0, #0
 8004140:	e7e8      	b.n	8004114 <__hi0bits+0xc>
 8004142:	2020      	movs	r0, #32
 8004144:	4770      	bx	lr

08004146 <__lo0bits>:
 8004146:	6803      	ldr	r3, [r0, #0]
 8004148:	4601      	mov	r1, r0
 800414a:	f013 0207 	ands.w	r2, r3, #7
 800414e:	d00b      	beq.n	8004168 <__lo0bits+0x22>
 8004150:	07da      	lsls	r2, r3, #31
 8004152:	d423      	bmi.n	800419c <__lo0bits+0x56>
 8004154:	0798      	lsls	r0, r3, #30
 8004156:	bf49      	itett	mi
 8004158:	085b      	lsrmi	r3, r3, #1
 800415a:	089b      	lsrpl	r3, r3, #2
 800415c:	2001      	movmi	r0, #1
 800415e:	600b      	strmi	r3, [r1, #0]
 8004160:	bf5c      	itt	pl
 8004162:	600b      	strpl	r3, [r1, #0]
 8004164:	2002      	movpl	r0, #2
 8004166:	4770      	bx	lr
 8004168:	b298      	uxth	r0, r3
 800416a:	b9a8      	cbnz	r0, 8004198 <__lo0bits+0x52>
 800416c:	2010      	movs	r0, #16
 800416e:	0c1b      	lsrs	r3, r3, #16
 8004170:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004174:	bf04      	itt	eq
 8004176:	0a1b      	lsreq	r3, r3, #8
 8004178:	3008      	addeq	r0, #8
 800417a:	071a      	lsls	r2, r3, #28
 800417c:	bf04      	itt	eq
 800417e:	091b      	lsreq	r3, r3, #4
 8004180:	3004      	addeq	r0, #4
 8004182:	079a      	lsls	r2, r3, #30
 8004184:	bf04      	itt	eq
 8004186:	089b      	lsreq	r3, r3, #2
 8004188:	3002      	addeq	r0, #2
 800418a:	07da      	lsls	r2, r3, #31
 800418c:	d402      	bmi.n	8004194 <__lo0bits+0x4e>
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	d006      	beq.n	80041a0 <__lo0bits+0x5a>
 8004192:	3001      	adds	r0, #1
 8004194:	600b      	str	r3, [r1, #0]
 8004196:	4770      	bx	lr
 8004198:	4610      	mov	r0, r2
 800419a:	e7e9      	b.n	8004170 <__lo0bits+0x2a>
 800419c:	2000      	movs	r0, #0
 800419e:	4770      	bx	lr
 80041a0:	2020      	movs	r0, #32
 80041a2:	4770      	bx	lr

080041a4 <__i2b>:
 80041a4:	b510      	push	{r4, lr}
 80041a6:	460c      	mov	r4, r1
 80041a8:	2101      	movs	r1, #1
 80041aa:	f7ff ff27 	bl	8003ffc <_Balloc>
 80041ae:	2201      	movs	r2, #1
 80041b0:	6144      	str	r4, [r0, #20]
 80041b2:	6102      	str	r2, [r0, #16]
 80041b4:	bd10      	pop	{r4, pc}

080041b6 <__multiply>:
 80041b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	4614      	mov	r4, r2
 80041bc:	690a      	ldr	r2, [r1, #16]
 80041be:	6923      	ldr	r3, [r4, #16]
 80041c0:	4688      	mov	r8, r1
 80041c2:	429a      	cmp	r2, r3
 80041c4:	bfbe      	ittt	lt
 80041c6:	460b      	movlt	r3, r1
 80041c8:	46a0      	movlt	r8, r4
 80041ca:	461c      	movlt	r4, r3
 80041cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80041d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80041d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80041d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80041dc:	eb07 0609 	add.w	r6, r7, r9
 80041e0:	42b3      	cmp	r3, r6
 80041e2:	bfb8      	it	lt
 80041e4:	3101      	addlt	r1, #1
 80041e6:	f7ff ff09 	bl	8003ffc <_Balloc>
 80041ea:	f100 0514 	add.w	r5, r0, #20
 80041ee:	462b      	mov	r3, r5
 80041f0:	2200      	movs	r2, #0
 80041f2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80041f6:	4573      	cmp	r3, lr
 80041f8:	d316      	bcc.n	8004228 <__multiply+0x72>
 80041fa:	f104 0214 	add.w	r2, r4, #20
 80041fe:	f108 0114 	add.w	r1, r8, #20
 8004202:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004206:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	9b00      	ldr	r3, [sp, #0]
 800420e:	9201      	str	r2, [sp, #4]
 8004210:	4293      	cmp	r3, r2
 8004212:	d80c      	bhi.n	800422e <__multiply+0x78>
 8004214:	2e00      	cmp	r6, #0
 8004216:	dd03      	ble.n	8004220 <__multiply+0x6a>
 8004218:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800421c:	2b00      	cmp	r3, #0
 800421e:	d05d      	beq.n	80042dc <__multiply+0x126>
 8004220:	6106      	str	r6, [r0, #16]
 8004222:	b003      	add	sp, #12
 8004224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004228:	f843 2b04 	str.w	r2, [r3], #4
 800422c:	e7e3      	b.n	80041f6 <__multiply+0x40>
 800422e:	f8b2 b000 	ldrh.w	fp, [r2]
 8004232:	f1bb 0f00 	cmp.w	fp, #0
 8004236:	d023      	beq.n	8004280 <__multiply+0xca>
 8004238:	4689      	mov	r9, r1
 800423a:	46ac      	mov	ip, r5
 800423c:	f04f 0800 	mov.w	r8, #0
 8004240:	f859 4b04 	ldr.w	r4, [r9], #4
 8004244:	f8dc a000 	ldr.w	sl, [ip]
 8004248:	b2a3      	uxth	r3, r4
 800424a:	fa1f fa8a 	uxth.w	sl, sl
 800424e:	fb0b a303 	mla	r3, fp, r3, sl
 8004252:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004256:	f8dc 4000 	ldr.w	r4, [ip]
 800425a:	4443      	add	r3, r8
 800425c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004260:	fb0b 840a 	mla	r4, fp, sl, r8
 8004264:	46e2      	mov	sl, ip
 8004266:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800426a:	b29b      	uxth	r3, r3
 800426c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004270:	454f      	cmp	r7, r9
 8004272:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004276:	f84a 3b04 	str.w	r3, [sl], #4
 800427a:	d82b      	bhi.n	80042d4 <__multiply+0x11e>
 800427c:	f8cc 8004 	str.w	r8, [ip, #4]
 8004280:	9b01      	ldr	r3, [sp, #4]
 8004282:	3204      	adds	r2, #4
 8004284:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004288:	f1ba 0f00 	cmp.w	sl, #0
 800428c:	d020      	beq.n	80042d0 <__multiply+0x11a>
 800428e:	4689      	mov	r9, r1
 8004290:	46a8      	mov	r8, r5
 8004292:	f04f 0b00 	mov.w	fp, #0
 8004296:	682b      	ldr	r3, [r5, #0]
 8004298:	f8b9 c000 	ldrh.w	ip, [r9]
 800429c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	fb0a 440c 	mla	r4, sl, ip, r4
 80042a6:	46c4      	mov	ip, r8
 80042a8:	445c      	add	r4, fp
 80042aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80042ae:	f84c 3b04 	str.w	r3, [ip], #4
 80042b2:	f859 3b04 	ldr.w	r3, [r9], #4
 80042b6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80042ba:	0c1b      	lsrs	r3, r3, #16
 80042bc:	fb0a b303 	mla	r3, sl, r3, fp
 80042c0:	454f      	cmp	r7, r9
 80042c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80042c6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80042ca:	d805      	bhi.n	80042d8 <__multiply+0x122>
 80042cc:	f8c8 3004 	str.w	r3, [r8, #4]
 80042d0:	3504      	adds	r5, #4
 80042d2:	e79b      	b.n	800420c <__multiply+0x56>
 80042d4:	46d4      	mov	ip, sl
 80042d6:	e7b3      	b.n	8004240 <__multiply+0x8a>
 80042d8:	46e0      	mov	r8, ip
 80042da:	e7dd      	b.n	8004298 <__multiply+0xe2>
 80042dc:	3e01      	subs	r6, #1
 80042de:	e799      	b.n	8004214 <__multiply+0x5e>

080042e0 <__pow5mult>:
 80042e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e4:	4615      	mov	r5, r2
 80042e6:	f012 0203 	ands.w	r2, r2, #3
 80042ea:	4606      	mov	r6, r0
 80042ec:	460f      	mov	r7, r1
 80042ee:	d007      	beq.n	8004300 <__pow5mult+0x20>
 80042f0:	4c21      	ldr	r4, [pc, #132]	; (8004378 <__pow5mult+0x98>)
 80042f2:	3a01      	subs	r2, #1
 80042f4:	2300      	movs	r3, #0
 80042f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80042fa:	f7ff feca 	bl	8004092 <__multadd>
 80042fe:	4607      	mov	r7, r0
 8004300:	10ad      	asrs	r5, r5, #2
 8004302:	d035      	beq.n	8004370 <__pow5mult+0x90>
 8004304:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004306:	b93c      	cbnz	r4, 8004318 <__pow5mult+0x38>
 8004308:	2010      	movs	r0, #16
 800430a:	f001 f831 	bl	8005370 <malloc>
 800430e:	6270      	str	r0, [r6, #36]	; 0x24
 8004310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004314:	6004      	str	r4, [r0, #0]
 8004316:	60c4      	str	r4, [r0, #12]
 8004318:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800431c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004320:	b94c      	cbnz	r4, 8004336 <__pow5mult+0x56>
 8004322:	f240 2171 	movw	r1, #625	; 0x271
 8004326:	4630      	mov	r0, r6
 8004328:	f7ff ff3c 	bl	80041a4 <__i2b>
 800432c:	2300      	movs	r3, #0
 800432e:	4604      	mov	r4, r0
 8004330:	f8c8 0008 	str.w	r0, [r8, #8]
 8004334:	6003      	str	r3, [r0, #0]
 8004336:	f04f 0800 	mov.w	r8, #0
 800433a:	07eb      	lsls	r3, r5, #31
 800433c:	d50a      	bpl.n	8004354 <__pow5mult+0x74>
 800433e:	4639      	mov	r1, r7
 8004340:	4622      	mov	r2, r4
 8004342:	4630      	mov	r0, r6
 8004344:	f7ff ff37 	bl	80041b6 <__multiply>
 8004348:	4681      	mov	r9, r0
 800434a:	4639      	mov	r1, r7
 800434c:	4630      	mov	r0, r6
 800434e:	f7ff fe89 	bl	8004064 <_Bfree>
 8004352:	464f      	mov	r7, r9
 8004354:	106d      	asrs	r5, r5, #1
 8004356:	d00b      	beq.n	8004370 <__pow5mult+0x90>
 8004358:	6820      	ldr	r0, [r4, #0]
 800435a:	b938      	cbnz	r0, 800436c <__pow5mult+0x8c>
 800435c:	4622      	mov	r2, r4
 800435e:	4621      	mov	r1, r4
 8004360:	4630      	mov	r0, r6
 8004362:	f7ff ff28 	bl	80041b6 <__multiply>
 8004366:	6020      	str	r0, [r4, #0]
 8004368:	f8c0 8000 	str.w	r8, [r0]
 800436c:	4604      	mov	r4, r0
 800436e:	e7e4      	b.n	800433a <__pow5mult+0x5a>
 8004370:	4638      	mov	r0, r7
 8004372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004376:	bf00      	nop
 8004378:	080054d8 	.word	0x080054d8

0800437c <__lshift>:
 800437c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004380:	460c      	mov	r4, r1
 8004382:	4607      	mov	r7, r0
 8004384:	4616      	mov	r6, r2
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800438c:	eb0a 0903 	add.w	r9, sl, r3
 8004390:	6849      	ldr	r1, [r1, #4]
 8004392:	68a3      	ldr	r3, [r4, #8]
 8004394:	f109 0501 	add.w	r5, r9, #1
 8004398:	42ab      	cmp	r3, r5
 800439a:	db32      	blt.n	8004402 <__lshift+0x86>
 800439c:	4638      	mov	r0, r7
 800439e:	f7ff fe2d 	bl	8003ffc <_Balloc>
 80043a2:	2300      	movs	r3, #0
 80043a4:	4680      	mov	r8, r0
 80043a6:	461a      	mov	r2, r3
 80043a8:	f100 0114 	add.w	r1, r0, #20
 80043ac:	4553      	cmp	r3, sl
 80043ae:	db2b      	blt.n	8004408 <__lshift+0x8c>
 80043b0:	6920      	ldr	r0, [r4, #16]
 80043b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80043b6:	f104 0314 	add.w	r3, r4, #20
 80043ba:	f016 021f 	ands.w	r2, r6, #31
 80043be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80043c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80043c6:	d025      	beq.n	8004414 <__lshift+0x98>
 80043c8:	2000      	movs	r0, #0
 80043ca:	f1c2 0e20 	rsb	lr, r2, #32
 80043ce:	468a      	mov	sl, r1
 80043d0:	681e      	ldr	r6, [r3, #0]
 80043d2:	4096      	lsls	r6, r2
 80043d4:	4330      	orrs	r0, r6
 80043d6:	f84a 0b04 	str.w	r0, [sl], #4
 80043da:	f853 0b04 	ldr.w	r0, [r3], #4
 80043de:	459c      	cmp	ip, r3
 80043e0:	fa20 f00e 	lsr.w	r0, r0, lr
 80043e4:	d814      	bhi.n	8004410 <__lshift+0x94>
 80043e6:	6048      	str	r0, [r1, #4]
 80043e8:	b108      	cbz	r0, 80043ee <__lshift+0x72>
 80043ea:	f109 0502 	add.w	r5, r9, #2
 80043ee:	3d01      	subs	r5, #1
 80043f0:	4638      	mov	r0, r7
 80043f2:	f8c8 5010 	str.w	r5, [r8, #16]
 80043f6:	4621      	mov	r1, r4
 80043f8:	f7ff fe34 	bl	8004064 <_Bfree>
 80043fc:	4640      	mov	r0, r8
 80043fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004402:	3101      	adds	r1, #1
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	e7c7      	b.n	8004398 <__lshift+0x1c>
 8004408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800440c:	3301      	adds	r3, #1
 800440e:	e7cd      	b.n	80043ac <__lshift+0x30>
 8004410:	4651      	mov	r1, sl
 8004412:	e7dc      	b.n	80043ce <__lshift+0x52>
 8004414:	3904      	subs	r1, #4
 8004416:	f853 2b04 	ldr.w	r2, [r3], #4
 800441a:	459c      	cmp	ip, r3
 800441c:	f841 2f04 	str.w	r2, [r1, #4]!
 8004420:	d8f9      	bhi.n	8004416 <__lshift+0x9a>
 8004422:	e7e4      	b.n	80043ee <__lshift+0x72>

08004424 <__mcmp>:
 8004424:	6903      	ldr	r3, [r0, #16]
 8004426:	690a      	ldr	r2, [r1, #16]
 8004428:	b530      	push	{r4, r5, lr}
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	d10c      	bne.n	8004448 <__mcmp+0x24>
 800442e:	0092      	lsls	r2, r2, #2
 8004430:	3014      	adds	r0, #20
 8004432:	3114      	adds	r1, #20
 8004434:	1884      	adds	r4, r0, r2
 8004436:	4411      	add	r1, r2
 8004438:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800443c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004440:	4295      	cmp	r5, r2
 8004442:	d003      	beq.n	800444c <__mcmp+0x28>
 8004444:	d305      	bcc.n	8004452 <__mcmp+0x2e>
 8004446:	2301      	movs	r3, #1
 8004448:	4618      	mov	r0, r3
 800444a:	bd30      	pop	{r4, r5, pc}
 800444c:	42a0      	cmp	r0, r4
 800444e:	d3f3      	bcc.n	8004438 <__mcmp+0x14>
 8004450:	e7fa      	b.n	8004448 <__mcmp+0x24>
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	e7f7      	b.n	8004448 <__mcmp+0x24>

08004458 <__mdiff>:
 8004458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800445c:	460d      	mov	r5, r1
 800445e:	4607      	mov	r7, r0
 8004460:	4611      	mov	r1, r2
 8004462:	4628      	mov	r0, r5
 8004464:	4614      	mov	r4, r2
 8004466:	f7ff ffdd 	bl	8004424 <__mcmp>
 800446a:	1e06      	subs	r6, r0, #0
 800446c:	d108      	bne.n	8004480 <__mdiff+0x28>
 800446e:	4631      	mov	r1, r6
 8004470:	4638      	mov	r0, r7
 8004472:	f7ff fdc3 	bl	8003ffc <_Balloc>
 8004476:	2301      	movs	r3, #1
 8004478:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800447c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004480:	bfa4      	itt	ge
 8004482:	4623      	movge	r3, r4
 8004484:	462c      	movge	r4, r5
 8004486:	4638      	mov	r0, r7
 8004488:	6861      	ldr	r1, [r4, #4]
 800448a:	bfa6      	itte	ge
 800448c:	461d      	movge	r5, r3
 800448e:	2600      	movge	r6, #0
 8004490:	2601      	movlt	r6, #1
 8004492:	f7ff fdb3 	bl	8003ffc <_Balloc>
 8004496:	f04f 0e00 	mov.w	lr, #0
 800449a:	60c6      	str	r6, [r0, #12]
 800449c:	692b      	ldr	r3, [r5, #16]
 800449e:	6926      	ldr	r6, [r4, #16]
 80044a0:	f104 0214 	add.w	r2, r4, #20
 80044a4:	f105 0914 	add.w	r9, r5, #20
 80044a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80044ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80044b0:	f100 0114 	add.w	r1, r0, #20
 80044b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80044b8:	f859 5b04 	ldr.w	r5, [r9], #4
 80044bc:	fa1f f38a 	uxth.w	r3, sl
 80044c0:	4473      	add	r3, lr
 80044c2:	b2ac      	uxth	r4, r5
 80044c4:	1b1b      	subs	r3, r3, r4
 80044c6:	0c2c      	lsrs	r4, r5, #16
 80044c8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80044cc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80044d6:	45c8      	cmp	r8, r9
 80044d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80044dc:	4694      	mov	ip, r2
 80044de:	f841 4b04 	str.w	r4, [r1], #4
 80044e2:	d8e7      	bhi.n	80044b4 <__mdiff+0x5c>
 80044e4:	45bc      	cmp	ip, r7
 80044e6:	d304      	bcc.n	80044f2 <__mdiff+0x9a>
 80044e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80044ec:	b183      	cbz	r3, 8004510 <__mdiff+0xb8>
 80044ee:	6106      	str	r6, [r0, #16]
 80044f0:	e7c4      	b.n	800447c <__mdiff+0x24>
 80044f2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80044f6:	b2a2      	uxth	r2, r4
 80044f8:	4472      	add	r2, lr
 80044fa:	1413      	asrs	r3, r2, #16
 80044fc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004500:	b292      	uxth	r2, r2
 8004502:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004506:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800450a:	f841 2b04 	str.w	r2, [r1], #4
 800450e:	e7e9      	b.n	80044e4 <__mdiff+0x8c>
 8004510:	3e01      	subs	r6, #1
 8004512:	e7e9      	b.n	80044e8 <__mdiff+0x90>

08004514 <__d2b>:
 8004514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004518:	461c      	mov	r4, r3
 800451a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800451e:	2101      	movs	r1, #1
 8004520:	4690      	mov	r8, r2
 8004522:	f7ff fd6b 	bl	8003ffc <_Balloc>
 8004526:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800452a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800452e:	4607      	mov	r7, r0
 8004530:	bb34      	cbnz	r4, 8004580 <__d2b+0x6c>
 8004532:	9201      	str	r2, [sp, #4]
 8004534:	f1b8 0200 	subs.w	r2, r8, #0
 8004538:	d027      	beq.n	800458a <__d2b+0x76>
 800453a:	a802      	add	r0, sp, #8
 800453c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004540:	f7ff fe01 	bl	8004146 <__lo0bits>
 8004544:	9900      	ldr	r1, [sp, #0]
 8004546:	b1f0      	cbz	r0, 8004586 <__d2b+0x72>
 8004548:	9a01      	ldr	r2, [sp, #4]
 800454a:	f1c0 0320 	rsb	r3, r0, #32
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	430b      	orrs	r3, r1
 8004554:	40c2      	lsrs	r2, r0
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	9201      	str	r2, [sp, #4]
 800455a:	9b01      	ldr	r3, [sp, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	bf14      	ite	ne
 8004560:	2102      	movne	r1, #2
 8004562:	2101      	moveq	r1, #1
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	6139      	str	r1, [r7, #16]
 8004568:	b1c4      	cbz	r4, 800459c <__d2b+0x88>
 800456a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800456e:	4404      	add	r4, r0
 8004570:	6034      	str	r4, [r6, #0]
 8004572:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004576:	6028      	str	r0, [r5, #0]
 8004578:	4638      	mov	r0, r7
 800457a:	b002      	add	sp, #8
 800457c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004580:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004584:	e7d5      	b.n	8004532 <__d2b+0x1e>
 8004586:	6179      	str	r1, [r7, #20]
 8004588:	e7e7      	b.n	800455a <__d2b+0x46>
 800458a:	a801      	add	r0, sp, #4
 800458c:	f7ff fddb 	bl	8004146 <__lo0bits>
 8004590:	2101      	movs	r1, #1
 8004592:	9b01      	ldr	r3, [sp, #4]
 8004594:	6139      	str	r1, [r7, #16]
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	3020      	adds	r0, #32
 800459a:	e7e5      	b.n	8004568 <__d2b+0x54>
 800459c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80045a0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80045a4:	6030      	str	r0, [r6, #0]
 80045a6:	6918      	ldr	r0, [r3, #16]
 80045a8:	f7ff fdae 	bl	8004108 <__hi0bits>
 80045ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80045b0:	e7e1      	b.n	8004576 <__d2b+0x62>
	...

080045b4 <_mprec_log10>:
 80045b4:	2817      	cmp	r0, #23
 80045b6:	b5d0      	push	{r4, r6, r7, lr}
 80045b8:	4604      	mov	r4, r0
 80045ba:	dc05      	bgt.n	80045c8 <_mprec_log10+0x14>
 80045bc:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <_mprec_log10+0x2c>)
 80045be:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 80045c2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80045c6:	bdd0      	pop	{r4, r6, r7, pc}
 80045c8:	2000      	movs	r0, #0
 80045ca:	2600      	movs	r6, #0
 80045cc:	4905      	ldr	r1, [pc, #20]	; (80045e4 <_mprec_log10+0x30>)
 80045ce:	4f06      	ldr	r7, [pc, #24]	; (80045e8 <_mprec_log10+0x34>)
 80045d0:	4632      	mov	r2, r6
 80045d2:	463b      	mov	r3, r7
 80045d4:	f7fb ff92 	bl	80004fc <__aeabi_dmul>
 80045d8:	3c01      	subs	r4, #1
 80045da:	d1f9      	bne.n	80045d0 <_mprec_log10+0x1c>
 80045dc:	e7f3      	b.n	80045c6 <_mprec_log10+0x12>
 80045de:	bf00      	nop
 80045e0:	08005410 	.word	0x08005410
 80045e4:	3ff00000 	.word	0x3ff00000
 80045e8:	40240000 	.word	0x40240000

080045ec <_calloc_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	fb02 f401 	mul.w	r4, r2, r1
 80045f2:	4621      	mov	r1, r4
 80045f4:	f000 f808 	bl	8004608 <_malloc_r>
 80045f8:	4605      	mov	r5, r0
 80045fa:	b118      	cbz	r0, 8004604 <_calloc_r+0x18>
 80045fc:	4622      	mov	r2, r4
 80045fe:	2100      	movs	r1, #0
 8004600:	f7ff fbb2 	bl	8003d68 <memset>
 8004604:	4628      	mov	r0, r5
 8004606:	bd38      	pop	{r3, r4, r5, pc}

08004608 <_malloc_r>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	1ccd      	adds	r5, r1, #3
 800460c:	f025 0503 	bic.w	r5, r5, #3
 8004610:	3508      	adds	r5, #8
 8004612:	2d0c      	cmp	r5, #12
 8004614:	bf38      	it	cc
 8004616:	250c      	movcc	r5, #12
 8004618:	2d00      	cmp	r5, #0
 800461a:	4606      	mov	r6, r0
 800461c:	db01      	blt.n	8004622 <_malloc_r+0x1a>
 800461e:	42a9      	cmp	r1, r5
 8004620:	d903      	bls.n	800462a <_malloc_r+0x22>
 8004622:	230c      	movs	r3, #12
 8004624:	6033      	str	r3, [r6, #0]
 8004626:	2000      	movs	r0, #0
 8004628:	bd70      	pop	{r4, r5, r6, pc}
 800462a:	f000 feb4 	bl	8005396 <__malloc_lock>
 800462e:	4a21      	ldr	r2, [pc, #132]	; (80046b4 <_malloc_r+0xac>)
 8004630:	6814      	ldr	r4, [r2, #0]
 8004632:	4621      	mov	r1, r4
 8004634:	b991      	cbnz	r1, 800465c <_malloc_r+0x54>
 8004636:	4c20      	ldr	r4, [pc, #128]	; (80046b8 <_malloc_r+0xb0>)
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	b91b      	cbnz	r3, 8004644 <_malloc_r+0x3c>
 800463c:	4630      	mov	r0, r6
 800463e:	f000 f83d 	bl	80046bc <_sbrk_r>
 8004642:	6020      	str	r0, [r4, #0]
 8004644:	4629      	mov	r1, r5
 8004646:	4630      	mov	r0, r6
 8004648:	f000 f838 	bl	80046bc <_sbrk_r>
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	d124      	bne.n	800469a <_malloc_r+0x92>
 8004650:	230c      	movs	r3, #12
 8004652:	4630      	mov	r0, r6
 8004654:	6033      	str	r3, [r6, #0]
 8004656:	f000 fe9f 	bl	8005398 <__malloc_unlock>
 800465a:	e7e4      	b.n	8004626 <_malloc_r+0x1e>
 800465c:	680b      	ldr	r3, [r1, #0]
 800465e:	1b5b      	subs	r3, r3, r5
 8004660:	d418      	bmi.n	8004694 <_malloc_r+0x8c>
 8004662:	2b0b      	cmp	r3, #11
 8004664:	d90f      	bls.n	8004686 <_malloc_r+0x7e>
 8004666:	600b      	str	r3, [r1, #0]
 8004668:	18cc      	adds	r4, r1, r3
 800466a:	50cd      	str	r5, [r1, r3]
 800466c:	4630      	mov	r0, r6
 800466e:	f000 fe93 	bl	8005398 <__malloc_unlock>
 8004672:	f104 000b 	add.w	r0, r4, #11
 8004676:	1d23      	adds	r3, r4, #4
 8004678:	f020 0007 	bic.w	r0, r0, #7
 800467c:	1ac3      	subs	r3, r0, r3
 800467e:	d0d3      	beq.n	8004628 <_malloc_r+0x20>
 8004680:	425a      	negs	r2, r3
 8004682:	50e2      	str	r2, [r4, r3]
 8004684:	e7d0      	b.n	8004628 <_malloc_r+0x20>
 8004686:	684b      	ldr	r3, [r1, #4]
 8004688:	428c      	cmp	r4, r1
 800468a:	bf16      	itet	ne
 800468c:	6063      	strne	r3, [r4, #4]
 800468e:	6013      	streq	r3, [r2, #0]
 8004690:	460c      	movne	r4, r1
 8004692:	e7eb      	b.n	800466c <_malloc_r+0x64>
 8004694:	460c      	mov	r4, r1
 8004696:	6849      	ldr	r1, [r1, #4]
 8004698:	e7cc      	b.n	8004634 <_malloc_r+0x2c>
 800469a:	1cc4      	adds	r4, r0, #3
 800469c:	f024 0403 	bic.w	r4, r4, #3
 80046a0:	42a0      	cmp	r0, r4
 80046a2:	d005      	beq.n	80046b0 <_malloc_r+0xa8>
 80046a4:	1a21      	subs	r1, r4, r0
 80046a6:	4630      	mov	r0, r6
 80046a8:	f000 f808 	bl	80046bc <_sbrk_r>
 80046ac:	3001      	adds	r0, #1
 80046ae:	d0cf      	beq.n	8004650 <_malloc_r+0x48>
 80046b0:	6025      	str	r5, [r4, #0]
 80046b2:	e7db      	b.n	800466c <_malloc_r+0x64>
 80046b4:	200000b4 	.word	0x200000b4
 80046b8:	200000b8 	.word	0x200000b8

080046bc <_sbrk_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	2300      	movs	r3, #0
 80046c0:	4c05      	ldr	r4, [pc, #20]	; (80046d8 <_sbrk_r+0x1c>)
 80046c2:	4605      	mov	r5, r0
 80046c4:	4608      	mov	r0, r1
 80046c6:	6023      	str	r3, [r4, #0]
 80046c8:	f7ff faa0 	bl	8003c0c <_sbrk>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d102      	bne.n	80046d6 <_sbrk_r+0x1a>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	b103      	cbz	r3, 80046d6 <_sbrk_r+0x1a>
 80046d4:	602b      	str	r3, [r5, #0]
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
 80046d8:	20000504 	.word	0x20000504

080046dc <strcpy>:
 80046dc:	4603      	mov	r3, r0
 80046de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046e2:	f803 2b01 	strb.w	r2, [r3], #1
 80046e6:	2a00      	cmp	r2, #0
 80046e8:	d1f9      	bne.n	80046de <strcpy+0x2>
 80046ea:	4770      	bx	lr

080046ec <quorem>:
 80046ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f0:	6903      	ldr	r3, [r0, #16]
 80046f2:	690c      	ldr	r4, [r1, #16]
 80046f4:	4680      	mov	r8, r0
 80046f6:	42a3      	cmp	r3, r4
 80046f8:	f2c0 8084 	blt.w	8004804 <quorem+0x118>
 80046fc:	3c01      	subs	r4, #1
 80046fe:	f101 0714 	add.w	r7, r1, #20
 8004702:	f100 0614 	add.w	r6, r0, #20
 8004706:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800470a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800470e:	3501      	adds	r5, #1
 8004710:	fbb0 f5f5 	udiv	r5, r0, r5
 8004714:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004718:	eb06 030c 	add.w	r3, r6, ip
 800471c:	eb07 090c 	add.w	r9, r7, ip
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	b39d      	cbz	r5, 800478c <quorem+0xa0>
 8004724:	f04f 0a00 	mov.w	sl, #0
 8004728:	4638      	mov	r0, r7
 800472a:	46b6      	mov	lr, r6
 800472c:	46d3      	mov	fp, sl
 800472e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004732:	b293      	uxth	r3, r2
 8004734:	fb05 a303 	mla	r3, r5, r3, sl
 8004738:	0c12      	lsrs	r2, r2, #16
 800473a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800473e:	fb05 a202 	mla	r2, r5, r2, sl
 8004742:	b29b      	uxth	r3, r3
 8004744:	ebab 0303 	sub.w	r3, fp, r3
 8004748:	f8de b000 	ldr.w	fp, [lr]
 800474c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004750:	fa1f fb8b 	uxth.w	fp, fp
 8004754:	445b      	add	r3, fp
 8004756:	fa1f fb82 	uxth.w	fp, r2
 800475a:	f8de 2000 	ldr.w	r2, [lr]
 800475e:	4581      	cmp	r9, r0
 8004760:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004764:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004768:	b29b      	uxth	r3, r3
 800476a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800476e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004772:	f84e 3b04 	str.w	r3, [lr], #4
 8004776:	d2da      	bcs.n	800472e <quorem+0x42>
 8004778:	f856 300c 	ldr.w	r3, [r6, ip]
 800477c:	b933      	cbnz	r3, 800478c <quorem+0xa0>
 800477e:	9b01      	ldr	r3, [sp, #4]
 8004780:	3b04      	subs	r3, #4
 8004782:	429e      	cmp	r6, r3
 8004784:	461a      	mov	r2, r3
 8004786:	d331      	bcc.n	80047ec <quorem+0x100>
 8004788:	f8c8 4010 	str.w	r4, [r8, #16]
 800478c:	4640      	mov	r0, r8
 800478e:	f7ff fe49 	bl	8004424 <__mcmp>
 8004792:	2800      	cmp	r0, #0
 8004794:	db26      	blt.n	80047e4 <quorem+0xf8>
 8004796:	4630      	mov	r0, r6
 8004798:	f04f 0c00 	mov.w	ip, #0
 800479c:	3501      	adds	r5, #1
 800479e:	f857 1b04 	ldr.w	r1, [r7], #4
 80047a2:	f8d0 e000 	ldr.w	lr, [r0]
 80047a6:	b28b      	uxth	r3, r1
 80047a8:	ebac 0303 	sub.w	r3, ip, r3
 80047ac:	fa1f f28e 	uxth.w	r2, lr
 80047b0:	4413      	add	r3, r2
 80047b2:	0c0a      	lsrs	r2, r1, #16
 80047b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80047b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047bc:	b29b      	uxth	r3, r3
 80047be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047c2:	45b9      	cmp	r9, r7
 80047c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80047c8:	f840 3b04 	str.w	r3, [r0], #4
 80047cc:	d2e7      	bcs.n	800479e <quorem+0xb2>
 80047ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80047d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80047d6:	b92a      	cbnz	r2, 80047e4 <quorem+0xf8>
 80047d8:	3b04      	subs	r3, #4
 80047da:	429e      	cmp	r6, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	d30b      	bcc.n	80047f8 <quorem+0x10c>
 80047e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80047e4:	4628      	mov	r0, r5
 80047e6:	b003      	add	sp, #12
 80047e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	3b04      	subs	r3, #4
 80047f0:	2a00      	cmp	r2, #0
 80047f2:	d1c9      	bne.n	8004788 <quorem+0x9c>
 80047f4:	3c01      	subs	r4, #1
 80047f6:	e7c4      	b.n	8004782 <quorem+0x96>
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	3b04      	subs	r3, #4
 80047fc:	2a00      	cmp	r2, #0
 80047fe:	d1ef      	bne.n	80047e0 <quorem+0xf4>
 8004800:	3c01      	subs	r4, #1
 8004802:	e7ea      	b.n	80047da <quorem+0xee>
 8004804:	2000      	movs	r0, #0
 8004806:	e7ee      	b.n	80047e6 <quorem+0xfa>

08004808 <_dtoa_r>:
 8004808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800480c:	4616      	mov	r6, r2
 800480e:	461f      	mov	r7, r3
 8004810:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004812:	b095      	sub	sp, #84	; 0x54
 8004814:	4604      	mov	r4, r0
 8004816:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800481a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800481e:	b93d      	cbnz	r5, 8004830 <_dtoa_r+0x28>
 8004820:	2010      	movs	r0, #16
 8004822:	f000 fda5 	bl	8005370 <malloc>
 8004826:	6260      	str	r0, [r4, #36]	; 0x24
 8004828:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800482c:	6005      	str	r5, [r0, #0]
 800482e:	60c5      	str	r5, [r0, #12]
 8004830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	b151      	cbz	r1, 800484c <_dtoa_r+0x44>
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	2301      	movs	r3, #1
 800483a:	4093      	lsls	r3, r2
 800483c:	604a      	str	r2, [r1, #4]
 800483e:	608b      	str	r3, [r1, #8]
 8004840:	4620      	mov	r0, r4
 8004842:	f7ff fc0f 	bl	8004064 <_Bfree>
 8004846:	2200      	movs	r2, #0
 8004848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	1e3b      	subs	r3, r7, #0
 800484e:	bfaf      	iteee	ge
 8004850:	2300      	movge	r3, #0
 8004852:	2201      	movlt	r2, #1
 8004854:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004858:	9303      	strlt	r3, [sp, #12]
 800485a:	bfac      	ite	ge
 800485c:	f8c8 3000 	strge.w	r3, [r8]
 8004860:	f8c8 2000 	strlt.w	r2, [r8]
 8004864:	4bae      	ldr	r3, [pc, #696]	; (8004b20 <_dtoa_r+0x318>)
 8004866:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800486a:	ea33 0308 	bics.w	r3, r3, r8
 800486e:	d11b      	bne.n	80048a8 <_dtoa_r+0xa0>
 8004870:	f242 730f 	movw	r3, #9999	; 0x270f
 8004874:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	9b02      	ldr	r3, [sp, #8]
 800487a:	b923      	cbnz	r3, 8004886 <_dtoa_r+0x7e>
 800487c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004880:	2800      	cmp	r0, #0
 8004882:	f000 8545 	beq.w	8005310 <_dtoa_r+0xb08>
 8004886:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004888:	b953      	cbnz	r3, 80048a0 <_dtoa_r+0x98>
 800488a:	4ba6      	ldr	r3, [pc, #664]	; (8004b24 <_dtoa_r+0x31c>)
 800488c:	e021      	b.n	80048d2 <_dtoa_r+0xca>
 800488e:	4ba6      	ldr	r3, [pc, #664]	; (8004b28 <_dtoa_r+0x320>)
 8004890:	9306      	str	r3, [sp, #24]
 8004892:	3308      	adds	r3, #8
 8004894:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	9806      	ldr	r0, [sp, #24]
 800489a:	b015      	add	sp, #84	; 0x54
 800489c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a0:	4ba0      	ldr	r3, [pc, #640]	; (8004b24 <_dtoa_r+0x31c>)
 80048a2:	9306      	str	r3, [sp, #24]
 80048a4:	3303      	adds	r3, #3
 80048a6:	e7f5      	b.n	8004894 <_dtoa_r+0x8c>
 80048a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80048ac:	2200      	movs	r2, #0
 80048ae:	2300      	movs	r3, #0
 80048b0:	4630      	mov	r0, r6
 80048b2:	4639      	mov	r1, r7
 80048b4:	f7fc f88a 	bl	80009cc <__aeabi_dcmpeq>
 80048b8:	4682      	mov	sl, r0
 80048ba:	b160      	cbz	r0, 80048d6 <_dtoa_r+0xce>
 80048bc:	2301      	movs	r3, #1
 80048be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8520 	beq.w	800530a <_dtoa_r+0xb02>
 80048ca:	4b98      	ldr	r3, [pc, #608]	; (8004b2c <_dtoa_r+0x324>)
 80048cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	9306      	str	r3, [sp, #24]
 80048d4:	e7e0      	b.n	8004898 <_dtoa_r+0x90>
 80048d6:	ab12      	add	r3, sp, #72	; 0x48
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	ab13      	add	r3, sp, #76	; 0x4c
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	4632      	mov	r2, r6
 80048e0:	463b      	mov	r3, r7
 80048e2:	4620      	mov	r0, r4
 80048e4:	f7ff fe16 	bl	8004514 <__d2b>
 80048e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80048ec:	4683      	mov	fp, r0
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	d07d      	beq.n	80049ee <_dtoa_r+0x1e6>
 80048f2:	46b0      	mov	r8, r6
 80048f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80048f8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80048fc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004900:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004904:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004908:	2200      	movs	r2, #0
 800490a:	4b89      	ldr	r3, [pc, #548]	; (8004b30 <_dtoa_r+0x328>)
 800490c:	4640      	mov	r0, r8
 800490e:	4649      	mov	r1, r9
 8004910:	f7fb fc3c 	bl	800018c <__aeabi_dsub>
 8004914:	a37c      	add	r3, pc, #496	; (adr r3, 8004b08 <_dtoa_r+0x300>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f7fb fdef 	bl	80004fc <__aeabi_dmul>
 800491e:	a37c      	add	r3, pc, #496	; (adr r3, 8004b10 <_dtoa_r+0x308>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f7fb fc34 	bl	8000190 <__adddf3>
 8004928:	4606      	mov	r6, r0
 800492a:	4628      	mov	r0, r5
 800492c:	460f      	mov	r7, r1
 800492e:	f7fb fd7b 	bl	8000428 <__aeabi_i2d>
 8004932:	a379      	add	r3, pc, #484	; (adr r3, 8004b18 <_dtoa_r+0x310>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f7fb fde0 	bl	80004fc <__aeabi_dmul>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4630      	mov	r0, r6
 8004942:	4639      	mov	r1, r7
 8004944:	f7fb fc24 	bl	8000190 <__adddf3>
 8004948:	4606      	mov	r6, r0
 800494a:	460f      	mov	r7, r1
 800494c:	f7fc f870 	bl	8000a30 <__aeabi_d2iz>
 8004950:	2200      	movs	r2, #0
 8004952:	4682      	mov	sl, r0
 8004954:	2300      	movs	r3, #0
 8004956:	4630      	mov	r0, r6
 8004958:	4639      	mov	r1, r7
 800495a:	f7fc f841 	bl	80009e0 <__aeabi_dcmplt>
 800495e:	b148      	cbz	r0, 8004974 <_dtoa_r+0x16c>
 8004960:	4650      	mov	r0, sl
 8004962:	f7fb fd61 	bl	8000428 <__aeabi_i2d>
 8004966:	4632      	mov	r2, r6
 8004968:	463b      	mov	r3, r7
 800496a:	f7fc f82f 	bl	80009cc <__aeabi_dcmpeq>
 800496e:	b908      	cbnz	r0, 8004974 <_dtoa_r+0x16c>
 8004970:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004974:	f1ba 0f16 	cmp.w	sl, #22
 8004978:	d85a      	bhi.n	8004a30 <_dtoa_r+0x228>
 800497a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800497e:	496d      	ldr	r1, [pc, #436]	; (8004b34 <_dtoa_r+0x32c>)
 8004980:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004988:	f7fc f848 	bl	8000a1c <__aeabi_dcmpgt>
 800498c:	2800      	cmp	r0, #0
 800498e:	d051      	beq.n	8004a34 <_dtoa_r+0x22c>
 8004990:	2300      	movs	r3, #0
 8004992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004996:	930d      	str	r3, [sp, #52]	; 0x34
 8004998:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800499a:	1b5d      	subs	r5, r3, r5
 800499c:	1e6b      	subs	r3, r5, #1
 800499e:	9307      	str	r3, [sp, #28]
 80049a0:	bf43      	ittte	mi
 80049a2:	2300      	movmi	r3, #0
 80049a4:	f1c5 0901 	rsbmi	r9, r5, #1
 80049a8:	9307      	strmi	r3, [sp, #28]
 80049aa:	f04f 0900 	movpl.w	r9, #0
 80049ae:	f1ba 0f00 	cmp.w	sl, #0
 80049b2:	db41      	blt.n	8004a38 <_dtoa_r+0x230>
 80049b4:	9b07      	ldr	r3, [sp, #28]
 80049b6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80049ba:	4453      	add	r3, sl
 80049bc:	9307      	str	r3, [sp, #28]
 80049be:	2300      	movs	r3, #0
 80049c0:	9308      	str	r3, [sp, #32]
 80049c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80049c4:	2b09      	cmp	r3, #9
 80049c6:	f200 808f 	bhi.w	8004ae8 <_dtoa_r+0x2e0>
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	bfc4      	itt	gt
 80049ce:	3b04      	subgt	r3, #4
 80049d0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80049d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80049d4:	bfc8      	it	gt
 80049d6:	2500      	movgt	r5, #0
 80049d8:	f1a3 0302 	sub.w	r3, r3, #2
 80049dc:	bfd8      	it	le
 80049de:	2501      	movle	r5, #1
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	f200 808d 	bhi.w	8004b00 <_dtoa_r+0x2f8>
 80049e6:	e8df f003 	tbb	[pc, r3]
 80049ea:	7d7b      	.short	0x7d7b
 80049ec:	6f2f      	.short	0x6f2f
 80049ee:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80049f2:	441d      	add	r5, r3
 80049f4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80049f8:	2820      	cmp	r0, #32
 80049fa:	dd13      	ble.n	8004a24 <_dtoa_r+0x21c>
 80049fc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004a00:	9b02      	ldr	r3, [sp, #8]
 8004a02:	fa08 f800 	lsl.w	r8, r8, r0
 8004a06:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004a0a:	fa23 f000 	lsr.w	r0, r3, r0
 8004a0e:	ea48 0000 	orr.w	r0, r8, r0
 8004a12:	f7fb fcf9 	bl	8000408 <__aeabi_ui2d>
 8004a16:	2301      	movs	r3, #1
 8004a18:	4680      	mov	r8, r0
 8004a1a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004a1e:	3d01      	subs	r5, #1
 8004a20:	9310      	str	r3, [sp, #64]	; 0x40
 8004a22:	e771      	b.n	8004908 <_dtoa_r+0x100>
 8004a24:	9b02      	ldr	r3, [sp, #8]
 8004a26:	f1c0 0020 	rsb	r0, r0, #32
 8004a2a:	fa03 f000 	lsl.w	r0, r3, r0
 8004a2e:	e7f0      	b.n	8004a12 <_dtoa_r+0x20a>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e7b0      	b.n	8004996 <_dtoa_r+0x18e>
 8004a34:	900d      	str	r0, [sp, #52]	; 0x34
 8004a36:	e7af      	b.n	8004998 <_dtoa_r+0x190>
 8004a38:	f1ca 0300 	rsb	r3, sl, #0
 8004a3c:	9308      	str	r3, [sp, #32]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	eba9 090a 	sub.w	r9, r9, sl
 8004a44:	930c      	str	r3, [sp, #48]	; 0x30
 8004a46:	e7bc      	b.n	80049c2 <_dtoa_r+0x1ba>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	dd74      	ble.n	8004b3c <_dtoa_r+0x334>
 8004a52:	4698      	mov	r8, r3
 8004a54:	9304      	str	r3, [sp, #16]
 8004a56:	2200      	movs	r2, #0
 8004a58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a5a:	6072      	str	r2, [r6, #4]
 8004a5c:	2204      	movs	r2, #4
 8004a5e:	f102 0014 	add.w	r0, r2, #20
 8004a62:	4298      	cmp	r0, r3
 8004a64:	6871      	ldr	r1, [r6, #4]
 8004a66:	d96e      	bls.n	8004b46 <_dtoa_r+0x33e>
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f7ff fac7 	bl	8003ffc <_Balloc>
 8004a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a70:	6030      	str	r0, [r6, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f1b8 0f0e 	cmp.w	r8, #14
 8004a78:	9306      	str	r3, [sp, #24]
 8004a7a:	f200 80ed 	bhi.w	8004c58 <_dtoa_r+0x450>
 8004a7e:	2d00      	cmp	r5, #0
 8004a80:	f000 80ea 	beq.w	8004c58 <_dtoa_r+0x450>
 8004a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a88:	f1ba 0f00 	cmp.w	sl, #0
 8004a8c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004a90:	dd77      	ble.n	8004b82 <_dtoa_r+0x37a>
 8004a92:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <_dtoa_r+0x32c>)
 8004a94:	f00a 030f 	and.w	r3, sl, #15
 8004a98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004a9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004aa0:	06f0      	lsls	r0, r6, #27
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004aaa:	d568      	bpl.n	8004b7e <_dtoa_r+0x376>
 8004aac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <_dtoa_r+0x330>)
 8004ab2:	2503      	movs	r5, #3
 8004ab4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ab8:	f7fb fe4a 	bl	8000750 <__aeabi_ddiv>
 8004abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ac0:	f006 060f 	and.w	r6, r6, #15
 8004ac4:	4f1c      	ldr	r7, [pc, #112]	; (8004b38 <_dtoa_r+0x330>)
 8004ac6:	e04f      	b.n	8004b68 <_dtoa_r+0x360>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	9309      	str	r3, [sp, #36]	; 0x24
 8004acc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004ace:	4453      	add	r3, sl
 8004ad0:	f103 0801 	add.w	r8, r3, #1
 8004ad4:	9304      	str	r3, [sp, #16]
 8004ad6:	4643      	mov	r3, r8
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	bfb8      	it	lt
 8004adc:	2301      	movlt	r3, #1
 8004ade:	e7ba      	b.n	8004a56 <_dtoa_r+0x24e>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e7b2      	b.n	8004a4a <_dtoa_r+0x242>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e7f0      	b.n	8004aca <_dtoa_r+0x2c2>
 8004ae8:	2501      	movs	r5, #1
 8004aea:	2300      	movs	r3, #0
 8004aec:	9509      	str	r5, [sp, #36]	; 0x24
 8004aee:	931e      	str	r3, [sp, #120]	; 0x78
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295
 8004af4:	2200      	movs	r2, #0
 8004af6:	9304      	str	r3, [sp, #16]
 8004af8:	4698      	mov	r8, r3
 8004afa:	2312      	movs	r3, #18
 8004afc:	921f      	str	r2, [sp, #124]	; 0x7c
 8004afe:	e7aa      	b.n	8004a56 <_dtoa_r+0x24e>
 8004b00:	2301      	movs	r3, #1
 8004b02:	9309      	str	r3, [sp, #36]	; 0x24
 8004b04:	e7f4      	b.n	8004af0 <_dtoa_r+0x2e8>
 8004b06:	bf00      	nop
 8004b08:	636f4361 	.word	0x636f4361
 8004b0c:	3fd287a7 	.word	0x3fd287a7
 8004b10:	8b60c8b3 	.word	0x8b60c8b3
 8004b14:	3fc68a28 	.word	0x3fc68a28
 8004b18:	509f79fb 	.word	0x509f79fb
 8004b1c:	3fd34413 	.word	0x3fd34413
 8004b20:	7ff00000 	.word	0x7ff00000
 8004b24:	080054ed 	.word	0x080054ed
 8004b28:	080054e4 	.word	0x080054e4
 8004b2c:	080054f2 	.word	0x080054f2
 8004b30:	3ff80000 	.word	0x3ff80000
 8004b34:	08005410 	.word	0x08005410
 8004b38:	080053e8 	.word	0x080053e8
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	9304      	str	r3, [sp, #16]
 8004b40:	4698      	mov	r8, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	e7da      	b.n	8004afc <_dtoa_r+0x2f4>
 8004b46:	3101      	adds	r1, #1
 8004b48:	6071      	str	r1, [r6, #4]
 8004b4a:	0052      	lsls	r2, r2, #1
 8004b4c:	e787      	b.n	8004a5e <_dtoa_r+0x256>
 8004b4e:	07f1      	lsls	r1, r6, #31
 8004b50:	d508      	bpl.n	8004b64 <_dtoa_r+0x35c>
 8004b52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b5a:	f7fb fccf 	bl	80004fc <__aeabi_dmul>
 8004b5e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b62:	3501      	adds	r5, #1
 8004b64:	1076      	asrs	r6, r6, #1
 8004b66:	3708      	adds	r7, #8
 8004b68:	2e00      	cmp	r6, #0
 8004b6a:	d1f0      	bne.n	8004b4e <_dtoa_r+0x346>
 8004b6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b74:	f7fb fdec 	bl	8000750 <__aeabi_ddiv>
 8004b78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b7c:	e01b      	b.n	8004bb6 <_dtoa_r+0x3ae>
 8004b7e:	2502      	movs	r5, #2
 8004b80:	e7a0      	b.n	8004ac4 <_dtoa_r+0x2bc>
 8004b82:	f000 80a4 	beq.w	8004cce <_dtoa_r+0x4c6>
 8004b86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004b8a:	f1ca 0600 	rsb	r6, sl, #0
 8004b8e:	4ba0      	ldr	r3, [pc, #640]	; (8004e10 <_dtoa_r+0x608>)
 8004b90:	f006 020f 	and.w	r2, r6, #15
 8004b94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9c:	f7fb fcae 	bl	80004fc <__aeabi_dmul>
 8004ba0:	2502      	movs	r5, #2
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ba8:	4f9a      	ldr	r7, [pc, #616]	; (8004e14 <_dtoa_r+0x60c>)
 8004baa:	1136      	asrs	r6, r6, #4
 8004bac:	2e00      	cmp	r6, #0
 8004bae:	f040 8083 	bne.w	8004cb8 <_dtoa_r+0x4b0>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e0      	bne.n	8004b78 <_dtoa_r+0x370>
 8004bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 808a 	beq.w	8004cd2 <_dtoa_r+0x4ca>
 8004bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bc2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004bc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bca:	2200      	movs	r2, #0
 8004bcc:	4b92      	ldr	r3, [pc, #584]	; (8004e18 <_dtoa_r+0x610>)
 8004bce:	f7fb ff07 	bl	80009e0 <__aeabi_dcmplt>
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	d07d      	beq.n	8004cd2 <_dtoa_r+0x4ca>
 8004bd6:	f1b8 0f00 	cmp.w	r8, #0
 8004bda:	d07a      	beq.n	8004cd2 <_dtoa_r+0x4ca>
 8004bdc:	9b04      	ldr	r3, [sp, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	dd36      	ble.n	8004c50 <_dtoa_r+0x448>
 8004be2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004be6:	2200      	movs	r2, #0
 8004be8:	4b8c      	ldr	r3, [pc, #560]	; (8004e1c <_dtoa_r+0x614>)
 8004bea:	f7fb fc87 	bl	80004fc <__aeabi_dmul>
 8004bee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bf2:	9e04      	ldr	r6, [sp, #16]
 8004bf4:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004bf8:	3501      	adds	r5, #1
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f7fb fc14 	bl	8000428 <__aeabi_i2d>
 8004c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c04:	f7fb fc7a 	bl	80004fc <__aeabi_dmul>
 8004c08:	2200      	movs	r2, #0
 8004c0a:	4b85      	ldr	r3, [pc, #532]	; (8004e20 <_dtoa_r+0x618>)
 8004c0c:	f7fb fac0 	bl	8000190 <__adddf3>
 8004c10:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004c14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c18:	950b      	str	r5, [sp, #44]	; 0x2c
 8004c1a:	2e00      	cmp	r6, #0
 8004c1c:	d15c      	bne.n	8004cd8 <_dtoa_r+0x4d0>
 8004c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c22:	2200      	movs	r2, #0
 8004c24:	4b7f      	ldr	r3, [pc, #508]	; (8004e24 <_dtoa_r+0x61c>)
 8004c26:	f7fb fab1 	bl	800018c <__aeabi_dsub>
 8004c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c32:	f7fb fef3 	bl	8000a1c <__aeabi_dcmpgt>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	f040 8281 	bne.w	800513e <_dtoa_r+0x936>
 8004c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c42:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004c46:	f7fb fecb 	bl	80009e0 <__aeabi_dcmplt>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	f040 8275 	bne.w	800513a <_dtoa_r+0x932>
 8004c50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004c54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f2c0 814b 	blt.w	8004ef6 <_dtoa_r+0x6ee>
 8004c60:	f1ba 0f0e 	cmp.w	sl, #14
 8004c64:	f300 8147 	bgt.w	8004ef6 <_dtoa_r+0x6ee>
 8004c68:	4b69      	ldr	r3, [pc, #420]	; (8004e10 <_dtoa_r+0x608>)
 8004c6a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f280 80d7 	bge.w	8004e2c <_dtoa_r+0x624>
 8004c7e:	f1b8 0f00 	cmp.w	r8, #0
 8004c82:	f300 80d3 	bgt.w	8004e2c <_dtoa_r+0x624>
 8004c86:	f040 8257 	bne.w	8005138 <_dtoa_r+0x930>
 8004c8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	4b64      	ldr	r3, [pc, #400]	; (8004e24 <_dtoa_r+0x61c>)
 8004c92:	f7fb fc33 	bl	80004fc <__aeabi_dmul>
 8004c96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c9a:	f7fb feb5 	bl	8000a08 <__aeabi_dcmpge>
 8004c9e:	4646      	mov	r6, r8
 8004ca0:	4647      	mov	r7, r8
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f040 822d 	bne.w	8005102 <_dtoa_r+0x8fa>
 8004ca8:	9b06      	ldr	r3, [sp, #24]
 8004caa:	9a06      	ldr	r2, [sp, #24]
 8004cac:	1c5d      	adds	r5, r3, #1
 8004cae:	2331      	movs	r3, #49	; 0x31
 8004cb0:	f10a 0a01 	add.w	sl, sl, #1
 8004cb4:	7013      	strb	r3, [r2, #0]
 8004cb6:	e228      	b.n	800510a <_dtoa_r+0x902>
 8004cb8:	07f2      	lsls	r2, r6, #31
 8004cba:	d505      	bpl.n	8004cc8 <_dtoa_r+0x4c0>
 8004cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc0:	f7fb fc1c 	bl	80004fc <__aeabi_dmul>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	3501      	adds	r5, #1
 8004cc8:	1076      	asrs	r6, r6, #1
 8004cca:	3708      	adds	r7, #8
 8004ccc:	e76e      	b.n	8004bac <_dtoa_r+0x3a4>
 8004cce:	2502      	movs	r5, #2
 8004cd0:	e771      	b.n	8004bb6 <_dtoa_r+0x3ae>
 8004cd2:	4657      	mov	r7, sl
 8004cd4:	4646      	mov	r6, r8
 8004cd6:	e790      	b.n	8004bfa <_dtoa_r+0x3f2>
 8004cd8:	4b4d      	ldr	r3, [pc, #308]	; (8004e10 <_dtoa_r+0x608>)
 8004cda:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004cde:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d048      	beq.n	8004d7a <_dtoa_r+0x572>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	2000      	movs	r0, #0
 8004cee:	494e      	ldr	r1, [pc, #312]	; (8004e28 <_dtoa_r+0x620>)
 8004cf0:	f7fb fd2e 	bl	8000750 <__aeabi_ddiv>
 8004cf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004cf8:	f7fb fa48 	bl	800018c <__aeabi_dsub>
 8004cfc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004d00:	9d06      	ldr	r5, [sp, #24]
 8004d02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d06:	f7fb fe93 	bl	8000a30 <__aeabi_d2iz>
 8004d0a:	9011      	str	r0, [sp, #68]	; 0x44
 8004d0c:	f7fb fb8c 	bl	8000428 <__aeabi_i2d>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d18:	f7fb fa38 	bl	800018c <__aeabi_dsub>
 8004d1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d22:	3330      	adds	r3, #48	; 0x30
 8004d24:	f805 3b01 	strb.w	r3, [r5], #1
 8004d28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d2c:	f7fb fe58 	bl	80009e0 <__aeabi_dcmplt>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d163      	bne.n	8004dfc <_dtoa_r+0x5f4>
 8004d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d38:	2000      	movs	r0, #0
 8004d3a:	4937      	ldr	r1, [pc, #220]	; (8004e18 <_dtoa_r+0x610>)
 8004d3c:	f7fb fa26 	bl	800018c <__aeabi_dsub>
 8004d40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d44:	f7fb fe4c 	bl	80009e0 <__aeabi_dcmplt>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	f040 80b5 	bne.w	8004eb8 <_dtoa_r+0x6b0>
 8004d4e:	9b06      	ldr	r3, [sp, #24]
 8004d50:	1aeb      	subs	r3, r5, r3
 8004d52:	429e      	cmp	r6, r3
 8004d54:	f77f af7c 	ble.w	8004c50 <_dtoa_r+0x448>
 8004d58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	4b2f      	ldr	r3, [pc, #188]	; (8004e1c <_dtoa_r+0x614>)
 8004d60:	f7fb fbcc 	bl	80004fc <__aeabi_dmul>
 8004d64:	2200      	movs	r2, #0
 8004d66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004d6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d6e:	4b2b      	ldr	r3, [pc, #172]	; (8004e1c <_dtoa_r+0x614>)
 8004d70:	f7fb fbc4 	bl	80004fc <__aeabi_dmul>
 8004d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d78:	e7c3      	b.n	8004d02 <_dtoa_r+0x4fa>
 8004d7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d7e:	f7fb fbbd 	bl	80004fc <__aeabi_dmul>
 8004d82:	9b06      	ldr	r3, [sp, #24]
 8004d84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004d88:	199d      	adds	r5, r3, r6
 8004d8a:	461e      	mov	r6, r3
 8004d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d90:	f7fb fe4e 	bl	8000a30 <__aeabi_d2iz>
 8004d94:	9011      	str	r0, [sp, #68]	; 0x44
 8004d96:	f7fb fb47 	bl	8000428 <__aeabi_i2d>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004da2:	f7fb f9f3 	bl	800018c <__aeabi_dsub>
 8004da6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dac:	3330      	adds	r3, #48	; 0x30
 8004dae:	f806 3b01 	strb.w	r3, [r6], #1
 8004db2:	42ae      	cmp	r6, r5
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	d124      	bne.n	8004e04 <_dtoa_r+0x5fc>
 8004dba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <_dtoa_r+0x620>)
 8004dc0:	f7fb f9e6 	bl	8000190 <__adddf3>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dcc:	f7fb fe26 	bl	8000a1c <__aeabi_dcmpgt>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d171      	bne.n	8004eb8 <_dtoa_r+0x6b0>
 8004dd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004dd8:	2000      	movs	r0, #0
 8004dda:	4913      	ldr	r1, [pc, #76]	; (8004e28 <_dtoa_r+0x620>)
 8004ddc:	f7fb f9d6 	bl	800018c <__aeabi_dsub>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004de8:	f7fb fdfa 	bl	80009e0 <__aeabi_dcmplt>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	f43f af2f 	beq.w	8004c50 <_dtoa_r+0x448>
 8004df2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004df6:	1e6a      	subs	r2, r5, #1
 8004df8:	2b30      	cmp	r3, #48	; 0x30
 8004dfa:	d001      	beq.n	8004e00 <_dtoa_r+0x5f8>
 8004dfc:	46ba      	mov	sl, r7
 8004dfe:	e04a      	b.n	8004e96 <_dtoa_r+0x68e>
 8004e00:	4615      	mov	r5, r2
 8004e02:	e7f6      	b.n	8004df2 <_dtoa_r+0x5ea>
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <_dtoa_r+0x614>)
 8004e06:	f7fb fb79 	bl	80004fc <__aeabi_dmul>
 8004e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e0e:	e7bd      	b.n	8004d8c <_dtoa_r+0x584>
 8004e10:	08005410 	.word	0x08005410
 8004e14:	080053e8 	.word	0x080053e8
 8004e18:	3ff00000 	.word	0x3ff00000
 8004e1c:	40240000 	.word	0x40240000
 8004e20:	401c0000 	.word	0x401c0000
 8004e24:	40140000 	.word	0x40140000
 8004e28:	3fe00000 	.word	0x3fe00000
 8004e2c:	9d06      	ldr	r5, [sp, #24]
 8004e2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e36:	4630      	mov	r0, r6
 8004e38:	4639      	mov	r1, r7
 8004e3a:	f7fb fc89 	bl	8000750 <__aeabi_ddiv>
 8004e3e:	f7fb fdf7 	bl	8000a30 <__aeabi_d2iz>
 8004e42:	4681      	mov	r9, r0
 8004e44:	f7fb faf0 	bl	8000428 <__aeabi_i2d>
 8004e48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e4c:	f7fb fb56 	bl	80004fc <__aeabi_dmul>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4630      	mov	r0, r6
 8004e56:	4639      	mov	r1, r7
 8004e58:	f7fb f998 	bl	800018c <__aeabi_dsub>
 8004e5c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004e60:	f805 6b01 	strb.w	r6, [r5], #1
 8004e64:	9e06      	ldr	r6, [sp, #24]
 8004e66:	4602      	mov	r2, r0
 8004e68:	1bae      	subs	r6, r5, r6
 8004e6a:	45b0      	cmp	r8, r6
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	d135      	bne.n	8004edc <_dtoa_r+0x6d4>
 8004e70:	f7fb f98e 	bl	8000190 <__adddf3>
 8004e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e78:	4606      	mov	r6, r0
 8004e7a:	460f      	mov	r7, r1
 8004e7c:	f7fb fdce 	bl	8000a1c <__aeabi_dcmpgt>
 8004e80:	b9c8      	cbnz	r0, 8004eb6 <_dtoa_r+0x6ae>
 8004e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e86:	4630      	mov	r0, r6
 8004e88:	4639      	mov	r1, r7
 8004e8a:	f7fb fd9f 	bl	80009cc <__aeabi_dcmpeq>
 8004e8e:	b110      	cbz	r0, 8004e96 <_dtoa_r+0x68e>
 8004e90:	f019 0f01 	tst.w	r9, #1
 8004e94:	d10f      	bne.n	8004eb6 <_dtoa_r+0x6ae>
 8004e96:	4659      	mov	r1, fp
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7ff f8e3 	bl	8004064 <_Bfree>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004ea2:	702b      	strb	r3, [r5, #0]
 8004ea4:	f10a 0301 	add.w	r3, sl, #1
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f43f acf3 	beq.w	8004898 <_dtoa_r+0x90>
 8004eb2:	601d      	str	r5, [r3, #0]
 8004eb4:	e4f0      	b.n	8004898 <_dtoa_r+0x90>
 8004eb6:	4657      	mov	r7, sl
 8004eb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004ebc:	1e6b      	subs	r3, r5, #1
 8004ebe:	2a39      	cmp	r2, #57	; 0x39
 8004ec0:	d106      	bne.n	8004ed0 <_dtoa_r+0x6c8>
 8004ec2:	9a06      	ldr	r2, [sp, #24]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d107      	bne.n	8004ed8 <_dtoa_r+0x6d0>
 8004ec8:	2330      	movs	r3, #48	; 0x30
 8004eca:	7013      	strb	r3, [r2, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	3701      	adds	r7, #1
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	3201      	adds	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	e791      	b.n	8004dfc <_dtoa_r+0x5f4>
 8004ed8:	461d      	mov	r5, r3
 8004eda:	e7ed      	b.n	8004eb8 <_dtoa_r+0x6b0>
 8004edc:	2200      	movs	r2, #0
 8004ede:	4b99      	ldr	r3, [pc, #612]	; (8005144 <_dtoa_r+0x93c>)
 8004ee0:	f7fb fb0c 	bl	80004fc <__aeabi_dmul>
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	4606      	mov	r6, r0
 8004eea:	460f      	mov	r7, r1
 8004eec:	f7fb fd6e 	bl	80009cc <__aeabi_dcmpeq>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d09e      	beq.n	8004e32 <_dtoa_r+0x62a>
 8004ef4:	e7cf      	b.n	8004e96 <_dtoa_r+0x68e>
 8004ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ef8:	2a00      	cmp	r2, #0
 8004efa:	f000 8088 	beq.w	800500e <_dtoa_r+0x806>
 8004efe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004f00:	2a01      	cmp	r2, #1
 8004f02:	dc6d      	bgt.n	8004fe0 <_dtoa_r+0x7d8>
 8004f04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	d066      	beq.n	8004fd8 <_dtoa_r+0x7d0>
 8004f0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f0e:	464d      	mov	r5, r9
 8004f10:	9e08      	ldr	r6, [sp, #32]
 8004f12:	9a07      	ldr	r2, [sp, #28]
 8004f14:	2101      	movs	r1, #1
 8004f16:	441a      	add	r2, r3
 8004f18:	4620      	mov	r0, r4
 8004f1a:	4499      	add	r9, r3
 8004f1c:	9207      	str	r2, [sp, #28]
 8004f1e:	f7ff f941 	bl	80041a4 <__i2b>
 8004f22:	4607      	mov	r7, r0
 8004f24:	2d00      	cmp	r5, #0
 8004f26:	dd0b      	ble.n	8004f40 <_dtoa_r+0x738>
 8004f28:	9b07      	ldr	r3, [sp, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	dd08      	ble.n	8004f40 <_dtoa_r+0x738>
 8004f2e:	42ab      	cmp	r3, r5
 8004f30:	bfa8      	it	ge
 8004f32:	462b      	movge	r3, r5
 8004f34:	9a07      	ldr	r2, [sp, #28]
 8004f36:	eba9 0903 	sub.w	r9, r9, r3
 8004f3a:	1aed      	subs	r5, r5, r3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	9307      	str	r3, [sp, #28]
 8004f40:	9b08      	ldr	r3, [sp, #32]
 8004f42:	b1eb      	cbz	r3, 8004f80 <_dtoa_r+0x778>
 8004f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d065      	beq.n	8005016 <_dtoa_r+0x80e>
 8004f4a:	b18e      	cbz	r6, 8004f70 <_dtoa_r+0x768>
 8004f4c:	4639      	mov	r1, r7
 8004f4e:	4632      	mov	r2, r6
 8004f50:	4620      	mov	r0, r4
 8004f52:	f7ff f9c5 	bl	80042e0 <__pow5mult>
 8004f56:	465a      	mov	r2, fp
 8004f58:	4601      	mov	r1, r0
 8004f5a:	4607      	mov	r7, r0
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f7ff f92a 	bl	80041b6 <__multiply>
 8004f62:	4659      	mov	r1, fp
 8004f64:	900a      	str	r0, [sp, #40]	; 0x28
 8004f66:	4620      	mov	r0, r4
 8004f68:	f7ff f87c 	bl	8004064 <_Bfree>
 8004f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f6e:	469b      	mov	fp, r3
 8004f70:	9b08      	ldr	r3, [sp, #32]
 8004f72:	1b9a      	subs	r2, r3, r6
 8004f74:	d004      	beq.n	8004f80 <_dtoa_r+0x778>
 8004f76:	4659      	mov	r1, fp
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f7ff f9b1 	bl	80042e0 <__pow5mult>
 8004f7e:	4683      	mov	fp, r0
 8004f80:	2101      	movs	r1, #1
 8004f82:	4620      	mov	r0, r4
 8004f84:	f7ff f90e 	bl	80041a4 <__i2b>
 8004f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f8a:	4606      	mov	r6, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 81c6 	beq.w	800531e <_dtoa_r+0xb16>
 8004f92:	461a      	mov	r2, r3
 8004f94:	4601      	mov	r1, r0
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7ff f9a2 	bl	80042e0 <__pow5mult>
 8004f9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	dc3e      	bgt.n	8005022 <_dtoa_r+0x81a>
 8004fa4:	9b02      	ldr	r3, [sp, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d137      	bne.n	800501a <_dtoa_r+0x812>
 8004faa:	9b03      	ldr	r3, [sp, #12]
 8004fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d134      	bne.n	800501e <_dtoa_r+0x816>
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fba:	0d1b      	lsrs	r3, r3, #20
 8004fbc:	051b      	lsls	r3, r3, #20
 8004fbe:	b12b      	cbz	r3, 8004fcc <_dtoa_r+0x7c4>
 8004fc0:	9b07      	ldr	r3, [sp, #28]
 8004fc2:	f109 0901 	add.w	r9, r9, #1
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	9307      	str	r3, [sp, #28]
 8004fca:	2301      	movs	r3, #1
 8004fcc:	9308      	str	r3, [sp, #32]
 8004fce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d128      	bne.n	8005026 <_dtoa_r+0x81e>
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	e02e      	b.n	8005036 <_dtoa_r+0x82e>
 8004fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004fde:	e796      	b.n	8004f0e <_dtoa_r+0x706>
 8004fe0:	9b08      	ldr	r3, [sp, #32]
 8004fe2:	f108 36ff 	add.w	r6, r8, #4294967295
 8004fe6:	42b3      	cmp	r3, r6
 8004fe8:	bfb7      	itett	lt
 8004fea:	9b08      	ldrlt	r3, [sp, #32]
 8004fec:	1b9e      	subge	r6, r3, r6
 8004fee:	1af2      	sublt	r2, r6, r3
 8004ff0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004ff2:	bfbf      	itttt	lt
 8004ff4:	9608      	strlt	r6, [sp, #32]
 8004ff6:	189b      	addlt	r3, r3, r2
 8004ff8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004ffa:	2600      	movlt	r6, #0
 8004ffc:	f1b8 0f00 	cmp.w	r8, #0
 8005000:	bfb9      	ittee	lt
 8005002:	eba9 0508 	sublt.w	r5, r9, r8
 8005006:	2300      	movlt	r3, #0
 8005008:	464d      	movge	r5, r9
 800500a:	4643      	movge	r3, r8
 800500c:	e781      	b.n	8004f12 <_dtoa_r+0x70a>
 800500e:	9e08      	ldr	r6, [sp, #32]
 8005010:	464d      	mov	r5, r9
 8005012:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005014:	e786      	b.n	8004f24 <_dtoa_r+0x71c>
 8005016:	9a08      	ldr	r2, [sp, #32]
 8005018:	e7ad      	b.n	8004f76 <_dtoa_r+0x76e>
 800501a:	2300      	movs	r3, #0
 800501c:	e7d6      	b.n	8004fcc <_dtoa_r+0x7c4>
 800501e:	9b02      	ldr	r3, [sp, #8]
 8005020:	e7d4      	b.n	8004fcc <_dtoa_r+0x7c4>
 8005022:	2300      	movs	r3, #0
 8005024:	9308      	str	r3, [sp, #32]
 8005026:	6933      	ldr	r3, [r6, #16]
 8005028:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800502c:	6918      	ldr	r0, [r3, #16]
 800502e:	f7ff f86b 	bl	8004108 <__hi0bits>
 8005032:	f1c0 0020 	rsb	r0, r0, #32
 8005036:	9b07      	ldr	r3, [sp, #28]
 8005038:	4418      	add	r0, r3
 800503a:	f010 001f 	ands.w	r0, r0, #31
 800503e:	d047      	beq.n	80050d0 <_dtoa_r+0x8c8>
 8005040:	f1c0 0320 	rsb	r3, r0, #32
 8005044:	2b04      	cmp	r3, #4
 8005046:	dd3b      	ble.n	80050c0 <_dtoa_r+0x8b8>
 8005048:	9b07      	ldr	r3, [sp, #28]
 800504a:	f1c0 001c 	rsb	r0, r0, #28
 800504e:	4481      	add	r9, r0
 8005050:	4405      	add	r5, r0
 8005052:	4403      	add	r3, r0
 8005054:	9307      	str	r3, [sp, #28]
 8005056:	f1b9 0f00 	cmp.w	r9, #0
 800505a:	dd05      	ble.n	8005068 <_dtoa_r+0x860>
 800505c:	4659      	mov	r1, fp
 800505e:	464a      	mov	r2, r9
 8005060:	4620      	mov	r0, r4
 8005062:	f7ff f98b 	bl	800437c <__lshift>
 8005066:	4683      	mov	fp, r0
 8005068:	9b07      	ldr	r3, [sp, #28]
 800506a:	2b00      	cmp	r3, #0
 800506c:	dd05      	ble.n	800507a <_dtoa_r+0x872>
 800506e:	4631      	mov	r1, r6
 8005070:	461a      	mov	r2, r3
 8005072:	4620      	mov	r0, r4
 8005074:	f7ff f982 	bl	800437c <__lshift>
 8005078:	4606      	mov	r6, r0
 800507a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800507c:	b353      	cbz	r3, 80050d4 <_dtoa_r+0x8cc>
 800507e:	4631      	mov	r1, r6
 8005080:	4658      	mov	r0, fp
 8005082:	f7ff f9cf 	bl	8004424 <__mcmp>
 8005086:	2800      	cmp	r0, #0
 8005088:	da24      	bge.n	80050d4 <_dtoa_r+0x8cc>
 800508a:	2300      	movs	r3, #0
 800508c:	4659      	mov	r1, fp
 800508e:	220a      	movs	r2, #10
 8005090:	4620      	mov	r0, r4
 8005092:	f7fe fffe 	bl	8004092 <__multadd>
 8005096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005098:	f10a 3aff 	add.w	sl, sl, #4294967295
 800509c:	4683      	mov	fp, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8144 	beq.w	800532c <_dtoa_r+0xb24>
 80050a4:	2300      	movs	r3, #0
 80050a6:	4639      	mov	r1, r7
 80050a8:	220a      	movs	r2, #10
 80050aa:	4620      	mov	r0, r4
 80050ac:	f7fe fff1 	bl	8004092 <__multadd>
 80050b0:	9b04      	ldr	r3, [sp, #16]
 80050b2:	4607      	mov	r7, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	dc4d      	bgt.n	8005154 <_dtoa_r+0x94c>
 80050b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	dd4a      	ble.n	8005154 <_dtoa_r+0x94c>
 80050be:	e011      	b.n	80050e4 <_dtoa_r+0x8dc>
 80050c0:	d0c9      	beq.n	8005056 <_dtoa_r+0x84e>
 80050c2:	9a07      	ldr	r2, [sp, #28]
 80050c4:	331c      	adds	r3, #28
 80050c6:	441a      	add	r2, r3
 80050c8:	4499      	add	r9, r3
 80050ca:	441d      	add	r5, r3
 80050cc:	4613      	mov	r3, r2
 80050ce:	e7c1      	b.n	8005054 <_dtoa_r+0x84c>
 80050d0:	4603      	mov	r3, r0
 80050d2:	e7f6      	b.n	80050c2 <_dtoa_r+0x8ba>
 80050d4:	f1b8 0f00 	cmp.w	r8, #0
 80050d8:	dc36      	bgt.n	8005148 <_dtoa_r+0x940>
 80050da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050dc:	2b02      	cmp	r3, #2
 80050de:	dd33      	ble.n	8005148 <_dtoa_r+0x940>
 80050e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80050e4:	9b04      	ldr	r3, [sp, #16]
 80050e6:	b963      	cbnz	r3, 8005102 <_dtoa_r+0x8fa>
 80050e8:	4631      	mov	r1, r6
 80050ea:	2205      	movs	r2, #5
 80050ec:	4620      	mov	r0, r4
 80050ee:	f7fe ffd0 	bl	8004092 <__multadd>
 80050f2:	4601      	mov	r1, r0
 80050f4:	4606      	mov	r6, r0
 80050f6:	4658      	mov	r0, fp
 80050f8:	f7ff f994 	bl	8004424 <__mcmp>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	f73f add3 	bgt.w	8004ca8 <_dtoa_r+0x4a0>
 8005102:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005104:	9d06      	ldr	r5, [sp, #24]
 8005106:	ea6f 0a03 	mvn.w	sl, r3
 800510a:	f04f 0900 	mov.w	r9, #0
 800510e:	4631      	mov	r1, r6
 8005110:	4620      	mov	r0, r4
 8005112:	f7fe ffa7 	bl	8004064 <_Bfree>
 8005116:	2f00      	cmp	r7, #0
 8005118:	f43f aebd 	beq.w	8004e96 <_dtoa_r+0x68e>
 800511c:	f1b9 0f00 	cmp.w	r9, #0
 8005120:	d005      	beq.n	800512e <_dtoa_r+0x926>
 8005122:	45b9      	cmp	r9, r7
 8005124:	d003      	beq.n	800512e <_dtoa_r+0x926>
 8005126:	4649      	mov	r1, r9
 8005128:	4620      	mov	r0, r4
 800512a:	f7fe ff9b 	bl	8004064 <_Bfree>
 800512e:	4639      	mov	r1, r7
 8005130:	4620      	mov	r0, r4
 8005132:	f7fe ff97 	bl	8004064 <_Bfree>
 8005136:	e6ae      	b.n	8004e96 <_dtoa_r+0x68e>
 8005138:	2600      	movs	r6, #0
 800513a:	4637      	mov	r7, r6
 800513c:	e7e1      	b.n	8005102 <_dtoa_r+0x8fa>
 800513e:	46ba      	mov	sl, r7
 8005140:	4637      	mov	r7, r6
 8005142:	e5b1      	b.n	8004ca8 <_dtoa_r+0x4a0>
 8005144:	40240000 	.word	0x40240000
 8005148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800514a:	f8cd 8010 	str.w	r8, [sp, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 80f3 	beq.w	800533a <_dtoa_r+0xb32>
 8005154:	2d00      	cmp	r5, #0
 8005156:	dd05      	ble.n	8005164 <_dtoa_r+0x95c>
 8005158:	4639      	mov	r1, r7
 800515a:	462a      	mov	r2, r5
 800515c:	4620      	mov	r0, r4
 800515e:	f7ff f90d 	bl	800437c <__lshift>
 8005162:	4607      	mov	r7, r0
 8005164:	9b08      	ldr	r3, [sp, #32]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d04c      	beq.n	8005204 <_dtoa_r+0x9fc>
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4620      	mov	r0, r4
 800516e:	f7fe ff45 	bl	8003ffc <_Balloc>
 8005172:	4605      	mov	r5, r0
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	f107 010c 	add.w	r1, r7, #12
 800517a:	3202      	adds	r2, #2
 800517c:	0092      	lsls	r2, r2, #2
 800517e:	300c      	adds	r0, #12
 8005180:	f000 f8fe 	bl	8005380 <memcpy>
 8005184:	2201      	movs	r2, #1
 8005186:	4629      	mov	r1, r5
 8005188:	4620      	mov	r0, r4
 800518a:	f7ff f8f7 	bl	800437c <__lshift>
 800518e:	46b9      	mov	r9, r7
 8005190:	4607      	mov	r7, r0
 8005192:	9b06      	ldr	r3, [sp, #24]
 8005194:	9307      	str	r3, [sp, #28]
 8005196:	9b02      	ldr	r3, [sp, #8]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	9308      	str	r3, [sp, #32]
 800519e:	4631      	mov	r1, r6
 80051a0:	4658      	mov	r0, fp
 80051a2:	f7ff faa3 	bl	80046ec <quorem>
 80051a6:	4649      	mov	r1, r9
 80051a8:	4605      	mov	r5, r0
 80051aa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80051ae:	4658      	mov	r0, fp
 80051b0:	f7ff f938 	bl	8004424 <__mcmp>
 80051b4:	463a      	mov	r2, r7
 80051b6:	9002      	str	r0, [sp, #8]
 80051b8:	4631      	mov	r1, r6
 80051ba:	4620      	mov	r0, r4
 80051bc:	f7ff f94c 	bl	8004458 <__mdiff>
 80051c0:	68c3      	ldr	r3, [r0, #12]
 80051c2:	4602      	mov	r2, r0
 80051c4:	bb03      	cbnz	r3, 8005208 <_dtoa_r+0xa00>
 80051c6:	4601      	mov	r1, r0
 80051c8:	9009      	str	r0, [sp, #36]	; 0x24
 80051ca:	4658      	mov	r0, fp
 80051cc:	f7ff f92a 	bl	8004424 <__mcmp>
 80051d0:	4603      	mov	r3, r0
 80051d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051d4:	4611      	mov	r1, r2
 80051d6:	4620      	mov	r0, r4
 80051d8:	9309      	str	r3, [sp, #36]	; 0x24
 80051da:	f7fe ff43 	bl	8004064 <_Bfree>
 80051de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e0:	b9a3      	cbnz	r3, 800520c <_dtoa_r+0xa04>
 80051e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80051e4:	b992      	cbnz	r2, 800520c <_dtoa_r+0xa04>
 80051e6:	9a08      	ldr	r2, [sp, #32]
 80051e8:	b982      	cbnz	r2, 800520c <_dtoa_r+0xa04>
 80051ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80051ee:	d029      	beq.n	8005244 <_dtoa_r+0xa3c>
 80051f0:	9b02      	ldr	r3, [sp, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	dd01      	ble.n	80051fa <_dtoa_r+0x9f2>
 80051f6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80051fa:	9b07      	ldr	r3, [sp, #28]
 80051fc:	1c5d      	adds	r5, r3, #1
 80051fe:	f883 8000 	strb.w	r8, [r3]
 8005202:	e784      	b.n	800510e <_dtoa_r+0x906>
 8005204:	4638      	mov	r0, r7
 8005206:	e7c2      	b.n	800518e <_dtoa_r+0x986>
 8005208:	2301      	movs	r3, #1
 800520a:	e7e3      	b.n	80051d4 <_dtoa_r+0x9cc>
 800520c:	9a02      	ldr	r2, [sp, #8]
 800520e:	2a00      	cmp	r2, #0
 8005210:	db04      	blt.n	800521c <_dtoa_r+0xa14>
 8005212:	d123      	bne.n	800525c <_dtoa_r+0xa54>
 8005214:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005216:	bb0a      	cbnz	r2, 800525c <_dtoa_r+0xa54>
 8005218:	9a08      	ldr	r2, [sp, #32]
 800521a:	b9fa      	cbnz	r2, 800525c <_dtoa_r+0xa54>
 800521c:	2b00      	cmp	r3, #0
 800521e:	ddec      	ble.n	80051fa <_dtoa_r+0x9f2>
 8005220:	4659      	mov	r1, fp
 8005222:	2201      	movs	r2, #1
 8005224:	4620      	mov	r0, r4
 8005226:	f7ff f8a9 	bl	800437c <__lshift>
 800522a:	4631      	mov	r1, r6
 800522c:	4683      	mov	fp, r0
 800522e:	f7ff f8f9 	bl	8004424 <__mcmp>
 8005232:	2800      	cmp	r0, #0
 8005234:	dc03      	bgt.n	800523e <_dtoa_r+0xa36>
 8005236:	d1e0      	bne.n	80051fa <_dtoa_r+0x9f2>
 8005238:	f018 0f01 	tst.w	r8, #1
 800523c:	d0dd      	beq.n	80051fa <_dtoa_r+0x9f2>
 800523e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005242:	d1d8      	bne.n	80051f6 <_dtoa_r+0x9ee>
 8005244:	9b07      	ldr	r3, [sp, #28]
 8005246:	9a07      	ldr	r2, [sp, #28]
 8005248:	1c5d      	adds	r5, r3, #1
 800524a:	2339      	movs	r3, #57	; 0x39
 800524c:	7013      	strb	r3, [r2, #0]
 800524e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005252:	1e6a      	subs	r2, r5, #1
 8005254:	2b39      	cmp	r3, #57	; 0x39
 8005256:	d04d      	beq.n	80052f4 <_dtoa_r+0xaec>
 8005258:	3301      	adds	r3, #1
 800525a:	e052      	b.n	8005302 <_dtoa_r+0xafa>
 800525c:	9a07      	ldr	r2, [sp, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f102 0501 	add.w	r5, r2, #1
 8005264:	dd06      	ble.n	8005274 <_dtoa_r+0xa6c>
 8005266:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800526a:	d0eb      	beq.n	8005244 <_dtoa_r+0xa3c>
 800526c:	f108 0801 	add.w	r8, r8, #1
 8005270:	9b07      	ldr	r3, [sp, #28]
 8005272:	e7c4      	b.n	80051fe <_dtoa_r+0x9f6>
 8005274:	9b06      	ldr	r3, [sp, #24]
 8005276:	9a04      	ldr	r2, [sp, #16]
 8005278:	1aeb      	subs	r3, r5, r3
 800527a:	4293      	cmp	r3, r2
 800527c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005280:	d021      	beq.n	80052c6 <_dtoa_r+0xabe>
 8005282:	4659      	mov	r1, fp
 8005284:	2300      	movs	r3, #0
 8005286:	220a      	movs	r2, #10
 8005288:	4620      	mov	r0, r4
 800528a:	f7fe ff02 	bl	8004092 <__multadd>
 800528e:	45b9      	cmp	r9, r7
 8005290:	4683      	mov	fp, r0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	f04f 020a 	mov.w	r2, #10
 800529a:	4649      	mov	r1, r9
 800529c:	4620      	mov	r0, r4
 800529e:	d105      	bne.n	80052ac <_dtoa_r+0xaa4>
 80052a0:	f7fe fef7 	bl	8004092 <__multadd>
 80052a4:	4681      	mov	r9, r0
 80052a6:	4607      	mov	r7, r0
 80052a8:	9507      	str	r5, [sp, #28]
 80052aa:	e778      	b.n	800519e <_dtoa_r+0x996>
 80052ac:	f7fe fef1 	bl	8004092 <__multadd>
 80052b0:	4639      	mov	r1, r7
 80052b2:	4681      	mov	r9, r0
 80052b4:	2300      	movs	r3, #0
 80052b6:	220a      	movs	r2, #10
 80052b8:	4620      	mov	r0, r4
 80052ba:	f7fe feea 	bl	8004092 <__multadd>
 80052be:	4607      	mov	r7, r0
 80052c0:	e7f2      	b.n	80052a8 <_dtoa_r+0xaa0>
 80052c2:	f04f 0900 	mov.w	r9, #0
 80052c6:	4659      	mov	r1, fp
 80052c8:	2201      	movs	r2, #1
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7ff f856 	bl	800437c <__lshift>
 80052d0:	4631      	mov	r1, r6
 80052d2:	4683      	mov	fp, r0
 80052d4:	f7ff f8a6 	bl	8004424 <__mcmp>
 80052d8:	2800      	cmp	r0, #0
 80052da:	dcb8      	bgt.n	800524e <_dtoa_r+0xa46>
 80052dc:	d102      	bne.n	80052e4 <_dtoa_r+0xadc>
 80052de:	f018 0f01 	tst.w	r8, #1
 80052e2:	d1b4      	bne.n	800524e <_dtoa_r+0xa46>
 80052e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80052e8:	1e6a      	subs	r2, r5, #1
 80052ea:	2b30      	cmp	r3, #48	; 0x30
 80052ec:	f47f af0f 	bne.w	800510e <_dtoa_r+0x906>
 80052f0:	4615      	mov	r5, r2
 80052f2:	e7f7      	b.n	80052e4 <_dtoa_r+0xadc>
 80052f4:	9b06      	ldr	r3, [sp, #24]
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d105      	bne.n	8005306 <_dtoa_r+0xafe>
 80052fa:	2331      	movs	r3, #49	; 0x31
 80052fc:	9a06      	ldr	r2, [sp, #24]
 80052fe:	f10a 0a01 	add.w	sl, sl, #1
 8005302:	7013      	strb	r3, [r2, #0]
 8005304:	e703      	b.n	800510e <_dtoa_r+0x906>
 8005306:	4615      	mov	r5, r2
 8005308:	e7a1      	b.n	800524e <_dtoa_r+0xa46>
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <_dtoa_r+0xb60>)
 800530c:	f7ff bae1 	b.w	80048d2 <_dtoa_r+0xca>
 8005310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005312:	2b00      	cmp	r3, #0
 8005314:	f47f aabb 	bne.w	800488e <_dtoa_r+0x86>
 8005318:	4b14      	ldr	r3, [pc, #80]	; (800536c <_dtoa_r+0xb64>)
 800531a:	f7ff bada 	b.w	80048d2 <_dtoa_r+0xca>
 800531e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005320:	2b01      	cmp	r3, #1
 8005322:	f77f ae3f 	ble.w	8004fa4 <_dtoa_r+0x79c>
 8005326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005328:	9308      	str	r3, [sp, #32]
 800532a:	e653      	b.n	8004fd4 <_dtoa_r+0x7cc>
 800532c:	9b04      	ldr	r3, [sp, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	dc03      	bgt.n	800533a <_dtoa_r+0xb32>
 8005332:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005334:	2b02      	cmp	r3, #2
 8005336:	f73f aed5 	bgt.w	80050e4 <_dtoa_r+0x8dc>
 800533a:	9d06      	ldr	r5, [sp, #24]
 800533c:	4631      	mov	r1, r6
 800533e:	4658      	mov	r0, fp
 8005340:	f7ff f9d4 	bl	80046ec <quorem>
 8005344:	9b06      	ldr	r3, [sp, #24]
 8005346:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800534a:	f805 8b01 	strb.w	r8, [r5], #1
 800534e:	9a04      	ldr	r2, [sp, #16]
 8005350:	1aeb      	subs	r3, r5, r3
 8005352:	429a      	cmp	r2, r3
 8005354:	ddb5      	ble.n	80052c2 <_dtoa_r+0xaba>
 8005356:	4659      	mov	r1, fp
 8005358:	2300      	movs	r3, #0
 800535a:	220a      	movs	r2, #10
 800535c:	4620      	mov	r0, r4
 800535e:	f7fe fe98 	bl	8004092 <__multadd>
 8005362:	4683      	mov	fp, r0
 8005364:	e7ea      	b.n	800533c <_dtoa_r+0xb34>
 8005366:	bf00      	nop
 8005368:	080054f1 	.word	0x080054f1
 800536c:	080054e4 	.word	0x080054e4

08005370 <malloc>:
 8005370:	4b02      	ldr	r3, [pc, #8]	; (800537c <malloc+0xc>)
 8005372:	4601      	mov	r1, r0
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	f7ff b947 	b.w	8004608 <_malloc_r>
 800537a:	bf00      	nop
 800537c:	20000020 	.word	0x20000020

08005380 <memcpy>:
 8005380:	b510      	push	{r4, lr}
 8005382:	1e43      	subs	r3, r0, #1
 8005384:	440a      	add	r2, r1
 8005386:	4291      	cmp	r1, r2
 8005388:	d100      	bne.n	800538c <memcpy+0xc>
 800538a:	bd10      	pop	{r4, pc}
 800538c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005390:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005394:	e7f7      	b.n	8005386 <memcpy+0x6>

08005396 <__malloc_lock>:
 8005396:	4770      	bx	lr

08005398 <__malloc_unlock>:
 8005398:	4770      	bx	lr
	...

0800539c <_init>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	bf00      	nop
 80053a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a2:	bc08      	pop	{r3}
 80053a4:	469e      	mov	lr, r3
 80053a6:	4770      	bx	lr

080053a8 <_fini>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	bf00      	nop
 80053ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ae:	bc08      	pop	{r3}
 80053b0:	469e      	mov	lr, r3
 80053b2:	4770      	bx	lr
