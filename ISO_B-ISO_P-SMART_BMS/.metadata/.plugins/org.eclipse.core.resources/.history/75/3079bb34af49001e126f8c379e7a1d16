/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 ******************************************************************************
 */

#include "STM32_TIMERS_DRIVER.h"
#include "stm32_speed_DRIVER.h"
#include "I2C_LCD.h"
#include "stm32f103c6_ADC.h"


#define clk 36000000
#define FREQ_ISO_POWERSUPPLY 40000
#define CELL_NUMB 4
#define address 0x3f
uint16_t CELL_VOLTAGE[CELL_NUMB];
float ACTUAL_CELL_VOLTAGE[CELL_NUMB],VOLT_MAIN;

int main(void)
{
	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
	PWM(TIM1, CH_1,250,FREQ_ISO_POWERSUPPLY, clk);//A8
	ADC_INIT(ADC1, ADC_STATE_START);
	I2C_LCD_Init(I2C1,address);//PB6 I2C SCL
	//PB7 IC2 SDA
	pinmode(GPIOB, pin0,GPIO_MODE_OUTPUT_push_pull_Speed10);
	pinmode(GPIOB, pin1,GPIO_MODE_OUTPUT_push_pull_Speed10);
	pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_push_pull_Speed10);
	pinmode(GPIOB, pin11,GPIO_MODE_OUTPUT_push_pull_Speed10);

	while(1){
		for(uint8_t i=0;i<4;i++){
			CELL_VOLTAGE[i]=ADC_READ(ADC1,i);
		}
		//I2C_LCD_clear( I2C1,address);
		ACTUAL_CELL_VOLTAGE[0]=CELL_VOLTAGE[0]*4.2/4096.0;
		ACTUAL_CELL_VOLTAGE[1]=CELL_VOLTAGE[1]*8.4/4096.0-ACTUAL_CELL_VOLTAGE[0];
		ACTUAL_CELL_VOLTAGE[2]=(CELL_VOLTAGE[2]*12.6/4096.0)-(CELL_VOLTAGE[1]*8.4/4096.0);
		ACTUAL_CELL_VOLTAGE[3]=CELL_VOLTAGE[3]*16.8/4096.0-CELL_VOLTAGE[2]*12.6/4096.0;

		for(uint8_t i=0;i<4;i++){
			VOLT_MAIN+=ACTUAL_CELL_VOLTAGE[i];
		}
		VOLT_MAIN/=4.0;

		if(ACTUAL_CELL_VOLTAGE[3]<VOLT_MAIN-.1){
			pinwrite(GPIOB, pin0, LOW);
			pinwrite(GPIOB, pin1, LOW);
			pinwrite(GPIOB, pin10, LOW);
			pinwrite(GPIOB, pin11, HIGH);
		}
		else if (ACTUAL_CELL_VOLTAGE[2]<VOLT_MAIN) {
			pinwrite(GPIOB, pin0, LOW);
			pinwrite(GPIOB, pin1, LOW);
			pinwrite(GPIOB, pin10, HIGH);
			pinwrite(GPIOB, pin11, LOW);
		}
		else if (ACTUAL_CELL_VOLTAGE[1]<VOLT_MAIN) {
			pinwrite(GPIOB, pin0, LOW);
			pinwrite(GPIOB, pin1, HIGH);
			pinwrite(GPIOB, pin10, LOW);
			pinwrite(GPIOB, pin11, LOW);
		}
		else if (ACTUAL_CELL_VOLTAGE[0]<VOLT_MAIN) {
			pinwrite(GPIOB, pin0, HIGH);
			pinwrite(GPIOB, pin1, LOW);
			pinwrite(GPIOB, pin10, LOW);
			pinwrite(GPIOB, pin11, LOW);
		}else {
			pinwrite(GPIOB, pin0, LOW);
			pinwrite(GPIOB, pin1, LOW);
			pinwrite(GPIOB, pin10, LOW);
			pinwrite(GPIOB, pin11, LOW);
		}

		I2C_LCD_clear( I2C1,address);
		I2C_LCD_setcerser(I2C1, address,0,0);
		I2C_LCD_write_string(I2C1,"C1 ",address);
		I2C_LCD_write_FLOATnumber(I2C1, address,VOLT_MAIN,3);
		I2C_LCD_setcerser(I2C1, address,0,7);
		I2C_LCD_write_string(I2C1," C2 ",address);
		I2C_LCD_write_FLOATnumber(I2C1, address,ACTUAL_CELL_VOLTAGE[1],3);
		I2C_LCD_setcerser(I2C1, address,1,0);
		I2C_LCD_write_string(I2C1,"C3 ",address);
		I2C_LCD_write_FLOATnumber(I2C1, address,ACTUAL_CELL_VOLTAGE[2],3);
		I2C_LCD_setcerser(I2C1, address,1,7);
		I2C_LCD_write_string(I2C1," C4 ",address);
		I2C_LCD_write_FLOATnumber(I2C1, address,ACTUAL_CELL_VOLTAGE[3],3);
		delay(1000, U_ms,clk);
	}
}
