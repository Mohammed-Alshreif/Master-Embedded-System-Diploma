
6_step.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e98  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08005fa4  08005fa4  00006fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006288  08006288  000085c8  2**0
                  CONTENTS
  4 .ARM          00000000  08006288  08006288  000085c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006288  08006288  000085c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006288  08006288  00007288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800628c  0800628c  0000728c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c8  20000000  08006290  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  200005c8  08006858  000085c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  08006858  000089e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000085c8  2**0
                  CONTENTS, READONLY
 12 .debug_line   00034ee3  00000000  00000000  000085f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000075  00000000  00000000  0003d4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00042577  00000000  00000000  0003d549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000722d  00000000  00000000  0007fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018d8  00000000  00000000  00086cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a4727  00000000  00000000  000885c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000232b  00000000  00000000  0012ccef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00013da2  00000000  00000000  0012f01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00020b98  00000000  00000000  00142dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00163954  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004098  00000000  00000000  00163998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200005c8 	.word	0x200005c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08005f8c 	.word	0x08005f8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200005cc 	.word	0x200005cc
 8000148:	08005f8c 	.word	0x08005f8c

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800014c:	f002 fc38 	bl	80029c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000150:	480b      	ldr	r0, [pc, #44]	@ (8000180 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000152:	490c      	ldr	r1, [pc, #48]	@ (8000184 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000154:	4a0c      	ldr	r2, [pc, #48]	@ (8000188 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000158:	e002      	b.n	8000160 <LoopCopyDataInit>

0800015a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800015a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800015c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800015e:	3304      	adds	r3, #4

08000160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000164:	d3f9      	bcc.n	800015a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000166:	4a09      	ldr	r2, [pc, #36]	@ (800018c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000168:	4c09      	ldr	r4, [pc, #36]	@ (8000190 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800016a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800016c:	e001      	b.n	8000172 <LoopFillZerobss>

0800016e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800016e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000170:	3204      	adds	r2, #4

08000172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000174:	d3fb      	bcc.n	800016e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000176:	f005 fee5 	bl	8005f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f000 f88b 	bl	8000294 <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r0, =_sdata
 8000180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000184:	200005c8 	.word	0x200005c8
  ldr r2, =_sidata
 8000188:	08006290 	.word	0x08006290
  ldr r2, =_sbss
 800018c:	200005c8 	.word	0x200005c8
  ldr r4, =_ebss
 8000190:	200009e4 	.word	0x200009e4

08000194 <BusFault_Handler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <BusFault_Handler>
	...

08000198 <DACT_Init>:
  */
__STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000198:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  SET_BIT(TIMx->CCER, Channels);
 800019c:	4b0c      	ldr	r3, [pc, #48]	@ (80001d0 <DACT_Init+0x38>)
 800019e:	6a19      	ldr	r1, [r3, #32]
 80001a0:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80001a4:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80001a6:	f8d2 141c 	ldr.w	r1, [r2, #1052]	@ 0x41c
 80001aa:	f021 0108 	bic.w	r1, r1, #8
 80001ae:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  SET_BIT(TIMx->CCER, Channels);
 80001b2:	6a19      	ldr	r1, [r3, #32]
 80001b4:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 80001b8:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80001ba:	f8d2 141c 	ldr.w	r1, [r2, #1052]	@ 0x41c
 80001be:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 80001c2:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80001c6:	681a      	ldr	r2, [r3, #0]
 80001c8:	f042 0201 	orr.w	r2, r2, #1
 80001cc:	601a      	str	r2, [r3, #0]
  LL_TIM_OC_DisablePreload(TIM3, LL_TIM_CHANNEL_CH4);

  /* start Timer */
  LL_TIM_EnableCounter(TIM3);

}
 80001ce:	4770      	bx	lr
 80001d0:	40000400 	.word	0x40000400

080001d4 <DACT_Exec>:
  *         the implementation of the virtual function.
  * @param  pHandle related component instance.
  * @retval none.
  */
__weak void DACT_Exec(UI_Handle_t *pHandle)
{
 80001d4:	b570      	push	{r4, r5, r6, lr}
  MC_Protocol_REG_t bCh1_var;
  MC_Protocol_REG_t bCh2_var;

  bCh1_var = pDacHandle->bChannel_variable[DAC_CH0];
  bCh2_var = pDacHandle->bChannel_variable[DAC_CH1];
  LL_TIM_OC_SetCompareCH3(TIM3, ((uint16_t)((int16_t)(((int16_t)UI_GetReg(pHandle,bCh1_var,MC_NULL)+32768)/32))));
 80001d6:	2200      	movs	r2, #0
 80001d8:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
{
 80001dc:	4605      	mov	r5, r0
  bCh2_var = pDacHandle->bChannel_variable[DAC_CH1];
 80001de:	f890 6031 	ldrb.w	r6, [r0, #49]	@ 0x31
  LL_TIM_OC_SetCompareCH3(TIM3, ((uint16_t)((int16_t)(((int16_t)UI_GetReg(pHandle,bCh1_var,MC_NULL)+32768)/32))));
 80001e2:	f002 f9c1 	bl	8002568 <UI_GetReg>
 80001e6:	b203      	sxth	r3, r0
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR3, CompareValue);
 80001e8:	4c07      	ldr	r4, [pc, #28]	@ (8000208 <DACT_Exec+0x34>)
 80001ea:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80001ee:	115b      	asrs	r3, r3, #5
  LL_TIM_OC_SetCompareCH4(TIM3, ((uint16_t)((int16_t)(((int16_t)UI_GetReg(pHandle,bCh2_var,MC_NULL)+32768)/32))));
 80001f0:	2200      	movs	r2, #0
 80001f2:	4631      	mov	r1, r6
 80001f4:	4628      	mov	r0, r5
 80001f6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80001f8:	f002 f9b6 	bl	8002568 <UI_GetReg>
 80001fc:	b200      	sxth	r0, r0
 80001fe:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
 8000202:	1140      	asrs	r0, r0, #5
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000204:	6420      	str	r0, [r4, #64]	@ 0x40
}
 8000206:	bd70      	pop	{r4, r5, r6, pc}
 8000208:	40000400 	.word	0x40000400

0800020c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020c:	2300      	movs	r3, #0
{
 800020e:	b5d0      	push	{r4, r6, r7, lr}
 8000210:	b094      	sub	sp, #80	@ 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2601      	movs	r6, #1
 8000214:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000218:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021a:	2402      	movs	r4, #2
 800021c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000220:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000228:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000230:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000232:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000234:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000240:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	910e      	str	r1, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	9411      	str	r4, [sp, #68]	@ 0x44
 8000248:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f003 f8a8 	bl	80033a0 <HAL_RCC_OscConfig>
 8000250:	b108      	cbz	r0, 8000256 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000252:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000254:	e7fe      	b.n	8000254 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	4603      	mov	r3, r0
 8000258:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	e9cd 4306 	strd	r4, r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000260:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000264:	4621      	mov	r1, r4
 8000266:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026c:	f003 fa86 	bl	800377c <HAL_RCC_ClockConfig>
 8000270:	b108      	cbz	r0, 8000276 <SystemClock_Config+0x6a>
 8000272:	b672      	cpsid	i
  while (1)
 8000274:	e7fe      	b.n	8000274 <SystemClock_Config+0x68>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800027c:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800027e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000280:	f003 fb6a 	bl	8003958 <HAL_RCCEx_PeriphCLKConfig>
 8000284:	b108      	cbz	r0, 800028a <SystemClock_Config+0x7e>
 8000286:	b672      	cpsid	i
  while (1)
 8000288:	e7fe      	b.n	8000288 <SystemClock_Config+0x7c>
  HAL_RCC_EnableCSS();
 800028a:	f003 fb39 	bl	8003900 <HAL_RCC_EnableCSS>
}
 800028e:	b014      	add	sp, #80	@ 0x50
 8000290:	bdd0      	pop	{r4, r6, r7, pc}
 8000292:	bf00      	nop

08000294 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000294:	2500      	movs	r5, #0
{
 8000296:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029a:	4c99      	ldr	r4, [pc, #612]	@ (8000500 <main+0x26c>)
{
 800029c:	b09d      	sub	sp, #116	@ 0x74
  HAL_Init();
 800029e:	f002 fbb5 	bl	8002a0c <HAL_Init>
  SystemClock_Config();
 80002a2:	f7ff ffb3 	bl	800020c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	9517      	str	r5, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80002a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ac:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002ae:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b0:	f043 0310 	orr.w	r3, r3, #16
 80002b4:	61a3      	str	r3, [r4, #24]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002b6:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ba:	69a3      	ldr	r3, [r4, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002bc:	f44f 2a60 	mov.w	sl, #917504	@ 0xe0000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c0:	f003 0310 	and.w	r3, r3, #16
 80002c4:	9302      	str	r3, [sp, #8]
 80002c6:	9b02      	ldr	r3, [sp, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80002c8:	f44f 6900 	mov.w	r9, #2048	@ 0x800
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002cc:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002ce:	4a8d      	ldr	r2, [pc, #564]	@ (8000504 <main+0x270>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d0:	f043 0320 	orr.w	r3, r3, #32
 80002d4:	61a3      	str	r3, [r4, #24]
 80002d6:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80002d8:	488b      	ldr	r0, [pc, #556]	@ (8000508 <main+0x274>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002da:	f003 0320 	and.w	r3, r3, #32
 80002de:	9303      	str	r3, [sp, #12]
 80002e0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e2:	69a3      	ldr	r3, [r4, #24]
  hadc1.Instance = ADC1;
 80002e4:	4e89      	ldr	r6, [pc, #548]	@ (800050c <main+0x278>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	61a3      	str	r3, [r4, #24]
 80002ec:	69a3      	ldr	r3, [r4, #24]
 80002ee:	f003 0304 	and.w	r3, r3, #4
 80002f2:	9304      	str	r3, [sp, #16]
 80002f4:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f6:	69a3      	ldr	r3, [r4, #24]
 80002f8:	f043 0308 	orr.w	r3, r3, #8
 80002fc:	61a3      	str	r3, [r4, #24]
 80002fe:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000300:	e9cd 1214 	strd	r1, r2, [sp, #80]	@ 0x50
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	f003 0308 	and.w	r3, r3, #8
 8000308:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800030a:	a914      	add	r1, sp, #80	@ 0x50
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800030e:	9716      	str	r7, [sp, #88]	@ 0x58
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000310:	f002 fe40 	bl	8002f94 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000314:	6963      	ldr	r3, [r4, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000316:	f8c6 8008 	str.w	r8, [r6, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800031a:	433b      	orrs	r3, r7
 800031c:	6163      	str	r3, [r4, #20]
 800031e:	6963      	ldr	r3, [r4, #20]
  hadc1.Instance = ADC1;
 8000320:	4a7b      	ldr	r2, [pc, #492]	@ (8000510 <main+0x27c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000322:	403b      	ands	r3, r7
 8000324:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000326:	4630      	mov	r0, r6
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000328:	e9cd 5514 	strd	r5, r5, [sp, #80]	@ 0x50
 800032c:	e9cd 5516 	strd	r5, r5, [sp, #88]	@ 0x58
 8000330:	e9cd 5518 	strd	r5, r5, [sp, #96]	@ 0x60
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000334:	9b01      	ldr	r3, [sp, #4]
  hadc1.Instance = ADC1;
 8000336:	6032      	str	r2, [r6, #0]
  ADC_MultiModeTypeDef multimode = {0};
 8000338:	950d      	str	r5, [sp, #52]	@ 0x34
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800033a:	951a      	str	r5, [sp, #104]	@ 0x68
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033c:	7535      	strb	r5, [r6, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800033e:	7337      	strb	r7, [r6, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000340:	f8c6 a01c 	str.w	sl, [r6, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000344:	f8c6 9004 	str.w	r9, [r6, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000348:	6137      	str	r7, [r6, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800034a:	f002 fb83 	bl	8002a54 <HAL_ADC_Init>
 800034e:	b108      	cbz	r0, 8000354 <main+0xc0>
 8000350:	b672      	cpsid	i
  while (1)
 8000352:	e7fe      	b.n	8000352 <main+0xbe>
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 8000354:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000358:	4630      	mov	r0, r6
 800035a:	a90d      	add	r1, sp, #52	@ 0x34
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 800035c:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035e:	f002 fd31 	bl	8002dc4 <HAL_ADCEx_MultiModeConfigChannel>
 8000362:	b108      	cbz	r0, 8000368 <main+0xd4>
 8000364:	b672      	cpsid	i
  while (1)
 8000366:	e7fe      	b.n	8000366 <main+0xd2>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000368:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  sConfigInjected.InjectedNbrOfConversion = 3;
 800036c:	2503      	movs	r5, #3
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800036e:	931a      	str	r3, [sp, #104]	@ 0x68
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000370:	2304      	movs	r3, #4
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000372:	f8ad 0064 	strh.w	r0, [sp, #100]	@ 0x64
  sConfigInjected.InjectedOffset = 0;
 8000376:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000378:	a914      	add	r1, sp, #80	@ 0x50
 800037a:	4630      	mov	r0, r6
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800037c:	e9cd 7715 	strd	r7, r7, [sp, #84]	@ 0x54
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000380:	9314      	str	r3, [sp, #80]	@ 0x50
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000382:	9518      	str	r5, [sp, #96]	@ 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000384:	f002 fc24 	bl	8002bd0 <HAL_ADCEx_InjectedConfigChannel>
 8000388:	b108      	cbz	r0, 800038e <main+0xfa>
 800038a:	b672      	cpsid	i
  while (1)
 800038c:	e7fe      	b.n	800038c <main+0xf8>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800038e:	2405      	movs	r4, #5
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000390:	4630      	mov	r0, r6
 8000392:	a914      	add	r1, sp, #80	@ 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000394:	9414      	str	r4, [sp, #80]	@ 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000396:	f002 fc1b 	bl	8002bd0 <HAL_ADCEx_InjectedConfigChannel>
 800039a:	b108      	cbz	r0, 80003a0 <main+0x10c>
 800039c:	b672      	cpsid	i
  while (1)
 800039e:	e7fe      	b.n	800039e <main+0x10a>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80003a0:	4630      	mov	r0, r6
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80003a2:	2606      	movs	r6, #6
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80003a4:	a914      	add	r1, sp, #80	@ 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80003a6:	9614      	str	r6, [sp, #80]	@ 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80003a8:	f002 fc12 	bl	8002bd0 <HAL_ADCEx_InjectedConfigChannel>
 80003ac:	b108      	cbz	r0, 80003b2 <main+0x11e>
 80003ae:	b672      	cpsid	i
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <main+0x11c>
  hadc2.Instance = ADC2;
 80003b2:	f8df b160 	ldr.w	fp, [pc, #352]	@ 8000514 <main+0x280>
 80003b6:	4b58      	ldr	r3, [pc, #352]	@ (8000518 <main+0x284>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80003b8:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
 80003bc:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
 80003c0:	e9cd 0018 	strd	r0, r0, [sp, #96]	@ 0x60
 80003c4:	901a      	str	r0, [sp, #104]	@ 0x68
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003c6:	f88b 000c 	strb.w	r0, [fp, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003ca:	f88b 0014 	strb.w	r0, [fp, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003ce:	4658      	mov	r0, fp
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003d0:	e9cb 9801 	strd	r9, r8, [fp, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d4:	f8cb a01c 	str.w	sl, [fp, #28]
  hadc2.Init.NbrOfConversion = 1;
 80003d8:	f8cb 7010 	str.w	r7, [fp, #16]
  hadc2.Instance = ADC2;
 80003dc:	f8cb 3000 	str.w	r3, [fp]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003e0:	f002 fb38 	bl	8002a54 <HAL_ADC_Init>
 80003e4:	b108      	cbz	r0, 80003ea <main+0x156>
 80003e6:	b672      	cpsid	i
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <main+0x154>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80003ea:	2304      	movs	r3, #4
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80003ec:	f8ad 0064 	strh.w	r0, [sp, #100]	@ 0x64
  sConfigInjected.InjectedOffset = 0;
 80003f0:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80003f2:	a914      	add	r1, sp, #80	@ 0x50
 80003f4:	4658      	mov	r0, fp
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80003f6:	e9cd 3714 	strd	r3, r7, [sp, #80]	@ 0x50
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80003fa:	9716      	str	r7, [sp, #88]	@ 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 80003fc:	9518      	str	r5, [sp, #96]	@ 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80003fe:	f002 fbe7 	bl	8002bd0 <HAL_ADCEx_InjectedConfigChannel>
 8000402:	b108      	cbz	r0, 8000408 <main+0x174>
 8000404:	b672      	cpsid	i
  while (1)
 8000406:	e7fe      	b.n	8000406 <main+0x172>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000408:	4658      	mov	r0, fp
 800040a:	a914      	add	r1, sp, #80	@ 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800040c:	9414      	str	r4, [sp, #80]	@ 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800040e:	f002 fbdf 	bl	8002bd0 <HAL_ADCEx_InjectedConfigChannel>
 8000412:	b108      	cbz	r0, 8000418 <main+0x184>
 8000414:	b672      	cpsid	i
  while (1)
 8000416:	e7fe      	b.n	8000416 <main+0x182>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000418:	4658      	mov	r0, fp
 800041a:	a914      	add	r1, sp, #80	@ 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800041c:	9614      	str	r6, [sp, #80]	@ 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800041e:	f002 fbd7 	bl	8002bd0 <HAL_ADCEx_InjectedConfigChannel>
 8000422:	4604      	mov	r4, r0
 8000424:	b108      	cbz	r0, 800042a <main+0x196>
 8000426:	b672      	cpsid	i
  while (1)
 8000428:	e7fe      	b.n	8000428 <main+0x194>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800042a:	2620      	movs	r6, #32
 800042c:	4601      	mov	r1, r0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800042e:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8000432:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 8000436:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800043a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800043e:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 8000442:	9008      	str	r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000444:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000446:	9013      	str	r0, [sp, #76]	@ 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000448:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800044a:	4632      	mov	r2, r6
 800044c:	a814      	add	r0, sp, #80	@ 0x50
 800044e:	f005 fd71 	bl	8005f34 <memset>
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000452:	f640 03ca 	movw	r3, #2250	@ 0x8ca
  htim1.Instance = TIM1;
 8000456:	4831      	ldr	r0, [pc, #196]	@ (800051c <main+0x288>)
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000458:	e9c0 6302 	strd	r6, r3, [r0, #8]
  htim1.Instance = TIM1;
 800045c:	4b30      	ldr	r3, [pc, #192]	@ (8000520 <main+0x28c>)
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800045e:	e9c0 8504 	strd	r8, r5, [r0, #16]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000462:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000464:	6184      	str	r4, [r0, #24]
  htim1.Instance = TIM1;
 8000466:	6003      	str	r3, [r0, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000468:	f003 faf6 	bl	8003a58 <HAL_TIM_Base_Init>
 800046c:	b108      	cbz	r0, 8000472 <main+0x1de>
 800046e:	b672      	cpsid	i
  while (1)
 8000470:	e7fe      	b.n	8000470 <main+0x1dc>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000472:	482a      	ldr	r0, [pc, #168]	@ (800051c <main+0x288>)
 8000474:	f003 fb5e 	bl	8003b34 <HAL_TIM_PWM_Init>
 8000478:	b108      	cbz	r0, 800047e <main+0x1ea>
 800047a:	b672      	cpsid	i
  while (1)
 800047c:	e7fe      	b.n	800047c <main+0x1e8>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800047e:	2306      	movs	r3, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000480:	2210      	movs	r2, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000482:	4826      	ldr	r0, [pc, #152]	@ (800051c <main+0x288>)
 8000484:	a908      	add	r1, sp, #32
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000486:	e9cd 3208 	strd	r3, r2, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800048a:	f003 fd5d 	bl	8003f48 <HAL_TIM_SlaveConfigSynchro>
 800048e:	b108      	cbz	r0, 8000494 <main+0x200>
 8000490:	b672      	cpsid	i
  while (1)
 8000492:	e7fe      	b.n	8000492 <main+0x1fe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000494:	2470      	movs	r4, #112	@ 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000496:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000498:	a906      	add	r1, sp, #24
 800049a:	4820      	ldr	r0, [pc, #128]	@ (800051c <main+0x288>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800049c:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800049e:	f003 fed9 	bl	8004254 <HAL_TIMEx_MasterConfigSynchronization>
 80004a2:	4602      	mov	r2, r0
 80004a4:	b108      	cbz	r0, 80004aa <main+0x216>
 80004a6:	b672      	cpsid	i
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <main+0x214>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004aa:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ac:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b0:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004b4:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004b8:	a90d      	add	r1, sp, #52	@ 0x34
 80004ba:	4818      	ldr	r0, [pc, #96]	@ (800051c <main+0x288>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004bc:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004be:	f003 fba7 	bl	8003c10 <HAL_TIM_PWM_ConfigChannel>
 80004c2:	b108      	cbz	r0, 80004c8 <main+0x234>
 80004c4:	b672      	cpsid	i
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <main+0x232>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004c8:	2204      	movs	r2, #4
 80004ca:	4814      	ldr	r0, [pc, #80]	@ (800051c <main+0x288>)
 80004cc:	a90d      	add	r1, sp, #52	@ 0x34
 80004ce:	f003 fb9f 	bl	8003c10 <HAL_TIM_PWM_ConfigChannel>
 80004d2:	b108      	cbz	r0, 80004d8 <main+0x244>
 80004d4:	b672      	cpsid	i
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <main+0x242>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004d8:	2208      	movs	r2, #8
 80004da:	4810      	ldr	r0, [pc, #64]	@ (800051c <main+0x288>)
 80004dc:	a90d      	add	r1, sp, #52	@ 0x34
 80004de:	f003 fb97 	bl	8003c10 <HAL_TIM_PWM_ConfigChannel>
 80004e2:	b108      	cbz	r0, 80004e8 <main+0x254>
 80004e4:	b672      	cpsid	i
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <main+0x252>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80004e8:	f640 03c9 	movw	r3, #2249	@ 0x8c9
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004ec:	220c      	movs	r2, #12
 80004ee:	480b      	ldr	r0, [pc, #44]	@ (800051c <main+0x288>)
 80004f0:	a90d      	add	r1, sp, #52	@ 0x34
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80004f2:	940d      	str	r4, [sp, #52]	@ 0x34
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80004f4:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004f6:	f003 fb8b 	bl	8003c10 <HAL_TIM_PWM_ConfigChannel>
 80004fa:	b198      	cbz	r0, 8000524 <main+0x290>
 80004fc:	b672      	cpsid	i
  while (1)
 80004fe:	e7fe      	b.n	80004fe <main+0x26a>
 8000500:	40021000 	.word	0x40021000
 8000504:	10210000 	.word	0x10210000
 8000508:	40011000 	.word	0x40011000
 800050c:	200007bc 	.word	0x200007bc
 8000510:	40012400 	.word	0x40012400
 8000514:	2000078c 	.word	0x2000078c
 8000518:	40012800 	.word	0x40012800
 800051c:	20000700 	.word	0x20000700
 8000520:	40012c00 	.word	0x40012c00
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000524:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000528:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800052c:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000530:	f44f 7380 	mov.w	r3, #256	@ 0x100
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000534:	221c      	movs	r2, #28
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000536:	e9cd 0018 	strd	r0, r0, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800053a:	901b      	str	r0, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800053c:	a914      	add	r1, sp, #80	@ 0x50
 800053e:	486d      	ldr	r0, [pc, #436]	@ (80006f4 <main+0x460>)
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000540:	e9cd 3216 	strd	r3, r2, [sp, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000544:	f003 feb8 	bl	80042b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000548:	4604      	mov	r4, r0
 800054a:	b108      	cbz	r0, 8000550 <main+0x2bc>
 800054c:	b672      	cpsid	i
  while (1)
 800054e:	e7fe      	b.n	800054e <main+0x2ba>
  HAL_TIM_MspPostInit(&htim1);
 8000550:	4868      	ldr	r0, [pc, #416]	@ (80006f4 <main+0x460>)
 8000552:	f001 fd35 	bl	8001fc0 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000556:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800055a:	4d67      	ldr	r5, [pc, #412]	@ (80006f8 <main+0x464>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800055c:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  htim2.Instance = TIM2;
 8000560:	602b      	str	r3, [r5, #0]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000562:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000566:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000568:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800056c:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
 8000570:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000574:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000578:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057c:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057e:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000580:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000582:	f003 fa69 	bl	8003a58 <HAL_TIM_Base_Init>
 8000586:	b108      	cbz	r0, 800058c <main+0x2f8>
 8000588:	b672      	cpsid	i
  while (1)
 800058a:	e7fe      	b.n	800058a <main+0x2f6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800058c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000590:	4628      	mov	r0, r5
 8000592:	a90d      	add	r1, sp, #52	@ 0x34
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000594:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000596:	f003 fc2d 	bl	8003df4 <HAL_TIM_ConfigClockSource>
 800059a:	b108      	cbz	r0, 80005a0 <main+0x30c>
 800059c:	b672      	cpsid	i
  while (1)
 800059e:	e7fe      	b.n	800059e <main+0x30a>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005a0:	2300      	movs	r3, #0
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 80005a2:	260b      	movs	r6, #11
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80005a4:	4854      	ldr	r0, [pc, #336]	@ (80006f8 <main+0x464>)
 80005a6:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005a8:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  sConfig.Commutation_Delay = 0;
 80005ac:	e9cd 6316 	strd	r6, r3, [sp, #88]	@ 0x58
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80005b0:	f003 fdec 	bl	800418c <HAL_TIMEx_HallSensor_Init>
 80005b4:	b108      	cbz	r0, 80005ba <main+0x326>
 80005b6:	b672      	cpsid	i
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x324>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80005ba:	2350      	movs	r3, #80	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005bc:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005be:	a908      	add	r1, sp, #32
 80005c0:	484d      	ldr	r0, [pc, #308]	@ (80006f8 <main+0x464>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80005c2:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005c4:	f003 fe46 	bl	8004254 <HAL_TIMEx_MasterConfigSynchronization>
 80005c8:	b108      	cbz	r0, 80005ce <main+0x33a>
 80005ca:	b672      	cpsid	i
  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x338>
  htim3.Init.Period = 0x800;
 80005ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  htim3.Instance = TIM3;
 80005d2:	4c4a      	ldr	r4, [pc, #296]	@ (80006fc <main+0x468>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d4:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
  htim3.Init.Period = 0x800;
 80005d8:	60e3      	str	r3, [r4, #12]
  htim3.Instance = TIM3;
 80005da:	4b49      	ldr	r3, [pc, #292]	@ (8000700 <main+0x46c>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005dc:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
 80005e0:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
 80005e4:	e9cd 0018 	strd	r0, r0, [sp, #96]	@ 0x60
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e8:	e9c4 0001 	strd	r0, r0, [r4, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ec:	901a      	str	r0, [sp, #104]	@ 0x68
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ee:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f0:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005f2:	4620      	mov	r0, r4
  htim3.Instance = TIM3;
 80005f4:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005f6:	f003 fa9d 	bl	8003b34 <HAL_TIM_PWM_Init>
 80005fa:	b108      	cbz	r0, 8000600 <main+0x36c>
 80005fc:	b672      	cpsid	i
  while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0x36a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000600:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000604:	a90d      	add	r1, sp, #52	@ 0x34
 8000606:	4620      	mov	r0, r4
 8000608:	f003 fe24 	bl	8004254 <HAL_TIMEx_MasterConfigSynchronization>
 800060c:	b108      	cbz	r0, 8000612 <main+0x37e>
 800060e:	b672      	cpsid	i
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x37c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000612:	2160      	movs	r1, #96	@ 0x60
  sConfigOC.Pulse = 0x400;
 8000614:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000618:	9016      	str	r0, [sp, #88]	@ 0x58
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800061a:	e9cd 1314 	strd	r1, r3, [sp, #80]	@ 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800061e:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000620:	2208      	movs	r2, #8
 8000622:	4620      	mov	r0, r4
 8000624:	a914      	add	r1, sp, #80	@ 0x50
 8000626:	f003 faf3 	bl	8003c10 <HAL_TIM_PWM_ConfigChannel>
 800062a:	b108      	cbz	r0, 8000630 <main+0x39c>
 800062c:	b672      	cpsid	i
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0x39a>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000630:	220c      	movs	r2, #12
 8000632:	4620      	mov	r0, r4
 8000634:	a914      	add	r1, sp, #80	@ 0x50
 8000636:	f003 faeb 	bl	8003c10 <HAL_TIM_PWM_ConfigChannel>
 800063a:	4605      	mov	r5, r0
 800063c:	b108      	cbz	r0, 8000642 <main+0x3ae>
 800063e:	b672      	cpsid	i
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x3ac>
  HAL_TIM_MspPostInit(&htim3);
 8000642:	4620      	mov	r0, r4
 8000644:	f001 fcbc 	bl	8001fc0 <HAL_TIM_MspPostInit>
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000648:	230c      	movs	r3, #12
  huart3.Init.BaudRate = 9600;
 800064a:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart3.Instance = USART3;
 800064e:	482d      	ldr	r0, [pc, #180]	@ (8000704 <main+0x470>)
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000650:	e9c0 3505 	strd	r3, r5, [r0, #20]
  huart3.Instance = USART3;
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <main+0x474>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	e9c0 2501 	strd	r2, r5, [r0, #4]
  huart3.Init.Parity = UART_PARITY_NONE;
 800065a:	e9c0 5503 	strd	r5, r5, [r0, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800065e:	61c5      	str	r5, [r0, #28]
  huart3.Instance = USART3;
 8000660:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000662:	f003 fe53 	bl	800430c <HAL_UART_Init>
 8000666:	4604      	mov	r4, r0
 8000668:	b108      	cbz	r0, 800066e <main+0x3da>
 800066a:	b672      	cpsid	i
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x3d8>
  MX_MotorControl_Init();
 800066e:	f001 f92d 	bl	80018cc <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000672:	4622      	mov	r2, r4
 8000674:	2102      	movs	r1, #2
 8000676:	2012      	movs	r0, #18
 8000678:	f002 fbec 	bl	8002e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800067c:	2012      	movs	r0, #18
 800067e:	f002 fc25 	bl	8002ecc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000682:	4622      	mov	r2, r4
 8000684:	4621      	mov	r1, r4
 8000686:	2019      	movs	r0, #25
 8000688:	f002 fbe4 	bl	8002e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800068c:	2019      	movs	r0, #25
 800068e:	f002 fc1d 	bl	8002ecc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 4, 1);
 8000692:	2201      	movs	r2, #1
 8000694:	2104      	movs	r1, #4
 8000696:	2018      	movs	r0, #24
 8000698:	f002 fbdc 	bl	8002e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800069c:	2018      	movs	r0, #24
 800069e:	f002 fc15 	bl	8002ecc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006a2:	4622      	mov	r2, r4
 80006a4:	4621      	mov	r1, r4
 80006a6:	200f      	movs	r0, #15
 80006a8:	f002 fbd4 	bl	8002e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f002 fc0d 	bl	8002ecc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006b2:	4622      	mov	r2, r4
 80006b4:	4621      	mov	r1, r4
 80006b6:	4630      	mov	r0, r6
 80006b8:	f002 fbcc 	bl	8002e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006bc:	4630      	mov	r0, r6
 80006be:	f002 fc05 	bl	8002ecc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80006c2:	4622      	mov	r2, r4
 80006c4:	2103      	movs	r1, #3
 80006c6:	201c      	movs	r0, #28
 80006c8:	f002 fbc4 	bl	8002e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006cc:	201c      	movs	r0, #28
 80006ce:	f002 fbfd 	bl	8002ecc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART3_IRQn, 3, 1);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2103      	movs	r1, #3
 80006d6:	2027      	movs	r0, #39	@ 0x27
 80006d8:	f002 fbbc 	bl	8002e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80006dc:	2027      	movs	r0, #39	@ 0x27
 80006de:	f002 fbf5 	bl	8002ecc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80006e2:	2028      	movs	r0, #40	@ 0x28
 80006e4:	4622      	mov	r2, r4
 80006e6:	2103      	movs	r1, #3
 80006e8:	f002 fbb4 	bl	8002e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ec:	2028      	movs	r0, #40	@ 0x28
 80006ee:	f002 fbed 	bl	8002ecc <HAL_NVIC_EnableIRQ>
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0x45e>
 80006f4:	20000700 	.word	0x20000700
 80006f8:	200006b8 	.word	0x200006b8
 80006fc:	20000670 	.word	0x20000670
 8000700:	40000400 	.word	0x40000400
 8000704:	200005e4 	.word	0x200005e4
 8000708:	40004800 	.word	0x40004800

0800070c <Error_Handler>:
 800070c:	b672      	cpsid	i
  while (1)
 800070e:	e7fe      	b.n	800070e <Error_Handler+0x2>

08000710 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000710:	4b01      	ldr	r3, [pc, #4]	@ (8000718 <MC_StartMotor1+0x8>)
 8000712:	6818      	ldr	r0, [r3, #0]
 8000714:	f000 b83a 	b.w	800078c <MCI_StartMotor>
 8000718:	200008cc 	.word	0x200008cc

0800071c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 800071c:	4b01      	ldr	r3, [pc, #4]	@ (8000724 <MC_StopMotor1+0x8>)
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	f000 b83e 	b.w	80007a0 <MCI_StopMotor>
 8000724:	200008cc 	.word	0x200008cc

08000728 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000728:	4b01      	ldr	r3, [pc, #4]	@ (8000730 <MC_GetSTMStateMotor1+0x8>)
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	f000 b87c 	b.w	8000828 <MCI_GetSTMState>
 8000730:	200008cc 	.word	0x200008cc

08000734 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000734:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 8000738:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 800073c:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800073e:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000742:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000746:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 800074a:	f880 c018 	strb.w	ip, [r0, #24]
}
 800074e:	4770      	bx	lr

08000750 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000750:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000754:	f240 1301 	movw	r3, #257	@ 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000758:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 800075c:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 800075e:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000760:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000762:	4770      	bx	lr

08000764 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000764:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000768:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 800076a:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 800076e:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000770:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000772:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop

08000778 <MCI_SetCurrentReferences>:
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000778:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800077a:	2301      	movs	r3, #1
{
 800077c:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800077e:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000780:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000784:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000786:	b002      	add	sp, #8
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop

0800078c <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 800078c:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 800078e:	2103      	movs	r1, #3
{
 8000790:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000792:	6800      	ldr	r0, [r0, #0]
 8000794:	f005 fa18 	bl	8005bc8 <STM_NextState>

  if ( RetVal == true )
 8000798:	b108      	cbz	r0, 800079e <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800079a:	2301      	movs	r3, #1
 800079c:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 800079e:	bd10      	pop	{r4, pc}

080007a0 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80007a0:	2107      	movs	r1, #7
 80007a2:	6800      	ldr	r0, [r0, #0]
 80007a4:	f005 ba10 	b.w	8005bc8 <STM_NextState>

080007a8 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 80007a8:	6800      	ldr	r0, [r0, #0]
 80007aa:	f005 ba87 	b.w	8005cbc <STM_FaultAcknowledged>
 80007ae:	bf00      	nop

080007b0 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 80007b0:	2101      	movs	r1, #1
 80007b2:	6800      	ldr	r0, [r0, #0]
 80007b4:	f005 ba08 	b.w	8005bc8 <STM_NextState>

080007b8 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 80007b8:	b1e8      	cbz	r0, 80007f6 <MCI_ExecBufferedCommands+0x3e>
{
 80007ba:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80007bc:	7e03      	ldrb	r3, [r0, #24]
 80007be:	4604      	mov	r4, r0
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d000      	beq.n	80007c6 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 80007c4:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 80007c6:	7b01      	ldrb	r1, [r0, #12]
 80007c8:	2902      	cmp	r1, #2
 80007ca:	d015      	beq.n	80007f8 <MCI_ExecBufferedCommands+0x40>
 80007cc:	2903      	cmp	r1, #3
 80007ce:	d024      	beq.n	800081a <MCI_ExecBufferedCommands+0x62>
 80007d0:	2901      	cmp	r1, #1
 80007d2:	d11f      	bne.n	8000814 <MCI_ExecBufferedCommands+0x5c>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80007d4:	2200      	movs	r2, #0
 80007d6:	6883      	ldr	r3, [r0, #8]
 80007d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 80007dc:	6840      	ldr	r0, [r0, #4]
 80007de:	f005 f919 	bl	8005a14 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 80007e2:	8ae2      	ldrh	r2, [r4, #22]
 80007e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007e8:	6860      	ldr	r0, [r4, #4]
 80007ea:	f005 f917 	bl	8005a1c <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80007ee:	b188      	cbz	r0, 8000814 <MCI_ExecBufferedCommands+0x5c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80007f0:	2302      	movs	r3, #2
 80007f2:	7623      	strb	r3, [r4, #24]
}
 80007f4:	bd10      	pop	{r4, pc}
 80007f6:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80007f8:	2100      	movs	r1, #0
 80007fa:	6883      	ldr	r3, [r0, #8]
 80007fc:	f883 1024 	strb.w	r1, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000800:	6840      	ldr	r0, [r0, #4]
 8000802:	f005 f907 	bl	8005a14 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000806:	8ae2      	ldrh	r2, [r4, #22]
 8000808:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 800080c:	6860      	ldr	r0, [r4, #4]
 800080e:	f005 f905 	bl	8005a1c <STC_ExecRamp>
        break;
 8000812:	e7ec      	b.n	80007ee <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000814:	2303      	movs	r3, #3
 8000816:	7623      	strb	r3, [r4, #24]
}
 8000818:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800081a:	6882      	ldr	r2, [r0, #8]
 800081c:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000820:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000824:	6113      	str	r3, [r2, #16]
      if ( commandHasBeenExecuted )
 8000826:	e7e3      	b.n	80007f0 <MCI_ExecBufferedCommands+0x38>

08000828 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000828:	6800      	ldr	r0, [r0, #0]
 800082a:	f005 ba45 	b.w	8005cb8 <STM_GetState>
 800082e:	bf00      	nop

08000830 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000830:	7e40      	ldrb	r0, [r0, #25]
 8000832:	4770      	bx	lr

08000834 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000834:	7b03      	ldrb	r3, [r0, #12]
 8000836:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000838:	bf0c      	ite	eq
 800083a:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 800083e:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000844:	6840      	ldr	r0, [r0, #4]
 8000846:	f005 b931 	b.w	8005aac <STC_StopRamp>
 800084a:	bf00      	nop

0800084c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 800084c:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 800084e:	6840      	ldr	r0, [r0, #4]
 8000850:	f005 f8c6 	bl	80059e0 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000854:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000858:	f005 b864 	b.w	8005924 <SPD_GetAvrgMecSpeedUnit>

0800085c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 800085c:	6840      	ldr	r0, [r0, #4]
 800085e:	f005 b8c9 	b.w	80059f4 <STC_GetMecSpeedRefUnit>
 8000862:	bf00      	nop

08000864 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000864:	6883      	ldr	r3, [r0, #8]
{
 8000866:	b082      	sub	sp, #8
  return ( pHandle->pFOCVars->Iab );
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	b283      	uxth	r3, r0
 800086c:	f36f 000f 	bfc	r0, #0, #16
}
 8000870:	4318      	orrs	r0, r3
 8000872:	b002      	add	sp, #8
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop

08000878 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000878:	6883      	ldr	r3, [r0, #8]
{
 800087a:	b082      	sub	sp, #8
  return ( pHandle->pFOCVars->Ialphabeta );
 800087c:	6858      	ldr	r0, [r3, #4]
 800087e:	b283      	uxth	r3, r0
 8000880:	f36f 000f 	bfc	r0, #0, #16
}
 8000884:	4318      	orrs	r0, r3
 8000886:	b002      	add	sp, #8
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 800088c:	6883      	ldr	r3, [r0, #8]
{
 800088e:	b082      	sub	sp, #8
  return ( pHandle->pFOCVars->Iqd );
 8000890:	68d8      	ldr	r0, [r3, #12]
 8000892:	b283      	uxth	r3, r0
 8000894:	f36f 000f 	bfc	r0, #0, #16
}
 8000898:	4318      	orrs	r0, r3
 800089a:	b002      	add	sp, #8
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 80008a0:	6883      	ldr	r3, [r0, #8]
{
 80008a2:	b082      	sub	sp, #8
  return ( pHandle->pFOCVars->Iqdref );
 80008a4:	6918      	ldr	r0, [r3, #16]
 80008a6:	b283      	uxth	r3, r0
 80008a8:	f36f 000f 	bfc	r0, #0, #16
}
 80008ac:	4318      	orrs	r0, r3
 80008ae:	b002      	add	sp, #8
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop

080008b4 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 80008b4:	6883      	ldr	r3, [r0, #8]
{
 80008b6:	b082      	sub	sp, #8
  return ( pHandle->pFOCVars->Vqd );
 80008b8:	f8d3 0016 	ldr.w	r0, [r3, #22]
 80008bc:	b283      	uxth	r3, r0
 80008be:	f36f 000f 	bfc	r0, #0, #16
}
 80008c2:	4318      	orrs	r0, r3
 80008c4:	b002      	add	sp, #8
 80008c6:	4770      	bx	lr

080008c8 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 80008c8:	6883      	ldr	r3, [r0, #8]
{
 80008ca:	b082      	sub	sp, #8
  return ( pHandle->pFOCVars->Valphabeta );
 80008cc:	f8d3 001a 	ldr.w	r0, [r3, #26]
 80008d0:	b283      	uxth	r3, r0
 80008d2:	f36f 000f 	bfc	r0, #0, #16
}
 80008d6:	4318      	orrs	r0, r3
 80008d8:	b002      	add	sp, #8
 80008da:	4770      	bx	lr

080008dc <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 80008dc:	6883      	ldr	r3, [r0, #8]
}
 80008de:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80008e2:	4770      	bx	lr

080008e4 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 80008e4:	2300      	movs	r3, #0
 80008e6:	6882      	ldr	r2, [r0, #8]
 80008e8:	f361 030f 	bfi	r3, r1, #0, #16
 80008ec:	f361 431f 	bfi	r3, r1, #16, #16
 80008f0:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 80008f8:	4603      	mov	r3, r0
 80008fa:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 80008fc:	e9d3 0401 	ldrd	r0, r4, [r3, #4]
 8000900:	f005 f92a 	bl	8005b58 <STC_GetDefaultIqdref>
 8000904:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000908:	8220      	strh	r0, [r4, #16]
 800090a:	8263      	strh	r3, [r4, #18]
}
 800090c:	bd10      	pop	{r4, pc}
 800090e:	bf00      	nop

08000910 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000910:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000914:	4a11      	ldr	r2, [pc, #68]	@ (800095c <MCM_Clarke+0x4c>)
 8000916:	b203      	sxth	r3, r0
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000918:	1400      	asrs	r0, r0, #16
 800091a:	fb01 f000 	mul.w	r0, r1, r0
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 800091e:	fb03 f202 	mul.w	r2, r3, r2
 8000922:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000926:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 800092a:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 800092c:	da05      	bge.n	800093a <MCM_Clarke+0x2a>
 800092e:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000930:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8000934:	da0c      	bge.n	8000950 <MCM_Clarke+0x40>
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <MCM_Clarke+0x50>)
 8000938:	e001      	b.n	800093e <MCM_Clarke+0x2e>
 800093a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 800093e:	2000      	movs	r0, #0
 8000940:	b29b      	uxth	r3, r3
 8000942:	b292      	uxth	r2, r2
 8000944:	f363 000f 	bfi	r0, r3, #0, #16
 8000948:	f362 401f 	bfi	r0, r2, #16, #16
}
 800094c:	b004      	add	sp, #16
 800094e:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000950:	4803      	ldr	r0, [pc, #12]	@ (8000960 <MCM_Clarke+0x50>)
 8000952:	b20a      	sxth	r2, r1
 8000954:	4282      	cmp	r2, r0
 8000956:	bfb8      	it	lt
 8000958:	4602      	movlt	r2, r0
 800095a:	e7f0      	b.n	800093e <MCM_Clarke+0x2e>
 800095c:	ffffb61a 	.word	0xffffb61a
 8000960:	ffff8001 	.word	0xffff8001

08000964 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000964:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000968:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800096c:	f400 7140 	and.w	r1, r0, #768	@ 0x300
 8000970:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 8000974:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000976:	d022      	beq.n	80009be <MCM_Trig_Functions+0x5a>
 8000978:	d813      	bhi.n	80009a2 <MCM_Trig_Functions+0x3e>
 800097a:	b349      	cbz	r1, 80009d0 <MCM_Trig_Functions+0x6c>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800097c:	b2c0      	uxtb	r0, r0
 800097e:	43c3      	mvns	r3, r0
 8000980:	491b      	ldr	r1, [pc, #108]	@ (80009f0 <MCM_Trig_Functions+0x8c>)
 8000982:	b2db      	uxtb	r3, r3
 8000984:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000988:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800098c:	425b      	negs	r3, r3
 800098e:	b21b      	sxth	r3, r3
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000990:	2000      	movs	r0, #0
 8000992:	b292      	uxth	r2, r2
 8000994:	b29b      	uxth	r3, r3
 8000996:	f362 000f 	bfi	r0, r2, #0, #16
 800099a:	f363 401f 	bfi	r0, r3, #16, #16
}
 800099e:	b002      	add	sp, #8
 80009a0:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80009a2:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 80009a6:	d120      	bne.n	80009ea <MCM_Trig_Functions+0x86>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009a8:	b2c0      	uxtb	r0, r0
 80009aa:	43c3      	mvns	r3, r0
 80009ac:	4910      	ldr	r1, [pc, #64]	@ (80009f0 <MCM_Trig_Functions+0x8c>)
 80009ae:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80009b0:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009b4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80009b8:	4252      	negs	r2, r2
 80009ba:	b212      	sxth	r2, r2
      break;
 80009bc:	e7e8      	b.n	8000990 <MCM_Trig_Functions+0x2c>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80009be:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009c0:	43c2      	mvns	r2, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80009c2:	490b      	ldr	r1, [pc, #44]	@ (80009f0 <MCM_Trig_Functions+0x8c>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009c4:	b2d2      	uxtb	r2, r2
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80009c6:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009ca:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      break;
 80009ce:	e7df      	b.n	8000990 <MCM_Trig_Functions+0x2c>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80009d0:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009d2:	43c2      	mvns	r2, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80009d4:	4906      	ldr	r1, [pc, #24]	@ (80009f0 <MCM_Trig_Functions+0x8c>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009d6:	b2d2      	uxtb	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80009d8:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009dc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80009e0:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009e2:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80009e4:	b21b      	sxth	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009e6:	b212      	sxth	r2, r2
      break;
 80009e8:	e7d2      	b.n	8000990 <MCM_Trig_Functions+0x2c>
 80009ea:	2300      	movs	r3, #0
 80009ec:	461a      	mov	r2, r3
 80009ee:	e7cf      	b.n	8000990 <MCM_Trig_Functions+0x2c>
 80009f0:	08005fa4 	.word	0x08005fa4

080009f4 <MCM_Park>:
{
 80009f4:	b530      	push	{r4, r5, lr}
 80009f6:	4604      	mov	r4, r0
 80009f8:	4605      	mov	r5, r0
 80009fa:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80009fc:	4608      	mov	r0, r1
 80009fe:	f7ff ffb1 	bl	8000964 <MCM_Trig_Functions>
 8000a02:	b224      	sxth	r4, r4
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000a04:	b203      	sxth	r3, r0
 8000a06:	fb03 f104 	mul.w	r1, r3, r4
 8000a0a:	142d      	asrs	r5, r5, #16
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000a0c:	1400      	asrs	r0, r0, #16
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000a0e:	fb00 1115 	mls	r1, r0, r5, r1
  if ( wqd_tmp > INT16_MAX )
 8000a12:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8000a16:	da05      	bge.n	8000a24 <MCM_Park+0x30>
 8000a18:	13ca      	asrs	r2, r1, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000a1a:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8000a1e:	da22      	bge.n	8000a66 <MCM_Park+0x72>
 8000a20:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <MCM_Park+0x80>)
 8000a22:	e001      	b.n	8000a28 <MCM_Park+0x34>
 8000a24:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000a28:	fb05 f303 	mul.w	r3, r5, r3
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000a2c:	fb00 3004 	mla	r0, r0, r4, r3
  if ( wqd_tmp > INT16_MAX )
 8000a30:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000a34:	ea4f 33e0 	mov.w	r3, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000a38:	da04      	bge.n	8000a44 <MCM_Park+0x50>
  else if ( wqd_tmp < ( -32768 ) )
 8000a3a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000a3e:	da0c      	bge.n	8000a5a <MCM_Park+0x66>
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MCM_Park+0x80>)
 8000a42:	e001      	b.n	8000a48 <MCM_Park+0x54>
 8000a44:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return ( Output );
 8000a48:	2000      	movs	r0, #0
 8000a4a:	b292      	uxth	r2, r2
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	f362 000f 	bfi	r0, r2, #0, #16
 8000a52:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000a56:	b005      	add	sp, #20
 8000a58:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000a5a:	4906      	ldr	r1, [pc, #24]	@ (8000a74 <MCM_Park+0x80>)
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	bfb8      	it	lt
 8000a62:	460b      	movlt	r3, r1
 8000a64:	e7f0      	b.n	8000a48 <MCM_Park+0x54>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000a66:	4903      	ldr	r1, [pc, #12]	@ (8000a74 <MCM_Park+0x80>)
 8000a68:	b212      	sxth	r2, r2
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	bfb8      	it	lt
 8000a6e:	460a      	movlt	r2, r1
 8000a70:	e7da      	b.n	8000a28 <MCM_Park+0x34>
 8000a72:	bf00      	nop
 8000a74:	ffff8001 	.word	0xffff8001

08000a78 <MCM_Rev_Park>:
{
 8000a78:	b530      	push	{r4, r5, lr}
 8000a7a:	4605      	mov	r5, r0
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000a80:	4608      	mov	r0, r1
 8000a82:	f7ff ff6f 	bl	8000964 <MCM_Trig_Functions>
 8000a86:	4603      	mov	r3, r0
  return ( Output );
 8000a88:	2000      	movs	r0, #0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000a8a:	1419      	asrs	r1, r3, #16
 8000a8c:	1424      	asrs	r4, r4, #16
 8000a8e:	fb01 f204 	mul.w	r2, r1, r4
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000a92:	b21b      	sxth	r3, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000a94:	fb03 f404 	mul.w	r4, r3, r4
 8000a98:	b22d      	sxth	r5, r5
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000a9a:	fb03 2305 	mla	r3, r3, r5, r2
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000a9e:	fb01 4415 	mls	r4, r1, r5, r4
  return ( Output );
 8000aa2:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000aa6:	f363 000f 	bfi	r0, r3, #0, #16
 8000aaa:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8000aae:	f364 401f 	bfi	r0, r4, #16, #16
}
 8000ab2:	b005      	add	sp, #20
 8000ab4:	bd30      	pop	{r4, r5, pc}
 8000ab6:	bf00      	nop

08000ab8 <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000ab8:	2326      	movs	r3, #38	@ 0x26
{
 8000aba:	b570      	push	{r4, r5, r6, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 8000abc:	2400      	movs	r4, #0
{
 8000abe:	4605      	mov	r5, r0
 8000ac0:	fb00 f303 	mul.w	r3, r0, r3
 8000ac4:	4e14      	ldr	r6, [pc, #80]	@ (8000b18 <FOC_Clear+0x60>)
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ac6:	4a15      	ldr	r2, [pc, #84]	@ (8000b1c <FOC_Clear+0x64>)
 8000ac8:	4621      	mov	r1, r4
 8000aca:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000ace:	199a      	adds	r2, r3, r6
  FOCVars[bMotor].Iab = NULL_ab;
 8000ad0:	50f4      	str	r4, [r6, r3]
 8000ad2:	6054      	str	r4, [r2, #4]
  FOCVars[bMotor].Iqdref = NULL_qd;
 8000ad4:	f103 0208 	add.w	r2, r3, #8
 8000ad8:	3310      	adds	r3, #16
 8000ada:	4433      	add	r3, r6
 8000adc:	4432      	add	r2, r6
  FOCVars[bMotor].Iqd = NULL_qd;
 8000ade:	6054      	str	r4, [r2, #4]
 8000ae0:	6094      	str	r4, [r2, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000ae2:	f8c3 4006 	str.w	r4, [r3, #6]
 8000ae6:	f8c3 400a 	str.w	r4, [r3, #10]
 8000aea:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000aee:	f004 f995 	bl	8004e1c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <FOC_Clear+0x68>)
 8000af4:	4621      	mov	r1, r4
 8000af6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000afa:	f004 f98f 	bl	8004e1c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <FOC_Clear+0x6c>)
 8000b00:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000b04:	f004 ff6e 	bl	80059e4 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <FOC_Clear+0x70>)
 8000b0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000b12:	f004 bb7b 	b.w	800520c <PWMC_SwitchOffPWM>
 8000b16:	bf00      	nop
 8000b18:	20000898 	.word	0x20000898
 8000b1c:	20000810 	.word	0x20000810
 8000b20:	2000080c 	.word	0x2000080c
 8000b24:	20000818 	.word	0x20000818
 8000b28:	20000800 	.word	0x20000800

08000b2c <MCboot>:
{
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bMCBootCompleted = 0;
 8000b32:	2400      	movs	r4, #0
{
 8000b34:	b085      	sub	sp, #20
  STM_Init(&STM[M1]);
 8000b36:	485b      	ldr	r0, [pc, #364]	@ (8000ca4 <MCboot+0x178>)
{
 8000b38:	e9cd 3100 	strd	r3, r1, [sp]
  bMCBootCompleted = 0;
 8000b3c:	4d5a      	ldr	r5, [pc, #360]	@ (8000ca8 <MCboot+0x17c>)
  STM_Init(&STM[M1]);
 8000b3e:	f005 f819 	bl	8005b74 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 8000b42:	4b5a      	ldr	r3, [pc, #360]	@ (8000cac <MCboot+0x180>)
 8000b44:	4a5a      	ldr	r2, [pc, #360]	@ (8000cb0 <MCboot+0x184>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000b46:	485b      	ldr	r0, [pc, #364]	@ (8000cb4 <MCboot+0x188>)
  pCLM[M1] = &CircleLimitationM1;
 8000b48:	601a      	str	r2, [r3, #0]
  bMCBootCompleted = 0;
 8000b4a:	702c      	strb	r4, [r5, #0]
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000b4c:	4a5a      	ldr	r2, [pc, #360]	@ (8000cb8 <MCboot+0x18c>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000b4e:	4d5b      	ldr	r5, [pc, #364]	@ (8000cbc <MCboot+0x190>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000b50:	4f5b      	ldr	r7, [pc, #364]	@ (8000cc0 <MCboot+0x194>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000b52:	6010      	str	r0, [r2, #0]
  R3_2_Init(&PWM_Handle_M1);
 8000b54:	f004 fcce 	bl	80054f4 <R3_2_Init>
  startTimers();
 8000b58:	f004 f9e4 	bl	8004f24 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000b5c:	4628      	mov	r0, r5
 8000b5e:	f004 f949 	bl	8004df4 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000b62:	4b58      	ldr	r3, [pc, #352]	@ (8000cc4 <MCboot+0x198>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000b64:	603d      	str	r5, [r7, #0]
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000b66:	4d58      	ldr	r5, [pc, #352]	@ (8000cc8 <MCboot+0x19c>)
  PID_HandleInit(&PIDIqHandle_M1);
 8000b68:	f8df 8160 	ldr.w	r8, [pc, #352]	@ 8000ccc <MCboot+0x1a0>
  HALL_Init (&HALL_M1);
 8000b6c:	4858      	ldr	r0, [pc, #352]	@ (8000cd0 <MCboot+0x1a4>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000b6e:	602b      	str	r3, [r5, #0]
  PID_HandleInit(&PIDIdHandle_M1);
 8000b70:	4e58      	ldr	r6, [pc, #352]	@ (8000cd4 <MCboot+0x1a8>)
  HALL_Init (&HALL_M1);
 8000b72:	f003 fca7 	bl	80044c4 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000b76:	6839      	ldr	r1, [r7, #0]
 8000b78:	4a55      	ldr	r2, [pc, #340]	@ (8000cd0 <MCboot+0x1a4>)
 8000b7a:	6828      	ldr	r0, [r5, #0]
 8000b7c:	f004 ff1a 	bl	80059b4 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000b80:	4640      	mov	r0, r8
 8000b82:	f004 f937 	bl	8004df4 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000b86:	4630      	mov	r0, r6
 8000b88:	f004 f934 	bl	8004df4 <PID_HandleInit>
  pPIDId[M1] = &PIDIdHandle_M1;
 8000b8c:	f8df e148 	ldr.w	lr, [pc, #328]	@ 8000cd8 <MCboot+0x1ac>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000b90:	f8df c148 	ldr.w	ip, [pc, #328]	@ 8000cdc <MCboot+0x1b0>
  pPIDId[M1] = &PIDIdHandle_M1;
 8000b94:	f8ce 6000 	str.w	r6, [lr]
  pBusSensorM1 = &VirtualBusVoltageSensorParamsM1;
 8000b98:	4851      	ldr	r0, [pc, #324]	@ (8000ce0 <MCboot+0x1b4>)
 8000b9a:	4e52      	ldr	r6, [pc, #328]	@ (8000ce4 <MCboot+0x1b8>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000b9c:	f8cc 8000 	str.w	r8, [ip]
  NTC_Init(&TempSensorParamsM1);
 8000ba0:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8000ce8 <MCboot+0x1bc>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000ba4:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8000cec <MCboot+0x1c0>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000ba8:	f8df 9144 	ldr.w	r9, [pc, #324]	@ 8000cf0 <MCboot+0x1c4>
  pBusSensorM1 = &VirtualBusVoltageSensorParamsM1;
 8000bac:	6030      	str	r0, [r6, #0]
  VVBS_Init(pBusSensorM1);
 8000bae:	f005 f9b7 	bl	8005f20 <VVBS_Init>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000bb2:	6832      	ldr	r2, [r6, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8000cf4 <MCboot+0x1c8>)
  NTC_Init(&TempSensorParamsM1);
 8000bb6:	4640      	mov	r0, r8
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000bb8:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000bbc:	f8df a138 	ldr.w	sl, [pc, #312]	@ 8000cf8 <MCboot+0x1cc>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000bc0:	f8c9 3000 	str.w	r3, [r9]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000bc4:	f8c3 b10c 	str.w	fp, [r3, #268]	@ 0x10c
  NTC_Init(&TempSensorParamsM1);
 8000bc8:	f004 f8cc 	bl	8004d64 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8000cfc <MCboot+0x1d0>)
 8000bce:	484c      	ldr	r0, [pc, #304]	@ (8000d00 <MCboot+0x1d4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000bd0:	f8ca 8000 	str.w	r8, [sl]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000bd4:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8000bd6:	f004 fe6d 	bl	80058b4 <REMNG_Init>
  FOC_Clear(M1);
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f7ff ff6c 	bl	8000ab8 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000be0:	f04f 0001 	mov.w	r0, #1
 8000be4:	f88b 0024 	strb.w	r0, [fp, #36]	@ 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000be8:	6828      	ldr	r0, [r5, #0]
 8000bea:	f004 ffb5 	bl	8005b58 <STC_GetDefaultIqdref>
 8000bee:	f8cb 0010 	str.w	r0, [fp, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000bf2:	6828      	ldr	r0, [r5, #0]
 8000bf4:	f004 ffb0 	bl	8005b58 <STC_GetDefaultIqdref>
 8000bf8:	4603      	mov	r3, r0
  oMCInterface[M1] = & Mci[M1];
 8000bfa:	f8df 8108 	ldr.w	r8, [pc, #264]	@ 8000d04 <MCboot+0x1d8>
 8000bfe:	4842      	ldr	r0, [pc, #264]	@ (8000d08 <MCboot+0x1dc>)
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000c00:	f3c3 430f 	ubfx	r3, r3, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000c04:	682a      	ldr	r2, [r5, #0]
 8000c06:	4927      	ldr	r1, [pc, #156]	@ (8000ca4 <MCboot+0x178>)
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000c08:	f8ab 3014 	strh.w	r3, [fp, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000c0c:	465b      	mov	r3, fp
  oMCInterface[M1] = & Mci[M1];
 8000c0e:	f8c8 0000 	str.w	r0, [r8]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000c12:	f7ff fd8f 	bl	8000734 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000c16:	6828      	ldr	r0, [r5, #0]
 8000c18:	f8d8 b000 	ldr.w	fp, [r8]
 8000c1c:	f004 ff92 	bl	8005b44 <STC_GetMecSpeedRefUnitDefault>
 8000c20:	4622      	mov	r2, r4
 8000c22:	4601      	mov	r1, r0
 8000c24:	4658      	mov	r0, fp
 8000c26:	f7ff fd93 	bl	8000750 <MCI_ExecSpeedRamp>
  bMCBootCompleted = 1;
 8000c2a:	f04f 0001 	mov.w	r0, #1
  pMCIList[M1] = oMCInterface[M1];
 8000c2e:	f8d8 2000 	ldr.w	r2, [r8]
 8000c32:	f8dd 8000 	ldr.w	r8, [sp]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000c36:	4b35      	ldr	r3, [pc, #212]	@ (8000d0c <MCboot+0x1e0>)
  pMCIList[M1] = oMCInterface[M1];
 8000c38:	f8c8 2000 	str.w	r2, [r8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000c3c:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 8000cdc <MCboot+0x1b0>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000c40:	683a      	ldr	r2, [r7, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000c42:	f8df e094 	ldr.w	lr, [pc, #148]	@ 8000cd8 <MCboot+0x1ac>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000c46:	601a      	str	r2, [r3, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000c48:	f8dc 2000 	ldr.w	r2, [ip]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8000c4c:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 8000cd0 <MCboot+0x1a4>
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000c50:	605a      	str	r2, [r3, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 8000c52:	f8de 2000 	ldr.w	r2, [lr]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8000c56:	f8c3 8018 	str.w	r8, [r3, #24]
  MCT[M1].pPIDId = pPIDId[M1];
 8000c5a:	609a      	str	r2, [r3, #8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000c5c:	4a16      	ldr	r2, [pc, #88]	@ (8000cb8 <MCboot+0x18c>)
  MCT[M1].pStateMachine = &STM[M1];
 8000c5e:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8000ca4 <MCboot+0x178>
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000c62:	6812      	ldr	r2, [r2, #0]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8000c64:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000c68:	611a      	str	r2, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000c6a:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000c6c:	e9c3 440d 	strd	r4, r4, [r3, #52]	@ 0x34
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000c72:	f8da 2000 	ldr.w	r2, [sl]
  MCT[M1].pFF = MC_NULL;
 8000c76:	e9c3 4410 	strd	r4, r4, [r3, #64]	@ 0x40
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000c7c:	6832      	ldr	r2, [r6, #0]
  MCT[M1].pSCC = MC_NULL;
 8000c7e:	e9c3 4412 	strd	r4, r4, [r3, #72]	@ 0x48
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000c82:	631a      	str	r2, [r3, #48]	@ 0x30
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000c84:	f8d9 2000 	ldr.w	r2, [r9]
  MCT[M1].pStateMachine = &STM[M1];
 8000c88:	f8c3 8028 	str.w	r8, [r3, #40]	@ 0x28
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000c8c:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8000c8e:	615c      	str	r4, [r3, #20]
  MCT[M1].pOTT = MC_NULL;
 8000c90:	651c      	str	r4, [r3, #80]	@ 0x50
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000c92:	63da      	str	r2, [r3, #60]	@ 0x3c
  pMCTList[M1] = &MCT[M1];
 8000c94:	9a01      	ldr	r2, [sp, #4]
 8000c96:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8000c98:	4b03      	ldr	r3, [pc, #12]	@ (8000ca8 <MCboot+0x17c>)
 8000c9a:	7018      	strb	r0, [r3, #0]
}
 8000c9c:	b005      	add	sp, #20
 8000c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000081c 	.word	0x2000081c
 8000ca8:	200007ec 	.word	0x200007ec
 8000cac:	200007f8 	.word	0x200007f8
 8000cb0:	2000013c 	.word	0x2000013c
 8000cb4:	20000370 	.word	0x20000370
 8000cb8:	20000800 	.word	0x20000800
 8000cbc:	20000474 	.word	0x20000474
 8000cc0:	20000814 	.word	0x20000814
 8000cc4:	200003e8 	.word	0x200003e8
 8000cc8:	20000818 	.word	0x20000818
 8000ccc:	20000448 	.word	0x20000448
 8000cd0:	200002a8 	.word	0x200002a8
 8000cd4:	2000041c 	.word	0x2000041c
 8000cd8:	2000080c 	.word	0x2000080c
 8000cdc:	20000810 	.word	0x20000810
 8000ce0:	20000274 	.word	0x20000274
 8000ce4:	20000808 	.word	0x20000808
 8000ce8:	20000280 	.word	0x20000280
 8000cec:	20000898 	.word	0x20000898
 8000cf0:	200007fc 	.word	0x200007fc
 8000cf4:	200004a0 	.word	0x200004a0
 8000cf8:	20000804 	.word	0x20000804
 8000cfc:	200007f4 	.word	0x200007f4
 8000d00:	200001f0 	.word	0x200001f0
 8000d04:	20000878 	.word	0x20000878
 8000d08:	2000087c 	.word	0x2000087c
 8000d0c:	20000824 	.word	0x20000824

08000d10 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000d14:	2326      	movs	r3, #38	@ 0x26
{
 8000d16:	b510      	push	{r4, lr}
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000d18:	4c07      	ldr	r4, [pc, #28]	@ (8000d38 <FOC_CalcCurrRef+0x24>)
 8000d1a:	fb03 4400 	mla	r4, r3, r0, r4
 8000d1e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000d22:	b103      	cbz	r3, 8000d26 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000d24:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000d26:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <FOC_CalcCurrRef+0x28>)
 8000d28:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000d2c:	f004 fec2 	bl	8005ab4 <STC_CalcTorqueReference>
 8000d30:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000d32:	8220      	strh	r0, [r4, #16]
}
 8000d34:	bd10      	pop	{r4, pc}
 8000d36:	bf00      	nop
 8000d38:	20000898 	.word	0x20000898
 8000d3c:	20000818 	.word	0x20000818

08000d40 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000d40:	4b01      	ldr	r3, [pc, #4]	@ (8000d48 <TSK_SetChargeBootCapDelayM1+0x8>)
 8000d42:	8018      	strh	r0, [r3, #0]
}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	200007f0 	.word	0x200007f0

08000d4c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8000d4c:	4b03      	ldr	r3, [pc, #12]	@ (8000d5c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8000d4e:	8818      	ldrh	r0, [r3, #0]
 8000d50:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000d52:	fab0 f080 	clz	r0, r0
 8000d56:	0940      	lsrs	r0, r0, #5
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200007f0 	.word	0x200007f0

08000d60 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000d60:	4b01      	ldr	r3, [pc, #4]	@ (8000d68 <TSK_SetStopPermanencyTimeM1+0x8>)
 8000d62:	8018      	strh	r0, [r3, #0]
}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200007ee 	.word	0x200007ee

08000d6c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8000d6c:	4b03      	ldr	r3, [pc, #12]	@ (8000d7c <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8000d6e:	8818      	ldrh	r0, [r3, #0]
 8000d70:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000d72:	fab0 f080 	clz	r0, r0
 8000d76:	0940      	lsrs	r0, r0, #5
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	200007ee 	.word	0x200007ee

08000d80 <TSK_MediumFrequencyTaskM1>:
  int16_t wAux = 0;
 8000d80:	2300      	movs	r3, #0
{
 8000d82:	b530      	push	{r4, r5, lr}
 8000d84:	b083      	sub	sp, #12
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8000d86:	f10d 0106 	add.w	r1, sp, #6
 8000d8a:	484d      	ldr	r0, [pc, #308]	@ (8000ec0 <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 8000d8c:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8000d90:	f003 fcf8 	bl	8004784 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8000d94:	4d4b      	ldr	r5, [pc, #300]	@ (8000ec4 <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8000d96:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8000d98:	6828      	ldr	r0, [r5, #0]
 8000d9a:	f004 f88b 	bl	8004eb4 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8000d9e:	484a      	ldr	r0, [pc, #296]	@ (8000ec8 <TSK_MediumFrequencyTaskM1+0x148>)
 8000da0:	f004 ff8a 	bl	8005cb8 <STM_GetState>
  switch ( StateM1 )
 8000da4:	1ec3      	subs	r3, r0, #3
 8000da6:	2b0f      	cmp	r3, #15
 8000da8:	d81b      	bhi.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
 8000daa:	e8df f003 	tbb	[pc, r3]
 8000dae:	392d      	.short	0x392d
 8000db0:	6008513e 	.word	0x6008513e
 8000db4:	1a1a1a69 	.word	0x1a1a1a69
 8000db8:	6e1a1a1a 	.word	0x6e1a1a1a
 8000dbc:	1c7c      	.short	0x1c7c
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8000dbe:	4b43      	ldr	r3, [pc, #268]	@ (8000ecc <TSK_MediumFrequencyTaskM1+0x14c>)
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	f004 fc55 	bl	8005670 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fe76 	bl	8000ab8 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8000dcc:	6828      	ldr	r0, [r5, #0]
 8000dce:	f003 ff83 	bl	8004cd8 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8000dd2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000dd6:	f7ff ffc3 	bl	8000d60 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8000dda:	2108      	movs	r1, #8
 8000ddc:	483a      	ldr	r0, [pc, #232]	@ (8000ec8 <TSK_MediumFrequencyTaskM1+0x148>)
 8000dde:	f004 fef3 	bl	8005bc8 <STM_NextState>
}
 8000de2:	b003      	add	sp, #12
 8000de4:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 8000de6:	4836      	ldr	r0, [pc, #216]	@ (8000ec0 <TSK_MediumFrequencyTaskM1+0x140>)
 8000de8:	f003 fbfa 	bl	80045e0 <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8000dec:	2104      	movs	r1, #4
 8000dee:	4836      	ldr	r0, [pc, #216]	@ (8000ec8 <TSK_MediumFrequencyTaskM1+0x148>)
 8000df0:	f004 feea 	bl	8005bc8 <STM_NextState>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d0f4      	beq.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
      FOC_Clear( M1 );
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff fe5d 	bl	8000ab8 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8000dfe:	4b33      	ldr	r3, [pc, #204]	@ (8000ecc <TSK_MediumFrequencyTaskM1+0x14c>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	f004 fbed 	bl	80055e0 <R3_2_SwitchOnPWM>
 8000e06:	e7ec      	b.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8000e08:	4b30      	ldr	r3, [pc, #192]	@ (8000ecc <TSK_MediumFrequencyTaskM1+0x14c>)
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	f004 fbb8 	bl	8005580 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8000e10:	2014      	movs	r0, #20
 8000e12:	f7ff ff95 	bl	8000d40 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8000e16:	2110      	movs	r1, #16
 8000e18:	482b      	ldr	r0, [pc, #172]	@ (8000ec8 <TSK_MediumFrequencyTaskM1+0x148>)
 8000e1a:	f004 fed5 	bl	8005bc8 <STM_NextState>
    break;
 8000e1e:	e7e0      	b.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8000e20:	2105      	movs	r1, #5
 8000e22:	4829      	ldr	r0, [pc, #164]	@ (8000ec8 <TSK_MediumFrequencyTaskM1+0x148>)
 8000e24:	f004 fed0 	bl	8005bc8 <STM_NextState>
    break;
 8000e28:	e7db      	b.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
	  FOC_InitAdditionalMethods(M1);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff ff70 	bl	8000d10 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff ff6f 	bl	8000d14 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8000e36:	2106      	movs	r1, #6
 8000e38:	4823      	ldr	r0, [pc, #140]	@ (8000ec8 <TSK_MediumFrequencyTaskM1+0x148>)
 8000e3a:	f004 fec5 	bl	8005bc8 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8000e3e:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <TSK_MediumFrequencyTaskM1+0x150>)
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	f004 fe8f 	bl	8005b64 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8000e46:	4b23      	ldr	r3, [pc, #140]	@ (8000ed4 <TSK_MediumFrequencyTaskM1+0x154>)
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	f7ff fcb5 	bl	80007b8 <MCI_ExecBufferedCommands>
    break;
 8000e4e:	e7c8      	b.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8000e50:	4b20      	ldr	r3, [pc, #128]	@ (8000ed4 <TSK_MediumFrequencyTaskM1+0x154>)
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	f7ff fcb0 	bl	80007b8 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff ff5b 	bl	8000d14 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8000e5e:	2c00      	cmp	r4, #0
 8000e60:	d1bf      	bne.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8000e62:	4622      	mov	r2, r4
 8000e64:	2120      	movs	r1, #32
 8000e66:	4818      	ldr	r0, [pc, #96]	@ (8000ec8 <TSK_MediumFrequencyTaskM1+0x148>)
 8000e68:	f004 fe8a 	bl	8005b80 <STM_FaultProcessing>
 8000e6c:	e7b9      	b.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8000e6e:	f7ff ff7d 	bl	8000d6c <TSK_StopPermanencyTimeHasElapsedM1>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d0b5      	beq.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
      STM_NextState( &STM[M1], STOP_IDLE );
 8000e76:	2109      	movs	r1, #9
 8000e78:	4813      	ldr	r0, [pc, #76]	@ (8000ec8 <TSK_MediumFrequencyTaskM1+0x148>)
 8000e7a:	f004 fea5 	bl	8005bc8 <STM_NextState>
 8000e7e:	e7b0      	b.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
    STM_NextState( &STM[M1], IDLE );
 8000e80:	2100      	movs	r1, #0
 8000e82:	4811      	ldr	r0, [pc, #68]	@ (8000ec8 <TSK_MediumFrequencyTaskM1+0x148>)
 8000e84:	f004 fea0 	bl	8005bc8 <STM_NextState>
}
 8000e88:	e7ab      	b.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8000e8a:	f7ff ff5f 	bl	8000d4c <TSK_ChargeBootCapDelayHasElapsedM1>
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	d0a7      	beq.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <TSK_MediumFrequencyTaskM1+0x14c>)
 8000e94:	2100      	movs	r1, #0
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	f004 f9ba 	bl	8005210 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8000e9c:	2111      	movs	r1, #17
 8000e9e:	480a      	ldr	r0, [pc, #40]	@ (8000ec8 <TSK_MediumFrequencyTaskM1+0x148>)
 8000ea0:	f004 fe92 	bl	8005bc8 <STM_NextState>
 8000ea4:	e79d      	b.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <TSK_MediumFrequencyTaskM1+0x14c>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	f004 f9b0 	bl	8005210 <PWMC_CurrentReadingCalibr>
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	d096      	beq.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
      STM_NextState( &STM[M1], CLEAR );
 8000eb4:	2112      	movs	r1, #18
 8000eb6:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <TSK_MediumFrequencyTaskM1+0x148>)
 8000eb8:	f004 fe86 	bl	8005bc8 <STM_NextState>
 8000ebc:	e791      	b.n	8000de2 <TSK_MediumFrequencyTaskM1+0x62>
 8000ebe:	bf00      	nop
 8000ec0:	200002a8 	.word	0x200002a8
 8000ec4:	200007fc 	.word	0x200007fc
 8000ec8:	2000081c 	.word	0x2000081c
 8000ecc:	20000800 	.word	0x20000800
 8000ed0:	20000818 	.word	0x20000818
 8000ed4:	20000878 	.word	0x20000878

08000ed8 <MC_Scheduler>:
{
 8000ed8:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MC_Scheduler+0x48>)
 8000edc:	781c      	ldrb	r4, [r3, #0]
 8000ede:	2c01      	cmp	r4, #1
 8000ee0:	d000      	beq.n	8000ee4 <MC_Scheduler+0xc>
}
 8000ee2:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8000ee4:	4d0f      	ldr	r5, [pc, #60]	@ (8000f24 <MC_Scheduler+0x4c>)
 8000ee6:	882b      	ldrh	r3, [r5, #0]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	b1ab      	cbz	r3, 8000f18 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8000eec:	882b      	ldrh	r3, [r5, #0]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8000ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8000f28 <MC_Scheduler+0x50>)
 8000ef6:	8813      	ldrh	r3, [r2, #0]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b11b      	cbz	r3, 8000f04 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8000efc:	8813      	ldrh	r3, [r2, #0]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8000f04:	4a09      	ldr	r2, [pc, #36]	@ (8000f2c <MC_Scheduler+0x54>)
 8000f06:	8813      	ldrh	r3, [r2, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0e9      	beq.n	8000ee2 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8000f0e:	8813      	ldrh	r3, [r2, #0]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	8013      	strh	r3, [r2, #0]
}
 8000f16:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8000f18:	f7ff ff32 	bl	8000d80 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8000f1c:	802c      	strh	r4, [r5, #0]
 8000f1e:	e7e9      	b.n	8000ef4 <MC_Scheduler+0x1c>
 8000f20:	200007ec 	.word	0x200007ec
 8000f24:	200007f2 	.word	0x200007f2
 8000f28:	200007f0 	.word	0x200007f0
 8000f2c:	200007ee 	.word	0x200007ee

08000f30 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8000f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 8000f34:	4830      	ldr	r0, [pc, #192]	@ (8000ff8 <TSK_HighFrequencyTask+0xc8>)
{
 8000f36:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 8000f38:	f003 fc06 	bl	8004748 <HALL_CalcElAngle>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8000f3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ffc <TSK_HighFrequencyTask+0xcc>)
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8000f3e:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8001000 <TSK_HighFrequencyTask+0xd0>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	f004 fd4c 	bl	80059e0 <STC_GetSpeedSensor>
 8000f48:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8000f4a:	f004 fce7 	bl	800591c <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8000f4e:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8000f50:	4605      	mov	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8000f52:	f8d8 0000 	ldr.w	r0, [r8]
 8000f56:	f004 f83d 	bl	8004fd4 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8000f5a:	9803      	ldr	r0, [sp, #12]
 8000f5c:	f7ff fcd8 	bl	8000910 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8000f60:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8000f62:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8000f64:	f7ff fd46 	bl	80009f4 <MCM_Park>
 8000f68:	4603      	mov	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8000f6a:	4c26      	ldr	r4, [pc, #152]	@ (8001004 <TSK_HighFrequencyTask+0xd4>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 8000f6c:	4a26      	ldr	r2, [pc, #152]	@ (8001008 <TSK_HighFrequencyTask+0xd8>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8000f6e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8000f72:	9301      	str	r3, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8000f74:	b21b      	sxth	r3, r3
  Vqd.q = PI_Controller(pPIDIq[M1],
 8000f76:	6810      	ldr	r0, [r2, #0]
 8000f78:	1ac9      	subs	r1, r1, r3
 8000f7a:	f003 ff5b 	bl	8004e34 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
 8000f7e:	4b23      	ldr	r3, [pc, #140]	@ (800100c <TSK_HighFrequencyTask+0xdc>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 8000f80:	4606      	mov	r6, r0
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8000f82:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 8000f86:	6818      	ldr	r0, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8000f88:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 8000f8c:	1ac9      	subs	r1, r1, r3
 8000f8e:	f003 ff51 	bl	8004e34 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8000f92:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <TSK_HighFrequencyTask+0xe0>)
 8000f94:	f8ad 6008 	strh.w	r6, [sp, #8]
 8000f98:	f8ad 000a 	strh.w	r0, [sp, #10]
 8000f9c:	9902      	ldr	r1, [sp, #8]
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f003 fa28 	bl	80043f4 <Circle_Limitation>
 8000fa4:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8000fa6:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8000fa8:	9602      	str	r6, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8000faa:	f004 fcbf 	bl	800592c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8000fae:	4629      	mov	r1, r5
 8000fb0:	9802      	ldr	r0, [sp, #8]
 8000fb2:	f7ff fd61 	bl	8000a78 <MCM_Rev_Park>
 8000fb6:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8000fb8:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8000fbc:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8000fbe:	f004 f80b 	bl	8004fd8 <PWMC_SetPhaseVoltage>
 8000fc2:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8000fc4:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8000fc6:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8000fc8:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Iab = Iab;
 8000fca:	6023      	str	r3, [r4, #0]
  FOCVars[M1].Iqd = Iqd;
 8000fcc:	9b01      	ldr	r3, [sp, #4]
  if(hFOCreturn == MC_FOC_DURATION)
 8000fce:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 8000fd0:	f8c4 6016 	str.w	r6, [r4, #22]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8000fd4:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8000fd6:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].hElAngle = hElAngle;
 8000fd8:	8425      	strh	r5, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8000fda:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8000fde:	d003      	beq.n	8000fe8 <TSK_HighFrequencyTask+0xb8>
}
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	b006      	add	sp, #24
 8000fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	480a      	ldr	r0, [pc, #40]	@ (8001014 <TSK_HighFrequencyTask+0xe4>)
 8000fec:	f004 fdc8 	bl	8005b80 <STM_FaultProcessing>
}
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	b006      	add	sp, #24
 8000ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ff8:	200002a8 	.word	0x200002a8
 8000ffc:	20000818 	.word	0x20000818
 8001000:	20000800 	.word	0x20000800
 8001004:	20000898 	.word	0x20000898
 8001008:	20000810 	.word	0x20000810
 800100c:	2000080c 	.word	0x2000080c
 8001010:	200007f8 	.word	0x200007f8
 8001014:	2000081c 	.word	0x2000081c

08001018 <TSK_SafetyTask_PWMOFF>:
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <TSK_SafetyTask_PWMOFF+0x70>)
{
 800101a:	b570      	push	{r4, r5, r6, lr}
 800101c:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800101e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001022:	f003 feb3 	bl	8004d8c <NTC_CalcAvTemp>
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001026:	4e19      	ldr	r6, [pc, #100]	@ (800108c <TSK_SafetyTask_PWMOFF+0x74>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001028:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800102a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800102e:	f004 f90f 	bl	8005250 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001032:	f025 050e 	bic.w	r5, r5, #14
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <TSK_SafetyTask_PWMOFF+0x78>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001038:	ea40 0105 	orr.w	r1, r0, r5
 800103c:	b289      	uxth	r1, r1
  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 800103e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001042:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8001046:	43ca      	mvns	r2, r1
 8001048:	4628      	mov	r0, r5
 800104a:	b292      	uxth	r2, r2
 800104c:	f004 fd98 	bl	8005b80 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001050:	4628      	mov	r0, r5
 8001052:	f004 fe31 	bl	8005cb8 <STM_GetState>
 8001056:	280a      	cmp	r0, #10
 8001058:	d008      	beq.n	800106c <TSK_SafetyTask_PWMOFF+0x54>
 800105a:	280b      	cmp	r0, #11
 800105c:	d000      	beq.n	8001060 <TSK_SafetyTask_PWMOFF+0x48>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800105e:	bd70      	pop	{r4, r5, r6, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001060:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 8001064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001068:	f004 b8d0 	b.w	800520c <PWMC_SwitchOffPWM>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800106c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001070:	f004 f8cc 	bl	800520c <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001074:	4620      	mov	r0, r4
 8001076:	f7ff fd1f 	bl	8000ab8 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <TSK_SafetyTask_PWMOFF+0x7c>)
 800107c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001084:	f003 be28 	b.w	8004cd8 <MPM_Clear>
 8001088:	20000804 	.word	0x20000804
 800108c:	20000800 	.word	0x20000800
 8001090:	2000081c 	.word	0x2000081c
 8001094:	200007fc 	.word	0x200007fc

08001098 <TSK_SafetyTask>:
{
 8001098:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <TSK_SafetyTask+0x1c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d000      	beq.n	80010a4 <TSK_SafetyTask+0xc>
}
 80010a2:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff ffb7 	bl	8001018 <TSK_SafetyTask_PWMOFF>
}
 80010aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80010ae:	f000 bd6f 	b.w	8001b90 <RCM_ExecUserConv>
 80010b2:	bf00      	nop
 80010b4:	200007ec 	.word	0x200007ec

080010b8 <MC_RunMotorControlTasks>:
{
 80010b8:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MC_RunMotorControlTasks+0x1c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b903      	cbnz	r3, 80010c2 <MC_RunMotorControlTasks+0xa>
}
 80010c0:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80010c2:	f7ff ff09 	bl	8000ed8 <MC_Scheduler>
    TSK_SafetyTask();
 80010c6:	f7ff ffe7 	bl	8001098 <TSK_SafetyTask>
}
 80010ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 80010ce:	f001 b887 	b.w	80021e0 <UI_Scheduler>
 80010d2:	bf00      	nop
 80010d4:	200007ec 	.word	0x200007ec

080010d8 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80010d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <TSK_HardwareFaultTask+0x18>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	f004 fac7 	bl	8005670 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80010e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2180      	movs	r1, #128	@ 0x80
 80010ea:	4802      	ldr	r0, [pc, #8]	@ (80010f4 <TSK_HardwareFaultTask+0x1c>)
 80010ec:	f004 bd48 	b.w	8005b80 <STM_FaultProcessing>
 80010f0:	20000800 	.word	0x20000800
 80010f4:	2000081c 	.word	0x2000081c

080010f8 <mc_lock_pins>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80010f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80010fc:	2000      	movs	r0, #0
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80010fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001102:	f04f 1601 	mov.w	r6, #65537	@ 0x10001
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001106:	f04f 0a01 	mov.w	sl, #1
 800110a:	f04f 0902 	mov.w	r9, #2
 800110e:	f04f 0840 	mov.w	r8, #64	@ 0x40
 8001112:	f04f 0e04 	mov.w	lr, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001116:	4b32      	ldr	r3, [pc, #200]	@ (80011e0 <mc_lock_pins+0xe8>)
 8001118:	b08d      	sub	sp, #52	@ 0x34
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800111a:	f04f 0c80 	mov.w	ip, #128	@ 0x80
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800111e:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001120:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001122:	619a      	str	r2, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 8001124:	f8d3 b018 	ldr.w	fp, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001128:	2720      	movs	r7, #32
  temp = READ_REG(GPIOx->LCKR);
 800112a:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
  (void) temp;
 800112e:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001132:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001134:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001136:	619a      	str	r2, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 8001138:	f8d3 b018 	ldr.w	fp, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800113c:	4d29      	ldr	r5, [pc, #164]	@ (80011e4 <mc_lock_pins+0xec>)
  temp = READ_REG(GPIOx->LCKR);
 800113e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
  (void) temp;
 8001142:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001146:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001148:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800114a:	619a      	str	r2, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 800114c:	f8d3 b018 	ldr.w	fp, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001150:	4925      	ldr	r1, [pc, #148]	@ (80011e8 <mc_lock_pins+0xf0>)
  temp = READ_REG(GPIOx->LCKR);
 8001152:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
  (void) temp;
 8001156:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800115a:	619e      	str	r6, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800115c:	f8c3 a018 	str.w	sl, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001160:	619e      	str	r6, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 8001162:	699e      	ldr	r6, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001164:	4c21      	ldr	r4, [pc, #132]	@ (80011ec <mc_lock_pins+0xf4>)
  temp = READ_REG(GPIOx->LCKR);
 8001166:	9608      	str	r6, [sp, #32]
  (void) temp;
 8001168:	9e08      	ldr	r6, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800116a:	619d      	str	r5, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800116c:	f8c3 9018 	str.w	r9, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001170:	619d      	str	r5, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 8001172:	699d      	ldr	r5, [r3, #24]
 8001174:	9507      	str	r5, [sp, #28]
  (void) temp;
 8001176:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001178:	618c      	str	r4, [r1, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800117a:	f8c1 8018 	str.w	r8, [r1, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800117e:	618c      	str	r4, [r1, #24]
  temp = READ_REG(GPIOx->LCKR);
 8001180:	698c      	ldr	r4, [r1, #24]
 8001182:	9406      	str	r4, [sp, #24]
  (void) temp;
 8001184:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001186:	4c1a      	ldr	r4, [pc, #104]	@ (80011f0 <mc_lock_pins+0xf8>)
 8001188:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800118a:	f8c3 e018 	str.w	lr, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800118e:	619c      	str	r4, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 8001190:	699c      	ldr	r4, [r3, #24]
 8001192:	9405      	str	r4, [sp, #20]
  (void) temp;
 8001194:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001196:	4c17      	ldr	r4, [pc, #92]	@ (80011f4 <mc_lock_pins+0xfc>)
 8001198:	618c      	str	r4, [r1, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800119a:	f8c1 c018 	str.w	ip, [r1, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800119e:	618c      	str	r4, [r1, #24]
  temp = READ_REG(GPIOx->LCKR);
 80011a0:	698c      	ldr	r4, [r1, #24]
 80011a2:	9404      	str	r4, [sp, #16]
  (void) temp;
 80011a4:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80011a6:	4c14      	ldr	r4, [pc, #80]	@ (80011f8 <mc_lock_pins+0x100>)
 80011a8:	618c      	str	r4, [r1, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80011aa:	618f      	str	r7, [r1, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80011ac:	618c      	str	r4, [r1, #24]
  temp = READ_REG(GPIOx->LCKR);
 80011ae:	6989      	ldr	r1, [r1, #24]
 80011b0:	9103      	str	r1, [sp, #12]
  (void) temp;
 80011b2:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80011b4:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80011b6:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80011b8:	619a      	str	r2, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 80011ba:	6999      	ldr	r1, [r3, #24]
 80011bc:	9102      	str	r1, [sp, #8]
  (void) temp;
 80011be:	9902      	ldr	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80011c0:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80011c2:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80011c4:	619a      	str	r2, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 80011c6:	6999      	ldr	r1, [r3, #24]
 80011c8:	9101      	str	r1, [sp, #4]
  (void) temp;
 80011ca:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80011cc:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80011ce:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80011d0:	619a      	str	r2, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	9300      	str	r3, [sp, #0]
  (void) temp;
 80011d6:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 80011d8:	b00d      	add	sp, #52	@ 0x34
 80011da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011de:	bf00      	nop
 80011e0:	40010800 	.word	0x40010800
 80011e4:	00010002 	.word	0x00010002
 80011e8:	40010c00 	.word	0x40010c00
 80011ec:	00010040 	.word	0x00010040
 80011f0:	00010004 	.word	0x00010004
 80011f4:	00010080 	.word	0x00010080
 80011f8:	00010020 	.word	0x00010020

080011fc <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80011fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001200:	f04f 0900 	mov.w	r9, #0
{
 8001204:	4616      	mov	r6, r2
 8001206:	b08d      	sub	sp, #52	@ 0x34
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001208:	094a      	lsrs	r2, r1, #5
{
 800120a:	460c      	mov	r4, r1
 800120c:	4605      	mov	r5, r0
 800120e:	4698      	mov	r8, r3
  bool bNoError = false; // Default is error
 8001210:	f88d 9009 	strb.w	r9, [sp, #9]
  if (bMotorSelection != 0)
 8001214:	d123      	bne.n	800125e <MCP_ReceivedFrame+0x62>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001216:	2912      	cmp	r1, #18
 8001218:	d814      	bhi.n	8001244 <MCP_ReceivedFrame+0x48>
 800121a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800121e:	0016      	.short	0x0016
 8001220:	00cd016d 	.word	0x00cd016d
 8001224:	00130163 	.word	0x00130163
 8001228:	00570013 	.word	0x00570013
 800122c:	00900088 	.word	0x00900088
 8001230:	01c200b9 	.word	0x01c200b9
 8001234:	01ed01cd 	.word	0x01ed01cd
 8001238:	001301e4 	.word	0x001301e4
 800123c:	00130013 	.word	0x00130013
 8001240:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001244:	2301      	movs	r3, #1
 8001246:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 800124a:	2301      	movs	r3, #1
 800124c:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	@ 0x30
 8001250:	21ff      	movs	r1, #255	@ 0xff
 8001252:	f10d 020e 	add.w	r2, sp, #14
 8001256:	47a0      	blx	r4
    }
  }
}
 8001258:	b00d      	add	sp, #52	@ 0x34
 800125a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 800125e:	1e57      	subs	r7, r2, #1
 8001260:	463a      	mov	r2, r7
 8001262:	4649      	mov	r1, r9
 8001264:	f001 f81e 	bl	80022a4 <UI_SetReg>
 8001268:	b300      	cbz	r0, 80012ac <MCP_ReceivedFrame+0xb0>
      if (pHandle->pDAC)
 800126a:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 800126e:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 8001272:	b118      	cbz	r0, 800127c <MCP_ReceivedFrame+0x80>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 8001274:	463a      	mov	r2, r7
 8001276:	4649      	mov	r1, r9
 8001278:	f001 f814 	bl	80022a4 <UI_SetReg>
  switch (Code)
 800127c:	2c12      	cmp	r4, #18
 800127e:	f200 81db 	bhi.w	8001638 <MCP_ReceivedFrame+0x43c>
 8001282:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001286:	0082      	.short	0x0082
 8001288:	00990139 	.word	0x00990139
 800128c:	01d9012f 	.word	0x01d9012f
 8001290:	002301d9 	.word	0x002301d9
 8001294:	005c0054 	.word	0x005c0054
 8001298:	018e0085 	.word	0x018e0085
 800129c:	01b90199 	.word	0x01b90199
 80012a0:	01d901b0 	.word	0x01d901b0
 80012a4:	01d901d9 	.word	0x01d901d9
 80012a8:	008201d9 	.word	0x008201d9
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80012ac:	230b      	movs	r3, #11
    if (bNoError)
 80012ae:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80012b2:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d0c7      	beq.n	800124a <MCP_ReceivedFrame+0x4e>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80012ba:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	@ 0x30
 80012be:	2300      	movs	r3, #0
 80012c0:	21f0      	movs	r1, #240	@ 0xf0
 80012c2:	461a      	mov	r2, r3
 80012c4:	47a0      	blx	r4
}
 80012c6:	b00d      	add	sp, #52	@ 0x34
 80012c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        outBuff[i] = 0;
 80012cc:	ac04      	add	r4, sp, #16
 80012ce:	2100      	movs	r1, #0
 80012d0:	2220      	movs	r2, #32
 80012d2:	4620      	mov	r0, r4
 80012d4:	f004 fe2e 	bl	8005f34 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80012d8:	f8d5 70c0 	ldr.w	r7, [r5, #192]	@ 0xc0
 80012dc:	f10d 0112 	add.w	r1, sp, #18
 80012e0:	1e7b      	subs	r3, r7, #1
 80012e2:	f107 061c 	add.w	r6, r7, #28
 80012e6:	e004      	b.n	80012f2 <MCP_ReceivedFrame+0xf6>
 80012e8:	42b3      	cmp	r3, r6
        outBuff[3+i] = pHandle->s_fwVer[i];
 80012ea:	f801 2f01 	strb.w	r2, [r1, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80012ee:	f000 8290 	beq.w	8001812 <MCP_ReceivedFrame+0x616>
        outBuff[3+i] = pHandle->s_fwVer[i];
 80012f2:	4618      	mov	r0, r3
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80012f4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80012f8:	2a09      	cmp	r2, #9
 80012fa:	d1f5      	bne.n	80012e8 <MCP_ReceivedFrame+0xec>
 80012fc:	f1c7 0301 	rsb	r3, r7, #1
 8001300:	4403      	add	r3, r0
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001302:	1d5a      	adds	r2, r3, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001304:	1dd9      	adds	r1, r3, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001306:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001308:	5cba      	ldrb	r2, [r7, r2]
 800130a:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 800130e:	5c79      	ldrb	r1, [r7, r1]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001310:	4622      	mov	r2, r4
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001312:	f88d 1011 	strb.w	r1, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001316:	5cf8      	ldrb	r0, [r7, r3]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001318:	21f0      	movs	r1, #240	@ 0xf0
 800131a:	2320      	movs	r3, #32
      outBuff[2] = pHandle->s_fwVer[i+9];
 800131c:	f88d 0012 	strb.w	r0, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001320:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
 8001322:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001324:	47a0      	blx	r4
      bNoError = true;
 8001326:	2301      	movs	r3, #1
 8001328:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 800132c:	e7c5      	b.n	80012ba <MCP_ReceivedFrame+0xbe>
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800132e:	4628      	mov	r0, r5
 8001330:	88b2      	ldrh	r2, [r6, #4]
 8001332:	6831      	ldr	r1, [r6, #0]
 8001334:	f001 f8a0 	bl	8002478 <UI_ExecSpeedRamp>
 8001338:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800133c:	e7bb      	b.n	80012b6 <MCP_ReceivedFrame+0xba>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 800133e:	f10d 030e 	add.w	r3, sp, #14
 8001342:	7831      	ldrb	r1, [r6, #0]
 8001344:	f10d 020a 	add.w	r2, sp, #10
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	4628      	mov	r0, r5
 800134c:	ab03      	add	r3, sp, #12
 800134e:	f001 f8af 	bl	80024b0 <UI_GetRevupData>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001352:	2308      	movs	r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001354:	2200      	movs	r2, #0
      outBuff[4] = (uint8_t)(FinalTorque);
 8001356:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800135a:	21f0      	movs	r1, #240	@ 0xf0
      outBuff[0] = (uint8_t)(rpm);
 800135c:	f360 0207 	bfi	r2, r0, #0, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001360:	4118      	asrs	r0, r3
      outBuff[0] = (uint8_t)(rpm);
 8001362:	f360 220f 	bfi	r2, r0, #8, #8
      outBuff[6] = (uint8_t)(Durationms);
 8001366:	f8bd 000a 	ldrh.w	r0, [sp, #10]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800136a:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
      outBuff[0] = (uint8_t)(rpm);
 800136c:	f360 4217 	bfi	r2, r0, #16, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001370:	40d8      	lsrs	r0, r3
      outBuff[0] = (uint8_t)(rpm);
 8001372:	f360 621f 	bfi	r2, r0, #24, #8
 8001376:	9205      	str	r2, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001378:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800137c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800137e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001382:	0052      	lsls	r2, r2, #1
      outBuff[0] = (uint8_t)(rpm);
 8001384:	9204      	str	r2, [sp, #16]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001386:	aa04      	add	r2, sp, #16
 8001388:	47a0      	blx	r4
    if (bNoError)
 800138a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800138e:	e792      	b.n	80012b6 <MCP_ReceivedFrame+0xba>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001390:	f8d6 2001 	ldr.w	r2, [r6, #1]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001394:	4bbc      	ldr	r3, [pc, #752]	@ (8001688 <MCP_ReceivedFrame+0x48c>)
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001396:	f9b6 1005 	ldrsh.w	r1, [r6, #5]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 800139a:	fb83 0302 	smull	r0, r3, r3, r2
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 800139e:	9100      	str	r1, [sp, #0]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80013a0:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80013a4:	4628      	mov	r0, r5
 80013a6:	f8b6 2007 	ldrh.w	r2, [r6, #7]
 80013aa:	7831      	ldrb	r1, [r6, #0]
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	f001 f89f 	bl	80024f0 <UI_SetRevupData>
 80013b2:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80013b6:	e77e      	b.n	80012b6 <MCP_ReceivedFrame+0xba>
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80013b8:	2303      	movs	r3, #3
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80013ba:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80013bc:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80013c0:	2961      	cmp	r1, #97	@ 0x61
 80013c2:	f200 813f 	bhi.w	8001644 <MCP_ReceivedFrame+0x448>
 80013c6:	2945      	cmp	r1, #69	@ 0x45
 80013c8:	f200 8227 	bhi.w	800181a <MCP_ReceivedFrame+0x61e>
 80013cc:	2941      	cmp	r1, #65	@ 0x41
 80013ce:	d8dc      	bhi.n	800138a <MCP_ReceivedFrame+0x18e>
 80013d0:	2941      	cmp	r1, #65	@ 0x41
 80013d2:	d8da      	bhi.n	800138a <MCP_ReceivedFrame+0x18e>
 80013d4:	a301      	add	r3, pc, #4	@ (adr r3, 80013dc <MCP_ReceivedFrame+0x1e0>)
 80013d6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80013da:	bf00      	nop
 80013dc:	08001769 	.word	0x08001769
 80013e0:	08001715 	.word	0x08001715
 80013e4:	08001769 	.word	0x08001769
 80013e8:	08001769 	.word	0x08001769
 80013ec:	08001715 	.word	0x08001715
 80013f0:	080016e1 	.word	0x080016e1
 80013f4:	080016e1 	.word	0x080016e1
 80013f8:	080016e1 	.word	0x080016e1
 80013fc:	080016e1 	.word	0x080016e1
 8001400:	080016e1 	.word	0x080016e1
 8001404:	080016e1 	.word	0x080016e1
 8001408:	080016e1 	.word	0x080016e1
 800140c:	080016e1 	.word	0x080016e1
 8001410:	080016e1 	.word	0x080016e1
 8001414:	080016e1 	.word	0x080016e1
 8001418:	080016e1 	.word	0x080016e1
 800141c:	080016e1 	.word	0x080016e1
 8001420:	080016e1 	.word	0x080016e1
 8001424:	080016e1 	.word	0x080016e1
 8001428:	080016e1 	.word	0x080016e1
 800142c:	080016e1 	.word	0x080016e1
 8001430:	080016e1 	.word	0x080016e1
 8001434:	080016e1 	.word	0x080016e1
 8001438:	080016e1 	.word	0x080016e1
 800143c:	080016e1 	.word	0x080016e1
 8001440:	080016e1 	.word	0x080016e1
 8001444:	080016e1 	.word	0x080016e1
 8001448:	080016e1 	.word	0x080016e1
 800144c:	080017ef 	.word	0x080017ef
 8001450:	080017c7 	.word	0x080017c7
 8001454:	08001715 	.word	0x08001715
 8001458:	080016e1 	.word	0x080016e1
 800145c:	080016e1 	.word	0x080016e1
 8001460:	080016e1 	.word	0x080016e1
 8001464:	08001769 	.word	0x08001769
 8001468:	0800138b 	.word	0x0800138b
 800146c:	0800138b 	.word	0x0800138b
 8001470:	0800138b 	.word	0x0800138b
 8001474:	0800138b 	.word	0x0800138b
 8001478:	0800138b 	.word	0x0800138b
 800147c:	0800138b 	.word	0x0800138b
 8001480:	0800138b 	.word	0x0800138b
 8001484:	0800138b 	.word	0x0800138b
 8001488:	0800138b 	.word	0x0800138b
 800148c:	0800138b 	.word	0x0800138b
 8001490:	0800138b 	.word	0x0800138b
 8001494:	0800138b 	.word	0x0800138b
 8001498:	0800138b 	.word	0x0800138b
 800149c:	0800138b 	.word	0x0800138b
 80014a0:	0800138b 	.word	0x0800138b
 80014a4:	0800138b 	.word	0x0800138b
 80014a8:	0800138b 	.word	0x0800138b
 80014ac:	0800138b 	.word	0x0800138b
 80014b0:	0800138b 	.word	0x0800138b
 80014b4:	0800138b 	.word	0x0800138b
 80014b8:	0800138b 	.word	0x0800138b
 80014bc:	0800138b 	.word	0x0800138b
 80014c0:	0800138b 	.word	0x0800138b
 80014c4:	0800138b 	.word	0x0800138b
 80014c8:	0800138b 	.word	0x0800138b
 80014cc:	0800138b 	.word	0x0800138b
 80014d0:	0800138b 	.word	0x0800138b
 80014d4:	0800138b 	.word	0x0800138b
 80014d8:	0800138b 	.word	0x0800138b
 80014dc:	0800138b 	.word	0x0800138b
 80014e0:	080016e1 	.word	0x080016e1
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80014e4:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80014e6:	4628      	mov	r0, r5
 80014e8:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80014ea:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80014ee:	f000 ff8d 	bl	800240c <UI_ExecCmd>
 80014f2:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80014f6:	e6de      	b.n	80012b6 <MCP_ReceivedFrame+0xba>
      bErrorCode = ERROR_CODE_WRONG_SET;
 80014f8:	2305      	movs	r3, #5
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80014fa:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 80014fc:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001500:	2948      	cmp	r1, #72	@ 0x48
 8001502:	f200 80c5 	bhi.w	8001690 <MCP_ReceivedFrame+0x494>
 8001506:	2948      	cmp	r1, #72	@ 0x48
 8001508:	f200 80e4 	bhi.w	80016d4 <MCP_ReceivedFrame+0x4d8>
 800150c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001510:	00e2014c 	.word	0x00e2014c
 8001514:	014500e2 	.word	0x014500e2
 8001518:	00fa00e2 	.word	0x00fa00e2
 800151c:	00fa00fa 	.word	0x00fa00fa
 8001520:	00fa00fa 	.word	0x00fa00fa
 8001524:	00fa00fa 	.word	0x00fa00fa
 8001528:	00fa00fa 	.word	0x00fa00fa
 800152c:	00fa00fa 	.word	0x00fa00fa
 8001530:	010f010f 	.word	0x010f010f
 8001534:	00e200e2 	.word	0x00e200e2
 8001538:	00fa00fa 	.word	0x00fa00fa
 800153c:	00fa00fa 	.word	0x00fa00fa
 8001540:	00e200fa 	.word	0x00e200fa
 8001544:	00e200e2 	.word	0x00e200e2
 8001548:	01390143 	.word	0x01390143
 800154c:	00e200e2 	.word	0x00e200e2
 8001550:	00e200e2 	.word	0x00e200e2
 8001554:	00e200e2 	.word	0x00e200e2
 8001558:	00e200e2 	.word	0x00e200e2
 800155c:	00e200e2 	.word	0x00e200e2
 8001560:	00e200e2 	.word	0x00e200e2
 8001564:	00e200e2 	.word	0x00e200e2
 8001568:	00e200e2 	.word	0x00e200e2
 800156c:	00e200e2 	.word	0x00e200e2
 8001570:	00e200e2 	.word	0x00e200e2
 8001574:	00e200e2 	.word	0x00e200e2
 8001578:	00e200e2 	.word	0x00e200e2
 800157c:	00e200e2 	.word	0x00e200e2
 8001580:	00e200e2 	.word	0x00e200e2
 8001584:	00e200e2 	.word	0x00e200e2
 8001588:	00e200e2 	.word	0x00e200e2
 800158c:	00e200e2 	.word	0x00e200e2
 8001590:	00fa00e2 	.word	0x00fa00e2
 8001594:	00e200e2 	.word	0x00e200e2
 8001598:	00e200e2 	.word	0x00e200e2
 800159c:	010f010f 	.word	0x010f010f
 80015a0:	010f      	.short	0x010f
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 80015a2:	4628      	mov	r0, r5
 80015a4:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 80015a8:	f9b6 1000 	ldrsh.w	r1, [r6]
 80015ac:	f000 ffba 	bl	8002524 <UI_SetCurrentReferences>
      bNoError = true;
 80015b0:	2301      	movs	r3, #1
 80015b2:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 80015b6:	e680      	b.n	80012ba <MCP_ReceivedFrame+0xbe>
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80015b8:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80015ba:	4c34      	ldr	r4, [pc, #208]	@ (800168c <MCP_ReceivedFrame+0x490>)
 80015bc:	a804      	add	r0, sp, #16
 80015be:	4621      	mov	r1, r4
      stepList.data = buffer;
 80015c0:	9604      	str	r6, [sp, #16]
      stepList.len = Size;
 80015c2:	f88d 8014 	strb.w	r8, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80015c6:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80015ca:	f000 ffb9 	bl	8002540 <UI_GetMPInfo>
 80015ce:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 80015d2:	2800      	cmp	r0, #0
 80015d4:	f43f ae39 	beq.w	800124a <MCP_ReceivedFrame+0x4e>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 80015d8:	21f0      	movs	r1, #240	@ 0xf0
 80015da:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 80015dc:	7923      	ldrb	r3, [r4, #4]
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80015e2:	47b0      	blx	r6
  if (RequireAck)
 80015e4:	e638      	b.n	8001258 <MCP_ReceivedFrame+0x5c>
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 80015e6:	6831      	ldr	r1, [r6, #0]
 80015e8:	4628      	mov	r0, r5
 80015ea:	88b2      	ldrh	r2, [r6, #4]
 80015ec:	b209      	sxth	r1, r1
 80015ee:	f000 ff55 	bl	800249c <UI_ExecTorqueRamp>
 80015f2:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80015f6:	e65e      	b.n	80012b6 <MCP_ReceivedFrame+0xba>
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80015f8:	f8d5 30c0 	ldr.w	r3, [r5, #192]	@ 0xc0
 80015fc:	ac04      	add	r4, sp, #16
 80015fe:	4622      	mov	r2, r4
 8001600:	2000      	movs	r0, #0
 8001602:	3b01      	subs	r3, #1
 8001604:	e004      	b.n	8001610 <MCP_ReceivedFrame+0x414>
 8001606:	3001      	adds	r0, #1
 8001608:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 800160a:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800160e:	d009      	beq.n	8001624 <MCP_ReceivedFrame+0x428>
 8001610:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001614:	2900      	cmp	r1, #0
 8001616:	d1f6      	bne.n	8001606 <MCP_ReceivedFrame+0x40a>
        outBuff[i] = 0;
 8001618:	f1c0 0220 	rsb	r2, r0, #32
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	4420      	add	r0, r4
 8001620:	f004 fc88 	bl	8005f34 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001624:	2320      	movs	r3, #32
 8001626:	4622      	mov	r2, r4
 8001628:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	@ 0x30
 800162c:	21f0      	movs	r1, #240	@ 0xf0
 800162e:	47a0      	blx	r4
      bNoError = true;
 8001630:	2301      	movs	r3, #1
 8001632:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001636:	e640      	b.n	80012ba <MCP_ReceivedFrame+0xbe>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001638:	2301      	movs	r3, #1
    if (bNoError)
 800163a:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 800163e:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001642:	e638      	b.n	80012b6 <MCP_ReceivedFrame+0xba>
      switch (bRegID)
 8001644:	060b      	lsls	r3, r1, #24
 8001646:	d57a      	bpl.n	800173e <MCP_ReceivedFrame+0x542>
 8001648:	f081 0380 	eor.w	r3, r1, #128	@ 0x80
 800164c:	2b08      	cmp	r3, #8
 800164e:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 8001652:	f63f ae9a 	bhi.w	800138a <MCP_ReceivedFrame+0x18e>
 8001656:	2a08      	cmp	r2, #8
 8001658:	f63f ae97 	bhi.w	800138a <MCP_ReceivedFrame+0x18e>
 800165c:	a301      	add	r3, pc, #4	@ (adr r3, 8001664 <MCP_ReceivedFrame+0x468>)
 800165e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001662:	bf00      	nop
 8001664:	08001769 	.word	0x08001769
 8001668:	0800138b 	.word	0x0800138b
 800166c:	08001769 	.word	0x08001769
 8001670:	08001715 	.word	0x08001715
 8001674:	08001715 	.word	0x08001715
 8001678:	08001715 	.word	0x08001715
 800167c:	080016e1 	.word	0x080016e1
 8001680:	080016e1 	.word	0x080016e1
 8001684:	080016e1 	.word	0x080016e1
 8001688:	2aaaaaab 	.word	0x2aaaaaab
 800168c:	200008c0 	.word	0x200008c0
      switch (bRegID)
 8001690:	2965      	cmp	r1, #101	@ 0x65
 8001692:	d913      	bls.n	80016bc <MCP_ReceivedFrame+0x4c0>
 8001694:	f1a1 0374 	sub.w	r3, r1, #116	@ 0x74
 8001698:	b2da      	uxtb	r2, r3
 800169a:	2a14      	cmp	r2, #20
 800169c:	d81a      	bhi.n	80016d4 <MCP_ReceivedFrame+0x4d8>
 800169e:	2b14      	cmp	r3, #20
 80016a0:	d818      	bhi.n	80016d4 <MCP_ReceivedFrame+0x4d8>
 80016a2:	e8df f003 	tbb	[pc, r3]
 80016a6:	447a      	.short	0x447a
 80016a8:	44444444 	.word	0x44444444
 80016ac:	44171717 	.word	0x44171717
 80016b0:	17171744 	.word	0x17171744
 80016b4:	17171717 	.word	0x17171717
 80016b8:	2f2f      	.short	0x2f2f
 80016ba:	2f          	.byte	0x2f
 80016bb:	00          	.byte	0x00
 80016bc:	294e      	cmp	r1, #78	@ 0x4e
 80016be:	d909      	bls.n	80016d4 <MCP_ReceivedFrame+0x4d8>
 80016c0:	2301      	movs	r3, #1
 80016c2:	f1a1 024f 	sub.w	r2, r1, #79	@ 0x4f
 80016c6:	485e      	ldr	r0, [pc, #376]	@ (8001840 <MCP_ReceivedFrame+0x644>)
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	4093      	lsls	r3, r2
 80016cc:	4203      	tst	r3, r0
 80016ce:	d119      	bne.n	8001704 <MCP_ReceivedFrame+0x508>
 80016d0:	295b      	cmp	r1, #91	@ 0x5b
 80016d2:	d02c      	beq.n	800172e <MCP_ReceivedFrame+0x532>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 80016d4:	2302      	movs	r3, #2
    if (bNoError)
 80016d6:	f89d 0009 	ldrb.w	r0, [sp, #9]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 80016da:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 80016de:	e5ea      	b.n	80012b6 <MCP_ReceivedFrame+0xba>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80016e0:	4628      	mov	r0, r5
 80016e2:	f10d 0209 	add.w	r2, sp, #9
 80016e6:	f000 ff3f 	bl	8002568 <UI_GetReg>
          if ( bNoError == true )
 80016ea:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80016ee:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f43f adaa 	beq.w	800124a <MCP_ReceivedFrame+0x4e>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 80016f6:	2302      	movs	r3, #2
 80016f8:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	@ 0x30
 80016fc:	21f0      	movs	r1, #240	@ 0xf0
 80016fe:	aa04      	add	r2, sp, #16
 8001700:	47a0      	blx	r4
  if (RequireAck)
 8001702:	e5a9      	b.n	8001258 <MCP_ReceivedFrame+0x5c>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001704:	4628      	mov	r0, r5
 8001706:	f8b6 2001 	ldrh.w	r2, [r6, #1]
 800170a:	f000 fdcb 	bl	80022a4 <UI_SetReg>
 800170e:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001712:	e5d0      	b.n	80012b6 <MCP_ReceivedFrame+0xba>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001714:	4628      	mov	r0, r5
 8001716:	f10d 0209 	add.w	r2, sp, #9
 800171a:	f000 ff25 	bl	8002568 <UI_GetReg>
          if ( bNoError == true )
 800171e:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001722:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001724:	2b00      	cmp	r3, #0
 8001726:	f43f ad90 	beq.w	800124a <MCP_ReceivedFrame+0x4e>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 800172a:	2304      	movs	r3, #4
 800172c:	e7e4      	b.n	80016f8 <MCP_ReceivedFrame+0x4fc>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800172e:	4628      	mov	r0, r5
 8001730:	f8d6 2001 	ldr.w	r2, [r6, #1]
 8001734:	f000 fdb6 	bl	80022a4 <UI_SetReg>
 8001738:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800173c:	e5bb      	b.n	80012b6 <MCP_ReceivedFrame+0xba>
      switch (bRegID)
 800173e:	2963      	cmp	r1, #99	@ 0x63
 8001740:	f67f ae23 	bls.w	800138a <MCP_ReceivedFrame+0x18e>
 8001744:	2201      	movs	r2, #1
 8001746:	f1a1 0364 	sub.w	r3, r1, #100	@ 0x64
 800174a:	483e      	ldr	r0, [pc, #248]	@ (8001844 <MCP_ReceivedFrame+0x648>)
 800174c:	b2db      	uxtb	r3, r3
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	4018      	ands	r0, r3
 8001754:	2800      	cmp	r0, #0
 8001756:	d1dd      	bne.n	8001714 <MCP_ReceivedFrame+0x518>
 8001758:	f64c 4203 	movw	r2, #52227	@ 0xcc03
 800175c:	4213      	tst	r3, r2
 800175e:	d1bf      	bne.n	80016e0 <MCP_ReceivedFrame+0x4e4>
 8001760:	4a39      	ldr	r2, [pc, #228]	@ (8001848 <MCP_ReceivedFrame+0x64c>)
 8001762:	4213      	tst	r3, r2
 8001764:	f43f ae11 	beq.w	800138a <MCP_ReceivedFrame+0x18e>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001768:	4628      	mov	r0, r5
 800176a:	f10d 0209 	add.w	r2, sp, #9
 800176e:	f000 fefb 	bl	8002568 <UI_GetReg>
           if ( bNoError == true )
 8001772:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001776:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001778:	2b00      	cmp	r3, #0
 800177a:	f43f ad66 	beq.w	800124a <MCP_ReceivedFrame+0x4e>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800177e:	2301      	movs	r3, #1
 8001780:	e7ba      	b.n	80016f8 <MCP_ReceivedFrame+0x4fc>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8001782:	2101      	movs	r1, #1
 8001784:	7872      	ldrb	r2, [r6, #1]
 8001786:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 800178a:	f000 fee3 	bl	8002554 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 800178e:	2301      	movs	r3, #1
 8001790:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001794:	e591      	b.n	80012ba <MCP_ReceivedFrame+0xbe>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 8001796:	2100      	movs	r1, #0
 8001798:	e7f4      	b.n	8001784 <MCP_ReceivedFrame+0x588>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 800179a:	4628      	mov	r0, r5
 800179c:	7872      	ldrb	r2, [r6, #1]
 800179e:	f000 fd81 	bl	80022a4 <UI_SetReg>
 80017a2:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80017a6:	e586      	b.n	80012b6 <MCP_ReceivedFrame+0xba>
          int32_t wValue = (int32_t)(buffer[1]);
 80017a8:	7874      	ldrb	r4, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 80017aa:	2100      	movs	r1, #0
 80017ac:	4622      	mov	r2, r4
 80017ae:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 80017b2:	f000 fd77 	bl	80022a4 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80017b6:	4622      	mov	r2, r4
 80017b8:	2100      	movs	r1, #0
 80017ba:	4628      	mov	r0, r5
 80017bc:	f000 fd72 	bl	80022a4 <UI_SetReg>
 80017c0:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80017c4:	e577      	b.n	80012b6 <MCP_ReceivedFrame+0xba>
          if (pHandle->pDAC)
 80017c6:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 80017ca:	2800      	cmp	r0, #0
 80017cc:	f43f addd 	beq.w	800138a <MCP_ReceivedFrame+0x18e>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 80017d0:	2101      	movs	r1, #1
 80017d2:	f000 fec3 	bl	800255c <UI_GetDAC>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80017d6:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 80017d8:	f88d 0010 	strb.w	r0, [sp, #16]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80017dc:	21f0      	movs	r1, #240	@ 0xf0
 80017de:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
 80017e0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80017e2:	aa04      	add	r2, sp, #16
 80017e4:	47a0      	blx	r4
            bNoError = true;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 80017ec:	e565      	b.n	80012ba <MCP_ReceivedFrame+0xbe>
          if (pHandle->pDAC)
 80017ee:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 80017f2:	2800      	cmp	r0, #0
 80017f4:	f43f adc9 	beq.w	800138a <MCP_ReceivedFrame+0x18e>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 80017f8:	2100      	movs	r1, #0
 80017fa:	f000 feaf 	bl	800255c <UI_GetDAC>
 80017fe:	4602      	mov	r2, r0
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001800:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	@ 0x30
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8001804:	f88d 2010 	strb.w	r2, [sp, #16]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001808:	2301      	movs	r3, #1
 800180a:	21f0      	movs	r1, #240	@ 0xf0
 800180c:	aa04      	add	r2, sp, #16
 800180e:	47a0      	blx	r4
  if (RequireAck)
 8001810:	e522      	b.n	8001258 <MCP_ReceivedFrame+0x5c>
 8001812:	2326      	movs	r3, #38	@ 0x26
 8001814:	2124      	movs	r1, #36	@ 0x24
 8001816:	2222      	movs	r2, #34	@ 0x22
 8001818:	e576      	b.n	8001308 <MCP_ReceivedFrame+0x10c>
 800181a:	2301      	movs	r3, #1
      switch (bRegID)
 800181c:	f1a1 0246 	sub.w	r2, r1, #70	@ 0x46
 8001820:	480a      	ldr	r0, [pc, #40]	@ (800184c <MCP_ReceivedFrame+0x650>)
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	4093      	lsls	r3, r2
 8001826:	4203      	tst	r3, r0
 8001828:	f47f af5a 	bne.w	80016e0 <MCP_ReceivedFrame+0x4e4>
 800182c:	4a08      	ldr	r2, [pc, #32]	@ (8001850 <MCP_ReceivedFrame+0x654>)
 800182e:	4213      	tst	r3, r2
 8001830:	f47f af70 	bne.w	8001714 <MCP_ReceivedFrame+0x518>
 8001834:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <MCP_ReceivedFrame+0x658>)
 8001836:	401a      	ands	r2, r3
 8001838:	2a00      	cmp	r2, #0
 800183a:	f43f ada6 	beq.w	800138a <MCP_ReceivedFrame+0x18e>
 800183e:	e793      	b.n	8001768 <MCP_ReceivedFrame+0x56c>
 8001840:	006407f1 	.word	0x006407f1
 8001844:	0ffe11f0 	.word	0x0ffe11f0
 8001848:	0001020c 	.word	0x0001020c
 800184c:	0f8ffe78 	.word	0x0f8ffe78
 8001850:	00200107 	.word	0x00200107
 8001854:	00100080 	.word	0x00100080

08001858 <MCP_WaitNextFrame>:
{
 8001858:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 800185a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
{
 800185c:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 800185e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8001860:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001862:	2280      	movs	r2, #128	@ 0x80
 8001864:	f884 20c8 	strb.w	r2, [r4, #200]	@ 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8001868:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800186a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
}
 800186c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001870:	4718      	bx	r3
 8001872:	bf00      	nop

08001874 <MCP_Init>:
{
 8001874:	b570      	push	{r4, r5, r6, lr}
 8001876:	4604      	mov	r4, r0
 8001878:	4608      	mov	r0, r1
 800187a:	4616      	mov	r6, r2
 800187c:	461d      	mov	r5, r3
 800187e:	b082      	sub	sp, #8
  pHandle->pDAC = pDAC;
 8001880:	9907      	ldr	r1, [sp, #28]
  FCP_SetClient( pFCP, pHandle,
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <MCP_Init+0x3c>)
 8001884:	4a0b      	ldr	r2, [pc, #44]	@ (80018b4 <MCP_Init+0x40>)
 8001886:	9300      	str	r3, [sp, #0]
  pHandle->pDAC = pDAC;
 8001888:	f8c4 10c4 	str.w	r1, [r4, #196]	@ 0xc4
  pHandle->s_fwVer = s_fwVer;
 800188c:	9908      	ldr	r1, [sp, #32]
  pHandle->pFCP = pFCP;
 800188e:	6320      	str	r0, [r4, #48]	@ 0x30
  pHandle->s_fwVer = s_fwVer;
 8001890:	f8c4 10c0 	str.w	r1, [r4, #192]	@ 0xc0
  FCP_SetClient( pFCP, pHandle,
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <MCP_Init+0x44>)
 8001896:	4621      	mov	r1, r4
 8001898:	f002 fdfa 	bl	8004490 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 800189c:	9b06      	ldr	r3, [sp, #24]
  MCP_WaitNextFrame(pHandle);
 800189e:	4620      	mov	r0, r4
  pHandle->fFcpReceive = fFcpReceive;
 80018a0:	e9c4 650d 	strd	r6, r5, [r4, #52]	@ 0x34
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80018a4:	63e3      	str	r3, [r4, #60]	@ 0x3c
  MCP_WaitNextFrame(pHandle);
 80018a6:	f7ff ffd7 	bl	8001858 <MCP_WaitNextFrame>
}
 80018aa:	b002      	add	sp, #8
 80018ac:	bd70      	pop	{r4, r5, r6, pc}
 80018ae:	bf00      	nop
 80018b0:	080018bd 	.word	0x080018bd
 80018b4:	080018c5 	.word	0x080018c5
 80018b8:	080011fd 	.word	0x080011fd

080018bc <MCP_OnTimeOut>:
{
 80018bc:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 80018be:	f7ff ffcb 	bl	8001858 <MCP_WaitNextFrame>
}
 80018c2:	bd08      	pop	{r3, pc}

080018c4 <MCP_SentFrame>:
{
 80018c4:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 80018c6:	f7ff ffc7 	bl	8001858 <MCP_WaitNextFrame>
}
 80018ca:	bd08      	pop	{r3, pc}

080018cc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80018cc:	b570      	push	{r4, r5, r6, lr}
 80018ce:	b082      	sub	sp, #8
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80018d0:	f002 f81c 	bl	800390c <HAL_RCC_GetHCLKFreq>
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80018d6:	4d0c      	ldr	r5, [pc, #48]	@ (8001908 <MX_MotorControl_Init+0x3c>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80018d8:	fba3 3000 	umull	r3, r0, r3, r0
  MCboot(pMCI,pMCT);
 80018dc:	4c0b      	ldr	r4, [pc, #44]	@ (800190c <MX_MotorControl_Init+0x40>)
  mc_lock_pins();

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80018de:	4e0c      	ldr	r6, [pc, #48]	@ (8001910 <MX_MotorControl_Init+0x44>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80018e0:	09c0      	lsrs	r0, r0, #7
 80018e2:	f001 fb01 	bl	8002ee8 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 80018e6:	4629      	mov	r1, r5
 80018e8:	4620      	mov	r0, r4
 80018ea:	f7ff f91f 	bl	8000b2c <MCboot>
  mc_lock_pins();
 80018ee:	f7ff fc03 	bl	80010f8 <mc_lock_pins>
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80018f2:	2101      	movs	r1, #1
 80018f4:	462b      	mov	r3, r5
 80018f6:	4622      	mov	r2, r4
 80018f8:	4806      	ldr	r0, [pc, #24]	@ (8001914 <MX_MotorControl_Init+0x48>)
 80018fa:	9600      	str	r6, [sp, #0]
 80018fc:	f000 fc04 	bl	8002108 <UI_TaskInit>
}
 8001900:	b002      	add	sp, #8
 8001902:	bd70      	pop	{r4, r5, r6, pc}
 8001904:	10624dd3 	.word	0x10624dd3
 8001908:	200008c8 	.word	0x200008c8
 800190c:	200008cc 	.word	0x200008cc
 8001910:	08006234 	.word	0x08006234
 8001914:	200005b4 	.word	0x200005b4

08001918 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001918:	4983      	ldr	r1, [pc, #524]	@ (8001b28 <RCM_RegisterRegConv+0x210>)
{
 800191a:	b470      	push	{r4, r5, r6}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800191c:	680c      	ldr	r4, [r1, #0]
{
 800191e:	4602      	mov	r2, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001920:	2c00      	cmp	r4, #0
 8001922:	d033      	beq.n	800198c <RCM_RegisterRegConv+0x74>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001924:	f890 c004 	ldrb.w	ip, [r0, #4]
 8001928:	7923      	ldrb	r3, [r4, #4]
 800192a:	4563      	cmp	r3, ip
 800192c:	d01e      	beq.n	800196c <RCM_RegisterRegConv+0x54>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800192e:	684d      	ldr	r5, [r1, #4]
 8001930:	2d00      	cmp	r5, #0
 8001932:	f000 80b6 	beq.w	8001aa2 <RCM_RegisterRegConv+0x18a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001936:	792b      	ldrb	r3, [r5, #4]
 8001938:	4563      	cmp	r3, ip
 800193a:	f000 80c5 	beq.w	8001ac8 <RCM_RegisterRegConv+0x1b0>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800193e:	688e      	ldr	r6, [r1, #8]
 8001940:	2e00      	cmp	r6, #0
 8001942:	f000 809f 	beq.w	8001a84 <RCM_RegisterRegConv+0x16c>
  uint8_t handle=255;
 8001946:	20ff      	movs	r0, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001948:	7933      	ldrb	r3, [r6, #4]
 800194a:	4563      	cmp	r3, ip
 800194c:	d02e      	beq.n	80019ac <RCM_RegisterRegConv+0x94>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800194e:	68cb      	ldr	r3, [r1, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80b4 	beq.w	8001abe <RCM_RegisterRegConv+0x1a6>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001956:	791c      	ldrb	r4, [r3, #4]
 8001958:	4564      	cmp	r4, ip
 800195a:	f000 80be 	beq.w	8001ada <RCM_RegisterRegConv+0x1c2>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 800195e:	2803      	cmp	r0, #3
 8001960:	bf88      	it	hi
 8001962:	20ff      	movhi	r0, #255	@ 0xff
 8001964:	f240 80a8 	bls.w	8001ab8 <RCM_RegisterRegConv+0x1a0>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001968:	bc70      	pop	{r4, r5, r6}
 800196a:	4770      	bx	lr
            (RCM_handle_array [i]->regADC == regConv->regADC))
 800196c:	6803      	ldr	r3, [r0, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800196e:	6820      	ldr	r0, [r4, #0]
 8001970:	4298      	cmp	r0, r3
 8001972:	d022      	beq.n	80019ba <RCM_RegisterRegConv+0xa2>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001974:	684d      	ldr	r5, [r1, #4]
 8001976:	2d00      	cmp	r5, #0
 8001978:	f000 8093 	beq.w	8001aa2 <RCM_RegisterRegConv+0x18a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800197c:	7928      	ldrb	r0, [r5, #4]
 800197e:	4560      	cmp	r0, ip
 8001980:	f000 80c6 	beq.w	8001b10 <RCM_RegisterRegConv+0x1f8>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001984:	688e      	ldr	r6, [r1, #8]
 8001986:	2e00      	cmp	r6, #0
 8001988:	d1dd      	bne.n	8001946 <RCM_RegisterRegConv+0x2e>
 800198a:	e07c      	b.n	8001a86 <RCM_RegisterRegConv+0x16e>
 800198c:	684d      	ldr	r5, [r1, #4]
 800198e:	2d00      	cmp	r5, #0
 8001990:	f000 809d 	beq.w	8001ace <RCM_RegisterRegConv+0x1b6>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001994:	f890 c004 	ldrb.w	ip, [r0, #4]
 8001998:	792b      	ldrb	r3, [r5, #4]
 800199a:	4563      	cmp	r3, ip
 800199c:	d065      	beq.n	8001a6a <RCM_RegisterRegConv+0x152>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800199e:	688e      	ldr	r6, [r1, #8]
 80019a0:	2e00      	cmp	r6, #0
 80019a2:	f000 80b2 	beq.w	8001b0a <RCM_RegisterRegConv+0x1f2>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 80019a6:	4620      	mov	r0, r4
 80019a8:	e7ce      	b.n	8001948 <RCM_RegisterRegConv+0x30>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80019aa:	2001      	movs	r0, #1
 80019ac:	6834      	ldr	r4, [r6, #0]
            (RCM_handle_array [i]->regADC == regConv->regADC))
 80019ae:	6813      	ldr	r3, [r2, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80019b0:	429c      	cmp	r4, r3
 80019b2:	d1cc      	bne.n	800194e <RCM_RegisterRegConv+0x36>
      i++;
 80019b4:	2002      	movs	r0, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80019b6:	4604      	mov	r4, r0
 80019b8:	e001      	b.n	80019be <RCM_RegisterRegConv+0xa6>
  uint8_t i=0;
 80019ba:	2000      	movs	r0, #0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80019bc:	4604      	mov	r4, r0
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80019be:	2500      	movs	r5, #0
      RCM_handle_array [handle] = regConv;
 80019c0:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80019c4:	4959      	ldr	r1, [pc, #356]	@ (8001b2c <RCM_RegisterRegConv+0x214>)
 80019c6:	f841 5034 	str.w	r5, [r1, r4, lsl #3]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80019ca:	6899      	ldr	r1, [r3, #8]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 80019cc:	07cc      	lsls	r4, r1, #31
 80019ce:	d418      	bmi.n	8001a02 <RCM_RegisterRegConv+0xea>
{
  /* Note: on this STM32 series, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, ADC_CR1_EOCIE);
 80019d0:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80019d2:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, ADC_CR1_EOCIE);
 80019d6:	f021 0120 	bic.w	r1, r1, #32
 80019da:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 80019dc:	f06f 0102 	mvn.w	r1, #2
 80019e0:	6019      	str	r1, [r3, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80019e8:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80019ea:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80019ec:	6899      	ldr	r1, [r3, #8]
 80019ee:	f041 0101 	orr.w	r1, r1, #1
 80019f2:	6099      	str	r1, [r3, #8]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80019f4:	6899      	ldr	r1, [r3, #8]
 80019f6:	f041 0104 	orr.w	r1, r1, #4
 80019fa:	6099      	str	r1, [r3, #8]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80019fc:	6899      	ldr	r1, [r3, #8]
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )
 80019fe:	0749      	lsls	r1, r1, #29
 8001a00:	d4fc      	bmi.n	80019fc <RCM_RegisterRegConv+0xe4>
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001a02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001a04:	f1bc 0f09 	cmp.w	ip, #9
 8001a08:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8001a0c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8001a0e:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 8001a12:	d840      	bhi.n	8001a96 <RCM_RegisterRegConv+0x17e>
 8001a14:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
 8001a18:	ea4c 5101 	orr.w	r1, ip, r1, lsl #20
 8001a1c:	4329      	orrs	r1, r5
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
 8001a22:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001a26:	fab4 f484 	clz	r4, r4
 8001a2a:	330c      	adds	r3, #12
 8001a2c:	40e5      	lsrs	r5, r4
 8001a2e:	f04f 7cf8 	mov.w	ip, #32505856	@ 0x1f00000
  MODIFY_REG(*preg,
 8001a32:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8001a36:	f001 71f8 	and.w	r1, r1, #32505856	@ 0x1f00000
 8001a3a:	fa9c f4ac 	rbit	r4, ip
 8001a3e:	fab4 f484 	clz	r4, r4
 8001a42:	fa9c fcac 	rbit	ip, ip
 8001a46:	fabc fc8c 	clz	ip, ip
 8001a4a:	6892      	ldr	r2, [r2, #8]
 8001a4c:	fa21 f404 	lsr.w	r4, r1, r4
 8001a50:	fa21 f10c 	lsr.w	r1, r1, ip
 8001a54:	fa02 f101 	lsl.w	r1, r2, r1
 8001a58:	2207      	movs	r2, #7
 8001a5a:	40a2      	lsls	r2, r4
 8001a5c:	ea26 0202 	bic.w	r2, r6, r2
 8001a60:	430a      	orrs	r2, r1
 8001a62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
}
 8001a66:	bc70      	pop	{r4, r5, r6}
 8001a68:	4770      	bx	lr
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	6813      	ldr	r3, [r2, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001a6e:	682c      	ldr	r4, [r5, #0]
 8001a70:	429c      	cmp	r4, r3
 8001a72:	d03a      	beq.n	8001aea <RCM_RegisterRegConv+0x1d2>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001a74:	688e      	ldr	r6, [r1, #8]
 8001a76:	2e00      	cmp	r6, #0
 8001a78:	f47f af66 	bne.w	8001948 <RCM_RegisterRegConv+0x30>
 8001a7c:	2804      	cmp	r0, #4
 8001a7e:	d802      	bhi.n	8001a86 <RCM_RegisterRegConv+0x16e>
 8001a80:	4630      	mov	r0, r6
 8001a82:	e037      	b.n	8001af4 <RCM_RegisterRegConv+0x1dc>
 8001a84:	6803      	ldr	r3, [r0, #0]
 8001a86:	68c8      	ldr	r0, [r1, #12]
 8001a88:	b110      	cbz	r0, 8001a90 <RCM_RegisterRegConv+0x178>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001a8a:	7904      	ldrb	r4, [r0, #4]
 8001a8c:	4564      	cmp	r4, ip
 8001a8e:	d041      	beq.n	8001b14 <RCM_RegisterRegConv+0x1fc>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8001a90:	2002      	movs	r0, #2
      RCM_handle_array [handle] = regConv;
 8001a92:	4604      	mov	r4, r0
 8001a94:	e793      	b.n	80019be <RCM_RegisterRegConv+0xa6>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001a96:	391e      	subs	r1, #30
 8001a98:	ea4c 5101 	orr.w	r1, ip, r1, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001a9c:	f001 7500 	and.w	r5, r1, #33554432	@ 0x2000000
 8001aa0:	e7bd      	b.n	8001a1e <RCM_RegisterRegConv+0x106>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001aa2:	688e      	ldr	r6, [r1, #8]
 8001aa4:	b326      	cbz	r6, 8001af0 <RCM_RegisterRegConv+0x1d8>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001aa6:	7933      	ldrb	r3, [r6, #4]
 8001aa8:	4563      	cmp	r3, ip
 8001aaa:	f43f af7e 	beq.w	80019aa <RCM_RegisterRegConv+0x92>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001aae:	68cb      	ldr	r3, [r1, #12]
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f47f af4f 	bne.w	8001956 <RCM_RegisterRegConv+0x3e>
 8001ab8:	6813      	ldr	r3, [r2, #0]
      RCM_handle_array [handle] = regConv;
 8001aba:	4604      	mov	r4, r0
 8001abc:	e77f      	b.n	80019be <RCM_RegisterRegConv+0xa6>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001abe:	2804      	cmp	r0, #4
 8001ac0:	d9fa      	bls.n	8001ab8 <RCM_RegisterRegConv+0x1a0>
 8001ac2:	2003      	movs	r0, #3
 8001ac4:	6813      	ldr	r3, [r2, #0]
 8001ac6:	e7f8      	b.n	8001aba <RCM_RegisterRegConv+0x1a2>
  uint8_t handle=255;
 8001ac8:	20ff      	movs	r0, #255	@ 0xff
 8001aca:	6813      	ldr	r3, [r2, #0]
 8001acc:	e7cf      	b.n	8001a6e <RCM_RegisterRegConv+0x156>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001ace:	688e      	ldr	r6, [r1, #8]
 8001ad0:	b326      	cbz	r6, 8001b1c <RCM_RegisterRegConv+0x204>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	f892 c004 	ldrb.w	ip, [r2, #4]
 8001ad8:	e736      	b.n	8001948 <RCM_RegisterRegConv+0x30>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001ada:	681c      	ldr	r4, [r3, #0]
            (RCM_handle_array [i]->regADC == regConv->regADC))
 8001adc:	6813      	ldr	r3, [r2, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001ade:	429c      	cmp	r4, r3
 8001ae0:	f47f af3d 	bne.w	800195e <RCM_RegisterRegConv+0x46>
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	e769      	b.n	80019be <RCM_RegisterRegConv+0xa6>
      i++;
 8001aea:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001aec:	4604      	mov	r4, r0
 8001aee:	e766      	b.n	80019be <RCM_RegisterRegConv+0xa6>
 8001af0:	2001      	movs	r0, #1
 8001af2:	6813      	ldr	r3, [r2, #0]
 8001af4:	68cc      	ldr	r4, [r1, #12]
 8001af6:	2c00      	cmp	r4, #0
 8001af8:	d0cb      	beq.n	8001a92 <RCM_RegisterRegConv+0x17a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001afa:	7925      	ldrb	r5, [r4, #4]
 8001afc:	4565      	cmp	r5, ip
 8001afe:	d1c8      	bne.n	8001a92 <RCM_RegisterRegConv+0x17a>
 8001b00:	6824      	ldr	r4, [r4, #0]
 8001b02:	429c      	cmp	r4, r3
 8001b04:	d0ee      	beq.n	8001ae4 <RCM_RegisterRegConv+0x1cc>
      RCM_handle_array [handle] = regConv;
 8001b06:	4604      	mov	r4, r0
 8001b08:	e759      	b.n	80019be <RCM_RegisterRegConv+0xa6>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	6813      	ldr	r3, [r2, #0]
 8001b0e:	e7f1      	b.n	8001af4 <RCM_RegisterRegConv+0x1dc>
  uint8_t handle=255;
 8001b10:	20ff      	movs	r0, #255	@ 0xff
 8001b12:	e7ac      	b.n	8001a6e <RCM_RegisterRegConv+0x156>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001b14:	6800      	ldr	r0, [r0, #0]
 8001b16:	4283      	cmp	r3, r0
 8001b18:	d0e4      	beq.n	8001ae4 <RCM_RegisterRegConv+0x1cc>
 8001b1a:	e7b9      	b.n	8001a90 <RCM_RegisterRegConv+0x178>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001b1c:	4630      	mov	r0, r6
 8001b1e:	f892 c004 	ldrb.w	ip, [r2, #4]
 8001b22:	6813      	ldr	r3, [r2, #0]
 8001b24:	e7e6      	b.n	8001af4 <RCM_RegisterRegConv+0x1dc>
 8001b26:	bf00      	nop
 8001b28:	200008f8 	.word	0x200008f8
 8001b2c:	200008d8 	.word	0x200008d8

08001b30 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001b30:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <RCM_ExecRegularConv+0x5c>)
 8001b32:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001b36:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001b38:	6812      	ldr	r2, [r2, #0]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001b3a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001b3e:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001b40:	bf93      	iteet	ls
 8001b42:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 8001b46:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001b48:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
 8001b4c:	f043 7300 	orrls.w	r3, r3, #33554432	@ 0x2000000
 8001b50:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001b54:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001b58:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8001b5c:	fab1 f181 	clz	r1, r1
 8001b60:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8001b64:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 8001b68:	4601      	mov	r1, r0
 8001b6a:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8001b6e:	f363 0004 	bfi	r0, r3, #0, #5
 8001b72:	f841 002c 	str.w	r0, [r1, ip, lsl #2]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001b76:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b78:	6893      	ldr	r3, [r2, #8]
 8001b7a:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8001b7e:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8001b80:	6813      	ldr	r3, [r2, #0]

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

    LL_ADC_REG_StartConversionSWStart(RCM_handle_array[handle]->regADC);
  while ( LL_ADC_IsActiveFlag_EOS (RCM_handle_array[handle]->regADC ) == 0u) {}
 8001b82:	079b      	lsls	r3, r3, #30
 8001b84:	d5fc      	bpl.n	8001b80 <RCM_ExecRegularConv+0x50>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001b86:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8001b88:	b280      	uxth	r0, r0
 8001b8a:	4770      	bx	lr
 8001b8c:	200008f8 	.word	0x200008f8

08001b90 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8001b90:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001b92:	4c0e      	ldr	r4, [pc, #56]	@ (8001bcc <RCM_ExecUserConv+0x3c>)
 8001b94:	7823      	ldrb	r3, [r4, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d000      	beq.n	8001b9c <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001b9a:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001b9c:	4d0c      	ldr	r5, [pc, #48]	@ (8001bd0 <RCM_ExecUserConv+0x40>)
 8001b9e:	7828      	ldrb	r0, [r5, #0]
 8001ba0:	f7ff ffc6 	bl	8001b30 <RCM_ExecRegularConv>
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	7021      	strb	r1, [r4, #0]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001ba8:	4601      	mov	r1, r0
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <RCM_ExecUserConv+0x44>)
 8001bac:	7828      	ldrb	r0, [r5, #0]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <RCM_ExecUserConv+0x48>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001bb0:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001bb4:	8011      	strh	r1, [r2, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001bb6:	2d00      	cmp	r5, #0
 8001bb8:	d0ef      	beq.n	8001b9a <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001bba:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001bbe:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001bc4:	462b      	mov	r3, r5
}
 8001bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001bca:	4718      	bx	r3
 8001bcc:	200008d0 	.word	0x200008d0
 8001bd0:	200008d4 	.word	0x200008d4
 8001bd4:	200008d8 	.word	0x200008d8
 8001bd8:	200008d2 	.word	0x200008d2

08001bdc <ADC1_2_IRQHandler>:
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */

  ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8001bdc:	4a05      	ldr	r2, [pc, #20]	@ (8001bf4 <ADC1_2_IRQHandler+0x18>)
{
 8001bde:	b508      	push	{r3, lr}
  ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8001be0:	6813      	ldr	r3, [r2, #0]
 8001be2:	f023 030c 	bic.w	r3, r3, #12
 8001be6:	6013      	str	r3, [r2, #0]

  UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 8001be8:	f7ff f9a2 	bl	8000f30 <TSK_HighFrequencyTask>

  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */

}
 8001bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 8001bf0:	f000 bb18 	b.w	8002224 <UI_DACUpdate>
 8001bf4:	40012400 	.word	0x40012400

08001bf8 <TIM1_UP_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001bf8:	f06f 0201 	mvn.w	r2, #1
 8001bfc:	4b02      	ldr	r3, [pc, #8]	@ (8001c08 <TIM1_UP_IRQHandler+0x10>)
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */
    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8001bfe:	4803      	ldr	r0, [pc, #12]	@ (8001c0c <TIM1_UP_IRQHandler+0x14>)
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	f003 bded 	b.w	80057e0 <R3_2_TIMx_UP_IRQHandler>
 8001c06:	bf00      	nop
 8001c08:	40012c00 	.word	0x40012c00
 8001c0c:	20000370 	.word	0x20000370

08001c10 <TIM1_BRK_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8001c10:	4807      	ldr	r0, [pc, #28]	@ (8001c30 <TIM1_BRK_IRQHandler+0x20>)
{
 8001c12:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8001c14:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8001c16:	689b      	ldr	r3, [r3, #8]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	0612      	lsls	r2, r2, #24
 8001c1c:	d504      	bpl.n	8001c28 <TIM1_BRK_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001c1e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c22:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);

    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8001c24:	f003 fe18 	bl	8005858 <R3_2_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8001c28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8001c2c:	f7ff b954 	b.w	8000ed8 <MC_Scheduler>
 8001c30:	20000370 	.word	0x20000370

08001c34 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8001c34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 8001c36:	4c0c      	ldr	r4, [pc, #48]	@ (8001c68 <TIM2_IRQHandler+0x34>)
 8001c38:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	07d1      	lsls	r1, r2, #31
 8001c3e:	d506      	bpl.n	8001c4e <TIM2_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001c40:	f06f 0201 	mvn.w	r2, #1
  {
    LL_TIM_ClearFlag_UPDATE(HALL_M1.TIMx);
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8001c44:	4620      	mov	r0, r4
 8001c46:	611a      	str	r2, [r3, #16]
 8001c48:	f002 ff84 	bl	8004b54 <HALL_TIMx_UP_IRQHandler>
  else
  {
    /* Nothing to do */
  }
  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 8001c4c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	0792      	lsls	r2, r2, #30
 8001c52:	d507      	bpl.n	8001c64 <TIM2_IRQHandler+0x30>
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8001c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001c58:	f06f 0202 	mvn.w	r2, #2
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <TIM2_IRQHandler+0x34>)
 8001c5e:	611a      	str	r2, [r3, #16]
 8001c60:	f002 bddc 	b.w	800481c <HALL_TIMx_CC_IRQHandler>
}
 8001c64:	bd10      	pop	{r4, pc}
 8001c66:	bf00      	nop
 8001c68:	200002a8 	.word	0x200002a8

08001c6c <USART3_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8001c6c:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  uint16_t hUSART_SR = pUSART.USARTx->SR;
 8001c6e:	4c1e      	ldr	r4, [pc, #120]	@ (8001ce8 <USART3_IRQHandler+0x7c>)
{
 8001c70:	b083      	sub	sp, #12
  uint16_t hUSART_SR = pUSART.USARTx->SR;
 8001c72:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8001c76:	681d      	ldr	r5, [r3, #0]

  if (hUSART_SR & USART_SR_ORE) /* Overrun error occurs before SR access */
 8001c78:	0729      	lsls	r1, r5, #28
 8001c7a:	d406      	bmi.n	8001c8a <USART3_IRQHandler+0x1e>
    /* USER CODE BEGIN USART_ORE */

    /* USER CODE END USART_ORE   */
  }

  if (hUSART_SR & USART_SR_RXNE) /* Valid data received */
 8001c7c:	06aa      	lsls	r2, r5, #26
 8001c7e:	d415      	bmi.n	8001cac <USART3_IRQHandler+0x40>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001c80:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE   */
  }

  if(LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001c82:	061b      	lsls	r3, r3, #24
 8001c84:	d421      	bmi.n	8001cca <USART3_IRQHandler+0x5e>
    /* USER CODE END USART_TXE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8001c86:	b003      	add	sp, #12
 8001c88:	bd30      	pop	{r4, r5, pc}
    UFCP_OVR_IRQ_Handler(&pUSART);
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f004 f934 	bl	8005ef8 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001c90:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8001c98:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8001c9e:	9b01      	ldr	r3, [sp, #4]
    UI_SerialCommunicationTimeOutStop();
 8001ca0:	f000 fad0 	bl	8002244 <UI_SerialCommunicationTimeOutStop>
  if (hUSART_SR & USART_SR_RXNE) /* Valid data received */
 8001ca4:	06aa      	lsls	r2, r5, #26
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)); /* Flag 0 = RX */
 8001ca6:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  if (hUSART_SR & USART_SR_RXNE) /* Valid data received */
 8001caa:	d5e9      	bpl.n	8001c80 <USART3_IRQHandler+0x14>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001cac:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)); /* Flag 0 = RX */
 8001cae:	480e      	ldr	r0, [pc, #56]	@ (8001ce8 <USART3_IRQHandler+0x7c>)
 8001cb0:	b2c9      	uxtb	r1, r1
 8001cb2:	f004 f8bb 	bl	8005e2c <UFCP_RX_IRQ_Handler>
 8001cb6:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d00c      	beq.n	8001cd6 <USART3_IRQHandler+0x6a>
    if (retVal == 2)
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d00f      	beq.n	8001ce0 <USART3_IRQHandler+0x74>
  if(LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001cc0:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	d5dd      	bpl.n	8001c86 <USART3_IRQHandler+0x1a>
    UFCP_TX_IRQ_Handler(&pUSART); /* Flag 1 = TX */
 8001cca:	4807      	ldr	r0, [pc, #28]	@ (8001ce8 <USART3_IRQHandler+0x7c>)
}
 8001ccc:	b003      	add	sp, #12
 8001cce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    UFCP_TX_IRQ_Handler(&pUSART); /* Flag 1 = TX */
 8001cd2:	f004 b807 	b.w	8005ce4 <UFCP_TX_IRQ_Handler>
      UI_SerialCommunicationTimeOutStart();
 8001cd6:	f000 fabb 	bl	8002250 <UI_SerialCommunicationTimeOutStart>
  if(LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001cda:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8001cde:	e7cf      	b.n	8001c80 <USART3_IRQHandler+0x14>
      UI_SerialCommunicationTimeOutStop();
 8001ce0:	f000 fab0 	bl	8002244 <UI_SerialCommunicationTimeOutStop>
 8001ce4:	e7ec      	b.n	8001cc0 <USART3_IRQHandler+0x54>
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000

08001cec <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001cec:	b510      	push	{r4, lr}
 8001cee:	b082      	sub	sp, #8
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8001cf0:	f7ff f9f2 	bl	80010d8 <TSK_HardwareFaultTask>
 8001cf4:	4c1b      	ldr	r4, [pc, #108]	@ (8001d64 <HardFault_Handler+0x78>)

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8001cf6:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	0712      	lsls	r2, r2, #28
 8001cfe:	d41d      	bmi.n	8001d3c <HardFault_Handler+0x50>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001d00:	681a      	ldr	r2, [r3, #0]
        UFCP_OVR_IRQ_Handler(&pUSART);
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001d02:	0610      	lsls	r0, r2, #24
 8001d04:	d40f      	bmi.n	8001d26 <HardFault_Handler+0x3a>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001d06:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8001d08:	0692      	lsls	r2, r2, #26
 8001d0a:	d5f6      	bpl.n	8001cfa <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001d0c:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8001d0e:	4620      	mov	r0, r4
 8001d10:	b2c9      	uxtb	r1, r1
 8001d12:	f004 f88b 	bl	8005e2c <UFCP_RX_IRQ_Handler>
 8001d16:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d01f      	beq.n	8001d5c <HardFault_Handler+0x70>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d1ea      	bne.n	8001cf6 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8001d20:	f000 fa90 	bl	8002244 <UI_SerialCommunicationTimeOutStop>
 8001d24:	e7e7      	b.n	8001cf6 <HardFault_Handler+0xa>
        UFCP_TX_IRQ_Handler(&pUSART);
 8001d26:	4620      	mov	r0, r4
 8001d28:	f003 ffdc 	bl	8005ce4 <UFCP_TX_IRQ_Handler>
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8001d2c:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	0691      	lsls	r1, r2, #26
 8001d34:	d4ea      	bmi.n	8001d0c <HardFault_Handler+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001d36:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8001d38:	0712      	lsls	r2, r2, #28
 8001d3a:	d5e1      	bpl.n	8001d00 <HardFault_Handler+0x14>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f004 f8db 	bl	8005ef8 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001d42:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  tmpreg = USARTx->SR;
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8001d4a:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8001d50:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 8001d52:	f000 fa77 	bl	8002244 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8001d56:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8001d5a:	e7d1      	b.n	8001d00 <HardFault_Handler+0x14>
          UI_SerialCommunicationTimeOutStart();
 8001d5c:	f000 fa78 	bl	8002250 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8001d60:	e7c9      	b.n	8001cf6 <HardFault_Handler+0xa>
 8001d62:	bf00      	nop
 8001d64:	20000000 	.word	0x20000000

08001d68 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8001d68:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8001d6a:	4c0a      	ldr	r4, [pc, #40]	@ (8001d94 <SysTick_Handler+0x2c>)
 8001d6c:	7823      	ldrb	r3, [r4, #0]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d006      	beq.n	8001d80 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8001d72:	3301      	adds	r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8001d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8001d7c:	f7ff b99c 	b.w	80010b8 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8001d80:	f000 fe56 	bl	8002a30 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8001d84:	f001 f8ca 	bl	8002f1c <HAL_SYSTICK_IRQHandler>
 8001d88:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8001d8a:	7023      	strb	r3, [r4, #0]
}
 8001d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8001d90:	f7ff b992 	b.w	80010b8 <MC_RunMotorControlTasks>
 8001d94:	200005b8 	.word	0x200005b8

08001d98 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8001d98:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <EXTI15_10_IRQHandler+0x14>)
 8001d9a:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8001d9c:	0492      	lsls	r2, r2, #18
 8001d9e:	d400      	bmi.n	8001da2 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

}
 8001da0:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001da2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001da6:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8001da8:	f000 ba58 	b.w	800225c <UI_HandleStartStopButton_cb>
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b500      	push	{lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <HAL_MspInit+0x44>)
{
 8001db4:	b083      	sub	sp, #12
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001db6:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001db8:	2004      	movs	r0, #4
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	619a      	str	r2, [r3, #24]
 8001dc0:	699a      	ldr	r2, [r3, #24]
 8001dc2:	f002 0201 	and.w	r2, r2, #1
 8001dc6:	9200      	str	r2, [sp, #0]
 8001dc8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001dd0:	61da      	str	r2, [r3, #28]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ddc:	f001 f828 	bl	8002e30 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001de0:	4a05      	ldr	r2, [pc, #20]	@ (8001df8 <HAL_MspInit+0x48>)
 8001de2:	6853      	ldr	r3, [r2, #4]
 8001de4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001de8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	b003      	add	sp, #12
 8001df0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010000 	.word	0x40010000

08001dfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001e00:	4a30      	ldr	r2, [pc, #192]	@ (8001ec4 <HAL_ADC_MspInit+0xc8>)
 8001e02:	6803      	ldr	r3, [r0, #0]
{
 8001e04:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8001e06:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001e0c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8001e10:	d004      	beq.n	8001e1c <HAL_ADC_MspInit+0x20>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001e12:	4a2d      	ldr	r2, [pc, #180]	@ (8001ec8 <HAL_ADC_MspInit+0xcc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d034      	beq.n	8001e82 <HAL_ADC_MspInit+0x86>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e18:	b008      	add	sp, #32
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ecc <HAL_ADC_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	4605      	mov	r5, r0
 8001e24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e28:	619a      	str	r2, [r3, #24]
 8001e2a:	699a      	ldr	r2, [r3, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 8001e2c:	4e28      	ldr	r6, [pc, #160]	@ (8001ed0 <HAL_ADC_MspInit+0xd4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e2e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001e32:	9200      	str	r2, [sp, #0]
 8001e34:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	f042 0204 	orr.w	r2, r2, #4
 8001e3c:	619a      	str	r2, [r3, #24]
 8001e3e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin;
 8001e40:	2270      	movs	r2, #112	@ 0x70
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin;
 8001e48:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	4821      	ldr	r0, [pc, #132]	@ (8001ed4 <HAL_ADC_MspInit+0xd8>)
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin;
 8001e4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f001 f89f 	bl	8002f94 <HAL_GPIO_Init>
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e56:	2320      	movs	r3, #32
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e58:	f44f 7180 	mov.w	r1, #256	@ 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e60:	e9c6 3406 	strd	r3, r4, [r6, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <HAL_ADC_MspInit+0xdc>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e66:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e68:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e6c:	6131      	str	r1, [r6, #16]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001e6e:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e70:	6172      	str	r2, [r6, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8001e72:	6033      	str	r3, [r6, #0]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e74:	f001 f856 	bl	8002f24 <HAL_DMA_Init>
 8001e78:	bb00      	cbnz	r0, 8001ebc <HAL_ADC_MspInit+0xc0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e7a:	622e      	str	r6, [r5, #32]
 8001e7c:	6275      	str	r5, [r6, #36]	@ 0x24
}
 8001e7e:	b008      	add	sp, #32
 8001e80:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin;
 8001e82:	2470      	movs	r4, #112	@ 0x70
 8001e84:	2503      	movs	r5, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_ADC_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	4812      	ldr	r0, [pc, #72]	@ (8001ed4 <HAL_ADC_MspInit+0xd8>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e8a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e8e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e92:	619a      	str	r2, [r3, #24]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001e9a:	9202      	str	r2, [sp, #8]
 8001e9c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	699a      	ldr	r2, [r3, #24]
 8001ea0:	f042 0204 	orr.w	r2, r2, #4
 8001ea4:	619a      	str	r2, [r3, #24]
 8001ea6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin;
 8001ea8:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	9303      	str	r3, [sp, #12]
 8001eb2:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f001 f86e 	bl	8002f94 <HAL_GPIO_Init>
}
 8001eb8:	b008      	add	sp, #32
 8001eba:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001ebc:	f7fe fc26 	bl	800070c <Error_Handler>
 8001ec0:	e7db      	b.n	8001e7a <HAL_ADC_MspInit+0x7e>
 8001ec2:	bf00      	nop
 8001ec4:	40012400 	.word	0x40012400
 8001ec8:	40012800 	.word	0x40012800
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	20000748 	.word	0x20000748
 8001ed4:	40010800 	.word	0x40010800
 8001ed8:	40020008 	.word	0x40020008

08001edc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	2300      	movs	r3, #0
{
 8001ede:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM1)
 8001ee0:	4927      	ldr	r1, [pc, #156]	@ (8001f80 <HAL_TIM_Base_MspInit+0xa4>)
 8001ee2:	6802      	ldr	r2, [r0, #0]
{
 8001ee4:	b089      	sub	sp, #36	@ 0x24
  if(htim_base->Instance==TIM1)
 8001ee6:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001eec:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 8001ef0:	d004      	beq.n	8001efc <HAL_TIM_Base_MspInit+0x20>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001ef2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001ef6:	d024      	beq.n	8001f42 <HAL_TIM_Base_MspInit+0x66>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ef8:	b009      	add	sp, #36	@ 0x24
 8001efa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001efc:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <HAL_TIM_Base_MspInit+0xa8>)
    hdma_tim1_up.Instance = DMA1_Channel5;
 8001efe:	4d22      	ldr	r5, [pc, #136]	@ (8001f88 <HAL_TIM_Base_MspInit+0xac>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f00:	6991      	ldr	r1, [r2, #24]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f02:	60ab      	str	r3, [r5, #8]
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f04:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8001f08:	6191      	str	r1, [r2, #24]
 8001f0a:	6992      	ldr	r2, [r2, #24]
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
    hdma_tim1_up.Instance = DMA1_Channel5;
 8001f12:	481e      	ldr	r0, [pc, #120]	@ (8001f8c <HAL_TIM_Base_MspInit+0xb0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f14:	9201      	str	r2, [sp, #4]
    hdma_tim1_up.Instance = DMA1_Channel5;
 8001f16:	6028      	str	r0, [r5, #0]
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f18:	9801      	ldr	r0, [sp, #4]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f1a:	2020      	movs	r0, #32
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f1c:	2110      	movs	r1, #16
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8001f22:	60eb      	str	r3, [r5, #12]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8001f24:	61eb      	str	r3, [r5, #28]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f2a:	61a8      	str	r0, [r5, #24]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001f2c:	4628      	mov	r0, r5
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f2e:	6069      	str	r1, [r5, #4]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f30:	612a      	str	r2, [r5, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f32:	616b      	str	r3, [r5, #20]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001f34:	f000 fff6 	bl	8002f24 <HAL_DMA_Init>
 8001f38:	b9f0      	cbnz	r0, 8001f78 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001f3a:	6225      	str	r5, [r4, #32]
 8001f3c:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8001f3e:	b009      	add	sp, #36	@ 0x24
 8001f40:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 8001f42:	2407      	movs	r4, #7
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f44:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <HAL_TIM_Base_MspInit+0xa8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	4812      	ldr	r0, [pc, #72]	@ (8001f90 <HAL_TIM_Base_MspInit+0xb4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f48:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	61da      	str	r2, [r3, #28]
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	f002 0201 	and.w	r2, r2, #1
 8001f58:	9202      	str	r2, [sp, #8]
 8001f5a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	f042 0204 	orr.w	r2, r2, #4
 8001f62:	619a      	str	r2, [r3, #24]
 8001f64:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 8001f66:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	9303      	str	r3, [sp, #12]
 8001f6e:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f001 f810 	bl	8002f94 <HAL_GPIO_Init>
}
 8001f74:	b009      	add	sp, #36	@ 0x24
 8001f76:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001f78:	f7fe fbc8 	bl	800070c <Error_Handler>
 8001f7c:	e7dd      	b.n	8001f3a <HAL_TIM_Base_MspInit+0x5e>
 8001f7e:	bf00      	nop
 8001f80:	40012c00 	.word	0x40012c00
 8001f84:	40021000 	.word	0x40021000
 8001f88:	2000062c 	.word	0x2000062c
 8001f8c:	40020058 	.word	0x40020058
 8001f90:	40010800 	.word	0x40010800

08001f94 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_TIM_PWM_MspInit+0x28>)
 8001f96:	6802      	ldr	r2, [r0, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d000      	beq.n	8001f9e <HAL_TIM_PWM_MspInit+0xa>
 8001f9c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f9e:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8001fa2:	69da      	ldr	r2, [r3, #28]
{
 8001fa4:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa6:	f042 0202 	orr.w	r2, r2, #2
 8001faa:	61da      	str	r2, [r3, #28]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fb6:	b002      	add	sp, #8
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40000400 	.word	0x40000400

08001fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	2300      	movs	r3, #0
{
 8001fc2:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 8001fc4:	492c      	ldr	r1, [pc, #176]	@ (8002078 <HAL_TIM_MspPostInit+0xb8>)
 8001fc6:	6802      	ldr	r2, [r0, #0]
{
 8001fc8:	b088      	sub	sp, #32
  if(htim->Instance==TIM1)
 8001fca:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001fd0:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(htim->Instance==TIM1)
 8001fd4:	d004      	beq.n	8001fe0 <HAL_TIM_MspPostInit+0x20>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8001fd6:	4b29      	ldr	r3, [pc, #164]	@ (800207c <HAL_TIM_MspPostInit+0xbc>)
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d02e      	beq.n	800203a <HAL_TIM_MspPostInit+0x7a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fdc:	b008      	add	sp, #32
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe0:	2603      	movs	r6, #3
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8001fe2:	f44f 4460 	mov.w	r4, #57344	@ 0xe000
 8001fe6:	2502      	movs	r5, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001fec:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001ff0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff2:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff4:	f042 0208 	orr.w	r2, r2, #8
 8001ff8:	619a      	str	r2, [r3, #24]
 8001ffa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	4820      	ldr	r0, [pc, #128]	@ (8002080 <HAL_TIM_MspPostInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	f002 0208 	and.w	r2, r2, #8
 8002002:	9201      	str	r2, [sp, #4]
 8002004:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	f042 0204 	orr.w	r2, r2, #4
 800200c:	619a      	str	r2, [r3, #24]
 800200e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002010:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	9302      	str	r3, [sp, #8]
 800201a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201c:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201e:	f000 ffb9 	bl	8002f94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002022:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002026:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	4816      	ldr	r0, [pc, #88]	@ (8002084 <HAL_TIM_MspPostInit+0xc4>)
 800202a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800202c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002030:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f000 ffaf 	bl	8002f94 <HAL_GPIO_Init>
}
 8002036:	b008      	add	sp, #32
 8002038:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = DAC_EMUL_CH1_Pin|DAC_EMUL_CH2_Pin;
 800203a:	f44f 7440 	mov.w	r4, #768	@ 0x300
 800203e:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2602      	movs	r6, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002042:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8002046:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002048:	480f      	ldr	r0, [pc, #60]	@ (8002088 <HAL_TIM_MspPostInit+0xc8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	f042 0210 	orr.w	r2, r2, #16
 800204e:	619a      	str	r2, [r3, #24]
 8002050:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002052:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	9303      	str	r3, [sp, #12]
 800205a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = DAC_EMUL_CH1_Pin|DAC_EMUL_CH2_Pin;
 800205c:	e9cd 4504 	strd	r4, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002062:	f000 ff97 	bl	8002f94 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002066:	4a09      	ldr	r2, [pc, #36]	@ (800208c <HAL_TIM_MspPostInit+0xcc>)
 8002068:	6853      	ldr	r3, [r2, #4]
 800206a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800206e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8002072:	6053      	str	r3, [r2, #4]
}
 8002074:	b008      	add	sp, #32
 8002076:	bd70      	pop	{r4, r5, r6, pc}
 8002078:	40012c00 	.word	0x40012c00
 800207c:	40000400 	.word	0x40000400
 8002080:	40010c00 	.word	0x40010c00
 8002084:	40010800 	.word	0x40010800
 8002088:	40011000 	.word	0x40011000
 800208c:	40010000 	.word	0x40010000

08002090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002090:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002092:	2400      	movs	r4, #0
  if(huart->Instance==USART3)
 8002094:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <HAL_UART_MspInit+0x70>)
 8002096:	6802      	ldr	r2, [r0, #0]
{
 8002098:	b086      	sub	sp, #24
  if(huart->Instance==USART3)
 800209a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80020a0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART3)
 80020a4:	d001      	beq.n	80020aa <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020a6:	b006      	add	sp, #24
 80020a8:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80020aa:	f503 33e4 	add.w	r3, r3, #116736	@ 0x1c800
 80020ae:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = UART_TX_Pin;
 80020b0:	f44f 6680 	mov.w	r6, #1024	@ 0x400
    __HAL_RCC_USART3_CLK_ENABLE();
 80020b4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80020b8:	61da      	str	r2, [r3, #28]
 80020ba:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = UART_TX_Pin;
 80020bc:	2702      	movs	r7, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 80020be:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80020c2:	9200      	str	r2, [sp, #0]
 80020c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 80020c8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	f042 0208 	orr.w	r2, r2, #8
 80020ce:	619a      	str	r2, [r3, #24]
 80020d0:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 80020d2:	480c      	ldr	r0, [pc, #48]	@ (8002104 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020dc:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART_TX_Pin;
 80020e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f000 ff56 	bl	8002f94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_RX_Pin;
 80020e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020ec:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 80020ee:	4805      	ldr	r0, [pc, #20]	@ (8002104 <HAL_UART_MspInit+0x74>)
 80020f0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_RX_Pin;
 80020f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 80020f8:	f000 ff4c 	bl	8002f94 <HAL_GPIO_Init>
}
 80020fc:	b006      	add	sp, #24
 80020fe:	bdd0      	pop	{r4, r6, r7, pc}
 8002100:	40004800 	.word	0x40004800
 8002104:	40010c00 	.word	0x40010c00

08002108 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800210c:	b087      	sub	sp, #28
      pDAC = &DAC_UI_Params;
 800210e:	f8df e0ac 	ldr.w	lr, [pc, #172]	@ 80021bc <UI_TaskInit+0xb4>
{
 8002112:	9c10      	ldr	r4, [sp, #64]	@ 0x40
      pDAC->_Super = UI_Params;
 8002114:	4d2a      	ldr	r5, [pc, #168]	@ (80021c0 <UI_TaskInit+0xb8>)
 8002116:	46f4      	mov	ip, lr
{
 8002118:	9405      	str	r4, [sp, #20]
      pDAC->_Super = UI_Params;
 800211a:	462c      	mov	r4, r5
{
 800211c:	468b      	mov	fp, r1
 800211e:	4690      	mov	r8, r2
 8002120:	4699      	mov	r9, r3
      pDAC = &DAC_UI_Params;
 8002122:	4e28      	ldr	r6, [pc, #160]	@ (80021c4 <UI_TaskInit+0xbc>)
{
 8002124:	4607      	mov	r7, r0
      pDAC = &DAC_UI_Params;
 8002126:	f8c6 e000 	str.w	lr, [r6]

      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 800212a:	9000      	str	r0, [sp, #0]
      pDAC->_Super = UI_Params;
 800212c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800212e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002138:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800213c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8002140:	4670      	mov	r0, lr
 8002142:	464b      	mov	r3, r9
 8002144:	4642      	mov	r2, r8
 8002146:	4659      	mov	r1, fp
 8002148:	f000 f894 	bl	8002274 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 800214c:	6830      	ldr	r0, [r6, #0]
 800214e:	f000 f9f9 	bl	8002544 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
 8002152:	6830      	ldr	r0, [r6, #0]
 8002154:	2223      	movs	r2, #35	@ 0x23
 8002156:	2100      	movs	r1, #0
 8002158:	f000 f9fc 	bl	8002554 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );
 800215c:	6830      	ldr	r0, [r6, #0]
 800215e:	2224      	movs	r2, #36	@ 0x24
 8002160:	2101      	movs	r1, #1
 8002162:	f000 f9f7 	bl	8002554 <UI_SetDAC>

    pMCP = &MCP_UI_Params;
 8002166:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <UI_TaskInit+0xc0>)
 8002168:	f8df a060 	ldr.w	sl, [pc, #96]	@ 80021cc <UI_TaskInit+0xc4>
    pMCP->_Super = UI_Params;
 800216c:	469c      	mov	ip, r3
    pMCP = &MCP_UI_Params;
 800216e:	f8ca 3000 	str.w	r3, [sl]
    pMCP->_Super = UI_Params;
 8002172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002174:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800217a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800217e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002182:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    UFCP_Init( & pUSART );
 8002186:	4812      	ldr	r0, [pc, #72]	@ (80021d0 <UI_TaskInit+0xc8>)
 8002188:	f003 fdaa 	bl	8005ce0 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 800218c:	9c05      	ldr	r4, [sp, #20]
 800218e:	4910      	ldr	r1, [pc, #64]	@ (80021d0 <UI_TaskInit+0xc8>)
 8002190:	9402      	str	r4, [sp, #8]
 8002192:	6833      	ldr	r3, [r6, #0]
 8002194:	4a0f      	ldr	r2, [pc, #60]	@ (80021d4 <UI_TaskInit+0xcc>)
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <UI_TaskInit+0xd0>)
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	f8da 0000 	ldr.w	r0, [sl]
 80021a0:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <UI_TaskInit+0xd4>)
 80021a2:	f7ff fb67 	bl	8001874 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80021a6:	464b      	mov	r3, r9
 80021a8:	4642      	mov	r2, r8
 80021aa:	4659      	mov	r1, fp
 80021ac:	f8da 0000 	ldr.w	r0, [sl]
 80021b0:	9710      	str	r7, [sp, #64]	@ 0x40

}
 80021b2:	b007      	add	sp, #28
 80021b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80021b8:	f000 b85c 	b.w	8002274 <UI_Init>
 80021bc:	20000208 	.word	0x20000208
 80021c0:	20000244 	.word	0x20000244
 80021c4:	200009dc 	.word	0x200009dc
 80021c8:	2000090c 	.word	0x2000090c
 80021cc:	200009d8 	.word	0x200009d8
 80021d0:	20000000 	.word	0x20000000
 80021d4:	08005d75 	.word	0x08005d75
 80021d8:	08005f19 	.word	0x08005f19
 80021dc:	08005d49 	.word	0x08005d49

080021e0 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 80021e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <UI_Scheduler+0x38>)
 80021e2:	8813      	ldrh	r3, [r2, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b11b      	cbz	r3, 80021f0 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 80021e8:	8813      	ldrh	r3, [r2, #0]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 80021f0:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <UI_Scheduler+0x3c>)
 80021f2:	8813      	ldrh	r3, [r2, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d903      	bls.n	8002202 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 80021fa:	8813      	ldrh	r3, [r2, #0]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29b      	uxth	r3, r3
 8002200:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002202:	4a07      	ldr	r2, [pc, #28]	@ (8002220 <UI_Scheduler+0x40>)
 8002204:	8813      	ldrh	r3, [r2, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d903      	bls.n	8002214 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 800220c:	8813      	ldrh	r3, [r2, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	b29b      	uxth	r3, r3
 8002212:	8013      	strh	r3, [r2, #0]
  }
}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	2000090a 	.word	0x2000090a
 800221c:	20000908 	.word	0x20000908
 8002220:	200005ba 	.word	0x200005ba

08002224 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 8002224:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8002226:	4d06      	ldr	r5, [pc, #24]	@ (8002240 <UI_DACUpdate+0x1c>)
{
 8002228:	4604      	mov	r4, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 800222a:	6828      	ldr	r0, [r5, #0]
 800222c:	f000 f836 	bl	800229c <UI_GetSelectedMC>
 8002230:	42a0      	cmp	r0, r4
 8002232:	d000      	beq.n	8002236 <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 8002234:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8002236:	6828      	ldr	r0, [r5, #0]
}
 8002238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 800223c:	f000 b986 	b.w	800254c <UI_DACExec>
 8002240:	200009dc 	.word	0x200009dc

08002244 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002244:	2200      	movs	r2, #0
 8002246:	4b01      	ldr	r3, [pc, #4]	@ (800224c <UI_SerialCommunicationTimeOutStop+0x8>)
 8002248:	801a      	strh	r2, [r3, #0]
}
 800224a:	4770      	bx	lr
 800224c:	20000908 	.word	0x20000908

08002250 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002250:	224f      	movs	r2, #79	@ 0x4f
 8002252:	4b01      	ldr	r3, [pc, #4]	@ (8002258 <UI_SerialCommunicationTimeOutStart+0x8>)
 8002254:	801a      	strh	r2, [r3, #0]
}
 8002256:	4770      	bx	lr
 8002258:	20000908 	.word	0x20000908

0800225c <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 800225c:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 800225e:	f7fe fa63 	bl	8000728 <MC_GetSTMStateMotor1>
 8002262:	b918      	cbnz	r0, 800226c <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002264:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8002268:	f7fe ba52 	b.w	8000710 <MC_StartMotor1>
}
 800226c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002270:	f7fe ba54 	b.w	800071c <MC_StopMotor1>

08002274 <UI_Init>:
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
 8002274:	f04f 0c00 	mov.w	ip, #0
  pHandle->pMCT = pMCT;
 8002278:	e9c0 2308 	strd	r2, r3, [r0, #32]
  pHandle->pUICfg = pUICfg;
 800227c:	9b00      	ldr	r3, [sp, #0]
  pHandle->bSelectedDrive = 0u;
 800227e:	f880 c02c 	strb.w	ip, [r0, #44]	@ 0x2c
  pHandle->bDriveNum = bMCNum;
 8002282:	7701      	strb	r1, [r0, #28]
  pHandle->pUICfg = pUICfg;
 8002284:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8002286:	4770      	bx	lr

08002288 <UI_SelectMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @param  bSelectMC: The new selected MC, zero based, on which UI operates.
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
 8002288:	4603      	mov	r3, r0
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 800228a:	7f02      	ldrb	r2, [r0, #28]
 800228c:	428a      	cmp	r2, r1
  bool retVal = true;
 800228e:	bf86      	itte	hi
 8002290:	2001      	movhi	r0, #1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002292:	f883 102c 	strbhi.w	r1, [r3, #44]	@ 0x2c
    retVal = false;
 8002296:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 800229c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop

080022a4 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 80022a4:	b530      	push	{r4, r5, lr}
 80022a6:	4614      	mov	r4, r2
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80022a8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80022ac:	6a02      	ldr	r2, [r0, #32]
{
 80022ae:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80022b0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80022b4:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80022b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 80022ba:	295b      	cmp	r1, #91	@ 0x5b
 80022bc:	d82f      	bhi.n	800231e <UI_SetReg+0x7a>
 80022be:	e8df f001 	tbb	[pc, r1]
 80022c2:	2e3d      	.short	0x2e3d
 80022c4:	4f2e412e 	.word	0x4f2e412e
 80022c8:	6a5e5954 	.word	0x6a5e5954
 80022cc:	8579746f 	.word	0x8579746f
 80022d0:	2e2e8f8a 	.word	0x2e2e8f8a
 80022d4:	2e2e2e2e 	.word	0x2e2e2e2e
 80022d8:	2e2e2e2e 	.word	0x2e2e2e2e
 80022dc:	2e2e2e2e 	.word	0x2e2e2e2e
 80022e0:	2e2e2e2e 	.word	0x2e2e2e2e
 80022e4:	2e2e2e2e 	.word	0x2e2e2e2e
 80022e8:	2e2e2e2e 	.word	0x2e2e2e2e
 80022ec:	2e2e2e2e 	.word	0x2e2e2e2e
 80022f0:	2e2e2e2e 	.word	0x2e2e2e2e
 80022f4:	2e2e2e2e 	.word	0x2e2e2e2e
 80022f8:	2e2e2e2e 	.word	0x2e2e2e2e
 80022fc:	2e2e2e2e 	.word	0x2e2e2e2e
 8002300:	942e2e2e 	.word	0x942e2e2e
 8002304:	2e2e2e2e 	.word	0x2e2e2e2e
 8002308:	2e2e2e2e 	.word	0x2e2e2e2e
 800230c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002310:	2e2e2e2e 	.word	0x2e2e2e2e
 8002314:	2e2e2e2e 	.word	0x2e2e2e2e
 8002318:	2e2e2e2e 	.word	0x2e2e2e2e
 800231c:	312e      	.short	0x312e
 800231e:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002320:	b003      	add	sp, #12
 8002322:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002324:	4938      	ldr	r1, [pc, #224]	@ (8002408 <UI_SetReg+0x164>)
 8002326:	2200      	movs	r2, #0
 8002328:	fb81 3104 	smull	r3, r1, r1, r4
 800232c:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002330:	4628      	mov	r0, r5
 8002332:	b209      	sxth	r1, r1
 8002334:	f7fe fa0c 	bl	8000750 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002338:	2001      	movs	r0, #1
 800233a:	e7f1      	b.n	8002320 <UI_SetReg+0x7c>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 800233c:	b2e1      	uxtb	r1, r4
 800233e:	f7ff ffa3 	bl	8002288 <UI_SelectMC>
    break;
 8002342:	e7ed      	b.n	8002320 <UI_SetReg+0x7c>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002344:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8002348:	d054      	beq.n	80023f4 <UI_SetReg+0x150>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 800234a:	2c01      	cmp	r4, #1
 800234c:	d1f4      	bne.n	8002338 <UI_SetReg+0x94>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 800234e:	4628      	mov	r0, r5
 8002350:	f7fe fa84 	bl	800085c <MCI_GetMecSpeedRefUnit>
 8002354:	2200      	movs	r2, #0
 8002356:	4601      	mov	r1, r0
 8002358:	4628      	mov	r0, r5
 800235a:	f7fe f9f9 	bl	8000750 <MCI_ExecSpeedRamp>
 800235e:	e7eb      	b.n	8002338 <UI_SetReg+0x94>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	b221      	sxth	r1, r4
 8002364:	f002 fd4e 	bl	8004e04 <PID_SetKP>
    break;
 8002368:	e7e6      	b.n	8002338 <UI_SetReg+0x94>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	b221      	sxth	r1, r4
 800236e:	f002 fd4b 	bl	8004e08 <PID_SetKI>
    break;
 8002372:	e7e1      	b.n	8002338 <UI_SetReg+0x94>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	b221      	sxth	r1, r4
 8002378:	f002 fd56 	bl	8004e28 <PID_SetKD>
    break;
 800237c:	e7dc      	b.n	8002338 <UI_SetReg+0x94>
      currComp = MCI_GetIqdref(pMCI);
 800237e:	4628      	mov	r0, r5
 8002380:	f7fe fa8e 	bl	80008a0 <MCI_GetIqdref>
 8002384:	4603      	mov	r3, r0
 8002386:	9301      	str	r3, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002388:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 800238c:	4628      	mov	r0, r5
 800238e:	9901      	ldr	r1, [sp, #4]
 8002390:	f7fe f9f2 	bl	8000778 <MCI_SetCurrentReferences>
    break;
 8002394:	e7d0      	b.n	8002338 <UI_SetReg+0x94>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002396:	6858      	ldr	r0, [r3, #4]
 8002398:	b221      	sxth	r1, r4
 800239a:	f002 fd33 	bl	8004e04 <PID_SetKP>
    break;
 800239e:	e7cb      	b.n	8002338 <UI_SetReg+0x94>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80023a0:	6858      	ldr	r0, [r3, #4]
 80023a2:	b221      	sxth	r1, r4
 80023a4:	f002 fd30 	bl	8004e08 <PID_SetKI>
    break;
 80023a8:	e7c6      	b.n	8002338 <UI_SetReg+0x94>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 80023aa:	6858      	ldr	r0, [r3, #4]
 80023ac:	b221      	sxth	r1, r4
 80023ae:	f002 fd3b 	bl	8004e28 <PID_SetKD>
    break;
 80023b2:	e7c1      	b.n	8002338 <UI_SetReg+0x94>
      currComp = MCI_GetIqdref(pMCI);
 80023b4:	4628      	mov	r0, r5
 80023b6:	f7fe fa73 	bl	80008a0 <MCI_GetIqdref>
 80023ba:	4603      	mov	r3, r0
 80023bc:	9301      	str	r3, [sp, #4]
      currComp.d = (int16_t)wValue;
 80023be:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 80023c2:	4628      	mov	r0, r5
 80023c4:	9901      	ldr	r1, [sp, #4]
 80023c6:	f7fe f9d7 	bl	8000778 <MCI_SetCurrentReferences>
    break;
 80023ca:	e7b5      	b.n	8002338 <UI_SetReg+0x94>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 80023cc:	6898      	ldr	r0, [r3, #8]
 80023ce:	b221      	sxth	r1, r4
 80023d0:	f002 fd18 	bl	8004e04 <PID_SetKP>
    break;
 80023d4:	e7b0      	b.n	8002338 <UI_SetReg+0x94>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80023d6:	6898      	ldr	r0, [r3, #8]
 80023d8:	b221      	sxth	r1, r4
 80023da:	f002 fd15 	bl	8004e08 <PID_SetKI>
    break;
 80023de:	e7ab      	b.n	8002338 <UI_SetReg+0x94>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80023e0:	6898      	ldr	r0, [r3, #8]
 80023e2:	b221      	sxth	r1, r4
 80023e4:	f002 fd20 	bl	8004e28 <PID_SetKD>
    break;
 80023e8:	e7a6      	b.n	8002338 <UI_SetReg+0x94>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80023ea:	4628      	mov	r0, r5
 80023ec:	b221      	sxth	r1, r4
 80023ee:	f7fe fa79 	bl	80008e4 <MCI_SetIdref>
    break;
 80023f2:	e7a1      	b.n	8002338 <UI_SetReg+0x94>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80023f4:	4628      	mov	r0, r5
 80023f6:	f7fe fa71 	bl	80008dc <MCI_GetTeref>
 80023fa:	4622      	mov	r2, r4
 80023fc:	4601      	mov	r1, r0
 80023fe:	4628      	mov	r0, r5
 8002400:	f7fe f9b0 	bl	8000764 <MCI_ExecTorqueRamp>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002404:	e798      	b.n	8002338 <UI_SetReg+0x94>
 8002406:	bf00      	nop
 8002408:	2aaaaaab 	.word	0x2aaaaaab

0800240c <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 800240c:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800240e:	6a03      	ldr	r3, [r0, #32]
 8002410:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c

  switch (bCmdID)
 8002414:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002416:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 800241a:	290d      	cmp	r1, #13
 800241c:	d811      	bhi.n	8002442 <UI_ExecCmd+0x36>
 800241e:	e8df f001 	tbb	[pc, r1]
 8002422:	0b12      	.short	0x0b12
 8002424:	070e0e16 	.word	0x070e0e16
 8002428:	1027231f 	.word	0x1027231f
 800242c:	0b101010 	.word	0x0b101010
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002430:	4620      	mov	r0, r4
 8002432:	f7fe f9f9 	bl	8000828 <MCI_GetSTMState>
 8002436:	b130      	cbz	r0, 8002446 <UI_ExecCmd+0x3a>
      MCI_StopMotor(pMCI);
 8002438:	4620      	mov	r0, r4
 800243a:	f7fe f9b1 	bl	80007a0 <MCI_StopMotor>
  bool retVal = true;
 800243e:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002440:	bd10      	pop	{r4, pc}
    retVal = false;
 8002442:	2000      	movs	r0, #0
}
 8002444:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002446:	4620      	mov	r0, r4
 8002448:	f7fe f9a0 	bl	800078c <MCI_StartMotor>
 800244c:	e7f7      	b.n	800243e <UI_ExecCmd+0x32>
      if (MCI_GetSTMState(pMCI) == RUN)
 800244e:	4620      	mov	r0, r4
 8002450:	f7fe f9ea 	bl	8000828 <MCI_GetSTMState>
 8002454:	2806      	cmp	r0, #6
 8002456:	d1f2      	bne.n	800243e <UI_ExecCmd+0x32>
        MCI_StopRamp(pMCI);
 8002458:	4620      	mov	r0, r4
 800245a:	f7fe f9f3 	bl	8000844 <MCI_StopRamp>
 800245e:	e7ee      	b.n	800243e <UI_ExecCmd+0x32>
      MCI_FaultAcknowledged(pMCI);
 8002460:	4620      	mov	r0, r4
 8002462:	f7fe f9a1 	bl	80007a8 <MCI_FaultAcknowledged>
    break;
 8002466:	e7ea      	b.n	800243e <UI_ExecCmd+0x32>
      MCI_EncoderAlign(pMCI);
 8002468:	4620      	mov	r0, r4
 800246a:	f7fe f9a1 	bl	80007b0 <MCI_EncoderAlign>
    break;
 800246e:	e7e6      	b.n	800243e <UI_ExecCmd+0x32>
      MCI_Clear_Iqdref(pMCI);
 8002470:	4620      	mov	r0, r4
 8002472:	f7fe fa41 	bl	80008f8 <MCI_Clear_Iqdref>
    break;
 8002476:	e7e2      	b.n	800243e <UI_ExecCmd+0x32>

08002478 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002478:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800247a:	4b07      	ldr	r3, [pc, #28]	@ (8002498 <UI_ExecSpeedRamp+0x20>)
 800247c:	fb83 c301 	smull	ip, r3, r3, r1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002480:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 8002484:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002486:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 800248a:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 800248e:	b209      	sxth	r1, r1
 8002490:	f7fe f95e 	bl	8000750 <MCI_ExecSpeedRamp>
  return true;
}
 8002494:	2001      	movs	r0, #1
 8002496:	bd08      	pop	{r3, pc}
 8002498:	2aaaaaab 	.word	0x2aaaaaab

0800249c <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 800249c:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800249e:	6a03      	ldr	r3, [r0, #32]
 80024a0:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 80024a4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80024a8:	f7fe f95c 	bl	8000764 <MCI_ExecTorqueRamp>
  return true;
}
 80024ac:	2001      	movs	r0, #1
 80024ae:	bd08      	pop	{r3, pc}

080024b0 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	4617      	mov	r7, r2
 80024b4:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80024b6:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 80024ba:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80024bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c0:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 80024c2:	b19c      	cbz	r4, 80024ec <UI_GetRevupData+0x3c>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80024c4:	4620      	mov	r0, r4
 80024c6:	460d      	mov	r5, r1
 80024c8:	f003 fa0e 	bl	80058e8 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80024cc:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80024ce:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80024d0:	4620      	mov	r0, r4
 80024d2:	f003 fa0f 	bl	80058f4 <RUC_GetPhaseFinalMecSpeedUnit>
 80024d6:	4603      	mov	r3, r0
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80024d8:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80024da:	8033      	strh	r3, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80024dc:	4620      	mov	r0, r4
 80024de:	f003 fa11 	bl	8005904 <RUC_GetPhaseFinalTorque>
 80024e2:	4603      	mov	r3, r0
 80024e4:	9a06      	ldr	r2, [sp, #24]
  bool hRetVal = true;
 80024e6:	2001      	movs	r0, #1
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80024e8:	8013      	strh	r3, [r2, #0]
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80024ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 80024ec:	4620      	mov	r0, r4
}
 80024ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024f0 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80024f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f2:	460c      	mov	r4, r1
 80024f4:	461e      	mov	r6, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80024f6:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80024fa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 80024fc:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002500:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002504:	695d      	ldr	r5, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002506:	4628      	mov	r0, r5
 8002508:	f003 f9dc 	bl	80058c4 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 800250c:	4632      	mov	r2, r6
 800250e:	4621      	mov	r1, r4
 8002510:	4628      	mov	r0, r5
 8002512:	f003 f9dd 	bl	80058d0 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002516:	4628      	mov	r0, r5
 8002518:	463a      	mov	r2, r7
 800251a:	4621      	mov	r1, r4
 800251c:	f003 f9de 	bl	80058dc <RUC_SetPhaseFinalTorque>
  return true;
}
 8002520:	2001      	movs	r0, #1
 8002522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002524 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002524:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  qd_t currComp;
  currComp.q = hIqRef;
  currComp.d = hIdRef;
 8002526:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800252a:	6a03      	ldr	r3, [r0, #32]
 800252c:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
  currComp.q = hIqRef;
 8002530:	f8ad 1004 	strh.w	r1, [sp, #4]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002534:	9901      	ldr	r1, [sp, #4]
 8002536:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
}
 800253a:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 800253c:	f7fe b91c 	b.w	8000778 <MCI_SetCurrentReferences>

08002540 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002540:	2000      	movs	r0, #0
 8002542:	4770      	bx	lr

08002544 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8002544:	6943      	ldr	r3, [r0, #20]
 8002546:	b103      	cbz	r3, 800254a <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 8002548:	4718      	bx	r3
  }
}
 800254a:	4770      	bx	lr

0800254c <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 800254c:	6983      	ldr	r3, [r0, #24]
 800254e:	b103      	cbz	r3, 8002552 <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 8002550:	4718      	bx	r3
  }
}
 8002552:	4770      	bx	lr

08002554 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 8002554:	6843      	ldr	r3, [r0, #4]
 8002556:	b103      	cbz	r3, 800255a <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 8002558:	4718      	bx	r3
  }
}
 800255a:	4770      	bx	lr

0800255c <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 800255c:	6883      	ldr	r3, [r0, #8]
 800255e:	b103      	cbz	r3, 8002562 <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 8002560:	4718      	bx	r3
  }
  return retVal;
}
 8002562:	2089      	movs	r0, #137	@ 0x89
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop

08002568 <UI_GetReg>:
{
 8002568:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800256a:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 800256c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002570:	6a05      	ldr	r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002572:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002576:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 800257a:	b08d      	sub	sp, #52	@ 0x34
  if ( success != (bool *) 0 )
 800257c:	2a00      	cmp	r2, #0
 800257e:	f000 808b 	beq.w	8002698 <UI_GetReg+0x130>
    *success = true;
 8002582:	f04f 0c01 	mov.w	ip, #1
 8002586:	f882 c000 	strb.w	ip, [r2]
  switch (bRegID)
 800258a:	2981      	cmp	r1, #129	@ 0x81
 800258c:	f200 8111 	bhi.w	80027b2 <UI_GetReg+0x24a>
 8002590:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002594:	01ff0179 	.word	0x01ff0179
 8002598:	01f701fb 	.word	0x01f701fb
 800259c:	016401f0 	.word	0x016401f0
 80025a0:	015c0160 	.word	0x015c0160
 80025a4:	01750113 	.word	0x01750113
 80025a8:	01e801ec 	.word	0x01e801ec
 80025ac:	018b0109 	.word	0x018b0109
 80025b0:	01830187 	.word	0x01830187
 80025b4:	010f010f 	.word	0x010f010f
 80025b8:	010f010f 	.word	0x010f010f
 80025bc:	010f010f 	.word	0x010f010f
 80025c0:	010f010f 	.word	0x010f010f
 80025c4:	0126010f 	.word	0x0126010f
 80025c8:	01560122 	.word	0x01560122
 80025cc:	014e0152 	.word	0x014e0152
 80025d0:	01180147 	.word	0x01180147
 80025d4:	010f011d 	.word	0x010f011d
 80025d8:	0142018f 	.word	0x0142018f
 80025dc:	0138013d 	.word	0x0138013d
 80025e0:	0118012f 	.word	0x0118012f
 80025e4:	0113011d 	.word	0x0113011d
 80025e8:	012a0109 	.word	0x012a0109
 80025ec:	01de01e3 	.word	0x01de01e3
 80025f0:	01c401d9 	.word	0x01c401d9
 80025f4:	010f01af 	.word	0x010f01af
 80025f8:	010f010f 	.word	0x010f010f
 80025fc:	010f010f 	.word	0x010f010f
 8002600:	010f010f 	.word	0x010f010f
 8002604:	010f010f 	.word	0x010f010f
 8002608:	010f010f 	.word	0x010f010f
 800260c:	01a8010f 	.word	0x01a8010f
 8002610:	0168016f 	.word	0x0168016f
 8002614:	0109017c 	.word	0x0109017c
 8002618:	010f010f 	.word	0x010f010f
 800261c:	010f010f 	.word	0x010f010f
 8002620:	010f010f 	.word	0x010f010f
 8002624:	010f010f 	.word	0x010f010f
 8002628:	010f010f 	.word	0x010f010f
 800262c:	010f010f 	.word	0x010f010f
 8002630:	010f010f 	.word	0x010f010f
 8002634:	010f010f 	.word	0x010f010f
 8002638:	010f010f 	.word	0x010f010f
 800263c:	010f010f 	.word	0x010f010f
 8002640:	010f010f 	.word	0x010f010f
 8002644:	010f010f 	.word	0x010f010f
 8002648:	019a010f 	.word	0x019a010f
 800264c:	010f010f 	.word	0x010f010f
 8002650:	010f010f 	.word	0x010f010f
 8002654:	010f010f 	.word	0x010f010f
 8002658:	010f010f 	.word	0x010f010f
 800265c:	010f010f 	.word	0x010f010f
 8002660:	010f010f 	.word	0x010f010f
 8002664:	010f010f 	.word	0x010f010f
 8002668:	010f010f 	.word	0x010f010f
 800266c:	010f010f 	.word	0x010f010f
 8002670:	01340196 	.word	0x01340196
 8002674:	010f01a6 	.word	0x010f01a6
 8002678:	0111015a 	.word	0x0111015a
 800267c:	010f010f 	.word	0x010f010f
 8002680:	010f010f 	.word	0x010f010f
 8002684:	010f010f 	.word	0x010f010f
 8002688:	010f010f 	.word	0x010f010f
 800268c:	010f010f 	.word	0x010f010f
 8002690:	010f010f 	.word	0x010f010f
 8002694:	0111010f 	.word	0x0111010f
 8002698:	2981      	cmp	r1, #129	@ 0x81
 800269a:	f200 808c 	bhi.w	80027b6 <UI_GetReg+0x24e>
 800269e:	e8df f011 	tbh	[pc, r1, lsl #1]
 80026a2:	00f2      	.short	0x00f2
 80026a4:	01740178 	.word	0x01740178
 80026a8:	01690170 	.word	0x01690170
 80026ac:	00d900dd 	.word	0x00d900dd
 80026b0:	008c00d5 	.word	0x008c00d5
 80026b4:	016500ee 	.word	0x016500ee
 80026b8:	00820161 	.word	0x00820161
 80026bc:	01000104 	.word	0x01000104
 80026c0:	008a00fc 	.word	0x008a00fc
 80026c4:	008a008a 	.word	0x008a008a
 80026c8:	008a008a 	.word	0x008a008a
 80026cc:	008a008a 	.word	0x008a008a
 80026d0:	008a008a 	.word	0x008a008a
 80026d4:	009b009f 	.word	0x009b009f
 80026d8:	00cb00cf 	.word	0x00cb00cf
 80026dc:	00c000c7 	.word	0x00c000c7
 80026e0:	00960091 	.word	0x00960091
 80026e4:	0108008a 	.word	0x0108008a
 80026e8:	00b600bb 	.word	0x00b600bb
 80026ec:	00a800b1 	.word	0x00a800b1
 80026f0:	00960091 	.word	0x00960091
 80026f4:	0082008c 	.word	0x0082008c
 80026f8:	015c00a3 	.word	0x015c00a3
 80026fc:	01520157 	.word	0x01520157
 8002700:	0128013d 	.word	0x0128013d
 8002704:	008a008a 	.word	0x008a008a
 8002708:	008a008a 	.word	0x008a008a
 800270c:	008a008a 	.word	0x008a008a
 8002710:	008a008a 	.word	0x008a008a
 8002714:	008a008a 	.word	0x008a008a
 8002718:	008a008a 	.word	0x008a008a
 800271c:	00e80121 	.word	0x00e80121
 8002720:	00f500e1 	.word	0x00f500e1
 8002724:	008a0082 	.word	0x008a0082
 8002728:	008a008a 	.word	0x008a008a
 800272c:	008a008a 	.word	0x008a008a
 8002730:	008a008a 	.word	0x008a008a
 8002734:	008a008a 	.word	0x008a008a
 8002738:	008a008a 	.word	0x008a008a
 800273c:	008a008a 	.word	0x008a008a
 8002740:	008a008a 	.word	0x008a008a
 8002744:	008a008a 	.word	0x008a008a
 8002748:	008a008a 	.word	0x008a008a
 800274c:	008a008a 	.word	0x008a008a
 8002750:	008a008a 	.word	0x008a008a
 8002754:	008a008a 	.word	0x008a008a
 8002758:	008a0113 	.word	0x008a0113
 800275c:	008a008a 	.word	0x008a008a
 8002760:	008a008a 	.word	0x008a008a
 8002764:	008a008a 	.word	0x008a008a
 8002768:	008a008a 	.word	0x008a008a
 800276c:	008a008a 	.word	0x008a008a
 8002770:	008a008a 	.word	0x008a008a
 8002774:	008a008a 	.word	0x008a008a
 8002778:	008a008a 	.word	0x008a008a
 800277c:	010f008a 	.word	0x010f008a
 8002780:	011f00ad 	.word	0x011f00ad
 8002784:	00d3008a 	.word	0x00d3008a
 8002788:	008a008a 	.word	0x008a008a
 800278c:	008a008a 	.word	0x008a008a
 8002790:	008a008a 	.word	0x008a008a
 8002794:	008a008a 	.word	0x008a008a
 8002798:	008a008a 	.word	0x008a008a
 800279c:	008a008a 	.word	0x008a008a
 80027a0:	008a008a 	.word	0x008a008a
 80027a4:	008a      	.short	0x008a
      bRetVal = MCI_GetIqdref(pMCI).d;
 80027a6:	4628      	mov	r0, r5
 80027a8:	f7fe f87a 	bl	80008a0 <MCI_GetIqdref>
 80027ac:	1400      	asrs	r0, r0, #16
}
 80027ae:	b00d      	add	sp, #52	@ 0x34
 80027b0:	bd30      	pop	{r4, r5, pc}
        *success = false;
 80027b2:	2300      	movs	r3, #0
 80027b4:	7013      	strb	r3, [r2, #0]
      bRetVal = PWBDID;
 80027b6:	2000      	movs	r0, #0
 80027b8:	e7f9      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = MCI_GetIqdref(pMCI).q;
 80027ba:	4628      	mov	r0, r5
 80027bc:	f7fe f870 	bl	80008a0 <MCI_GetIqdref>
 80027c0:	b200      	sxth	r0, r0
    break;
 80027c2:	e7f4      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = MCI_GetIqd(pMCI).q;
 80027c4:	4628      	mov	r0, r5
 80027c6:	f7fe f861 	bl	800088c <MCI_GetIqd>
 80027ca:	b200      	sxth	r0, r0
    break;
 80027cc:	e7ef      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = MCI_GetIqd(pMCI).d;
 80027ce:	4628      	mov	r0, r5
 80027d0:	f7fe f85c 	bl	800088c <MCI_GetIqd>
 80027d4:	1400      	asrs	r0, r0, #16
    break;
 80027d6:	e7ea      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80027d8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80027da:	f002 faf3 	bl	8004dc4 <NTC_GetAvTemp_C>
    break;
 80027de:	e7e6      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80027e0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80027e2:	f001 fe01 	bl	80043e8 <VBS_GetAvBusVoltage_V>
    break;
 80027e6:	e7e2      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = MCI_GetVqd(pMCI).q;
 80027e8:	4628      	mov	r0, r5
 80027ea:	f7fe f863 	bl	80008b4 <MCI_GetVqd>
 80027ee:	b200      	sxth	r0, r0
    break;
 80027f0:	e7dd      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80027f2:	4628      	mov	r0, r5
 80027f4:	f7fe f840 	bl	8000878 <MCI_GetIalphabeta>
 80027f8:	1400      	asrs	r0, r0, #16
    break;
 80027fa:	e7d8      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 80027fc:	6820      	ldr	r0, [r4, #0]
 80027fe:	f002 fb11 	bl	8004e24 <PID_GetKIDivisor>
    break;
 8002802:	e7d4      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002804:	4628      	mov	r0, r5
 8002806:	f7fe f837 	bl	8000878 <MCI_GetIalphabeta>
 800280a:	b200      	sxth	r0, r0
    break;
 800280c:	e7cf      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = MCI_GetIab(pMCI).b;
 800280e:	4628      	mov	r0, r5
 8002810:	f7fe f828 	bl	8000864 <MCI_GetIab>
 8002814:	1400      	asrs	r0, r0, #16
    break;
 8002816:	e7ca      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = MCI_GetIab(pMCI).a;
 8002818:	4628      	mov	r0, r5
 800281a:	f7fe f823 	bl	8000864 <MCI_GetIab>
 800281e:	b200      	sxth	r0, r0
    break;
 8002820:	e7c5      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002822:	4628      	mov	r0, r5
 8002824:	f7fe f812 	bl	800084c <MCI_GetAvrgMecSpeedUnit>
 8002828:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800282c:	0040      	lsls	r0, r0, #1
    break;
 800282e:	e7be      	b.n	80027ae <UI_GetReg+0x246>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 8002830:	2101      	movs	r1, #1
 8002832:	f7ff fe93 	bl	800255c <UI_GetDAC>
    break;
 8002836:	e7ba      	b.n	80027ae <UI_GetReg+0x246>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 8002838:	2100      	movs	r1, #0
 800283a:	f7ff fe8f 	bl	800255c <UI_GetDAC>
    break;
 800283e:	e7b6      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8002840:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002842:	f002 fa79 	bl	8004d38 <MPM_GetAvrgElMotorPowerW>
    break;
 8002846:	e7b2      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = CTRBDID;
 8002848:	2014      	movs	r0, #20
    break;
 800284a:	e7b0      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800284c:	6820      	ldr	r0, [r4, #0]
 800284e:	f002 faed 	bl	8004e2c <PID_GetKD>
    break;
 8002852:	e7ac      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002854:	6820      	ldr	r0, [r4, #0]
 8002856:	f002 fadd 	bl	8004e14 <PID_GetKI>
    break;
 800285a:	e7a8      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	f002 fad5 	bl	8004e0c <PID_GetKP>
    break;
 8002862:	e7a4      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8002864:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002866:	f003 f971 	bl	8005b4c <STC_GetMaxAppPositiveMecSpeedUnit>
 800286a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800286e:	0040      	lsls	r0, r0, #1
    break;
 8002870:	e79d      	b.n	80027ae <UI_GetReg+0x246>
      if (pHandle->pFctDACGetUserChannelValue)
 8002872:	6903      	ldr	r3, [r0, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d09e      	beq.n	80027b6 <UI_GetReg+0x24e>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 8002878:	2101      	movs	r1, #1
 800287a:	4798      	blx	r3
 800287c:	e797      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 800287e:	6860      	ldr	r0, [r4, #4]
 8002880:	f002 fac4 	bl	8004e0c <PID_GetKP>
    break;
 8002884:	e793      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002886:	f7ff fd09 	bl	800229c <UI_GetSelectedMC>
    break;
 800288a:	e790      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 800288c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800288e:	f003 f95f 	bl	8005b50 <STC_GetMinAppNegativeMecSpeedUnit>
 8002892:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002896:	0040      	lsls	r0, r0, #1
    break;
 8002898:	e789      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 800289a:	68a0      	ldr	r0, [r4, #8]
 800289c:	f002 fac6 	bl	8004e2c <PID_GetKD>
    break;
 80028a0:	e785      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80028a2:	68a0      	ldr	r0, [r4, #8]
 80028a4:	f002 fab6 	bl	8004e14 <PID_GetKI>
    break;
 80028a8:	e781      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80028aa:	68a0      	ldr	r0, [r4, #8]
 80028ac:	f002 faae 	bl	8004e0c <PID_GetKP>
    break;
 80028b0:	e77d      	b.n	80027ae <UI_GetReg+0x246>
      if (pMCT->pRevupCtrl)
 80028b2:	6960      	ldr	r0, [r4, #20]
 80028b4:	2800      	cmp	r0, #0
 80028b6:	f43f af7e 	beq.w	80027b6 <UI_GetReg+0x24e>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80028ba:	f003 f82b 	bl	8005914 <RUC_GetNumberOfPhases>
 80028be:	e776      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 80028c0:	6820      	ldr	r0, [r4, #0]
 80028c2:	f002 faad 	bl	8004e20 <PID_GetKPDivisor>
    break;
 80028c6:	e772      	b.n	80027ae <UI_GetReg+0x246>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80028c8:	4628      	mov	r0, r5
 80028ca:	f7fd ffb1 	bl	8000830 <MCI_GetControlMode>
 80028ce:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80028d0:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80028d2:	d06c      	beq.n	80029ae <UI_GetReg+0x446>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 80028d4:	f7fd ffc2 	bl	800085c <MCI_GetMecSpeedRefUnit>
 80028d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80028dc:	0040      	lsls	r0, r0, #1
 80028de:	e766      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)(MC_UID);
 80028e0:	4836      	ldr	r0, [pc, #216]	@ (80029bc <UI_GetReg+0x454>)
 80028e2:	e764      	b.n	80027ae <UI_GetReg+0x246>
      if (pHandle->pFctDACGetUserChannelValue)
 80028e4:	6903      	ldr	r3, [r0, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f43f af65 	beq.w	80027b6 <UI_GetReg+0x24e>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 80028ec:	2100      	movs	r1, #0
 80028ee:	4798      	blx	r3
 80028f0:	e75d      	b.n	80027ae <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80028f2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80028f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80028f8:	0f1a      	lsrs	r2, r3, #28
 80028fa:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80028fc:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002900:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002902:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002906:	d94e      	bls.n	80029a6 <UI_GetReg+0x43e>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002908:	2b01      	cmp	r3, #1
 800290a:	f63f af54 	bhi.w	80027b6 <UI_GetReg+0x24e>
        pSPD = pMCT->pSpeedSensorAux;
 800290e:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002910:	2800      	cmp	r0, #0
 8002912:	f43f af50 	beq.w	80027b6 <UI_GetReg+0x24e>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002916:	f003 f843 	bl	80059a0 <SPD_GetS16Speed>
 800291a:	e748      	b.n	80027ae <UI_GetReg+0x246>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800291c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002922:	0f1a      	lsrs	r2, r3, #28
 8002924:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002926:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800292a:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800292c:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002930:	d935      	bls.n	800299e <UI_GetReg+0x436>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002932:	2b01      	cmp	r3, #1
 8002934:	f63f af3f 	bhi.w	80027b6 <UI_GetReg+0x24e>
        pSPD = pMCT->pSpeedSensorAux;
 8002938:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800293a:	2800      	cmp	r0, #0
 800293c:	f43f af3b 	beq.w	80027b6 <UI_GetReg+0x24e>
        bRetVal = SPD_GetElAngle(pSPD);
 8002940:	f002 ffec 	bl	800591c <SPD_GetElAngle>
 8002944:	e733      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8002946:	4628      	mov	r0, r5
 8002948:	f7fd ffbe 	bl	80008c8 <MCI_GetValphabeta>
 800294c:	1400      	asrs	r0, r0, #16
    break;
 800294e:	e72e      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8002950:	4628      	mov	r0, r5
 8002952:	f7fd ffb9 	bl	80008c8 <MCI_GetValphabeta>
 8002956:	b200      	sxth	r0, r0
    break;
 8002958:	e729      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = MCI_GetVqd(pMCI).d;
 800295a:	4628      	mov	r0, r5
 800295c:	f7fd ffaa 	bl	80008b4 <MCI_GetVqd>
 8002960:	1400      	asrs	r0, r0, #16
    break;
 8002962:	e724      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8002964:	6860      	ldr	r0, [r4, #4]
 8002966:	f002 fa61 	bl	8004e2c <PID_GetKD>
    break;
 800296a:	e720      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 800296c:	6860      	ldr	r0, [r4, #4]
 800296e:	f002 fa51 	bl	8004e14 <PID_GetKI>
    break;
 8002972:	e71c      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002974:	4628      	mov	r0, r5
 8002976:	f7fd ff71 	bl	800085c <MCI_GetMecSpeedRefUnit>
 800297a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800297e:	0040      	lsls	r0, r0, #1
    break;
 8002980:	e715      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002982:	4628      	mov	r0, r5
 8002984:	f7fd ff54 	bl	8000830 <MCI_GetControlMode>
    break;
 8002988:	e711      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 800298a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800298c:	f003 f994 	bl	8005cb8 <STM_GetState>
	break;
 8002990:	e70d      	b.n	80027ae <UI_GetReg+0x246>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002992:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
}
 8002994:	b00d      	add	sp, #52	@ 0x34
 8002996:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 800299a:	f003 b99b 	b.w	8005cd4 <STM_GetFaultState>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d9ca      	bls.n	8002938 <UI_GetReg+0x3d0>
        pSPD = pMCT->pSpeedSensorMain;
 80029a2:	69a0      	ldr	r0, [r4, #24]
 80029a4:	e7c9      	b.n	800293a <UI_GetReg+0x3d2>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d9b1      	bls.n	800290e <UI_GetReg+0x3a6>
        pSPD = pMCT->pSpeedSensorMain;
 80029aa:	69a0      	ldr	r0, [r4, #24]
 80029ac:	e7b0      	b.n	8002910 <UI_GetReg+0x3a8>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80029ae:	f7fd ff41 	bl	8000834 <MCI_GetLastRampFinalSpeed>
 80029b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80029b6:	0040      	lsls	r0, r0, #1
 80029b8:	e6f9      	b.n	80027ae <UI_GetReg+0x246>
 80029ba:	bf00      	nop
 80029bc:	34a6847a 	.word	0x34a6847a

080029c0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop

080029c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <HAL_InitTick+0x3c>)
{
 80029cc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ce:	7811      	ldrb	r1, [r2, #0]
 80029d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002a04 <HAL_InitTick+0x40>)
 80029d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	fbb2 f0f3 	udiv	r0, r2, r3
 80029dc:	f000 fa84 	bl	8002ee8 <HAL_SYSTICK_Config>
 80029e0:	b908      	cbnz	r0, 80029e6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e2:	2d0f      	cmp	r5, #15
 80029e4:	d901      	bls.n	80029ea <HAL_InitTick+0x26>
    return HAL_ERROR;
 80029e6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80029e8:	bd38      	pop	{r3, r4, r5, pc}
 80029ea:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ec:	4602      	mov	r2, r0
 80029ee:	4629      	mov	r1, r5
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f000 fa2e 	bl	8002e54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f8:	4b03      	ldr	r3, [pc, #12]	@ (8002a08 <HAL_InitTick+0x44>)
 80029fa:	4620      	mov	r0, r4
 80029fc:	601d      	str	r5, [r3, #0]
}
 80029fe:	bd38      	pop	{r3, r4, r5, pc}
 8002a00:	200005c0 	.word	0x200005c0
 8002a04:	200005bc 	.word	0x200005bc
 8002a08:	200005c4 	.word	0x200005c4

08002a0c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a0c:	4a07      	ldr	r2, [pc, #28]	@ (8002a2c <HAL_Init+0x20>)
{
 8002a0e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a10:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a12:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a14:	f043 0310 	orr.w	r3, r3, #16
 8002a18:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a1a:	f000 fa09 	bl	8002e30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a1e:	2004      	movs	r0, #4
 8002a20:	f7ff ffd0 	bl	80029c4 <HAL_InitTick>
  HAL_MspInit();
 8002a24:	f7ff f9c4 	bl	8001db0 <HAL_MspInit>
}
 8002a28:	2000      	movs	r0, #0
 8002a2a:	bd08      	pop	{r3, pc}
 8002a2c:	40022000 	.word	0x40022000

08002a30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a30:	4a03      	ldr	r2, [pc, #12]	@ (8002a40 <HAL_IncTick+0x10>)
 8002a32:	4b04      	ldr	r3, [pc, #16]	@ (8002a44 <HAL_IncTick+0x14>)
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	440b      	add	r3, r1
 8002a3a:	6013      	str	r3, [r2, #0]
}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200009e0 	.word	0x200009e0
 8002a44:	200005c0 	.word	0x200005c0

08002a48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a48:	4b01      	ldr	r3, [pc, #4]	@ (8002a50 <HAL_GetTick+0x8>)
 8002a4a:	6818      	ldr	r0, [r3, #0]
}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	200009e0 	.word	0x200009e0

08002a54 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a54:	2800      	cmp	r0, #0
 8002a56:	f000 8089 	beq.w	8002b6c <HAL_ADC_Init+0x118>
{
 8002a5a:	b538      	push	{r3, r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a5c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002a5e:	4604      	mov	r4, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d06b      	beq.n	8002b3c <HAL_ADC_Init+0xe8>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	07d5      	lsls	r5, r2, #31
 8002a6a:	d449      	bmi.n	8002b00 <HAL_ADC_Init+0xac>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a6c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002a6e:	06d2      	lsls	r2, r2, #27
 8002a70:	d505      	bpl.n	8002a7e <HAL_ADC_Init+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a72:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a74:	f043 0310 	orr.w	r3, r3, #16
 8002a78:	62a3      	str	r3, [r4, #40]	@ 0x28
    return HAL_ERROR;
 8002a7a:	2001      	movs	r0, #1
}
 8002a7c:	bd38      	pop	{r3, r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a80:	6861      	ldr	r1, [r4, #4]
 8002a82:	69e0      	ldr	r0, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8002a84:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a88:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8002a8a:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a8e:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8002a90:	f042 0202 	orr.w	r2, r2, #2
 8002a94:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a96:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a9a:	68a1      	ldr	r1, [r4, #8]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a9c:	f894 c014 	ldrb.w	ip, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002aa0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8002aa4:	d050      	beq.n	8002b48 <HAL_ADC_Init+0xf4>
 8002aa6:	f1a1 0001 	sub.w	r0, r1, #1
 8002aaa:	fab0 f080 	clz	r0, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aae:	f1bc 0f01 	cmp.w	ip, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ab2:	ea4f 1050 	mov.w	r0, r0, lsr #5
 8002ab6:	ea4f 2000 	mov.w	r0, r0, lsl #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aba:	d05a      	beq.n	8002b72 <HAL_ADC_Init+0x11e>
      MODIFY_REG(hadc->Instance->CR1,
 8002abc:	685d      	ldr	r5, [r3, #4]
 8002abe:	f425 4569 	bic.w	r5, r5, #59648	@ 0xe900
 8002ac2:	4328      	orrs	r0, r5
 8002ac4:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002ac6:	689d      	ldr	r5, [r3, #8]
 8002ac8:	483f      	ldr	r0, [pc, #252]	@ (8002bc8 <HAL_ADC_Init+0x174>)
 8002aca:	4028      	ands	r0, r5
 8002acc:	4310      	orrs	r0, r2
 8002ace:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ad0:	2901      	cmp	r1, #1
 8002ad2:	d047      	beq.n	8002b64 <HAL_ADC_Init+0x110>
  uint32_t tmp_sqr1 = 0U;
 8002ad4:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8002ad6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ad8:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8002adc:	4301      	orrs	r1, r0
 8002ade:	62d9      	str	r1, [r3, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ae0:	6899      	ldr	r1, [r3, #8]
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bcc <HAL_ADC_Init+0x178>)
 8002ae4:	400b      	ands	r3, r1
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d05d      	beq.n	8002ba6 <HAL_ADC_Init+0x152>
      ADC_STATE_CLR_SET(hadc->State,
 8002aea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002aec:	f023 0312 	bic.w	r3, r3, #18
 8002af0:	f043 0310 	orr.w	r3, r3, #16
 8002af4:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8002afe:	e7bc      	b.n	8002a7a <HAL_ADC_Init+0x26>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b08:	f7ff ff9e 	bl	8002a48 <HAL_GetTick>
 8002b0c:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	07d0      	lsls	r0, r2, #31
 8002b14:	d5aa      	bpl.n	8002a6c <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b16:	f7ff ff97 	bl	8002a48 <HAL_GetTick>
 8002b1a:	1b40      	subs	r0, r0, r5
 8002b1c:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b1e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b20:	d9f6      	bls.n	8002b10 <HAL_ADC_Init+0xbc>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	07d1      	lsls	r1, r2, #31
 8002b26:	d5f3      	bpl.n	8002b10 <HAL_ADC_Init+0xbc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b28:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002b2a:	f043 0310 	orr.w	r3, r3, #16
 8002b2e:	62a3      	str	r3, [r4, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b30:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002b3a:	e79a      	b.n	8002a72 <HAL_ADC_Init+0x1e>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b3c:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002b3e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8002b42:	f7ff f95b 	bl	8001dfc <HAL_ADC_MspInit>
 8002b46:	e78d      	b.n	8002a64 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b48:	f1bc 0f01 	cmp.w	ip, #1
 8002b4c:	d010      	beq.n	8002b70 <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->CR1,
 8002b4e:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002b50:	491d      	ldr	r1, [pc, #116]	@ (8002bc8 <HAL_ADC_Init+0x174>)
      MODIFY_REG(hadc->Instance->CR1,
 8002b52:	f420 4069 	bic.w	r0, r0, #59648	@ 0xe900
 8002b56:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8002b5a:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002b5c:	6898      	ldr	r0, [r3, #8]
 8002b5e:	4001      	ands	r1, r0
 8002b60:	4311      	orrs	r1, r2
 8002b62:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b64:	6920      	ldr	r0, [r4, #16]
 8002b66:	3801      	subs	r0, #1
 8002b68:	0500      	lsls	r0, r0, #20
 8002b6a:	e7b4      	b.n	8002ad6 <HAL_ADC_Init+0x82>
    return HAL_ERROR;
 8002b6c:	2001      	movs	r0, #1
}
 8002b6e:	4770      	bx	lr
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b70:	4608      	mov	r0, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b72:	b30d      	cbz	r5, 8002bb8 <HAL_ADC_Init+0x164>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b74:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8002b76:	f045 0520 	orr.w	r5, r5, #32
 8002b7a:	62a5      	str	r5, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8002b7e:	f045 0501 	orr.w	r5, r5, #1
 8002b82:	62e5      	str	r5, [r4, #44]	@ 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8002b84:	685d      	ldr	r5, [r3, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b86:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002b8a:	f425 4569 	bic.w	r5, r5, #59648	@ 0xe900
 8002b8e:	ea40 0005 	orr.w	r0, r0, r5
 8002b92:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002b94:	689d      	ldr	r5, [r3, #8]
 8002b96:	480c      	ldr	r0, [pc, #48]	@ (8002bc8 <HAL_ADC_Init+0x174>)
 8002b98:	ea00 0005 	and.w	r0, r0, r5
 8002b9c:	ea40 0002 	orr.w	r0, r0, r2
 8002ba0:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ba2:	d195      	bne.n	8002ad0 <HAL_ADC_Init+0x7c>
 8002ba4:	e7de      	b.n	8002b64 <HAL_ADC_Init+0x110>
      ADC_CLEAR_ERRORCODE(hadc);
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	62e0      	str	r0, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002baa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002bac:	f023 0303 	bic.w	r3, r3, #3
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8002bb6:	bd38      	pop	{r3, r4, r5, pc}
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002bb8:	69a5      	ldr	r5, [r4, #24]
 8002bba:	3d01      	subs	r5, #1
 8002bbc:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 8002bc0:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 8002bc4:	e7de      	b.n	8002b84 <HAL_ADC_Init+0x130>
 8002bc6:	bf00      	nop
 8002bc8:	ffe1f7fd 	.word	0xffe1f7fd
 8002bcc:	ff1f0efe 	.word	0xff1f0efe

08002bd0 <HAL_ADCEx_InjectedConfigChannel>:
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002bd0:	2200      	movs	r2, #0
{
 8002bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002bd6:	9201      	str	r2, [sp, #4]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd8:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002bdc:	2a01      	cmp	r2, #1
 8002bde:	f000 80c0 	beq.w	8002d62 <HAL_ADCEx_InjectedConfigChannel+0x192>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2001      	movs	r0, #1
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002be6:	689e      	ldr	r6, [r3, #8]
  __HAL_LOCK(hadc);
 8002be8:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002bf2:	2e00      	cmp	r6, #0
 8002bf4:	d057      	beq.n	8002ca6 <HAL_ADCEx_InjectedConfigChannel+0xd6>
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8002bf6:	261f      	movs	r6, #31
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8002bf8:	690f      	ldr	r7, [r1, #16]
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8002bfa:	1be8      	subs	r0, r5, r7
 8002bfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c00:	300f      	adds	r0, #15
 8002c02:	4086      	lsls	r6, r0
 8002c04:	f446 1640 	orr.w	r6, r6, #3145728	@ 0x300000
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8002c08:	42af      	cmp	r7, r5
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8002c0a:	ea6f 0606 	mvn.w	r6, r6
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8002c0e:	f0c0 8085 	bcc.w	8002d1c <HAL_ADCEx_InjectedConfigChannel+0x14c>
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8002c12:	3f01      	subs	r7, #1
 8002c14:	fa04 f000 	lsl.w	r0, r4, r0
 8002c18:	ea40 5007 	orr.w	r0, r0, r7, lsl #20
 8002c1c:	6b97      	ldr	r7, [r2, #56]	@ 0x38
 8002c1e:	403e      	ands	r6, r7
 8002c20:	4330      	orrs	r0, r6
 8002c22:	6390      	str	r0, [r2, #56]	@ 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c24:	2000      	movs	r0, #0
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c26:	6896      	ldr	r6, [r2, #8]
 8002c28:	07f6      	lsls	r6, r6, #31
 8002c2a:	d407      	bmi.n	8002c3c <HAL_ADCEx_InjectedConfigChannel+0x6c>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8002c2c:	6896      	ldr	r6, [r2, #8]
 8002c2e:	698f      	ldr	r7, [r1, #24]
 8002c30:	f426 46e0 	bic.w	r6, r6, #28672	@ 0x7000
 8002c34:	f026 0601 	bic.w	r6, r6, #1
 8002c38:	433e      	orrs	r6, r7
 8002c3a:	6096      	str	r6, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002c3c:	7d4e      	ldrb	r6, [r1, #21]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002c3e:	7d0f      	ldrb	r7, [r1, #20]
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002c40:	2e01      	cmp	r6, #1
 8002c42:	d059      	beq.n	8002cf8 <HAL_ADCEx_InjectedConfigChannel+0x128>
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002c44:	2f01      	cmp	r7, #1
 8002c46:	d078      	beq.n	8002d3a <HAL_ADCEx_InjectedConfigChannel+0x16a>
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002c48:	2c09      	cmp	r4, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002c4a:	688e      	ldr	r6, [r1, #8]
 8002c4c:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c50:	f1a4 0e10 	sub.w	lr, r4, #16
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002c54:	d92e      	bls.n	8002cb4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002c56:	2707      	movs	r7, #7
 8002c58:	f1ac 0c1e 	sub.w	ip, ip, #30
 8002c5c:	fa06 f60c 	lsl.w	r6, r6, ip
 8002c60:	fa07 fc0c 	lsl.w	ip, r7, ip
 8002c64:	68d7      	ldr	r7, [r2, #12]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c66:	f1be 0f01 	cmp.w	lr, #1
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002c6a:	ea27 0c0c 	bic.w	ip, r7, ip
 8002c6e:	ea4c 0606 	orr.w	r6, ip, r6
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8002c72:	68cf      	ldr	r7, [r1, #12]
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002c74:	60d6      	str	r6, [r2, #12]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c76:	d877      	bhi.n	8002d68 <HAL_ADCEx_InjectedConfigChannel+0x198>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c78:	6891      	ldr	r1, [r2, #8]
  switch(sConfigInjected->InjectedRank)
 8002c7a:	2d02      	cmp	r5, #2
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c7c:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8002c80:	6091      	str	r1, [r2, #8]
  switch(sConfigInjected->InjectedRank)
 8002c82:	d02b      	beq.n	8002cdc <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8002c84:	2d03      	cmp	r5, #3
 8002c86:	d05f      	beq.n	8002d48 <HAL_ADCEx_InjectedConfigChannel+0x178>
 8002c88:	2d01      	cmp	r5, #1
 8002c8a:	d141      	bne.n	8002d10 <HAL_ADCEx_InjectedConfigChannel+0x140>
      MODIFY_REG(hadc->Instance->JOFR1,
 8002c8c:	6951      	ldr	r1, [r2, #20]
 8002c8e:	f36f 010b 	bfc	r1, #0, #12
 8002c92:	4339      	orrs	r1, r7
 8002c94:	6151      	str	r1, [r2, #20]
      break;
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c96:	f1be 0f01 	cmp.w	lr, #1
 8002c9a:	d924      	bls.n	8002ce6 <HAL_ADCEx_InjectedConfigChannel+0x116>
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002ca2:	b003      	add	sp, #12
 8002ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002ca6:	4285      	cmp	r5, r0
 8002ca8:	d054      	beq.n	8002d54 <HAL_ADCEx_InjectedConfigChannel+0x184>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002caa:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 8002cac:	f046 0620 	orr.w	r6, r6, #32
 8002cb0:	629e      	str	r6, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8002cb2:	e7b8      	b.n	8002c26 <HAL_ADCEx_InjectedConfigChannel+0x56>
      MODIFY_REG(hadc->Instance->JOFR1,
 8002cb4:	68cf      	ldr	r7, [r1, #12]
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8002cb6:	2107      	movs	r1, #7
 8002cb8:	fa06 f60c 	lsl.w	r6, r6, ip
 8002cbc:	fa01 fc0c 	lsl.w	ip, r1, ip
 8002cc0:	6911      	ldr	r1, [r2, #16]
  switch(sConfigInjected->InjectedRank)
 8002cc2:	2d02      	cmp	r5, #2
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8002cc4:	ea21 010c 	bic.w	r1, r1, ip
 8002cc8:	ea41 0106 	orr.w	r1, r1, r6
 8002ccc:	6111      	str	r1, [r2, #16]
  switch(sConfigInjected->InjectedRank)
 8002cce:	d1d9      	bne.n	8002c84 <HAL_ADCEx_InjectedConfigChannel+0xb4>
      MODIFY_REG(hadc->Instance->JOFR2,
 8002cd0:	6991      	ldr	r1, [r2, #24]
 8002cd2:	f36f 010b 	bfc	r1, #0, #12
 8002cd6:	4339      	orrs	r1, r7
 8002cd8:	6191      	str	r1, [r2, #24]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cda:	e7df      	b.n	8002c9c <HAL_ADCEx_InjectedConfigChannel+0xcc>
      MODIFY_REG(hadc->Instance->JOFR2,
 8002cdc:	6991      	ldr	r1, [r2, #24]
 8002cde:	f36f 010b 	bfc	r1, #0, #12
 8002ce2:	4339      	orrs	r1, r7
 8002ce4:	6191      	str	r1, [r2, #24]
    if (hadc->Instance == ADC1)
 8002ce6:	4934      	ldr	r1, [pc, #208]	@ (8002db8 <HAL_ADCEx_InjectedConfigChannel+0x1e8>)
 8002ce8:	428a      	cmp	r2, r1
 8002cea:	d047      	beq.n	8002d7c <HAL_ADCEx_InjectedConfigChannel+0x1ac>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8002cee:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf0:	f042 0220 	orr.w	r2, r2, #32
 8002cf4:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8002cf6:	e7d1      	b.n	8002c9c <HAL_ADCEx_InjectedConfigChannel+0xcc>
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002cf8:	698e      	ldr	r6, [r1, #24]
 8002cfa:	f5b6 4fe0 	cmp.w	r6, #28672	@ 0x7000
 8002cfe:	d011      	beq.n	8002d24 <HAL_ADCEx_InjectedConfigChannel+0x154>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d00:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002d02:	2f01      	cmp	r7, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d04:	f040 0020 	orr.w	r0, r0, #32
 8002d08:	6298      	str	r0, [r3, #40]	@ 0x28
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002d0a:	d011      	beq.n	8002d30 <HAL_ADCEx_InjectedConfigChannel+0x160>
        tmp_hal_status = HAL_ERROR;
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	e79b      	b.n	8002c48 <HAL_ADCEx_InjectedConfigChannel+0x78>
      MODIFY_REG(hadc->Instance->JOFR4,
 8002d10:	6a11      	ldr	r1, [r2, #32]
 8002d12:	f36f 010b 	bfc	r1, #0, #12
 8002d16:	4339      	orrs	r1, r7
 8002d18:	6211      	str	r1, [r2, #32]
      break;
 8002d1a:	e7bc      	b.n	8002c96 <HAL_ADCEx_InjectedConfigChannel+0xc6>
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8002d1c:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 8002d1e:	4030      	ands	r0, r6
 8002d20:	6390      	str	r0, [r2, #56]	@ 0x38
 8002d22:	e77f      	b.n	8002c24 <HAL_ADCEx_InjectedConfigChannel+0x54>
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002d24:	6856      	ldr	r6, [r2, #4]
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002d26:	2f01      	cmp	r7, #1
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002d28:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
 8002d2c:	6056      	str	r6, [r2, #4]
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002d2e:	d18b      	bne.n	8002c48 <HAL_ADCEx_InjectedConfigChannel+0x78>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d30:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002d32:	f040 0020 	orr.w	r0, r0, #32
 8002d36:	6298      	str	r0, [r3, #40]	@ 0x28
        tmp_hal_status = HAL_ERROR;
 8002d38:	e7e8      	b.n	8002d0c <HAL_ADCEx_InjectedConfigChannel+0x13c>
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002d3a:	2e00      	cmp	r6, #0
 8002d3c:	d1f8      	bne.n	8002d30 <HAL_ADCEx_InjectedConfigChannel+0x160>
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8002d3e:	6856      	ldr	r6, [r2, #4]
 8002d40:	f446 5680 	orr.w	r6, r6, #4096	@ 0x1000
 8002d44:	6056      	str	r6, [r2, #4]
 8002d46:	e77f      	b.n	8002c48 <HAL_ADCEx_InjectedConfigChannel+0x78>
      MODIFY_REG(hadc->Instance->JOFR3,
 8002d48:	69d1      	ldr	r1, [r2, #28]
 8002d4a:	f36f 010b 	bfc	r1, #0, #12
 8002d4e:	4339      	orrs	r1, r7
 8002d50:	61d1      	str	r1, [r2, #28]
      break;
 8002d52:	e7a0      	b.n	8002c96 <HAL_ADCEx_InjectedConfigChannel+0xc6>
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8002d54:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 8002d56:	f36f 0015 	bfc	r0, #0, #22
 8002d5a:	ea40 30c4 	orr.w	r0, r0, r4, lsl #15
 8002d5e:	6390      	str	r0, [r2, #56]	@ 0x38
 8002d60:	e760      	b.n	8002c24 <HAL_ADCEx_InjectedConfigChannel+0x54>
  __HAL_LOCK(hadc);
 8002d62:	2002      	movs	r0, #2
}
 8002d64:	b003      	add	sp, #12
 8002d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch(sConfigInjected->InjectedRank)
 8002d68:	2d02      	cmp	r5, #2
 8002d6a:	d0b1      	beq.n	8002cd0 <HAL_ADCEx_InjectedConfigChannel+0x100>
 8002d6c:	2d03      	cmp	r5, #3
 8002d6e:	d18b      	bne.n	8002c88 <HAL_ADCEx_InjectedConfigChannel+0xb8>
      MODIFY_REG(hadc->Instance->JOFR3,
 8002d70:	69d1      	ldr	r1, [r2, #28]
 8002d72:	f36f 010b 	bfc	r1, #0, #12
 8002d76:	4339      	orrs	r1, r7
 8002d78:	61d1      	str	r1, [r2, #28]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d7a:	e78f      	b.n	8002c9c <HAL_ADCEx_InjectedConfigChannel+0xcc>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d7c:	6891      	ldr	r1, [r2, #8]
 8002d7e:	0209      	lsls	r1, r1, #8
 8002d80:	d48c      	bmi.n	8002c9c <HAL_ADCEx_InjectedConfigChannel+0xcc>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d82:	6891      	ldr	r1, [r2, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8002d84:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d86:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8002d8a:	6091      	str	r1, [r2, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8002d8c:	d186      	bne.n	8002c9c <HAL_ADCEx_InjectedConfigChannel+0xcc>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8002dbc <HAL_ADCEx_InjectedConfigChannel+0x1ec>)
 8002d90:	490b      	ldr	r1, [pc, #44]	@ (8002dc0 <HAL_ADCEx_InjectedConfigChannel+0x1f0>)
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	fba1 1202 	umull	r1, r2, r1, r2
 8002d98:	0c92      	lsrs	r2, r2, #18
 8002d9a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d9e:	0052      	lsls	r2, r2, #1
 8002da0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002da2:	9a01      	ldr	r2, [sp, #4]
 8002da4:	2a00      	cmp	r2, #0
 8002da6:	f43f af79 	beq.w	8002c9c <HAL_ADCEx_InjectedConfigChannel+0xcc>
            wait_loop_index--;
 8002daa:	9a01      	ldr	r2, [sp, #4]
 8002dac:	3a01      	subs	r2, #1
 8002dae:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002db0:	9a01      	ldr	r2, [sp, #4]
 8002db2:	2a00      	cmp	r2, #0
 8002db4:	d1f9      	bne.n	8002daa <HAL_ADCEx_InjectedConfigChannel+0x1da>
 8002db6:	e771      	b.n	8002c9c <HAL_ADCEx_InjectedConfigChannel+0xcc>
 8002db8:	40012400 	.word	0x40012400
 8002dbc:	200005bc 	.word	0x200005bc
 8002dc0:	431bde83 	.word	0x431bde83

08002dc4 <HAL_ADCEx_MultiModeConfigChannel>:
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc4:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002dc8:	2a01      	cmp	r2, #1
 8002dca:	d02a      	beq.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2001      	movs	r0, #1
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002dd0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8002dd2:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002dd6:	6890      	ldr	r0, [r2, #8]
 8002dd8:	07c0      	lsls	r0, r0, #31
 8002dda:	d412      	bmi.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002ddc:	4812      	ldr	r0, [pc, #72]	@ (8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x64>)
 8002dde:	6880      	ldr	r0, [r0, #8]
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002de0:	f010 0001 	ands.w	r0, r0, #1
 8002de4:	d10d      	bne.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
{
 8002de6:	b430      	push	{r4, r5}
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002de8:	4c10      	ldr	r4, [pc, #64]	@ (8002e2c <HAL_ADCEx_MultiModeConfigChannel+0x68>)
 8002dea:	42a2      	cmp	r2, r4
 8002dec:	d012      	beq.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x50>
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    tmp_hal_status = HAL_ERROR;
 8002dee:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002df2:	f042 0220 	orr.w	r2, r2, #32
 8002df6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
} 
 8002dfe:	bc30      	pop	{r4, r5}
 8002e00:	4770      	bx	lr
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8002e04:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e06:	f042 0220 	orr.w	r2, r2, #32
 8002e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_UNLOCK(hadc);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
} 
 8002e12:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->CR1,
 8002e14:	6854      	ldr	r4, [r2, #4]
 8002e16:	680d      	ldr	r5, [r1, #0]
 8002e18:	f424 2170 	bic.w	r1, r4, #983040	@ 0xf0000
 8002e1c:	4329      	orrs	r1, r5
 8002e1e:	6051      	str	r1, [r2, #4]
 8002e20:	e7ea      	b.n	8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8002e22:	2002      	movs	r0, #2
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40012800 	.word	0x40012800
 8002e2c:	40012400 	.word	0x40012400

08002e30 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e30:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e34:	4906      	ldr	r1, [pc, #24]	@ (8002e50 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e36:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e3a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002e4c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e56:	b500      	push	{lr}
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e5e:	f1c3 0e07 	rsb	lr, r3, #7
 8002e62:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e66:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e6a:	bf28      	it	cs
 8002e6c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e70:	f1bc 0f06 	cmp.w	ip, #6
 8002e74:	d91c      	bls.n	8002eb0 <HAL_NVIC_SetPriority+0x5c>
 8002e76:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	fa03 f30c 	lsl.w	r3, r3, ip
 8002e82:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	fa03 f30e 	lsl.w	r3, r3, lr
 8002e8e:	ea21 0303 	bic.w	r3, r1, r3
 8002e92:	fa03 f30c 	lsl.w	r3, r3, ip
 8002e96:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e98:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002e9a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	db0a      	blt.n	8002eb6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002ea4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002ea8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002eac:	f85d fb04 	ldr.w	pc, [sp], #4
 8002eb0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	4694      	mov	ip, r2
 8002eb4:	e7e7      	b.n	8002e86 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb6:	4a04      	ldr	r2, [pc, #16]	@ (8002ec8 <HAL_NVIC_SetPriority+0x74>)
 8002eb8:	f000 000f 	and.w	r0, r0, #15
 8002ebc:	4402      	add	r2, r0
 8002ebe:	7613      	strb	r3, [r2, #24]
 8002ec0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ec4:	e000ed00 	.word	0xe000ed00
 8002ec8:	e000ecfc 	.word	0xe000ecfc

08002ecc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	db07      	blt.n	8002ee0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f000 011f 	and.w	r1, r0, #31
 8002ed6:	4a03      	ldr	r2, [pc, #12]	@ (8002ee4 <HAL_NVIC_EnableIRQ+0x18>)
 8002ed8:	0940      	lsrs	r0, r0, #5
 8002eda:	408b      	lsls	r3, r1
 8002edc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	e000e100 	.word	0xe000e100

08002ee8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	3801      	subs	r0, #1
 8002eea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002eee:	d301      	bcc.n	8002ef4 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002ef2:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef8:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002efc:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efe:	2107      	movs	r1, #7
{
 8002f00:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f02:	4c04      	ldr	r4, [pc, #16]	@ (8002f14 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f04:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f06:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f0a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f0c:	619a      	str	r2, [r3, #24]
}
 8002f0e:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f10:	6119      	str	r1, [r3, #16]
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop

08002f1c <HAL_SYSTICK_IRQHandler>:
{
 8002f1c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002f1e:	f7ff fffb 	bl	8002f18 <HAL_SYSTICK_Callback>
}
 8002f22:	bd08      	pop	{r3, pc}

08002f24 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f24:	b370      	cbz	r0, 8002f84 <HAL_DMA_Init+0x60>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f26:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f28:	2202      	movs	r2, #2
{
 8002f2a:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f2c:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f30:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f32:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 8002f38:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3a:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f3c:	f422 5e7f 	bic.w	lr, r2, #16320	@ 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8002f40:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8002f44:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f46:	4910      	ldr	r1, [pc, #64]	@ (8002f88 <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f48:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f4a:	4d10      	ldr	r5, [pc, #64]	@ (8002f8c <HAL_DMA_Init+0x68>)
 8002f4c:	4401      	add	r1, r0
 8002f4e:	fba5 5101 	umull	r5, r1, r5, r1
 8002f52:	0909      	lsrs	r1, r1, #4
 8002f54:	0089      	lsls	r1, r1, #2
 8002f56:	6419      	str	r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f58:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f5a:	f02e 0e30 	bic.w	lr, lr, #48	@ 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f60:	6959      	ldr	r1, [r3, #20]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	6999      	ldr	r1, [r3, #24]
 8002f66:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f68:	69d9      	ldr	r1, [r3, #28]
 8002f6a:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8002f6c:	4908      	ldr	r1, [pc, #32]	@ (8002f90 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8002f6e:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8002f72:	63d9      	str	r1, [r3, #60]	@ 0x3c
  hdma->Instance->CCR = tmp;
 8002f74:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f76:	639c      	str	r4, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f78:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8002f7c:	f883 c021 	strb.w	ip, [r3, #33]	@ 0x21

  return HAL_OK;
 8002f80:	4620      	mov	r0, r4
}
 8002f82:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002f84:	2001      	movs	r0, #1
}
 8002f86:	4770      	bx	lr
 8002f88:	bffdfff8 	.word	0xbffdfff8
 8002f8c:	cccccccd 	.word	0xcccccccd
 8002f90:	40020000 	.word	0x40020000

08002f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f98:	680c      	ldr	r4, [r1, #0]
{
 8002f9a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9c:	2c00      	cmp	r4, #0
 8002f9e:	f000 80ad 	beq.w	80030fc <HAL_GPIO_Init+0x168>
 8002fa2:	4bb3      	ldr	r3, [pc, #716]	@ (8003270 <HAL_GPIO_Init+0x2dc>)
 8002fa4:	4298      	cmp	r0, r3
 8002fa6:	f000 80d7 	beq.w	8003158 <HAL_GPIO_Init+0x1c4>
 8002faa:	2200      	movs	r2, #0
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fac:	1d03      	adds	r3, r0, #4
 8002fae:	9301      	str	r3, [sp, #4]
    ioposition = (0x01uL << position);
 8002fb0:	2501      	movs	r5, #1
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fb2:	270f      	movs	r7, #15
  uint32_t config = 0x00u;
 8002fb4:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	4683      	mov	fp, r0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fba:	f8df 82b8 	ldr.w	r8, [pc, #696]	@ 8003274 <HAL_GPIO_Init+0x2e0>
 8002fbe:	e006      	b.n	8002fce <HAL_GPIO_Init+0x3a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8002fc0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc2:	fa34 f003 	lsrs.w	r0, r4, r3
 8002fc6:	f102 0204 	add.w	r2, r2, #4
 8002fca:	f000 8097 	beq.w	80030fc <HAL_GPIO_Init+0x168>
    ioposition = (0x01uL << position);
 8002fce:	fa05 f003 	lsl.w	r0, r5, r3
    if (iocurrent == ioposition)
 8002fd2:	ea30 0c04 	bics.w	ip, r0, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fd6:	ea00 0604 	and.w	r6, r0, r4
    if (iocurrent == ioposition)
 8002fda:	d1f1      	bne.n	8002fc0 <HAL_GPIO_Init+0x2c>
      switch (GPIO_Init->Mode)
 8002fdc:	684c      	ldr	r4, [r1, #4]
 8002fde:	2c12      	cmp	r4, #18
 8002fe0:	f200 80a0 	bhi.w	8003124 <HAL_GPIO_Init+0x190>
 8002fe4:	2c12      	cmp	r4, #18
 8002fe6:	d816      	bhi.n	8003016 <HAL_GPIO_Init+0x82>
 8002fe8:	e8df f014 	tbh	[pc, r4, lsl #1]
 8002fec:	001300af 	.word	0x001300af
 8002ff0:	01950098 	.word	0x01950098
 8002ff4:	00150015 	.word	0x00150015
 8002ff8:	00150015 	.word	0x00150015
 8002ffc:	00150015 	.word	0x00150015
 8003000:	00150015 	.word	0x00150015
 8003004:	00150015 	.word	0x00150015
 8003008:	00150015 	.word	0x00150015
 800300c:	00940015 	.word	0x00940015
 8003010:	0090      	.short	0x0090
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003012:	f8d1 a00c 	ldr.w	sl, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003016:	2eff      	cmp	r6, #255	@ 0xff
 8003018:	bf99      	ittee	ls
 800301a:	465c      	movls	r4, fp
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800301c:	4694      	movls	ip, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800301e:	9c01      	ldrhi	r4, [sp, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003020:	f1a2 0c20 	subhi.w	ip, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	fa07 fe0c 	lsl.w	lr, r7, ip
 800302a:	ea20 000e 	bic.w	r0, r0, lr
 800302e:	fa0a fc0c 	lsl.w	ip, sl, ip
 8003032:	ea40 000c 	orr.w	r0, r0, ip
 8003036:	6020      	str	r0, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003038:	684c      	ldr	r4, [r1, #4]
 800303a:	00e0      	lsls	r0, r4, #3
 800303c:	d564      	bpl.n	8003108 <HAL_GPIO_Init+0x174>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800303e:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8003042:	f023 0c03 	bic.w	ip, r3, #3
 8003046:	f040 0001 	orr.w	r0, r0, #1
 800304a:	f8c8 0018 	str.w	r0, [r8, #24]
 800304e:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8003052:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8003056:	f000 0001 	and.w	r0, r0, #1
 800305a:	9003      	str	r0, [sp, #12]
 800305c:	f50c 3c80 	add.w	ip, ip, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003060:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003064:	9803      	ldr	r0, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003066:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800306a:	f8dc 0008 	ldr.w	r0, [ip, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800306e:	fa07 fe09 	lsl.w	lr, r7, r9
 8003072:	ea20 0e0e 	bic.w	lr, r0, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003076:	4880      	ldr	r0, [pc, #512]	@ (8003278 <HAL_GPIO_Init+0x2e4>)
 8003078:	4583      	cmp	fp, r0
 800307a:	f000 812c 	beq.w	80032d6 <HAL_GPIO_Init+0x342>
 800307e:	487f      	ldr	r0, [pc, #508]	@ (800327c <HAL_GPIO_Init+0x2e8>)
 8003080:	4583      	cmp	fp, r0
 8003082:	f000 8139 	beq.w	80032f8 <HAL_GPIO_Init+0x364>
 8003086:	487e      	ldr	r0, [pc, #504]	@ (8003280 <HAL_GPIO_Init+0x2ec>)
 8003088:	4583      	cmp	fp, r0
 800308a:	bf0c      	ite	eq
 800308c:	2003      	moveq	r0, #3
 800308e:	2004      	movne	r0, #4
 8003090:	fa00 f009 	lsl.w	r0, r0, r9
 8003094:	ea40 000e 	orr.w	r0, r0, lr
        AFIO->EXTICR[position >> 2u] = temp;
 8003098:	f8cc 0008 	str.w	r0, [ip, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800309c:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8003284 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a0:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80030a4:	f8dc 0008 	ldr.w	r0, [ip, #8]
 80030a8:	bf14      	ite	ne
 80030aa:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030ac:	43b0      	biceq	r0, r6
 80030ae:	f8cc 0008 	str.w	r0, [ip, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80030b2:	f8df c1d0 	ldr.w	ip, [pc, #464]	@ 8003284 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030b6:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80030ba:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80030be:	bf14      	ite	ne
 80030c0:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030c2:	43b0      	biceq	r0, r6
 80030c4:	f8cc 000c 	str.w	r0, [ip, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80030c8:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8003284 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030cc:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80030d0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80030d4:	bf14      	ite	ne
 80030d6:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030d8:	43b0      	biceq	r0, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030da:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80030de:	4c69      	ldr	r4, [pc, #420]	@ (8003284 <HAL_GPIO_Init+0x2f0>)
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030e0:	f8cc 0004 	str.w	r0, [ip, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80030e4:	6820      	ldr	r0, [r4, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030e6:	d00c      	beq.n	8003102 <HAL_GPIO_Init+0x16e>
          SET_BIT(EXTI->IMR, iocurrent);
 80030e8:	4330      	orrs	r0, r6
 80030ea:	6020      	str	r0, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ec:	680c      	ldr	r4, [r1, #0]
	position++;
 80030ee:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f0:	fa34 f003 	lsrs.w	r0, r4, r3
 80030f4:	f102 0204 	add.w	r2, r2, #4
 80030f8:	f47f af69 	bne.w	8002fce <HAL_GPIO_Init+0x3a>
  }
}
 80030fc:	b005      	add	sp, #20
 80030fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003102:	ea20 0006 	bic.w	r0, r0, r6
 8003106:	6020      	str	r0, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003108:	680c      	ldr	r4, [r1, #0]
 800310a:	e759      	b.n	8002fc0 <HAL_GPIO_Init+0x2c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800310c:	68c8      	ldr	r0, [r1, #12]
 800310e:	f100 0a0c 	add.w	sl, r0, #12
          break;
 8003112:	e780      	b.n	8003016 <HAL_GPIO_Init+0x82>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003114:	68c8      	ldr	r0, [r1, #12]
 8003116:	f100 0a04 	add.w	sl, r0, #4
          break;
 800311a:	e77c      	b.n	8003016 <HAL_GPIO_Init+0x82>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800311c:	68c8      	ldr	r0, [r1, #12]
 800311e:	f100 0a08 	add.w	sl, r0, #8
          break;
 8003122:	e778      	b.n	8003016 <HAL_GPIO_Init+0x82>
      switch (GPIO_Init->Mode)
 8003124:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8003288 <HAL_GPIO_Init+0x2f4>
 8003128:	4564      	cmp	r4, ip
 800312a:	d00e      	beq.n	800314a <HAL_GPIO_Init+0x1b6>
 800312c:	f200 80d9 	bhi.w	80032e2 <HAL_GPIO_Init+0x34e>
 8003130:	f5ac 1c80 	sub.w	ip, ip, #1048576	@ 0x100000
 8003134:	4564      	cmp	r4, ip
 8003136:	d008      	beq.n	800314a <HAL_GPIO_Init+0x1b6>
 8003138:	f50c 2c70 	add.w	ip, ip, #983040	@ 0xf0000
 800313c:	4564      	cmp	r4, ip
 800313e:	d004      	beq.n	800314a <HAL_GPIO_Init+0x1b6>
 8003140:	f5ac 1c80 	sub.w	ip, ip, #1048576	@ 0x100000
 8003144:	4564      	cmp	r4, ip
 8003146:	f47f af66 	bne.w	8003016 <HAL_GPIO_Init+0x82>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800314a:	688c      	ldr	r4, [r1, #8]
 800314c:	2c00      	cmp	r4, #0
 800314e:	f040 80d9 	bne.w	8003304 <HAL_GPIO_Init+0x370>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003152:	f04f 0a04 	mov.w	sl, #4
 8003156:	e75e      	b.n	8003016 <HAL_GPIO_Init+0x82>
  uint32_t config = 0x00u;
 8003158:	f04f 0900 	mov.w	r9, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315c:	f06f 051f 	mvn.w	r5, #31
    ioposition = (0x01uL << position);
 8003160:	2701      	movs	r7, #1
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003162:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8003166:	464b      	mov	r3, r9
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003168:	f8df c108 	ldr.w	ip, [pc, #264]	@ 8003274 <HAL_GPIO_Init+0x2e0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800316c:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 800328c <HAL_GPIO_Init+0x2f8>
 8003170:	e005      	b.n	800317e <HAL_GPIO_Init+0x1ea>
	position++;
 8003172:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003174:	fa34 f203 	lsrs.w	r2, r4, r3
 8003178:	f105 0504 	add.w	r5, r5, #4
 800317c:	d0be      	beq.n	80030fc <HAL_GPIO_Init+0x168>
    ioposition = (0x01uL << position);
 800317e:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent == ioposition)
 8003182:	ea32 0a04 	bics.w	sl, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003186:	ea04 0602 	and.w	r6, r4, r2
    if (iocurrent == ioposition)
 800318a:	d1f2      	bne.n	8003172 <HAL_GPIO_Init+0x1de>
      switch (GPIO_Init->Mode)
 800318c:	684c      	ldr	r4, [r1, #4]
 800318e:	2c12      	cmp	r4, #18
 8003190:	f200 80c4 	bhi.w	800331c <HAL_GPIO_Init+0x388>
 8003194:	2c12      	cmp	r4, #18
 8003196:	d816      	bhi.n	80031c6 <HAL_GPIO_Init+0x232>
 8003198:	e8df f014 	tbh	[pc, r4, lsl #1]
 800319c:	001300d2 	.word	0x001300d2
 80031a0:	00f400df 	.word	0x00f400df
 80031a4:	00150015 	.word	0x00150015
 80031a8:	00150015 	.word	0x00150015
 80031ac:	00150015 	.word	0x00150015
 80031b0:	00150015 	.word	0x00150015
 80031b4:	00150015 	.word	0x00150015
 80031b8:	00150015 	.word	0x00150015
 80031bc:	00e30015 	.word	0x00e30015
 80031c0:	00db      	.short	0x00db
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031c2:	f8d1 900c 	ldr.w	r9, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031c6:	2eff      	cmp	r6, #255	@ 0xff
 80031c8:	d962      	bls.n	8003290 <HAL_GPIO_Init+0x2fc>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031ca:	46aa      	mov	sl, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031cc:	4644      	mov	r4, r8
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031ce:	6822      	ldr	r2, [r4, #0]
 80031d0:	fa0e fb0a 	lsl.w	fp, lr, sl
 80031d4:	ea22 020b 	bic.w	r2, r2, fp
 80031d8:	fa09 fa0a 	lsl.w	sl, r9, sl
 80031dc:	ea42 020a 	orr.w	r2, r2, sl
 80031e0:	6022      	str	r2, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031e2:	684a      	ldr	r2, [r1, #4]
 80031e4:	00d4      	lsls	r4, r2, #3
 80031e6:	d557      	bpl.n	8003298 <HAL_GPIO_Init+0x304>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031e8:	f8dc 4018 	ldr.w	r4, [ip, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031ec:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031f0:	f044 0401 	orr.w	r4, r4, #1
 80031f4:	f8cc 4018 	str.w	r4, [ip, #24]
 80031f8:	f8dc 4018 	ldr.w	r4, [ip, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031fc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003200:	f004 0401 	and.w	r4, r4, #1
 8003204:	9403      	str	r4, [sp, #12]
 8003206:	9c03      	ldr	r4, [sp, #12]
        temp = AFIO->EXTICR[position >> 2u];
 8003208:	f023 0403 	bic.w	r4, r3, #3
 800320c:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8003210:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8003214:	f8d4 b008 	ldr.w	fp, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003218:	fa0e fa0a 	lsl.w	sl, lr, sl
 800321c:	ea2b 0a0a 	bic.w	sl, fp, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8003220:	f8c4 a008 	str.w	sl, [r4, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003224:	02d4      	lsls	r4, r2, #11
 8003226:	d539      	bpl.n	800329c <HAL_GPIO_Init+0x308>
          SET_BIT(EXTI->RTSR, iocurrent);
 8003228:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003284 <HAL_GPIO_Init+0x2f0>
 800322c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8003230:	4334      	orrs	r4, r6
 8003232:	f8ca 4008 	str.w	r4, [sl, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003236:	0294      	lsls	r4, r2, #10
 8003238:	d53a      	bpl.n	80032b0 <HAL_GPIO_Init+0x31c>
          SET_BIT(EXTI->FTSR, iocurrent);
 800323a:	f8df a048 	ldr.w	sl, [pc, #72]	@ 8003284 <HAL_GPIO_Init+0x2f0>
 800323e:	f8da 400c 	ldr.w	r4, [sl, #12]
 8003242:	4334      	orrs	r4, r6
 8003244:	f8ca 400c 	str.w	r4, [sl, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003248:	0394      	lsls	r4, r2, #14
 800324a:	d53b      	bpl.n	80032c4 <HAL_GPIO_Init+0x330>
          SET_BIT(EXTI->EMR, iocurrent);
 800324c:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8003284 <HAL_GPIO_Init+0x2f0>
 8003250:	f8da 4004 	ldr.w	r4, [sl, #4]
 8003254:	4334      	orrs	r4, r6
 8003256:	f8ca 4004 	str.w	r4, [sl, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800325a:	4c0a      	ldr	r4, [pc, #40]	@ (8003284 <HAL_GPIO_Init+0x2f0>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800325c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003260:	6822      	ldr	r2, [r4, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003262:	bf0c      	ite	eq
 8003264:	43b2      	biceq	r2, r6
          SET_BIT(EXTI->IMR, iocurrent);
 8003266:	4332      	orrne	r2, r6
 8003268:	6022      	str	r2, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800326a:	680c      	ldr	r4, [r1, #0]
 800326c:	e781      	b.n	8003172 <HAL_GPIO_Init+0x1de>
 800326e:	bf00      	nop
 8003270:	40010800 	.word	0x40010800
 8003274:	40021000 	.word	0x40021000
 8003278:	40010c00 	.word	0x40010c00
 800327c:	40011000 	.word	0x40011000
 8003280:	40011400 	.word	0x40011400
 8003284:	40010400 	.word	0x40010400
 8003288:	10220000 	.word	0x10220000
 800328c:	40010804 	.word	0x40010804
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003290:	4604      	mov	r4, r0
 8003292:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8003296:	e79a      	b.n	80031ce <HAL_GPIO_Init+0x23a>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003298:	680c      	ldr	r4, [r1, #0]
 800329a:	e76a      	b.n	8003172 <HAL_GPIO_Init+0x1de>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800329c:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 8003390 <HAL_GPIO_Init+0x3fc>
 80032a0:	f8da 4008 	ldr.w	r4, [sl, #8]
 80032a4:	ea24 0406 	bic.w	r4, r4, r6
 80032a8:	f8ca 4008 	str.w	r4, [sl, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032ac:	0294      	lsls	r4, r2, #10
 80032ae:	d4c4      	bmi.n	800323a <HAL_GPIO_Init+0x2a6>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032b0:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8003390 <HAL_GPIO_Init+0x3fc>
 80032b4:	f8da 400c 	ldr.w	r4, [sl, #12]
 80032b8:	ea24 0406 	bic.w	r4, r4, r6
 80032bc:	f8ca 400c 	str.w	r4, [sl, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032c0:	0394      	lsls	r4, r2, #14
 80032c2:	d4c3      	bmi.n	800324c <HAL_GPIO_Init+0x2b8>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003390 <HAL_GPIO_Init+0x3fc>
 80032c8:	f8da 4004 	ldr.w	r4, [sl, #4]
 80032cc:	ea24 0406 	bic.w	r4, r4, r6
 80032d0:	f8ca 4004 	str.w	r4, [sl, #4]
 80032d4:	e7c1      	b.n	800325a <HAL_GPIO_Init+0x2c6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032d6:	2001      	movs	r0, #1
 80032d8:	fa00 f009 	lsl.w	r0, r0, r9
 80032dc:	ea40 000e 	orr.w	r0, r0, lr
 80032e0:	e6da      	b.n	8003098 <HAL_GPIO_Init+0x104>
      switch (GPIO_Init->Mode)
 80032e2:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 8003394 <HAL_GPIO_Init+0x400>
 80032e6:	4564      	cmp	r4, ip
 80032e8:	f43f af2f 	beq.w	800314a <HAL_GPIO_Init+0x1b6>
 80032ec:	f50c 3c80 	add.w	ip, ip, #65536	@ 0x10000
 80032f0:	4564      	cmp	r4, ip
 80032f2:	f47f ae90 	bne.w	8003016 <HAL_GPIO_Init+0x82>
 80032f6:	e728      	b.n	800314a <HAL_GPIO_Init+0x1b6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032f8:	2002      	movs	r0, #2
 80032fa:	fa00 f009 	lsl.w	r0, r0, r9
 80032fe:	ea40 000e 	orr.w	r0, r0, lr
 8003302:	e6c9      	b.n	8003098 <HAL_GPIO_Init+0x104>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003304:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003306:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 800330a:	bf0c      	ite	eq
 800330c:	f8cb 0010 	streq.w	r0, [fp, #16]
            GPIOx->BRR = ioposition;
 8003310:	f8cb 0014 	strne.w	r0, [fp, #20]
 8003314:	e67f      	b.n	8003016 <HAL_GPIO_Init+0x82>
      switch (GPIO_Init->Mode)
 8003316:	f04f 0a00 	mov.w	sl, #0
 800331a:	e67c      	b.n	8003016 <HAL_GPIO_Init+0x82>
 800331c:	f8df a078 	ldr.w	sl, [pc, #120]	@ 8003398 <HAL_GPIO_Init+0x404>
 8003320:	4554      	cmp	r4, sl
 8003322:	d00d      	beq.n	8003340 <HAL_GPIO_Init+0x3ac>
 8003324:	d821      	bhi.n	800336a <HAL_GPIO_Init+0x3d6>
 8003326:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 800332a:	4554      	cmp	r4, sl
 800332c:	d008      	beq.n	8003340 <HAL_GPIO_Init+0x3ac>
 800332e:	f50a 2a70 	add.w	sl, sl, #983040	@ 0xf0000
 8003332:	4554      	cmp	r4, sl
 8003334:	d004      	beq.n	8003340 <HAL_GPIO_Init+0x3ac>
 8003336:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 800333a:	4554      	cmp	r4, sl
 800333c:	f47f af43 	bne.w	80031c6 <HAL_GPIO_Init+0x232>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003340:	688c      	ldr	r4, [r1, #8]
 8003342:	b1e4      	cbz	r4, 800337e <HAL_GPIO_Init+0x3ea>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003344:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8003346:	4c15      	ldr	r4, [pc, #84]	@ (800339c <HAL_GPIO_Init+0x408>)
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003348:	d01f      	beq.n	800338a <HAL_GPIO_Init+0x3f6>
            GPIOx->BRR = ioposition;
 800334a:	6162      	str	r2, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800334c:	f04f 0908 	mov.w	r9, #8
 8003350:	e739      	b.n	80031c6 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003352:	68ca      	ldr	r2, [r1, #12]
 8003354:	f102 090c 	add.w	r9, r2, #12
          break;
 8003358:	e735      	b.n	80031c6 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800335a:	68ca      	ldr	r2, [r1, #12]
 800335c:	f102 0908 	add.w	r9, r2, #8
          break;
 8003360:	e731      	b.n	80031c6 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003362:	68ca      	ldr	r2, [r1, #12]
 8003364:	f102 0904 	add.w	r9, r2, #4
          break;
 8003368:	e72d      	b.n	80031c6 <HAL_GPIO_Init+0x232>
      switch (GPIO_Init->Mode)
 800336a:	f8df a028 	ldr.w	sl, [pc, #40]	@ 8003394 <HAL_GPIO_Init+0x400>
 800336e:	4554      	cmp	r4, sl
 8003370:	d0e6      	beq.n	8003340 <HAL_GPIO_Init+0x3ac>
 8003372:	f50a 3a80 	add.w	sl, sl, #65536	@ 0x10000
 8003376:	4554      	cmp	r4, sl
 8003378:	f47f af25 	bne.w	80031c6 <HAL_GPIO_Init+0x232>
 800337c:	e7e0      	b.n	8003340 <HAL_GPIO_Init+0x3ac>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800337e:	f04f 0904 	mov.w	r9, #4
 8003382:	e720      	b.n	80031c6 <HAL_GPIO_Init+0x232>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003384:	f04f 0900 	mov.w	r9, #0
 8003388:	e71d      	b.n	80031c6 <HAL_GPIO_Init+0x232>
            GPIOx->BSRR = ioposition;
 800338a:	6122      	str	r2, [r4, #16]
 800338c:	e7de      	b.n	800334c <HAL_GPIO_Init+0x3b8>
 800338e:	bf00      	nop
 8003390:	40010400 	.word	0x40010400
 8003394:	10310000 	.word	0x10310000
 8003398:	10220000 	.word	0x10220000
 800339c:	40010800 	.word	0x40010800

080033a0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033a0:	2800      	cmp	r0, #0
 80033a2:	f000 81e4 	beq.w	800376e <HAL_RCC_OscConfig+0x3ce>
{
 80033a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033aa:	6803      	ldr	r3, [r0, #0]
 80033ac:	4604      	mov	r4, r0
 80033ae:	07dd      	lsls	r5, r3, #31
{
 80033b0:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b2:	d535      	bpl.n	8003420 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b4:	4999      	ldr	r1, [pc, #612]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 80033b6:	684a      	ldr	r2, [r1, #4]
 80033b8:	f002 020c 	and.w	r2, r2, #12
 80033bc:	2a04      	cmp	r2, #4
 80033be:	f000 80ed 	beq.w	800359c <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033c2:	684a      	ldr	r2, [r1, #4]
 80033c4:	f002 020c 	and.w	r2, r2, #12
 80033c8:	2a08      	cmp	r2, #8
 80033ca:	f000 80e3 	beq.w	8003594 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ce:	6863      	ldr	r3, [r4, #4]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d4:	d010      	beq.n	80033f8 <HAL_RCC_OscConfig+0x58>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 810a 	beq.w	80035f0 <HAL_RCC_OscConfig+0x250>
 80033dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033e0:	f000 8180 	beq.w	80036e4 <HAL_RCC_OscConfig+0x344>
 80033e4:	4b8d      	ldr	r3, [pc, #564]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033f4:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f6:	e004      	b.n	8003402 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f8:	4a88      	ldr	r2, [pc, #544]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003400:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7ff fb21 	bl	8002a48 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4e85      	ldr	r6, [pc, #532]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 8003408:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	e005      	b.n	8003418 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800340c:	f7ff fb1c 	bl	8002a48 <HAL_GetTick>
 8003410:	1b40      	subs	r0, r0, r5
 8003412:	2864      	cmp	r0, #100	@ 0x64
 8003414:	f200 80e8 	bhi.w	80035e8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003418:	6833      	ldr	r3, [r6, #0]
 800341a:	039a      	lsls	r2, r3, #14
 800341c:	d5f6      	bpl.n	800340c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	079f      	lsls	r7, r3, #30
 8003422:	d528      	bpl.n	8003476 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003424:	4a7d      	ldr	r2, [pc, #500]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 8003426:	6851      	ldr	r1, [r2, #4]
 8003428:	f011 0f0c 	tst.w	r1, #12
 800342c:	f000 8096 	beq.w	800355c <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003430:	6851      	ldr	r1, [r2, #4]
 8003432:	f001 010c 	and.w	r1, r1, #12
 8003436:	2908      	cmp	r1, #8
 8003438:	f000 808c 	beq.w	8003554 <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800343c:	6923      	ldr	r3, [r4, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8116 	beq.w	8003670 <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003444:	2201      	movs	r2, #1
 8003446:	4b76      	ldr	r3, [pc, #472]	@ (8003620 <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003448:	4e74      	ldr	r6, [pc, #464]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 800344a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800344c:	f7ff fafc 	bl	8002a48 <HAL_GetTick>
 8003450:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003452:	e005      	b.n	8003460 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003454:	f7ff faf8 	bl	8002a48 <HAL_GetTick>
 8003458:	1b40      	subs	r0, r0, r5
 800345a:	2802      	cmp	r0, #2
 800345c:	f200 80c4 	bhi.w	80035e8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	6833      	ldr	r3, [r6, #0]
 8003462:	0798      	lsls	r0, r3, #30
 8003464:	d5f6      	bpl.n	8003454 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	6833      	ldr	r3, [r6, #0]
 8003468:	6962      	ldr	r2, [r4, #20]
 800346a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800346e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003472:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	071a      	lsls	r2, r3, #28
 8003478:	d429      	bmi.n	80034ce <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800347a:	075d      	lsls	r5, r3, #29
 800347c:	d54b      	bpl.n	8003516 <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347e:	4b67      	ldr	r3, [pc, #412]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	00d0      	lsls	r0, r2, #3
 8003484:	f100 8084 	bmi.w	8003590 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003488:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003490:	61da      	str	r2, [r3, #28]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	4e61      	ldr	r6, [pc, #388]	@ (8003624 <HAL_RCC_OscConfig+0x284>)
 800349e:	6833      	ldr	r3, [r6, #0]
 80034a0:	05d9      	lsls	r1, r3, #23
 80034a2:	f140 8091 	bpl.w	80035c8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a6:	68e3      	ldr	r3, [r4, #12]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	f000 80f2 	beq.w	8003692 <HAL_RCC_OscConfig+0x2f2>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80be 	beq.w	8003630 <HAL_RCC_OscConfig+0x290>
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	4b59      	ldr	r3, [pc, #356]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 80034b8:	6a1a      	ldr	r2, [r3, #32]
 80034ba:	f000 8120 	beq.w	80036fe <HAL_RCC_OscConfig+0x35e>
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	621a      	str	r2, [r3, #32]
 80034c4:	6a1a      	ldr	r2, [r3, #32]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034cc:	e0e6      	b.n	800369c <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ce:	69a3      	ldr	r3, [r4, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d04c      	beq.n	800356e <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 80034d4:	2201      	movs	r2, #1
 80034d6:	4b52      	ldr	r3, [pc, #328]	@ (8003620 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d8:	4e50      	ldr	r6, [pc, #320]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 80034da:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80034de:	f7ff fab3 	bl	8002a48 <HAL_GetTick>
 80034e2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e4:	e004      	b.n	80034f0 <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e6:	f7ff faaf 	bl	8002a48 <HAL_GetTick>
 80034ea:	1b40      	subs	r0, r0, r5
 80034ec:	2802      	cmp	r0, #2
 80034ee:	d87b      	bhi.n	80035e8 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80034f2:	079b      	lsls	r3, r3, #30
 80034f4:	d5f7      	bpl.n	80034e6 <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003628 <HAL_RCC_OscConfig+0x288>)
 80034f8:	4a4c      	ldr	r2, [pc, #304]	@ (800362c <HAL_RCC_OscConfig+0x28c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	0a5b      	lsrs	r3, r3, #9
 8003502:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003504:	bf00      	nop
  }
  while (Delay --);
 8003506:	9b01      	ldr	r3, [sp, #4]
 8003508:	1e5a      	subs	r2, r3, #1
 800350a:	9201      	str	r2, [sp, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f9      	bne.n	8003504 <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	075d      	lsls	r5, r3, #29
 8003514:	d4b3      	bmi.n	800347e <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003516:	69e3      	ldr	r3, [r4, #28]
 8003518:	b1c3      	cbz	r3, 800354c <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800351a:	4d40      	ldr	r5, [pc, #256]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 800351c:	686a      	ldr	r2, [r5, #4]
 800351e:	f002 020c 	and.w	r2, r2, #12
 8003522:	2a08      	cmp	r2, #8
 8003524:	f000 80cd 	beq.w	80036c2 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8003528:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800352a:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800352c:	4b3c      	ldr	r3, [pc, #240]	@ (8003620 <HAL_RCC_OscConfig+0x280>)
 800352e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003530:	f000 80ed 	beq.w	800370e <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 8003534:	f7ff fa88 	bl	8002a48 <HAL_GetTick>
 8003538:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353a:	e004      	b.n	8003546 <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353c:	f7ff fa84 	bl	8002a48 <HAL_GetTick>
 8003540:	1b00      	subs	r0, r0, r4
 8003542:	2802      	cmp	r0, #2
 8003544:	d850      	bhi.n	80035e8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003546:	682b      	ldr	r3, [r5, #0]
 8003548:	019b      	lsls	r3, r3, #6
 800354a:	d4f7      	bmi.n	800353c <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 800354c:	2000      	movs	r0, #0
}
 800354e:	b002      	add	sp, #8
 8003550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003554:	6852      	ldr	r2, [r2, #4]
 8003556:	03d6      	lsls	r6, r2, #15
 8003558:	f53f af70 	bmi.w	800343c <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355c:	4a2f      	ldr	r2, [pc, #188]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	0795      	lsls	r5, r2, #30
 8003562:	d525      	bpl.n	80035b0 <HAL_RCC_OscConfig+0x210>
 8003564:	6922      	ldr	r2, [r4, #16]
 8003566:	2a01      	cmp	r2, #1
 8003568:	d022      	beq.n	80035b0 <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 800356a:	2001      	movs	r0, #1
 800356c:	e7ef      	b.n	800354e <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 800356e:	4a2c      	ldr	r2, [pc, #176]	@ (8003620 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	4e2a      	ldr	r6, [pc, #168]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 8003572:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003576:	f7ff fa67 	bl	8002a48 <HAL_GetTick>
 800357a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357c:	e004      	b.n	8003588 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357e:	f7ff fa63 	bl	8002a48 <HAL_GetTick>
 8003582:	1b40      	subs	r0, r0, r5
 8003584:	2802      	cmp	r0, #2
 8003586:	d82f      	bhi.n	80035e8 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003588:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800358a:	079f      	lsls	r7, r3, #30
 800358c:	d4f7      	bmi.n	800357e <HAL_RCC_OscConfig+0x1de>
 800358e:	e7bf      	b.n	8003510 <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 8003590:	2500      	movs	r5, #0
 8003592:	e783      	b.n	800349c <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003594:	684a      	ldr	r2, [r1, #4]
 8003596:	03d0      	lsls	r0, r2, #15
 8003598:	f57f af19 	bpl.w	80033ce <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	4a1f      	ldr	r2, [pc, #124]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	0391      	lsls	r1, r2, #14
 80035a2:	f57f af3d 	bpl.w	8003420 <HAL_RCC_OscConfig+0x80>
 80035a6:	6862      	ldr	r2, [r4, #4]
 80035a8:	2a00      	cmp	r2, #0
 80035aa:	f47f af39 	bne.w	8003420 <HAL_RCC_OscConfig+0x80>
 80035ae:	e7dc      	b.n	800356a <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b0:	491a      	ldr	r1, [pc, #104]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 80035b2:	6960      	ldr	r0, [r4, #20]
 80035b4:	680a      	ldr	r2, [r1, #0]
 80035b6:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80035ba:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80035be:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c0:	071a      	lsls	r2, r3, #28
 80035c2:	f57f af5a 	bpl.w	800347a <HAL_RCC_OscConfig+0xda>
 80035c6:	e782      	b.n	80034ce <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c8:	6833      	ldr	r3, [r6, #0]
 80035ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80035d0:	f7ff fa3a 	bl	8002a48 <HAL_GetTick>
 80035d4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	6833      	ldr	r3, [r6, #0]
 80035d8:	05da      	lsls	r2, r3, #23
 80035da:	f53f af64 	bmi.w	80034a6 <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035de:	f7ff fa33 	bl	8002a48 <HAL_GetTick>
 80035e2:	1bc0      	subs	r0, r0, r7
 80035e4:	2864      	cmp	r0, #100	@ 0x64
 80035e6:	d9f6      	bls.n	80035d6 <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 80035e8:	2003      	movs	r0, #3
}
 80035ea:	b002      	add	sp, #8
 80035ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f0:	4d0a      	ldr	r5, [pc, #40]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 80035f2:	682b      	ldr	r3, [r5, #0]
 80035f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f8:	602b      	str	r3, [r5, #0]
 80035fa:	682b      	ldr	r3, [r5, #0]
 80035fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003600:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003602:	f7ff fa21 	bl	8002a48 <HAL_GetTick>
 8003606:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003608:	e004      	b.n	8003614 <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800360a:	f7ff fa1d 	bl	8002a48 <HAL_GetTick>
 800360e:	1b80      	subs	r0, r0, r6
 8003610:	2864      	cmp	r0, #100	@ 0x64
 8003612:	d8e9      	bhi.n	80035e8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	039b      	lsls	r3, r3, #14
 8003618:	d4f7      	bmi.n	800360a <HAL_RCC_OscConfig+0x26a>
 800361a:	e700      	b.n	800341e <HAL_RCC_OscConfig+0x7e>
 800361c:	40021000 	.word	0x40021000
 8003620:	42420000 	.word	0x42420000
 8003624:	40007000 	.word	0x40007000
 8003628:	200005bc 	.word	0x200005bc
 800362c:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003630:	4e50      	ldr	r6, [pc, #320]	@ (8003774 <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003636:	6a33      	ldr	r3, [r6, #32]
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6233      	str	r3, [r6, #32]
 800363e:	6a33      	ldr	r3, [r6, #32]
 8003640:	f023 0304 	bic.w	r3, r3, #4
 8003644:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003646:	f7ff f9ff 	bl	8002a48 <HAL_GetTick>
 800364a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364c:	e004      	b.n	8003658 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7ff f9fb 	bl	8002a48 <HAL_GetTick>
 8003652:	1bc0      	subs	r0, r0, r7
 8003654:	4540      	cmp	r0, r8
 8003656:	d8c7      	bhi.n	80035e8 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003658:	6a33      	ldr	r3, [r6, #32]
 800365a:	0798      	lsls	r0, r3, #30
 800365c:	d4f7      	bmi.n	800364e <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 800365e:	2d00      	cmp	r5, #0
 8003660:	f43f af59 	beq.w	8003516 <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003664:	4a43      	ldr	r2, [pc, #268]	@ (8003774 <HAL_RCC_OscConfig+0x3d4>)
 8003666:	69d3      	ldr	r3, [r2, #28]
 8003668:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800366c:	61d3      	str	r3, [r2, #28]
 800366e:	e752      	b.n	8003516 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 8003670:	4a41      	ldr	r2, [pc, #260]	@ (8003778 <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	4e40      	ldr	r6, [pc, #256]	@ (8003774 <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 8003674:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003676:	f7ff f9e7 	bl	8002a48 <HAL_GetTick>
 800367a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367c:	e004      	b.n	8003688 <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367e:	f7ff f9e3 	bl	8002a48 <HAL_GetTick>
 8003682:	1b40      	subs	r0, r0, r5
 8003684:	2802      	cmp	r0, #2
 8003686:	d8af      	bhi.n	80035e8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003688:	6833      	ldr	r3, [r6, #0]
 800368a:	0799      	lsls	r1, r3, #30
 800368c:	d4f7      	bmi.n	800367e <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	e6f1      	b.n	8003476 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003692:	4a38      	ldr	r2, [pc, #224]	@ (8003774 <HAL_RCC_OscConfig+0x3d4>)
 8003694:	6a13      	ldr	r3, [r2, #32]
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800369c:	f7ff f9d4 	bl	8002a48 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80036a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a6:	4f33      	ldr	r7, [pc, #204]	@ (8003774 <HAL_RCC_OscConfig+0x3d4>)
 80036a8:	e004      	b.n	80036b4 <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036aa:	f7ff f9cd 	bl	8002a48 <HAL_GetTick>
 80036ae:	1b80      	subs	r0, r0, r6
 80036b0:	4540      	cmp	r0, r8
 80036b2:	d899      	bhi.n	80035e8 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	079b      	lsls	r3, r3, #30
 80036b8:	d5f7      	bpl.n	80036aa <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 80036ba:	2d00      	cmp	r5, #0
 80036bc:	f43f af2b 	beq.w	8003516 <HAL_RCC_OscConfig+0x176>
 80036c0:	e7d0      	b.n	8003664 <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	f43f af51 	beq.w	800356a <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 80036c8:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	6a22      	ldr	r2, [r4, #32]
 80036cc:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 80036d0:	4291      	cmp	r1, r2
 80036d2:	f47f af4a 	bne.w	800356a <HAL_RCC_OscConfig+0x1ca>
 80036d6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036d8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036dc:	1a18      	subs	r0, r3, r0
 80036de:	bf18      	it	ne
 80036e0:	2001      	movne	r0, #1
 80036e2:	e734      	b.n	800354e <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036e8:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80036fa:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036fc:	e681      	b.n	8003402 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fe:	f042 0204 	orr.w	r2, r2, #4
 8003702:	621a      	str	r2, [r3, #32]
 8003704:	6a1a      	ldr	r2, [r3, #32]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800370c:	e7c6      	b.n	800369c <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 800370e:	f7ff f99b 	bl	8002a48 <HAL_GetTick>
 8003712:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003714:	e005      	b.n	8003722 <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003716:	f7ff f997 	bl	8002a48 <HAL_GetTick>
 800371a:	1b80      	subs	r0, r0, r6
 800371c:	2802      	cmp	r0, #2
 800371e:	f63f af63 	bhi.w	80035e8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003722:	682b      	ldr	r3, [r5, #0]
 8003724:	0199      	lsls	r1, r3, #6
 8003726:	d4f6      	bmi.n	8003716 <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003728:	6a23      	ldr	r3, [r4, #32]
 800372a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800372e:	d105      	bne.n	800373c <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003730:	686a      	ldr	r2, [r5, #4]
 8003732:	68a1      	ldr	r1, [r4, #8]
 8003734:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003738:	430a      	orrs	r2, r1
 800373a:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800373c:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800373e:	4d0d      	ldr	r5, [pc, #52]	@ (8003774 <HAL_RCC_OscConfig+0x3d4>)
 8003740:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003742:	686a      	ldr	r2, [r5, #4]
 8003744:	430b      	orrs	r3, r1
 8003746:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800374a:	490b      	ldr	r1, [pc, #44]	@ (8003778 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374c:	4313      	orrs	r3, r2
 800374e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003750:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003752:	f7ff f979 	bl	8002a48 <HAL_GetTick>
 8003756:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003758:	e005      	b.n	8003766 <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375a:	f7ff f975 	bl	8002a48 <HAL_GetTick>
 800375e:	1b00      	subs	r0, r0, r4
 8003760:	2802      	cmp	r0, #2
 8003762:	f63f af41 	bhi.w	80035e8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003766:	682b      	ldr	r3, [r5, #0]
 8003768:	019a      	lsls	r2, r3, #6
 800376a:	d5f6      	bpl.n	800375a <HAL_RCC_OscConfig+0x3ba>
 800376c:	e6ee      	b.n	800354c <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 800376e:	2001      	movs	r0, #1
}
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	42420000 	.word	0x42420000

0800377c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800377c:	2800      	cmp	r0, #0
 800377e:	f000 80a1 	beq.w	80038c4 <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003782:	4a56      	ldr	r2, [pc, #344]	@ (80038dc <HAL_RCC_ClockConfig+0x160>)
{
 8003784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	6813      	ldr	r3, [r2, #0]
 800378a:	4604      	mov	r4, r0
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	428b      	cmp	r3, r1
 8003792:	460d      	mov	r5, r1
 8003794:	d20c      	bcs.n	80037b0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	f023 0307 	bic.w	r3, r3, #7
 800379c:	430b      	orrs	r3, r1
 800379e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a0:	6813      	ldr	r3, [r2, #0]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	428b      	cmp	r3, r1
 80037a8:	d002      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80037aa:	2001      	movs	r0, #1
}
 80037ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	079e      	lsls	r6, r3, #30
 80037b4:	d514      	bpl.n	80037e0 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b6:	0758      	lsls	r0, r3, #29
 80037b8:	d504      	bpl.n	80037c4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ba:	4949      	ldr	r1, [pc, #292]	@ (80038e0 <HAL_RCC_ClockConfig+0x164>)
 80037bc:	684a      	ldr	r2, [r1, #4]
 80037be:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80037c2:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c4:	0719      	lsls	r1, r3, #28
 80037c6:	d504      	bpl.n	80037d2 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c8:	4945      	ldr	r1, [pc, #276]	@ (80038e0 <HAL_RCC_ClockConfig+0x164>)
 80037ca:	684a      	ldr	r2, [r1, #4]
 80037cc:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 80037d0:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d2:	4943      	ldr	r1, [pc, #268]	@ (80038e0 <HAL_RCC_ClockConfig+0x164>)
 80037d4:	68a0      	ldr	r0, [r4, #8]
 80037d6:	684a      	ldr	r2, [r1, #4]
 80037d8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80037dc:	4302      	orrs	r2, r0
 80037de:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e0:	07da      	lsls	r2, r3, #31
 80037e2:	d520      	bpl.n	8003826 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e4:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	4b3e      	ldr	r3, [pc, #248]	@ (80038e0 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ec:	d06c      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ee:	2a02      	cmp	r2, #2
 80037f0:	d065      	beq.n	80038be <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f2:	079e      	lsls	r6, r3, #30
 80037f4:	d5d9      	bpl.n	80037aa <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f6:	4e3a      	ldr	r6, [pc, #232]	@ (80038e0 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f8:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fc:	6873      	ldr	r3, [r6, #4]
 80037fe:	f023 0303 	bic.w	r3, r3, #3
 8003802:	4313      	orrs	r3, r2
 8003804:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003806:	f7ff f91f 	bl	8002a48 <HAL_GetTick>
 800380a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380c:	e004      	b.n	8003818 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380e:	f7ff f91b 	bl	8002a48 <HAL_GetTick>
 8003812:	1bc0      	subs	r0, r0, r7
 8003814:	4540      	cmp	r0, r8
 8003816:	d85a      	bhi.n	80038ce <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003818:	6873      	ldr	r3, [r6, #4]
 800381a:	6862      	ldr	r2, [r4, #4]
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003824:	d1f3      	bne.n	800380e <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003826:	4a2d      	ldr	r2, [pc, #180]	@ (80038dc <HAL_RCC_ClockConfig+0x160>)
 8003828:	6813      	ldr	r3, [r2, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	42ab      	cmp	r3, r5
 8003830:	d909      	bls.n	8003846 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	f023 0307 	bic.w	r3, r3, #7
 8003838:	432b      	orrs	r3, r5
 800383a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383c:	6813      	ldr	r3, [r2, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	42ab      	cmp	r3, r5
 8003844:	d1b1      	bne.n	80037aa <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	0758      	lsls	r0, r3, #29
 800384a:	d506      	bpl.n	800385a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800384c:	4924      	ldr	r1, [pc, #144]	@ (80038e0 <HAL_RCC_ClockConfig+0x164>)
 800384e:	68e0      	ldr	r0, [r4, #12]
 8003850:	684a      	ldr	r2, [r1, #4]
 8003852:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003856:	4302      	orrs	r2, r0
 8003858:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385a:	0719      	lsls	r1, r3, #28
 800385c:	d507      	bpl.n	800386e <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800385e:	4a20      	ldr	r2, [pc, #128]	@ (80038e0 <HAL_RCC_ClockConfig+0x164>)
 8003860:	6921      	ldr	r1, [r4, #16]
 8003862:	6853      	ldr	r3, [r2, #4]
 8003864:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003868:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800386c:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 800386e:	491c      	ldr	r1, [pc, #112]	@ (80038e0 <HAL_RCC_ClockConfig+0x164>)
 8003870:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003872:	f002 030c 	and.w	r3, r2, #12
 8003876:	2b08      	cmp	r3, #8
 8003878:	d010      	beq.n	800389c <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 800387a:	4b1a      	ldr	r3, [pc, #104]	@ (80038e4 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800387c:	4a18      	ldr	r2, [pc, #96]	@ (80038e0 <HAL_RCC_ClockConfig+0x164>)
 800387e:	481a      	ldr	r0, [pc, #104]	@ (80038e8 <HAL_RCC_ClockConfig+0x16c>)
 8003880:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003882:	491a      	ldr	r1, [pc, #104]	@ (80038ec <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003884:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003888:	5c80      	ldrb	r0, [r0, r2]
 800388a:	4a19      	ldr	r2, [pc, #100]	@ (80038f0 <HAL_RCC_ClockConfig+0x174>)
 800388c:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 800388e:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003890:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003892:	f7ff f897 	bl	80029c4 <HAL_InitTick>
  return HAL_OK;
 8003896:	2000      	movs	r0, #0
}
 8003898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800389c:	4815      	ldr	r0, [pc, #84]	@ (80038f4 <HAL_RCC_ClockConfig+0x178>)
 800389e:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038a2:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038a4:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038a6:	d514      	bpl.n	80038d2 <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038a8:	480e      	ldr	r0, [pc, #56]	@ (80038e4 <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038aa:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ac:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038b0:	4911      	ldr	r1, [pc, #68]	@ (80038f8 <HAL_RCC_ClockConfig+0x17c>)
 80038b2:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80038b6:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80038bc:	e7de      	b.n	800387c <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038be:	019f      	lsls	r7, r3, #6
 80038c0:	d499      	bmi.n	80037f6 <HAL_RCC_ClockConfig+0x7a>
 80038c2:	e772      	b.n	80037aa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80038c4:	2001      	movs	r0, #1
}
 80038c6:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c8:	039b      	lsls	r3, r3, #14
 80038ca:	d494      	bmi.n	80037f6 <HAL_RCC_ClockConfig+0x7a>
 80038cc:	e76d      	b.n	80037aa <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80038ce:	2003      	movs	r0, #3
 80038d0:	e76c      	b.n	80037ac <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038d2:	4a0a      	ldr	r2, [pc, #40]	@ (80038fc <HAL_RCC_ClockConfig+0x180>)
 80038d4:	fb02 f303 	mul.w	r3, r2, r3
 80038d8:	e7d0      	b.n	800387c <HAL_RCC_ClockConfig+0x100>
 80038da:	bf00      	nop
 80038dc:	40022000 	.word	0x40022000
 80038e0:	40021000 	.word	0x40021000
 80038e4:	007a1200 	.word	0x007a1200
 80038e8:	0800625c 	.word	0x0800625c
 80038ec:	200005c4 	.word	0x200005c4
 80038f0:	200005bc 	.word	0x200005bc
 80038f4:	08006270 	.word	0x08006270
 80038f8:	0800626c 	.word	0x0800626c
 80038fc:	003d0900 	.word	0x003d0900

08003900 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003900:	2201      	movs	r2, #1
 8003902:	4b01      	ldr	r3, [pc, #4]	@ (8003908 <HAL_RCC_EnableCSS+0x8>)
 8003904:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003906:	4770      	bx	lr
 8003908:	42420000 	.word	0x42420000

0800390c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800390c:	4b01      	ldr	r3, [pc, #4]	@ (8003914 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	200005bc 	.word	0x200005bc

08003918 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003918:	4b04      	ldr	r3, [pc, #16]	@ (800392c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800391a:	4a05      	ldr	r2, [pc, #20]	@ (8003930 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4905      	ldr	r1, [pc, #20]	@ (8003934 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003920:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003924:	5ccb      	ldrb	r3, [r1, r3]
 8003926:	6810      	ldr	r0, [r2, #0]
}
 8003928:	40d8      	lsrs	r0, r3
 800392a:	4770      	bx	lr
 800392c:	40021000 	.word	0x40021000
 8003930:	200005bc 	.word	0x200005bc
 8003934:	08006254 	.word	0x08006254

08003938 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003938:	4b04      	ldr	r3, [pc, #16]	@ (800394c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800393a:	4a05      	ldr	r2, [pc, #20]	@ (8003950 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4905      	ldr	r1, [pc, #20]	@ (8003954 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003940:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003944:	5ccb      	ldrb	r3, [r1, r3]
 8003946:	6810      	ldr	r0, [r2, #0]
}
 8003948:	40d8      	lsrs	r0, r3
 800394a:	4770      	bx	lr
 800394c:	40021000 	.word	0x40021000
 8003950:	200005bc 	.word	0x200005bc
 8003954:	08006254 	.word	0x08006254

08003958 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800395c:	6803      	ldr	r3, [r0, #0]
{
 800395e:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003960:	07d8      	lsls	r0, r3, #31
{
 8003962:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003964:	d52c      	bpl.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003966:	4b39      	ldr	r3, [pc, #228]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	00d1      	lsls	r1, r2, #3
 800396c:	d53f      	bpl.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396e:	4d38      	ldr	r5, [pc, #224]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    FlagStatus pwrclkchanged = RESET;
 8003970:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	682b      	ldr	r3, [r5, #0]
 8003974:	05da      	lsls	r2, r3, #23
 8003976:	d548      	bpl.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003978:	4d34      	ldr	r5, [pc, #208]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800397a:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800397c:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800397e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003982:	d011      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003984:	f401 7240 	and.w	r2, r1, #768	@ 0x300
 8003988:	429a      	cmp	r2, r3
 800398a:	d00d      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 800398c:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 800398e:	2701      	movs	r7, #1
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003990:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003992:	4a30      	ldr	r2, [pc, #192]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003994:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003998:	f8c2 7440 	str.w	r7, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800399c:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039a0:	07d8      	lsls	r0, r3, #31
      RCC->BDCR = temp_reg;
 80039a2:	6229      	str	r1, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039a4:	d444      	bmi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a6:	6861      	ldr	r1, [r4, #4]
 80039a8:	4a28      	ldr	r2, [pc, #160]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80039aa:	6a13      	ldr	r3, [r2, #32]
 80039ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039b4:	b11e      	cbz	r6, 80039be <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b6:	69d3      	ldr	r3, [r2, #28]
 80039b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039bc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	079a      	lsls	r2, r3, #30
 80039c2:	d506      	bpl.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039c4:	4921      	ldr	r1, [pc, #132]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80039c6:	68a0      	ldr	r0, [r4, #8]
 80039c8:	684a      	ldr	r2, [r1, #4]
 80039ca:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80039ce:	4302      	orrs	r2, r0
 80039d0:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039d2:	06db      	lsls	r3, r3, #27
 80039d4:	d403      	bmi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x86>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039d6:	2000      	movs	r0, #0
}
 80039d8:	b002      	add	sp, #8
 80039da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039de:	4a1b      	ldr	r2, [pc, #108]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80039e0:	68e1      	ldr	r1, [r4, #12]
 80039e2:	6853      	ldr	r3, [r2, #4]
 80039e4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6053      	str	r3, [r2, #4]
 80039ec:	e7f3      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ee:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	4d17      	ldr	r5, [pc, #92]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80039f6:	61da      	str	r2, [r3, #28]
 80039f8:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 80039fa:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	682b      	ldr	r3, [r5, #0]
 8003a06:	05da      	lsls	r2, r3, #23
 8003a08:	d4b6      	bmi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0a:	682b      	ldr	r3, [r5, #0]
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a10:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003a12:	f7ff f819 	bl	8002a48 <HAL_GetTick>
 8003a16:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	682b      	ldr	r3, [r5, #0]
 8003a1a:	05db      	lsls	r3, r3, #23
 8003a1c:	d4ac      	bmi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1e:	f7ff f813 	bl	8002a48 <HAL_GetTick>
 8003a22:	1bc3      	subs	r3, r0, r7
 8003a24:	2b64      	cmp	r3, #100	@ 0x64
 8003a26:	d9f7      	bls.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003a28:	2003      	movs	r0, #3
}
 8003a2a:	b002      	add	sp, #8
 8003a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8003a30:	f7ff f80a 	bl	8002a48 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a34:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003a38:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3a:	6a2b      	ldr	r3, [r5, #32]
 8003a3c:	0799      	lsls	r1, r3, #30
 8003a3e:	d4b2      	bmi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7ff f802 	bl	8002a48 <HAL_GetTick>
 8003a44:	1bc0      	subs	r0, r0, r7
 8003a46:	4540      	cmp	r0, r8
 8003a48:	d9f7      	bls.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a4a:	e7ed      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40007000 	.word	0x40007000
 8003a54:	42420000 	.word	0x42420000

08003a58 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d066      	beq.n	8003b2a <HAL_TIM_Base_Init+0xd2>
{
 8003a5c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a5e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003a62:	4604      	mov	r4, r0
 8003a64:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d059      	beq.n	8003b20 <HAL_TIM_Base_Init+0xc8>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a70:	4e2f      	ldr	r6, [pc, #188]	@ (8003b30 <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003a72:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a76:	42b2      	cmp	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a78:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a7a:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a7c:	6861      	ldr	r1, [r4, #4]
  tmpcr1 = TIMx->CR1;
 8003a7e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a80:	d030      	beq.n	8003ae4 <HAL_TIM_Base_Init+0x8c>
 8003a82:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003a86:	d02d      	beq.n	8003ae4 <HAL_TIM_Base_Init+0x8c>
 8003a88:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8003a8c:	42b2      	cmp	r2, r6
 8003a8e:	d03e      	beq.n	8003b0e <HAL_TIM_Base_Init+0xb6>
 8003a90:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003a94:	42b2      	cmp	r2, r6
 8003a96:	d03a      	beq.n	8003b0e <HAL_TIM_Base_Init+0xb6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a9c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003a9e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003aa2:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aa8:	6913      	ldr	r3, [r2, #16]
 8003aaa:	07db      	lsls	r3, r3, #31
 8003aac:	d503      	bpl.n	8003ab6 <HAL_TIM_Base_Init+0x5e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aae:	6913      	ldr	r3, [r2, #16]
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003ac0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003ac4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003ac8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003acc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ad4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003ad8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003ae0:	2000      	movs	r0, #0
}
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8003ae4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003aea:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aec:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003af2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003af8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003afa:	6013      	str	r3, [r2, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003afc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <HAL_TIM_Base_Init+0xd8>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003afe:	62d0      	str	r0, [r2, #44]	@ 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b00:	429a      	cmp	r2, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003b02:	bf08      	it	eq
 8003b04:	6963      	ldreq	r3, [r4, #20]
  TIMx->PSC = Structure->Prescaler;
 8003b06:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003b08:	bf08      	it	eq
 8003b0a:	6313      	streq	r3, [r2, #48]	@ 0x30
 8003b0c:	e7ca      	b.n	8003aa4 <HAL_TIM_Base_Init+0x4c>
    tmpcr1 |= Structure->CounterMode;
 8003b0e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b14:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b16:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1c:	4333      	orrs	r3, r6
 8003b1e:	e7bb      	b.n	8003a98 <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8003b20:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003b24:	f7fe f9da 	bl	8001edc <HAL_TIM_Base_MspInit>
 8003b28:	e7a0      	b.n	8003a6c <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8003b2a:	2001      	movs	r0, #1
}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40012c00 	.word	0x40012c00

08003b34 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003b34:	2800      	cmp	r0, #0
 8003b36:	d066      	beq.n	8003c06 <HAL_TIM_PWM_Init+0xd2>
{
 8003b38:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003b3e:	4604      	mov	r4, r0
 8003b40:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d059      	beq.n	8003bfc <HAL_TIM_PWM_Init+0xc8>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b4a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b4c:	4e2f      	ldr	r6, [pc, #188]	@ (8003c0c <HAL_TIM_PWM_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b52:	42b2      	cmp	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b54:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b56:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003b58:	6861      	ldr	r1, [r4, #4]
  tmpcr1 = TIMx->CR1;
 8003b5a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b5c:	d030      	beq.n	8003bc0 <HAL_TIM_PWM_Init+0x8c>
 8003b5e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003b62:	d02d      	beq.n	8003bc0 <HAL_TIM_PWM_Init+0x8c>
 8003b64:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8003b68:	42b2      	cmp	r2, r6
 8003b6a:	d03e      	beq.n	8003bea <HAL_TIM_PWM_Init+0xb6>
 8003b6c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003b70:	42b2      	cmp	r2, r6
 8003b72:	d03a      	beq.n	8003bea <HAL_TIM_PWM_Init+0xb6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b78:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003b7a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b7c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b7e:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003b80:	2301      	movs	r3, #1
 8003b82:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b84:	6913      	ldr	r3, [r2, #16]
 8003b86:	07db      	lsls	r3, r3, #31
 8003b88:	d503      	bpl.n	8003b92 <HAL_TIM_PWM_Init+0x5e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b8a:	6913      	ldr	r3, [r2, #16]
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b98:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003b9c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003ba0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003ba4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bb0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003bb4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003bbc:	2000      	movs	r0, #0
}
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8003bc0:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bc6:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc8:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bce:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bd4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003bd6:	6013      	str	r3, [r2, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c0c <HAL_TIM_PWM_Init+0xd8>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bda:	62d0      	str	r0, [r2, #44]	@ 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bdc:	429a      	cmp	r2, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003bde:	bf08      	it	eq
 8003be0:	6963      	ldreq	r3, [r4, #20]
  TIMx->PSC = Structure->Prescaler;
 8003be2:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003be4:	bf08      	it	eq
 8003be6:	6313      	streq	r3, [r2, #48]	@ 0x30
 8003be8:	e7ca      	b.n	8003b80 <HAL_TIM_PWM_Init+0x4c>
    tmpcr1 |= Structure->CounterMode;
 8003bea:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bf0:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bf2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bf8:	4333      	orrs	r3, r6
 8003bfa:	e7bb      	b.n	8003b74 <HAL_TIM_PWM_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8003bfc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003c00:	f7fe f9c8 	bl	8001f94 <HAL_TIM_PWM_MspInit>
 8003c04:	e7a0      	b.n	8003b48 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8003c06:	2001      	movs	r0, #1
}
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40012c00 	.word	0x40012c00

08003c10 <HAL_TIM_PWM_ConfigChannel>:
{
 8003c10:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003c12:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8003c16:	2801      	cmp	r0, #1
 8003c18:	f000 80b6 	beq.w	8003d88 <HAL_TIM_PWM_ConfigChannel+0x178>
 8003c1c:	2001      	movs	r0, #1
{
 8003c1e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8003c20:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  switch (Channel)
 8003c24:	2a0c      	cmp	r2, #12
 8003c26:	d808      	bhi.n	8003c3a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003c28:	e8df f002 	tbb	[pc, r2]
 8003c2c:	0707073b 	.word	0x0707073b
 8003c30:	07070760 	.word	0x07070760
 8003c34:	07070788 	.word	0x07070788
 8003c38:	0d          	.byte	0x0d
 8003c39:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (Channel)
 8003c40:	2001      	movs	r0, #1
}
 8003c42:	bcf0      	pop	{r4, r5, r6, r7}
 8003c44:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c46:	681a      	ldr	r2, [r3, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c48:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8003c4a:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c4c:	6a14      	ldr	r4, [r2, #32]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c4e:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c52:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8003c56:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003c58:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003c5a:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c5c:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c60:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c64:	688e      	ldr	r6, [r1, #8]
 8003c66:	ea40 3006 	orr.w	r0, r0, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6a:	4e61      	ldr	r6, [pc, #388]	@ (8003df0 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8003c6c:	42b2      	cmp	r2, r6
 8003c6e:	f000 80a9 	beq.w	8003dc4 <HAL_TIM_PWM_ConfigChannel+0x1b4>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c72:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c74:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003c76:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c78:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 8003c7a:	6415      	str	r5, [r2, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c7e:	69d1      	ldr	r1, [r2, #28]
 8003c80:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8003c84:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c86:	69d1      	ldr	r1, [r2, #28]
 8003c88:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8003c8c:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c8e:	69d1      	ldr	r1, [r2, #28]
 8003c90:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8003c94:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003c9c:	2000      	movs	r0, #0
}
 8003c9e:	bcf0      	pop	{r4, r5, r6, r7}
 8003ca0:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ca2:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003ca4:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8003ca6:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca8:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC1P;
 8003caa:	f020 0002 	bic.w	r0, r0, #2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cae:	f024 0401 	bic.w	r4, r4, #1
 8003cb2:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003cb4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003cb6:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb8:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003cbc:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8003cbe:	688e      	ldr	r6, [r1, #8]
 8003cc0:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cc2:	4e4b      	ldr	r6, [pc, #300]	@ (8003df0 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8003cc4:	42b2      	cmp	r2, r6
 8003cc6:	d061      	beq.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x17c>
  TIMx->CR2 = tmpcr2;
 8003cc8:	6055      	str	r5, [r2, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8003cca:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003ccc:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cce:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8003cd0:	6355      	str	r5, [r2, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8003cd2:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cd4:	6991      	ldr	r1, [r2, #24]
 8003cd6:	f041 0108 	orr.w	r1, r1, #8
 8003cda:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cdc:	6991      	ldr	r1, [r2, #24]
 8003cde:	f021 0104 	bic.w	r1, r1, #4
 8003ce2:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ce4:	6991      	ldr	r1, [r2, #24]
 8003ce6:	4321      	orrs	r1, r4
 8003ce8:	6191      	str	r1, [r2, #24]
      break;
 8003cea:	e7d4      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cec:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cee:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8003cf0:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf2:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC2P;
 8003cf4:	f020 0020 	bic.w	r0, r0, #32
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf8:	f024 0410 	bic.w	r4, r4, #16
 8003cfc:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003cfe:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003d00:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d02:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d06:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d0a:	688e      	ldr	r6, [r1, #8]
 8003d0c:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d10:	4e37      	ldr	r6, [pc, #220]	@ (8003df0 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8003d12:	42b2      	cmp	r2, r6
 8003d14:	d047      	beq.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x196>
  TIMx->CR2 = tmpcr2;
 8003d16:	6055      	str	r5, [r2, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003d18:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003d1a:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d1c:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 8003d1e:	6395      	str	r5, [r2, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003d20:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d22:	6991      	ldr	r1, [r2, #24]
 8003d24:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8003d28:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d2a:	6991      	ldr	r1, [r2, #24]
 8003d2c:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8003d30:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d32:	6991      	ldr	r1, [r2, #24]
 8003d34:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8003d38:	6191      	str	r1, [r2, #24]
      break;
 8003d3a:	e7ac      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d3c:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003d3e:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8003d40:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d42:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC3P;
 8003d44:	f420 7000 	bic.w	r0, r0, #512	@ 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d48:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 8003d4c:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003d4e:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003d50:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d52:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003d56:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d58:	688e      	ldr	r6, [r1, #8]
 8003d5a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d5e:	4e24      	ldr	r6, [pc, #144]	@ (8003df0 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8003d60:	42b2      	cmp	r2, r6
 8003d62:	d035      	beq.n	8003dd0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
  TIMx->CR2 = tmpcr2;
 8003d64:	6055      	str	r5, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8003d66:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003d68:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d6a:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 8003d6c:	63d5      	str	r5, [r2, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8003d6e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d70:	69d1      	ldr	r1, [r2, #28]
 8003d72:	f041 0108 	orr.w	r1, r1, #8
 8003d76:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d78:	69d1      	ldr	r1, [r2, #28]
 8003d7a:	f021 0104 	bic.w	r1, r1, #4
 8003d7e:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d80:	69d1      	ldr	r1, [r2, #28]
 8003d82:	4321      	orrs	r1, r4
 8003d84:	61d1      	str	r1, [r2, #28]
      break;
 8003d86:	e786      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x86>
  __HAL_LOCK(htim);
 8003d88:	2002      	movs	r0, #2
}
 8003d8a:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8003d8c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d8e:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003d92:	4330      	orrs	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d94:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d98:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8003d9c:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d9e:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003da2:	4335      	orrs	r5, r6
 8003da4:	e790      	b.n	8003cc8 <HAL_TIM_PWM_ConfigChannel+0xb8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003da6:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003da8:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dac:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003db0:	f425 6540 	bic.w	r5, r5, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003db4:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8003db8:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dba:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dbe:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8003dc2:	e7a8      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x106>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc6:	f425 4580 	bic.w	r5, r5, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dca:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8003dce:	e750      	b.n	8003c72 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dd0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dd2:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dd6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dda:	f425 5540 	bic.w	r5, r5, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dde:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8003de2:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8003de4:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003de8:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8003dec:	e7ba      	b.n	8003d64 <HAL_TIM_PWM_ConfigChannel+0x154>
 8003dee:	bf00      	nop
 8003df0:	40012c00 	.word	0x40012c00

08003df4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003df4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003df8:	2a01      	cmp	r2, #1
 8003dfa:	d06e      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0xe6>
 8003dfc:	4603      	mov	r3, r0
{
 8003dfe:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003e00:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003e02:	2402      	movs	r4, #2
  tmpsmcr = htim->Instance->SMCR;
 8003e04:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(htim);
 8003e06:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0a:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003e0e:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e10:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 8003e14:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003e18:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003e1a:	680c      	ldr	r4, [r1, #0]
 8003e1c:	2c60      	cmp	r4, #96	@ 0x60
 8003e1e:	d076      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x11a>
 8003e20:	d811      	bhi.n	8003e46 <HAL_TIM_ConfigClockSource+0x52>
 8003e22:	2c40      	cmp	r4, #64	@ 0x40
 8003e24:	d05b      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0xea>
 8003e26:	d82e      	bhi.n	8003e86 <HAL_TIM_ConfigClockSource+0x92>
 8003e28:	2c20      	cmp	r4, #32
 8003e2a:	d004      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x42>
 8003e2c:	f200 8088 	bhi.w	8003f40 <HAL_TIM_ConfigClockSource+0x14c>
 8003e30:	f034 0110 	bics.w	r1, r4, #16
 8003e34:	d11f      	bne.n	8003e76 <HAL_TIM_ConfigClockSource+0x82>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e36:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e38:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e3c:	4321      	orrs	r1, r4
 8003e3e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e42:	6091      	str	r1, [r2, #8]
}
 8003e44:	e016      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8003e46:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003e4a:	d013      	beq.n	8003e74 <HAL_TIM_ConfigClockSource+0x80>
 8003e4c:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8003e50:	d033      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0xc6>
 8003e52:	2c70      	cmp	r4, #112	@ 0x70
 8003e54:	d10f      	bne.n	8003e76 <HAL_TIM_ConfigClockSource+0x82>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e56:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003e5a:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e5c:	4328      	orrs	r0, r5
 8003e5e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e60:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e64:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8003e68:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e6a:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003e6c:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e6e:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003e72:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e74:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e76:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003e78:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e7a:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003e82:	bc30      	pop	{r4, r5}
 8003e84:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003e86:	2c50      	cmp	r4, #80	@ 0x50
 8003e88:	d1f5      	bne.n	8003e76 <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 8003e8a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003e8c:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8003e8e:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e90:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003e94:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e96:	6a11      	ldr	r1, [r2, #32]
 8003e98:	f021 0101 	bic.w	r1, r1, #1
 8003e9c:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e9e:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ea0:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ea4:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003ea8:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003eaa:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003eac:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eae:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eb2:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8003eb6:	6091      	str	r1, [r2, #8]
}
 8003eb8:	e7dc      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eba:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003ebe:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ec0:	4328      	orrs	r0, r5
 8003ec2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec4:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ec8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8003ecc:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8003ece:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ed0:	6891      	ldr	r1, [r2, #8]
 8003ed2:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8003ed6:	6091      	str	r1, [r2, #8]
      break;
 8003ed8:	e7cc      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 8003eda:	2002      	movs	r0, #2
}
 8003edc:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8003ede:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003ee0:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8003ee2:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ee4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003ee8:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eea:	6a11      	ldr	r1, [r2, #32]
 8003eec:	f021 0101 	bic.w	r1, r1, #1
 8003ef0:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ef2:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ef4:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ef8:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003efc:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003efe:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003f00:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f02:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f06:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8003f0a:	6091      	str	r1, [r2, #8]
}
 8003f0c:	e7b2      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 8003f0e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003f10:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8003f12:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f14:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f18:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1c:	6a10      	ldr	r0, [r2, #32]
 8003f1e:	f020 0010 	bic.w	r0, r0, #16
 8003f22:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f24:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f26:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f2a:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003f2e:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8003f30:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003f32:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f34:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f38:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003f3c:	6091      	str	r1, [r2, #8]
}
 8003f3e:	e799      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8003f40:	2c30      	cmp	r4, #48	@ 0x30
 8003f42:	f43f af78 	beq.w	8003e36 <HAL_TIM_ConfigClockSource+0x42>
 8003f46:	e796      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x82>

08003f48 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003f48:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003f4c:	2a01      	cmp	r2, #1
 8003f4e:	d047      	beq.n	8003fe0 <HAL_TIM_SlaveConfigSynchro+0x98>
{
 8003f50:	b430      	push	{r4, r5}
 8003f52:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003f54:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003f56:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8003f58:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8003f5a:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003f62:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f64:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f66:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f6a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f6c:	4322      	orrs	r2, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f6e:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f72:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 8003f74:	2c50      	cmp	r4, #80	@ 0x50
  htim->Instance->SMCR = tmpsmcr;
 8003f76:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8003f78:	d057      	beq.n	800402a <HAL_TIM_SlaveConfigSynchro+0xe2>
 8003f7a:	d91f      	bls.n	8003fbc <HAL_TIM_SlaveConfigSynchro+0x74>
 8003f7c:	2c60      	cmp	r4, #96	@ 0x60
 8003f7e:	d031      	beq.n	8003fe4 <HAL_TIM_SlaveConfigSynchro+0x9c>
 8003f80:	2c70      	cmp	r4, #112	@ 0x70
 8003f82:	d124      	bne.n	8003fce <HAL_TIM_SlaveConfigSynchro+0x86>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f84:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8003f88:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f8a:	432a      	orrs	r2, r5
 8003f8c:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f8e:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f92:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003f96:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003f98:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8003f9a:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	2401      	movs	r4, #1
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f9e:	68c2      	ldr	r2, [r0, #12]
 8003fa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fa4:	60c2      	str	r2, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003fa6:	68c2      	ldr	r2, [r0, #12]
 8003fa8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003fac:	60c2      	str	r2, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003fae:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003fb2:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  return HAL_OK;
 8003fb6:	4608      	mov	r0, r1
}
 8003fb8:	bc30      	pop	{r4, r5}
 8003fba:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8003fbc:	2c40      	cmp	r4, #64	@ 0x40
 8003fbe:	d024      	beq.n	800400a <HAL_TIM_SlaveConfigSynchro+0xc2>
 8003fc0:	d805      	bhi.n	8003fce <HAL_TIM_SlaveConfigSynchro+0x86>
 8003fc2:	2c20      	cmp	r4, #32
 8003fc4:	d0e9      	beq.n	8003f9a <HAL_TIM_SlaveConfigSynchro+0x52>
 8003fc6:	d842      	bhi.n	800404e <HAL_TIM_SlaveConfigSynchro+0x106>
 8003fc8:	f034 0210 	bics.w	r2, r4, #16
 8003fcc:	d0e5      	beq.n	8003f9a <HAL_TIM_SlaveConfigSynchro+0x52>
    htim->State = HAL_TIM_STATE_READY;
 8003fce:	2201      	movs	r2, #1
    __HAL_UNLOCK(htim);
 8003fd0:	2100      	movs	r1, #0
    htim->State = HAL_TIM_STATE_READY;
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003fd6:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003fda:	4610      	mov	r0, r2
}
 8003fdc:	bc30      	pop	{r4, r5}
 8003fde:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003fe0:	2002      	movs	r0, #2
}
 8003fe2:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8003fe4:	6a02      	ldr	r2, [r0, #32]
                               sSlaveConfig->TriggerPolarity,
 8003fe6:	688d      	ldr	r5, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8003fe8:	690c      	ldr	r4, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fea:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff0:	f021 0110 	bic.w	r1, r1, #16
 8003ff4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff6:	6981      	ldr	r1, [r0, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ff8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ffc:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004000:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004004:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8004006:	6202      	str	r2, [r0, #32]
      break;
 8004008:	e7c7      	b.n	8003f9a <HAL_TIM_SlaveConfigSynchro+0x52>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800400a:	2d05      	cmp	r5, #5
 800400c:	d0df      	beq.n	8003fce <HAL_TIM_SlaveConfigSynchro+0x86>
      tmpccer = htim->Instance->CCER;
 800400e:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004010:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004012:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	6202      	str	r2, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800401a:	6982      	ldr	r2, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800401c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004020:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004024:	6182      	str	r2, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8004026:	6204      	str	r4, [r0, #32]
      break;
 8004028:	e7b7      	b.n	8003f9a <HAL_TIM_SlaveConfigSynchro+0x52>
                               sSlaveConfig->TriggerPolarity,
 800402a:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 800402c:	690c      	ldr	r4, [r1, #16]
  tmpccer = TIMx->CCER;
 800402e:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004030:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004034:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004036:	6a02      	ldr	r2, [r0, #32]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004040:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004044:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004048:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800404a:	6201      	str	r1, [r0, #32]
      break;
 800404c:	e7a5      	b.n	8003f9a <HAL_TIM_SlaveConfigSynchro+0x52>
  switch (sSlaveConfig->InputTrigger)
 800404e:	2c30      	cmp	r4, #48	@ 0x30
 8004050:	d0a3      	beq.n	8003f9a <HAL_TIM_SlaveConfigSynchro+0x52>
 8004052:	e7bc      	b.n	8003fce <HAL_TIM_SlaveConfigSynchro+0x86>

08004054 <TIM_Base_SetConfig>:
{
 8004054:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004056:	4e20      	ldr	r6, [pc, #128]	@ (80040d8 <TIM_Base_SetConfig+0x84>)
  tmpcr1 = TIMx->CR1;
 8004058:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800405a:	42b0      	cmp	r0, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800405c:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800405e:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004060:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004062:	d011      	beq.n	8004088 <TIM_Base_SetConfig+0x34>
 8004064:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004068:	d00e      	beq.n	8004088 <TIM_Base_SetConfig+0x34>
 800406a:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 800406e:	42b0      	cmp	r0, r6
 8004070:	d029      	beq.n	80040c6 <TIM_Base_SetConfig+0x72>
 8004072:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004076:	42b0      	cmp	r0, r6
 8004078:	d025      	beq.n	80040c6 <TIM_Base_SetConfig+0x72>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800407a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800407e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004080:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004082:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004084:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004086:	e013      	b.n	80040b0 <TIM_Base_SetConfig+0x5c>
    tmpcr1 |= Structure->CounterMode;
 8004088:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800408e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004090:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004096:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800409c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800409e:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a0:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <TIM_Base_SetConfig+0x84>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a2:	62c4      	str	r4, [r0, #44]	@ 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a4:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80040a6:	bf08      	it	eq
 80040a8:	690b      	ldreq	r3, [r1, #16]
  TIMx->PSC = Structure->Prescaler;
 80040aa:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80040ac:	bf08      	it	eq
 80040ae:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80040b0:	2301      	movs	r3, #1
 80040b2:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040b4:	6903      	ldr	r3, [r0, #16]
 80040b6:	07db      	lsls	r3, r3, #31
 80040b8:	d503      	bpl.n	80040c2 <TIM_Base_SetConfig+0x6e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040ba:	6903      	ldr	r3, [r0, #16]
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	6103      	str	r3, [r0, #16]
}
 80040c2:	bc70      	pop	{r4, r5, r6}
 80040c4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80040c6:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040cc:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 80040ce:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80040d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d4:	430b      	orrs	r3, r1
 80040d6:	e7d0      	b.n	800407a <TIM_Base_SetConfig+0x26>
 80040d8:	40012c00 	.word	0x40012c00

080040dc <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80040dc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040de:	6a02      	ldr	r2, [r0, #32]
{
 80040e0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e2:	f022 0210 	bic.w	r2, r2, #16
 80040e6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80040e8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80040ea:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ec:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040ee:	4d11      	ldr	r5, [pc, #68]	@ (8004134 <TIM_OC2_SetConfig+0x58>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040f0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040f8:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80040fa:	f023 0320 	bic.w	r3, r3, #32
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040fe:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004100:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004104:	d006      	beq.n	8004114 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 8004106:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004108:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800410a:	6182      	str	r2, [r0, #24]
}
 800410c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800410e:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004110:	6203      	str	r3, [r0, #32]
}
 8004112:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004114:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800411a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800411e:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004122:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004126:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800412c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004130:	e7e9      	b.n	8004106 <TIM_OC2_SetConfig+0x2a>
 8004132:	bf00      	nop
 8004134:	40012c00 	.word	0x40012c00

08004138 <TIM_TI1_SetConfig>:
{
 8004138:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 800413a:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413c:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800413e:	4e11      	ldr	r6, [pc, #68]	@ (8004184 <TIM_TI1_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004140:	f024 0401 	bic.w	r4, r4, #1
 8004144:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004146:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8004148:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800414a:	d00d      	beq.n	8004168 <TIM_TI1_SetConfig+0x30>
 800414c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004150:	d00a      	beq.n	8004168 <TIM_TI1_SetConfig+0x30>
 8004152:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8004156:	42b0      	cmp	r0, r6
 8004158:	d006      	beq.n	8004168 <TIM_TI1_SetConfig+0x30>
 800415a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800415e:	42b0      	cmp	r0, r6
 8004160:	d002      	beq.n	8004168 <TIM_TI1_SetConfig+0x30>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004162:	f044 0201 	orr.w	r2, r4, #1
 8004166:	e002      	b.n	800416e <TIM_TI1_SetConfig+0x36>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004168:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800416c:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800416e:	f025 040a 	bic.w	r4, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004172:	f001 010a 	and.w	r1, r1, #10
 8004176:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004178:	f363 1207 	bfi	r2, r3, #4, #4
  TIMx->CCMR1 = tmpccmr1;
 800417c:	6182      	str	r2, [r0, #24]
}
 800417e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8004180:	6201      	str	r1, [r0, #32]
}
 8004182:	4770      	bx	lr
 8004184:	40012c00 	.word	0x40012c00

08004188 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop

0800418c <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 800418c:	2800      	cmp	r0, #0
 800418e:	d05f      	beq.n	8004250 <HAL_TIMEx_HallSensor_Init+0xc4>
{
 8004190:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004192:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004196:	4604      	mov	r4, r0
 8004198:	460e      	mov	r6, r1
{
 800419a:	b088      	sub	sp, #32
  if (htim->State == HAL_TIM_STATE_RESET)
 800419c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d050      	beq.n	8004246 <HAL_TIMEx_HallSensor_Init+0xba>
  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a6:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80041b0:	f7ff ff50 	bl	8004054 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80041b4:	68b3      	ldr	r3, [r6, #8]
 80041b6:	6831      	ldr	r1, [r6, #0]
 80041b8:	6820      	ldr	r0, [r4, #0]
 80041ba:	2203      	movs	r2, #3
 80041bc:	f7ff ffbc 	bl	8004138 <TIM_TI1_SetConfig>
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80041c0:	2370      	movs	r3, #112	@ 0x70
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80041c2:	2500      	movs	r5, #0
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041c4:	6820      	ldr	r0, [r4, #0]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80041c6:	9301      	str	r3, [sp, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041c8:	6983      	ldr	r3, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80041ca:	68f2      	ldr	r2, [r6, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041cc:	f023 030c 	bic.w	r3, r3, #12
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80041d0:	6871      	ldr	r1, [r6, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041d2:	6183      	str	r3, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80041d4:	6983      	ldr	r3, [r0, #24]
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80041da:	6843      	ldr	r3, [r0, #4]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80041dc:	a901      	add	r1, sp, #4
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80041de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041e2:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80041e4:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80041e6:	9202      	str	r2, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80041e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ec:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80041ee:	6883      	ldr	r3, [r0, #8]
 80041f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041f4:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80041f6:	6883      	ldr	r3, [r0, #8]
 80041f8:	f023 0307 	bic.w	r3, r3, #7
 80041fc:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80041fe:	6883      	ldr	r3, [r0, #8]
 8004200:	f043 0304 	orr.w	r3, r3, #4
 8004204:	6083      	str	r3, [r0, #8]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004206:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800420a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800420e:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004210:	f7ff ff64 	bl	80040dc <TIM_OC2_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004214:	2301      	movs	r3, #1
  return HAL_OK;
 8004216:	4628      	mov	r0, r5
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004218:	6822      	ldr	r2, [r4, #0]
 800421a:	6851      	ldr	r1, [r2, #4]
 800421c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004220:	6051      	str	r1, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004222:	6851      	ldr	r1, [r2, #4]
 8004224:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 8004228:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800422a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800422e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004232:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004236:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800423a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 800423e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8004242:	b008      	add	sp, #32
 8004244:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004246:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 800424a:	f7ff ff9d 	bl	8004188 <HAL_TIMEx_HallSensor_MspInit>
 800424e:	e7a9      	b.n	80041a4 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8004250:	2001      	movs	r0, #1
}
 8004252:	4770      	bx	lr

08004254 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004254:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004258:	2a01      	cmp	r2, #1
 800425a:	d027      	beq.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800425c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425e:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004260:	681a      	ldr	r2, [r3, #0]
{
 8004262:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004268:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800426a:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426c:	4d10      	ldr	r5, [pc, #64]	@ (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800426e:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004272:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004274:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8004276:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8004278:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427a:	d009      	beq.n	8004290 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800427c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004280:	d006      	beq.n	8004290 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004282:	480c      	ldr	r0, [pc, #48]	@ (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004284:	4282      	cmp	r2, r0
 8004286:	d003      	beq.n	8004290 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004288:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800428c:	4282      	cmp	r2, r0
 800428e:	d104      	bne.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004290:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004292:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004296:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004298:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800429a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800429c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80042a2:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042a6:	4610      	mov	r0, r2
}
 80042a8:	bc30      	pop	{r4, r5}
 80042aa:	4770      	bx	lr
  __HAL_LOCK(htim);
 80042ac:	2002      	movs	r0, #2
}
 80042ae:	4770      	bx	lr
 80042b0:	40012c00 	.word	0x40012c00
 80042b4:	40000400 	.word	0x40000400

080042b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d023      	beq.n	8004308 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
 80042c0:	4602      	mov	r2, r0
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042c2:	e9d1 0302 	ldrd	r0, r3, [r1, #8]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80042c6:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042d0:	6848      	ldr	r0, [r1, #4]
 80042d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042d8:	6808      	ldr	r0, [r1, #0]
 80042da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042de:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042e0:	6908      	ldr	r0, [r1, #16]
 80042e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
{
 80042e6:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042e8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042ea:	694c      	ldr	r4, [r1, #20]
 80042ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042f0:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042f2:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 80042f4:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042fa:	4303      	orrs	r3, r0
  htim->Instance->BDTR = tmpbdtr;
 80042fc:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80042fe:	f882 c03c 	strb.w	ip, [r2, #60]	@ 0x3c

  return HAL_OK;
 8004302:	4660      	mov	r0, ip
}
 8004304:	bc10      	pop	{r4}
 8004306:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004308:	2002      	movs	r0, #2
}
 800430a:	4770      	bx	lr

0800430c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800430c:	2800      	cmp	r0, #0
 800430e:	d065      	beq.n	80043dc <HAL_UART_Init+0xd0>
{
 8004310:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004312:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004316:	4604      	mov	r4, r0
 8004318:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800431c:	2b00      	cmp	r3, #0
 800431e:	d055      	beq.n	80043cc <HAL_UART_Init+0xc0>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004320:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8004324:	2124      	movs	r1, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8004326:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004328:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800432c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800432e:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8004330:	f421 5100 	bic.w	r1, r1, #8192	@ 0x2000
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004334:	69a5      	ldr	r5, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004336:	4302      	orrs	r2, r0
 8004338:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 800433a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800433c:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800433e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004340:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8004344:	4331      	orrs	r1, r6
 8004346:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004348:	68d9      	ldr	r1, [r3, #12]


  if(huart->Instance == USART1)
 800434a:	4825      	ldr	r0, [pc, #148]	@ (80043e0 <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR1,
 800434c:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8004350:	f021 010c 	bic.w	r1, r1, #12
 8004354:	430a      	orrs	r2, r1
 8004356:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004358:	695a      	ldr	r2, [r3, #20]
  if(huart->Instance == USART1)
 800435a:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800435c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004360:	ea42 0205 	orr.w	r2, r2, r5
 8004364:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8004366:	d036      	beq.n	80043d6 <HAL_UART_Init+0xca>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004368:	f7ff fad6 	bl	8003918 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800436c:	6862      	ldr	r2, [r4, #4]
 800436e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004372:	0092      	lsls	r2, r2, #2
 8004374:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004378:	fbb3 f3f2 	udiv	r3, r3, r2
 800437c:	f04f 0e64 	mov.w	lr, #100	@ 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004380:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004382:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004386:	4817      	ldr	r0, [pc, #92]	@ (80043e4 <HAL_UART_Init+0xd8>)
 8004388:	6821      	ldr	r1, [r4, #0]
 800438a:	fba0 6203 	umull	r6, r2, r0, r3
 800438e:	0952      	lsrs	r2, r2, #5
 8004390:	fb0e 3312 	mls	r3, lr, r2, r3
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	3332      	adds	r3, #50	@ 0x32
 8004398:	fba0 0303 	umull	r0, r3, r0, r3
 800439c:	0112      	lsls	r2, r2, #4
 800439e:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 80043a2:	608a      	str	r2, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a4:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 80043a6:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80043ac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ae:	694b      	ldr	r3, [r1, #20]
 80043b0:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80043b4:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 80043b6:	68cb      	ldr	r3, [r1, #12]
 80043b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80043bc:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043be:	6465      	str	r5, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043c0:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043c4:	f884 c042 	strb.w	ip, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c8:	6365      	str	r5, [r4, #52]	@ 0x34
}
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80043cc:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80043d0:	f7fd fe5e 	bl	8002090 <HAL_UART_MspInit>
 80043d4:	e7a4      	b.n	8004320 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 80043d6:	f7ff faaf 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 80043da:	e7c7      	b.n	800436c <HAL_UART_Init+0x60>
    return HAL_ERROR;
 80043dc:	2001      	movs	r0, #1
}
 80043de:	4770      	bx	lr
 80043e0:	40013800 	.word	0x40013800
 80043e4:	51eb851f 	.word	0x51eb851f

080043e8 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80043e8:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80043ea:	8840      	ldrh	r0, [r0, #2]
 80043ec:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80043f0:	0c00      	lsrs	r0, r0, #16
 80043f2:	4770      	bx	lr

080043f4 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80043f4:	140b      	asrs	r3, r1, #16
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
            ( int32_t )( Vqd.d ) * Vqd.d;
 80043f6:	fb03 fc03 	mul.w	ip, r3, r3

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80043fa:	8802      	ldrh	r2, [r0, #0]
 80043fc:	b209      	sxth	r1, r1
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80043fe:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004402:	fb02 f202 	mul.w	r2, r2, r2
 8004406:	4594      	cmp	ip, r2
{
 8004408:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800440a:	d919      	bls.n	8004440 <Circle_Limitation+0x4c>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 800440c:	f890 20b2 	ldrb.w	r2, [r0, #178]	@ 0xb2
 8004410:	ebc2 621c 	rsb	r2, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	eb00 0042 	add.w	r0, r0, r2, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 800441a:	8882      	ldrh	r2, [r0, #4]
 800441c:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8004420:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004424:	2900      	cmp	r1, #0
 8004426:	bfbc      	itt	lt
 8004428:	f501 41ff 	addlt.w	r1, r1, #32640	@ 0x7f80
 800442c:	317f      	addlt	r1, #127	@ 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800442e:	2b00      	cmp	r3, #0
 8004430:	bfbc      	itt	lt
 8004432:	f503 43ff 	addlt.w	r3, r3, #32640	@ 0x7f80
 8004436:	337f      	addlt	r3, #127	@ 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004438:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800443c:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8004440:	2000      	movs	r0, #0
 8004442:	b289      	uxth	r1, r1
 8004444:	b29b      	uxth	r3, r3
 8004446:	f361 000f 	bfi	r0, r1, #0, #16
 800444a:	f363 401f 	bfi	r0, r3, #16, #16
}
 800444e:	b004      	add	sp, #16
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop

08004454 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8004454:	4408      	add	r0, r1
 8004456:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
}
 800445a:	4770      	bx	lr

0800445c <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 800445c:	4408      	add	r0, r1
}
 800445e:	f890 0030 	ldrb.w	r0, [r0, #48]	@ 0x30
 8004462:	4770      	bx	lr

08004464 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8004464:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8004468:	8642      	strh	r2, [r0, #50]	@ 0x32
}
 800446a:	4770      	bx	lr

0800446c <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 800446c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
}
 8004470:	f9b0 0032 	ldrsh.w	r0, [r0, #50]	@ 0x32
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop

08004478 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 800447c:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 800447e:	f8c0 3096 	str.w	r3, [r0, #150]	@ 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8004482:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8004486:	f8a0 311b 	strh.w	r3, [r0, #283]	@ 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 800448a:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
}
 800448e:	4770      	bx	lr

08004490 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8004490:	b120      	cbz	r0, 800449c <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8004492:	6083      	str	r3, [r0, #8]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8004494:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8004498:	9b00      	ldr	r3, [sp, #0]
 800449a:	60c3      	str	r3, [r0, #12]
  }
}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop

080044a0 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 80044a0:	b178      	cbz	r0, 80044c2 <FCP_CalcCRC+0x22>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 80044a2:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 80044a4:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 80044a6:	440b      	add	r3, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 80044a8:	b139      	cbz	r1, 80044ba <FCP_CalcCRC+0x1a>
 80044aa:	3001      	adds	r0, #1
 80044ac:	4401      	add	r1, r0
    {
      nSum += pFrame->Buffer[idx];
 80044ae:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80044b2:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80044b4:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 80044b6:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80044b8:	d1f9      	bne.n	80044ae <FCP_CalcCRC+0xe>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80044ba:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 80044be:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  }

  return nCRC ;
}
 80044c2:	4770      	bx	lr

080044c4 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 80044c4:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
                                     pHandle->_Super.bElToMecRatio;
 80044c6:	f890 c001 	ldrb.w	ip, [r0, #1]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80044ca:	f8b0 e016 	ldrh.w	lr, [r0, #22]
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 80044ce:	8a83      	ldrh	r3, [r0, #20]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80044d0:	fb0e fe0c 	mul.w	lr, lr, ip
  hMaxReliableElSpeedUnit *= 2u;
 80044d4:	fb03 fc0c 	mul.w	ip, r3, ip
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80044d8:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	@ 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80044dc:	fa1f fe8e 	uxth.w	lr, lr
  hMaxReliableElSpeedUnit *= 2u;
 80044e0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80044e4:	0c11      	lsrs	r1, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 80044e6:	f1be 0f03 	cmp.w	lr, #3
  hMaxReliableElSpeedUnit *= 2u;
 80044ea:	fa1f fc8c 	uxth.w	ip, ip
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80044ee:	f8a0 10c2 	strh.w	r1, [r0, #194]	@ 0xc2
  if ( hMinReliableElSpeedUnit == 0u )
 80044f2:	d96d      	bls.n	80045d0 <HALL_Init+0x10c>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 80044f4:	f242 7410 	movw	r4, #10000	@ 0x2710
 80044f8:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 80044fc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8004500:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8004504:	fbb4 f4fe 	udiv	r4, r4, lr
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004508:	4625      	mov	r5, r4
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 800450a:	b2a4      	uxth	r4, r4
 800450c:	f8a0 40c0 	strh.w	r4, [r0, #192]	@ 0xc0
  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004510:	4c31      	ldr	r4, [pc, #196]	@ (80045d8 <HALL_Init+0x114>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
                       / hMaxReliableElSpeedUnit);

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004512:	f890 e0c6 	ldrb.w	lr, [r0, #198]	@ 0xc6
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004516:	fba4 4202 	umull	r4, r2, r4, r2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800451a:	8b44      	ldrh	r4, [r0, #26]
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 800451c:	0892      	lsrs	r2, r2, #2
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 800451e:	fb04 fe0e 	mul.w	lr, r4, lr
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8004522:	fbb2 f4f4 	udiv	r4, r2, r4
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004526:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800452a:	0052      	lsls	r2, r2, #1
                       / hMaxReliableElSpeedUnit);
 800452c:	fbb2 f2fc 	udiv	r2, r2, ip
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004530:	fb05 f101 	mul.w	r1, r5, r1
                                   pHandle->SpeedSamplingFreqHz ) - 1u;

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;
 8004534:	2501      	movs	r5, #1
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004536:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 800453a:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
  pHandle->SensorIsReliable = true;
 800453c:	f880 5049 	strb.w	r5, [r0, #73]	@ 0x49
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004540:	fbbe f2f2 	udiv	r2, lr, r2
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8004544:	2500      	movs	r5, #0
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8004546:	3a01      	subs	r2, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004548:	f8a0 20c4 	strh.w	r2, [r0, #196]	@ 0xc4
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 800454c:	4a23      	ldr	r2, [pc, #140]	@ (80045dc <HALL_Init+0x118>)
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 800454e:	f8a0 c0b0 	strh.w	ip, [r0, #176]	@ 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004552:	fba2 1201 	umull	r1, r2, r2, r1
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8004556:	69c1      	ldr	r1, [r0, #28]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004558:	0992      	lsrs	r2, r2, #6
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800455a:	fb01 f404 	mul.w	r4, r1, r4
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800455e:	0411      	lsls	r1, r2, #16
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004560:	f8c0 40b4 	str.w	r4, [r0, #180]	@ 0xb4
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8004564:	f8c0 10b8 	str.w	r1, [r0, #184]	@ 0xb8
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004568:	6999      	ldr	r1, [r3, #24]
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 800456a:	f890 4048 	ldrb.w	r4, [r0, #72]	@ 0x48
 800456e:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004572:	f8a0 20ae 	strh.w	r2, [r0, #174]	@ 0xae
 8004576:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800457a:	b292      	uxth	r2, r2
 800457c:	6199      	str	r1, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 800457e:	629a      	str	r2, [r3, #40]	@ 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	615a      	str	r2, [r3, #20]
  WRITE_REG (TIMx->SR, 0);
 8004588:	611d      	str	r5, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	f042 0204 	orr.w	r2, r2, #4
 8004590:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	f042 0202 	orr.w	r2, r2, #2
 8004598:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 80045a2:	625d      	str	r5, [r3, #36]	@ 0x24
  SET_BIT(TIMx->CCER, Channels);
 80045a4:	6a1a      	ldr	r2, [r3, #32]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 80045b4:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 80045b8:	b14a      	cbz	r2, 80045ce <HALL_Init+0x10a>
 80045ba:	f100 034c 	add.w	r3, r0, #76	@ 0x4c
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 80045be:	f8d0 10b8 	ldr.w	r1, [r0, #184]	@ 0xb8
 80045c2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80045c6:	f843 1f04 	str.w	r1, [r3, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d1fb      	bne.n	80045c6 <HALL_Init+0x102>
  }
}
 80045ce:	bd30      	pop	{r4, r5, pc}
 80045d0:	2596      	movs	r5, #150	@ 0x96
    pHandle->HallTimeout = 150u;
 80045d2:	462c      	mov	r4, r5
 80045d4:	e79a      	b.n	800450c <HALL_Init+0x48>
 80045d6:	bf00      	nop
 80045d8:	aaaaaaab 	.word	0xaaaaaaab
 80045dc:	10624dd3 	.word	0x10624dd3

080045e0 <HALL_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
 80045e0:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->TIMx;

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 80045e2:	2300      	movs	r3, #0
  pHandle->RatioInc = false;

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;
 80045e4:	2401      	movs	r4, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80045e6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80045e8:	6b86      	ldr	r6, [r0, #56]	@ 0x38
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80045ea:	68d1      	ldr	r1, [r2, #12]
 80045ec:	f021 0102 	bic.w	r1, r1, #2
 80045f0:	60d1      	str	r1, [r2, #12]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 80045f2:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	@ 0xae
  pHandle->RatioDec = false;
 80045f6:	f880 304a 	strb.w	r3, [r0, #74]	@ 0x4a
  pHandle->Direction = POSITIVE;
 80045fa:	f880 40a2 	strb.w	r4, [r0, #162]	@ 0xa2
  pHandle->RatioInc = false;
 80045fe:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 8004602:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
  pHandle->FirstCapt = 0u;
 8004606:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 800460a:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 800460c:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  pHandle->SensorIsReliable = true;
 8004610:	f880 4049 	strb.w	r4, [r0, #73]	@ 0x49
  pHandle->OVFCounter = 0u;
 8004614:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
  pHandle->_Super.hMecAccelUnitP = 0;
 8004618:	8243      	strh	r3, [r0, #18]
  pHandle->CompSpeed = 0;
 800461a:	f8a0 30ac 	strh.w	r3, [r0, #172]	@ 0xac
  WRITE_REG(TIMx->PSC, Prescaler);
 800461e:	6291      	str	r1, [r2, #40]	@ 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8004620:	6253      	str	r3, [r2, #36]	@ 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004622:	6811      	ldr	r1, [r2, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8004624:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004626:	4321      	orrs	r1, r4
 8004628:	6011      	str	r1, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800462a:	68d1      	ldr	r1, [r2, #12]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800462c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800462e:	f041 0102 	orr.w	r1, r1, #2
 8004632:	60d1      	str	r1, [r2, #12]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004634:	f890 7020 	ldrb.w	r7, [r0, #32]
 8004638:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 800463a:	e9d0 5210 	ldrd	r5, r2, [r0, #64]	@ 0x40
 800463e:	0a1b      	lsrs	r3, r3, #8
 8004640:	0a12      	lsrs	r2, r2, #8
 8004642:	0a09      	lsrs	r1, r1, #8
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004644:	bb17      	cbnz	r7, 800468c <HALL_Clear+0xac>
 8004646:	68ad      	ldr	r5, [r5, #8]
 8004648:	ea22 0205 	bic.w	r2, r2, r5
 800464c:	68b5      	ldr	r5, [r6, #8]
 800464e:	b292      	uxth	r2, r2
 8004650:	ea23 0305 	bic.w	r3, r3, r5
 8004654:	b29b      	uxth	r3, r3
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	fab2 f282 	clz	r2, r2
 800465e:	68a4      	ldr	r4, [r4, #8]
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	ea21 0104 	bic.w	r1, r1, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	0952      	lsrs	r2, r2, #5
 800466a:	b289      	uxth	r1, r1
 800466c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004670:	2900      	cmp	r1, #0
 8004672:	bf08      	it	eq
 8004674:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 8004678:	1e5a      	subs	r2, r3, #1
 800467a:	f880 30a6 	strb.w	r3, [r0, #166]	@ 0xa6
 800467e:	2a05      	cmp	r2, #5
 8004680:	d85c      	bhi.n	800473c <HALL_Clear+0x15c>
 8004682:	e8df f002 	tbb	[pc, r2]
 8004686:	3329      	.short	0x3329
 8004688:	1f51473d 	.word	0x1f51473d
 800468c:	68b6      	ldr	r6, [r6, #8]
 800468e:	68ad      	ldr	r5, [r5, #8]
 8004690:	68a4      	ldr	r4, [r4, #8]
 8004692:	ea23 0306 	bic.w	r3, r3, r6
 8004696:	ea22 0205 	bic.w	r2, r2, r5
 800469a:	b29b      	uxth	r3, r3
 800469c:	ea21 0104 	bic.w	r1, r1, r4
 80046a0:	fab3 f383 	clz	r3, r3
 80046a4:	b292      	uxth	r2, r2
 80046a6:	b289      	uxth	r1, r1
 80046a8:	fab2 f282 	clz	r2, r2
 80046ac:	fab1 f181 	clz	r1, r1
 80046b0:	095b      	lsrs	r3, r3, #5
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	0952      	lsrs	r2, r2, #5
 80046b6:	0949      	lsrs	r1, r1, #5
 80046b8:	f083 0304 	eor.w	r3, r3, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80046bc:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 80046c0:	430b      	orrs	r3, r1
 80046c2:	e7d9      	b.n	8004678 <HALL_Clear+0x98>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 80046c4:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80046c6:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 80046ca:	3b3f      	subs	r3, #63	@ 0x3f
 80046cc:	b21b      	sxth	r3, r3
 80046ce:	8083      	strh	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80046d0:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 80046d4:	bcf0      	pop	{r4, r5, r6, r7}
 80046d6:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80046d8:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
}
 80046da:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80046dc:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80046e0:	333f      	adds	r3, #63	@ 0x3f
 80046e2:	b21b      	sxth	r3, r3
 80046e4:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80046e6:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 80046ea:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80046ec:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
}
 80046ee:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80046f0:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 80046f4:	3b2a      	subs	r3, #42	@ 0x2a
 80046f6:	b21b      	sxth	r3, r3
 80046f8:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80046fa:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 80046fe:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004700:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
}
 8004702:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004704:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 8004708:	332a      	adds	r3, #42	@ 0x2a
 800470a:	b21b      	sxth	r3, r3
 800470c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800470e:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8004712:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8004714:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
}
 8004716:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8004718:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 800471c:	3b15      	subs	r3, #21
 800471e:	b21b      	sxth	r3, r3
 8004720:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004722:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8004726:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8004728:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
}
 800472a:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 800472c:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8004730:	3315      	adds	r3, #21
 8004732:	b21b      	sxth	r3, r3
 8004734:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004736:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 800473a:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 800473c:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800473e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 8004742:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
      break;
 8004746:	e7c3      	b.n	80046d0 <HALL_Clear+0xf0>

08004748 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8004748:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800474c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
{
 8004750:	4603      	mov	r3, r0
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8004752:	428a      	cmp	r2, r1
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8004754:	8880      	ldrh	r0, [r0, #4]
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8004756:	d00e      	beq.n	8004776 <HALL_CalcElAngle+0x2e>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8004758:	f8b3 c0aa 	ldrh.w	ip, [r3, #170]	@ 0xaa
 800475c:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800475e:	4408      	add	r0, r1
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8004760:	4461      	add	r1, ip
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8004762:	f8b3 c0ac 	ldrh.w	ip, [r3, #172]	@ 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8004766:	f8a3 10aa 	strh.w	r1, [r3, #170]	@ 0xaa
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800476a:	4460      	add	r0, ip
 800476c:	b200      	sxth	r0, r0
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800476e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8004772:	8098      	strh	r0, [r3, #4]
}
 8004774:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8004776:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 800477a:	4410      	add	r0, r2
 800477c:	b200      	sxth	r0, r0
 800477e:	8098      	strh	r0, [r3, #4]
}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop

08004784 <HALL_CalcAvrgMecSpeedUnit>:
{
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 8004788:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
{
 800478c:	460d      	mov	r5, r1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800478e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  if ( pHandle->SensorIsReliable )
 8004790:	b180      	cbz	r0, 80047b4 <HALL_CalcAvrgMecSpeedUnit+0x30>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8004794:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	@ 0xae
 8004798:	429a      	cmp	r2, r3
 800479a:	d812      	bhi.n	80047c2 <HALL_CalcAvrgMecSpeedUnit+0x3e>
      pHandle->_Super.hElSpeedDpp = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	81e3      	strh	r3, [r4, #14]
            pHandle->CompSpeed = 0;
 80047a0:	2300      	movs	r3, #0
      *hMecSpeedUnit = 0;
 80047a2:	802b      	strh	r3, [r5, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 80047a4:	4629      	mov	r1, r5
 80047a6:	4620      	mov	r0, r4
 80047a8:	f001 f8c4 	bl	8005934 <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80047ac:	f9b5 3000 	ldrsh.w	r3, [r5]
 80047b0:	81a3      	strh	r3, [r4, #12]
}
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
    *hMecSpeedUnit = 0;
 80047b4:	4603      	mov	r3, r0
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80047b6:	78e2      	ldrb	r2, [r4, #3]
    pHandle->_Super.hElSpeedDpp = 0;
 80047b8:	81e0      	strh	r0, [r4, #14]
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80047ba:	7022      	strb	r2, [r4, #0]
    *hMecSpeedUnit = 0;
 80047bc:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80047be:	81a3      	strh	r3, [r4, #12]
}
 80047c0:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 80047c2:	f9b4 20a4 	ldrsh.w	r2, [r4, #164]	@ 0xa4
 80047c6:	81e2      	strh	r2, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 80047c8:	2a00      	cmp	r2, #0
 80047ca:	d0e9      	beq.n	80047a0 <HALL_CalcAvrgMecSpeedUnit+0x1c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80047cc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d01f      	beq.n	8004814 <HALL_CalcAvrgMecSpeedUnit+0x90>
          if (pHandle->HallMtpa == true)
 80047d4:	f894 30c7 	ldrb.w	r3, [r4, #199]	@ 0xc7
 80047d8:	b9d3      	cbnz	r3, 8004810 <HALL_CalcAvrgMecSpeedUnit+0x8c>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80047da:	88a1      	ldrh	r1, [r4, #4]
 80047dc:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80047e0:	1a5b      	subs	r3, r3, r1
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 80047e2:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	@ 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80047e6:	b21b      	sxth	r3, r3
            pHandle->CompSpeed = ( int16_t )
 80047e8:	fb93 f1f1 	sdiv	r1, r3, r1
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80047ec:	f8a4 30a8 	strh.w	r3, [r4, #168]	@ 0xa8
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80047f0:	8b63      	ldrh	r3, [r4, #26]
 80047f2:	f8a4 10ac 	strh.w	r1, [r4, #172]	@ 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80047f6:	fb02 f303 	mul.w	r3, r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80047fa:	69e1      	ldr	r1, [r4, #28]
 80047fc:	7862      	ldrb	r2, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80047fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8004802:	fb01 f202 	mul.w	r2, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 800480c:	b21b      	sxth	r3, r3
 800480e:	e7c8      	b.n	80047a2 <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 8004810:	2100      	movs	r1, #0
 8004812:	e7ed      	b.n	80047f0 <HALL_CalcAvrgMecSpeedUnit+0x6c>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 8004814:	f9b4 30b0 	ldrsh.w	r3, [r4, #176]	@ 0xb0
 8004818:	e7c3      	b.n	80047a2 <HALL_CalcAvrgMecSpeedUnit+0x1e>
 800481a:	bf00      	nop

0800481c <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 800481c:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
 8004820:	2b00      	cmp	r3, #0
 8004822:	d05a      	beq.n	80048da <HALL_TIMx_CC_IRQHandler+0xbe>
{
 8004824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004826:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8004828:	f890 5020 	ldrb.w	r5, [r0, #32]
 800482c:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8004830:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    bPrevHallState = pHandle->HallState;
 8004832:	f890 20a6 	ldrb.w	r2, [r0, #166]	@ 0xa6
 8004836:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 800483a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    PrevDirection = pHandle->Direction;
 800483c:	f990 10a2 	ldrsb.w	r1, [r0, #162]	@ 0xa2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8004840:	6b87      	ldr	r7, [r0, #56]	@ 0x38
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004842:	6c06      	ldr	r6, [r0, #64]	@ 0x40
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8004844:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004846:	0a1b      	lsrs	r3, r3, #8
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8004848:	b35d      	cbz	r5, 80048a2 <HALL_TIMx_CC_IRQHandler+0x86>
 800484a:	68bd      	ldr	r5, [r7, #8]
 800484c:	ea23 0305 	bic.w	r3, r3, r5
 8004850:	68b5      	ldr	r5, [r6, #8]
 8004852:	68a4      	ldr	r4, [r4, #8]
 8004854:	ea2e 0e05 	bic.w	lr, lr, r5
 8004858:	ea2c 0c04 	bic.w	ip, ip, r4
 800485c:	b29b      	uxth	r3, r3
 800485e:	fab3 f383 	clz	r3, r3
 8004862:	fa1f fe8e 	uxth.w	lr, lr
 8004866:	fa1f fc8c 	uxth.w	ip, ip
 800486a:	fabe fe8e 	clz	lr, lr
 800486e:	fabc fc8c 	clz	ip, ip
 8004872:	095b      	lsrs	r3, r3, #5
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800487a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800487e:	f083 0304 	eor.w	r3, r3, #4
 8004882:	ea4c 0c4e 	orr.w	ip, ip, lr, lsl #1
 8004886:	ea4c 0303 	orr.w	r3, ip, r3
 800488a:	f880 30a6 	strb.w	r3, [r0, #166]	@ 0xa6
    switch ( pHandle->HallState )
 800488e:	3b01      	subs	r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004890:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
    switch ( pHandle->HallState )
 8004892:	2b05      	cmp	r3, #5
 8004894:	f200 8159 	bhi.w	8004b4a <HALL_TIMx_CC_IRQHandler+0x32e>
 8004898:	e8df f003 	tbb	[pc, r3]
 800489c:	3f4b5a73 	.word	0x3f4b5a73
 80048a0:	2130      	.short	0x2130
 80048a2:	68b5      	ldr	r5, [r6, #8]
 80048a4:	ea2e 0e05 	bic.w	lr, lr, r5
 80048a8:	68bd      	ldr	r5, [r7, #8]
 80048aa:	fa1f fe8e 	uxth.w	lr, lr
 80048ae:	ea23 0305 	bic.w	r3, r3, r5
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	fab3 f383 	clz	r3, r3
 80048b8:	fabe fe8e 	clz	lr, lr
 80048bc:	68a4      	ldr	r4, [r4, #8]
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	ea2c 0404 	bic.w	r4, ip, r4
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80048ca:	b2a4      	uxth	r4, r4
 80048cc:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 80048d0:	2c00      	cmp	r4, #0
 80048d2:	bf08      	it	eq
 80048d4:	f043 0301 	orreq.w	r3, r3, #1
 80048d8:	e7d7      	b.n	800488a <HALL_TIMx_CC_IRQHandler+0x6e>
}
 80048da:	2000      	movs	r0, #0
 80048dc:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 80048de:	2a02      	cmp	r2, #2
 80048e0:	d07e      	beq.n	80049e0 <HALL_TIMx_CC_IRQHandler+0x1c4>
        else if ( bPrevHallState == STATE_4 )
 80048e2:	2a04      	cmp	r2, #4
 80048e4:	d152      	bne.n	800498c <HALL_TIMx_CC_IRQHandler+0x170>
          pHandle->Direction = NEGATIVE;
 80048e6:	25ff      	movs	r5, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80048e8:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80048ea:	f04f 32ff 	mov.w	r2, #4294967295
 80048ee:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
 80048f2:	3b2a      	subs	r3, #42	@ 0x2a
 80048f4:	b21b      	sxth	r3, r3
          pHandle->Direction = NEGATIVE;
 80048f6:	f880 50a2 	strb.w	r5, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80048fa:	e037      	b.n	800496c <HALL_TIMx_CC_IRQHandler+0x150>
        if ( bPrevHallState == STATE_4 )
 80048fc:	2a04      	cmp	r2, #4
 80048fe:	d058      	beq.n	80049b2 <HALL_TIMx_CC_IRQHandler+0x196>
        else if ( bPrevHallState == STATE_1 )
 8004900:	2a01      	cmp	r2, #1
 8004902:	d143      	bne.n	800498c <HALL_TIMx_CC_IRQHandler+0x170>
          pHandle->Direction = NEGATIVE;
 8004904:	25ff      	movs	r5, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8004906:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8004908:	f04f 32ff 	mov.w	r2, #4294967295
 800490c:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
 8004910:	332a      	adds	r3, #42	@ 0x2a
 8004912:	b21b      	sxth	r3, r3
          pHandle->Direction = NEGATIVE;
 8004914:	f880 50a2 	strb.w	r5, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8004918:	e028      	b.n	800496c <HALL_TIMx_CC_IRQHandler+0x150>
        if ( bPrevHallState == STATE_6 )
 800491a:	2a06      	cmp	r2, #6
 800491c:	d057      	beq.n	80049ce <HALL_TIMx_CC_IRQHandler+0x1b2>
        else if ( bPrevHallState == STATE_5 )
 800491e:	2a05      	cmp	r2, #5
 8004920:	d134      	bne.n	800498c <HALL_TIMx_CC_IRQHandler+0x170>
          pHandle->Direction = NEGATIVE;
 8004922:	25ff      	movs	r5, #255	@ 0xff
 8004924:	f04f 32ff 	mov.w	r2, #4294967295
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8004928:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
          pHandle->Direction = NEGATIVE;
 800492c:	f880 50a2 	strb.w	r5, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8004930:	e01c      	b.n	800496c <HALL_TIMx_CC_IRQHandler+0x150>
        if ( bPrevHallState == STATE_1 )
 8004932:	2a01      	cmp	r2, #1
 8004934:	d043      	beq.n	80049be <HALL_TIMx_CC_IRQHandler+0x1a2>
        else if ( bPrevHallState == STATE_2 )
 8004936:	2a02      	cmp	r2, #2
 8004938:	d128      	bne.n	800498c <HALL_TIMx_CC_IRQHandler+0x170>
          pHandle->Direction = NEGATIVE;
 800493a:	25ff      	movs	r5, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800493c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800493e:	f04f 32ff 	mov.w	r2, #4294967295
 8004942:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8004946:	337f      	adds	r3, #127	@ 0x7f
 8004948:	b21b      	sxth	r3, r3
          pHandle->Direction = NEGATIVE;
 800494a:	f880 50a2 	strb.w	r5, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800494e:	e00d      	b.n	800496c <HALL_TIMx_CC_IRQHandler+0x150>
        if ( bPrevHallState == STATE_3 )
 8004950:	2a03      	cmp	r2, #3
 8004952:	d04e      	beq.n	80049f2 <HALL_TIMx_CC_IRQHandler+0x1d6>
        else if ( bPrevHallState == STATE_6 )
 8004954:	2a06      	cmp	r2, #6
 8004956:	d119      	bne.n	800498c <HALL_TIMx_CC_IRQHandler+0x170>
          pHandle->Direction = NEGATIVE;
 8004958:	25ff      	movs	r5, #255	@ 0xff
 800495a:	f04f 32ff 	mov.w	r2, #4294967295
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800495e:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
          pHandle->Direction = NEGATIVE;
 8004960:	f880 50a2 	strb.w	r5, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004964:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
 8004968:	3b55      	subs	r3, #85	@ 0x55
 800496a:	b21b      	sxth	r3, r3
    if (pHandle->Direction != PrevDirection)
 800496c:	4291      	cmp	r1, r2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800496e:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
    if (pHandle->Direction != PrevDirection)
 8004972:	d004      	beq.n	800497e <HALL_TIMx_CC_IRQHandler+0x162>
      pHandle->BufferFilled = 0 ;
 8004974:	2300      	movs	r3, #0
 8004976:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
      pHandle->SpeedFIFOIdx = 0;
 800497a:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
 800497e:	4611      	mov	r1, r2
 8004980:	e004      	b.n	800498c <HALL_TIMx_CC_IRQHandler+0x170>
        if ( bPrevHallState == STATE_5 )
 8004982:	2a05      	cmp	r2, #5
 8004984:	d03e      	beq.n	8004a04 <HALL_TIMx_CC_IRQHandler+0x1e8>
        else if ( bPrevHallState == STATE_3 )
 8004986:	2a03      	cmp	r2, #3
 8004988:	f000 80d4 	beq.w	8004b34 <HALL_TIMx_CC_IRQHandler+0x318>
    if (pHandle->HallMtpa == true)
 800498c:	f890 30c7 	ldrb.w	r3, [r0, #199]	@ 0xc7
 8004990:	b113      	cbz	r3, 8004998 <HALL_TIMx_CC_IRQHandler+0x17c>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8004992:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	@ 0xaa
 8004996:	8083      	strh	r3, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 8004998:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d13a      	bne.n	8004a16 <HALL_TIMx_CC_IRQHandler+0x1fa>
      pHandle->FirstCapt++;
 80049a0:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 80049a4:	3301      	adds	r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80049ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
}
 80049ae:	2000      	movs	r0, #0
 80049b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pHandle->Direction = POSITIVE;
 80049b2:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80049b4:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 80049b8:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80049bc:	e7d6      	b.n	800496c <HALL_TIMx_CC_IRQHandler+0x150>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80049be:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 80049c0:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80049c4:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
 80049c8:	3355      	adds	r3, #85	@ 0x55
 80049ca:	b21b      	sxth	r3, r3
 80049cc:	e7ce      	b.n	800496c <HALL_TIMx_CC_IRQHandler+0x150>
          pHandle->Direction = POSITIVE;
 80049ce:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80049d0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 80049d2:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80049d6:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
 80049da:	3b2a      	subs	r3, #42	@ 0x2a
 80049dc:	b21b      	sxth	r3, r3
 80049de:	e7c5      	b.n	800496c <HALL_TIMx_CC_IRQHandler+0x150>
          pHandle->Direction = POSITIVE;
 80049e0:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80049e2:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 80049e4:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80049e8:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
 80049ec:	3b55      	subs	r3, #85	@ 0x55
 80049ee:	b21b      	sxth	r3, r3
 80049f0:	e7bc      	b.n	800496c <HALL_TIMx_CC_IRQHandler+0x150>
          pHandle->Direction = POSITIVE;
 80049f2:	2201      	movs	r2, #1
                                                  + S16_60_PHASE_SHIFT );
 80049f4:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 80049f6:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
                                                  + S16_60_PHASE_SHIFT );
 80049fa:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80049fe:	337f      	adds	r3, #127	@ 0x7f
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8004a00:	b21b      	sxth	r3, r3
 8004a02:	e7b3      	b.n	800496c <HALL_TIMx_CC_IRQHandler+0x150>
          pHandle->Direction = POSITIVE;
 8004a04:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004a06:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 8004a08:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004a0c:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
 8004a10:	332a      	adds	r3, #42	@ 0x2a
 8004a12:	b21b      	sxth	r3, r3
 8004a14:	e7aa      	b.n	800496c <HALL_TIMx_CC_IRQHandler+0x150>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8004a16:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8004a1a:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d205      	bcs.n	8004a2e <HALL_TIMx_CC_IRQHandler+0x212>
        pHandle->BufferFilled++;
 8004a22:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8004a26:	3301      	adds	r3, #1
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
 8004a2e:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004a30:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8004a32:	f890 c04e 	ldrb.w	ip, [r0, #78]	@ 0x4e
      if ( pHandle->OVFCounter != 0u )
 8004a36:	f890 604e 	ldrb.w	r6, [r0, #78]	@ 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8004a3a:	b2bd      	uxth	r5, r7
 8004a3c:	eb05 450c 	add.w	r5, r5, ip, lsl #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8004a40:	b29b      	uxth	r3, r3
      if ( pHandle->OVFCounter != 0u )
 8004a42:	f006 0cff 	and.w	ip, r6, #255	@ 0xff
 8004a46:	2e00      	cmp	r6, #0
 8004a48:	d040      	beq.n	8004acc <HALL_TIMx_CC_IRQHandler+0x2b0>
        hAux = hPrscBuf + 1u;
 8004a4a:	3301      	adds	r3, #1
        wCaptBuf *= hAux;
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	fb03 f505 	mul.w	r5, r3, r5
        if ( pHandle->RatioInc )
 8004a52:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d042      	beq.n	8004ae0 <HALL_TIMx_CC_IRQHandler+0x2c4>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 8004a60:	f8d0 30bc 	ldr.w	r3, [r0, #188]	@ 0xbc
 8004a64:	42ab      	cmp	r3, r5
 8004a66:	d82c      	bhi.n	8004ac2 <HALL_TIMx_CC_IRQHandler+0x2a6>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004a68:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8004a6c:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8004a70:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8004a74:	6d3e      	ldr	r6, [r7, #80]	@ 0x50
          pHandle->SpeedFIFOIdx++;
 8004a76:	3301      	adds	r3, #1
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004a78:	1ba4      	subs	r4, r4, r6
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8004a7a:	f8d0 60b8 	ldr.w	r6, [r0, #184]	@ 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004a7e:	f8c0 409c 	str.w	r4, [r0, #156]	@ 0x9c
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8004a82:	42ae      	cmp	r6, r5
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8004a84:	bf88      	it	hi
 8004a86:	fb01 f605 	mulhi.w	r6, r1, r5
          pHandle->SpeedFIFOIdx++;
 8004a8a:	b2db      	uxtb	r3, r3
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8004a8c:	bf86      	itte	hi
 8004a8e:	19a4      	addhi	r4, r4, r6
 8004a90:	f8c0 409c 	strhi.w	r4, [r0, #156]	@ 0x9c
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 8004a94:	434e      	mulls	r6, r1
            pHandle->SpeedFIFOIdx = 0u;
 8004a96:	429a      	cmp	r2, r3
 8004a98:	bf08      	it	eq
 8004a9a:	2300      	moveq	r3, #0
 8004a9c:	653e      	str	r6, [r7, #80]	@ 0x50
          if ( pHandle->SensorIsReliable) 
 8004a9e:	f890 4049 	ldrb.w	r4, [r0, #73]	@ 0x49
 8004aa2:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
 8004aa6:	2c00      	cmp	r4, #0
 8004aa8:	d038      	beq.n	8004b1c <HALL_TIMx_CC_IRQHandler+0x300>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8004aaa:	f890 404d 	ldrb.w	r4, [r0, #77]	@ 0x4d
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8004aae:	f8d0 30b4 	ldr.w	r3, [r0, #180]	@ 0xb4
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8004ab2:	42a2      	cmp	r2, r4
 8004ab4:	d935      	bls.n	8004b22 <HALL_TIMx_CC_IRQHandler+0x306>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8004ab6:	fbb3 f3f5 	udiv	r3, r3, r5
 8004aba:	fb03 f101 	mul.w	r1, r3, r1
 8004abe:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
      pHandle->OVFCounter = 0u;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
}
 8004ac8:	2000      	movs	r0, #0
 8004aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 8004acc:	f890 604a 	ldrb.w	r6, [r0, #74]	@ 0x4a
 8004ad0:	b196      	cbz	r6, 8004af8 <HALL_TIMx_CC_IRQHandler+0x2dc>
          hAux = hPrscBuf + 2u;
 8004ad2:	3302      	adds	r3, #2
          wCaptBuf *= hAux;
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	fb03 f505 	mul.w	r5, r3, r5
          pHandle->RatioDec = false;
 8004ada:	f880 c04a 	strb.w	ip, [r0, #74]	@ 0x4a
 8004ade:	e7bf      	b.n	8004a60 <HALL_TIMx_CC_IRQHandler+0x244>
 8004ae0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 8004ae2:	f8b0 60ae 	ldrh.w	r6, [r0, #174]	@ 0xae
 8004ae6:	429e      	cmp	r6, r3
 8004ae8:	d9ba      	bls.n	8004a60 <HALL_TIMx_CC_IRQHandler+0x244>
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8004aea:	2601      	movs	r6, #1
 8004aec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8004aee:	4433      	add	r3, r6
  WRITE_REG(TIMx->PSC, Prescaler);
 8004af0:	62a3      	str	r3, [r4, #40]	@ 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8004af2:	f880 604b 	strb.w	r6, [r0, #75]	@ 0x4b
 8004af6:	e7b3      	b.n	8004a60 <HALL_TIMx_CC_IRQHandler+0x244>
          uint16_t hAux = hPrscBuf + 1u;
 8004af8:	3301      	adds	r3, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8004afa:	b2bf      	uxth	r7, r7
          wCaptBuf *= hAux;
 8004afc:	b29b      	uxth	r3, r3
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8004afe:	f5b7 4faa 	cmp.w	r7, #21760	@ 0x5500
          wCaptBuf *= hAux;
 8004b02:	fb03 f505 	mul.w	r5, r3, r5
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8004b06:	d2ab      	bcs.n	8004a60 <HALL_TIMx_CC_IRQHandler+0x244>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004b08:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0a8      	beq.n	8004a60 <HALL_TIMx_CC_IRQHandler+0x244>
              pHandle->RatioDec = true;
 8004b0e:	2601      	movs	r6, #1
 8004b10:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8004b12:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8004b14:	62a3      	str	r3, [r4, #40]	@ 0x28
              pHandle->RatioDec = true;
 8004b16:	f880 604a 	strb.w	r6, [r0, #74]	@ 0x4a
 8004b1a:	e7a1      	b.n	8004a60 <HALL_TIMx_CC_IRQHandler+0x244>
            pHandle->AvrElSpeedDpp = 0;
 8004b1c:	f8a0 40a4 	strh.w	r4, [r0, #164]	@ 0xa4
 8004b20:	e7cf      	b.n	8004ac2 <HALL_TIMx_CC_IRQHandler+0x2a6>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8004b22:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 8004b26:	fb91 f1f2 	sdiv	r1, r1, r2
 8004b2a:	fb93 f3f1 	sdiv	r3, r3, r1
 8004b2e:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8004b32:	e7c6      	b.n	8004ac2 <HALL_TIMx_CC_IRQHandler+0x2a6>
          pHandle->Direction = NEGATIVE;
 8004b34:	25ff      	movs	r5, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004b36:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3c:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
 8004b40:	3355      	adds	r3, #85	@ 0x55
 8004b42:	b21b      	sxth	r3, r3
          pHandle->Direction = NEGATIVE;
 8004b44:	f880 50a2 	strb.w	r5, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004b48:	e710      	b.n	800496c <HALL_TIMx_CC_IRQHandler+0x150>
        pHandle->SensorIsReliable = false;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f880 3049 	strb.w	r3, [r0, #73]	@ 0x49
        break;
 8004b50:	e71c      	b.n	800498c <HALL_TIMx_CC_IRQHandler+0x170>
 8004b52:	bf00      	nop

08004b54 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8004b54:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004b58:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  if ( pHandle->SensorIsReliable )
 8004b5a:	b1d3      	cbz	r3, 8004b92 <HALL_TIMx_UP_IRQHandler+0x3e>
{
 8004b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    pHandle->OVFCounter++;
 8004b5e:	f890 204e 	ldrb.w	r2, [r0, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8004b62:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	@ 0xc0
    pHandle->OVFCounter++;
 8004b66:	3201      	adds	r2, #1
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8004b6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004b72:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8004b74:	f8b0 10c2 	ldrh.w	r1, [r0, #194]	@ 0xc2
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8004b78:	fb04 2202 	mla	r2, r4, r2, r2
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8004b80:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8004b84:	f890 104e 	ldrb.w	r1, [r0, #78]	@ 0x4e
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	4299      	cmp	r1, r3
 8004b8c:	d203      	bcs.n	8004b96 <HALL_TIMx_UP_IRQHandler+0x42>
}
 8004b8e:	2000      	movs	r0, #0
 8004b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b92:	2000      	movs	r0, #0
 8004b94:	4770      	bx	lr
      pHandle->_Super.hElSpeedDpp = 0;
 8004b96:	f04f 0c00 	mov.w	ip, #0
 8004b9a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8004b9c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004b9e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004ba0:	f890 7020 	ldrb.w	r7, [r0, #32]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004ba4:	6b86      	ldr	r6, [r0, #56]	@ 0x38
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004ba6:	6c05      	ldr	r5, [r0, #64]	@ 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004ba8:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004baa:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	0a12      	lsrs	r2, r2, #8
      pHandle->_Super.hElSpeedDpp = 0;
 8004bb2:	f8a0 c00e 	strh.w	ip, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004bb6:	bb17      	cbnz	r7, 8004bfe <HALL_TIMx_UP_IRQHandler+0xaa>
 8004bb8:	68a9      	ldr	r1, [r5, #8]
 8004bba:	ea23 0301 	bic.w	r3, r3, r1
 8004bbe:	68b1      	ldr	r1, [r6, #8]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	ea2e 0101 	bic.w	r1, lr, r1
 8004bc6:	b289      	uxth	r1, r1
 8004bc8:	fab1 f181 	clz	r1, r1
 8004bcc:	fab3 f383 	clz	r3, r3
 8004bd0:	68a4      	ldr	r4, [r4, #8]
 8004bd2:	0949      	lsrs	r1, r1, #5
 8004bd4:	ea22 0204 	bic.w	r2, r2, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004bd8:	0049      	lsls	r1, r1, #1
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	b292      	uxth	r2, r2
 8004bde:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004be2:	4562      	cmp	r2, ip
 8004be4:	bf08      	it	eq
 8004be6:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 8004bea:	1e5a      	subs	r2, r3, #1
 8004bec:	f880 30a6 	strb.w	r3, [r0, #166]	@ 0xa6
 8004bf0:	2a05      	cmp	r2, #5
 8004bf2:	d86a      	bhi.n	8004cca <HALL_TIMx_UP_IRQHandler+0x176>
 8004bf4:	e8df f002 	tbb	[pc, r2]
 8004bf8:	4d545b62 	.word	0x4d545b62
 8004bfc:	1f46      	.short	0x1f46
 8004bfe:	68b1      	ldr	r1, [r6, #8]
 8004c00:	68ad      	ldr	r5, [r5, #8]
 8004c02:	68a4      	ldr	r4, [r4, #8]
 8004c04:	ea2e 0101 	bic.w	r1, lr, r1
 8004c08:	ea23 0305 	bic.w	r3, r3, r5
 8004c0c:	b289      	uxth	r1, r1
 8004c0e:	ea22 0204 	bic.w	r2, r2, r4
 8004c12:	fab1 f181 	clz	r1, r1
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	b292      	uxth	r2, r2
 8004c1a:	fab3 f383 	clz	r3, r3
 8004c1e:	fab2 f282 	clz	r2, r2
 8004c22:	0949      	lsrs	r1, r1, #5
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004c24:	0089      	lsls	r1, r1, #2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	0952      	lsrs	r2, r2, #5
 8004c2a:	f081 0104 	eor.w	r1, r1, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004c2e:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8004c32:	430b      	orrs	r3, r1
 8004c34:	e7d9      	b.n	8004bea <HALL_TIMx_UP_IRQHandler+0x96>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8004c36:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8004c38:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8004c3c:	3b3f      	subs	r3, #63	@ 0x3f
 8004c3e:	b21b      	sxth	r3, r3
 8004c40:	8083      	strh	r3, [r0, #4]
      pHandle->OVFCounter = 0u;
 8004c42:	2100      	movs	r1, #0
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004c44:	f890 4026 	ldrb.w	r4, [r0, #38]	@ 0x26
      pHandle->OVFCounter = 0u;
 8004c48:	f880 104e 	strb.w	r1, [r0, #78]	@ 0x4e
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8004c4c:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004c50:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
      pHandle->FirstCapt = 0u;
 8004c54:	f880 104c 	strb.w	r1, [r0, #76]	@ 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004c58:	b14c      	cbz	r4, 8004c6e <HALL_TIMx_UP_IRQHandler+0x11a>
 8004c5a:	f100 034c 	add.w	r3, r0, #76	@ 0x4c
 8004c5e:	eb03 0184 	add.w	r1, r3, r4, lsl #2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8004c62:	f843 2f04 	str.w	r2, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004c66:	4299      	cmp	r1, r3
 8004c68:	d1fb      	bne.n	8004c62 <HALL_TIMx_UP_IRQHandler+0x10e>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8004c6a:	fb02 f404 	mul.w	r4, r2, r4
      pHandle->BufferFilled = 0 ;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8004c74:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8004c78:	f8c0 409c 	str.w	r4, [r0, #156]	@ 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8004c7c:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
}
 8004c80:	2000      	movs	r0, #0
 8004c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8004c84:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8004c86:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8004c8a:	3315      	adds	r3, #21
 8004c8c:	b21b      	sxth	r3, r3
 8004c8e:	8083      	strh	r3, [r0, #4]
      break;
 8004c90:	e7d7      	b.n	8004c42 <HALL_TIMx_UP_IRQHandler+0xee>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8004c92:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8004c94:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 8004c98:	3b15      	subs	r3, #21
 8004c9a:	b21b      	sxth	r3, r3
 8004c9c:	8083      	strh	r3, [r0, #4]
      break;
 8004c9e:	e7d0      	b.n	8004c42 <HALL_TIMx_UP_IRQHandler+0xee>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004ca0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8004ca2:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 8004ca6:	332a      	adds	r3, #42	@ 0x2a
 8004ca8:	b21b      	sxth	r3, r3
 8004caa:	8083      	strh	r3, [r0, #4]
      break;
 8004cac:	e7c9      	b.n	8004c42 <HALL_TIMx_UP_IRQHandler+0xee>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8004cae:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8004cb0:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 8004cb4:	3b2a      	subs	r3, #42	@ 0x2a
 8004cb6:	b21b      	sxth	r3, r3
 8004cb8:	8083      	strh	r3, [r0, #4]
      break;
 8004cba:	e7c2      	b.n	8004c42 <HALL_TIMx_UP_IRQHandler+0xee>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8004cbc:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8004cbe:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8004cc2:	333f      	adds	r3, #63	@ 0x3f
 8004cc4:	b21b      	sxth	r3, r3
 8004cc6:	8083      	strh	r3, [r0, #4]
      break;
 8004cc8:	e7bb      	b.n	8004c42 <HALL_TIMx_UP_IRQHandler+0xee>
      pHandle->SensorIsReliable = false;
 8004cca:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004ccc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 8004cd0:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
      break;
 8004cd4:	e7b5      	b.n	8004c42 <HALL_TIMx_UP_IRQHandler+0xee>
 8004cd6:	bf00      	nop

08004cd8 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8004cd8:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8004cda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cde:	2100      	movs	r1, #0
{
 8004ce0:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 8004ce2:	f001 f927 	bl	8005f34 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	bf00      	nop

08004cf0 <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 8004cf0:	b510      	push	{r4, lr}
 8004cf2:	4604      	mov	r4, r0
  uint16_t i;
  int32_t wAux = 0;
 8004cf4:	2200      	movs	r2, #0

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004cf6:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
{
 8004cfa:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8004cfc:	f103 0c01 	add.w	ip, r3, #1
 8004d00:	fa1f fc8c 	uxth.w	ip, ip
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8004d04:	f1bc 0f80 	cmp.w	ip, #128	@ 0x80
 8004d08:	bf28      	it	cs
 8004d0a:	4694      	movcs	ip, r2
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004d0c:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8004d10:	f104 0efe 	add.w	lr, r4, #254	@ 0xfe
 8004d14:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8004d18:	f8a4 c100 	strh.w	ip, [r4, #256]	@ 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004d1c:	1ea3      	subs	r3, r4, #2
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004d1e:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004d22:	459e      	cmp	lr, r3
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004d24:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004d26:	d1fa      	bne.n	8004d1e <MPM_CalcElMotorPower+0x2e>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8004d28:	2a00      	cmp	r2, #0
 8004d2a:	bfb8      	it	lt
 8004d2c:	327f      	addlt	r2, #127	@ 0x7f
 8004d2e:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8004d30:	f8a4 2104 	strh.w	r2, [r4, #260]	@ 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8004d34:	bd10      	pop	{r4, pc}
 8004d36:	bf00      	nop

08004d38 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8004d38:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	@ 0x104
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop

08004d40 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8004d40:	8a03      	ldrh	r3, [r0, #16]
 8004d42:	8b42      	ldrh	r2, [r0, #26]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d306      	bcc.n	8004d56 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8004d48:	8b82      	ldrh	r2, [r0, #28]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d901      	bls.n	8004d52 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8004d4e:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8004d50:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8004d52:	8ac0      	ldrh	r0, [r0, #22]
 8004d54:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8004d56:	2008      	movs	r0, #8
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop

08004d5c <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	8203      	strh	r3, [r0, #16]
}
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop

08004d64 <NTC_Init>:
{
 8004d64:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004d66:	7803      	ldrb	r3, [r0, #0]
{
 8004d68:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004d6a:	b123      	cbz	r3, 8004d76 <NTC_Init+0x12>
    pHandle->hFaultState = MC_NO_ERROR;
 8004d6c:	2300      	movs	r3, #0
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004d6e:	8a42      	ldrh	r2, [r0, #18]
    pHandle->hFaultState = MC_NO_ERROR;
 8004d70:	82c3      	strh	r3, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004d72:	8202      	strh	r2, [r0, #16]
}
 8004d74:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8004d76:	3004      	adds	r0, #4
 8004d78:	f7fc fdce 	bl	8001918 <RCM_RegisterRegConv>
 8004d7c:	4603      	mov	r3, r0
    NTC_Clear( pHandle );
 8004d7e:	4620      	mov	r0, r4
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8004d80:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
    NTC_Clear( pHandle );
 8004d84:	f7ff ffea 	bl	8004d5c <NTC_Clear>
}
 8004d88:	bd10      	pop	{r4, pc}
 8004d8a:	bf00      	nop

08004d8c <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8004d8c:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004d8e:	7803      	ldrb	r3, [r0, #0]
{
 8004d90:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004d92:	b113      	cbz	r3, 8004d9a <NTC_CalcAvTemp+0xe>
 8004d94:	2000      	movs	r0, #0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8004d96:	82e0      	strh	r0, [r4, #22]
  {
    pHandle->hFaultState = MC_NO_ERROR;
  }

  return ( pHandle->hFaultState );
}
 8004d98:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8004d9a:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8004d9e:	f7fc fec7 	bl	8001b30 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8004da2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004da6:	4298      	cmp	r0, r3
 8004da8:	d007      	beq.n	8004dba <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004daa:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8004dac:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004dae:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8004db0:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8004db4:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8004db8:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f7ff ffc0 	bl	8004d40 <NTC_SetFaultState>
 8004dc0:	82e0      	strh	r0, [r4, #22]
}
 8004dc2:	bd10      	pop	{r4, pc}

08004dc4 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004dc4:	7803      	ldrb	r3, [r0, #0]
 8004dc6:	b98b      	cbnz	r3, 8004dec <NTC_GetAvTemp_C+0x28>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8004dc8:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004dca:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8004dcc:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004dd0:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bfb8      	it	lt
 8004dda:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8004dde:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
 8004de0:	bfb8      	it	lt
 8004de2:	33ff      	addlt	r3, #255	@ 0xff
 8004de4:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8004de8:	b200      	sxth	r0, r0
 8004dea:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8004dec:	8a80      	ldrh	r0, [r0, #20]
}
 8004dee:	b200      	sxth	r0, r0
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop

08004df4 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8004df4:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004df6:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004df8:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004dfa:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004dfc:	8442      	strh	r2, [r0, #34]	@ 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8004dfe:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8004e00:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8004e02:	4770      	bx	lr

08004e04 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8004e04:	8081      	strh	r1, [r0, #4]
}
 8004e06:	4770      	bx	lr

08004e08 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8004e08:	80c1      	strh	r1, [r0, #6]
}
 8004e0a:	4770      	bx	lr

08004e0c <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8004e0c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop

08004e14 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8004e14:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop

08004e1c <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8004e1c:	6081      	str	r1, [r0, #8]

  return;
}
 8004e1e:	4770      	bx	lr

08004e20 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8004e20:	8b00      	ldrh	r0, [r0, #24]
 8004e22:	4770      	bx	lr

08004e24 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8004e24:	8b40      	ldrh	r0, [r0, #26]
 8004e26:	4770      	bx	lr

08004e28 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8004e28:	8441      	strh	r1, [r0, #34]	@ 0x22
}
 8004e2a:	4770      	bx	lr

08004e2c <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8004e2c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop

08004e34 <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 8004e34:	4603      	mov	r3, r0
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004e36:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8004e3a:	b530      	push	{r4, r5, lr}

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8004e3c:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004e40:	fb01 f202 	mul.w	r2, r1, r2
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004e44:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004e48:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
  if ( pHandle->hKiGain == 0 )
 8004e4c:	b17c      	cbz	r4, 8004e6e <PI_Controller+0x3a>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8004e4e:	fb04 f101 	mul.w	r1, r4, r1
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004e52:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
    if ( wIntegral_sum_temp < 0 )
 8004e56:	eb15 0e01 	adds.w	lr, r5, r1
 8004e5a:	d41d      	bmi.n	8004e98 <PI_Controller+0x64>
          wIntegral_sum_temp = -INT32_MAX;
 8004e5c:	420d      	tst	r5, r1
 8004e5e:	4914      	ldr	r1, [pc, #80]	@ (8004eb0 <PI_Controller+0x7c>)
 8004e60:	bf48      	it	mi
 8004e62:	468e      	movmi	lr, r1
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004e64:	45a6      	cmp	lr, r4
 8004e66:	dc02      	bgt.n	8004e6e <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8004e68:	691c      	ldr	r4, [r3, #16]
 8004e6a:	4574      	cmp	r4, lr
 8004e6c:	dd1d      	ble.n	8004eaa <PI_Controller+0x76>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8004e6e:	8b99      	ldrh	r1, [r3, #28]
 8004e70:	410a      	asrs	r2, r1
 8004e72:	8bd9      	ldrh	r1, [r3, #30]
 8004e74:	fa44 f101 	asr.w	r1, r4, r1
 8004e78:	440a      	add	r2, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8004e7a:	4290      	cmp	r0, r2
 8004e7c:	da03      	bge.n	8004e86 <PI_Controller+0x52>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8004e7e:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8004e80:	4414      	add	r4, r2
 8004e82:	609c      	str	r4, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8004e84:	bd30      	pop	{r4, r5, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8004e86:	4594      	cmp	ip, r2
 8004e88:	bfc3      	ittte	gt
 8004e8a:	4660      	movgt	r0, ip
    wDischarge = hLowerOutputLimit - wOutput_32;
 8004e8c:	ebac 0c02 	subgt.w	ip, ip, r2
  pHandle->wIntegralTerm += wDischarge;
 8004e90:	4464      	addgt	r4, ip
  return ( ( int16_t )( wOutput_32 ) );
 8004e92:	b210      	sxthle	r0, r2
  pHandle->wIntegralTerm += wDischarge;
 8004e94:	609c      	str	r4, [r3, #8]
}
 8004e96:	bd30      	pop	{r4, r5, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8004e98:	2d00      	cmp	r5, #0
 8004e9a:	dde3      	ble.n	8004e64 <PI_Controller+0x30>
        if ( wIntegral_Term > 0 )
 8004e9c:	2900      	cmp	r1, #0
 8004e9e:	dde1      	ble.n	8004e64 <PI_Controller+0x30>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004ea0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ea4:	428c      	cmp	r4, r1
 8004ea6:	d1e2      	bne.n	8004e6e <PI_Controller+0x3a>
          wIntegral_sum_temp = INT32_MAX;
 8004ea8:	46a6      	mov	lr, r4
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 8004eaa:	4674      	mov	r4, lr
 8004eac:	e7df      	b.n	8004e6e <PI_Controller+0x3a>
 8004eae:	bf00      	nop
 8004eb0:	80000001 	.word	0x80000001

08004eb4 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	4605      	mov	r5, r0

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004eb8:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004ebc:	f8d5 6108 	ldr.w	r6, [r5, #264]	@ 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004ec0:	f9b2 0018 	ldrsh.w	r0, [r2, #24]
 8004ec4:	f9b2 300e 	ldrsh.w	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004ec8:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004ecc:	fb00 f303 	mul.w	r3, r0, r3
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004ed0:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004ed4:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004ed8:	fb02 3401 	mla	r4, r2, r1, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004edc:	f7ff fa84 	bl	80043e8 <VBS_GetAvBusVoltage_V>
 8004ee0:	fb06 f200 	mul.w	r2, r6, r0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004ee4:	480d      	ldr	r0, [pc, #52]	@ (8004f1c <PQD_CalcElMotorPower+0x68>)
 8004ee6:	17d1      	asrs	r1, r2, #31
 8004ee8:	fb80 0202 	smull	r0, r2, r0, r2
  wAux /= 65536;
 8004eec:	1e23      	subs	r3, r4, #0
 8004eee:	bfbc      	itt	lt
 8004ef0:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8004ef4:	33ff      	addlt	r3, #255	@ 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004ef6:	ebc1 12a2 	rsb	r2, r1, r2, asr #6
  wAux /= 65536;
 8004efa:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8004efc:	fb02 f303 	mul.w	r3, r2, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8004f00:	4907      	ldr	r1, [pc, #28]	@ (8004f20 <PQD_CalcElMotorPower+0x6c>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004f02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004f06:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8004f08:	fb81 2103 	smull	r2, r1, r1, r3
 8004f0c:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004f0e:	4628      	mov	r0, r5

}
 8004f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004f14:	ebc3 41a1 	rsb	r1, r3, r1, asr #18
 8004f18:	f7ff beea 	b.w	8004cf0 <MPM_CalcElMotorPower>
 8004f1c:	1b4e81b5 	.word	0x1b4e81b5
 8004f20:	66666667 	.word	0x66666667

08004f24 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8004f24:	4b17      	ldr	r3, [pc, #92]	@ (8004f84 <startTimers+0x60>)
 8004f26:	69da      	ldr	r2, [r3, #28]
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8004f28:	07d2      	lsls	r2, r2, #31
 8004f2a:	d415      	bmi.n	8004f58 <startTimers+0x34>
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004f2c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
  SET_BIT(RCC->APB1ENR, Periphs);
 8004f30:	69da      	ldr	r2, [r3, #28]
{
 8004f32:	b082      	sub	sp, #8
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	f002 0201 	and.w	r2, r2, #1
 8004f40:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004f42:	9a01      	ldr	r2, [sp, #4]
 8004f44:	694a      	ldr	r2, [r1, #20]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	f022 0201 	bic.w	r2, r2, #1
 8004f52:	61da      	str	r2, [r3, #28]
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8004f54:	b002      	add	sp, #8
 8004f56:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8004f58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f5c:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004f5e:	6859      	ldr	r1, [r3, #4]
 8004f60:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004f64:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004f68:	f041 0120 	orr.w	r1, r1, #32
 8004f6c:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004f6e:	6959      	ldr	r1, [r3, #20]
 8004f70:	f041 0101 	orr.w	r1, r1, #1
 8004f74:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004f76:	6859      	ldr	r1, [r3, #4]
 8004f78:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000

08004f88 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8004f88:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8004f8a:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8004f8c:	3201      	adds	r2, #1
  if (counter_mode == 0U)
 8004f8e:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
 8004f92:	d11b      	bne.n	8004fcc <waitForPolarizationEnd+0x44>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8004f94:	6804      	ldr	r4, [r0, #0]
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8004f96:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004f98:	f06f 0602 	mvn.w	r6, #2
 8004f9c:	0155      	lsls	r5, r2, #5
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	6106      	str	r6, [r0, #16]
  while (*cnt < NB_CONVERSIONS)
 8004fa2:	f893 c000 	ldrb.w	ip, [r3]
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8004fa6:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8004faa:	f1bc 0f0f 	cmp.w	ip, #15
 8004fae:	d80c      	bhi.n	8004fca <waitForPolarizationEnd+0x42>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004fb0:	6904      	ldr	r4, [r0, #16]
 8004fb2:	07a4      	lsls	r4, r4, #30
 8004fb4:	d5f5      	bpl.n	8004fa2 <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8004fb6:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8004fba:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004fbc:	6106      	str	r6, [r0, #16]
 8004fbe:	d8f0      	bhi.n	8004fa2 <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8004fc0:	781c      	ldrb	r4, [r3, #0]
 8004fc2:	2c0f      	cmp	r4, #15
 8004fc4:	d8ed      	bhi.n	8004fa2 <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8004fcc:	2c60      	cmp	r4, #96	@ 0x60
 8004fce:	d1e2      	bne.n	8004f96 <waitForPolarizationEnd+0xe>
 8004fd0:	e7e2      	b.n	8004f98 <waitForPolarizationEnd+0x10>
 8004fd2:	bf00      	nop

08004fd4 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8004fd4:	6843      	ldr	r3, [r0, #4]
 8004fd6:	4718      	bx	r3

08004fd8 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8004fd8:	b530      	push	{r4, r5, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004fda:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004fde:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004fe0:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8004fe4:	fb0e fc0c 	mul.w	ip, lr, ip
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004fe8:	b20b      	sxth	r3, r1
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004fee:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8004ff2:	eb03 024c 	add.w	r2, r3, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004ff6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8004ffa:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004ffe:	eb03 74d3 	add.w	r4, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8005002:	1c55      	adds	r5, r2, #1
{
 8005004:	b083      	sub	sp, #12
  {
    if ( wZ < 0 )
    {
      pHandle->Sector = SECTOR_5;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005006:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800500a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800500e:	ea4f 0161 	mov.w	r1, r1, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005012:	ea4f 0464 	mov.w	r4, r4, asr #1
  if ( wY < 0 )
 8005016:	db79      	blt.n	800510c <PWMC_SetPhaseVoltage+0x134>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8005018:	1c5d      	adds	r5, r3, #1
 800501a:	db56      	blt.n	80050ca <PWMC_SetPhaseVoltage+0xf2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800501c:	2501      	movs	r5, #1
 800501e:	1b09      	subs	r1, r1, r4
 8005020:	bf44      	itt	mi
 8005022:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8005026:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800502a:	2b00      	cmp	r3, #0
 800502c:	bfbc      	itt	lt
 800502e:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8005032:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005036:	2a00      	cmp	r2, #0
 8005038:	bfb8      	it	lt
 800503a:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800503e:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005042:	bfb8      	it	lt
 8005044:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005048:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800504c:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhB;
 8005050:	fa1f fe83 	uxth.w	lr, r3
      pHandle->midDuty = wTimePhA;
 8005054:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhC;
 8005058:	b294      	uxth	r4, r2
        pHandle->highDuty = wTimePhA;
 800505a:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 800505e:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8005062:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8005066:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 800506a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800506e:	b289      	uxth	r1, r1
 8005070:	b29b      	uxth	r3, r3
 8005072:	b292      	uxth	r2, r2
  if ( pHandle->DTTest == 1u )
 8005074:	2c01      	cmp	r4, #1
        pHandle->Sector = SECTOR_4;
 8005076:	f880 503a 	strb.w	r5, [r0, #58]	@ 0x3a
        pHandle->lowDuty = wTimePhC;
 800507a:	f8a0 e03c 	strh.w	lr, [r0, #60]	@ 0x3c
        pHandle->midDuty = wTimePhB;
 800507e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8005082:	8641      	strh	r1, [r0, #50]	@ 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8005084:	8683      	strh	r3, [r0, #52]	@ 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8005086:	86c2      	strh	r2, [r0, #54]	@ 0x36
  if ( pHandle->DTTest == 1u )
 8005088:	d11a      	bne.n	80050c0 <PWMC_SetPhaseVoltage+0xe8>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 800508a:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	@ 0x48
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 800508e:	f8b0 4054 	ldrh.w	r4, [r0, #84]	@ 0x54
    if ( pHandle->Ia > 0 )
 8005092:	2d00      	cmp	r5, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8005094:	bfcc      	ite	gt
 8005096:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8005098:	1b09      	suble	r1, r1, r4
 800509a:	b289      	uxth	r1, r1
 800509c:	8641      	strh	r1, [r0, #50]	@ 0x32
    }

    if ( pHandle->Ib > 0 )
 800509e:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	@ 0x4a
 80050a2:	2900      	cmp	r1, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 80050a4:	f9b0 104c 	ldrsh.w	r1, [r0, #76]	@ 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 80050a8:	bfcc      	ite	gt
 80050aa:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80050ac:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 80050ae:	2900      	cmp	r1, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80050b0:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 80050b2:	bfcc      	ite	gt
 80050b4:	18a4      	addgt	r4, r4, r2
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80050b6:	1b12      	suble	r2, r2, r4
 80050b8:	8683      	strh	r3, [r0, #52]	@ 0x34
      pHandle->CntPhC += pHandle->DTCompCnt;
 80050ba:	bfcc      	ite	gt
 80050bc:	86c4      	strhgt	r4, [r0, #54]	@ 0x36
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80050be:	86c2      	strhle	r2, [r0, #54]	@ 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80050c0:	6983      	ldr	r3, [r0, #24]
}
 80050c2:	b003      	add	sp, #12
 80050c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80050c8:	4718      	bx	r3
      if ( wX <= 0 )
 80050ca:	f1bc 0f00 	cmp.w	ip, #0
 80050ce:	dd3d      	ble.n	800514c <PWMC_SetPhaseVoltage+0x174>
        wTimePhB = wTimePhA + wZ / 131072;
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bfb8      	it	lt
 80050d4:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80050d8:	ebac 0404 	sub.w	r4, ip, r4
        wTimePhB = wTimePhA + wZ / 131072;
 80050dc:	bfb8      	it	lt
 80050de:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 80050e2:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80050e6:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80050ea:	bfb8      	it	lt
 80050ec:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80050f0:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80050f4:	bfb8      	it	lt
 80050f6:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 80050fa:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->highDuty = wTimePhC;
 80050fe:	2500      	movs	r5, #0
        pHandle->lowDuty = wTimePhA;
 8005100:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhB;
 8005104:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhC;
 8005108:	b294      	uxth	r4, r2
 800510a:	e7a6      	b.n	800505a <PWMC_SetPhaseVoltage+0x82>
    if ( wZ < 0 )
 800510c:	1c5d      	adds	r5, r3, #1
 800510e:	db5d      	blt.n	80051cc <PWMC_SetPhaseVoltage+0x1f4>
      if ( wX <= 0 )
 8005110:	f1bc 0f00 	cmp.w	ip, #0
 8005114:	dd38      	ble.n	8005188 <PWMC_SetPhaseVoltage+0x1b0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005116:	ebb1 010c 	subs.w	r1, r1, ip
 800511a:	bf44      	itt	mi
 800511c:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8005120:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8005124:	2a00      	cmp	r2, #0
 8005126:	bfb8      	it	lt
 8005128:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800512c:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8005130:	bfb8      	it	lt
 8005132:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
 8005136:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800513a:	eb02 436c 	add.w	r3, r2, ip, asr #17
        pHandle->highDuty = wTimePhA;
 800513e:	2502      	movs	r5, #2
        pHandle->lowDuty = wTimePhB;
 8005140:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = wTimePhC;
 8005144:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhA;
 8005148:	b28c      	uxth	r4, r1
 800514a:	e786      	b.n	800505a <PWMC_SetPhaseVoltage+0x82>
        wTimePhC = wTimePhA - wY / 131072;
 800514c:	2a00      	cmp	r2, #0
 800514e:	bfb8      	it	lt
 8005150:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005154:	eba1 010c 	sub.w	r1, r1, ip
        wTimePhC = wTimePhA - wY / 131072;
 8005158:	bfb8      	it	lt
 800515a:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhC + wX / 131072;
 800515e:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005162:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005166:	bfb8      	it	lt
 8005168:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 800516c:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005170:	bfb8      	it	lt
 8005172:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 8005176:	eb02 4363 	add.w	r3, r2, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 800517a:	2505      	movs	r5, #5
 800517c:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhC;
 8005180:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhB;
 8005184:	b29c      	uxth	r4, r3
 8005186:	e768      	b.n	800505a <PWMC_SetPhaseVoltage+0x82>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005188:	ebbc 0404 	subs.w	r4, ip, r4
 800518c:	bf44      	itt	mi
 800518e:	f504 347f 	addmi.w	r4, r4, #261120	@ 0x3fc00
 8005192:	f204 34ff 	addwmi	r4, r4, #1023	@ 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8005196:	2b00      	cmp	r3, #0
 8005198:	bfbc      	itt	lt
 800519a:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 800519e:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 80051a2:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80051a6:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80051aa:	bfb8      	it	lt
 80051ac:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80051b0:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80051b4:	bfb8      	it	lt
 80051b6:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 80051ba:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhC;
 80051be:	2503      	movs	r5, #3
 80051c0:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = wTimePhB;
 80051c4:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhA;
 80051c8:	b28c      	uxth	r4, r1
 80051ca:	e746      	b.n	800505a <PWMC_SetPhaseVoltage+0x82>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80051cc:	1b09      	subs	r1, r1, r4
 80051ce:	bf44      	itt	mi
 80051d0:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 80051d4:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80051d8:	2b00      	cmp	r3, #0
 80051da:	bfbc      	itt	lt
 80051dc:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80051e0:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	bfb8      	it	lt
 80051e8:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80051ec:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80051f0:	bfb8      	it	lt
 80051f2:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80051f6:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80051fa:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhC;
 80051fe:	2504      	movs	r5, #4
 8005200:	fa1f fe82 	uxth.w	lr, r2
      pHandle->midDuty = wTimePhA;
 8005204:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhB;
 8005208:	b29c      	uxth	r4, r3
 800520a:	e726      	b.n	800505a <PWMC_SetPhaseVoltage+0x82>

0800520c <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 800520c:	6883      	ldr	r3, [r0, #8]
 800520e:	4718      	bx	r3

08005210 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8005210:	b510      	push	{r4, lr}
 8005212:	4604      	mov	r4, r0
  bool retVal = false;
  if ( action == CRC_START )
 8005214:	b179      	cbz	r1, 8005236 <PWMC_CurrentReadingCalibr+0x26>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8005216:	2901      	cmp	r1, #1
 8005218:	d001      	beq.n	800521e <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 800521a:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 800521c:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800521e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8005222:	b19b      	cbz	r3, 800524c <PWMC_CurrentReadingCalibr+0x3c>
      pHandle->OffCalibrWaitTimeCounter--;
 8005224:	3b01      	subs	r3, #1
 8005226:	b29b      	uxth	r3, r3
 8005228:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f4      	bne.n	800521a <PWMC_CurrentReadingCalibr+0xa>
        pHandle->pFctCurrReadingCalib( pHandle );
 8005230:	6903      	ldr	r3, [r0, #16]
 8005232:	4798      	blx	r3
        retVal = true;
 8005234:	e00a      	b.n	800524c <PWMC_CurrentReadingCalibr+0x3c>
    PWMC_SwitchOffPWM( pHandle );
 8005236:	f7ff ffe9 	bl	800520c <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800523a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800523e:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1e9      	bne.n	800521a <PWMC_CurrentReadingCalibr+0xa>
      pHandle->pFctCurrReadingCalib( pHandle );
 8005246:	4620      	mov	r0, r4
 8005248:	6923      	ldr	r3, [r4, #16]
 800524a:	4798      	blx	r3
      retVal = true;
 800524c:	2001      	movs	r0, #1
}
 800524e:	bd10      	pop	{r4, pc}

08005250 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8005250:	69c3      	ldr	r3, [r0, #28]
 8005252:	4718      	bx	r3

08005254 <R3_2_GetPhaseCurrents>:
 */
__weak void R3_2_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t* pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005254:	6f43      	ldr	r3, [r0, #116]	@ 0x74
{
 8005256:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005258:	689c      	ldr	r4, [r3, #8]
  CLEAR_BIT(TIMx->CCER, Channels);
 800525a:	6a22      	ldr	r2, [r4, #32]
 800525c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005260:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = pHandle->_Super.Sector;
 8005262:	f890 203a 	ldrb.w	r2, [r0, #58]	@ 0x3a
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 8005266:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 800526a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 800526c:	699d      	ldr	r5, [r3, #24]
 800526e:	682b      	ldr	r3, [r5, #0]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 8005270:	6824      	ldr	r4, [r4, #0]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 8005272:	005b      	lsls	r3, r3, #1
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 8005274:	ea4f 0c44 	mov.w	ip, r4, lsl #1
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 8005278:	b29b      	uxth	r3, r3
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 800527a:	fa1f fc8c 	uxth.w	ip, ip

  switch ( bSector )
 800527e:	2a05      	cmp	r2, #5
 8005280:	f200 808f 	bhi.w	80053a2 <R3_2_GetPhaseCurrents+0x14e>
 8005284:	e8df f002 	tbb	[pc, r2]
 8005288:	03212139 	.word	0x03212139
 800528c:	3903      	.short	0x3903
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800528e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8005290:	4c47      	ldr	r4, [pc, #284]	@ (80053b0 <R3_2_GetPhaseCurrents+0x15c>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005292:	1ad3      	subs	r3, r2, r3
      if ( wAux < -INT16_MAX )
 8005294:	42a3      	cmp	r3, r4
 8005296:	da56      	bge.n	8005346 <R3_2_GetPhaseCurrents+0xf2>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005298:	6e02      	ldr	r2, [r0, #96]	@ 0x60

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 800529a:	4d45      	ldr	r5, [pc, #276]	@ (80053b0 <R3_2_GetPhaseCurrents+0x15c>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 800529c:	eba2 020c 	sub.w	r2, r2, ip
      if ( wAux < -INT16_MAX )
 80052a0:	42aa      	cmp	r2, r5
        pStator_Currents->a = -INT16_MAX;
 80052a2:	800c      	strh	r4, [r1, #0]
      if ( wAux < -INT16_MAX )
 80052a4:	db40      	blt.n	8005328 <R3_2_GetPhaseCurrents+0xd4>
      {
        pStator_Currents->b = -INT16_MAX;
      }
      else  if ( wAux > INT16_MAX )
 80052a6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80052aa:	db6c      	blt.n	8005386 <R3_2_GetPhaseCurrents+0x132>
      {
        pStator_Currents->b = INT16_MAX;
 80052ac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80052b0:	4615      	mov	r5, r2
      break;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80052b2:	b2a3      	uxth	r3, r4
        pStator_Currents->b = INT16_MAX;
 80052b4:	804a      	strh	r2, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80052b6:	4413      	add	r3, r2
 80052b8:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 80052ba:	f8a0 4048 	strh.w	r4, [r0, #72]	@ 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 80052be:	f8a0 504a 	strh.w	r5, [r0, #74]	@ 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80052c2:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
}
 80052c6:	bc30      	pop	{r4, r5}
 80052c8:	4770      	bx	lr
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80052ca:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80052cc:	1ad2      	subs	r2, r2, r3
      if ( wAux < -INT16_MAX )
 80052ce:	4b38      	ldr	r3, [pc, #224]	@ (80053b0 <R3_2_GetPhaseCurrents+0x15c>)
 80052d0:	429a      	cmp	r2, r3
 80052d2:	db33      	blt.n	800533c <R3_2_GetPhaseCurrents+0xe8>
      else  if ( wAux > INT16_MAX )
 80052d4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80052d8:	da5a      	bge.n	8005390 <R3_2_GetPhaseCurrents+0x13c>
        pStator_Currents->a = ( int16_t )wAux;
 80052da:	b214      	sxth	r4, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80052dc:	b293      	uxth	r3, r2
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 80052de:	6e45      	ldr	r5, [r0, #100]	@ 0x64
        pStator_Currents->a = -INT16_MAX;
 80052e0:	800c      	strh	r4, [r1, #0]
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 80052e2:	ebac 0c05 	sub.w	ip, ip, r5
 80052e6:	ebac 0c02 	sub.w	ip, ip, r2
      if ( wAux > INT16_MAX )
 80052ea:	f5bc 4f00 	cmp.w	ip, #32768	@ 0x8000
 80052ee:	db38      	blt.n	8005362 <R3_2_GetPhaseCurrents+0x10e>
        pStator_Currents->b = INT16_MAX;
 80052f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80052f4:	4615      	mov	r5, r2
 80052f6:	804a      	strh	r2, [r1, #2]
 80052f8:	e7dd      	b.n	80052b6 <R3_2_GetPhaseCurrents+0x62>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80052fa:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 80052fc:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 80052fe:	4b2c      	ldr	r3, [pc, #176]	@ (80053b0 <R3_2_GetPhaseCurrents+0x15c>)
 8005300:	429c      	cmp	r4, r3
 8005302:	db16      	blt.n	8005332 <R3_2_GetPhaseCurrents+0xde>
      else  if ( wAux > INT16_MAX )
 8005304:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8005308:	da32      	bge.n	8005370 <R3_2_GetPhaseCurrents+0x11c>
        pStator_Currents->b = ( int16_t )wAux;
 800530a:	b225      	sxth	r5, r4
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800530c:	b2a2      	uxth	r2, r4
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 800530e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
        pStator_Currents->b = -INT16_MAX;
 8005310:	804d      	strh	r5, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8005312:	ebac 0303 	sub.w	r3, ip, r3
 8005316:	1b1b      	subs	r3, r3, r4
      if ( wAux > INT16_MAX )
 8005318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800531c:	db1a      	blt.n	8005354 <R3_2_GetPhaseCurrents+0x100>
        pStator_Currents->a = INT16_MAX;
 800531e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005322:	461c      	mov	r4, r3
 8005324:	800b      	strh	r3, [r1, #0]
 8005326:	e7c6      	b.n	80052b6 <R3_2_GetPhaseCurrents+0x62>
        pStator_Currents->b = -INT16_MAX;
 8005328:	f248 0201 	movw	r2, #32769	@ 0x8001
 800532c:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800532e:	b2a3      	uxth	r3, r4
 8005330:	e7c1      	b.n	80052b6 <R3_2_GetPhaseCurrents+0x62>
 8005332:	461c      	mov	r4, r3
 8005334:	f248 0201 	movw	r2, #32769	@ 0x8001
 8005338:	461d      	mov	r5, r3
 800533a:	e7e8      	b.n	800530e <R3_2_GetPhaseCurrents+0xba>
 800533c:	461a      	mov	r2, r3
 800533e:	f248 0301 	movw	r3, #32769	@ 0x8001
 8005342:	4614      	mov	r4, r2
 8005344:	e7cb      	b.n	80052de <R3_2_GetPhaseCurrents+0x8a>
      else  if ( wAux > INT16_MAX )
 8005346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
        pStator_Currents->a = ( int16_t )wAux;
 800534a:	bfac      	ite	ge
 800534c:	f647 74ff 	movwge	r4, #32767	@ 0x7fff
 8005350:	b21c      	sxthlt	r4, r3
 8005352:	e7a1      	b.n	8005298 <R3_2_GetPhaseCurrents+0x44>
      else  if ( wAux < -INT16_MAX )
 8005354:	4c16      	ldr	r4, [pc, #88]	@ (80053b0 <R3_2_GetPhaseCurrents+0x15c>)
 8005356:	42a3      	cmp	r3, r4
 8005358:	da1f      	bge.n	800539a <R3_2_GetPhaseCurrents+0x146>
        pStator_Currents->a = -INT16_MAX;
 800535a:	f248 0301 	movw	r3, #32769	@ 0x8001
 800535e:	800c      	strh	r4, [r1, #0]
 8005360:	e7a9      	b.n	80052b6 <R3_2_GetPhaseCurrents+0x62>
      else  if ( wAux < -INT16_MAX )
 8005362:	4d13      	ldr	r5, [pc, #76]	@ (80053b0 <R3_2_GetPhaseCurrents+0x15c>)
 8005364:	45ac      	cmp	ip, r5
 8005366:	da08      	bge.n	800537a <R3_2_GetPhaseCurrents+0x126>
        pStator_Currents->b = -INT16_MAX;
 8005368:	f248 0201 	movw	r2, #32769	@ 0x8001
 800536c:	804d      	strh	r5, [r1, #2]
 800536e:	e7a2      	b.n	80052b6 <R3_2_GetPhaseCurrents+0x62>
 8005370:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8005374:	4614      	mov	r4, r2
 8005376:	4615      	mov	r5, r2
 8005378:	e7c9      	b.n	800530e <R3_2_GetPhaseCurrents+0xba>
        pStator_Currents->b = ( int16_t )wAux;
 800537a:	fa0f f58c 	sxth.w	r5, ip
 800537e:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005380:	fa1f f28c 	uxth.w	r2, ip
 8005384:	e797      	b.n	80052b6 <R3_2_GetPhaseCurrents+0x62>
        pStator_Currents->b = ( int16_t )wAux;
 8005386:	b215      	sxth	r5, r2
 8005388:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800538a:	b2a3      	uxth	r3, r4
 800538c:	b292      	uxth	r2, r2
 800538e:	e792      	b.n	80052b6 <R3_2_GetPhaseCurrents+0x62>
 8005390:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005394:	461a      	mov	r2, r3
 8005396:	461c      	mov	r4, r3
 8005398:	e7a1      	b.n	80052de <R3_2_GetPhaseCurrents+0x8a>
        pStator_Currents->a = ( int16_t )wAux;
 800539a:	b21c      	sxth	r4, r3
 800539c:	800c      	strh	r4, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800539e:	b29b      	uxth	r3, r3
 80053a0:	e789      	b.n	80052b6 <R3_2_GetPhaseCurrents+0x62>
  pHandle->_Super.Ia = pStator_Currents->a;
 80053a2:	f9b1 4000 	ldrsh.w	r4, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 80053a6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80053aa:	880b      	ldrh	r3, [r1, #0]
 80053ac:	884a      	ldrh	r2, [r1, #2]
 80053ae:	e782      	b.n	80052b6 <R3_2_GetPhaseCurrents+0x62>
 80053b0:	ffff8001 	.word	0xffff8001

080053b4 <R3_2_HFCurrentsPolarizationAB>:
  * @retval It always returns {0,0} in ab_t format
  */
void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80053b4:	6f43      	ldr	r3, [r0, #116]	@ 0x74
{
 80053b6:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80053b8:	689c      	ldr	r4, [r3, #8]
 80053ba:	6a22      	ldr	r2, [r4, #32]
 80053bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053c0:	6222      	str	r2, [r4, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80053c2:	f890 2070 	ldrb.w	r2, [r0, #112]	@ 0x70
 80053c6:	2a0f      	cmp	r2, #15
 80053c8:	d813      	bhi.n	80053f2 <R3_2_HFCurrentsPolarizationAB+0x3e>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80053ca:	f890 4071 	ldrb.w	r4, [r0, #113]	@ 0x71
 80053ce:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80053d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80053d4:	699c      	ldr	r4, [r3, #24]
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80053d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80053d8:	6824      	ldr	r4, [r4, #0]
 80053da:	4422      	add	r2, r4
 80053dc:	65c2      	str	r2, [r0, #92]	@ 0x5c
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80053de:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 80053e0:	f890 3070 	ldrb.w	r3, [r0, #112]	@ 0x70
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80053e4:	6e02      	ldr	r2, [r0, #96]	@ 0x60
    pHandle->PolarizationCounter++;
 80053e6:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80053e8:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80053ea:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80053ec:	6602      	str	r2, [r0, #96]	@ 0x60
    pHandle->PolarizationCounter++;
 80053ee:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
  }

  /* during offset Polarization no current is flowing in the phases */
  pStator_Currents->a = 0;
 80053f2:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 80053f4:	bc10      	pop	{r4}
  pStator_Currents->a = 0;
 80053f6:	600b      	str	r3, [r1, #0]
}
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop

080053fc <R3_2_HFCurrentsPolarizationC>:
  *         the offset computation.
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval It always returns {0,0} in ab_t format
  */
void R3_2_HFCurrentsPolarizationC( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 80053fc:	b410      	push	{r4}
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;  
 80053fe:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 8005400:	68a2      	ldr	r2, [r4, #8]
 8005402:	6a13      	ldr	r3, [r2, #32]
 8005404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005408:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800540a:	f890 3070 	ldrb.w	r3, [r0, #112]	@ 0x70
 800540e:	2b0f      	cmp	r3, #15
 8005410:	d80e      	bhi.n	8005430 <R3_2_HFCurrentsPolarizationC+0x34>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8005412:	f890 2071 	ldrb.w	r2, [r0, #113]	@ 0x71
 8005416:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8005418:	320c      	adds	r2, #12
 800541a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	441a      	add	r2, r3
    pHandle->PolarizationCounter++;
 8005422:	f890 3070 	ldrb.w	r3, [r0, #112]	@ 0x70
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8005426:	6642      	str	r2, [r0, #100]	@ 0x64
    pHandle->PolarizationCounter++;
 8005428:	3301      	adds	r3, #1
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
  }

  /* during offset Polarization no current is flowing in the phases */
  pStator_Currents->a = 0;
 8005430:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8005432:	bc10      	pop	{r4}
  pStator_Currents->a = 0;
 8005434:	600b      	str	r3, [r1, #0]
}
 8005436:	4770      	bx	lr

08005438 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param pHdl: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl)
{
 8005438:	4603      	mov	r3, r0
 800543a:	b410      	push	{r4}
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;

  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800543c:	f890 0071 	ldrb.w	r0, [r0, #113]	@ 0x71
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005440:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8005442:	f883 003a 	strb.w	r0, [r3, #58]	@ 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005446:	6892      	ldr	r2, [r2, #8]

  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 8005448:	f8b3 106c 	ldrh.w	r1, [r3, #108]	@ 0x6c
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 800544c:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 800544e:	8e98      	ldrh	r0, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 8005450:	3901      	subs	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005452:	6354      	str	r4, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005454:	6390      	str	r0, [r2, #56]	@ 0x38
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 8005456:	8edc      	ldrh	r4, [r3, #54]	@ 0x36
  if ( pHandle->_Super.SWerror == 1u )
 8005458:	8f18      	ldrh	r0, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 800545a:	b289      	uxth	r1, r1
  WRITE_REG(TIMx->CCR3, CompareValue);
 800545c:	63d4      	str	r4, [r2, #60]	@ 0x3c
  if ( pHandle->_Super.SWerror == 1u )
 800545e:	2801      	cmp	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005460:	6411      	str	r1, [r2, #64]	@ 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005462:	6a12      	ldr	r2, [r2, #32]
    pHandle->_Super.SWerror = 0u;
 8005464:	bf0c      	ite	eq
 8005466:	2200      	moveq	r2, #0
 8005468:	f3c2 3000 	ubfxne	r0, r2, #12, #1
}
 800546c:	bc10      	pop	{r4}
    pHandle->_Super.SWerror = 0u;
 800546e:	bf08      	it	eq
 8005470:	871a      	strheq	r2, [r3, #56]	@ 0x38
}
 8005472:	4770      	bx	lr

08005474 <R3_2_SetADCSampPointSectX>:
  *         And call the WriteTIMRegisters method.
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak uint16_t R3_2_SetADCSampPointSectX( PWMC_Handle_t * pHdl )
{
 8005474:	4603      	mov	r3, r0
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;

  /* Set CC4 as PWM mode 2 (default) */
  pHandle->PWM_Mode = LL_TIM_OCMODE_PWM2;
 8005476:	2270      	movs	r2, #112	@ 0x70
{
 8005478:	b510      	push	{r4, lr}
  uint16_t hCntSmp;
  uint16_t hDeltaDuty;
  register uint16_t lowDuty = pHdl->lowDuty;
 800547a:	8f80      	ldrh	r0, [r0, #60]	@ 0x3c
  register uint16_t midDuty = pHdl->midDuty;

  /* Check if sampling AB in the middle of PWM is possible */
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->Tafter )
 800547c:	f8b3 e06c 	ldrh.w	lr, [r3, #108]	@ 0x6c
 8005480:	6f5c      	ldr	r4, [r3, #116]	@ 0x74
  pHandle->PWM_Mode = LL_TIM_OCMODE_PWM2;
 8005482:	669a      	str	r2, [r3, #104]	@ 0x68
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->Tafter )
 8005484:	ebae 0100 	sub.w	r1, lr, r0
 8005488:	f8b4 2084 	ldrh.w	r2, [r4, #132]	@ 0x84
 800548c:	b289      	uxth	r1, r1
 800548e:	4291      	cmp	r1, r2
  register uint16_t midDuty = pHdl->midDuty;
 8005490:	f8b3 c03e 	ldrh.w	ip, [r3, #62]	@ 0x3e
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->Tafter )
 8005494:	d916      	bls.n	80054c4 <R3_2_SetADCSampPointSectX+0x50>
     * (AB are chosen) for all sectors in order to not induce current discontinuities when there are differences
     * between offsets */

    /* sector number needed by GetPhaseCurrent, phase A and B are sampled wIch corresponds
     * to sector 4 */
    pHandle->_Super.Sector = SECTOR_4;
 8005496:	2103      	movs	r1, #3

    /* set sampling  point trigger in the middle of PWM period */
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8005498:	f10e 32ff 	add.w	r2, lr, #4294967295
 800549c:	b292      	uxth	r2, r2
    pHandle->_Super.Sector = SECTOR_4;
 800549e:	f883 103a 	strb.w	r1, [r3, #58]	@ 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80054a2:	68a1      	ldr	r1, [r4, #8]
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 80054a4:	8e98      	ldrh	r0, [r3, #52]	@ 0x34
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 80054a6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 80054a8:	634c      	str	r4, [r1, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80054aa:	6388      	str	r0, [r1, #56]	@ 0x38
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 80054ac:	8edc      	ldrh	r4, [r3, #54]	@ 0x36
  if ( pHandle->_Super.SWerror == 1u )
 80054ae:	8f18      	ldrh	r0, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80054b0:	63cc      	str	r4, [r1, #60]	@ 0x3c
 80054b2:	2801      	cmp	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80054b4:	640a      	str	r2, [r1, #64]	@ 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80054b6:	6a0a      	ldr	r2, [r1, #32]
    pHandle->_Super.SWerror = 0u;
 80054b8:	bf0a      	itet	eq
 80054ba:	2200      	moveq	r2, #0
 80054bc:	f3c2 3000 	ubfxne	r0, r2, #12, #1
 80054c0:	871a      	strheq	r2, [r3, #56]	@ 0x38
      }
    }
  }

  return R3_2_WriteTIMRegisters( &pHandle->_Super, hCntSmp );
}
 80054c2:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80054c4:	eba0 0c0c 	sub.w	ip, r0, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80054c8:	fa1f fc8c 	uxth.w	ip, ip
 80054cc:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
 80054d0:	d904      	bls.n	80054dc <R3_2_SetADCSampPointSectX+0x68>
      hCntSmp = lowDuty - pHandle->pParams_str->Tbefore;
 80054d2:	f8b4 2086 	ldrh.w	r2, [r4, #134]	@ 0x86
 80054d6:	1a80      	subs	r0, r0, r2
 80054d8:	b282      	uxth	r2, r0
 80054da:	e7e2      	b.n	80054a2 <R3_2_SetADCSampPointSectX+0x2e>
      hCntSmp = lowDuty + pHandle->pParams_str->Tafter;
 80054dc:	4402      	add	r2, r0
 80054de:	b292      	uxth	r2, r2
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80054e0:	4596      	cmp	lr, r2
 80054e2:	d8de      	bhi.n	80054a2 <R3_2_SetADCSampPointSectX+0x2e>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80054e4:	43d2      	mvns	r2, r2
        pHandle->PWM_Mode = LL_TIM_OCMODE_PWM1;
 80054e6:	2160      	movs	r1, #96	@ 0x60
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80054e8:	eb02 024e 	add.w	r2, r2, lr, lsl #1
        pHandle->PWM_Mode = LL_TIM_OCMODE_PWM1;
 80054ec:	6699      	str	r1, [r3, #104]	@ 0x68
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80054ee:	b292      	uxth	r2, r2
 80054f0:	e7d7      	b.n	80054a2 <R3_2_SetADCSampPointSectX+0x2e>
 80054f2:	bf00      	nop

080054f4 <R3_2_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80054f4:	6f41      	ldr	r1, [r0, #116]	@ 0x74
{
 80054f6:	b470      	push	{r4, r5, r6}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80054f8:	e9d1 2500 	ldrd	r2, r5, [r1]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80054fc:	688b      	ldr	r3, [r1, #8]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80054fe:	681c      	ldr	r4, [r3, #0]
 8005500:	f024 0401 	bic.w	r4, r4, #1
 8005504:	601c      	str	r4, [r3, #0]
  if ( (pHandle->pParams_str->EmergencyStop) != DISABLE )
 8005506:	f891 108a 	ldrb.w	r1, [r1, #138]	@ 0x8a
 800550a:	b131      	cbz	r1, 800551a <R3_2_Init+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800550c:	f06f 0180 	mvn.w	r1, #128	@ 0x80
 8005510:	6119      	str	r1, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8005512:	68d9      	ldr	r1, [r3, #12]
 8005514:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8005518:	60d9      	str	r1, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800551a:	6959      	ldr	r1, [r3, #20]
 800551c:	f041 0101 	orr.w	r1, r1, #1
 8005520:	6159      	str	r1, [r3, #20]
  SET_BIT(TIMx->CCER, Channels);
 8005522:	6a19      	ldr	r1, [r3, #32]
 8005524:	f441 61aa 	orr.w	r1, r1, #1360	@ 0x550
 8005528:	f041 0105 	orr.w	r1, r1, #5
 800552c:	6219      	str	r1, [r3, #32]
  if ( TIMx == TIM1 )
 800552e:	4912      	ldr	r1, [pc, #72]	@ (8005578 <R3_2_Init+0x84>)
 8005530:	428b      	cmp	r3, r1
 8005532:	d017      	beq.n	8005564 <R3_2_Init+0x70>
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8005534:	f06f 0604 	mvn.w	r6, #4
  pHandle->OverCurrentFlag = false;
 8005538:	2100      	movs	r1, #0
  pHandle->PWM_Mode = LL_TIM_OCMODE_PWM2;
 800553a:	2470      	movs	r4, #112	@ 0x70
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800553c:	6893      	ldr	r3, [r2, #8]
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	6093      	str	r3, [r2, #8]
 8005544:	68ab      	ldr	r3, [r5, #8]
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	60ab      	str	r3, [r5, #8]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800554c:	6016      	str	r6, [r2, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800554e:	6853      	ldr	r3, [r2, #4]
 8005550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005554:	6053      	str	r3, [r2, #4]
 8005556:	6684      	str	r4, [r0, #104]	@ 0x68
  pHandle->OverCurrentFlag = false;
 8005558:	f880 1072 	strb.w	r1, [r0, #114]	@ 0x72
  pHandle->_Super.DTTest = 0u;
 800555c:	f8a0 104e 	strh.w	r1, [r0, #78]	@ 0x4e
}
 8005560:	bc70      	pop	{r4, r5, r6}
 8005562:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->CR, Periphs);
 8005564:	4905      	ldr	r1, [pc, #20]	@ (800557c <R3_2_Init+0x88>)
 8005566:	684b      	ldr	r3, [r1, #4]
 8005568:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800556c:	604b      	str	r3, [r1, #4]
    pHandle->ADC_ExternalTriggerInjected = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 800556e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005572:	f8a0 306e 	strh.w	r3, [r0, #110]	@ 0x6e
 8005576:	e7dd      	b.n	8005534 <R3_2_Init+0x40>
 8005578:	40012c00 	.word	0x40012c00
 800557c:	e0042000 	.word	0xe0042000

08005580 <R3_2_TurnOnLowSides>:
{
 8005580:	b410      	push	{r4}
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005582:	2200      	movs	r2, #0
  pHandle->_Super.TurnOnLowSidesAction = true;
 8005584:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005588:	f06f 0401 	mvn.w	r4, #1
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 800558c:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 800558e:	688b      	ldr	r3, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8005590:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
 8005594:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005596:	635a      	str	r2, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005598:	639a      	str	r2, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800559a:	63da      	str	r2, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	07d2      	lsls	r2, r2, #31
 80055a0:	d5fc      	bpl.n	800559c <R3_2_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80055a2:	f06f 0201 	mvn.w	r2, #1
 80055a6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80055a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055ae:	645a      	str	r2, [r3, #68]	@ 0x44
  if ( (pHandle->pParams_str->LowSideOutputs) == ES_GPIO )
 80055b0:	f891 3088 	ldrb.w	r3, [r1, #136]	@ 0x88
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d001      	beq.n	80055bc <R3_2_TurnOnLowSides+0x3c>
}
 80055b8:	bc10      	pop	{r4}
 80055ba:	4770      	bx	lr
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80055bc:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80055c0:	68cc      	ldr	r4, [r1, #12]
 80055c2:	e9d1 021e 	ldrd	r0, r2, [r1, #120]	@ 0x78
 80055c6:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80055ca:	f3c0 200f 	ubfx	r0, r0, #8, #16
 80055ce:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80055d2:	6120      	str	r0, [r4, #16]
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80055d4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
}
 80055d8:	bc10      	pop	{r4}
 80055da:	6102      	str	r2, [r0, #16]
 80055dc:	610b      	str	r3, [r1, #16]
 80055de:	4770      	bx	lr

080055e0 <R3_2_SwitchOnPWM>:
  pHandle->_Super.TurnOnLowSidesAction = false;
 80055e0:	2200      	movs	r2, #0
{  
 80055e2:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80055e4:	f06f 0401 	mvn.w	r4, #1
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80055e8:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 80055ea:	688b      	ldr	r3, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80055ec:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80055f0:	f8b0 206c 	ldrh.w	r2, [r0, #108]	@ 0x6c
 80055f4:	0850      	lsrs	r0, r2, #1
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80055f6:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80055f8:	6358      	str	r0, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80055fa:	6398      	str	r0, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80055fc:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80055fe:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005600:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	07d2      	lsls	r2, r2, #31
 8005606:	d5fc      	bpl.n	8005602 <R3_2_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005608:	f06f 0201 	mvn.w	r2, #1
 800560c:	611a      	str	r2, [r3, #16]
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800560e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005610:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005614:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005616:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005618:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800561c:	645a      	str	r2, [r3, #68]	@ 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800561e:	f891 2088 	ldrb.w	r2, [r1, #136]	@ 0x88
 8005622:	2a02      	cmp	r2, #2
 8005624:	d008      	beq.n	8005638 <R3_2_SwitchOnPWM+0x58>
}
 8005626:	bcf0      	pop	{r4, r5, r6, r7}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005628:	f06f 0201 	mvn.w	r2, #1
 800562c:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	60da      	str	r2, [r3, #12]
 8005636:	4770      	bx	lr
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005638:	f240 5c55 	movw	ip, #1365	@ 0x555
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800563c:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8005640:	6a1d      	ldr	r5, [r3, #32]
 8005642:	f8d1 2080 	ldr.w	r2, [r1, #128]	@ 0x80
 8005646:	6fc8      	ldr	r0, [r1, #124]	@ 0x7c
 8005648:	6f8c      	ldr	r4, [r1, #120]	@ 0x78
 800564a:	ea3c 0c05 	bics.w	ip, ip, r5
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800564e:	6949      	ldr	r1, [r1, #20]
 8005650:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8005654:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8005658:	f3c4 240f 	ubfx	r4, r4, #8, #16
 800565c:	d003      	beq.n	8005666 <R3_2_SwitchOnPWM+0x86>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800565e:	617c      	str	r4, [r7, #20]
 8005660:	6170      	str	r0, [r6, #20]
 8005662:	614a      	str	r2, [r1, #20]
}
 8005664:	e7df      	b.n	8005626 <R3_2_SwitchOnPWM+0x46>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8005666:	613c      	str	r4, [r7, #16]
 8005668:	6130      	str	r0, [r6, #16]
 800566a:	610a      	str	r2, [r1, #16]
}
 800566c:	e7db      	b.n	8005626 <R3_2_SwitchOnPWM+0x46>
 800566e:	bf00      	nop

08005670 <R3_2_SwitchOffPWM>:
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005670:	f04f 0c00 	mov.w	ip, #0
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 8005674:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 8005676:	6893      	ldr	r3, [r2, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005678:	68d9      	ldr	r1, [r3, #12]
 800567a:	f021 0101 	bic.w	r1, r1, #1
 800567e:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005680:	6c59      	ldr	r1, [r3, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005682:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
 8005686:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 800568a:	6459      	str	r1, [r3, #68]	@ 0x44
  if ( (pHandle->pParams_str->LowSideOutputs) == ES_GPIO )
 800568c:	f892 1088 	ldrb.w	r1, [r2, #136]	@ 0x88
 8005690:	2902      	cmp	r1, #2
 8005692:	d009      	beq.n	80056a8 <R3_2_SwitchOffPWM+0x38>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005694:	f06f 0201 	mvn.w	r2, #1
 8005698:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	07d2      	lsls	r2, r2, #31
 800569e:	d5fc      	bpl.n	800569a <R3_2_SwitchOffPWM+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80056a0:	f06f 0201 	mvn.w	r2, #1
 80056a4:	611a      	str	r2, [r3, #16]
 80056a6:	4770      	bx	lr
{ 
 80056a8:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80056aa:	e9d2 401e 	ldrd	r4, r0, [r2, #120]	@ 0x78
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80056ae:	68d5      	ldr	r5, [r2, #12]
 80056b0:	f3c4 240f 	ubfx	r4, r4, #8, #16
 80056b4:	f8d2 1080 	ldr.w	r1, [r2, #128]	@ 0x80
 80056b8:	616c      	str	r4, [r5, #20]
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80056ba:	e9d2 5404 	ldrd	r5, r4, [r2, #16]
 80056be:	f06f 0201 	mvn.w	r2, #1
 80056c2:	f3c0 200f 	ubfx	r0, r0, #8, #16
 80056c6:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80056ca:	6168      	str	r0, [r5, #20]
 80056cc:	6161      	str	r1, [r4, #20]
 80056ce:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	07d1      	lsls	r1, r2, #31
 80056d4:	d5fc      	bpl.n	80056d0 <R3_2_SwitchOffPWM+0x60>
}
 80056d6:	bc30      	pop	{r4, r5}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80056d8:	f06f 0201 	mvn.w	r2, #1
 80056dc:	611a      	str	r2, [r3, #16]
 80056de:	4770      	bx	lr

080056e0 <R3_2_CurrentReadingPolarization>:
{
 80056e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  pHandle->PhaseAOffset = 0u;
 80056e4:	2600      	movs	r6, #0
  pHandle->PolarizationSector = SECTOR_4;
 80056e6:	2703      	movs	r7, #3
{
 80056e8:	4604      	mov	r4, r0
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80056ea:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 80056ec:	4937      	ldr	r1, [pc, #220]	@ (80057cc <R3_2_CurrentReadingPolarization+0xec>)
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80056ee:	689d      	ldr	r5, [r3, #8]
  pHandle->PhaseAOffset = 0u;
 80056f0:	e9c0 6617 	strd	r6, r6, [r0, #92]	@ 0x5c
  pHandle->PolarizationCounter = 0u;
 80056f4:	f880 6070 	strb.w	r6, [r0, #112]	@ 0x70
  CLEAR_BIT(TIMx->CCER, Channels);
 80056f8:	6a2b      	ldr	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 80056fa:	4a35      	ldr	r2, [pc, #212]	@ (80057d0 <R3_2_CurrentReadingPolarization+0xf0>)
 80056fc:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 8005700:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 8005704:	6646      	str	r6, [r0, #100]	@ 0x64
 8005706:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8005708:	6041      	str	r1, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800570a:	6182      	str	r2, [r0, #24]
  pHandle->PolarizationSector = SECTOR_4;
 800570c:	f880 7071 	strb.w	r7, [r0, #113]	@ 0x71
  pHandle->_Super.Sector = SECTOR_4;
 8005710:	f880 703a 	strb.w	r7, [r0, #58]	@ 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8005714:	f7ff ff64 	bl	80055e0 <R3_2_SwitchOnPWM>
  						  pHandle->pParams_str->RepetitionCounter,
 8005718:	6f63      	ldr	r3, [r4, #116]	@ 0x74
  waitForPolarizationEnd( TIMx,
 800571a:	f104 0838 	add.w	r8, r4, #56	@ 0x38
 800571e:	f104 0970 	add.w	r9, r4, #112	@ 0x70
 8005722:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 8005726:	4641      	mov	r1, r8
 8005728:	464b      	mov	r3, r9
 800572a:	4628      	mov	r0, r5
 800572c:	f7ff fc2c 	bl	8004f88 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8005730:	4620      	mov	r0, r4
 8005732:	f7ff ff9d 	bl	8005670 <R3_2_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8005736:	4b27      	ldr	r3, [pc, #156]	@ (80057d4 <R3_2_CurrentReadingPolarization+0xf4>)
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8005738:	4620      	mov	r0, r4
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800573a:	6063      	str	r3, [r4, #4]
  pHandle->PolarizationCounter = 0u;
 800573c:	f884 6070 	strb.w	r6, [r4, #112]	@ 0x70
  pHandle->PolarizationSector = SECTOR_1;
 8005740:	f884 6071 	strb.w	r6, [r4, #113]	@ 0x71
  pHandle->_Super.Sector = SECTOR_1;  
 8005744:	f884 603a 	strb.w	r6, [r4, #58]	@ 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8005748:	f7ff ff4a 	bl	80055e0 <R3_2_SwitchOnPWM>
  						  pHandle->pParams_str->RepetitionCounter,
 800574c:	6f62      	ldr	r2, [r4, #116]	@ 0x74
  waitForPolarizationEnd( TIMx,
 800574e:	464b      	mov	r3, r9
 8005750:	4641      	mov	r1, r8
 8005752:	f892 2089 	ldrb.w	r2, [r2, #137]	@ 0x89
 8005756:	4628      	mov	r0, r5
 8005758:	f7ff fc16 	bl	8004f88 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 800575c:	4620      	mov	r0, r4
 800575e:	f7ff ff87 	bl	8005670 <R3_2_SwitchOffPWM>
  pHandle->PhaseAOffset /= (NB_CONVERSIONS/2);
 8005762:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 8005764:	4a1c      	ldr	r2, [pc, #112]	@ (80057d8 <R3_2_CurrentReadingPolarization+0xf8>)
  pHandle->PhaseAOffset /= (NB_CONVERSIONS/2);
 8005766:	40fb      	lsrs	r3, r7
 8005768:	65e3      	str	r3, [r4, #92]	@ 0x5c
  pHandle->PhaseBOffset /= (NB_CONVERSIONS/2);
 800576a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 800576c:	61a2      	str	r2, [r4, #24]
  pHandle->PhaseBOffset /= (NB_CONVERSIONS/2);
 800576e:	40fb      	lsrs	r3, r7
 8005770:	6623      	str	r3, [r4, #96]	@ 0x60
  pHandle->PhaseCOffset /= (NB_CONVERSIONS/2);
 8005772:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8005774:	4919      	ldr	r1, [pc, #100]	@ (80057dc <R3_2_CurrentReadingPolarization+0xfc>)
  pHandle->PhaseCOffset /= (NB_CONVERSIONS/2);
 8005776:	40fb      	lsrs	r3, r7
 8005778:	6663      	str	r3, [r4, #100]	@ 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800577a:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1(TIMx,pHandle->Half_PWMPeriod);
 800577c:	f8b4 306c 	ldrh.w	r3, [r4, #108]	@ 0x6c
 8005780:	f022 0208 	bic.w	r2, r2, #8
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8005784:	6061      	str	r1, [r4, #4]
 8005786:	61aa      	str	r2, [r5, #24]
 8005788:	69aa      	ldr	r2, [r5, #24]
 800578a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800578e:	61aa      	str	r2, [r5, #24]
 8005790:	69ea      	ldr	r2, [r5, #28]
 8005792:	f022 0208 	bic.w	r2, r2, #8
 8005796:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005798:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800579a:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800579c:	63eb      	str	r3, [r5, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800579e:	69ab      	ldr	r3, [r5, #24]
 80057a0:	f043 0308 	orr.w	r3, r3, #8
 80057a4:	61ab      	str	r3, [r5, #24]
 80057a6:	69ab      	ldr	r3, [r5, #24]
 80057a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80057ac:	61ab      	str	r3, [r5, #24]
 80057ae:	69eb      	ldr	r3, [r5, #28]
 80057b0:	f043 0308 	orr.w	r3, r3, #8
 80057b4:	61eb      	str	r3, [r5, #28]
  pHandle->_Super.Sector = SECTOR_4;
 80057b6:	f884 703a 	strb.w	r7, [r4, #58]	@ 0x3a
  SET_BIT(TIMx->CCER, Channels);
 80057ba:	6a2b      	ldr	r3, [r5, #32]
 80057bc:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 80057c0:	f043 0305 	orr.w	r3, r3, #5
 80057c4:	622b      	str	r3, [r5, #32]
}
 80057c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ca:	bf00      	nop
 80057cc:	080053b5 	.word	0x080053b5
 80057d0:	08005439 	.word	0x08005439
 80057d4:	080053fd 	.word	0x080053fd
 80057d8:	08005475 	.word	0x08005475
 80057dc:	08005255 	.word	0x08005255

080057e0 <R3_2_TIMx_UP_IRQHandler>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_2_TIMx_UP_IRQHandler( PWMC_R3_2_Handle_t * pHandle)
{
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80057e0:	6f41      	ldr	r1, [r0, #116]	@ 0x74
{
 80057e2:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80057e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTTRIG);
 80057e8:	6895      	ldr	r5, [r2, #8]
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80057ea:	688c      	ldr	r4, [r1, #8]
 80057ec:	f425 4500 	bic.w	r5, r5, #32768	@ 0x8000
 80057f0:	6095      	str	r5, [r2, #8]
 80057f2:	689d      	ldr	r5, [r3, #8]
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 80057f4:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	@ 0x6e
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTTRIG);
 80057f8:	f425 4500 	bic.w	r5, r5, #32768	@ 0x8000
 80057fc:	609d      	str	r5, [r3, #8]
  /* Disabling trigger to avoid unwanted conversion */
  LL_ADC_INJ_StopConversionExtTrig(ADCx_1);
  LL_ADC_INJ_StopConversionExtTrig(ADCx_2);

  /* Set next current channel according to sector  */
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector];
 80057fe:	f890 503a 	ldrb.w	r5, [r0, #58]	@ 0x3a
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 8005802:	f40c 4ce0 	and.w	ip, ip, #28672	@ 0x7000
 8005806:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800580a:	6c8d      	ldr	r5, [r1, #72]	@ 0x48
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector];
 800580c:	6e09      	ldr	r1, [r1, #96]	@ 0x60
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector];
 800580e:	6395      	str	r5, [r2, #56]	@ 0x38
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector];
 8005810:	6399      	str	r1, [r3, #56]	@ 0x38
 8005812:	6a21      	ldr	r1, [r4, #32]
  
  /* Set edge detection trigger according to PWM Mode 1 or 2 */
  LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH4, pHandle->PWM_Mode);

  return &( pHandle->_Super.Motor );
}
 8005814:	3046      	adds	r0, #70	@ 0x46
 8005816:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 800581a:	6221      	str	r1, [r4, #32]
 800581c:	6891      	ldr	r1, [r2, #8]
 800581e:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005822:	ea41 010c 	orr.w	r1, r1, ip
 8005826:	6091      	str	r1, [r2, #8]
 8005828:	6899      	ldr	r1, [r3, #8]
 800582a:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800582e:	ea41 010c 	orr.w	r1, r1, ip
 8005832:	6099      	str	r1, [r3, #8]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8005834:	6891      	ldr	r1, [r2, #8]
 8005836:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800583a:	6091      	str	r1, [r2, #8]
 800583c:	689a      	ldr	r2, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800583e:	f8d0 1022 	ldr.w	r1, [r0, #34]	@ 0x22
 8005842:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	69e3      	ldr	r3, [r4, #28]
 800584a:	f423 43e6 	bic.w	r3, r3, #29440	@ 0x7300
 800584e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005852:	61e3      	str	r3, [r4, #28]
 8005854:	bc30      	pop	{r4, r5}
 8005856:	4770      	bx	lr

08005858 <R3_2_BRK_IRQHandler>:
 * @retval none
 */
__weak void *R3_2_BRK_IRQHandler(PWMC_R3_2_Handle_t *pHandle)
{

  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8005858:	6f42      	ldr	r2, [r0, #116]	@ 0x74
{
 800585a:	4603      	mov	r3, r0
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800585c:	f892 1088 	ldrb.w	r1, [r2, #136]	@ 0x88
 8005860:	2902      	cmp	r1, #2
 8005862:	d004      	beq.n	800586e <R3_2_BRK_IRQHandler+0x16>
  {
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
  }
  pHandle->OverCurrentFlag = true;
 8005864:	2201      	movs	r2, #1

  return &(pHandle->_Super.Motor);
}
 8005866:	3046      	adds	r0, #70	@ 0x46
  pHandle->OverCurrentFlag = true;
 8005868:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
}
 800586c:	4770      	bx	lr
{
 800586e:	b430      	push	{r4, r5}
 8005870:	e9d2 401e 	ldrd	r4, r0, [r2, #120]	@ 0x78
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8005874:	68d5      	ldr	r5, [r2, #12]
 8005876:	f3c4 240f 	ubfx	r4, r4, #8, #16
 800587a:	f8d2 1080 	ldr.w	r1, [r2, #128]	@ 0x80
 800587e:	616c      	str	r4, [r5, #20]
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005880:	e9d2 5404 	ldrd	r5, r4, [r2, #16]
  pHandle->OverCurrentFlag = true;
 8005884:	2201      	movs	r2, #1
 8005886:	f3c0 200f 	ubfx	r0, r0, #8, #16
 800588a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800588e:	6168      	str	r0, [r5, #20]
 8005890:	6161      	str	r1, [r4, #20]
}
 8005892:	f103 0046 	add.w	r0, r3, #70	@ 0x46
  pHandle->OverCurrentFlag = true;
 8005896:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
}
 800589a:	bc30      	pop	{r4, r5}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop

080058a0 <R3_2_IsOverCurrentOccurred>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval uint16_t It returns MC_BREAK_IN whether an over current has been
  *                  detected since last method call, MC_NO_FAULTS otherwise.
  */
__weak uint16_t R3_2_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
 80058a0:	4602      	mov	r2, r0
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  uint16_t retVal = MC_NO_FAULTS;
  if (pHandle->OverCurrentFlag == true )
 80058a2:	f890 0072 	ldrb.w	r0, [r0, #114]	@ 0x72
 80058a6:	b118      	cbz	r0, 80058b0 <R3_2_IsOverCurrentOccurred+0x10>
  {
    retVal = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
 80058a8:	2300      	movs	r3, #0
    retVal = MC_BREAK_IN;
 80058aa:	2040      	movs	r0, #64	@ 0x40
    pHandle->OverCurrentFlag = false;
 80058ac:	f882 3072 	strb.w	r3, [r2, #114]	@ 0x72
  }
  return retVal;
}
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop

080058b4 <REMNG_Init>:
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
  pHandle->TargetFinal = 0;
 80058b4:	2300      	movs	r3, #0
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 80058b6:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 80058b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 80058bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 80058c0:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 80058c2:	4770      	bx	lr

080058c4 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 80058c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80058c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80058cc:	8182      	strh	r2, [r0, #12]
}
 80058ce:	4770      	bx	lr

080058d0 <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80058d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80058d4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80058d8:	81c2      	strh	r2, [r0, #14]
}
 80058da:	4770      	bx	lr

080058dc <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 80058dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80058e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80058e4:	8202      	strh	r2, [r0, #16]
}
 80058e6:	4770      	bx	lr

080058e8 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 80058e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80058ec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80058f0:	8980      	ldrh	r0, [r0, #12]
 80058f2:	4770      	bx	lr

080058f4 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 80058f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80058f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80058fc:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop

08005904 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8005904:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005908:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 800590c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop

08005914 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8005914:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop

0800591c <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 800591c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop

08005924 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8005924:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop

0800592c <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 800592c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop

08005934 <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable( SpeednPosFdbk_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 8005934:	4603      	mov	r3, r0
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8005936:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 800593a:	b510      	push	{r4, lr}
  {
    hAux = -( *pMecSpeedUnit );
 800593c:	fa1f f18c 	uxth.w	r1, ip
  if ( *pMecSpeedUnit < 0 )
 8005940:	f1bc 0f00 	cmp.w	ip, #0
    hAux = -( *pMecSpeedUnit );
 8005944:	bfb8      	it	lt
 8005946:	4249      	neglt	r1, r1
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005948:	f8b3 c016 	ldrh.w	ip, [r3, #22]
    hAux = -( *pMecSpeedUnit );
 800594c:	bfb8      	it	lt
 800594e:	b289      	uxthlt	r1, r1
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005950:	458c      	cmp	ip, r1
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005952:	78c0      	ldrb	r0, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005954:	781a      	ldrb	r2, [r3, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005956:	8a9c      	ldrh	r4, [r3, #20]
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005958:	d818      	bhi.n	800598c <SPD_IsMecSpeedReliable+0x58>
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800595a:	f9b3 e012 	ldrsh.w	lr, [r3, #18]
  {
    hAux = -( pHandle->hMecAccelUnitP );
 800595e:	fa1f fc8e 	uxth.w	ip, lr
  if ( pHandle->hMecAccelUnitP < 0 )
 8005962:	f1be 0f00 	cmp.w	lr, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8005966:	bfb8      	it	lt
 8005968:	f1cc 0c00 	rsblt	ip, ip, #0
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800596c:	f8b3 e018 	ldrh.w	lr, [r3, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 8005970:	bfb8      	it	lt
 8005972:	fa1f fc8c 	uxthlt.w	ip, ip
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8005976:	45e6      	cmp	lr, ip
 8005978:	d308      	bcc.n	800598c <SPD_IsMecSpeedReliable+0x58>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 800597a:	428c      	cmp	r4, r1
 800597c:	d306      	bcc.n	800598c <SPD_IsMecSpeedReliable+0x58>
      bSpeedErrorNumber++;
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800597e:	4290      	cmp	r0, r2
 8005980:	d809      	bhi.n	8005996 <SPD_IsMecSpeedReliable+0x62>
    {
      bSpeedErrorNumber = 0u;
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8005982:	1a10      	subs	r0, r2, r0
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005984:	701a      	strb	r2, [r3, #0]
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8005986:	bf18      	it	ne
 8005988:	2001      	movne	r0, #1

  return ( SpeedSensorReliability );
}
 800598a:	bd10      	pop	{r4, pc}
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800598c:	4290      	cmp	r0, r2
 800598e:	d9f8      	bls.n	8005982 <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber++;
 8005990:	3201      	adds	r2, #1
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	e7f5      	b.n	8005982 <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber = 0u;
 8005996:	2200      	movs	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005998:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 800599a:	2001      	movs	r0, #1
}
 800599c:	bd10      	pop	{r4, pc}
 800599e:	bf00      	nop

080059a0 <SPD_GetS16Speed>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
 80059a0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux *= INT16_MAX;
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80059a4:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
  wAux *= INT16_MAX;
 80059a8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80059ac:	fb93 f0f2 	sdiv	r0, r3, r2
  return ( int16_t )wAux;
}
 80059b0:	b200      	sxth	r0, r0
 80059b2:	4770      	bx	lr

080059b4 <STC_Init>:
  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
  pHandle->TargetFinal = 0;
 80059b4:	2300      	movs	r3, #0
{
 80059b6:	b410      	push	{r4}
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80059b8:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	@ 0x2c
  pHandle->PISpeed = pPI;
 80059bc:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80059be:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
  pHandle->Mode = pHandle->ModeDefault;
 80059c2:	f890 c02a 	ldrb.w	ip, [r0, #42]	@ 0x2a
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80059c6:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80059c8:	0409      	lsls	r1, r1, #16
 80059ca:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 80059ce:	f880 c000 	strb.w	ip, [r0]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 80059d2:	bc10      	pop	{r4}
  pHandle->SPD = SPD_Handle;
 80059d4:	6142      	str	r2, [r0, #20]
  pHandle->TargetFinal = 0;
 80059d6:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 80059d8:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80059da:	6183      	str	r3, [r0, #24]
}
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop

080059e0 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 80059e0:	6940      	ldr	r0, [r0, #20]
 80059e2:	4770      	bx	lr

080059e4 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 80059e4:	7803      	ldrb	r3, [r0, #0]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d000      	beq.n	80059ec <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 80059ea:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 80059ec:	2100      	movs	r1, #0
 80059ee:	6900      	ldr	r0, [r0, #16]
 80059f0:	f7ff ba14 	b.w	8004e1c <PID_SetIntegralTerm>

080059f4 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 80059f4:	6840      	ldr	r0, [r0, #4]
 80059f6:	2800      	cmp	r0, #0
 80059f8:	bfbc      	itt	lt
 80059fa:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 80059fe:	30ff      	addlt	r0, #255	@ 0xff
}
 8005a00:	1400      	asrs	r0, r0, #16
 8005a02:	4770      	bx	lr

08005a04 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8005a04:	6880      	ldr	r0, [r0, #8]
 8005a06:	2800      	cmp	r0, #0
 8005a08:	bfbc      	itt	lt
 8005a0a:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8005a0e:	30ff      	addlt	r0, #255	@ 0xff
}
 8005a10:	1400      	asrs	r0, r0, #16
 8005a12:	4770      	bx	lr

08005a14 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005a14:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8005a16:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005a18:	60c3      	str	r3, [r0, #12]
}
 8005a1a:	4770      	bx	lr

08005a1c <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8005a1c:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005a1e:	7803      	ldrb	r3, [r0, #0]
{
 8005a20:	4604      	mov	r4, r0
 8005a22:	460d      	mov	r5, r1
 8005a24:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005a26:	b323      	cbz	r3, 8005a72 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005a28:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005a2a:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	bfbc      	itt	lt
 8005a30:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8005a34:	30ff      	addlt	r0, #255	@ 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005a36:	428b      	cmp	r3, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005a38:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005a3c:	da01      	bge.n	8005a42 <STC_ExecRamp+0x26>
{
 8005a3e:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8005a42:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 8005a46:	428b      	cmp	r3, r1
 8005a48:	dcf9      	bgt.n	8005a3e <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8005a4a:	8c23      	ldrh	r3, [r4, #32]
 8005a4c:	428b      	cmp	r3, r1
 8005a4e:	dd03      	ble.n	8005a58 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8005a50:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 8005a54:	428b      	cmp	r3, r1
 8005a56:	dbf2      	blt.n	8005a3e <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8005a58:	b9ae      	cbnz	r6, 8005a86 <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005a5a:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005a5c:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005a5e:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8005a60:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005a64:	bf0c      	ite	eq
 8005a66:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8005a68:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8005a6a:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8005a6c:	61a3      	str	r3, [r4, #24]
{
 8005a6e:	2001      	movs	r0, #1
}
 8005a70:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8005a72:	f7ff ffc7 	bl	8005a04 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8005a76:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8005a78:	42ab      	cmp	r3, r5
 8005a7a:	dbe0      	blt.n	8005a3e <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8005a7c:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	dcdc      	bgt.n	8005a3e <STC_ExecRamp+0x22>
 8005a84:	e7e8      	b.n	8005a58 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005a86:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8005a88:	4a07      	ldr	r2, [pc, #28]	@ (8005aa8 <STC_ExecRamp+0x8c>)
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005a8a:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8005a8e:	fba2 2303 	umull	r2, r3, r2, r3
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8005a92:	1a28      	subs	r0, r5, r0
      wAux /= 1000u;
 8005a94:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8005a96:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8005a98:	0400      	lsls	r0, r0, #16
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8005a9a:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->TargetFinal = hTargetFinal;
 8005a9e:	8065      	strh	r5, [r4, #2]
      pHandle->RampRemainingStep++;
 8005aa0:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = wAux1;
 8005aa2:	61a0      	str	r0, [r4, #24]
 8005aa4:	e7e3      	b.n	8005a6e <STC_ExecRamp+0x52>
 8005aa6:	bf00      	nop
 8005aa8:	10624dd3 	.word	0x10624dd3

08005aac <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005ab0:	6183      	str	r3, [r0, #24]
}
 8005ab2:	4770      	bx	lr

08005ab4 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005ab4:	b570      	push	{r4, r5, r6, lr}
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005ab6:	7802      	ldrb	r2, [r0, #0]
{
 8005ab8:	4604      	mov	r4, r0
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005aba:	68c3      	ldr	r3, [r0, #12]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005abc:	b96a      	cbnz	r2, 8005ada <STC_CalcTorqueReference+0x26>
  if ( pHandle->RampRemainingStep > 1u )
 8005abe:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->TorqueRef;
 8005ac0:	6886      	ldr	r6, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 8005ac2:	d924      	bls.n	8005b0e <STC_CalcTorqueReference+0x5a>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8005ac4:	6982      	ldr	r2, [r0, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8005ac6:	3b01      	subs	r3, #1
    wCurrentReference += pHandle->IncDecAmount;
 8005ac8:	4416      	add	r6, r2
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8005aca:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8005acc:	60c3      	str	r3, [r0, #12]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8005ace:	4630      	mov	r0, r6
 8005ad0:	db21      	blt.n	8005b16 <STC_CalcTorqueReference+0x62>
 8005ad2:	1405      	asrs	r5, r0, #16
 8005ad4:	b228      	sxth	r0, r5
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005ad6:	60a6      	str	r6, [r4, #8]
  }

  return hTorqueReference;
}
 8005ad8:	bd70      	pop	{r4, r5, r6, pc}
  if ( pHandle->RampRemainingStep > 1u )
 8005ada:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->SpeedRefUnitExt;
 8005adc:	6846      	ldr	r6, [r0, #4]
  if ( pHandle->RampRemainingStep > 1u )
 8005ade:	d91e      	bls.n	8005b1e <STC_CalcTorqueReference+0x6a>
    wCurrentReference += pHandle->IncDecAmount;
 8005ae0:	6981      	ldr	r1, [r0, #24]
    pHandle->RampRemainingStep--;
 8005ae2:	3b01      	subs	r3, #1
    wCurrentReference += pHandle->IncDecAmount;
 8005ae4:	440e      	add	r6, r1
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005ae6:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8005ae8:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005aea:	4630      	mov	r0, r6
 8005aec:	db1b      	blt.n	8005b26 <STC_CalcTorqueReference+0x72>
 8005aee:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005af0:	2a01      	cmp	r2, #1
 8005af2:	d1ef      	bne.n	8005ad4 <STC_CalcTorqueReference+0x20>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8005af4:	6960      	ldr	r0, [r4, #20]
 8005af6:	f7ff ff15 	bl	8005924 <SPD_GetAvrgMecSpeedUnit>
 8005afa:	4601      	mov	r1, r0
    hError = hTargetSpeed - hMeasuredSpeed;
 8005afc:	1a69      	subs	r1, r5, r1
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8005afe:	6920      	ldr	r0, [r4, #16]
 8005b00:	b209      	sxth	r1, r1
 8005b02:	f7ff f997 	bl	8004e34 <PI_Controller>
    pHandle->SpeedRefUnitExt = wCurrentReference;
 8005b06:	6066      	str	r6, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005b08:	0406      	lsls	r6, r0, #16
 8005b0a:	60a6      	str	r6, [r4, #8]
}
 8005b0c:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8005b0e:	d014      	beq.n	8005b3a <STC_CalcTorqueReference+0x86>
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8005b10:	2e00      	cmp	r6, #0
 8005b12:	4630      	mov	r0, r6
 8005b14:	dadd      	bge.n	8005ad2 <STC_CalcTorqueReference+0x1e>
 8005b16:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8005b1a:	30ff      	adds	r0, #255	@ 0xff
 8005b1c:	e7d9      	b.n	8005ad2 <STC_CalcTorqueReference+0x1e>
  else if ( pHandle->RampRemainingStep == 1u )
 8005b1e:	d006      	beq.n	8005b2e <STC_CalcTorqueReference+0x7a>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005b20:	2e00      	cmp	r6, #0
 8005b22:	4630      	mov	r0, r6
 8005b24:	dae3      	bge.n	8005aee <STC_CalcTorqueReference+0x3a>
 8005b26:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8005b2a:	30ff      	adds	r0, #255	@ 0xff
 8005b2c:	e7df      	b.n	8005aee <STC_CalcTorqueReference+0x3a>
    pHandle->RampRemainingStep = 0u;
 8005b2e:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005b30:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8005b34:	60c3      	str	r3, [r0, #12]
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005b36:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8005b38:	e7da      	b.n	8005af0 <STC_CalcTorqueReference+0x3c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005b3a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8005b3e:	60c2      	str	r2, [r0, #12]
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005b40:	042e      	lsls	r6, r5, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005b42:	e7c7      	b.n	8005ad4 <STC_CalcTorqueReference+0x20>

08005b44 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8005b44:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop

08005b4c <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8005b4c:	8bc0      	ldrh	r0, [r0, #30]
 8005b4e:	4770      	bx	lr

08005b50 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8005b50:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	@ 0x24
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop

08005b58 <STC_GetDefaultIqdref>:
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
}
 8005b58:	f8d0 002e 	ldr.w	r0, [r0, #46]	@ 0x2e
{
 8005b5c:	b082      	sub	sp, #8
}
 8005b5e:	b002      	add	sp, #8
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop

08005b64 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005b64:	b510      	push	{r4, lr}
 8005b66:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8005b68:	6940      	ldr	r0, [r0, #20]
 8005b6a:	f7ff fedb 	bl	8005924 <SPD_GetAvrgMecSpeedUnit>
 8005b6e:	0400      	lsls	r0, r0, #16
 8005b70:	6060      	str	r0, [r4, #4]
}
 8005b72:	bd10      	pop	{r4, pc}

08005b74 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8005b78:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop

08005b80 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8005b80:	4684      	mov	ip, r0
 8005b82:	b500      	push	{lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005b84:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8005b86:	f8b0 e004 	ldrh.w	lr, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005b8a:	430b      	orrs	r3, r1
  State_t LocalState =  pHandle->bState;
 8005b8c:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005b8e:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8005b92:	ea41 010e 	orr.w	r1, r1, lr
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005b96:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8005b98:	280a      	cmp	r0, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005b9a:	f8ac 2002 	strh.w	r2, [ip, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8005b9e:	f8ac 1004 	strh.w	r1, [ip, #4]
  if ( LocalState == FAULT_NOW )
 8005ba2:	d008      	beq.n	8005bb6 <STM_FaultProcessing+0x36>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8005ba4:	b90a      	cbnz	r2, 8005baa <STM_FaultProcessing+0x2a>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8005ba6:	f85d fb04 	ldr.w	pc, [sp], #4
      pHandle->bState = FAULT_NOW;
 8005baa:	230a      	movs	r3, #10
 8005bac:	f88c 3000 	strb.w	r3, [ip]
      LocalState = FAULT_NOW;
 8005bb0:	200a      	movs	r0, #10
}
 8005bb2:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8005bb6:	2a00      	cmp	r2, #0
 8005bb8:	d1fa      	bne.n	8005bb0 <STM_FaultProcessing+0x30>
      pHandle->bState = FAULT_OVER;
 8005bba:	230b      	movs	r3, #11
 8005bbc:	f88c 3000 	strb.w	r3, [ip]
      LocalState = FAULT_OVER;
 8005bc0:	4618      	mov	r0, r3
}
 8005bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bc6:	bf00      	nop

08005bc8 <STM_NextState>:
{
 8005bc8:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8005bca:	7803      	ldrb	r3, [r0, #0]
{
 8005bcc:	4684      	mov	ip, r0
  switch ( bCurrentState )
 8005bce:	2b14      	cmp	r3, #20
 8005bd0:	d810      	bhi.n	8005bf4 <STM_NextState+0x2c>
 8005bd2:	e8df f003 	tbb	[pc, r3]
 8005bd6:	2a31      	.short	0x2a31
 8005bd8:	6064170d 	.word	0x6064170d
 8005bdc:	555a5d0d 	.word	0x555a5d0d
 8005be0:	0b520f0f 	.word	0x0b520f0f
 8005be4:	40474a4d 	.word	0x40474a4d
 8005be8:	393d      	.short	0x393d
 8005bea:	27          	.byte	0x27
 8005beb:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005bec:	290e      	cmp	r1, #14
 8005bee:	d00f      	beq.n	8005c10 <STM_NextState+0x48>
      if ( bState == ANY_STOP )
 8005bf0:	2907      	cmp	r1, #7
 8005bf2:	d00d      	beq.n	8005c10 <STM_NextState+0x48>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005bf4:	2907      	cmp	r1, #7
 8005bf6:	d80f      	bhi.n	8005c18 <STM_NextState+0x50>
 8005bf8:	238a      	movs	r3, #138	@ 0x8a
 8005bfa:	40cb      	lsrs	r3, r1
 8005bfc:	07db      	lsls	r3, r3, #31
 8005bfe:	d50b      	bpl.n	8005c18 <STM_NextState+0x50>
 8005c00:	2000      	movs	r0, #0
}
 8005c02:	bd08      	pop	{r3, pc}
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 8005c04:	2911      	cmp	r1, #17
 8005c06:	d807      	bhi.n	8005c18 <STM_NextState+0x50>
 8005c08:	4b28      	ldr	r3, [pc, #160]	@ (8005cac <STM_NextState+0xe4>)
 8005c0a:	40cb      	lsrs	r3, r1
 8005c0c:	07db      	lsls	r3, r3, #31
 8005c0e:	d5f1      	bpl.n	8005bf4 <STM_NextState+0x2c>
    pHandle->bState = bNewState;
 8005c10:	f88c 1000 	strb.w	r1, [ip]
  return ( bChangeState );
 8005c14:	2001      	movs	r0, #1
}
 8005c16:	bd08      	pop	{r3, pc}
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2180      	movs	r1, #128	@ 0x80
 8005c1c:	4660      	mov	r0, ip
 8005c1e:	f7ff ffaf 	bl	8005b80 <STM_FaultProcessing>
 8005c22:	e7ed      	b.n	8005c00 <STM_NextState+0x38>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8005c24:	2912      	cmp	r1, #18
 8005c26:	d1e3      	bne.n	8005bf0 <STM_NextState+0x28>
 8005c28:	e7f2      	b.n	8005c10 <STM_NextState+0x48>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8005c2a:	2907      	cmp	r1, #7
 8005c2c:	d0f0      	beq.n	8005c10 <STM_NextState+0x48>
 8005c2e:	f1a1 030d 	sub.w	r3, r1, #13
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d8de      	bhi.n	8005bf4 <STM_NextState+0x2c>
 8005c36:	e7eb      	b.n	8005c10 <STM_NextState+0x48>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005c38:	290c      	cmp	r1, #12
 8005c3a:	d8ed      	bhi.n	8005c18 <STM_NextState+0x50>
 8005c3c:	f241 030a 	movw	r3, #4106	@ 0x100a
 8005c40:	40cb      	lsrs	r3, r1
 8005c42:	07da      	lsls	r2, r3, #31
 8005c44:	d4e4      	bmi.n	8005c10 <STM_NextState+0x48>
 8005c46:	e7d5      	b.n	8005bf4 <STM_NextState+0x2c>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005c48:	1f0b      	subs	r3, r1, #4
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d8d0      	bhi.n	8005bf0 <STM_NextState+0x28>
 8005c4e:	e7df      	b.n	8005c10 <STM_NextState+0x48>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8005c50:	2904      	cmp	r1, #4
 8005c52:	d1cd      	bne.n	8005bf0 <STM_NextState+0x28>
 8005c54:	e7dc      	b.n	8005c10 <STM_NextState+0x48>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8005c56:	2914      	cmp	r1, #20
 8005c58:	d8de      	bhi.n	8005c18 <STM_NextState+0x50>
 8005c5a:	4b15      	ldr	r3, [pc, #84]	@ (8005cb0 <STM_NextState+0xe8>)
 8005c5c:	40cb      	lsrs	r3, r1
 8005c5e:	07d8      	lsls	r0, r3, #31
 8005c60:	d4d6      	bmi.n	8005c10 <STM_NextState+0x48>
 8005c62:	e7c7      	b.n	8005bf4 <STM_NextState+0x2c>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005c64:	2911      	cmp	r1, #17
 8005c66:	d1c3      	bne.n	8005bf0 <STM_NextState+0x28>
 8005c68:	e7d2      	b.n	8005c10 <STM_NextState+0x48>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8005c6a:	2902      	cmp	r1, #2
 8005c6c:	d1c0      	bne.n	8005bf0 <STM_NextState+0x28>
 8005c6e:	e7cf      	b.n	8005c10 <STM_NextState+0x48>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8005c70:	f001 03f7 	and.w	r3, r1, #247	@ 0xf7
 8005c74:	2b07      	cmp	r3, #7
 8005c76:	d1bd      	bne.n	8005bf4 <STM_NextState+0x2c>
 8005c78:	e7ca      	b.n	8005c10 <STM_NextState+0x48>
      if ( bState == IDLE )
 8005c7a:	2900      	cmp	r1, #0
 8005c7c:	d0c8      	beq.n	8005c10 <STM_NextState+0x48>
 8005c7e:	e7b9      	b.n	8005bf4 <STM_NextState+0x2c>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8005c80:	2900      	cmp	r1, #0
 8005c82:	d0c5      	beq.n	8005c10 <STM_NextState+0x48>
 8005c84:	290c      	cmp	r1, #12
 8005c86:	d1b5      	bne.n	8005bf4 <STM_NextState+0x2c>
 8005c88:	e7c2      	b.n	8005c10 <STM_NextState+0x48>
      if ( bState == STOP_IDLE )
 8005c8a:	2909      	cmp	r1, #9
 8005c8c:	d1b2      	bne.n	8005bf4 <STM_NextState+0x2c>
 8005c8e:	e7bf      	b.n	8005c10 <STM_NextState+0x48>
      if ( bState == STOP )
 8005c90:	2908      	cmp	r1, #8
 8005c92:	d1af      	bne.n	8005bf4 <STM_NextState+0x2c>
 8005c94:	e7bc      	b.n	8005c10 <STM_NextState+0x48>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8005c96:	1f8b      	subs	r3, r1, #6
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d8ab      	bhi.n	8005bf4 <STM_NextState+0x2c>
 8005c9c:	e7b8      	b.n	8005c10 <STM_NextState+0x48>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005c9e:	2913      	cmp	r1, #19
 8005ca0:	d8ba      	bhi.n	8005c18 <STM_NextState+0x50>
 8005ca2:	4b04      	ldr	r3, [pc, #16]	@ (8005cb4 <STM_NextState+0xec>)
 8005ca4:	40cb      	lsrs	r3, r1
 8005ca6:	07da      	lsls	r2, r3, #31
 8005ca8:	d4b2      	bmi.n	8005c10 <STM_NextState+0x48>
 8005caa:	e7a3      	b.n	8005bf4 <STM_NextState+0x2c>
 8005cac:	00030092 	.word	0x00030092
 8005cb0:	00140080 	.word	0x00140080
 8005cb4:	000800a0 	.word	0x000800a0

08005cb8 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8005cb8:	7800      	ldrb	r0, [r0, #0]
 8005cba:	4770      	bx	lr

08005cbc <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8005cbc:	7802      	ldrb	r2, [r0, #0]
{
 8005cbe:	4603      	mov	r3, r0
  if ( pHandle->bState == FAULT_OVER )
 8005cc0:	2a0b      	cmp	r2, #11
 8005cc2:	d001      	beq.n	8005cc8 <STM_FaultAcknowledged+0xc>
  bool bToBeReturned = false;
 8005cc4:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8005cc6:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8005cc8:	2109      	movs	r1, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005cca:	2200      	movs	r2, #0
    bToBeReturned = true;
 8005ccc:	2001      	movs	r0, #1
    pHandle->bState = STOP_IDLE;
 8005cce:	7019      	strb	r1, [r3, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005cd0:	809a      	strh	r2, [r3, #4]
    bToBeReturned = true;
 8005cd2:	4770      	bx	lr

08005cd4 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8005cd4:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8005cd6:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8005cd8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop

08005ce0 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8005ce0:	f7fe bbca 	b.w	8004478 <FCP_Init>

08005ce4 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005ce4:	f890 3097 	ldrb.w	r3, [r0, #151]	@ 0x97
{
 8005ce8:	4602      	mov	r2, r0
  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005cea:	b173      	cbz	r3, 8005d0a <UFCP_TX_IRQ_Handler+0x26>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8005cec:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005cf0:	f8d0 1120 	ldr.w	r1, [r0, #288]	@ 0x120
    switch ( pBaseHandle->TxFrameLevel )
 8005cf4:	b183      	cbz	r3, 8005d18 <UFCP_TX_IRQ_Handler+0x34>
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d008      	beq.n	8005d0c <UFCP_TX_IRQ_Handler+0x28>
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005cfa:	7d40      	ldrb	r0, [r0, #21]
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	4298      	cmp	r0, r3
 8005d00:	db10      	blt.n	8005d24 <UFCP_TX_IRQ_Handler+0x40>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8005d02:	18d0      	adds	r0, r2, r3
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8005d04:	7d00      	ldrb	r0, [r0, #20]
 8005d06:	6048      	str	r0, [r1, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005d08:	e002      	b.n	8005d10 <UFCP_TX_IRQ_Handler+0x2c>

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8005d0a:	4770      	bx	lr
 8005d0c:	7d40      	ldrb	r0, [r0, #21]
 8005d0e:	6048      	str	r0, [r1, #4]
      pBaseHandle->TxFrameLevel++;
 8005d10:	3301      	adds	r3, #1
 8005d12:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 8005d16:	4770      	bx	lr
 8005d18:	7d00      	ldrb	r0, [r0, #20]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	6048      	str	r0, [r1, #4]
 8005d1e:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 8005d22:	4770      	bx	lr
 8005d24:	f892 3096 	ldrb.w	r3, [r2, #150]	@ 0x96
 8005d28:	f101 000c 	add.w	r0, r1, #12
 8005d2c:	604b      	str	r3, [r1, #4]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	e850 3f00 	ldrex	r3, [r0]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	e840 3100 	strex	r1, r3, [r0]
 8005d3a:	2900      	cmp	r1, #0
 8005d3c:	d1f7      	bne.n	8005d2e <UFCP_TX_IRQ_Handler+0x4a>
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005d3e:	e9d2 0300 	ldrd	r0, r3, [r2]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8005d42:	f882 1097 	strb.w	r1, [r2, #151]	@ 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005d46:	4718      	bx	r3

08005d48 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005d48:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 8005d4c:	b97b      	cbnz	r3, 8005d6e <UFCP_Receive+0x26>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8005d4e:	2301      	movs	r3, #1

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8005d50:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8005d54:	f8a0 311c 	strh.w	r3, [r0, #284]	@ 0x11c
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
 8005d58:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005d5e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	e842 3100 	strex	r1, r3, [r2]
 8005d66:	2900      	cmp	r1, #0
 8005d68:	d1f7      	bne.n	8005d5a <UFCP_Receive+0x12>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8005d6a:	2002      	movs	r0, #2
 8005d6c:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005d6e:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop

08005d74 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8005d78:	f890 0097 	ldrb.w	r0, [r0, #151]	@ 0x97
 8005d7c:	bb90      	cbnz	r0, 8005de4 <UFCP_Send+0x70>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8005d7e:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8005d80:	f104 0516 	add.w	r5, r4, #22
    pHandle->TxFrame.Code = code;
 8005d84:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8005d86:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8005d88:	b2c0      	uxtb	r0, r0
 8005d8a:	b193      	cbz	r3, 8005db2 <UFCP_Send+0x3e>
 8005d8c:	2805      	cmp	r0, #5
 8005d8e:	f102 0101 	add.w	r1, r2, #1
 8005d92:	d902      	bls.n	8005d9a <UFCP_Send+0x26>
 8005d94:	1a6e      	subs	r6, r5, r1
 8005d96:	2e02      	cmp	r6, #2
 8005d98:	d826      	bhi.n	8005de8 <UFCP_Send+0x74>
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f104 0315 	add.w	r3, r4, #21
 8005da0:	4402      	add	r2, r0
 8005da2:	e000      	b.n	8005da6 <UFCP_Send+0x32>
 8005da4:	3101      	adds	r1, #1
 8005da6:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8005daa:	428a      	cmp	r2, r1
 8005dac:	f803 0f01 	strb.w	r0, [r3, #1]!
 8005db0:	d1f8      	bne.n	8005da4 <UFCP_Send+0x30>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005db2:	f104 0014 	add.w	r0, r4, #20
 8005db6:	f7fe fb73 	bl	80044a0 <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
 8005dba:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8005dbc:	2301      	movs	r3, #1

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8005dbe:	f8d4 2120 	ldr.w	r2, [r4, #288]	@ 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005dc2:	f884 0096 	strb.w	r0, [r4, #150]	@ 0x96
    pHandle->TxFrameLevel = 0;
 8005dc6:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8005dca:	f884 3097 	strb.w	r3, [r4, #151]	@ 0x97
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
 8005dce:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd0:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	e842 3100 	strex	r1, r3, [r2]
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	d1f7      	bne.n	8005dd0 <UFCP_Send+0x5c>
 8005de0:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005de4:	2001      	movs	r0, #1
}
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	4611      	mov	r1, r2
 8005dea:	46ac      	mov	ip, r5
 8005dec:	f003 06fc 	and.w	r6, r3, #252	@ 0xfc
 8005df0:	4416      	add	r6, r2
    while ( size-- ) *dest++ = *buffer++;
 8005df2:	f851 eb04 	ldr.w	lr, [r1], #4
 8005df6:	428e      	cmp	r6, r1
 8005df8:	f84c eb04 	str.w	lr, [ip], #4
 8005dfc:	d1f9      	bne.n	8005df2 <UFCP_Send+0x7e>
 8005dfe:	f003 01fc 	and.w	r1, r3, #252	@ 0xfc
 8005e02:	1a40      	subs	r0, r0, r1
 8005e04:	079b      	lsls	r3, r3, #30
 8005e06:	b2c0      	uxtb	r0, r0
 8005e08:	eb02 0c01 	add.w	ip, r2, r1
 8005e0c:	eb05 0601 	add.w	r6, r5, r1
 8005e10:	d0cf      	beq.n	8005db2 <UFCP_Send+0x3e>
 8005e12:	5c53      	ldrb	r3, [r2, r1]
 8005e14:	546b      	strb	r3, [r5, r1]
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d0cb      	beq.n	8005db2 <UFCP_Send+0x3e>
 8005e1a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8005e1e:	2801      	cmp	r0, #1
 8005e20:	7073      	strb	r3, [r6, #1]
 8005e22:	d0c6      	beq.n	8005db2 <UFCP_Send+0x3e>
 8005e24:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8005e28:	70b3      	strb	r3, [r6, #2]
 8005e2a:	e7c2      	b.n	8005db2 <UFCP_Send+0x3e>

08005e2c <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005e2c:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 8005e30:	b90b      	cbnz	r3, 8005e36 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8005e32:	482e      	ldr	r0, [pc, #184]	@ (8005eec <UFCP_RX_IRQ_Handler+0xc0>)
}
 8005e34:	4770      	bx	lr
{
 8005e36:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8005e38:	f890 311d 	ldrb.w	r3, [r0, #285]	@ 0x11d
 8005e3c:	4604      	mov	r4, r0
{
 8005e3e:	b083      	sub	sp, #12
    uint8_t rx_byte = (uint8_t) rx_data;
 8005e40:	fa5f fc81 	uxtb.w	ip, r1
    switch ( pBaseHandle->RxFrameLevel )
 8005e44:	b1c3      	cbz	r3, 8005e78 <UFCP_RX_IRQ_Handler+0x4c>
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d00b      	beq.n	8005e62 <UFCP_RX_IRQ_Handler+0x36>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8005e4a:	f890 209a 	ldrb.w	r2, [r0, #154]	@ 0x9a
 8005e4e:	3201      	adds	r2, #1
 8005e50:	429a      	cmp	r2, r3
 8005e52:	db1b      	blt.n	8005e8c <UFCP_RX_IRQ_Handler+0x60>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8005e54:	18c2      	adds	r2, r0, r3
          pBaseHandle->RxFrameLevel++;
 8005e56:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8005e58:	f882 c099 	strb.w	ip, [r2, #153]	@ 0x99
          pBaseHandle->RxFrameLevel++;
 8005e5c:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
 8005e60:	e007      	b.n	8005e72 <UFCP_RX_IRQ_Handler+0x46>
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8005e62:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 8005e64:	bf54      	ite	pl
 8005e66:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8005e68:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 8005e6a:	f880 c09a 	strb.w	ip, [r0, #154]	@ 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 8005e6e:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8005e72:	481e      	ldr	r0, [pc, #120]	@ (8005eec <UFCP_RX_IRQ_Handler+0xc0>)
}
 8005e74:	b003      	add	sp, #12
 8005e76:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxFrameLevel++;
 8005e78:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8005e7a:	8a02      	ldrh	r2, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8005e7c:	481c      	ldr	r0, [pc, #112]	@ (8005ef0 <UFCP_RX_IRQ_Handler+0xc4>)
        pBaseHandle->RxFrame.Code = rx_byte;
 8005e7e:	f884 c099 	strb.w	ip, [r4, #153]	@ 0x99
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8005e82:	8262      	strh	r2, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8005e84:	f884 311d 	strb.w	r3, [r4, #285]	@ 0x11d
}
 8005e88:	b003      	add	sp, #12
 8005e8a:	bd30      	pop	{r4, r5, pc}
          pBaseHandle->RxTimeoutCountdown = 0;
 8005e8c:	2300      	movs	r3, #0
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8005e8e:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8005e92:	f880 c11b 	strb.w	ip, [r0, #283]	@ 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8005e96:	320c      	adds	r2, #12
 8005e98:	8243      	strh	r3, [r0, #18]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005e9e:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	e842 3100 	strex	r1, r3, [r2]
 8005ea6:	2900      	cmp	r1, #0
 8005ea8:	d1f7      	bne.n	8005e9a <UFCP_RX_IRQ_Handler+0x6e>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005eaa:	f884 111c 	strb.w	r1, [r4, #284]	@ 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8005eae:	f104 0099 	add.w	r0, r4, #153	@ 0x99
 8005eb2:	f7fe faf5 	bl	80044a0 <FCP_CalcCRC>
 8005eb6:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 8005eba:	4283      	cmp	r3, r0
 8005ebc:	d10a      	bne.n	8005ed4 <UFCP_RX_IRQ_Handler+0xa8>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8005ebe:	68a5      	ldr	r5, [r4, #8]
 8005ec0:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 8005ec4:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 8005ec8:	6820      	ldr	r0, [r4, #0]
 8005eca:	f104 029b 	add.w	r2, r4, #155	@ 0x9b
 8005ece:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8005ed0:	4808      	ldr	r0, [pc, #32]	@ (8005ef4 <UFCP_RX_IRQ_Handler+0xc8>)
  return ret_val;
 8005ed2:	e7cf      	b.n	8005e74 <UFCP_RX_IRQ_Handler+0x48>
            error_code = FCP_MSG_RX_BAD_CRC;
 8005ed4:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	21ff      	movs	r1, #255	@ 0xff
 8005eda:	4620      	mov	r0, r4
 8005edc:	f10d 0207 	add.w	r2, sp, #7
            error_code = FCP_MSG_RX_BAD_CRC;
 8005ee0:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005ee4:	f7ff ff46 	bl	8005d74 <UFCP_Send>
 8005ee8:	e7f2      	b.n	8005ed0 <UFCP_RX_IRQ_Handler+0xa4>
 8005eea:	bf00      	nop
 8005eec:	08006284 	.word	0x08006284
 8005ef0:	08006282 	.word	0x08006282
 8005ef4:	08006280 	.word	0x08006280

08005ef8 <UFCP_OVR_IRQ_Handler>:
  error_code = UFCP_MSG_OVERRUN;
 8005ef8:	f04f 0c08 	mov.w	ip, #8
{
 8005efc:	b500      	push	{lr}
 8005efe:	b083      	sub	sp, #12
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005f00:	2301      	movs	r3, #1
 8005f02:	21ff      	movs	r1, #255	@ 0xff
 8005f04:	f10d 0207 	add.w	r2, sp, #7
  error_code = UFCP_MSG_OVERRUN;
 8005f08:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005f0c:	f7ff ff32 	bl	8005d74 <UFCP_Send>
}
 8005f10:	b003      	add	sp, #12
 8005f12:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f16:	bf00      	nop

08005f18 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f880 311c 	strb.w	r3, [r0, #284]	@ 0x11c
}
 8005f1e:	4770      	bx	lr

08005f20 <VVBS_Init>:
  * @param  pHandle related Handle of VirtualBusVoltageSensor_Handle_t
  * @retval none
  */
__weak void VVBS_Init( VirtualBusVoltageSensor_Handle_t * pHandle )
{
  pHandle->_Super.FaultState = MC_NO_ERROR;
 8005f20:	2100      	movs	r1, #0
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 8005f22:	460b      	mov	r3, r1
 8005f24:	8942      	ldrh	r2, [r0, #10]
  pHandle->_Super.FaultState = MC_NO_ERROR;
 8005f26:	8101      	strh	r1, [r0, #8]
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 8005f28:	f362 030f 	bfi	r3, r2, #0, #16
 8005f2c:	f362 431f 	bfi	r3, r2, #16, #16
 8005f30:	6043      	str	r3, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = pHandle->ExpectedVbus_d;
}
 8005f32:	4770      	bx	lr

08005f34 <memset>:
 8005f34:	4603      	mov	r3, r0
 8005f36:	4402      	add	r2, r0
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d100      	bne.n	8005f3e <memset+0xa>
 8005f3c:	4770      	bx	lr
 8005f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f42:	e7f9      	b.n	8005f38 <memset+0x4>

08005f44 <__libc_init_array>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	2600      	movs	r6, #0
 8005f48:	4d0c      	ldr	r5, [pc, #48]	@ (8005f7c <__libc_init_array+0x38>)
 8005f4a:	4c0d      	ldr	r4, [pc, #52]	@ (8005f80 <__libc_init_array+0x3c>)
 8005f4c:	1b64      	subs	r4, r4, r5
 8005f4e:	10a4      	asrs	r4, r4, #2
 8005f50:	42a6      	cmp	r6, r4
 8005f52:	d109      	bne.n	8005f68 <__libc_init_array+0x24>
 8005f54:	f000 f81a 	bl	8005f8c <_init>
 8005f58:	2600      	movs	r6, #0
 8005f5a:	4d0a      	ldr	r5, [pc, #40]	@ (8005f84 <__libc_init_array+0x40>)
 8005f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8005f88 <__libc_init_array+0x44>)
 8005f5e:	1b64      	subs	r4, r4, r5
 8005f60:	10a4      	asrs	r4, r4, #2
 8005f62:	42a6      	cmp	r6, r4
 8005f64:	d105      	bne.n	8005f72 <__libc_init_array+0x2e>
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6c:	4798      	blx	r3
 8005f6e:	3601      	adds	r6, #1
 8005f70:	e7ee      	b.n	8005f50 <__libc_init_array+0xc>
 8005f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f76:	4798      	blx	r3
 8005f78:	3601      	adds	r6, #1
 8005f7a:	e7f2      	b.n	8005f62 <__libc_init_array+0x1e>
 8005f7c:	08006288 	.word	0x08006288
 8005f80:	08006288 	.word	0x08006288
 8005f84:	08006288 	.word	0x08006288
 8005f88:	0800628c 	.word	0x0800628c

08005f8c <_init>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	bf00      	nop
 8005f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f92:	bc08      	pop	{r3}
 8005f94:	469e      	mov	lr, r3
 8005f96:	4770      	bx	lr

08005f98 <_fini>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	bf00      	nop
 8005f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9e:	bc08      	pop	{r3}
 8005fa0:	469e      	mov	lr, r3
 8005fa2:	4770      	bx	lr
