
remote control.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002654  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002784  08002784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027c0  080027c0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080027c0  080027c0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027c0  080027c0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027c4  080027c4  000127c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080027c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000084  0800284c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  0800284c  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006caa  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001191  00000000  00000000  00026d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002b0  00000000  00000000  00027ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000218  00000000  00000000  00028198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003752  00000000  00000000  000283b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004112  00000000  00000000  0002bb02  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bc52  00000000  00000000  0002fc14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003b866  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d30  00000000  00000000  0003b8e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000084 	.word	0x20000084
 800014c:	00000000 	.word	0x00000000
 8000150:	0800276c 	.word	0x0800276c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000088 	.word	0x20000088
 800016c:	0800276c 	.word	0x0800276c

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	d1ed      	bne.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <main>:
uint16_t Systemcounter=0;

char result[100];

int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af04      	add	r7, sp, #16
	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fdd9 	bl	8001318 <MCAL_speed_init>
	pinmode(GPIOB, SelectSwitchLEFTUP,GPIO_MODE_INPUT_PU);
 8000766:	2218      	movs	r2, #24
 8000768:	210d      	movs	r1, #13
 800076a:	48aa      	ldr	r0, [pc, #680]	; (8000a14 <main+0x2bc>)
 800076c:	f000 fa2a 	bl	8000bc4 <pinmode>
	pinmode(GPIOB, SelectSwitchLEFTdown,GPIO_MODE_INPUT_PU);
 8000770:	2218      	movs	r2, #24
 8000772:	210c      	movs	r1, #12
 8000774:	48a7      	ldr	r0, [pc, #668]	; (8000a14 <main+0x2bc>)
 8000776:	f000 fa25 	bl	8000bc4 <pinmode>
	pinmode(GPIOB, SelectSwitchRIGHTUP,GPIO_MODE_INPUT_PU);
 800077a:	2218      	movs	r2, #24
 800077c:	210f      	movs	r1, #15
 800077e:	48a5      	ldr	r0, [pc, #660]	; (8000a14 <main+0x2bc>)
 8000780:	f000 fa20 	bl	8000bc4 <pinmode>
	pinmode(GPIOB, SelectSwitchRIGHTdown,GPIO_MODE_INPUT_PU);
 8000784:	2218      	movs	r2, #24
 8000786:	210e      	movs	r1, #14
 8000788:	48a2      	ldr	r0, [pc, #648]	; (8000a14 <main+0x2bc>)
 800078a:	f000 fa1b 	bl	8000bc4 <pinmode>

	pinmode(GPIOB, joystickLEFT_switch,GPIO_MODE_INPUT_PU);
 800078e:	2218      	movs	r2, #24
 8000790:	210b      	movs	r1, #11
 8000792:	48a0      	ldr	r0, [pc, #640]	; (8000a14 <main+0x2bc>)
 8000794:	f000 fa16 	bl	8000bc4 <pinmode>
	pinmode(GPIOC, joystickRIGHT_switch,GPIO_MODE_INPUT_PU);
 8000798:	2218      	movs	r2, #24
 800079a:	210f      	movs	r1, #15
 800079c:	489e      	ldr	r0, [pc, #632]	; (8000a18 <main+0x2c0>)
 800079e:	f000 fa11 	bl	8000bc4 <pinmode>

	pinmode(GPIOB, redSwitch1,GPIO_MODE_INPUT_PU);
 80007a2:	2218      	movs	r2, #24
 80007a4:	210a      	movs	r1, #10
 80007a6:	489b      	ldr	r0, [pc, #620]	; (8000a14 <main+0x2bc>)
 80007a8:	f000 fa0c 	bl	8000bc4 <pinmode>
	pinmode(GPIOB, redSwitch2,GPIO_MODE_INPUT_PU);
 80007ac:	2218      	movs	r2, #24
 80007ae:	2101      	movs	r1, #1
 80007b0:	4898      	ldr	r0, [pc, #608]	; (8000a14 <main+0x2bc>)
 80007b2:	f000 fa07 	bl	8000bc4 <pinmode>
	pinmode(GPIOB, greenSwitch1,GPIO_MODE_INPUT_PU);
 80007b6:	2218      	movs	r2, #24
 80007b8:	2100      	movs	r1, #0
 80007ba:	4896      	ldr	r0, [pc, #600]	; (8000a14 <main+0x2bc>)
 80007bc:	f000 fa02 	bl	8000bc4 <pinmode>
	pinmode(GPIOA, greenSwitch2,GPIO_MODE_INPUT_PU);
 80007c0:	2218      	movs	r2, #24
 80007c2:	2107      	movs	r1, #7
 80007c4:	4895      	ldr	r0, [pc, #596]	; (8000a1c <main+0x2c4>)
 80007c6:	f000 f9fd 	bl	8000bc4 <pinmode>

	pinmode(GPIOC, pin13, GPIO_MODE_OUTPUT_push_pull_Speed2);
 80007ca:	2202      	movs	r2, #2
 80007cc:	210d      	movs	r1, #13
 80007ce:	4892      	ldr	r0, [pc, #584]	; (8000a18 <main+0x2c0>)
 80007d0:	f000 f9f8 	bl	8000bc4 <pinmode>

	ADC_INIT(ADC1, ADC_STATE_START);
 80007d4:	2101      	movs	r1, #1
 80007d6:	4892      	ldr	r0, [pc, #584]	; (8000a20 <main+0x2c8>)
 80007d8:	f000 fe82 	bl	80014e0 <ADC_INIT>

	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,clk);
 80007dc:	4b91      	ldr	r3, [pc, #580]	; (8000a24 <main+0x2cc>)
 80007de:	9302      	str	r3, [sp, #8]
 80007e0:	2300      	movs	r3, #0
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2300      	movs	r3, #0
 80007ec:	2200      	movs	r2, #0
 80007ee:	210c      	movs	r1, #12
 80007f0:	488d      	ldr	r0, [pc, #564]	; (8000a28 <main+0x2d0>)
 80007f2:	f001 f86f 	bl	80018d4 <USART_INIT>
	while(1){
		//READ
		joystick[0]=ADC_READ(ADC1, joystickRight_X)/2;
 80007f6:	2101      	movs	r1, #1
 80007f8:	4889      	ldr	r0, [pc, #548]	; (8000a20 <main+0x2c8>)
 80007fa:	f000 fecf 	bl	800159c <ADC_READ>
 80007fe:	4603      	mov	r3, r0
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b89      	ldr	r3, [pc, #548]	; (8000a2c <main+0x2d4>)
 8000806:	801a      	strh	r2, [r3, #0]
		joystick[1]=ADC_READ(ADC1, joystickRight_Y)/2;
 8000808:	2102      	movs	r1, #2
 800080a:	4885      	ldr	r0, [pc, #532]	; (8000a20 <main+0x2c8>)
 800080c:	f000 fec6 	bl	800159c <ADC_READ>
 8000810:	4603      	mov	r3, r0
 8000812:	085b      	lsrs	r3, r3, #1
 8000814:	b29a      	uxth	r2, r3
 8000816:	4b85      	ldr	r3, [pc, #532]	; (8000a2c <main+0x2d4>)
 8000818:	805a      	strh	r2, [r3, #2]
		joystick[2]=ADC_READ(ADC1, joystickLEFT_X)/2;
 800081a:	2100      	movs	r1, #0
 800081c:	4880      	ldr	r0, [pc, #512]	; (8000a20 <main+0x2c8>)
 800081e:	f000 febd 	bl	800159c <ADC_READ>
 8000822:	4603      	mov	r3, r0
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	b29a      	uxth	r2, r3
 8000828:	4b80      	ldr	r3, [pc, #512]	; (8000a2c <main+0x2d4>)
 800082a:	809a      	strh	r2, [r3, #4]
		joystick[3]=ADC_READ(ADC1, joystickLEFT_Y)/2;
 800082c:	2103      	movs	r1, #3
 800082e:	487c      	ldr	r0, [pc, #496]	; (8000a20 <main+0x2c8>)
 8000830:	f000 feb4 	bl	800159c <ADC_READ>
 8000834:	4603      	mov	r3, r0
 8000836:	085b      	lsrs	r3, r3, #1
 8000838:	b29a      	uxth	r2, r3
 800083a:	4b7c      	ldr	r3, [pc, #496]	; (8000a2c <main+0x2d4>)
 800083c:	80da      	strh	r2, [r3, #6]
		Potentiometer[0]=ADC_READ(ADC1, Potentiometer_RIGHT)/4;
 800083e:	2104      	movs	r1, #4
 8000840:	4877      	ldr	r0, [pc, #476]	; (8000a20 <main+0x2c8>)
 8000842:	f000 feab 	bl	800159c <ADC_READ>
 8000846:	4603      	mov	r3, r0
 8000848:	089b      	lsrs	r3, r3, #2
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b78      	ldr	r3, [pc, #480]	; (8000a30 <main+0x2d8>)
 800084e:	801a      	strh	r2, [r3, #0]
		Potentiometer[1]=ADC_READ(ADC1, Potentiometer_LEFT)/4;
 8000850:	2105      	movs	r1, #5
 8000852:	4873      	ldr	r0, [pc, #460]	; (8000a20 <main+0x2c8>)
 8000854:	f000 fea2 	bl	800159c <ADC_READ>
 8000858:	4603      	mov	r3, r0
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b74      	ldr	r3, [pc, #464]	; (8000a30 <main+0x2d8>)
 8000860:	805a      	strh	r2, [r3, #2]

		KEYS[0]=READ_PIN(GPIOB, SelectSwitchLEFTUP);
 8000862:	210d      	movs	r1, #13
 8000864:	486b      	ldr	r0, [pc, #428]	; (8000a14 <main+0x2bc>)
 8000866:	f000 fab3 	bl	8000dd0 <READ_PIN>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	4b71      	ldr	r3, [pc, #452]	; (8000a34 <main+0x2dc>)
 8000870:	701a      	strb	r2, [r3, #0]
		KEYS[1]=READ_PIN(GPIOB, SelectSwitchLEFTdown);
 8000872:	210c      	movs	r1, #12
 8000874:	4867      	ldr	r0, [pc, #412]	; (8000a14 <main+0x2bc>)
 8000876:	f000 faab 	bl	8000dd0 <READ_PIN>
 800087a:	4603      	mov	r3, r0
 800087c:	461a      	mov	r2, r3
 800087e:	4b6d      	ldr	r3, [pc, #436]	; (8000a34 <main+0x2dc>)
 8000880:	705a      	strb	r2, [r3, #1]
		KEYS[2]=READ_PIN(GPIOB, SelectSwitchRIGHTUP);
 8000882:	210f      	movs	r1, #15
 8000884:	4863      	ldr	r0, [pc, #396]	; (8000a14 <main+0x2bc>)
 8000886:	f000 faa3 	bl	8000dd0 <READ_PIN>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	4b69      	ldr	r3, [pc, #420]	; (8000a34 <main+0x2dc>)
 8000890:	709a      	strb	r2, [r3, #2]
		KEYS[3]=READ_PIN(GPIOB, SelectSwitchRIGHTdown);
 8000892:	210e      	movs	r1, #14
 8000894:	485f      	ldr	r0, [pc, #380]	; (8000a14 <main+0x2bc>)
 8000896:	f000 fa9b 	bl	8000dd0 <READ_PIN>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	4b65      	ldr	r3, [pc, #404]	; (8000a34 <main+0x2dc>)
 80008a0:	70da      	strb	r2, [r3, #3]

		KEYS[4]=READ_PIN(GPIOB, joystickLEFT_switch);
 80008a2:	210b      	movs	r1, #11
 80008a4:	485b      	ldr	r0, [pc, #364]	; (8000a14 <main+0x2bc>)
 80008a6:	f000 fa93 	bl	8000dd0 <READ_PIN>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b61      	ldr	r3, [pc, #388]	; (8000a34 <main+0x2dc>)
 80008b0:	711a      	strb	r2, [r3, #4]
		KEYS[5]=READ_PIN(GPIOC, joystickRIGHT_switch);
 80008b2:	210f      	movs	r1, #15
 80008b4:	4858      	ldr	r0, [pc, #352]	; (8000a18 <main+0x2c0>)
 80008b6:	f000 fa8b 	bl	8000dd0 <READ_PIN>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b5d      	ldr	r3, [pc, #372]	; (8000a34 <main+0x2dc>)
 80008c0:	715a      	strb	r2, [r3, #5]
		KEYS[6]=READ_PIN(GPIOB, redSwitch1);
 80008c2:	210a      	movs	r1, #10
 80008c4:	4853      	ldr	r0, [pc, #332]	; (8000a14 <main+0x2bc>)
 80008c6:	f000 fa83 	bl	8000dd0 <READ_PIN>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b59      	ldr	r3, [pc, #356]	; (8000a34 <main+0x2dc>)
 80008d0:	719a      	strb	r2, [r3, #6]
		KEYS[7]=READ_PIN(GPIOB, redSwitch2);
 80008d2:	2101      	movs	r1, #1
 80008d4:	484f      	ldr	r0, [pc, #316]	; (8000a14 <main+0x2bc>)
 80008d6:	f000 fa7b 	bl	8000dd0 <READ_PIN>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	4b55      	ldr	r3, [pc, #340]	; (8000a34 <main+0x2dc>)
 80008e0:	71da      	strb	r2, [r3, #7]
		KEYS[8]=READ_PIN(GPIOB, greenSwitch1);
 80008e2:	2100      	movs	r1, #0
 80008e4:	484b      	ldr	r0, [pc, #300]	; (8000a14 <main+0x2bc>)
 80008e6:	f000 fa73 	bl	8000dd0 <READ_PIN>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b51      	ldr	r3, [pc, #324]	; (8000a34 <main+0x2dc>)
 80008f0:	721a      	strb	r2, [r3, #8]
		KEYS[9]=READ_PIN(GPIOA, greenSwitch2);
 80008f2:	2107      	movs	r1, #7
 80008f4:	4849      	ldr	r0, [pc, #292]	; (8000a1c <main+0x2c4>)
 80008f6:	f000 fa6b 	bl	8000dd0 <READ_PIN>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b4d      	ldr	r3, [pc, #308]	; (8000a34 <main+0x2dc>)
 8000900:	725a      	strb	r2, [r3, #9]

		//CONVERT TO STRING
		for (int i = 0; i < 4; i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	e017      	b.n	8000938 <main+0x1e0>
			offset += sprintf(result + offset, "%u,", joystick[i]);
 8000908:	4b4b      	ldr	r3, [pc, #300]	; (8000a38 <main+0x2e0>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b4b      	ldr	r3, [pc, #300]	; (8000a3c <main+0x2e4>)
 8000910:	18d0      	adds	r0, r2, r3
 8000912:	4a46      	ldr	r2, [pc, #280]	; (8000a2c <main+0x2d4>)
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091a:	461a      	mov	r2, r3
 800091c:	4948      	ldr	r1, [pc, #288]	; (8000a40 <main+0x2e8>)
 800091e:	f001 fb13 	bl	8001f48 <siprintf>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <main+0x2e0>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <main+0x2e0>)
 8000930:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3301      	adds	r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b03      	cmp	r3, #3
 800093c:	dde4      	ble.n	8000908 <main+0x1b0>
		}
		for (int i = 0; i < 2; i++) {
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	e017      	b.n	8000974 <main+0x21c>
			offset += sprintf(result + offset, "%u,", Potentiometer[i]);
 8000944:	4b3c      	ldr	r3, [pc, #240]	; (8000a38 <main+0x2e0>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b3c      	ldr	r3, [pc, #240]	; (8000a3c <main+0x2e4>)
 800094c:	18d0      	adds	r0, r2, r3
 800094e:	4a38      	ldr	r2, [pc, #224]	; (8000a30 <main+0x2d8>)
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000956:	461a      	mov	r2, r3
 8000958:	4939      	ldr	r1, [pc, #228]	; (8000a40 <main+0x2e8>)
 800095a:	f001 faf5 	bl	8001f48 <siprintf>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <main+0x2e0>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b33      	ldr	r3, [pc, #204]	; (8000a38 <main+0x2e0>)
 800096c:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 2; i++) {
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	3301      	adds	r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2b01      	cmp	r3, #1
 8000978:	dde4      	ble.n	8000944 <main+0x1ec>
		}
		for (int i = 0; i < 10; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	e017      	b.n	80009b0 <main+0x258>
			offset += sprintf(result + offset, "%u,", KEYS[i]);
 8000980:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <main+0x2e0>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <main+0x2e4>)
 8000988:	18d0      	adds	r0, r2, r3
 800098a:	4a2a      	ldr	r2, [pc, #168]	; (8000a34 <main+0x2dc>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	492a      	ldr	r1, [pc, #168]	; (8000a40 <main+0x2e8>)
 8000996:	f001 fad7 	bl	8001f48 <siprintf>
 800099a:	4603      	mov	r3, r0
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <main+0x2e0>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <main+0x2e0>)
 80009a8:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 10; i++) {
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3301      	adds	r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b09      	cmp	r3, #9
 80009b4:	dde4      	ble.n	8000980 <main+0x228>
		}
		offset=0;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <main+0x2e0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	801a      	strh	r2, [r3, #0]
		if(Systemcounter<20)Systemcounter++;
 80009bc:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <main+0x2ec>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2b13      	cmp	r3, #19
 80009c2:	d806      	bhi.n	80009d2 <main+0x27a>
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <main+0x2ec>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <main+0x2ec>)
 80009ce:	801a      	strh	r2, [r3, #0]
 80009d0:	e002      	b.n	80009d8 <main+0x280>
		else Systemcounter=0;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <main+0x2ec>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	801a      	strh	r2, [r3, #0]
		pinwrite(GPIOC, pin13,HIGH);
 80009d8:	2201      	movs	r2, #1
 80009da:	210d      	movs	r1, #13
 80009dc:	480e      	ldr	r0, [pc, #56]	; (8000a18 <main+0x2c0>)
 80009de:	f000 f9d3 	bl	8000d88 <pinwrite>
		USART_SEND_STRING_UNinterrupted(USART1,result);
 80009e2:	4916      	ldr	r1, [pc, #88]	; (8000a3c <main+0x2e4>)
 80009e4:	4810      	ldr	r0, [pc, #64]	; (8000a28 <main+0x2d0>)
 80009e6:	f001 f858 	bl	8001a9a <USART_SEND_STRING_UNinterrupted>
		USART_SEND_STRING_UNinterrupted(USART1,"m\n");
 80009ea:	4917      	ldr	r1, [pc, #92]	; (8000a48 <main+0x2f0>)
 80009ec:	480e      	ldr	r0, [pc, #56]	; (8000a28 <main+0x2d0>)
 80009ee:	f001 f854 	bl	8001a9a <USART_SEND_STRING_UNinterrupted>

		delay(6, U_ms, clk);
 80009f2:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <main+0x2cc>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4815      	ldr	r0, [pc, #84]	; (8000a4c <main+0x2f4>)
 80009f8:	f000 f9fe 	bl	8000df8 <delay>

		if(Systemcounter>10)pinwrite(GPIOC, pin13,LOW);
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <main+0x2ec>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	2b0a      	cmp	r3, #10
 8000a02:	f67f aef8 	bls.w	80007f6 <main+0x9e>
 8000a06:	2200      	movs	r2, #0
 8000a08:	210d      	movs	r1, #13
 8000a0a:	4803      	ldr	r0, [pc, #12]	; (8000a18 <main+0x2c0>)
 8000a0c:	f000 f9bc 	bl	8000d88 <pinwrite>
		joystick[0]=ADC_READ(ADC1, joystickRight_X)/2;
 8000a10:	e6f1      	b.n	80007f6 <main+0x9e>
 8000a12:	bf00      	nop
 8000a14:	40010c00 	.word	0x40010c00
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	40012400 	.word	0x40012400
 8000a24:	02255100 	.word	0x02255100
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	200000cc 	.word	0x200000cc
 8000a30:	200000c8 	.word	0x200000c8
 8000a34:	200000bc 	.word	0x200000bc
 8000a38:	200000a0 	.word	0x200000a0
 8000a3c:	200000d4 	.word	0x200000d4
 8000a40:	08002784 	.word	0x08002784
 8000a44:	200000a2 	.word	0x200000a2
 8000a48:	08002788 	.word	0x08002788
 8000a4c:	40c00000 	.word	0x40c00000

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f001 fa38 	bl	8001ef4 <__errno>
 8000a84:	4602      	mov	r2, r0
 8000a86:	230c      	movs	r3, #12
 8000a88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20005000 	.word	0x20005000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	200000a4 	.word	0x200000a4
 8000ab8:	200001e0 	.word	0x200001e0

08000abc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000abe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ac0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac6:	490d      	ldr	r1, [pc, #52]	; (8000afc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <LoopForever+0xe>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000adc:	4c0a      	ldr	r4, [pc, #40]	; (8000b08 <LoopForever+0x16>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aea:	f001 fa09 	bl	8001f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aee:	f7ff fe33 	bl	8000758 <main>

08000af2 <LoopForever>:

LoopForever:
    b LoopForever
 8000af2:	e7fe      	b.n	8000af2 <LoopForever>
  ldr   r0, =_estack
 8000af4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000b00:	080027c8 	.word	0x080027c8
  ldr r2, =_sbss
 8000b04:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000b08:	200001e0 	.word	0x200001e0

08000b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_2_IRQHandler>

08000b0e <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000b0e:	b480      	push	{r7}
 8000b10:	b085      	sub	sp, #20
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <getposition+0x14>
		rval =0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d101      	bne.n	8000b2c <getposition+0x1e>
		rval =4;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d101      	bne.n	8000b36 <getposition+0x28>
		rval =8;
 8000b32:	2308      	movs	r3, #8
 8000b34:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d101      	bne.n	8000b40 <getposition+0x32>
		rval =12;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	d101      	bne.n	8000b4a <getposition+0x3c>
		rval =16;
 8000b46:	2310      	movs	r3, #16
 8000b48:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	2b05      	cmp	r3, #5
 8000b4e:	d101      	bne.n	8000b54 <getposition+0x46>
		rval =20;
 8000b50:	2314      	movs	r3, #20
 8000b52:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d101      	bne.n	8000b5e <getposition+0x50>
		rval =24;
 8000b5a:	2318      	movs	r3, #24
 8000b5c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	2b07      	cmp	r3, #7
 8000b62:	d101      	bne.n	8000b68 <getposition+0x5a>
		rval =28;
 8000b64:	231c      	movs	r3, #28
 8000b66:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d101      	bne.n	8000b72 <getposition+0x64>
		rval =0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	2b09      	cmp	r3, #9
 8000b76:	d101      	bne.n	8000b7c <getposition+0x6e>
		rval =4;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	2b0a      	cmp	r3, #10
 8000b80:	d101      	bne.n	8000b86 <getposition+0x78>
		rval =8;
 8000b82:	2308      	movs	r3, #8
 8000b84:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	2b0b      	cmp	r3, #11
 8000b8a:	d101      	bne.n	8000b90 <getposition+0x82>
		rval =12;
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	2b0c      	cmp	r3, #12
 8000b94:	d101      	bne.n	8000b9a <getposition+0x8c>
		rval =16;
 8000b96:	2310      	movs	r3, #16
 8000b98:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	2b0d      	cmp	r3, #13
 8000b9e:	d101      	bne.n	8000ba4 <getposition+0x96>
		rval =20;
 8000ba0:	2314      	movs	r3, #20
 8000ba2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	2b0e      	cmp	r3, #14
 8000ba8:	d101      	bne.n	8000bae <getposition+0xa0>
		rval =24;
 8000baa:	2318      	movs	r3, #24
 8000bac:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d101      	bne.n	8000bb8 <getposition+0xaa>
		rval =28;
 8000bb4:	231c      	movs	r3, #28
 8000bb6:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]


}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4a69      	ldr	r2, [pc, #420]	; (8000d7c <pinmode+0x1b8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d106      	bne.n	8000be8 <pinmode+0x24>
		GPIOA_Clock_Enable();
 8000bda:	4b69      	ldr	r3, [pc, #420]	; (8000d80 <pinmode+0x1bc>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a68      	ldr	r2, [pc, #416]	; (8000d80 <pinmode+0x1bc>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	e010      	b.n	8000c0a <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4a66      	ldr	r2, [pc, #408]	; (8000d84 <pinmode+0x1c0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d106      	bne.n	8000bfe <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8000bf0:	4b63      	ldr	r3, [pc, #396]	; (8000d80 <pinmode+0x1bc>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a62      	ldr	r2, [pc, #392]	; (8000d80 <pinmode+0x1bc>)
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	e005      	b.n	8000c0a <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 8000bfe:	4b60      	ldr	r3, [pc, #384]	; (8000d80 <pinmode+0x1bc>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a5f      	ldr	r2, [pc, #380]	; (8000d80 <pinmode+0x1bc>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8000c0a:	897b      	ldrh	r3, [r7, #10]
 8000c0c:	2b07      	cmp	r3, #7
 8000c0e:	d856      	bhi.n	8000cbe <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 8000c10:	897b      	ldrh	r3, [r7, #10]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff7b 	bl	8000b0e <getposition>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	4093      	lsls	r3, r2
 8000c20:	43da      	mvns	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	401a      	ands	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	d002      	beq.n	8000c38 <pinmode+0x74>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b18      	cmp	r3, #24
 8000c36:	d133      	bne.n	8000ca0 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b18      	cmp	r3, #24
 8000c3c:	d117      	bne.n	8000c6e <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000c3e:	897b      	ldrh	r3, [r7, #10]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff64 	bl	8000b0e <getposition>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	fa03 f202 	lsl.w	r2, r3, r2
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	431a      	orrs	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	897a      	ldrh	r2, [r7, #10]
 8000c60:	2101      	movs	r1, #1
 8000c62:	fa01 f202 	lsl.w	r2, r1, r2
 8000c66:	431a      	orrs	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000c6c:	e081      	b.n	8000d72 <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000c6e:	897b      	ldrh	r3, [r7, #10]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff4c 	bl	8000b0e <getposition>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	fa03 f202 	lsl.w	r2, r3, r2
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	431a      	orrs	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	897a      	ldrh	r2, [r7, #10]
 8000c90:	2101      	movs	r1, #1
 8000c92:	fa01 f202 	lsl.w	r2, r1, r2
 8000c96:	43d2      	mvns	r2, r2
 8000c98:	401a      	ands	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000c9e:	e068      	b.n	8000d72 <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 8000ca0:	897b      	ldrh	r3, [r7, #10]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff33 	bl	8000b0e <getposition>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	fa03 f202 	lsl.w	r2, r3, r2
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	601a      	str	r2, [r3, #0]

	}



}
 8000cbc:	e059      	b.n	8000d72 <pinmode+0x1ae>
	else if(pin>7){
 8000cbe:	897b      	ldrh	r3, [r7, #10]
 8000cc0:	2b07      	cmp	r3, #7
 8000cc2:	d956      	bls.n	8000d72 <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 8000cc4:	897b      	ldrh	r3, [r7, #10]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff21 	bl	8000b0e <getposition>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	4093      	lsls	r3, r2
 8000cd4:	43da      	mvns	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d002      	beq.n	8000cec <pinmode+0x128>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b18      	cmp	r3, #24
 8000cea:	d133      	bne.n	8000d54 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b18      	cmp	r3, #24
 8000cf0:	d117      	bne.n	8000d22 <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000cf2:	897b      	ldrh	r3, [r7, #10]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff0a 	bl	8000b0e <getposition>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	2308      	movs	r3, #8
 8000d00:	fa03 f202 	lsl.w	r2, r3, r2
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	897a      	ldrh	r2, [r7, #10]
 8000d14:	2101      	movs	r1, #1
 8000d16:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000d20:	e027      	b.n	8000d72 <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000d22:	897b      	ldrh	r3, [r7, #10]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fef2 	bl	8000b0e <getposition>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	2308      	movs	r3, #8
 8000d30:	fa03 f202 	lsl.w	r2, r3, r2
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	897a      	ldrh	r2, [r7, #10]
 8000d44:	2101      	movs	r1, #1
 8000d46:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4a:	43d2      	mvns	r2, r2
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000d52:	e00e      	b.n	8000d72 <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8000d54:	897b      	ldrh	r3, [r7, #10]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fed9 	bl	8000b0e <getposition>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	fa03 f202 	lsl.w	r2, r3, r2
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	605a      	str	r2, [r3, #4]
}
 8000d70:	e7ff      	b.n	8000d72 <pinmode+0x1ae>
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40010800 	.word	0x40010800
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010c00 	.word	0x40010c00

08000d88 <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_typeDef* GPIOx,uint16_t pin,uint8_t status){
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
 8000d94:	4613      	mov	r3, r2
 8000d96:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 8000d98:	787b      	ldrb	r3, [r7, #1]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d009      	beq.n	8000db2 <pinwrite+0x2a>
		GPIOx->GPIOx_ODR |=(1<<pin);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	887a      	ldrh	r2, [r7, #2]
 8000da4:	2101      	movs	r1, #1
 8000da6:	fa01 f202 	lsl.w	r2, r1, r2
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->GPIOx_ODR &=~(1<<pin);

}
 8000db0:	e009      	b.n	8000dc6 <pinwrite+0x3e>
	else GPIOx->GPIOx_ODR &=~(1<<pin);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	2101      	movs	r1, #1
 8000dba:	fa01 f202 	lsl.w	r2, r1, r2
 8000dbe:	43d2      	mvns	r2, r2
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60da      	str	r2, [r3, #12]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <READ_PIN>:
 * @param [in]      - Pin: GPIOx PIN Number
 * @retval          - uint8_t
 * Note             - none
 */

uint8_t READ_PIN(GPIO_typeDef* GPIOx, uint16_t pin){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	807b      	strh	r3, [r7, #2]
	return (GPIOx->GPIOx_IDR>>pin)&1;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	887b      	ldrh	r3, [r7, #2]
 8000de2:	fa22 f303 	lsr.w	r3, r2, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(float time,uint8_t U,uint32_t clk){
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b08b      	sub	sp, #44	; 0x2c
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	460b      	mov	r3, r1
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	72fb      	strb	r3, [r7, #11]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 8000e06:	4b5b      	ldr	r3, [pc, #364]	; (8000f74 <delay+0x17c>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4a5a      	ldr	r2, [pc, #360]	; (8000f74 <delay+0x17c>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8000e12:	4b59      	ldr	r3, [pc, #356]	; (8000f78 <delay+0x180>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b57      	ldr	r3, [pc, #348]	; (8000f78 <delay+0x180>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0201 	bic.w	r2, r2, #1
 8000e20:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61fb      	str	r3, [r7, #28]
	uint32_t unit =1000;
 8000e30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e34:	61bb      	str	r3, [r7, #24]
	uint8_t  increase=2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	75fb      	strb	r3, [r7, #23]

	if (U == 0){
 8000e3a:	7afb      	ldrb	r3, [r7, #11]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10f      	bne.n	8000e60 <delay+0x68>
		unit = 1000;
 8000e40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e44:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 100;
 8000e46:	494d      	ldr	r1, [pc, #308]	; (8000f7c <delay+0x184>)
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f7ff fc5b 	bl	8000704 <__aeabi_fcmpgt>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d002      	beq.n	8000e5a <delay+0x62>
 8000e54:	2364      	movs	r3, #100	; 0x64
 8000e56:	75fb      	strb	r3, [r7, #23]
 8000e58:	e045      	b.n	8000ee6 <delay+0xee>
		else increase = 10;
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	75fb      	strb	r3, [r7, #23]
 8000e5e:	e042      	b.n	8000ee6 <delay+0xee>
	}
	else {
		unit = 1000000;
 8000e60:	4b47      	ldr	r3, [pc, #284]	; (8000f80 <delay+0x188>)
 8000e62:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 10;
 8000e64:	4945      	ldr	r1, [pc, #276]	; (8000f7c <delay+0x184>)
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f7ff fc4c 	bl	8000704 <__aeabi_fcmpgt>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <delay+0x80>
 8000e72:	230a      	movs	r3, #10
 8000e74:	75fb      	strb	r3, [r7, #23]
 8000e76:	e036      	b.n	8000ee6 <delay+0xee>
		else increase = 5;
 8000e78:	2305      	movs	r3, #5
 8000e7a:	75fb      	strb	r3, [r7, #23]
	}

	while(user_flage==1){
 8000e7c:	e033      	b.n	8000ee6 <delay+0xee>
		user_top = (clk/unit*time)/( user_pre );
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fa28 	bl	80002dc <__aeabi_ui2f>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	68f9      	ldr	r1, [r7, #12]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fa7b 	bl	800038c <__aeabi_fmul>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461c      	mov	r4, r3
 8000e9a:	69f8      	ldr	r0, [r7, #28]
 8000e9c:	f7ff fa1e 	bl	80002dc <__aeabi_ui2f>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f7ff fb25 	bl	80004f4 <__aeabi_fdiv>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc33 	bl	8000718 <__aeabi_f2uiz>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	623b      	str	r3, [r7, #32]
		if(user_top>=32000){
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000ebc:	d310      	bcc.n	8000ee0 <delay+0xe8>

			if(user_pre>65530){
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d906      	bls.n	8000ed6 <delay+0xde>
				user_pre=65530;
 8000ec8:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8000ecc:	61fb      	str	r3, [r7, #28]
				user_flage=0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ed4:	e007      	b.n	8000ee6 <delay+0xee>
			}
			else user_pre+=increase;
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
 8000ed8:	69fa      	ldr	r2, [r7, #28]
 8000eda:	4413      	add	r3, r2
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e002      	b.n	8000ee6 <delay+0xee>

		}
		else{
			user_flage=0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(user_flage==1){
 8000ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d0c7      	beq.n	8000e7e <delay+0x86>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <delay+0x180>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <delay+0x180>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <delay+0x180>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <delay+0x180>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f042 0204 	orr.w	r2, r2, #4
 8000f0c:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <delay+0x180>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <delay+0x180>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0201 	orr.w	r2, r2, #1
 8000f1c:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <delay+0x180>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6a3a      	ldr	r2, [r7, #32]
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <delay+0x180>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	3a01      	subs	r2, #1
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <delay+0x180>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <delay+0x180>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
 8000f3e:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <delay+0x180>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <delay+0x180>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <delay+0x18c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <delay+0x190>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <delay+0x190>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 8000f62:	bf00      	nop
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <delay+0x18c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1fb      	bne.n	8000f64 <delay+0x16c>

	}
}
 8000f6c:	bf00      	nop
 8000f6e:	372c      	adds	r7, #44	; 0x2c
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	2000001c 	.word	0x2000001c
 8000f7c:	453b8000 	.word	0x453b8000
 8000f80:	000f4240 	.word	0x000f4240
 8000f84:	20000018 	.word	0x20000018
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	; (800108c <SPWM_timer_INIT+0x100>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	; (800108c <SPWM_timer_INIT+0x100>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0201 	bic.w	r2, r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d12f      	bne.n	8001010 <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 8000fb0:	4b36      	ldr	r3, [pc, #216]	; (800108c <SPWM_timer_INIT+0x100>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	699a      	ldr	r2, [r3, #24]
 8000fb6:	4b35      	ldr	r3, [pc, #212]	; (800108c <SPWM_timer_INIT+0x100>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fbe:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 8000fc0:	4b32      	ldr	r3, [pc, #200]	; (800108c <SPWM_timer_INIT+0x100>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	699a      	ldr	r2, [r3, #24]
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <SPWM_timer_INIT+0x100>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000fce:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <SPWM_timer_INIT+0x100>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	699a      	ldr	r2, [r3, #24]
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <SPWM_timer_INIT+0x100>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0208 	orr.w	r2, r2, #8
 8000fde:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8000fe0:	4b2a      	ldr	r3, [pc, #168]	; (800108c <SPWM_timer_INIT+0x100>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	4b29      	ldr	r3, [pc, #164]	; (800108c <SPWM_timer_INIT+0x100>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000fee:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <SPWM_timer_INIT+0x100>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a1a      	ldr	r2, [r3, #32]
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <SPWM_timer_INIT+0x100>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0210 	orr.w	r2, r2, #16
 8000ffe:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <SPWM_timer_INIT+0x100>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6a1a      	ldr	r2, [r3, #32]
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <SPWM_timer_INIT+0x100>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <SPWM_timer_INIT+0x100>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <SPWM_timer_INIT+0x100>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800101e:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <SPWM_timer_INIT+0x100>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <SPWM_timer_INIT+0x100>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <SPWM_timer_INIT+0x100>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <SPWM_timer_INIT+0x100>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <SPWM_timer_INIT+0x100>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <SPWM_timer_INIT+0x100>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800104e:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <SPWM_timer_INIT+0x100>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <SPWM_timer_INIT+0x100>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0201 	orr.w	r2, r2, #1
 800105e:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <SPWM_timer_INIT+0x100>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	695a      	ldr	r2, [r3, #20]
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <SPWM_timer_INIT+0x100>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0201 	orr.w	r2, r2, #1
 800106e:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <SPWM_timer_INIT+0x100>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <SPWM_timer_INIT+0x100>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0201 	orr.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000000 	.word	0x20000000

08001090 <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <TIM2_IRQHandler+0x34>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <TIM2_IRQHandler+0x34>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <TIM2_IRQHandler+0x38>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <TIM2_IRQHandler+0x34>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <TIM2_IRQHandler+0x34>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0201 	bic.w	r2, r2, #1
 80010b8:	601a      	str	r2, [r3, #0]

}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000001c 	.word	0x2000001c
 80010c8:	20000018 	.word	0x20000018

080010cc <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <TIM3_IRQHandler+0x6c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d119      	bne.n	800110c <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <TIM3_IRQHandler+0x70>)
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	4a17      	ldr	r2, [pc, #92]	; (800113c <TIM3_IRQHandler+0x70>)
 80010de:	f023 0301 	bic.w	r3, r3, #1
 80010e2:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <TIM3_IRQHandler+0x74>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <TIM3_IRQHandler+0x74>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <TIM3_IRQHandler+0x74>)
 80010f4:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 80010f6:	e01c      	b.n	8001132 <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <TIM3_IRQHandler+0x6c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <TIM3_IRQHandler+0x70>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <TIM3_IRQHandler+0x70>)
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	6013      	str	r3, [r2, #0]
}
 800110a:	e012      	b.n	8001132 <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <TIM3_IRQHandler+0x78>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <TIM3_IRQHandler+0x78>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0201 	bic.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <TIM3_IRQHandler+0x78>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	691a      	ldr	r2, [r3, #16]
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <TIM3_IRQHandler+0x78>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <TIM3_IRQHandler+0x7c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4798      	blx	r3
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200000b0 	.word	0x200000b0
 800113c:	40000400 	.word	0x40000400
 8001140:	200000ac 	.word	0x200000ac
 8001144:	20000144 	.word	0x20000144
 8001148:	20000138 	.word	0x20000138

0800114c <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <TIM4_IRQHandler+0x24>)
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	4a06      	ldr	r2, [pc, #24]	; (8001170 <TIM4_IRQHandler+0x24>)
 8001156:	f023 0301 	bic.w	r3, r3, #1
 800115a:	6113      	str	r3, [r2, #16]
	overflowtims++;
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <TIM4_IRQHandler+0x28>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <TIM4_IRQHandler+0x28>)
 8001166:	801a      	strh	r2, [r3, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	40000800 	.word	0x40000800
 8001174:	200000aa 	.word	0x200000aa

08001178 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 800117c:	4b5d      	ldr	r3, [pc, #372]	; (80012f4 <TIM1_UP_IRQHandler+0x17c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <TIM1_UP_IRQHandler+0x180>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d911      	bls.n	80011ac <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 8001188:	4b5c      	ldr	r3, [pc, #368]	; (80012fc <TIM1_UP_IRQHandler+0x184>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
		flage1=0;
 800118e:	4b5c      	ldr	r3, [pc, #368]	; (8001300 <TIM1_UP_IRQHandler+0x188>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 8001194:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <TIM1_UP_IRQHandler+0x180>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a5a      	ldr	r2, [pc, #360]	; (8001304 <TIM1_UP_IRQHandler+0x18c>)
 800119a:	7812      	ldrb	r2, [r2, #0]
 800119c:	fbb3 f2f2 	udiv	r2, r3, r2
 80011a0:	4b55      	ldr	r3, [pc, #340]	; (80012f8 <TIM1_UP_IRQHandler+0x180>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a53      	ldr	r2, [pc, #332]	; (80012f4 <TIM1_UP_IRQHandler+0x17c>)
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e018      	b.n	80011de <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 80011ac:	4b51      	ldr	r3, [pc, #324]	; (80012f4 <TIM1_UP_IRQHandler+0x17c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b63      	cmp	r3, #99	; 0x63
 80011b2:	d814      	bhi.n	80011de <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 80011b4:	4b51      	ldr	r3, [pc, #324]	; (80012fc <TIM1_UP_IRQHandler+0x184>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
		flage1=1;
 80011ba:	4b51      	ldr	r3, [pc, #324]	; (8001300 <TIM1_UP_IRQHandler+0x188>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 80011c0:	4b51      	ldr	r3, [pc, #324]	; (8001308 <TIM1_UP_IRQHandler+0x190>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	f083 0301 	eor.w	r3, r3, #1
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <TIM1_UP_IRQHandler+0x190>)
 80011cc:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 80011ce:	4b4a      	ldr	r3, [pc, #296]	; (80012f8 <TIM1_UP_IRQHandler+0x180>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a4c      	ldr	r2, [pc, #304]	; (8001304 <TIM1_UP_IRQHandler+0x18c>)
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80011da:	4a46      	ldr	r2, [pc, #280]	; (80012f4 <TIM1_UP_IRQHandler+0x17c>)
 80011dc:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 80011de:	4b4a      	ldr	r3, [pc, #296]	; (8001308 <TIM1_UP_IRQHandler+0x190>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d110      	bne.n	8001208 <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 80011e6:	4b49      	ldr	r3, [pc, #292]	; (800130c <TIM1_UP_IRQHandler+0x194>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	4b47      	ldr	r3, [pc, #284]	; (800130c <TIM1_UP_IRQHandler+0x194>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0201 	bic.w	r2, r2, #1
 80011f4:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 80011f6:	4b45      	ldr	r3, [pc, #276]	; (800130c <TIM1_UP_IRQHandler+0x194>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6a1a      	ldr	r2, [r3, #32]
 80011fc:	4b43      	ldr	r3, [pc, #268]	; (800130c <TIM1_UP_IRQHandler+0x194>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0210 	orr.w	r2, r2, #16
 8001204:	621a      	str	r2, [r3, #32]
 8001206:	e013      	b.n	8001230 <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 8001208:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <TIM1_UP_IRQHandler+0x190>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10f      	bne.n	8001230 <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 8001210:	4b3e      	ldr	r3, [pc, #248]	; (800130c <TIM1_UP_IRQHandler+0x194>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6a1a      	ldr	r2, [r3, #32]
 8001216:	4b3d      	ldr	r3, [pc, #244]	; (800130c <TIM1_UP_IRQHandler+0x194>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0210 	bic.w	r2, r2, #16
 800121e:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 8001220:	4b3a      	ldr	r3, [pc, #232]	; (800130c <TIM1_UP_IRQHandler+0x194>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6a1a      	ldr	r2, [r3, #32]
 8001226:	4b39      	ldr	r3, [pc, #228]	; (800130c <TIM1_UP_IRQHandler+0x194>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0201 	orr.w	r2, r2, #1
 800122e:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 8001230:	4b33      	ldr	r3, [pc, #204]	; (8001300 <TIM1_UP_IRQHandler+0x188>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d11c      	bne.n	8001272 <TIM1_UP_IRQHandler+0xfa>
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <TIM1_UP_IRQHandler+0x184>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d118      	bne.n	8001272 <TIM1_UP_IRQHandler+0xfa>
		top=c;
 8001240:	4b33      	ldr	r3, [pc, #204]	; (8001310 <TIM1_UP_IRQHandler+0x198>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a2c      	ldr	r2, [pc, #176]	; (80012f8 <TIM1_UP_IRQHandler+0x180>)
 8001246:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8001248:	4b32      	ldr	r3, [pc, #200]	; (8001314 <TIM1_UP_IRQHandler+0x19c>)
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <TIM1_UP_IRQHandler+0x17c>)
 800124e:	6819      	ldr	r1, [r3, #0]
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <TIM1_UP_IRQHandler+0x180>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	f7ff fe99 	bl	8000f8c <SPWM_timer_INIT>
		x+=(top/numper_waves);
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <TIM1_UP_IRQHandler+0x180>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a29      	ldr	r2, [pc, #164]	; (8001304 <TIM1_UP_IRQHandler+0x18c>)
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	fbb3 f2f2 	udiv	r2, r3, r2
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <TIM1_UP_IRQHandler+0x17c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <TIM1_UP_IRQHandler+0x17c>)
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e035      	b.n	80012de <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <TIM1_UP_IRQHandler+0x184>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d129      	bne.n	80012ce <TIM1_UP_IRQHandler+0x156>
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <TIM1_UP_IRQHandler+0x188>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d125      	bne.n	80012ce <TIM1_UP_IRQHandler+0x156>
		top=c;
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <TIM1_UP_IRQHandler+0x198>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <TIM1_UP_IRQHandler+0x180>)
 8001288:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <TIM1_UP_IRQHandler+0x17c>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <TIM1_UP_IRQHandler+0x180>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	491c      	ldr	r1, [pc, #112]	; (8001304 <TIM1_UP_IRQHandler+0x18c>)
 8001294:	7809      	ldrb	r1, [r1, #0]
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <TIM1_UP_IRQHandler+0x17c>)
 800129e:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <TIM1_UP_IRQHandler+0x19c>)
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <TIM1_UP_IRQHandler+0x17c>)
 80012a6:	6819      	ldr	r1, [r3, #0]
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <TIM1_UP_IRQHandler+0x180>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	f7ff fe6d 	bl	8000f8c <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <TIM1_UP_IRQHandler+0x180>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <TIM1_UP_IRQHandler+0x18c>)
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <TIM1_UP_IRQHandler+0x17c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d10b      	bne.n	80012de <TIM1_UP_IRQHandler+0x166>
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <TIM1_UP_IRQHandler+0x17c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	e007      	b.n	80012de <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <TIM1_UP_IRQHandler+0x194>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <TIM1_UP_IRQHandler+0x194>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <TIM1_UP_IRQHandler+0x194>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <TIM1_UP_IRQHandler+0x194>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	611a      	str	r2, [r3, #16]
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000014 	.word	0x20000014
 80012f8:	20000008 	.word	0x20000008
 80012fc:	200000a8 	.word	0x200000a8
 8001300:	20000004 	.word	0x20000004
 8001304:	20000140 	.word	0x20000140
 8001308:	20000005 	.word	0x20000005
 800130c:	20000000 	.word	0x20000000
 8001310:	20000010 	.word	0x20000010
 8001314:	2000000c 	.word	0x2000000c

08001318 <MCAL_speed_init>:
#include "stm32_speed_DRIVER.h"
#define FLASH_BASE_ADDR     0x40022000
#define FLASH_ACR_OFFSET    0x00
#define FLASH_ACR          (*(volatile unsigned int*)(FLASH_BASE_ADDR + FLASH_ACR_OFFSET))
#define FLASH_ACR_LATENCY_Pos 0
void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	4613      	mov	r3, r2
 8001326:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d13a      	bne.n	80013a4 <MCAL_speed_init+0x8c>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	2b00      	cmp	r3, #0
 8001332:	f040 80cc 	bne.w	80014ce <MCAL_speed_init+0x1b6>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 8001336:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4a67      	ldr	r2, [pc, #412]	; (80014d8 <MCAL_speed_init+0x1c0>)
 800133c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001340:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 8001342:	4b65      	ldr	r3, [pc, #404]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4a64      	ldr	r2, [pc, #400]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001348:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800134c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 800134e:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001354:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001358:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <MCAL_speed_init+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a5e      	ldr	r2, [pc, #376]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001364:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 8001366:	4b5c      	ldr	r3, [pc, #368]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a5b      	ldr	r2, [pc, #364]	; (80014d8 <MCAL_speed_init+0x1c0>)
 800136c:	f023 0303 	bic.w	r3, r3, #3
 8001370:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8001372:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 800137e:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4a55      	ldr	r2, [pc, #340]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001384:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001388:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 800138a:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <MCAL_speed_init+0x1c0>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a52      	ldr	r2, [pc, #328]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001390:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001394:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 8001396:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a4f      	ldr	r2, [pc, #316]	; (80014d8 <MCAL_speed_init+0x1c0>)
 800139c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013a0:	6053      	str	r3, [r2, #4]

		}
	}


}
 80013a2:	e094      	b.n	80014ce <MCAL_speed_init+0x1b6>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d150      	bne.n	800144c <MCAL_speed_init+0x134>
			RCC->RCC_CR |= (1 << 16);
 80013aa:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a4a      	ldr	r2, [pc, #296]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 80013b6:	bf00      	nop
 80013b8:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f9      	beq.n	80013b8 <MCAL_speed_init+0xa0>
			RCC->RCC_CFGR|=(1<<16);
 80013c4:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4a43      	ldr	r2, [pc, #268]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80013ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ce:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a40      	ldr	r2, [pc, #256]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80013d6:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80013da:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 80013dc:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a3d      	ldr	r2, [pc, #244]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80013e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013e6:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 80013e8:	bf00      	nop
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f9      	beq.n	80013ea <MCAL_speed_init+0xd2>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <MCAL_speed_init+0x1c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a38      	ldr	r2, [pc, #224]	; (80014dc <MCAL_speed_init+0x1c4>)
 80013fc:	f023 0307 	bic.w	r3, r3, #7
 8001400:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 8001402:	4b36      	ldr	r3, [pc, #216]	; (80014dc <MCAL_speed_init+0x1c4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a35      	ldr	r2, [pc, #212]	; (80014dc <MCAL_speed_init+0x1c4>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 800140e:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001414:	f023 0303 	bic.w	r3, r3, #3
 8001418:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <MCAL_speed_init+0x1c0>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a2e      	ldr	r2, [pc, #184]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <MCAL_speed_init+0x1c0>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001430:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a28      	ldr	r2, [pc, #160]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001438:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800143c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4a25      	ldr	r2, [pc, #148]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001444:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001448:	6053      	str	r3, [r2, #4]
}
 800144a:	e040      	b.n	80014ce <MCAL_speed_init+0x1b6>
		else if (mood==mood_FAST_MOOD_72MHzCORE72MHzpref){
 800144c:	79bb      	ldrb	r3, [r7, #6]
 800144e:	2b04      	cmp	r3, #4
 8001450:	d13d      	bne.n	80014ce <MCAL_speed_init+0x1b6>
			RCC->RCC_CR |= (1 << 16);
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a20      	ldr	r2, [pc, #128]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 800145e:	bf00      	nop
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f9      	beq.n	8001460 <MCAL_speed_init+0x148>
			RCC->RCC_CFGR|=(1<<16);
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MCAL_speed_init+0x1c0>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001476:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MCAL_speed_init+0x1c0>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <MCAL_speed_init+0x1c0>)
 800147e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001482:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <MCAL_speed_init+0x1c0>)
 800148a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800148e:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 8001490:	bf00      	nop
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MCAL_speed_init+0x1c0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f9      	beq.n	8001492 <MCAL_speed_init+0x17a>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MCAL_speed_init+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <MCAL_speed_init+0x1c4>)
 80014a4:	f023 0307 	bic.w	r3, r3, #7
 80014a8:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MCAL_speed_init+0x1c4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <MCAL_speed_init+0x1c4>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80014bc:	f023 0303 	bic.w	r3, r3, #3
 80014c0:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <MCAL_speed_init+0x1c0>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6053      	str	r3, [r2, #4]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40022000 	.word	0x40022000

080014e0 <ADC_INIT>:
#include "stm32f103c6_ADC.h"


uint8_t flag_ADC_INIT=0;

void ADC_INIT(ADC_typeDef* ADCx,uint8_t ADC_STATE_){
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	70fb      	strb	r3, [r7, #3]

	if(ADC_STATE_==ADC_STATE_START){
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d132      	bne.n	8001558 <ADC_INIT+0x78>
		if(ADCx==ADC1){
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a25      	ldr	r2, [pc, #148]	; (800158c <ADC_INIT+0xac>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d106      	bne.n	8001508 <ADC_INIT+0x28>
			ADC1_Clock_Enable();
 80014fa:	4b25      	ldr	r3, [pc, #148]	; (8001590 <ADC_INIT+0xb0>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	4a24      	ldr	r2, [pc, #144]	; (8001590 <ADC_INIT+0xb0>)
 8001500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001504:	6193      	str	r3, [r2, #24]
 8001506:	e009      	b.n	800151c <ADC_INIT+0x3c>
		}
		else if(ADCx==ADC2){
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a22      	ldr	r2, [pc, #136]	; (8001594 <ADC_INIT+0xb4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d105      	bne.n	800151c <ADC_INIT+0x3c>
			ADC2_Clock_Enable();
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <ADC_INIT+0xb0>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <ADC_INIT+0xb0>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151a:	6193      	str	r3, [r2, #24]
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	609a      	str	r2, [r3, #8]
		//		Bit 1 CONT: Continuous conversion
		//		This bit is set and cleared by software. If set conversion takes place continuously till this bit is
		//		reset.
		//		0: Single conversion mode
		//		1: Continuous conversion mode
		ADCx->ADC_CR2 &=~(1<<1);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f023 0202 	bic.w	r2, r3, #2
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
		//		Bit 2 CAL: A/D Calibration
		//		This bit is set by software to start the calibration. It is reset by hardware after calibration is
		//		complete.
		//		0: Calibration completed
		//		1: Enable calibratio
		ADCx->ADC_CR2 |=(1<<2);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f043 0204 	orr.w	r2, r3, #4
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	609a      	str	r2, [r3, #8]
		while(((ADCx->ADC_CR2>>2)&1)){};
 8001540:	bf00      	nop
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f8      	bne.n	8001542 <ADC_INIT+0x62>


		flag_ADC_INIT=1;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <ADC_INIT+0xb8>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
		ADC2_Clock_DESABLE();
		flag_ADC_INIT=0;
	}


}
 8001556:	e014      	b.n	8001582 <ADC_INIT+0xa2>
		ADCx->ADC_CR2 &=~(1<<0);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 0201 	bic.w	r2, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	609a      	str	r2, [r3, #8]
		ADC1_Clock_DESABLE();
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <ADC_INIT+0xb0>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4a09      	ldr	r2, [pc, #36]	; (8001590 <ADC_INIT+0xb0>)
 800156a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156e:	60d3      	str	r3, [r2, #12]
		ADC2_Clock_DESABLE();
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <ADC_INIT+0xb0>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <ADC_INIT+0xb0>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157a:	60d3      	str	r3, [r2, #12]
		flag_ADC_INIT=0;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <ADC_INIT+0xb8>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40012400 	.word	0x40012400
 8001590:	40021000 	.word	0x40021000
 8001594:	40012800 	.word	0x40012800
 8001598:	200000b1 	.word	0x200000b1

0800159c <ADC_READ>:





uint16_t ADC_READ(ADC_typeDef* ADCx,uint8_t ADC_pin){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
	if(flag_ADC_INIT){
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <ADC_READ+0x98>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d03b      	beq.n	8001628 <ADC_READ+0x8c>

		if(ADC_pin<0b0111)
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d807      	bhi.n	80015c6 <ADC_READ+0x2a>
			pinmode(GPIOA, ADC_pin, GPIO_MODE_ANALOG);
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	2200      	movs	r2, #0
 80015bc:	4619      	mov	r1, r3
 80015be:	481e      	ldr	r0, [pc, #120]	; (8001638 <ADC_READ+0x9c>)
 80015c0:	f7ff fb00 	bl	8000bc4 <pinmode>
 80015c4:	e006      	b.n	80015d4 <ADC_READ+0x38>
		else
			pinmode(GPIOB, ADC_pin, GPIO_MODE_ANALOG);
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	481b      	ldr	r0, [pc, #108]	; (800163c <ADC_READ+0xa0>)
 80015d0:	f7ff faf8 	bl	8000bc4 <pinmode>

		ADCx->ADC_CR2=0;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
		ADCx->ADC_SQR3 =0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	635a      	str	r2, [r3, #52]	; 0x34

		//Bits 4:0 SQ1[4:0]: first conversion in regular sequence
		ADCx->ADC_SQR3 |=(ADC_pin << 0);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	609a      	str	r2, [r3, #8]
		ADCx->ADC_CR2 |=(1<<0);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f043 0201 	orr.w	r2, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
		//		This bit is set by software to start conversion and cleared by hardware as soon as
		//		conversion starts. It starts a conversion of a group of regular channels if SWSTART is
		//		selected as trigger event by the EXTSEL[2:0] bits.
		//		0: Reset state
		//		1: Starts conversion of regular channels
		ADCx->ADC_CR2 |=(1<<22);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
		//		Bit 1 EOC: End of conversion
		//		This bit is set by hardware at the end of a group channel conversion (regular or injected). It is
		//		cleared by software or by reading the ADC_DR.
		//		0: Conversion is not complete
		//		1: Conversion complete
		while(! ((ADCx->ADC_SR>>1)&1) ){};
 8001610:	bf00      	nop
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	085b      	lsrs	r3, r3, #1
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f8      	beq.n	8001612 <ADC_READ+0x76>

		return((uint16_t)ADCx->ADC_DR);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	b29b      	uxth	r3, r3
 8001626:	e000      	b.n	800162a <ADC_READ+0x8e>

	}
	else{
		return 0;
 8001628:	2300      	movs	r3, #0
	}


}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200000b1 	.word	0x200000b1
 8001638:	40010800 	.word	0x40010800
 800163c:	40010c00 	.word	0x40010c00

08001640 <EXTI0_IRQHandler>:
	Enable_NVIC(pin);
}



void EXTI0_IRQHandler(void){
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <EXTI0_IRQHandler+0x20>)
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	4a05      	ldr	r2, [pc, #20]	; (8001660 <EXTI0_IRQHandler+0x20>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0](ARR_INTERRUPT_TRACK,0);
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <EXTI0_IRQHandler+0x24>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2100      	movs	r1, #0
 8001656:	4804      	ldr	r0, [pc, #16]	; (8001668 <EXTI0_IRQHandler+0x28>)
 8001658:	4798      	blx	r3
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010400 	.word	0x40010400
 8001664:	20000148 	.word	0x20000148
 8001668:	20000184 	.word	0x20000184

0800166c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <EXTI1_IRQHandler+0x20>)
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	4a05      	ldr	r2, [pc, #20]	; (800168c <EXTI1_IRQHandler+0x20>)
 8001676:	f043 0302 	orr.w	r3, r3, #2
 800167a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1](ARR_INTERRUPT_TRACK,1);
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <EXTI1_IRQHandler+0x24>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2101      	movs	r1, #1
 8001682:	4804      	ldr	r0, [pc, #16]	; (8001694 <EXTI1_IRQHandler+0x28>)
 8001684:	4798      	blx	r3

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40010400 	.word	0x40010400
 8001690:	20000148 	.word	0x20000148
 8001694:	20000184 	.word	0x20000184

08001698 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <EXTI2_IRQHandler+0x20>)
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <EXTI2_IRQHandler+0x20>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2](ARR_INTERRUPT_TRACK,2);
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <EXTI2_IRQHandler+0x24>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2102      	movs	r1, #2
 80016ae:	4804      	ldr	r0, [pc, #16]	; (80016c0 <EXTI2_IRQHandler+0x28>)
 80016b0:	4798      	blx	r3
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40010400 	.word	0x40010400
 80016bc:	20000148 	.word	0x20000148
 80016c0:	20000184 	.word	0x20000184

080016c4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <EXTI3_IRQHandler+0x20>)
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <EXTI3_IRQHandler+0x20>)
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3](ARR_INTERRUPT_TRACK,3);
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <EXTI3_IRQHandler+0x24>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2103      	movs	r1, #3
 80016da:	4804      	ldr	r0, [pc, #16]	; (80016ec <EXTI3_IRQHandler+0x28>)
 80016dc:	4798      	blx	r3
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40010400 	.word	0x40010400
 80016e8:	20000148 	.word	0x20000148
 80016ec:	20000184 	.word	0x20000184

080016f0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <EXTI4_IRQHandler+0x20>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	4a05      	ldr	r2, [pc, #20]	; (8001710 <EXTI4_IRQHandler+0x20>)
 80016fa:	f043 0310 	orr.w	r3, r3, #16
 80016fe:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4](ARR_INTERRUPT_TRACK,4);
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <EXTI4_IRQHandler+0x24>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2104      	movs	r1, #4
 8001706:	4804      	ldr	r0, [pc, #16]	; (8001718 <EXTI4_IRQHandler+0x28>)
 8001708:	4798      	blx	r3
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40010400 	.word	0x40010400
 8001714:	20000148 	.word	0x20000148
 8001718:	20000184 	.word	0x20000184

0800171c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5](ARR_INTERRUPT_TRACK,5);  }
 8001720:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f003 0320 	and.w	r3, r3, #32
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00a      	beq.n	8001742 <EXTI9_5_IRQHandler+0x26>
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 8001732:	f043 0320 	orr.w	r3, r3, #32
 8001736:	6153      	str	r3, [r2, #20]
 8001738:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <EXTI9_5_IRQHandler+0xb8>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	2105      	movs	r1, #5
 800173e:	4826      	ldr	r0, [pc, #152]	; (80017d8 <EXTI9_5_IRQHandler+0xbc>)
 8001740:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6](ARR_INTERRUPT_TRACK,6);  }
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00a      	beq.n	8001764 <EXTI9_5_IRQHandler+0x48>
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 8001754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001758:	6153      	str	r3, [r2, #20]
 800175a:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <EXTI9_5_IRQHandler+0xb8>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2106      	movs	r1, #6
 8001760:	481d      	ldr	r0, [pc, #116]	; (80017d8 <EXTI9_5_IRQHandler+0xbc>)
 8001762:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7](ARR_INTERRUPT_TRACK,7);  }
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00a      	beq.n	8001786 <EXTI9_5_IRQHandler+0x6a>
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	4a16      	ldr	r2, [pc, #88]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 8001776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177a:	6153      	str	r3, [r2, #20]
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <EXTI9_5_IRQHandler+0xb8>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	2107      	movs	r1, #7
 8001782:	4815      	ldr	r0, [pc, #84]	; (80017d8 <EXTI9_5_IRQHandler+0xbc>)
 8001784:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8](ARR_INTERRUPT_TRACK,8);  }
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00a      	beq.n	80017a8 <EXTI9_5_IRQHandler+0x8c>
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179c:	6153      	str	r3, [r2, #20]
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <EXTI9_5_IRQHandler+0xb8>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	2108      	movs	r1, #8
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <EXTI9_5_IRQHandler+0xbc>)
 80017a6:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9](ARR_INTERRUPT_TRACK,9);  }
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00a      	beq.n	80017ca <EXTI9_5_IRQHandler+0xae>
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <EXTI9_5_IRQHandler+0xb4>)
 80017ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017be:	6153      	str	r3, [r2, #20]
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <EXTI9_5_IRQHandler+0xb8>)
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	2109      	movs	r1, #9
 80017c6:	4804      	ldr	r0, [pc, #16]	; (80017d8 <EXTI9_5_IRQHandler+0xbc>)
 80017c8:	4798      	blx	r3
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010400 	.word	0x40010400
 80017d4:	20000148 	.word	0x20000148
 80017d8:	20000184 	.word	0x20000184

080017dc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10](ARR_INTERRUPT_TRACK,10);  }
 80017e0:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00a      	beq.n	8001802 <EXTI15_10_IRQHandler+0x26>
 80017ec:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	4a2f      	ldr	r2, [pc, #188]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 80017f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f6:	6153      	str	r3, [r2, #20]
 80017f8:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <EXTI15_10_IRQHandler+0xd8>)
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	210a      	movs	r1, #10
 80017fe:	482e      	ldr	r0, [pc, #184]	; (80018b8 <EXTI15_10_IRQHandler+0xdc>)
 8001800:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11](ARR_INTERRUPT_TRACK,11);  }
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00a      	beq.n	8001824 <EXTI15_10_IRQHandler+0x48>
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 8001814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001818:	6153      	str	r3, [r2, #20]
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <EXTI15_10_IRQHandler+0xd8>)
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	210b      	movs	r1, #11
 8001820:	4825      	ldr	r0, [pc, #148]	; (80018b8 <EXTI15_10_IRQHandler+0xdc>)
 8001822:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12](ARR_INTERRUPT_TRACK,12);  }
 8001824:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00a      	beq.n	8001846 <EXTI15_10_IRQHandler+0x6a>
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 8001836:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800183a:	6153      	str	r3, [r2, #20]
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <EXTI15_10_IRQHandler+0xd8>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	210c      	movs	r1, #12
 8001842:	481d      	ldr	r0, [pc, #116]	; (80018b8 <EXTI15_10_IRQHandler+0xdc>)
 8001844:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13](ARR_INTERRUPT_TRACK,13);  }
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00a      	beq.n	8001868 <EXTI15_10_IRQHandler+0x8c>
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 8001858:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800185c:	6153      	str	r3, [r2, #20]
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <EXTI15_10_IRQHandler+0xd8>)
 8001860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001862:	210d      	movs	r1, #13
 8001864:	4814      	ldr	r0, [pc, #80]	; (80018b8 <EXTI15_10_IRQHandler+0xdc>)
 8001866:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14](ARR_INTERRUPT_TRACK,14);  }
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00a      	beq.n	800188a <EXTI15_10_IRQHandler+0xae>
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 800187a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187e:	6153      	str	r3, [r2, #20]
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <EXTI15_10_IRQHandler+0xd8>)
 8001882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001884:	210e      	movs	r1, #14
 8001886:	480c      	ldr	r0, [pc, #48]	; (80018b8 <EXTI15_10_IRQHandler+0xdc>)
 8001888:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15](ARR_INTERRUPT_TRACK,15);  }
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00a      	beq.n	80018ac <EXTI15_10_IRQHandler+0xd0>
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <EXTI15_10_IRQHandler+0xd4>)
 800189c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a0:	6153      	str	r3, [r2, #20]
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <EXTI15_10_IRQHandler+0xd8>)
 80018a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a6:	210f      	movs	r1, #15
 80018a8:	4803      	ldr	r0, [pc, #12]	; (80018b8 <EXTI15_10_IRQHandler+0xdc>)
 80018aa:	4798      	blx	r3

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40010400 	.word	0x40010400
 80018b4:	20000148 	.word	0x20000148
 80018b8:	20000184 	.word	0x20000184

080018bc <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	//slave only todo
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	//slave only todo
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <USART_INIT>:
//===============================================================
void send_string (){

}
//===============================================================
void USART_INIT(USART_typeDef* USARTx,uint32_t mode,uint32_t word_length,uint32_t stop_bits,uint32_t baud_rate,uint32_t parity,uint32_t CLCK){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]

	if(USARTx ==USART1){
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4a55      	ldr	r2, [pc, #340]	; (8001a3c <USART_INIT+0x168>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d11f      	bne.n	800192a <USART_INIT+0x56>
		USART1_Clock_Enable();
 80018ea:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <USART_INIT+0x16c>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4a54      	ldr	r2, [pc, #336]	; (8001a40 <USART_INIT+0x16c>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();
 80018f6:	4b52      	ldr	r3, [pc, #328]	; (8001a40 <USART_INIT+0x16c>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	4a51      	ldr	r2, [pc, #324]	; (8001a40 <USART_INIT+0x16c>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6193      	str	r3, [r2, #24]
		NVIC_USART1_interrupt_Enable;
 8001902:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <USART_INIT+0x170>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a4f      	ldr	r2, [pc, #316]	; (8001a44 <USART_INIT+0x170>)
 8001908:	f043 0320 	orr.w	r3, r3, #32
 800190c:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin9,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 800190e:	2209      	movs	r2, #9
 8001910:	2109      	movs	r1, #9
 8001912:	484d      	ldr	r0, [pc, #308]	; (8001a48 <USART_INIT+0x174>)
 8001914:	f7ff f956 	bl	8000bc4 <pinmode>
		//RX
		pinmode(GPIOA, pin10,GPIO_MODE_INTPUT_AF);
 8001918:	2204      	movs	r2, #4
 800191a:	210a      	movs	r1, #10
 800191c:	484a      	ldr	r0, [pc, #296]	; (8001a48 <USART_INIT+0x174>)
 800191e:	f7ff f951 	bl	8000bc4 <pinmode>
		arr[0]=USART1;
 8001922:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <USART_INIT+0x178>)
 8001924:	4a45      	ldr	r2, [pc, #276]	; (8001a3c <USART_INIT+0x168>)
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e042      	b.n	80019b0 <USART_INIT+0xdc>
	}
	else if(USARTx ==USART2){
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a48      	ldr	r2, [pc, #288]	; (8001a50 <USART_INIT+0x17c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d11f      	bne.n	8001972 <USART_INIT+0x9e>
		USART2_Clock_Enable();
 8001932:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <USART_INIT+0x16c>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a42      	ldr	r2, [pc, #264]	; (8001a40 <USART_INIT+0x16c>)
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();
 800193e:	4b40      	ldr	r3, [pc, #256]	; (8001a40 <USART_INIT+0x16c>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4a3f      	ldr	r2, [pc, #252]	; (8001a40 <USART_INIT+0x16c>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6193      	str	r3, [r2, #24]
		NVIC_USART2_interrupt_Enable;
 800194a:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <USART_INIT+0x170>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a3d      	ldr	r2, [pc, #244]	; (8001a44 <USART_INIT+0x170>)
 8001950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001954:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin2,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8001956:	2209      	movs	r2, #9
 8001958:	2102      	movs	r1, #2
 800195a:	483b      	ldr	r0, [pc, #236]	; (8001a48 <USART_INIT+0x174>)
 800195c:	f7ff f932 	bl	8000bc4 <pinmode>
		//RX
		pinmode(GPIOA, pin3,GPIO_MODE_INTPUT_AF);
 8001960:	2204      	movs	r2, #4
 8001962:	2103      	movs	r1, #3
 8001964:	4838      	ldr	r0, [pc, #224]	; (8001a48 <USART_INIT+0x174>)
 8001966:	f7ff f92d 	bl	8000bc4 <pinmode>
		arr[1]=USART2;
 800196a:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <USART_INIT+0x178>)
 800196c:	4a38      	ldr	r2, [pc, #224]	; (8001a50 <USART_INIT+0x17c>)
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	e01e      	b.n	80019b0 <USART_INIT+0xdc>
	}
	else{
		USART3_Clock_Enable();
 8001972:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <USART_INIT+0x16c>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a32      	ldr	r2, [pc, #200]	; (8001a40 <USART_INIT+0x16c>)
 8001978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197c:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 800197e:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <USART_INIT+0x16c>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	4a2f      	ldr	r2, [pc, #188]	; (8001a40 <USART_INIT+0x16c>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	6193      	str	r3, [r2, #24]
		NVIC_USART3_interrupt_Enable;
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <USART_INIT+0x170>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a2d      	ldr	r2, [pc, #180]	; (8001a44 <USART_INIT+0x170>)
 8001990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001994:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8001996:	2209      	movs	r2, #9
 8001998:	210a      	movs	r1, #10
 800199a:	482e      	ldr	r0, [pc, #184]	; (8001a54 <USART_INIT+0x180>)
 800199c:	f7ff f912 	bl	8000bc4 <pinmode>
		//RX
		pinmode(GPIOB, pin11,GPIO_MODE_INTPUT_AF);
 80019a0:	2204      	movs	r2, #4
 80019a2:	210b      	movs	r1, #11
 80019a4:	482b      	ldr	r0, [pc, #172]	; (8001a54 <USART_INIT+0x180>)
 80019a6:	f7ff f90d 	bl	8000bc4 <pinmode>
		arr[2]=USART3;
 80019aa:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <USART_INIT+0x178>)
 80019ac:	4a2a      	ldr	r2, [pc, #168]	; (8001a58 <USART_INIT+0x184>)
 80019ae:	609a      	str	r2, [r3, #8]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enabled
	USARTx->USART_CR1 |=(1<<13);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	60da      	str	r2, [r3, #12]
	//STEP 2
	//	Bit 12 M: Word length
	//	This bit determines the word length. It is set or cleared by software.
	//	0: 1 Start bit, 8 Data bits, n Stop bit
	//	1: 1 Start bit, 9 Data bits, n Stop bit
	USARTx->USART_CR1 |=word_length;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	60da      	str	r2, [r3, #12]
	//	These bits are used for programming the stop bits.
	//	00: 1 Stop bit
	//	01: 0.5 Stop bit
	//	10: 2 Stop bits
	//	11: 1.5 Stop bit
	USARTx->USART_CR2 |=stop_bits;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	611a      	str	r2, [r3, #16]
	//	2: When TE is set there is a 1 bit-time delay before the transmission starts.
	//	Bit 2 RE: Receiver enable
	//	This bit enables the receiver. It is set and cleared by software.
	//	0: Receiver is disabled
	//	1: Receiver is enabled and begins searching for a start bit
	USARTx->USART_CR1 |=mode;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	431a      	orrs	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	60da      	str	r2, [r3, #12]
	//	Bit 9 PS: Parity selection
	//	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	//	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	//	0: Even parity
	//	1: Odd parity
	USARTx->USART_CR1 |=parity;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	431a      	orrs	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	60da      	str	r2, [r3, #12]
	//	Bits 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV
	//	These 12 bits define the mantissa of the USART Divider (USARTDIV)
	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV
	//	These 4 bits define the fraction of the USART Divider (USARTDIV)

	uint16_t DIV_Mantissa =CLCK /(baud_rate*16);
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	82fb      	strh	r3, [r7, #22]
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <USART_INIT+0x188>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	8afa      	ldrh	r2, [r7, #22]
 8001a0c:	2164      	movs	r1, #100	; 0x64
 8001a0e:	fb01 f202 	mul.w	r2, r1, r2
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <USART_INIT+0x188>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	095b      	lsrs	r3, r3, #5
 8001a1e:	82bb      	strh	r3, [r7, #20]
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );
 8001a20:	8afb      	ldrh	r3, [r7, #22]
 8001a22:	011a      	lsls	r2, r3, #4
 8001a24:	8abb      	ldrh	r3, [r7, #20]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	609a      	str	r2, [r3, #8]


}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40021000 	.word	0x40021000
 8001a44:	e000e104 	.word	0xe000e104
 8001a48:	40010800 	.word	0x40010800
 8001a4c:	200001a4 	.word	0x200001a4
 8001a50:	40004400 	.word	0x40004400
 8001a54:	40010c00 	.word	0x40010c00
 8001a58:	40004800 	.word	0x40004800
 8001a5c:	51eb851f 	.word	0x51eb851f

08001a60 <USART_SEND>:
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	0b1b      	lsrs	r3, r3, #12
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d106      	bne.n	8001a86 <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 8001a84:	e004      	b.n	8001a90 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	605a      	str	r2, [r3, #4]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <USART_SEND_STRING_UNinterrupted>:
	if(USARTx==USART3){
		*data=arr_data_RES[2];
	}

}
void USART_SEND_STRING_UNinterrupted(USART_typeDef* USARTx,uint8_t* data){
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
	while((*data)!=0){
 8001aa4:	e00e      	b.n	8001ac4 <USART_SEND_STRING_UNinterrupted+0x2a>
		while(((USARTx->USART_SR>>7)&1)==0);  //Transmit data register empty
 8001aa6:	bf00      	nop
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	09db      	lsrs	r3, r3, #7
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f8      	beq.n	8001aa8 <USART_SEND_STRING_UNinterrupted+0xe>
		USART_SEND(USARTx,(uint16_t*)data++);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	603a      	str	r2, [r7, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffce 	bl	8001a60 <USART_SEND>
	while((*data)!=0){
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1ec      	bne.n	8001aa6 <USART_SEND_STRING_UNinterrupted+0xc>
	}
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8001ada:	4b51      	ldr	r3, [pc, #324]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	09db      	lsrs	r3, r3, #7
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d122      	bne.n	8001b30 <USART1_IRQHandler+0x5c>
 8001aea:	4b4d      	ldr	r3, [pc, #308]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	09db      	lsrs	r3, r3, #7
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d11a      	bne.n	8001b30 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 8001afa:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <USART1_IRQHandler+0x150>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00d      	beq.n	8001b20 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 8001b04:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <USART1_IRQHandler+0x150>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4610      	mov	r0, r2
 8001b10:	f7ff ffa6 	bl	8001a60 <USART_SEND>
			++arr_data[0];
 8001b14:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <USART1_IRQHandler+0x150>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	4a42      	ldr	r2, [pc, #264]	; (8001c24 <USART1_IRQHandler+0x150>)
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e007      	b.n	8001b30 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 8001b20:	4b3f      	ldr	r3, [pc, #252]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b2e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 8001b30:	4b3b      	ldr	r3, [pc, #236]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d15b      	bne.n	8001bf8 <USART1_IRQHandler+0x124>
 8001b40:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d153      	bne.n	8001bf8 <USART1_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 8001b50:	4b33      	ldr	r3, [pc, #204]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	0b1b      	lsrs	r3, r3, #12
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d117      	bne.n	8001b90 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8001b60:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	0a9b      	lsrs	r3, r3, #10
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d108      	bne.n	8001b82 <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8001b70:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <USART1_IRQHandler+0x154>)
 8001b7e:	801a      	strh	r2, [r3, #0]
 8001b80:	e020      	b.n	8001bc4 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 8001b82:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <USART1_IRQHandler+0x154>)
 8001b8c:	801a      	strh	r2, [r3, #0]
 8001b8e:	e019      	b.n	8001bc4 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	0a9b      	lsrs	r3, r3, #10
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d109      	bne.n	8001bb4 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <USART1_IRQHandler+0x154>)
 8001bb0:	801a      	strh	r2, [r3, #0]
 8001bb2:	e007      	b.n	8001bc4 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <USART1_IRQHandler+0x154>)
 8001bc2:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <USART1_IRQHandler+0x158>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4798      	blx	r3
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0220 	bic.w	r2, r2, #32
 8001bd8:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8001be0:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <USART1_IRQHandler+0x15c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	80fb      	strh	r3, [r7, #6]
			arr[0]->USART_SR &=~(1<<5);
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0220 	bic.w	r2, r2, #32
 8001bf6:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <USART1_IRQHandler+0x15c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	80bb      	strh	r3, [r7, #4]
		arr[0]->USART_SR &=~(1<<5);
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <USART1_IRQHandler+0x14c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0220 	bic.w	r2, r2, #32
 8001c14:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200001a4 	.word	0x200001a4
 8001c24:	200001b8 	.word	0x200001b8
 8001c28:	200001b0 	.word	0x200001b0
 8001c2c:	200001c4 	.word	0x200001c4
 8001c30:	40013800 	.word	0x40013800

08001c34 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8001c3a:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	09db      	lsrs	r3, r3, #7
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d122      	bne.n	8001c90 <USART2_IRQHandler+0x5c>
 8001c4a:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	09db      	lsrs	r3, r3, #7
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d11a      	bne.n	8001c90 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <USART2_IRQHandler+0x150>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00d      	beq.n	8001c80 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 8001c64:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <USART2_IRQHandler+0x150>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	f7ff fef6 	bl	8001a60 <USART_SEND>
			++arr_data[1];
 8001c74:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <USART2_IRQHandler+0x150>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	4a42      	ldr	r2, [pc, #264]	; (8001d84 <USART2_IRQHandler+0x150>)
 8001c7c:	6053      	str	r3, [r2, #4]
 8001c7e:	e007      	b.n	8001c90 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c8e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8001c90:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d15b      	bne.n	8001d58 <USART2_IRQHandler+0x124>
 8001ca0:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d153      	bne.n	8001d58 <USART2_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 8001cb0:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	0b1b      	lsrs	r3, r3, #12
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d117      	bne.n	8001cf0 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	0a9b      	lsrs	r3, r3, #10
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d108      	bne.n	8001ce2 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <USART2_IRQHandler+0x154>)
 8001cde:	805a      	strh	r2, [r3, #2]
 8001ce0:	e020      	b.n	8001d24 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <USART2_IRQHandler+0x154>)
 8001cec:	805a      	strh	r2, [r3, #2]
 8001cee:	e019      	b.n	8001d24 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8001cf0:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	0a9b      	lsrs	r3, r3, #10
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d109      	bne.n	8001d14 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <USART2_IRQHandler+0x154>)
 8001d10:	805a      	strh	r2, [r3, #2]
 8001d12:	e007      	b.n	8001d24 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <USART2_IRQHandler+0x154>)
 8001d22:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <USART2_IRQHandler+0x158>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4798      	blx	r3
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f022 0220 	bic.w	r2, r2, #32
 8001d38:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <USART2_IRQHandler+0x15c>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	80fb      	strh	r3, [r7, #6]
			arr[1]->USART_SR &=~(1<<5);
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f022 0220 	bic.w	r2, r2, #32
 8001d56:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <USART2_IRQHandler+0x15c>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	80bb      	strh	r3, [r7, #4]
		arr[1]->USART_SR &=~(1<<5);
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <USART2_IRQHandler+0x14c>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f022 0220 	bic.w	r2, r2, #32
 8001d74:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200001a4 	.word	0x200001a4
 8001d84:	200001b8 	.word	0x200001b8
 8001d88:	200001b0 	.word	0x200001b0
 8001d8c:	200001c4 	.word	0x200001c4
 8001d90:	40004400 	.word	0x40004400

08001d94 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8001d9a:	4b51      	ldr	r3, [pc, #324]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	09db      	lsrs	r3, r3, #7
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d122      	bne.n	8001df0 <USART3_IRQHandler+0x5c>
 8001daa:	4b4d      	ldr	r3, [pc, #308]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	09db      	lsrs	r3, r3, #7
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d11a      	bne.n	8001df0 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 8001dba:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <USART3_IRQHandler+0x150>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00d      	beq.n	8001de0 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 8001dc4:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <USART3_IRQHandler+0x150>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f7ff fe46 	bl	8001a60 <USART_SEND>
			++arr_data[2];
 8001dd4:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <USART3_IRQHandler+0x150>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	4a42      	ldr	r2, [pc, #264]	; (8001ee4 <USART3_IRQHandler+0x150>)
 8001ddc:	6093      	str	r3, [r2, #8]
 8001dde:	e007      	b.n	8001df0 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 8001de0:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dee:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 8001df0:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d15b      	bne.n	8001eb8 <USART3_IRQHandler+0x124>
 8001e00:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d153      	bne.n	8001eb8 <USART3_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 8001e10:	4b33      	ldr	r3, [pc, #204]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	0b1b      	lsrs	r3, r3, #12
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d117      	bne.n	8001e50 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8001e20:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	0a9b      	lsrs	r3, r3, #10
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8001e30:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <USART3_IRQHandler+0x154>)
 8001e3e:	809a      	strh	r2, [r3, #4]
 8001e40:	e020      	b.n	8001e84 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <USART3_IRQHandler+0x154>)
 8001e4c:	809a      	strh	r2, [r3, #4]
 8001e4e:	e019      	b.n	8001e84 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	0a9b      	lsrs	r3, r3, #10
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d109      	bne.n	8001e74 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 8001e60:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <USART3_IRQHandler+0x154>)
 8001e70:	809a      	strh	r2, [r3, #4]
 8001e72:	e007      	b.n	8001e84 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <USART3_IRQHandler+0x154>)
 8001e82:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <USART3_IRQHandler+0x158>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4798      	blx	r3
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f022 0220 	bic.w	r2, r2, #32
 8001e98:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <USART3_IRQHandler+0x15c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	80fb      	strh	r3, [r7, #6]
			arr[2]->USART_SR &=~(1<<5);
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f022 0220 	bic.w	r2, r2, #32
 8001eb6:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <USART3_IRQHandler+0x15c>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	80bb      	strh	r3, [r7, #4]
		arr[2]->USART_SR &=~(1<<5);
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <USART3_IRQHandler+0x14c>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f022 0220 	bic.w	r2, r2, #32
 8001ed4:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200001a4 	.word	0x200001a4
 8001ee4:	200001b8 	.word	0x200001b8
 8001ee8:	200001b0 	.word	0x200001b0
 8001eec:	200001c4 	.word	0x200001c4
 8001ef0:	40004800 	.word	0x40004800

08001ef4 <__errno>:
 8001ef4:	4b01      	ldr	r3, [pc, #4]	; (8001efc <__errno+0x8>)
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000020 	.word	0x20000020

08001f00 <__libc_init_array>:
 8001f00:	b570      	push	{r4, r5, r6, lr}
 8001f02:	2500      	movs	r5, #0
 8001f04:	4e0c      	ldr	r6, [pc, #48]	; (8001f38 <__libc_init_array+0x38>)
 8001f06:	4c0d      	ldr	r4, [pc, #52]	; (8001f3c <__libc_init_array+0x3c>)
 8001f08:	1ba4      	subs	r4, r4, r6
 8001f0a:	10a4      	asrs	r4, r4, #2
 8001f0c:	42a5      	cmp	r5, r4
 8001f0e:	d109      	bne.n	8001f24 <__libc_init_array+0x24>
 8001f10:	f000 fc2c 	bl	800276c <_init>
 8001f14:	2500      	movs	r5, #0
 8001f16:	4e0a      	ldr	r6, [pc, #40]	; (8001f40 <__libc_init_array+0x40>)
 8001f18:	4c0a      	ldr	r4, [pc, #40]	; (8001f44 <__libc_init_array+0x44>)
 8001f1a:	1ba4      	subs	r4, r4, r6
 8001f1c:	10a4      	asrs	r4, r4, #2
 8001f1e:	42a5      	cmp	r5, r4
 8001f20:	d105      	bne.n	8001f2e <__libc_init_array+0x2e>
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
 8001f24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f28:	4798      	blx	r3
 8001f2a:	3501      	adds	r5, #1
 8001f2c:	e7ee      	b.n	8001f0c <__libc_init_array+0xc>
 8001f2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f32:	4798      	blx	r3
 8001f34:	3501      	adds	r5, #1
 8001f36:	e7f2      	b.n	8001f1e <__libc_init_array+0x1e>
 8001f38:	080027c0 	.word	0x080027c0
 8001f3c:	080027c0 	.word	0x080027c0
 8001f40:	080027c0 	.word	0x080027c0
 8001f44:	080027c4 	.word	0x080027c4

08001f48 <siprintf>:
 8001f48:	b40e      	push	{r1, r2, r3}
 8001f4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f4e:	b500      	push	{lr}
 8001f50:	b09c      	sub	sp, #112	; 0x70
 8001f52:	ab1d      	add	r3, sp, #116	; 0x74
 8001f54:	9002      	str	r0, [sp, #8]
 8001f56:	9006      	str	r0, [sp, #24]
 8001f58:	9107      	str	r1, [sp, #28]
 8001f5a:	9104      	str	r1, [sp, #16]
 8001f5c:	4808      	ldr	r0, [pc, #32]	; (8001f80 <siprintf+0x38>)
 8001f5e:	4909      	ldr	r1, [pc, #36]	; (8001f84 <siprintf+0x3c>)
 8001f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f64:	9105      	str	r1, [sp, #20]
 8001f66:	6800      	ldr	r0, [r0, #0]
 8001f68:	a902      	add	r1, sp, #8
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	f000 f8e6 	bl	800213c <_svfiprintf_r>
 8001f70:	2200      	movs	r2, #0
 8001f72:	9b02      	ldr	r3, [sp, #8]
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	b01c      	add	sp, #112	; 0x70
 8001f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f7c:	b003      	add	sp, #12
 8001f7e:	4770      	bx	lr
 8001f80:	20000020 	.word	0x20000020
 8001f84:	ffff0208 	.word	0xffff0208

08001f88 <_malloc_r>:
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	1ccd      	adds	r5, r1, #3
 8001f8c:	f025 0503 	bic.w	r5, r5, #3
 8001f90:	3508      	adds	r5, #8
 8001f92:	2d0c      	cmp	r5, #12
 8001f94:	bf38      	it	cc
 8001f96:	250c      	movcc	r5, #12
 8001f98:	2d00      	cmp	r5, #0
 8001f9a:	4606      	mov	r6, r0
 8001f9c:	db01      	blt.n	8001fa2 <_malloc_r+0x1a>
 8001f9e:	42a9      	cmp	r1, r5
 8001fa0:	d903      	bls.n	8001faa <_malloc_r+0x22>
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	6033      	str	r3, [r6, #0]
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	f000 fb89 	bl	80026c0 <__malloc_lock>
 8001fae:	4a21      	ldr	r2, [pc, #132]	; (8002034 <_malloc_r+0xac>)
 8001fb0:	6814      	ldr	r4, [r2, #0]
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	b991      	cbnz	r1, 8001fdc <_malloc_r+0x54>
 8001fb6:	4c20      	ldr	r4, [pc, #128]	; (8002038 <_malloc_r+0xb0>)
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	b91b      	cbnz	r3, 8001fc4 <_malloc_r+0x3c>
 8001fbc:	4630      	mov	r0, r6
 8001fbe:	f000 fb3d 	bl	800263c <_sbrk_r>
 8001fc2:	6020      	str	r0, [r4, #0]
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	4630      	mov	r0, r6
 8001fc8:	f000 fb38 	bl	800263c <_sbrk_r>
 8001fcc:	1c43      	adds	r3, r0, #1
 8001fce:	d124      	bne.n	800201a <_malloc_r+0x92>
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	4630      	mov	r0, r6
 8001fd4:	6033      	str	r3, [r6, #0]
 8001fd6:	f000 fb74 	bl	80026c2 <__malloc_unlock>
 8001fda:	e7e4      	b.n	8001fa6 <_malloc_r+0x1e>
 8001fdc:	680b      	ldr	r3, [r1, #0]
 8001fde:	1b5b      	subs	r3, r3, r5
 8001fe0:	d418      	bmi.n	8002014 <_malloc_r+0x8c>
 8001fe2:	2b0b      	cmp	r3, #11
 8001fe4:	d90f      	bls.n	8002006 <_malloc_r+0x7e>
 8001fe6:	600b      	str	r3, [r1, #0]
 8001fe8:	18cc      	adds	r4, r1, r3
 8001fea:	50cd      	str	r5, [r1, r3]
 8001fec:	4630      	mov	r0, r6
 8001fee:	f000 fb68 	bl	80026c2 <__malloc_unlock>
 8001ff2:	f104 000b 	add.w	r0, r4, #11
 8001ff6:	1d23      	adds	r3, r4, #4
 8001ff8:	f020 0007 	bic.w	r0, r0, #7
 8001ffc:	1ac3      	subs	r3, r0, r3
 8001ffe:	d0d3      	beq.n	8001fa8 <_malloc_r+0x20>
 8002000:	425a      	negs	r2, r3
 8002002:	50e2      	str	r2, [r4, r3]
 8002004:	e7d0      	b.n	8001fa8 <_malloc_r+0x20>
 8002006:	684b      	ldr	r3, [r1, #4]
 8002008:	428c      	cmp	r4, r1
 800200a:	bf16      	itet	ne
 800200c:	6063      	strne	r3, [r4, #4]
 800200e:	6013      	streq	r3, [r2, #0]
 8002010:	460c      	movne	r4, r1
 8002012:	e7eb      	b.n	8001fec <_malloc_r+0x64>
 8002014:	460c      	mov	r4, r1
 8002016:	6849      	ldr	r1, [r1, #4]
 8002018:	e7cc      	b.n	8001fb4 <_malloc_r+0x2c>
 800201a:	1cc4      	adds	r4, r0, #3
 800201c:	f024 0403 	bic.w	r4, r4, #3
 8002020:	42a0      	cmp	r0, r4
 8002022:	d005      	beq.n	8002030 <_malloc_r+0xa8>
 8002024:	1a21      	subs	r1, r4, r0
 8002026:	4630      	mov	r0, r6
 8002028:	f000 fb08 	bl	800263c <_sbrk_r>
 800202c:	3001      	adds	r0, #1
 800202e:	d0cf      	beq.n	8001fd0 <_malloc_r+0x48>
 8002030:	6025      	str	r5, [r4, #0]
 8002032:	e7db      	b.n	8001fec <_malloc_r+0x64>
 8002034:	200000b4 	.word	0x200000b4
 8002038:	200000b8 	.word	0x200000b8

0800203c <_realloc_r>:
 800203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203e:	4607      	mov	r7, r0
 8002040:	4614      	mov	r4, r2
 8002042:	460e      	mov	r6, r1
 8002044:	b921      	cbnz	r1, 8002050 <_realloc_r+0x14>
 8002046:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800204a:	4611      	mov	r1, r2
 800204c:	f7ff bf9c 	b.w	8001f88 <_malloc_r>
 8002050:	b922      	cbnz	r2, 800205c <_realloc_r+0x20>
 8002052:	f000 fb37 	bl	80026c4 <_free_r>
 8002056:	4625      	mov	r5, r4
 8002058:	4628      	mov	r0, r5
 800205a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800205c:	f000 fb7e 	bl	800275c <_malloc_usable_size_r>
 8002060:	42a0      	cmp	r0, r4
 8002062:	d20f      	bcs.n	8002084 <_realloc_r+0x48>
 8002064:	4621      	mov	r1, r4
 8002066:	4638      	mov	r0, r7
 8002068:	f7ff ff8e 	bl	8001f88 <_malloc_r>
 800206c:	4605      	mov	r5, r0
 800206e:	2800      	cmp	r0, #0
 8002070:	d0f2      	beq.n	8002058 <_realloc_r+0x1c>
 8002072:	4631      	mov	r1, r6
 8002074:	4622      	mov	r2, r4
 8002076:	f000 faff 	bl	8002678 <memcpy>
 800207a:	4631      	mov	r1, r6
 800207c:	4638      	mov	r0, r7
 800207e:	f000 fb21 	bl	80026c4 <_free_r>
 8002082:	e7e9      	b.n	8002058 <_realloc_r+0x1c>
 8002084:	4635      	mov	r5, r6
 8002086:	e7e7      	b.n	8002058 <_realloc_r+0x1c>

08002088 <__ssputs_r>:
 8002088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800208c:	688e      	ldr	r6, [r1, #8]
 800208e:	4682      	mov	sl, r0
 8002090:	429e      	cmp	r6, r3
 8002092:	460c      	mov	r4, r1
 8002094:	4690      	mov	r8, r2
 8002096:	4699      	mov	r9, r3
 8002098:	d837      	bhi.n	800210a <__ssputs_r+0x82>
 800209a:	898a      	ldrh	r2, [r1, #12]
 800209c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80020a0:	d031      	beq.n	8002106 <__ssputs_r+0x7e>
 80020a2:	2302      	movs	r3, #2
 80020a4:	6825      	ldr	r5, [r4, #0]
 80020a6:	6909      	ldr	r1, [r1, #16]
 80020a8:	1a6f      	subs	r7, r5, r1
 80020aa:	6965      	ldr	r5, [r4, #20]
 80020ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80020b4:	f109 0301 	add.w	r3, r9, #1
 80020b8:	443b      	add	r3, r7
 80020ba:	429d      	cmp	r5, r3
 80020bc:	bf38      	it	cc
 80020be:	461d      	movcc	r5, r3
 80020c0:	0553      	lsls	r3, r2, #21
 80020c2:	d530      	bpl.n	8002126 <__ssputs_r+0x9e>
 80020c4:	4629      	mov	r1, r5
 80020c6:	f7ff ff5f 	bl	8001f88 <_malloc_r>
 80020ca:	4606      	mov	r6, r0
 80020cc:	b950      	cbnz	r0, 80020e4 <__ssputs_r+0x5c>
 80020ce:	230c      	movs	r3, #12
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f8ca 3000 	str.w	r3, [sl]
 80020d8:	89a3      	ldrh	r3, [r4, #12]
 80020da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020de:	81a3      	strh	r3, [r4, #12]
 80020e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020e4:	463a      	mov	r2, r7
 80020e6:	6921      	ldr	r1, [r4, #16]
 80020e8:	f000 fac6 	bl	8002678 <memcpy>
 80020ec:	89a3      	ldrh	r3, [r4, #12]
 80020ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80020f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f6:	81a3      	strh	r3, [r4, #12]
 80020f8:	6126      	str	r6, [r4, #16]
 80020fa:	443e      	add	r6, r7
 80020fc:	6026      	str	r6, [r4, #0]
 80020fe:	464e      	mov	r6, r9
 8002100:	6165      	str	r5, [r4, #20]
 8002102:	1bed      	subs	r5, r5, r7
 8002104:	60a5      	str	r5, [r4, #8]
 8002106:	454e      	cmp	r6, r9
 8002108:	d900      	bls.n	800210c <__ssputs_r+0x84>
 800210a:	464e      	mov	r6, r9
 800210c:	4632      	mov	r2, r6
 800210e:	4641      	mov	r1, r8
 8002110:	6820      	ldr	r0, [r4, #0]
 8002112:	f000 fabc 	bl	800268e <memmove>
 8002116:	68a3      	ldr	r3, [r4, #8]
 8002118:	2000      	movs	r0, #0
 800211a:	1b9b      	subs	r3, r3, r6
 800211c:	60a3      	str	r3, [r4, #8]
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	441e      	add	r6, r3
 8002122:	6026      	str	r6, [r4, #0]
 8002124:	e7dc      	b.n	80020e0 <__ssputs_r+0x58>
 8002126:	462a      	mov	r2, r5
 8002128:	f7ff ff88 	bl	800203c <_realloc_r>
 800212c:	4606      	mov	r6, r0
 800212e:	2800      	cmp	r0, #0
 8002130:	d1e2      	bne.n	80020f8 <__ssputs_r+0x70>
 8002132:	6921      	ldr	r1, [r4, #16]
 8002134:	4650      	mov	r0, sl
 8002136:	f000 fac5 	bl	80026c4 <_free_r>
 800213a:	e7c8      	b.n	80020ce <__ssputs_r+0x46>

0800213c <_svfiprintf_r>:
 800213c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002140:	461d      	mov	r5, r3
 8002142:	898b      	ldrh	r3, [r1, #12]
 8002144:	b09d      	sub	sp, #116	; 0x74
 8002146:	061f      	lsls	r7, r3, #24
 8002148:	4680      	mov	r8, r0
 800214a:	460c      	mov	r4, r1
 800214c:	4616      	mov	r6, r2
 800214e:	d50f      	bpl.n	8002170 <_svfiprintf_r+0x34>
 8002150:	690b      	ldr	r3, [r1, #16]
 8002152:	b96b      	cbnz	r3, 8002170 <_svfiprintf_r+0x34>
 8002154:	2140      	movs	r1, #64	; 0x40
 8002156:	f7ff ff17 	bl	8001f88 <_malloc_r>
 800215a:	6020      	str	r0, [r4, #0]
 800215c:	6120      	str	r0, [r4, #16]
 800215e:	b928      	cbnz	r0, 800216c <_svfiprintf_r+0x30>
 8002160:	230c      	movs	r3, #12
 8002162:	f8c8 3000 	str.w	r3, [r8]
 8002166:	f04f 30ff 	mov.w	r0, #4294967295
 800216a:	e0c8      	b.n	80022fe <_svfiprintf_r+0x1c2>
 800216c:	2340      	movs	r3, #64	; 0x40
 800216e:	6163      	str	r3, [r4, #20]
 8002170:	2300      	movs	r3, #0
 8002172:	9309      	str	r3, [sp, #36]	; 0x24
 8002174:	2320      	movs	r3, #32
 8002176:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800217a:	2330      	movs	r3, #48	; 0x30
 800217c:	f04f 0b01 	mov.w	fp, #1
 8002180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002184:	9503      	str	r5, [sp, #12]
 8002186:	4637      	mov	r7, r6
 8002188:	463d      	mov	r5, r7
 800218a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800218e:	b10b      	cbz	r3, 8002194 <_svfiprintf_r+0x58>
 8002190:	2b25      	cmp	r3, #37	; 0x25
 8002192:	d13e      	bne.n	8002212 <_svfiprintf_r+0xd6>
 8002194:	ebb7 0a06 	subs.w	sl, r7, r6
 8002198:	d00b      	beq.n	80021b2 <_svfiprintf_r+0x76>
 800219a:	4653      	mov	r3, sl
 800219c:	4632      	mov	r2, r6
 800219e:	4621      	mov	r1, r4
 80021a0:	4640      	mov	r0, r8
 80021a2:	f7ff ff71 	bl	8002088 <__ssputs_r>
 80021a6:	3001      	adds	r0, #1
 80021a8:	f000 80a4 	beq.w	80022f4 <_svfiprintf_r+0x1b8>
 80021ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021ae:	4453      	add	r3, sl
 80021b0:	9309      	str	r3, [sp, #36]	; 0x24
 80021b2:	783b      	ldrb	r3, [r7, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 809d 	beq.w	80022f4 <_svfiprintf_r+0x1b8>
 80021ba:	2300      	movs	r3, #0
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021c4:	9304      	str	r3, [sp, #16]
 80021c6:	9307      	str	r3, [sp, #28]
 80021c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021cc:	931a      	str	r3, [sp, #104]	; 0x68
 80021ce:	462f      	mov	r7, r5
 80021d0:	2205      	movs	r2, #5
 80021d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80021d6:	4850      	ldr	r0, [pc, #320]	; (8002318 <_svfiprintf_r+0x1dc>)
 80021d8:	f000 fa40 	bl	800265c <memchr>
 80021dc:	9b04      	ldr	r3, [sp, #16]
 80021de:	b9d0      	cbnz	r0, 8002216 <_svfiprintf_r+0xda>
 80021e0:	06d9      	lsls	r1, r3, #27
 80021e2:	bf44      	itt	mi
 80021e4:	2220      	movmi	r2, #32
 80021e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80021ea:	071a      	lsls	r2, r3, #28
 80021ec:	bf44      	itt	mi
 80021ee:	222b      	movmi	r2, #43	; 0x2b
 80021f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80021f4:	782a      	ldrb	r2, [r5, #0]
 80021f6:	2a2a      	cmp	r2, #42	; 0x2a
 80021f8:	d015      	beq.n	8002226 <_svfiprintf_r+0xea>
 80021fa:	462f      	mov	r7, r5
 80021fc:	2000      	movs	r0, #0
 80021fe:	250a      	movs	r5, #10
 8002200:	9a07      	ldr	r2, [sp, #28]
 8002202:	4639      	mov	r1, r7
 8002204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002208:	3b30      	subs	r3, #48	; 0x30
 800220a:	2b09      	cmp	r3, #9
 800220c:	d94d      	bls.n	80022aa <_svfiprintf_r+0x16e>
 800220e:	b1b8      	cbz	r0, 8002240 <_svfiprintf_r+0x104>
 8002210:	e00f      	b.n	8002232 <_svfiprintf_r+0xf6>
 8002212:	462f      	mov	r7, r5
 8002214:	e7b8      	b.n	8002188 <_svfiprintf_r+0x4c>
 8002216:	4a40      	ldr	r2, [pc, #256]	; (8002318 <_svfiprintf_r+0x1dc>)
 8002218:	463d      	mov	r5, r7
 800221a:	1a80      	subs	r0, r0, r2
 800221c:	fa0b f000 	lsl.w	r0, fp, r0
 8002220:	4318      	orrs	r0, r3
 8002222:	9004      	str	r0, [sp, #16]
 8002224:	e7d3      	b.n	80021ce <_svfiprintf_r+0x92>
 8002226:	9a03      	ldr	r2, [sp, #12]
 8002228:	1d11      	adds	r1, r2, #4
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	9103      	str	r1, [sp, #12]
 800222e:	2a00      	cmp	r2, #0
 8002230:	db01      	blt.n	8002236 <_svfiprintf_r+0xfa>
 8002232:	9207      	str	r2, [sp, #28]
 8002234:	e004      	b.n	8002240 <_svfiprintf_r+0x104>
 8002236:	4252      	negs	r2, r2
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	9207      	str	r2, [sp, #28]
 800223e:	9304      	str	r3, [sp, #16]
 8002240:	783b      	ldrb	r3, [r7, #0]
 8002242:	2b2e      	cmp	r3, #46	; 0x2e
 8002244:	d10c      	bne.n	8002260 <_svfiprintf_r+0x124>
 8002246:	787b      	ldrb	r3, [r7, #1]
 8002248:	2b2a      	cmp	r3, #42	; 0x2a
 800224a:	d133      	bne.n	80022b4 <_svfiprintf_r+0x178>
 800224c:	9b03      	ldr	r3, [sp, #12]
 800224e:	3702      	adds	r7, #2
 8002250:	1d1a      	adds	r2, r3, #4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	9203      	str	r2, [sp, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	bfb8      	it	lt
 800225a:	f04f 33ff 	movlt.w	r3, #4294967295
 800225e:	9305      	str	r3, [sp, #20]
 8002260:	4d2e      	ldr	r5, [pc, #184]	; (800231c <_svfiprintf_r+0x1e0>)
 8002262:	2203      	movs	r2, #3
 8002264:	7839      	ldrb	r1, [r7, #0]
 8002266:	4628      	mov	r0, r5
 8002268:	f000 f9f8 	bl	800265c <memchr>
 800226c:	b138      	cbz	r0, 800227e <_svfiprintf_r+0x142>
 800226e:	2340      	movs	r3, #64	; 0x40
 8002270:	1b40      	subs	r0, r0, r5
 8002272:	fa03 f000 	lsl.w	r0, r3, r0
 8002276:	9b04      	ldr	r3, [sp, #16]
 8002278:	3701      	adds	r7, #1
 800227a:	4303      	orrs	r3, r0
 800227c:	9304      	str	r3, [sp, #16]
 800227e:	7839      	ldrb	r1, [r7, #0]
 8002280:	2206      	movs	r2, #6
 8002282:	4827      	ldr	r0, [pc, #156]	; (8002320 <_svfiprintf_r+0x1e4>)
 8002284:	1c7e      	adds	r6, r7, #1
 8002286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800228a:	f000 f9e7 	bl	800265c <memchr>
 800228e:	2800      	cmp	r0, #0
 8002290:	d038      	beq.n	8002304 <_svfiprintf_r+0x1c8>
 8002292:	4b24      	ldr	r3, [pc, #144]	; (8002324 <_svfiprintf_r+0x1e8>)
 8002294:	bb13      	cbnz	r3, 80022dc <_svfiprintf_r+0x1a0>
 8002296:	9b03      	ldr	r3, [sp, #12]
 8002298:	3307      	adds	r3, #7
 800229a:	f023 0307 	bic.w	r3, r3, #7
 800229e:	3308      	adds	r3, #8
 80022a0:	9303      	str	r3, [sp, #12]
 80022a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022a4:	444b      	add	r3, r9
 80022a6:	9309      	str	r3, [sp, #36]	; 0x24
 80022a8:	e76d      	b.n	8002186 <_svfiprintf_r+0x4a>
 80022aa:	fb05 3202 	mla	r2, r5, r2, r3
 80022ae:	2001      	movs	r0, #1
 80022b0:	460f      	mov	r7, r1
 80022b2:	e7a6      	b.n	8002202 <_svfiprintf_r+0xc6>
 80022b4:	2300      	movs	r3, #0
 80022b6:	250a      	movs	r5, #10
 80022b8:	4619      	mov	r1, r3
 80022ba:	3701      	adds	r7, #1
 80022bc:	9305      	str	r3, [sp, #20]
 80022be:	4638      	mov	r0, r7
 80022c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022c4:	3a30      	subs	r2, #48	; 0x30
 80022c6:	2a09      	cmp	r2, #9
 80022c8:	d903      	bls.n	80022d2 <_svfiprintf_r+0x196>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0c8      	beq.n	8002260 <_svfiprintf_r+0x124>
 80022ce:	9105      	str	r1, [sp, #20]
 80022d0:	e7c6      	b.n	8002260 <_svfiprintf_r+0x124>
 80022d2:	fb05 2101 	mla	r1, r5, r1, r2
 80022d6:	2301      	movs	r3, #1
 80022d8:	4607      	mov	r7, r0
 80022da:	e7f0      	b.n	80022be <_svfiprintf_r+0x182>
 80022dc:	ab03      	add	r3, sp, #12
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	4622      	mov	r2, r4
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <_svfiprintf_r+0x1ec>)
 80022e4:	a904      	add	r1, sp, #16
 80022e6:	4640      	mov	r0, r8
 80022e8:	f3af 8000 	nop.w
 80022ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80022f0:	4681      	mov	r9, r0
 80022f2:	d1d6      	bne.n	80022a2 <_svfiprintf_r+0x166>
 80022f4:	89a3      	ldrh	r3, [r4, #12]
 80022f6:	065b      	lsls	r3, r3, #25
 80022f8:	f53f af35 	bmi.w	8002166 <_svfiprintf_r+0x2a>
 80022fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022fe:	b01d      	add	sp, #116	; 0x74
 8002300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002304:	ab03      	add	r3, sp, #12
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	4622      	mov	r2, r4
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <_svfiprintf_r+0x1ec>)
 800230c:	a904      	add	r1, sp, #16
 800230e:	4640      	mov	r0, r8
 8002310:	f000 f882 	bl	8002418 <_printf_i>
 8002314:	e7ea      	b.n	80022ec <_svfiprintf_r+0x1b0>
 8002316:	bf00      	nop
 8002318:	0800278b 	.word	0x0800278b
 800231c:	08002791 	.word	0x08002791
 8002320:	08002795 	.word	0x08002795
 8002324:	00000000 	.word	0x00000000
 8002328:	08002089 	.word	0x08002089

0800232c <_printf_common>:
 800232c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002330:	4691      	mov	r9, r2
 8002332:	461f      	mov	r7, r3
 8002334:	688a      	ldr	r2, [r1, #8]
 8002336:	690b      	ldr	r3, [r1, #16]
 8002338:	4606      	mov	r6, r0
 800233a:	4293      	cmp	r3, r2
 800233c:	bfb8      	it	lt
 800233e:	4613      	movlt	r3, r2
 8002340:	f8c9 3000 	str.w	r3, [r9]
 8002344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002348:	460c      	mov	r4, r1
 800234a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800234e:	b112      	cbz	r2, 8002356 <_printf_common+0x2a>
 8002350:	3301      	adds	r3, #1
 8002352:	f8c9 3000 	str.w	r3, [r9]
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	0699      	lsls	r1, r3, #26
 800235a:	bf42      	ittt	mi
 800235c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002360:	3302      	addmi	r3, #2
 8002362:	f8c9 3000 	strmi.w	r3, [r9]
 8002366:	6825      	ldr	r5, [r4, #0]
 8002368:	f015 0506 	ands.w	r5, r5, #6
 800236c:	d107      	bne.n	800237e <_printf_common+0x52>
 800236e:	f104 0a19 	add.w	sl, r4, #25
 8002372:	68e3      	ldr	r3, [r4, #12]
 8002374:	f8d9 2000 	ldr.w	r2, [r9]
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	42ab      	cmp	r3, r5
 800237c:	dc29      	bgt.n	80023d2 <_printf_common+0xa6>
 800237e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002382:	6822      	ldr	r2, [r4, #0]
 8002384:	3300      	adds	r3, #0
 8002386:	bf18      	it	ne
 8002388:	2301      	movne	r3, #1
 800238a:	0692      	lsls	r2, r2, #26
 800238c:	d42e      	bmi.n	80023ec <_printf_common+0xc0>
 800238e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002392:	4639      	mov	r1, r7
 8002394:	4630      	mov	r0, r6
 8002396:	47c0      	blx	r8
 8002398:	3001      	adds	r0, #1
 800239a:	d021      	beq.n	80023e0 <_printf_common+0xb4>
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	68e5      	ldr	r5, [r4, #12]
 80023a0:	f003 0306 	and.w	r3, r3, #6
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	bf18      	it	ne
 80023a8:	2500      	movne	r5, #0
 80023aa:	f8d9 2000 	ldr.w	r2, [r9]
 80023ae:	f04f 0900 	mov.w	r9, #0
 80023b2:	bf08      	it	eq
 80023b4:	1aad      	subeq	r5, r5, r2
 80023b6:	68a3      	ldr	r3, [r4, #8]
 80023b8:	6922      	ldr	r2, [r4, #16]
 80023ba:	bf08      	it	eq
 80023bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bfc4      	itt	gt
 80023c4:	1a9b      	subgt	r3, r3, r2
 80023c6:	18ed      	addgt	r5, r5, r3
 80023c8:	341a      	adds	r4, #26
 80023ca:	454d      	cmp	r5, r9
 80023cc:	d11a      	bne.n	8002404 <_printf_common+0xd8>
 80023ce:	2000      	movs	r0, #0
 80023d0:	e008      	b.n	80023e4 <_printf_common+0xb8>
 80023d2:	2301      	movs	r3, #1
 80023d4:	4652      	mov	r2, sl
 80023d6:	4639      	mov	r1, r7
 80023d8:	4630      	mov	r0, r6
 80023da:	47c0      	blx	r8
 80023dc:	3001      	adds	r0, #1
 80023de:	d103      	bne.n	80023e8 <_printf_common+0xbc>
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023e8:	3501      	adds	r5, #1
 80023ea:	e7c2      	b.n	8002372 <_printf_common+0x46>
 80023ec:	2030      	movs	r0, #48	; 0x30
 80023ee:	18e1      	adds	r1, r4, r3
 80023f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023fa:	4422      	add	r2, r4
 80023fc:	3302      	adds	r3, #2
 80023fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002402:	e7c4      	b.n	800238e <_printf_common+0x62>
 8002404:	2301      	movs	r3, #1
 8002406:	4622      	mov	r2, r4
 8002408:	4639      	mov	r1, r7
 800240a:	4630      	mov	r0, r6
 800240c:	47c0      	blx	r8
 800240e:	3001      	adds	r0, #1
 8002410:	d0e6      	beq.n	80023e0 <_printf_common+0xb4>
 8002412:	f109 0901 	add.w	r9, r9, #1
 8002416:	e7d8      	b.n	80023ca <_printf_common+0x9e>

08002418 <_printf_i>:
 8002418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800241c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002420:	460c      	mov	r4, r1
 8002422:	7e09      	ldrb	r1, [r1, #24]
 8002424:	b085      	sub	sp, #20
 8002426:	296e      	cmp	r1, #110	; 0x6e
 8002428:	4617      	mov	r7, r2
 800242a:	4606      	mov	r6, r0
 800242c:	4698      	mov	r8, r3
 800242e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002430:	f000 80b3 	beq.w	800259a <_printf_i+0x182>
 8002434:	d822      	bhi.n	800247c <_printf_i+0x64>
 8002436:	2963      	cmp	r1, #99	; 0x63
 8002438:	d036      	beq.n	80024a8 <_printf_i+0x90>
 800243a:	d80a      	bhi.n	8002452 <_printf_i+0x3a>
 800243c:	2900      	cmp	r1, #0
 800243e:	f000 80b9 	beq.w	80025b4 <_printf_i+0x19c>
 8002442:	2958      	cmp	r1, #88	; 0x58
 8002444:	f000 8083 	beq.w	800254e <_printf_i+0x136>
 8002448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800244c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002450:	e032      	b.n	80024b8 <_printf_i+0xa0>
 8002452:	2964      	cmp	r1, #100	; 0x64
 8002454:	d001      	beq.n	800245a <_printf_i+0x42>
 8002456:	2969      	cmp	r1, #105	; 0x69
 8002458:	d1f6      	bne.n	8002448 <_printf_i+0x30>
 800245a:	6820      	ldr	r0, [r4, #0]
 800245c:	6813      	ldr	r3, [r2, #0]
 800245e:	0605      	lsls	r5, r0, #24
 8002460:	f103 0104 	add.w	r1, r3, #4
 8002464:	d52a      	bpl.n	80024bc <_printf_i+0xa4>
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6011      	str	r1, [r2, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	da03      	bge.n	8002476 <_printf_i+0x5e>
 800246e:	222d      	movs	r2, #45	; 0x2d
 8002470:	425b      	negs	r3, r3
 8002472:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002476:	486f      	ldr	r0, [pc, #444]	; (8002634 <_printf_i+0x21c>)
 8002478:	220a      	movs	r2, #10
 800247a:	e039      	b.n	80024f0 <_printf_i+0xd8>
 800247c:	2973      	cmp	r1, #115	; 0x73
 800247e:	f000 809d 	beq.w	80025bc <_printf_i+0x1a4>
 8002482:	d808      	bhi.n	8002496 <_printf_i+0x7e>
 8002484:	296f      	cmp	r1, #111	; 0x6f
 8002486:	d020      	beq.n	80024ca <_printf_i+0xb2>
 8002488:	2970      	cmp	r1, #112	; 0x70
 800248a:	d1dd      	bne.n	8002448 <_printf_i+0x30>
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	f043 0320 	orr.w	r3, r3, #32
 8002492:	6023      	str	r3, [r4, #0]
 8002494:	e003      	b.n	800249e <_printf_i+0x86>
 8002496:	2975      	cmp	r1, #117	; 0x75
 8002498:	d017      	beq.n	80024ca <_printf_i+0xb2>
 800249a:	2978      	cmp	r1, #120	; 0x78
 800249c:	d1d4      	bne.n	8002448 <_printf_i+0x30>
 800249e:	2378      	movs	r3, #120	; 0x78
 80024a0:	4865      	ldr	r0, [pc, #404]	; (8002638 <_printf_i+0x220>)
 80024a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024a6:	e055      	b.n	8002554 <_printf_i+0x13c>
 80024a8:	6813      	ldr	r3, [r2, #0]
 80024aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024ae:	1d19      	adds	r1, r3, #4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6011      	str	r1, [r2, #0]
 80024b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024b8:	2301      	movs	r3, #1
 80024ba:	e08c      	b.n	80025d6 <_printf_i+0x1be>
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024c2:	6011      	str	r1, [r2, #0]
 80024c4:	bf18      	it	ne
 80024c6:	b21b      	sxthne	r3, r3
 80024c8:	e7cf      	b.n	800246a <_printf_i+0x52>
 80024ca:	6813      	ldr	r3, [r2, #0]
 80024cc:	6825      	ldr	r5, [r4, #0]
 80024ce:	1d18      	adds	r0, r3, #4
 80024d0:	6010      	str	r0, [r2, #0]
 80024d2:	0628      	lsls	r0, r5, #24
 80024d4:	d501      	bpl.n	80024da <_printf_i+0xc2>
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	e002      	b.n	80024e0 <_printf_i+0xc8>
 80024da:	0668      	lsls	r0, r5, #25
 80024dc:	d5fb      	bpl.n	80024d6 <_printf_i+0xbe>
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	296f      	cmp	r1, #111	; 0x6f
 80024e2:	bf14      	ite	ne
 80024e4:	220a      	movne	r2, #10
 80024e6:	2208      	moveq	r2, #8
 80024e8:	4852      	ldr	r0, [pc, #328]	; (8002634 <_printf_i+0x21c>)
 80024ea:	2100      	movs	r1, #0
 80024ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024f0:	6865      	ldr	r5, [r4, #4]
 80024f2:	2d00      	cmp	r5, #0
 80024f4:	60a5      	str	r5, [r4, #8]
 80024f6:	f2c0 8095 	blt.w	8002624 <_printf_i+0x20c>
 80024fa:	6821      	ldr	r1, [r4, #0]
 80024fc:	f021 0104 	bic.w	r1, r1, #4
 8002500:	6021      	str	r1, [r4, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d13d      	bne.n	8002582 <_printf_i+0x16a>
 8002506:	2d00      	cmp	r5, #0
 8002508:	f040 808e 	bne.w	8002628 <_printf_i+0x210>
 800250c:	4665      	mov	r5, ip
 800250e:	2a08      	cmp	r2, #8
 8002510:	d10b      	bne.n	800252a <_printf_i+0x112>
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	07db      	lsls	r3, r3, #31
 8002516:	d508      	bpl.n	800252a <_printf_i+0x112>
 8002518:	6923      	ldr	r3, [r4, #16]
 800251a:	6862      	ldr	r2, [r4, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	bfde      	ittt	le
 8002520:	2330      	movle	r3, #48	; 0x30
 8002522:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002526:	f105 35ff 	addle.w	r5, r5, #4294967295
 800252a:	ebac 0305 	sub.w	r3, ip, r5
 800252e:	6123      	str	r3, [r4, #16]
 8002530:	f8cd 8000 	str.w	r8, [sp]
 8002534:	463b      	mov	r3, r7
 8002536:	aa03      	add	r2, sp, #12
 8002538:	4621      	mov	r1, r4
 800253a:	4630      	mov	r0, r6
 800253c:	f7ff fef6 	bl	800232c <_printf_common>
 8002540:	3001      	adds	r0, #1
 8002542:	d14d      	bne.n	80025e0 <_printf_i+0x1c8>
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	b005      	add	sp, #20
 800254a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800254e:	4839      	ldr	r0, [pc, #228]	; (8002634 <_printf_i+0x21c>)
 8002550:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	6821      	ldr	r1, [r4, #0]
 8002558:	1d1d      	adds	r5, r3, #4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6015      	str	r5, [r2, #0]
 800255e:	060a      	lsls	r2, r1, #24
 8002560:	d50b      	bpl.n	800257a <_printf_i+0x162>
 8002562:	07ca      	lsls	r2, r1, #31
 8002564:	bf44      	itt	mi
 8002566:	f041 0120 	orrmi.w	r1, r1, #32
 800256a:	6021      	strmi	r1, [r4, #0]
 800256c:	b91b      	cbnz	r3, 8002576 <_printf_i+0x15e>
 800256e:	6822      	ldr	r2, [r4, #0]
 8002570:	f022 0220 	bic.w	r2, r2, #32
 8002574:	6022      	str	r2, [r4, #0]
 8002576:	2210      	movs	r2, #16
 8002578:	e7b7      	b.n	80024ea <_printf_i+0xd2>
 800257a:	064d      	lsls	r5, r1, #25
 800257c:	bf48      	it	mi
 800257e:	b29b      	uxthmi	r3, r3
 8002580:	e7ef      	b.n	8002562 <_printf_i+0x14a>
 8002582:	4665      	mov	r5, ip
 8002584:	fbb3 f1f2 	udiv	r1, r3, r2
 8002588:	fb02 3311 	mls	r3, r2, r1, r3
 800258c:	5cc3      	ldrb	r3, [r0, r3]
 800258e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002592:	460b      	mov	r3, r1
 8002594:	2900      	cmp	r1, #0
 8002596:	d1f5      	bne.n	8002584 <_printf_i+0x16c>
 8002598:	e7b9      	b.n	800250e <_printf_i+0xf6>
 800259a:	6813      	ldr	r3, [r2, #0]
 800259c:	6825      	ldr	r5, [r4, #0]
 800259e:	1d18      	adds	r0, r3, #4
 80025a0:	6961      	ldr	r1, [r4, #20]
 80025a2:	6010      	str	r0, [r2, #0]
 80025a4:	0628      	lsls	r0, r5, #24
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	d501      	bpl.n	80025ae <_printf_i+0x196>
 80025aa:	6019      	str	r1, [r3, #0]
 80025ac:	e002      	b.n	80025b4 <_printf_i+0x19c>
 80025ae:	066a      	lsls	r2, r5, #25
 80025b0:	d5fb      	bpl.n	80025aa <_printf_i+0x192>
 80025b2:	8019      	strh	r1, [r3, #0]
 80025b4:	2300      	movs	r3, #0
 80025b6:	4665      	mov	r5, ip
 80025b8:	6123      	str	r3, [r4, #16]
 80025ba:	e7b9      	b.n	8002530 <_printf_i+0x118>
 80025bc:	6813      	ldr	r3, [r2, #0]
 80025be:	1d19      	adds	r1, r3, #4
 80025c0:	6011      	str	r1, [r2, #0]
 80025c2:	681d      	ldr	r5, [r3, #0]
 80025c4:	6862      	ldr	r2, [r4, #4]
 80025c6:	2100      	movs	r1, #0
 80025c8:	4628      	mov	r0, r5
 80025ca:	f000 f847 	bl	800265c <memchr>
 80025ce:	b108      	cbz	r0, 80025d4 <_printf_i+0x1bc>
 80025d0:	1b40      	subs	r0, r0, r5
 80025d2:	6060      	str	r0, [r4, #4]
 80025d4:	6863      	ldr	r3, [r4, #4]
 80025d6:	6123      	str	r3, [r4, #16]
 80025d8:	2300      	movs	r3, #0
 80025da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025de:	e7a7      	b.n	8002530 <_printf_i+0x118>
 80025e0:	6923      	ldr	r3, [r4, #16]
 80025e2:	462a      	mov	r2, r5
 80025e4:	4639      	mov	r1, r7
 80025e6:	4630      	mov	r0, r6
 80025e8:	47c0      	blx	r8
 80025ea:	3001      	adds	r0, #1
 80025ec:	d0aa      	beq.n	8002544 <_printf_i+0x12c>
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	079b      	lsls	r3, r3, #30
 80025f2:	d413      	bmi.n	800261c <_printf_i+0x204>
 80025f4:	68e0      	ldr	r0, [r4, #12]
 80025f6:	9b03      	ldr	r3, [sp, #12]
 80025f8:	4298      	cmp	r0, r3
 80025fa:	bfb8      	it	lt
 80025fc:	4618      	movlt	r0, r3
 80025fe:	e7a3      	b.n	8002548 <_printf_i+0x130>
 8002600:	2301      	movs	r3, #1
 8002602:	464a      	mov	r2, r9
 8002604:	4639      	mov	r1, r7
 8002606:	4630      	mov	r0, r6
 8002608:	47c0      	blx	r8
 800260a:	3001      	adds	r0, #1
 800260c:	d09a      	beq.n	8002544 <_printf_i+0x12c>
 800260e:	3501      	adds	r5, #1
 8002610:	68e3      	ldr	r3, [r4, #12]
 8002612:	9a03      	ldr	r2, [sp, #12]
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	42ab      	cmp	r3, r5
 8002618:	dcf2      	bgt.n	8002600 <_printf_i+0x1e8>
 800261a:	e7eb      	b.n	80025f4 <_printf_i+0x1dc>
 800261c:	2500      	movs	r5, #0
 800261e:	f104 0919 	add.w	r9, r4, #25
 8002622:	e7f5      	b.n	8002610 <_printf_i+0x1f8>
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ac      	bne.n	8002582 <_printf_i+0x16a>
 8002628:	7803      	ldrb	r3, [r0, #0]
 800262a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800262e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002632:	e76c      	b.n	800250e <_printf_i+0xf6>
 8002634:	0800279c 	.word	0x0800279c
 8002638:	080027ad 	.word	0x080027ad

0800263c <_sbrk_r>:
 800263c:	b538      	push	{r3, r4, r5, lr}
 800263e:	2300      	movs	r3, #0
 8002640:	4c05      	ldr	r4, [pc, #20]	; (8002658 <_sbrk_r+0x1c>)
 8002642:	4605      	mov	r5, r0
 8002644:	4608      	mov	r0, r1
 8002646:	6023      	str	r3, [r4, #0]
 8002648:	f7fe fa02 	bl	8000a50 <_sbrk>
 800264c:	1c43      	adds	r3, r0, #1
 800264e:	d102      	bne.n	8002656 <_sbrk_r+0x1a>
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	b103      	cbz	r3, 8002656 <_sbrk_r+0x1a>
 8002654:	602b      	str	r3, [r5, #0]
 8002656:	bd38      	pop	{r3, r4, r5, pc}
 8002658:	200001dc 	.word	0x200001dc

0800265c <memchr>:
 800265c:	b510      	push	{r4, lr}
 800265e:	b2c9      	uxtb	r1, r1
 8002660:	4402      	add	r2, r0
 8002662:	4290      	cmp	r0, r2
 8002664:	4603      	mov	r3, r0
 8002666:	d101      	bne.n	800266c <memchr+0x10>
 8002668:	2300      	movs	r3, #0
 800266a:	e003      	b.n	8002674 <memchr+0x18>
 800266c:	781c      	ldrb	r4, [r3, #0]
 800266e:	3001      	adds	r0, #1
 8002670:	428c      	cmp	r4, r1
 8002672:	d1f6      	bne.n	8002662 <memchr+0x6>
 8002674:	4618      	mov	r0, r3
 8002676:	bd10      	pop	{r4, pc}

08002678 <memcpy>:
 8002678:	b510      	push	{r4, lr}
 800267a:	1e43      	subs	r3, r0, #1
 800267c:	440a      	add	r2, r1
 800267e:	4291      	cmp	r1, r2
 8002680:	d100      	bne.n	8002684 <memcpy+0xc>
 8002682:	bd10      	pop	{r4, pc}
 8002684:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800268c:	e7f7      	b.n	800267e <memcpy+0x6>

0800268e <memmove>:
 800268e:	4288      	cmp	r0, r1
 8002690:	b510      	push	{r4, lr}
 8002692:	eb01 0302 	add.w	r3, r1, r2
 8002696:	d807      	bhi.n	80026a8 <memmove+0x1a>
 8002698:	1e42      	subs	r2, r0, #1
 800269a:	4299      	cmp	r1, r3
 800269c:	d00a      	beq.n	80026b4 <memmove+0x26>
 800269e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80026a6:	e7f8      	b.n	800269a <memmove+0xc>
 80026a8:	4283      	cmp	r3, r0
 80026aa:	d9f5      	bls.n	8002698 <memmove+0xa>
 80026ac:	1881      	adds	r1, r0, r2
 80026ae:	1ad2      	subs	r2, r2, r3
 80026b0:	42d3      	cmn	r3, r2
 80026b2:	d100      	bne.n	80026b6 <memmove+0x28>
 80026b4:	bd10      	pop	{r4, pc}
 80026b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80026be:	e7f7      	b.n	80026b0 <memmove+0x22>

080026c0 <__malloc_lock>:
 80026c0:	4770      	bx	lr

080026c2 <__malloc_unlock>:
 80026c2:	4770      	bx	lr

080026c4 <_free_r>:
 80026c4:	b538      	push	{r3, r4, r5, lr}
 80026c6:	4605      	mov	r5, r0
 80026c8:	2900      	cmp	r1, #0
 80026ca:	d043      	beq.n	8002754 <_free_r+0x90>
 80026cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026d0:	1f0c      	subs	r4, r1, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bfb8      	it	lt
 80026d6:	18e4      	addlt	r4, r4, r3
 80026d8:	f7ff fff2 	bl	80026c0 <__malloc_lock>
 80026dc:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <_free_r+0x94>)
 80026de:	6813      	ldr	r3, [r2, #0]
 80026e0:	4610      	mov	r0, r2
 80026e2:	b933      	cbnz	r3, 80026f2 <_free_r+0x2e>
 80026e4:	6063      	str	r3, [r4, #4]
 80026e6:	6014      	str	r4, [r2, #0]
 80026e8:	4628      	mov	r0, r5
 80026ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026ee:	f7ff bfe8 	b.w	80026c2 <__malloc_unlock>
 80026f2:	42a3      	cmp	r3, r4
 80026f4:	d90b      	bls.n	800270e <_free_r+0x4a>
 80026f6:	6821      	ldr	r1, [r4, #0]
 80026f8:	1862      	adds	r2, r4, r1
 80026fa:	4293      	cmp	r3, r2
 80026fc:	bf01      	itttt	eq
 80026fe:	681a      	ldreq	r2, [r3, #0]
 8002700:	685b      	ldreq	r3, [r3, #4]
 8002702:	1852      	addeq	r2, r2, r1
 8002704:	6022      	streq	r2, [r4, #0]
 8002706:	6063      	str	r3, [r4, #4]
 8002708:	6004      	str	r4, [r0, #0]
 800270a:	e7ed      	b.n	80026e8 <_free_r+0x24>
 800270c:	4613      	mov	r3, r2
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	b10a      	cbz	r2, 8002716 <_free_r+0x52>
 8002712:	42a2      	cmp	r2, r4
 8002714:	d9fa      	bls.n	800270c <_free_r+0x48>
 8002716:	6819      	ldr	r1, [r3, #0]
 8002718:	1858      	adds	r0, r3, r1
 800271a:	42a0      	cmp	r0, r4
 800271c:	d10b      	bne.n	8002736 <_free_r+0x72>
 800271e:	6820      	ldr	r0, [r4, #0]
 8002720:	4401      	add	r1, r0
 8002722:	1858      	adds	r0, r3, r1
 8002724:	4282      	cmp	r2, r0
 8002726:	6019      	str	r1, [r3, #0]
 8002728:	d1de      	bne.n	80026e8 <_free_r+0x24>
 800272a:	6810      	ldr	r0, [r2, #0]
 800272c:	6852      	ldr	r2, [r2, #4]
 800272e:	4401      	add	r1, r0
 8002730:	6019      	str	r1, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	e7d8      	b.n	80026e8 <_free_r+0x24>
 8002736:	d902      	bls.n	800273e <_free_r+0x7a>
 8002738:	230c      	movs	r3, #12
 800273a:	602b      	str	r3, [r5, #0]
 800273c:	e7d4      	b.n	80026e8 <_free_r+0x24>
 800273e:	6820      	ldr	r0, [r4, #0]
 8002740:	1821      	adds	r1, r4, r0
 8002742:	428a      	cmp	r2, r1
 8002744:	bf01      	itttt	eq
 8002746:	6811      	ldreq	r1, [r2, #0]
 8002748:	6852      	ldreq	r2, [r2, #4]
 800274a:	1809      	addeq	r1, r1, r0
 800274c:	6021      	streq	r1, [r4, #0]
 800274e:	6062      	str	r2, [r4, #4]
 8002750:	605c      	str	r4, [r3, #4]
 8002752:	e7c9      	b.n	80026e8 <_free_r+0x24>
 8002754:	bd38      	pop	{r3, r4, r5, pc}
 8002756:	bf00      	nop
 8002758:	200000b4 	.word	0x200000b4

0800275c <_malloc_usable_size_r>:
 800275c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002760:	1f18      	subs	r0, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	bfbc      	itt	lt
 8002766:	580b      	ldrlt	r3, [r1, r0]
 8002768:	18c0      	addlt	r0, r0, r3
 800276a:	4770      	bx	lr

0800276c <_init>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr

08002778 <_fini>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr
