
IR_NEC.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d68  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee0  08003ee0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08003ee0  08003ee0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ee0  08003ee0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000084  08003f6c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08003f6c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085af  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001606  00000000  00000000  0002865c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000378  00000000  00000000  00029c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002c0  00000000  00000000  00029fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001915  00000000  00000000  0002a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004ffa  00000000  00000000  0002bbb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b5f8  00000000  00000000  00030baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003c1a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001018  00000000  00000000  0003c224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000084 	.word	0x20000084
 800014c:	00000000 	.word	0x00000000
 8000150:	08003e80 	.word	0x08003e80

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000088 	.word	0x20000088
 800016c:	08003e80 	.word	0x08003e80

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	d1ed      	bne.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d101      	bne.n	800076c <getposition+0x14>
		rval =0;
 8000768:	2300      	movs	r3, #0
 800076a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d101      	bne.n	8000776 <getposition+0x1e>
		rval =4;
 8000772:	2304      	movs	r3, #4
 8000774:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d101      	bne.n	8000780 <getposition+0x28>
		rval =8;
 800077c:	2308      	movs	r3, #8
 800077e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d101      	bne.n	800078a <getposition+0x32>
		rval =12;
 8000786:	230c      	movs	r3, #12
 8000788:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d101      	bne.n	8000794 <getposition+0x3c>
		rval =16;
 8000790:	2310      	movs	r3, #16
 8000792:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	2b05      	cmp	r3, #5
 8000798:	d101      	bne.n	800079e <getposition+0x46>
		rval =20;
 800079a:	2314      	movs	r3, #20
 800079c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	d101      	bne.n	80007a8 <getposition+0x50>
		rval =24;
 80007a4:	2318      	movs	r3, #24
 80007a6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	2b07      	cmp	r3, #7
 80007ac:	d101      	bne.n	80007b2 <getposition+0x5a>
		rval =28;
 80007ae:	231c      	movs	r3, #28
 80007b0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d101      	bne.n	80007bc <getposition+0x64>
		rval =0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	2b09      	cmp	r3, #9
 80007c0:	d101      	bne.n	80007c6 <getposition+0x6e>
		rval =4;
 80007c2:	2304      	movs	r3, #4
 80007c4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	2b0a      	cmp	r3, #10
 80007ca:	d101      	bne.n	80007d0 <getposition+0x78>
		rval =8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	2b0b      	cmp	r3, #11
 80007d4:	d101      	bne.n	80007da <getposition+0x82>
		rval =12;
 80007d6:	230c      	movs	r3, #12
 80007d8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	2b0c      	cmp	r3, #12
 80007de:	d101      	bne.n	80007e4 <getposition+0x8c>
		rval =16;
 80007e0:	2310      	movs	r3, #16
 80007e2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	2b0d      	cmp	r3, #13
 80007e8:	d101      	bne.n	80007ee <getposition+0x96>
		rval =20;
 80007ea:	2314      	movs	r3, #20
 80007ec:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	2b0e      	cmp	r3, #14
 80007f2:	d101      	bne.n	80007f8 <getposition+0xa0>
		rval =24;
 80007f4:	2318      	movs	r3, #24
 80007f6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	d101      	bne.n	8000802 <getposition+0xaa>
		rval =28;
 80007fe:	231c      	movs	r3, #28
 8000800:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000802:	7bfb      	ldrb	r3, [r7, #15]


}
 8000804:	4618      	mov	r0, r3
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
	...

08000810 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	460b      	mov	r3, r1
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4a69      	ldr	r2, [pc, #420]	; (80009c8 <pinmode+0x1b8>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d106      	bne.n	8000834 <pinmode+0x24>
		GPIOA_Clock_Enable();
 8000826:	4b69      	ldr	r3, [pc, #420]	; (80009cc <pinmode+0x1bc>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	4a68      	ldr	r2, [pc, #416]	; (80009cc <pinmode+0x1bc>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6193      	str	r3, [r2, #24]
 8000832:	e010      	b.n	8000856 <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4a66      	ldr	r2, [pc, #408]	; (80009d0 <pinmode+0x1c0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d106      	bne.n	800084a <pinmode+0x3a>
		GPIOB_Clock_Enable();
 800083c:	4b63      	ldr	r3, [pc, #396]	; (80009cc <pinmode+0x1bc>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a62      	ldr	r2, [pc, #392]	; (80009cc <pinmode+0x1bc>)
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	e005      	b.n	8000856 <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 800084a:	4b60      	ldr	r3, [pc, #384]	; (80009cc <pinmode+0x1bc>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a5f      	ldr	r2, [pc, #380]	; (80009cc <pinmode+0x1bc>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8000856:	897b      	ldrh	r3, [r7, #10]
 8000858:	2b07      	cmp	r3, #7
 800085a:	d856      	bhi.n	800090a <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 800085c:	897b      	ldrh	r3, [r7, #10]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff7a 	bl	8000758 <getposition>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	230f      	movs	r3, #15
 800086a:	4093      	lsls	r3, r2
 800086c:	43da      	mvns	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	401a      	ands	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b08      	cmp	r3, #8
 800087c:	d002      	beq.n	8000884 <pinmode+0x74>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b18      	cmp	r3, #24
 8000882:	d133      	bne.n	80008ec <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b18      	cmp	r3, #24
 8000888:	d117      	bne.n	80008ba <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 800088a:	897b      	ldrh	r3, [r7, #10]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff63 	bl	8000758 <getposition>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	2308      	movs	r3, #8
 8000898:	fa03 f202 	lsl.w	r2, r3, r2
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	431a      	orrs	r2, r3
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	897a      	ldrh	r2, [r7, #10]
 80008ac:	2101      	movs	r1, #1
 80008ae:	fa01 f202 	lsl.w	r2, r1, r2
 80008b2:	431a      	orrs	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80008b8:	e081      	b.n	80009be <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 80008ba:	897b      	ldrh	r3, [r7, #10]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff4b 	bl	8000758 <getposition>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	2308      	movs	r3, #8
 80008c8:	fa03 f202 	lsl.w	r2, r3, r2
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	431a      	orrs	r2, r3
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	897a      	ldrh	r2, [r7, #10]
 80008dc:	2101      	movs	r1, #1
 80008de:	fa01 f202 	lsl.w	r2, r1, r2
 80008e2:	43d2      	mvns	r2, r2
 80008e4:	401a      	ands	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80008ea:	e068      	b.n	80009be <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 80008ec:	897b      	ldrh	r3, [r7, #10]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff32 	bl	8000758 <getposition>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	fa03 f202 	lsl.w	r2, r3, r2
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	431a      	orrs	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	601a      	str	r2, [r3, #0]

	}



}
 8000908:	e059      	b.n	80009be <pinmode+0x1ae>
	else if(pin>7){
 800090a:	897b      	ldrh	r3, [r7, #10]
 800090c:	2b07      	cmp	r3, #7
 800090e:	d956      	bls.n	80009be <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 8000910:	897b      	ldrh	r3, [r7, #10]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff20 	bl	8000758 <getposition>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	230f      	movs	r3, #15
 800091e:	4093      	lsls	r3, r2
 8000920:	43da      	mvns	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	401a      	ands	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b08      	cmp	r3, #8
 8000930:	d002      	beq.n	8000938 <pinmode+0x128>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b18      	cmp	r3, #24
 8000936:	d133      	bne.n	80009a0 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b18      	cmp	r3, #24
 800093c:	d117      	bne.n	800096e <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800093e:	897b      	ldrh	r3, [r7, #10]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff09 	bl	8000758 <getposition>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	2308      	movs	r3, #8
 800094c:	fa03 f202 	lsl.w	r2, r3, r2
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	431a      	orrs	r2, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	897a      	ldrh	r2, [r7, #10]
 8000960:	2101      	movs	r1, #1
 8000962:	fa01 f202 	lsl.w	r2, r1, r2
 8000966:	431a      	orrs	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800096c:	e027      	b.n	80009be <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800096e:	897b      	ldrh	r3, [r7, #10]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fef1 	bl	8000758 <getposition>
 8000976:	4603      	mov	r3, r0
 8000978:	461a      	mov	r2, r3
 800097a:	2308      	movs	r3, #8
 800097c:	fa03 f202 	lsl.w	r2, r3, r2
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	431a      	orrs	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	897a      	ldrh	r2, [r7, #10]
 8000990:	2101      	movs	r1, #1
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	43d2      	mvns	r2, r2
 8000998:	401a      	ands	r2, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800099e:	e00e      	b.n	80009be <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 80009a0:	897b      	ldrh	r3, [r7, #10]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fed8 	bl	8000758 <getposition>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	fa03 f202 	lsl.w	r2, r3, r2
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	431a      	orrs	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	605a      	str	r2, [r3, #4]
}
 80009bc:	e7ff      	b.n	80009be <pinmode+0x1ae>
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40010800 	.word	0x40010800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_typeDef* GPIOx,uint16_t pin,uint8_t status){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	807b      	strh	r3, [r7, #2]
 80009e0:	4613      	mov	r3, r2
 80009e2:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 80009e4:	787b      	ldrb	r3, [r7, #1]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d009      	beq.n	80009fe <pinwrite+0x2a>
		GPIOx->GPIOx_ODR |=(1<<pin);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	887a      	ldrh	r2, [r7, #2]
 80009f0:	2101      	movs	r1, #1
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	431a      	orrs	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->GPIOx_ODR &=~(1<<pin);

}
 80009fc:	e009      	b.n	8000a12 <pinwrite+0x3e>
	else GPIOx->GPIOx_ODR &=~(1<<pin);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	887a      	ldrh	r2, [r7, #2]
 8000a04:	2101      	movs	r1, #1
 8000a06:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0a:	43d2      	mvns	r2, r2
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60da      	str	r2, [r3, #12]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <_12cdelay_ms>:
 *      Author: 20102
 */
static unsigned flag_init=0;
#include "I2C_LCD.h"
//============================================
void _12cdelay_ms(long x){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	for(long i=0;i<(x*190);i++);
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e002      	b.n	8000a30 <_12cdelay_ms+0x14>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	22be      	movs	r2, #190	; 0xbe
 8000a34:	fb02 f303 	mul.w	r3, r2, r3
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dbf5      	blt.n	8000a2a <_12cdelay_ms+0xe>
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <I2C_LCD_write_CMD>:

void I2C_LCD_write_CMD(I2C_TypeDef* I2Cx,char CMD,uint16_t address){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af02      	add	r7, sp, #8
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	70fb      	strb	r3, [r7, #3]
 8000a54:	4613      	mov	r3, r2
 8000a56:	803b      	strh	r3, [r7, #0]

	unsigned char temp = 0x00;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]
	uint8_t lcd = 0x0C;//1100  RS=0 RW=0 E=1 backlight =1
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	73bb      	strb	r3, [r7, #14]
	lcd &= 0x0F;
 8000a60:	7bbb      	ldrb	r3, [r7, #14]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	73bb      	strb	r3, [r7, #14]
	temp = (CMD & 0xF0);//4 MSB first //1111 0101//  1111 1100  //1111 0100
 8000a6a:	78fb      	ldrb	r3, [r7, #3]
 8000a6c:	f023 030f 	bic.w	r3, r3, #15
 8000a70:	73fb      	strb	r3, [r7, #15]
	lcd |= (temp| 0x04);// 4 MSB of CMD + 1100  RS=0 RW=0 E=1 backlight =1
 8000a72:	7bba      	ldrb	r2, [r7, #14]
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	73bb      	strb	r3, [r7, #14]

	I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);//send to i2C
 8000a82:	883a      	ldrh	r2, [r7, #0]
 8000a84:	f107 010e 	add.w	r1, r7, #14
 8000a88:	2300      	movs	r3, #0
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	4613      	mov	r3, r2
 8000a92:	2201      	movs	r2, #1
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 fc07 	bl	80012a8 <I2C_Master_Send>

	_12cdelay_ms(10);
 8000a9a:	200a      	movs	r0, #10
 8000a9c:	f7ff ffbe 	bl	8000a1c <_12cdelay_ms>
	lcd &= ~(0x04);//E=0
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	f023 0304 	bic.w	r3, r3, #4
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	73bb      	strb	r3, [r7, #14]
	I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);// 4 MSB of CMD + 1100  RS=0 RW=0 E=0 backlight =1
 8000aaa:	883a      	ldrh	r2, [r7, #0]
 8000aac:	f107 010e 	add.w	r1, r7, #14
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	9301      	str	r3, [sp, #4]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	2201      	movs	r2, #1
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 fbf3 	bl	80012a8 <I2C_Master_Send>
	_12cdelay_ms(10);
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f7ff ffaa 	bl	8000a1c <_12cdelay_ms>




	if(flag_init)
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <I2C_LCD_write_CMD+0xf8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d02f      	beq.n	8000b30 <I2C_LCD_write_CMD+0xe8>
	{

		temp = ((CMD & 0x0F)<<4);//4 LSB first
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	73fb      	strb	r3, [r7, #15]
		lcd = 0x0C;//1100  RS=0 RW=0 E=1 backlight =1
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	73bb      	strb	r3, [r7, #14]
		lcd |= (temp| 0x04);// 4 LSB of CMD + 1100  RS=0 RW=0 E=1 backlight =1
 8000ada:	7bba      	ldrb	r2, [r7, #14]
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	73bb      	strb	r3, [r7, #14]

		I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);//send to i2C
 8000aea:	883a      	ldrh	r2, [r7, #0]
 8000aec:	f107 010e 	add.w	r1, r7, #14
 8000af0:	2300      	movs	r3, #0
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	2300      	movs	r3, #0
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	4613      	mov	r3, r2
 8000afa:	2201      	movs	r2, #1
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 fbd3 	bl	80012a8 <I2C_Master_Send>
		_12cdelay_ms(10);
 8000b02:	200a      	movs	r0, #10
 8000b04:	f7ff ff8a 	bl	8000a1c <_12cdelay_ms>
		lcd &= ~(0x04);//E=0
 8000b08:	7bbb      	ldrb	r3, [r7, #14]
 8000b0a:	f023 0304 	bic.w	r3, r3, #4
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	73bb      	strb	r3, [r7, #14]
		I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);// 4 LSB of CMD + 1100  RS=0 RW=0 E=0 backlight =1
 8000b12:	883a      	ldrh	r2, [r7, #0]
 8000b14:	f107 010e 	add.w	r1, r7, #14
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	4613      	mov	r3, r2
 8000b22:	2201      	movs	r2, #1
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 fbbf 	bl	80012a8 <I2C_Master_Send>
		_12cdelay_ms(5);
 8000b2a:	2005      	movs	r0, #5
 8000b2c:	f7ff ff76 	bl	8000a1c <_12cdelay_ms>
	}
	_12cdelay_ms(2);
 8000b30:	2002      	movs	r0, #2
 8000b32:	f7ff ff73 	bl	8000a1c <_12cdelay_ms>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200000a0 	.word	0x200000a0

08000b44 <I2C_LCD_Init>:
void I2C_LCD_Init(I2C_TypeDef* I2Cx,uint16_t address,uint32_t clk){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	817b      	strh	r3, [r7, #10]
	I2C_INIT(I2C1,clk);
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	482a      	ldr	r0, [pc, #168]	; (8000c00 <I2C_LCD_Init+0xbc>)
 8000b56:	f000 fb03 	bl	8001160 <I2C_INIT>
	flag_init=0;
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <I2C_LCD_Init+0xc0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
	_12cdelay_ms(90);
 8000b60:	205a      	movs	r0, #90	; 0x5a
 8000b62:	f7ff ff5b 	bl	8000a1c <_12cdelay_ms>
	I2C_LCD_write_CMD(I2Cx,0x03, address);//--- Initialize Sequence
 8000b66:	897b      	ldrh	r3, [r7, #10]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff ff6b 	bl	8000a48 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0x03, address);
 8000b72:	897b      	ldrh	r3, [r7, #10]
 8000b74:	461a      	mov	r2, r3
 8000b76:	2103      	movs	r1, #3
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	f7ff ff65 	bl	8000a48 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0x03, address);
 8000b7e:	897b      	ldrh	r3, [r7, #10]
 8000b80:	461a      	mov	r2, r3
 8000b82:	2103      	movs	r1, #3
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f7ff ff5f 	bl	8000a48 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0x20, address);//--- Return to Home
 8000b8a:	897b      	ldrh	r3, [r7, #10]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2120      	movs	r1, #32
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f7ff ff59 	bl	8000a48 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0x20, address);//--- Return to Home
 8000b96:	897b      	ldrh	r3, [r7, #10]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	2120      	movs	r1, #32
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff ff53 	bl	8000a48 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0x80, address);// 2 line and 5x7 pixel N=1 f=0
 8000ba2:	897b      	ldrh	r3, [r7, #10]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	2180      	movs	r1, #128	; 0x80
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f7ff ff4d 	bl	8000a48 <I2C_LCD_write_CMD>
	_12cdelay_ms(2);
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f7ff ff34 	bl	8000a1c <_12cdelay_ms>
	I2C_LCD_write_CMD(I2Cx,0x00, address);
 8000bb4:	897b      	ldrh	r3, [r7, #10]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	2100      	movs	r1, #0
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff ff44 	bl	8000a48 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0xC0, address);//cerser
 8000bc0:	897b      	ldrh	r3, [r7, #10]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	21c0      	movs	r1, #192	; 0xc0
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f7ff ff3e 	bl	8000a48 <I2C_LCD_write_CMD>
	_12cdelay_ms(2);
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f7ff ff25 	bl	8000a1c <_12cdelay_ms>
	I2C_LCD_write_CMD(I2Cx,0x00, address);
 8000bd2:	897b      	ldrh	r3, [r7, #10]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f7ff ff35 	bl	8000a48 <I2C_LCD_write_CMD>
	I2C_LCD_write_CMD(I2Cx,0x10, address);//--- Clear LCD
 8000bde:	897b      	ldrh	r3, [r7, #10]
 8000be0:	461a      	mov	r2, r3
 8000be2:	2110      	movs	r1, #16
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f7ff ff2f 	bl	8000a48 <I2C_LCD_write_CMD>
	_12cdelay_ms(30);
 8000bea:	201e      	movs	r0, #30
 8000bec:	f7ff ff16 	bl	8000a1c <_12cdelay_ms>
flag_init=1;
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <I2C_LCD_Init+0xc0>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40005400 	.word	0x40005400
 8000c04:	200000a0 	.word	0x200000a0

08000c08 <I2C_LCD_write_data>:
void I2C_LCD_write_data(I2C_TypeDef* I2Cx ,char data,uint16_t address){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
 8000c14:	4613      	mov	r3, r2
 8000c16:	803b      	strh	r3, [r7, #0]

	unsigned char temp = 0x00;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
	uint8_t lcd = 0x0D;//1101  RS=1 RW=0 E=1 backlight =1
 8000c1c:	230d      	movs	r3, #13
 8000c1e:	73bb      	strb	r3, [r7, #14]
	temp = (data & 0xF0);
 8000c20:	78fb      	ldrb	r3, [r7, #3]
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	73fb      	strb	r3, [r7, #15]
	lcd |= (temp| 0x04);
 8000c28:	7bba      	ldrb	r2, [r7, #14]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	73bb      	strb	r3, [r7, #14]

	I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start)	;
 8000c38:	883a      	ldrh	r2, [r7, #0]
 8000c3a:	f107 010e 	add.w	r1, r7, #14
 8000c3e:	2300      	movs	r3, #0
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	2300      	movs	r3, #0
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	4613      	mov	r3, r2
 8000c48:	2201      	movs	r2, #1
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 fb2c 	bl	80012a8 <I2C_Master_Send>

	_12cdelay_ms(1);
 8000c50:	2001      	movs	r0, #1
 8000c52:	f7ff fee3 	bl	8000a1c <_12cdelay_ms>
	lcd &= ~(0x04);
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	f023 0304 	bic.w	r3, r3, #4
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	73bb      	strb	r3, [r7, #14]
	I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);
 8000c60:	883a      	ldrh	r2, [r7, #0]
 8000c62:	f107 010e 	add.w	r1, r7, #14
 8000c66:	2300      	movs	r3, #0
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	2201      	movs	r2, #1
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 fb18 	bl	80012a8 <I2C_Master_Send>
	_12cdelay_ms(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fecf 	bl	8000a1c <_12cdelay_ms>


	temp = ((data & 0x0F)<<4);
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	73fb      	strb	r3, [r7, #15]
	lcd = 0x0D;//1101  RS=1 RW=0 E=1 backlight =1
 8000c84:	230d      	movs	r3, #13
 8000c86:	73bb      	strb	r3, [r7, #14]
	lcd |= (temp|0x04);
 8000c88:	7bba      	ldrb	r2, [r7, #14]
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	73bb      	strb	r3, [r7, #14]
	I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);
 8000c98:	883a      	ldrh	r2, [r7, #0]
 8000c9a:	f107 010e 	add.w	r1, r7, #14
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	2201      	movs	r2, #1
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 fafc 	bl	80012a8 <I2C_Master_Send>
	_12cdelay_ms(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff feb3 	bl	8000a1c <_12cdelay_ms>
	lcd &= ~(0x04);//E=0
 8000cb6:	7bbb      	ldrb	r3, [r7, #14]
 8000cb8:	f023 0304 	bic.w	r3, r3, #4
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	73bb      	strb	r3, [r7, #14]
	I2C_Master_Send(I2Cx, &lcd, 1, address, WithStop, Start);
 8000cc0:	883a      	ldrh	r2, [r7, #0]
 8000cc2:	f107 010e 	add.w	r1, r7, #14
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 fae8 	bl	80012a8 <I2C_Master_Send>
	_12cdelay_ms(5);
 8000cd8:	2005      	movs	r0, #5
 8000cda:	f7ff fe9f 	bl	8000a1c <_12cdelay_ms>

}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <I2C_LCD_write_string>:
void I2C_LCD_write_string(I2C_TypeDef* I2Cx ,char* data,uint16_t address){
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b084      	sub	sp, #16
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	80fb      	strh	r3, [r7, #6]
	while((*data)!=0){
 8000cf4:	e009      	b.n	8000d0a <I2C_LCD_write_string+0x24>

		I2C_LCD_write_data(I2Cx, *data, address);
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	88fa      	ldrh	r2, [r7, #6]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f7ff ff82 	bl	8000c08 <I2C_LCD_write_data>
		data++;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3301      	adds	r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
	while((*data)!=0){
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1f1      	bne.n	8000cf6 <I2C_LCD_write_string+0x10>
	}

}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <I2C_LCD_setcerser>:
void I2C_LCD_setcerser(I2C_TypeDef* I2Cx,uint16_t address,char ROW , char COL){
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	4608      	mov	r0, r1
 8000d24:	4611      	mov	r1, r2
 8000d26:	461a      	mov	r2, r3
 8000d28:	4603      	mov	r3, r0
 8000d2a:	807b      	strh	r3, [r7, #2]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	707b      	strb	r3, [r7, #1]
 8000d30:	4613      	mov	r3, r2
 8000d32:	703b      	strb	r3, [r7, #0]
	volatile unsigned char location ;
	if(ROW<2 && COL<16){
 8000d34:	787b      	ldrb	r3, [r7, #1]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d80f      	bhi.n	8000d5a <I2C_LCD_setcerser+0x40>
 8000d3a:	783b      	ldrb	r3, [r7, #0]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80c      	bhi.n	8000d5a <I2C_LCD_setcerser+0x40>
		location =(0x40 * ROW) + COL ;
 8000d40:	787b      	ldrb	r3, [r7, #1]
 8000d42:	019b      	lsls	r3, r3, #6
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	783b      	ldrb	r3, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	73fb      	strb	r3, [r7, #15]
		location |=(1<<7);
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	73fb      	strb	r3, [r7, #15]
	}

	I2C_LCD_write_CMD(I2Cx,location,address);
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	887a      	ldrh	r2, [r7, #2]
 8000d60:	4619      	mov	r1, r3
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff fe70 	bl	8000a48 <I2C_LCD_write_CMD>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <I2C_LCD_clear>:
void I2C_LCD_clear(I2C_TypeDef* I2Cx,uint16_t address){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
	I2C_LCD_write_CMD(I2Cx, LCD_CLEAR_SCREEN, address);
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	2101      	movs	r1, #1
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fe60 	bl	8000a48 <I2C_LCD_write_CMD>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <I2C_LCD_write_INTnumber>:
void I2C_LCD_write_FLOATnumber(I2C_TypeDef* I2Cx,uint16_t address,float num,unsigned char digit){
	char text[20];
	gcvt(num,digit,text);
	I2C_LCD_write_string(I2Cx, text, address);
}
void I2C_LCD_write_INTnumber(I2C_TypeDef* I2Cx,uint16_t address,int num){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	817b      	strh	r3, [r7, #10]
	char text[20];
	sprintf(text,"%d",num);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <I2C_LCD_write_INTnumber+0x34>)
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fc58 	bl	800365c <siprintf>
	I2C_LCD_write_string(I2Cx, text, address);
 8000dac:	897a      	ldrh	r2, [r7, #10]
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f7ff ff96 	bl	8000ce6 <I2C_LCD_write_string>
}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	08003e98 	.word	0x08003e98

08000dc8 <IR_NEC_init>:
IR IR1;
//=================================
void IR_TIME_READ();
void IR_send_bit(uint8_t bit_value,GPIO_typeDef* SEND_GPIOx,uint16_t SEND_pin);
//=================================
void IR_NEC_init(GPIO_typeDef* GPIOx,uint16_t pin,GPIO_typeDef* SEND_GPIOx,uint16_t SEND_pin){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	817b      	strh	r3, [r7, #10]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	813b      	strh	r3, [r7, #8]
	pinmode( GPIOC,pin13,GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000ddc:	2202      	movs	r2, #2
 8000dde:	210d      	movs	r1, #13
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <IR_NEC_init+0x40>)
 8000de2:	f7ff fd15 	bl	8000810 <pinmode>
	EXTI(GPIOx,pin,EXTI_Trigger_Falling, IR_TIME_READ);
 8000de6:	8979      	ldrh	r1, [r7, #10]
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <IR_NEC_init+0x44>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	f001 fb57 	bl	80024a0 <EXTI>
	pinmode( SEND_GPIOx,SEND_pin,GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000df2:	893b      	ldrh	r3, [r7, #8]
 8000df4:	2202      	movs	r2, #2
 8000df6:	4619      	mov	r1, r3
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fd09 	bl	8000810 <pinmode>
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40011000 	.word	0x40011000
 8000e0c:	08000e11 	.word	0x08000e11

08000e10 <IR_TIME_READ>:
void IR_TIME_READ(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

	switch (IR_flag1) {
 8000e14:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <IR_TIME_READ+0x114>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d019      	beq.n	8000e50 <IR_TIME_READ+0x40>
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d055      	beq.n	8000ecc <IR_TIME_READ+0xbc>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d000      	beq.n	8000e26 <IR_TIME_READ+0x16>
			pinwrite(GPIOC, pin13,HIGH);
		}
		break;
	}

}
 8000e24:	e07c      	b.n	8000f20 <IR_TIME_READ+0x110>
		TIME_CALCULATION(clk, TIMER_STOP);
 8000e26:	2100      	movs	r1, #0
 8000e28:	483f      	ldr	r0, [pc, #252]	; (8000f28 <IR_TIME_READ+0x118>)
 8000e2a:	f000 ffb5 	bl	8001d98 <TIME_CALCULATION>
		TIME_CALCULATION(clk, TIMER_START);
 8000e2e:	2101      	movs	r1, #1
 8000e30:	483d      	ldr	r0, [pc, #244]	; (8000f28 <IR_TIME_READ+0x118>)
 8000e32:	f000 ffb1 	bl	8001d98 <TIME_CALCULATION>
		IR_flag1=1;
 8000e36:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <IR_TIME_READ+0x114>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
		IR_BUFFER1=0;
 8000e3c:	4b3b      	ldr	r3, [pc, #236]	; (8000f2c <IR_TIME_READ+0x11c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	801a      	strh	r2, [r3, #0]
		IR_TIME_INDEX=0;
 8000e42:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <IR_TIME_READ+0x120>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
		IR_REPEAT_FLAG=0;
 8000e48:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <IR_TIME_READ+0x124>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
		break;
 8000e4e:	e067      	b.n	8000f20 <IR_TIME_READ+0x110>
		IR_BUFFER1=TIME_CALCULATION(clk, TIMER_STOP);
 8000e50:	2100      	movs	r1, #0
 8000e52:	4835      	ldr	r0, [pc, #212]	; (8000f28 <IR_TIME_READ+0x118>)
 8000e54:	f000 ffa0 	bl	8001d98 <TIME_CALCULATION>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <IR_TIME_READ+0x11c>)
 8000e5e:	801a      	strh	r2, [r3, #0]
		if(IR_BUFFER1>=IR_start_Duration_min && IR_BUFFER1<=IR_start_Duration_max) //start NEC
 8000e60:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <IR_TIME_READ+0x11c>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d915      	bls.n	8000e98 <IR_TIME_READ+0x88>
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <IR_TIME_READ+0x11c>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d80f      	bhi.n	8000e98 <IR_TIME_READ+0x88>
			TIME_CALCULATION(clk, TIMER_START);//turn on the timer to calculate the next pit
 8000e78:	2101      	movs	r1, #1
 8000e7a:	482b      	ldr	r0, [pc, #172]	; (8000f28 <IR_TIME_READ+0x118>)
 8000e7c:	f000 ff8c 	bl	8001d98 <TIME_CALCULATION>
			IR_flag1=2; //goto NEC capture
 8000e80:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <IR_TIME_READ+0x114>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	701a      	strb	r2, [r3, #0]
			IR_BUFFER1=0;
 8000e86:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <IR_TIME_READ+0x11c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	801a      	strh	r2, [r3, #0]
			pinwrite(GPIOC, pin13,LOW);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	210d      	movs	r1, #13
 8000e90:	4829      	ldr	r0, [pc, #164]	; (8000f38 <IR_TIME_READ+0x128>)
 8000e92:	f7ff fd9f 	bl	80009d4 <pinwrite>
		break;
 8000e96:	e040      	b.n	8000f1a <IR_TIME_READ+0x10a>
			IR_flag1=0;
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <IR_TIME_READ+0x114>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
			IR_TIME_INDEX=0;
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <IR_TIME_READ+0x120>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
			TIME_CALCULATION(clk, TIMER_STOP);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4820      	ldr	r0, [pc, #128]	; (8000f28 <IR_TIME_READ+0x118>)
 8000ea8:	f000 ff76 	bl	8001d98 <TIME_CALCULATION>
			if(IR_BUFFER1>=11000 && IR_BUFFER1<11600){
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <IR_TIME_READ+0x11c>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	f642 22f7 	movw	r2, #10999	; 0x2af7
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d930      	bls.n	8000f1a <IR_TIME_READ+0x10a>
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <IR_TIME_READ+0x11c>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	f642 524f 	movw	r2, #11599	; 0x2d4f
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d82a      	bhi.n	8000f1a <IR_TIME_READ+0x10a>
				IR1.IR_REPEAT_FLAG=1;
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <IR_TIME_READ+0x12c>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	721a      	strb	r2, [r3, #8]
		break;
 8000eca:	e026      	b.n	8000f1a <IR_TIME_READ+0x10a>
		IR_TIME_DURATION[IR_TIME_INDEX++]=TIME_CALCULATION(clk, TIMER_STOP);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4816      	ldr	r0, [pc, #88]	; (8000f28 <IR_TIME_READ+0x118>)
 8000ed0:	f000 ff62 	bl	8001d98 <TIME_CALCULATION>
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <IR_TIME_READ+0x120>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	b2d1      	uxtb	r1, r2
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <IR_TIME_READ+0x120>)
 8000ede:	7011      	strb	r1, [r2, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <IR_TIME_READ+0x130>)
 8000ee6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		TIME_CALCULATION(clk, TIMER_START);
 8000eea:	2101      	movs	r1, #1
 8000eec:	480e      	ldr	r0, [pc, #56]	; (8000f28 <IR_TIME_READ+0x118>)
 8000eee:	f000 ff53 	bl	8001d98 <TIME_CALCULATION>
		if(IR_TIME_INDEX>31){
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <IR_TIME_READ+0x120>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b1f      	cmp	r3, #31
 8000ef8:	d911      	bls.n	8000f1e <IR_TIME_READ+0x10e>
			IR_TIME_INDEX=0;
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <IR_TIME_READ+0x120>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
			IR_flag1=0;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <IR_TIME_READ+0x114>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
			TIME_CALCULATION(clk, TIMER_STOP);
 8000f06:	2100      	movs	r1, #0
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <IR_TIME_READ+0x118>)
 8000f0a:	f000 ff45 	bl	8001d98 <TIME_CALCULATION>
			pinwrite(GPIOC, pin13,HIGH);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	210d      	movs	r1, #13
 8000f12:	4809      	ldr	r0, [pc, #36]	; (8000f38 <IR_TIME_READ+0x128>)
 8000f14:	f7ff fd5e 	bl	80009d4 <pinwrite>
		break;
 8000f18:	e001      	b.n	8000f1e <IR_TIME_READ+0x10e>
		break;
 8000f1a:	bf00      	nop
 8000f1c:	e000      	b.n	8000f20 <IR_TIME_READ+0x110>
		break;
 8000f1e:	bf00      	nop
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000159 	.word	0x20000159
 8000f28:	02255100 	.word	0x02255100
 8000f2c:	2000015a 	.word	0x2000015a
 8000f30:	200000a4 	.word	0x200000a4
 8000f34:	20000158 	.word	0x20000158
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	200000c0 	.word	0x200000c0
 8000f40:	200000cc 	.word	0x200000cc

08000f44 <IR_CONVERT_READ>:
IR IR_CONVERT_READ(){
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	IR1.IR_DATABuffer=0;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
	for(int i=0;i<32;i++){
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e01b      	b.n	8000f90 <IR_CONVERT_READ+0x4c>
		if(IR_TIME_DURATION[i]>IR_MIN_LOW_DURATION){
 8000f58:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <IR_CONVERT_READ+0x98>)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f60:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d90b      	bls.n	8000f80 <IR_CONVERT_READ+0x3c>
			// Detected a logical '1'
			IR1.IR_DATABuffer <<= 1;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000f70:	6013      	str	r3, [r2, #0]
			IR1.IR_DATABuffer |= 1;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e004      	b.n	8000f8a <IR_CONVERT_READ+0x46>
		}
		else{
			// Detected a logical '0'
			IR1.IR_DATABuffer <<= 1;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000f88:	6013      	str	r3, [r2, #0]
	for(int i=0;i<32;i++){
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b1f      	cmp	r3, #31
 8000f94:	dde0      	ble.n	8000f58 <IR_CONVERT_READ+0x14>
		}
	}

	IR1.IR_address=(IR1.IR_DATABuffer >> 24) & 0xFF; // Extract 8-bit address
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	0e1b      	lsrs	r3, r3, #24
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000fa0:	711a      	strb	r2, [r3, #4]
	IR1.invertedAddress = (IR1.IR_DATABuffer >> 16) & 0xFF;  // Extract inverted address
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	0c1b      	lsrs	r3, r3, #16
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000fac:	715a      	strb	r2, [r3, #5]

	IR1.command = (IR1.IR_DATABuffer >> 8) & 0xFF;  // Extract 8-bit command
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000fb8:	719a      	strb	r2, [r3, #6]
	IR1.invertedCommand = IR1.IR_DATABuffer & 0xFF;  // Extract inverted command
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000fc2:	71da      	strb	r2, [r3, #7]
	return IR1;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <IR_CONVERT_READ+0x94>)
 8000fc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	200000c0 	.word	0x200000c0
 8000fdc:	200000cc 	.word	0x200000cc

08000fe0 <IR_SEND>:
//============================================================================================================
void IR_SEND(IR IR_DATA,GPIO_typeDef* SEND_GPIOx,uint16_t SEND_pin){
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	1d3c      	adds	r4, r7, #4
 8000fe8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000fec:	603b      	str	r3, [r7, #0]
	// Leader high time (9ms)
	PWM(TIM1, CH_4,500,32000, clk);
 8000fee:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <IR_SEND+0xc8>)
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8000ff6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	482b      	ldr	r0, [pc, #172]	; (80010ac <IR_SEND+0xcc>)
 8000ffe:	f000 fa73 	bl	80014e8 <PWM>
	delay(9000, U_us, clk);
 8001002:	4a29      	ldr	r2, [pc, #164]	; (80010a8 <IR_SEND+0xc8>)
 8001004:	2101      	movs	r1, #1
 8001006:	482a      	ldr	r0, [pc, #168]	; (80010b0 <IR_SEND+0xd0>)
 8001008:	f000 fdfc 	bl	8001c04 <delay>
	// Leader low time (4.5ms)
	pinwrite(SEND_GPIOx, SEND_pin,LOW);
 800100c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	6838      	ldr	r0, [r7, #0]
 8001014:	f7ff fcde 	bl	80009d4 <pinwrite>
	PWM(TIM1, CH_4,0,32000, clk);
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <IR_SEND+0xc8>)
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8001020:	2200      	movs	r2, #0
 8001022:	2104      	movs	r1, #4
 8001024:	4821      	ldr	r0, [pc, #132]	; (80010ac <IR_SEND+0xcc>)
 8001026:	f000 fa5f 	bl	80014e8 <PWM>
	delay(4500, U_us, clk);
 800102a:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <IR_SEND+0xc8>)
 800102c:	2101      	movs	r1, #1
 800102e:	4821      	ldr	r0, [pc, #132]	; (80010b4 <IR_SEND+0xd4>)
 8001030:	f000 fde8 	bl	8001c04 <delay>
	for (int i = 0; i < 32; i++) {
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e011      	b.n	800105e <IR_SEND+0x7e>
		IR_send_bit(((IR_DATA.IR_DATABuffer >> (31 - i)) & 1), SEND_GPIOx,SEND_pin);  // Send each bit (MSB first)
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f1c3 031f 	rsb	r3, r3, #31
 8001042:	fa22 f303 	lsr.w	r3, r2, r3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001050:	6839      	ldr	r1, [r7, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f832 	bl	80010bc <IR_send_bit>
	for (int i = 0; i < 32; i++) {
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b1f      	cmp	r3, #31
 8001062:	ddea      	ble.n	800103a <IR_SEND+0x5a>
	}
	//stop pit
	PWM(TIM1, CH_4,500,32000, clk);
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <IR_SEND+0xc8>)
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800106c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001070:	2104      	movs	r1, #4
 8001072:	480e      	ldr	r0, [pc, #56]	; (80010ac <IR_SEND+0xcc>)
 8001074:	f000 fa38 	bl	80014e8 <PWM>
	delay(550, U_us, clk);  // 562.5µs
 8001078:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <IR_SEND+0xc8>)
 800107a:	2101      	movs	r1, #1
 800107c:	480e      	ldr	r0, [pc, #56]	; (80010b8 <IR_SEND+0xd8>)
 800107e:	f000 fdc1 	bl	8001c04 <delay>
	PWM(TIM1, CH_4,0,32000, clk);
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <IR_SEND+0xc8>)
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800108a:	2200      	movs	r2, #0
 800108c:	2104      	movs	r1, #4
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <IR_SEND+0xcc>)
 8001090:	f000 fa2a 	bl	80014e8 <PWM>
	pinwrite(SEND_GPIOx, SEND_pin,LOW);
 8001094:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	6838      	ldr	r0, [r7, #0]
 800109c:	f7ff fc9a 	bl	80009d4 <pinwrite>
//		PWM(TIM1, CH_4,500,32000, clk);
//		delay(500, U_us, clk);  // 562.5µs
//		pinwrite(SEND_GPIOx, SEND_pin,LOW);
//		PWM(TIM1, CH_4,0,32000, clk);
//	}
}
 80010a0:	bf00      	nop
 80010a2:	371c      	adds	r7, #28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd90      	pop	{r4, r7, pc}
 80010a8:	02255100 	.word	0x02255100
 80010ac:	40012c00 	.word	0x40012c00
 80010b0:	460ca000 	.word	0x460ca000
 80010b4:	458ca000 	.word	0x458ca000
 80010b8:	44098000 	.word	0x44098000

080010bc <IR_send_bit>:
//============================================================================================================
void IR_send_bit(uint8_t bit_value,GPIO_typeDef* SEND_GPIOx,uint16_t SEND_pin) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	80bb      	strh	r3, [r7, #4]
	// Send the bit high time (562.5µs)
	PWM(TIM1, CH_4,500,32000, clk);  // Turn on
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <IR_send_bit+0x90>)
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80010d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010d8:	2104      	movs	r1, #4
 80010da:	481d      	ldr	r0, [pc, #116]	; (8001150 <IR_send_bit+0x94>)
 80010dc:	f000 fa04 	bl	80014e8 <PWM>
	delay(550, U_us, clk);  // 562.5µs HIGH
 80010e0:	4a1a      	ldr	r2, [pc, #104]	; (800114c <IR_send_bit+0x90>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	481b      	ldr	r0, [pc, #108]	; (8001154 <IR_send_bit+0x98>)
 80010e6:	f000 fd8d 	bl	8001c04 <delay>

	// Send the corresponding low time
	if (bit_value) {
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d014      	beq.n	800111a <IR_send_bit+0x5e>
		pinwrite(SEND_GPIOx, SEND_pin,LOW);  // Turn off
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	4619      	mov	r1, r3
 80010f6:	6838      	ldr	r0, [r7, #0]
 80010f8:	f7ff fc6c 	bl	80009d4 <pinwrite>
		PWM(TIM1, CH_4,0,32000, clk);
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <IR_send_bit+0x90>)
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8001104:	2200      	movs	r2, #0
 8001106:	2104      	movs	r1, #4
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <IR_send_bit+0x94>)
 800110a:	f000 f9ed 	bl	80014e8 <PWM>
		delay(1680, U_us, clk); // 1.6875ms LOW for '1'
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <IR_send_bit+0x90>)
 8001110:	2101      	movs	r1, #1
 8001112:	4811      	ldr	r0, [pc, #68]	; (8001158 <IR_send_bit+0x9c>)
 8001114:	f000 fd76 	bl	8001c04 <delay>
	} else {
		pinwrite(SEND_GPIOx, SEND_pin,LOW);  // Turn off
		PWM(TIM1, CH_4,0,32000, clk);
		delay(560, U_us, clk);  // 562.5µs LOW for '0'
	}
}
 8001118:	e013      	b.n	8001142 <IR_send_bit+0x86>
		pinwrite(SEND_GPIOx, SEND_pin,LOW);  // Turn off
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	4619      	mov	r1, r3
 8001120:	6838      	ldr	r0, [r7, #0]
 8001122:	f7ff fc57 	bl	80009d4 <pinwrite>
		PWM(TIM1, CH_4,0,32000, clk);
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <IR_send_bit+0x90>)
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800112e:	2200      	movs	r2, #0
 8001130:	2104      	movs	r1, #4
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <IR_send_bit+0x94>)
 8001134:	f000 f9d8 	bl	80014e8 <PWM>
		delay(560, U_us, clk);  // 562.5µs LOW for '0'
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <IR_send_bit+0x90>)
 800113a:	2101      	movs	r1, #1
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <IR_send_bit+0xa0>)
 800113e:	f000 fd61 	bl	8001c04 <delay>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	02255100 	.word	0x02255100
 8001150:	40012c00 	.word	0x40012c00
 8001154:	44098000 	.word	0x44098000
 8001158:	44d20000 	.word	0x44d20000
 800115c:	440c0000 	.word	0x440c0000

08001160 <I2C_INIT>:
#include "STM32_I2C_DRIVER.h"
//SM 100K
//master only
//no stretch

void I2C_INIT(I2C_TypeDef* I2Cx,uint32_t APB_clock){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	if(I2Cx==I2C1){
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a3a      	ldr	r2, [pc, #232]	; (8001258 <I2C_INIT+0xf8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d116      	bne.n	80011a0 <I2C_INIT+0x40>
		I2C1_Clock_Enable();
 8001172:	4b3a      	ldr	r3, [pc, #232]	; (800125c <I2C_INIT+0xfc>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a39      	ldr	r2, [pc, #228]	; (800125c <I2C_INIT+0xfc>)
 8001178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800117c:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 800117e:	4b37      	ldr	r3, [pc, #220]	; (800125c <I2C_INIT+0xfc>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a36      	ldr	r2, [pc, #216]	; (800125c <I2C_INIT+0xfc>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	6193      	str	r3, [r2, #24]
		//PB6 I2C SCL
		//PB7 IC2 SDA
		pinmode(GPIOB, pin6,GPIO_MODE_OUTPUT_AF_Open_drain_Speed10);
 800118a:	220d      	movs	r2, #13
 800118c:	2106      	movs	r1, #6
 800118e:	4834      	ldr	r0, [pc, #208]	; (8001260 <I2C_INIT+0x100>)
 8001190:	f7ff fb3e 	bl	8000810 <pinmode>
		pinmode(GPIOB, pin7,GPIO_MODE_OUTPUT_AF_Open_drain_Speed10);
 8001194:	220d      	movs	r2, #13
 8001196:	2107      	movs	r1, #7
 8001198:	4831      	ldr	r0, [pc, #196]	; (8001260 <I2C_INIT+0x100>)
 800119a:	f7ff fb39 	bl	8000810 <pinmode>
 800119e:	e019      	b.n	80011d4 <I2C_INIT+0x74>

	}
	else if(I2Cx==I2C2){
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a30      	ldr	r2, [pc, #192]	; (8001264 <I2C_INIT+0x104>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d115      	bne.n	80011d4 <I2C_INIT+0x74>
		I2C2_Clock_Enable();
 80011a8:	4b2c      	ldr	r3, [pc, #176]	; (800125c <I2C_INIT+0xfc>)
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	4a2b      	ldr	r2, [pc, #172]	; (800125c <I2C_INIT+0xfc>)
 80011ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b2:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <I2C_INIT+0xfc>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a28      	ldr	r2, [pc, #160]	; (800125c <I2C_INIT+0xfc>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6193      	str	r3, [r2, #24]
		//PB10 I2C SCL
		//PB11 IC2 SDA
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_Open_drain_Speed10);
 80011c0:	220d      	movs	r2, #13
 80011c2:	210a      	movs	r1, #10
 80011c4:	4826      	ldr	r0, [pc, #152]	; (8001260 <I2C_INIT+0x100>)
 80011c6:	f7ff fb23 	bl	8000810 <pinmode>
		pinmode(GPIOB, pin11,GPIO_MODE_OUTPUT_AF_Open_drain_Speed10);
 80011ca:	220d      	movs	r2, #13
 80011cc:	210b      	movs	r1, #11
 80011ce:	4824      	ldr	r0, [pc, #144]	; (8001260 <I2C_INIT+0x100>)
 80011d0:	f7ff fb1e 	bl	8000810 <pinmode>
	}

	//• Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	//Bits 5:0 FREQ[5:0]: Peripheral clock frequency
	I2Cx->CR2 &=~(0b111111<<0);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |=((APB_clock/1000000)<<0);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4920      	ldr	r1, [pc, #128]	; (8001268 <I2C_INIT+0x108>)
 80011e8:	fba1 1303 	umull	r1, r3, r1, r3
 80011ec:	0c9b      	lsrs	r3, r3, #18
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
	//Bits 11:0 CCR[11:0]: Clock control register in Fm/Sm mode (Master mode)
	//• Configure the clock control registers
	I2Cx->CCR &=~(0b11111111111<<0);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011fc:	f023 0307 	bic.w	r3, r3, #7
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	61d3      	str	r3, [r2, #28]
	I2Cx->CCR |=((APB_clock/1000)/(2*100));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69da      	ldr	r2, [r3, #28]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	099b      	lsrs	r3, r3, #6
 800120c:	4917      	ldr	r1, [pc, #92]	; (800126c <I2C_INIT+0x10c>)
 800120e:	fba1 1303 	umull	r1, r3, r1, r3
 8001212:	099b      	lsrs	r3, r3, #6
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	61da      	str	r2, [r3, #28]
	//• Configure the rise time register
	//Bits 5:0 TRISE[5:0]: Maximum rise time in Fm/Sm mode (Master mode)
	I2Cx->TRISE &=(0b111111<<0);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	621a      	str	r2, [r3, #32]
	I2Cx->TRISE |=(((APB_clock/1000000)/2)+1);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1a      	ldr	r2, [r3, #32]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	490e      	ldr	r1, [pc, #56]	; (8001268 <I2C_INIT+0x108>)
 800122e:	fba1 1303 	umull	r1, r3, r1, r3
 8001232:	0cdb      	lsrs	r3, r3, #19
 8001234:	3301      	adds	r3, #1
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	621a      	str	r2, [r3, #32]

	I2C_Acknowledge(I2Cx,ENABLE);
 800123c:	2101      	movs	r1, #1
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f937 	bl	80014b2 <I2C_Acknowledge>
	//• Program the I2C_CR1 register to enable the peripheral
	//Bit 0 PE: Peripheral enable
	I2Cx->CR1|=(1<<0);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	601a      	str	r2, [r3, #0]

}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40005400 	.word	0x40005400
 800125c:	40021000 	.word	0x40021000
 8001260:	40010c00 	.word	0x40010c00
 8001264:	40005800 	.word	0x40005800
 8001268:	431bde83 	.word	0x431bde83
 800126c:	053e2d63 	.word	0x053e2d63

08001270 <I2C_Start_PIT>:
void I2C_Start_PIT(I2C_TypeDef* I2Cx,Repeated_Start Start){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]

	if(Start !=RepeatedSart){
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d007      	beq.n	8001292 <I2C_Start_PIT+0x22>
		//check the buss
		while(I2C_GetFlagStatus(I2Cx,I2C_FLAG_BUSY));
 8001282:	bf00      	nop
 8001284:	2100      	movs	r1, #0
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f860 	bl	800134c <I2C_GetFlagStatus>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f8      	bne.n	8001284 <I2C_Start_PIT+0x14>

	}
	//Bit 8 START: Start generation
	I2Cx->CR1 |=(1<<8);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	601a      	str	r2, [r3, #0]
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <I2C_Master_Send>:

void I2C_Master_Send(I2C_TypeDef* I2Cx,uint8_t* data, uint32_t dataLen,uint16_t devAdd,Stop_Condition Stop , Repeated_Start start){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	807b      	strh	r3, [r7, #2]
	int i=0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
	I2C_Start_PIT(I2Cx,start);//start
 80012ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012be:	4619      	mov	r1, r3
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff ffd5 	bl	8001270 <I2C_Start_PIT>
	while(!I2C_GetFlagStatus(I2Cx, EV5));//Start condition generated.
 80012c6:	bf00      	nop
 80012c8:	2101      	movs	r1, #1
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f83e 	bl	800134c <I2C_GetFlagStatus>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f8      	beq.n	80012c8 <I2C_Master_Send+0x20>
	I2C_SEND_ADRRESS(I2Cx, devAdd, i2c_direction_Write);
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f8c4 	bl	800146c <I2C_SEND_ADRRESS>
	//2.Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while( !(I2C_GetFlagStatus( I2Cx, EV6)));
 80012e4:	bf00      	nop
 80012e6:	2102      	movs	r1, #2
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f000 f82f 	bl	800134c <I2C_GetFlagStatus>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f8      	beq.n	80012e6 <I2C_Master_Send+0x3e>

	while( !(I2C_GetFlagStatus( I2Cx, MASTER_BYTE_TRANSMITING)));//Busy MSL TXE TRA
 80012f4:	bf00      	nop
 80012f6:	4914      	ldr	r1, [pc, #80]	; (8001348 <I2C_Master_Send+0xa0>)
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f000 f827 	bl	800134c <I2C_GetFlagStatus>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f8      	beq.n	80012f6 <I2C_Master_Send+0x4e>
	for(;i<dataLen;i++){
 8001304:	e011      	b.n	800132a <I2C_Master_Send+0x82>
		I2Cx->DR=data[i];
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	611a      	str	r2, [r3, #16]
		while(!(I2C_GetFlagStatus( I2Cx, EV8)));
 8001314:	bf00      	nop
 8001316:	2103      	movs	r1, #3
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f817 	bl	800134c <I2C_GetFlagStatus>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f8      	beq.n	8001316 <I2C_Master_Send+0x6e>
	for(;i<dataLen;i++){
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	d8e9      	bhi.n	8001306 <I2C_Master_Send+0x5e>
	}
	if(Stop == WithStop){
 8001332:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <I2C_Master_Send+0x98>
		//Send Stop Condition
		I2C_Stop_PIT(I2Cx);
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 f8aa 	bl	8001494 <I2C_Stop_PIT>
	}

}
 8001340:	bf00      	nop
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	00070080 	.word	0x00070080

0800134c <I2C_GetFlagStatus>:
}



FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status Flag)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	FlagStatus bitstatus = RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	77fb      	strb	r3, [r7, #31]
	volatile uint32_t dummy_Read;
	uint32_t flag1 = 0 ,flag2 =0 , lastevent =0;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]


	switch(Flag)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d806      	bhi.n	800137a <I2C_GetFlagStatus+0x2e>
 800136c:	2b03      	cmp	r3, #3
 800136e:	d235      	bcs.n	80013dc <I2C_GetFlagStatus+0x90>
 8001370:	2b01      	cmp	r3, #1
 8001372:	d017      	beq.n	80013a4 <I2C_GetFlagStatus+0x58>
 8001374:	2b01      	cmp	r3, #1
 8001376:	d821      	bhi.n	80013bc <I2C_GetFlagStatus+0x70>
 8001378:	e007      	b.n	800138a <I2C_GetFlagStatus+0x3e>
 800137a:	2b06      	cmp	r3, #6
 800137c:	d048      	beq.n	8001410 <I2C_GetFlagStatus+0xc4>
 800137e:	2b06      	cmp	r3, #6
 8001380:	d339      	bcc.n	80013f6 <I2C_GetFlagStatus+0xaa>
 8001382:	4a39      	ldr	r2, [pc, #228]	; (8001468 <I2C_GetFlagStatus+0x11c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d050      	beq.n	800142a <I2C_GetFlagStatus+0xde>
 8001388:	e067      	b.n	800145a <I2C_GetFlagStatus+0x10e>
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0).

		if(((I2Cx->SR2)>>1) & 1 )
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	085b      	lsrs	r3, r3, #1
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <I2C_GetFlagStatus+0x52>
			bitstatus = SET;
 8001398:	2301      	movs	r3, #1
 800139a:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 800139c:	e05d      	b.n	800145a <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	77fb      	strb	r3, [r7, #31]
		break;
 80013a2:	e05a      	b.n	800145a <I2C_GetFlagStatus+0x10e>
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0		the interface is disabled (PE=0).

		if( (I2Cx->SR1>>0) & 1 )
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <I2C_GetFlagStatus+0x6a>
			bitstatus = SET;
 80013b0:	2301      	movs	r3, #1
 80013b2:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 80013b4:	e051      	b.n	800145a <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	77fb      	strb	r3, [r7, #31]
		break;
 80013ba:	e04e      	b.n	800145a <I2C_GetFlagStatus+0x10e>
		//			0: No end of address transmission
		//			1: End of address transmission
		//			– For 10-bit addressing, the bit is set after the ACK of the 2nd byte.
		//			– For 7-bit addressing, the bit is set after the ACK of the byte.
		//			Note: ADDR is not set after a NACK reception
		if( (I2Cx->SR1>>1) & 1 )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	085b      	lsrs	r3, r3, #1
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <I2C_GetFlagStatus+0x84>
			bitstatus = SET;
 80013ca:	2301      	movs	r3, #1
 80013cc:	77fb      	strb	r3, [r7, #31]
 80013ce:	e001      	b.n	80013d4 <I2C_GetFlagStatus+0x88>
		else
			bitstatus = RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	77fb      	strb	r3, [r7, #31]
		dummy_Read = I2Cx->SR2;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	60fb      	str	r3, [r7, #12]

		break;
 80013da:	e03e      	b.n	800145a <I2C_GetFlagStatus+0x10e>
		//				– Cleared by software writing to the DR register or by hardware after a start or a stop condition
		//				or when PE=0.
		//				TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
		//				Note: TxE is not cleared by writing the first data being transmitted, or by writing data when
		//				BTF is set, as in both cases the data register is still empty
		if( (I2Cx->SR1>>7) & 1 )
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	09db      	lsrs	r3, r3, #7
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <I2C_GetFlagStatus+0xa4>
			bitstatus = SET;
 80013ea:	2301      	movs	r3, #1
 80013ec:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;


		break;
 80013ee:	e034      	b.n	800145a <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	77fb      	strb	r3, [r7, #31]
		break;
 80013f4:	e031      	b.n	800145a <I2C_GetFlagStatus+0x10e>
		//					– Cleared by software reading SR1 followed by either a read or write in the DR register or by
		//					hardware after a start or a stop condition in transmission or when PE=0.
		//					Note: The BTF bit is not set after a NACK reception
		//					The BTF bit is not set if next byte to be transmitted is the PEC (TRA=1 in I2C_SR2
		//					register and PEC=1 in I2C_CR1 register)
		if( (I2Cx->SR1>>2) & 1 )
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <I2C_GetFlagStatus+0xbe>
			bitstatus = SET;
 8001404:	2301      	movs	r3, #1
 8001406:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;


		break;
 8001408:	e027      	b.n	800145a <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	77fb      	strb	r3, [r7, #31]
		break;
 800140e:	e024      	b.n	800145a <I2C_GetFlagStatus+0x10e>
		//					– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		//					– Cleared by software reading or writing the DR register or by hardware when PE=0.
		//					RxNE is not set in case of ARLO event.
		//					Note: RxNE is not cleared by reading data when BTF is set, as the data register is still full

		if( (I2Cx->SR1>>6) & 1 )
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <I2C_GetFlagStatus+0xd8>
			bitstatus = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;


		break;
 8001422:	e01a      	b.n	800145a <I2C_GetFlagStatus+0x10e>
			bitstatus = RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	77fb      	strb	r3, [r7, #31]
		break;
 8001428:	e017      	b.n	800145a <I2C_GetFlagStatus+0x10e>
	}
	case MASTER_BYTE_TRANSMITING:
	{

		/*Read The I2Cx Statu Register*/
		flag1 = I2Cx->SR1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	617b      	str	r3, [r7, #20]
		flag2 = flag2<<16;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	041b      	lsls	r3, r3, #16
 800143a:	617b      	str	r3, [r7, #20]
		/*Get the last Event value from I2C Statu Register*/
		lastevent = (flag1 | flag2) & ((uint32_t) 0xffffffff);
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
		//Check whether lastevent contain THE I2C_EVENT
		if((lastevent & MASTER_BYTE_TRANSMITING) == MASTER_BYTE_TRANSMITING)
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <I2C_GetFlagStatus+0x11c>)
 8001448:	4013      	ands	r3, r2
 800144a:	4a07      	ldr	r2, [pc, #28]	; (8001468 <I2C_GetFlagStatus+0x11c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d102      	bne.n	8001456 <I2C_GetFlagStatus+0x10a>
			bitstatus = SET;
 8001450:	2301      	movs	r3, #1
 8001452:	77fb      	strb	r3, [r7, #31]
 8001454:	e001      	b.n	800145a <I2C_GetFlagStatus+0x10e>
		else
			bitstatus = RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	77fb      	strb	r3, [r7, #31]
	}
	}
	return bitstatus;
 800145a:	7ffb      	ldrb	r3, [r7, #31]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3724      	adds	r7, #36	; 0x24
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	00070080 	.word	0x00070080

0800146c <I2C_SEND_ADRRESS>:

void I2C_SEND_ADRRESS(I2C_TypeDef* I2Cx,uint8_t address,uint8_t i2c_direction){
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
 8001478:	4613      	mov	r3, r2
 800147a:	70bb      	strb	r3, [r7, #2]

	I2Cx->DR = (address << 1 | i2c_direction);
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	005a      	lsls	r2, r3, #1
 8001480:	78bb      	ldrb	r3, [r7, #2]
 8001482:	4313      	orrs	r3, r2
 8001484:	461a      	mov	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	611a      	str	r2, [r3, #16]

}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <I2C_Stop_PIT>:
void I2C_Stop_PIT(I2C_TypeDef* I2Cx){
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	//	0: No Stop generation.
	//	1: Stop generation after the current byte transfer or after the current Start condition is sent.
	//	In Slave mode:
	//	0: No Stop generation.
	//	1: Release the SCL and SDA lines after the current byte transfer
	I2Cx->CR1 |= (1<<9);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <I2C_Acknowledge>:

void I2C_Acknowledge(I2C_TypeDef *I2Cx,FunctionalState State)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	70fb      	strb	r3, [r7, #3]
	//	Bit 10 ACK: Acknowledge enable
	//	This bit is set and cleared by software and cleared by hardware when PE=0.
	//	0: No acknowledge returned
	//	1: Acknowledge returned after a byte is received (matched address or data)

	if(State != DISABLE)
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <I2C_Acknowledge+0x20>
	{
		/*Generate Stop Condition*/
		I2Cx->CR1 |= (1<<10);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	601a      	str	r2, [r3, #0]
	else
	{
		/*Disable  Stop Condition Generation*/
		I2Cx->CR1 &= ~(1<<10);
	}
}
 80014d0:	e005      	b.n	80014de <I2C_Acknowledge+0x2c>
		I2Cx->CR1 &= ~(1<<10);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <PWM>:
//timer1 ch_1 --> A8  <> timer2 ch_1 --> A0 <> timer3 ch_1 --> A6 <> timer4 ch_1 --> B6
//timer1 ch_2 --> A9  <> timer2 ch_2 --> A1 <> timer3 ch_2 --> A7 <> timer4 ch_2 --> B7
//timer1 ch_3 --> A10 <> timer2 ch_3 --> A2 <> timer3 ch_3 --> B0 <> timer4 ch_3 --> B8
//timer1 ch_4 --> A11 <> timer2 ch_4 --> A3 <> timer3 ch_4 --> B1 <> timer4 ch_4 --> B9
*/
void PWM(TIMERS_typeDef* TIMERx,uint32_t CH,uint32_t duty_cycle,uint32_t freq,uint32_t clk){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]

	TIMERx->TIMx_CR1 &=~(1<<0);//Counter disabled
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 0201 	bic.w	r2, r3, #1
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	601a      	str	r2, [r3, #0]


	char user_flage=1;
 8001502:	2301      	movs	r3, #1
 8001504:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 800150a:	2301      	movs	r3, #1
 800150c:	617b      	str	r3, [r7, #20]

	while(user_flage==1){
 800150e:	e011      	b.n	8001534 <PWM+0x4c>
		user_top = (clk)/(freq * user_pre );
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	fb02 f303 	mul.w	r3, r2, r3
 8001518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001526:	d303      	bcc.n	8001530 <PWM+0x48>
			user_pre+=2;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3302      	adds	r3, #2
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e001      	b.n	8001534 <PWM+0x4c>
		}
		else{
			user_flage=0;
 8001530:	2300      	movs	r3, #0
 8001532:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 8001534:	7ffb      	ldrb	r3, [r7, #31]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d0ea      	beq.n	8001510 <PWM+0x28>
	}

	//====================TIM1===================


	if(TIMERx==TIM1){
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4a8e      	ldr	r2, [pc, #568]	; (8001778 <PWM+0x290>)
 800153e:	4293      	cmp	r3, r2
 8001540:	f040 80d7 	bne.w	80016f2 <PWM+0x20a>
		TIMER1_CLOCK_Enable();//enable timer1 clock
 8001544:	4b8d      	ldr	r3, [pc, #564]	; (800177c <PWM+0x294>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a8c      	ldr	r2, [pc, #560]	; (800177c <PWM+0x294>)
 800154a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800154e:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();//enable porta clock
 8001550:	4b8a      	ldr	r3, [pc, #552]	; (800177c <PWM+0x294>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a89      	ldr	r2, [pc, #548]	; (800177c <PWM+0x294>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 800155c:	4b87      	ldr	r3, [pc, #540]	; (800177c <PWM+0x294>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a86      	ldr	r2, [pc, #536]	; (800177c <PWM+0x294>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6193      	str	r3, [r2, #24]
		if(CH==CH_1){
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d12d      	bne.n	80015ca <PWM+0xe2>
			pinmode(GPIOA, pin8, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800156e:	220b      	movs	r2, #11
 8001570:	2108      	movs	r1, #8
 8001572:	4883      	ldr	r0, [pc, #524]	; (8001780 <PWM+0x298>)
 8001574:	f7ff f94c 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3); //Output compare 1 preload enable
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f043 0208 	orr.w	r2, r3, #8
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0); // Capture/Compare 1 output enable
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f043 0201 	orr.w	r2, r3, #1
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);//110: PWM mode 1 - In upcounting, channel 1 is active
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	fb02 f303 	mul.w	r3, r2, r3
 80015a4:	4a77      	ldr	r2, [pc, #476]	; (8001784 <PWM+0x29c>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	099a      	lsrs	r2, r3, #6
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_BDTR |=(1<<15); // Main output enable
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b11<<0);//Update interrupt enable Capture/Compare 1 interrupt enable
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f043 0203 	orr.w	r2, r3, #3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	e2f6      	b.n	8001bb8 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d12d      	bne.n	800162c <PWM+0x144>
			pinmode(GPIOA, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80015d0:	220b      	movs	r2, #11
 80015d2:	2109      	movs	r1, #9
 80015d4:	486a      	ldr	r0, [pc, #424]	; (8001780 <PWM+0x298>)
 80015d6:	f7ff f91b 	bl	8000810 <pinmode>
			//pinmode(GPIOA, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
			TIMERx->TIMx_CCMR1 |=(1<<11);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	f043 0210 	orr.w	r2, r3, #16
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a5f      	ldr	r2, [pc, #380]	; (8001784 <PWM+0x29c>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	099a      	lsrs	r2, r3, #6
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_BDTR |=(1<<15);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b101<<0);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f043 0205 	orr.w	r2, r3, #5
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	e2c5      	b.n	8001bb8 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d12d      	bne.n	800168e <PWM+0x1a6>
			pinmode(GPIOA, pin10, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001632:	220b      	movs	r2, #11
 8001634:	210a      	movs	r1, #10
 8001636:	4852      	ldr	r0, [pc, #328]	; (8001780 <PWM+0x298>)
 8001638:	f7ff f8ea 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	f043 0208 	orr.w	r2, r3, #8
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	4a46      	ldr	r2, [pc, #280]	; (8001784 <PWM+0x29c>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	099a      	lsrs	r2, r3, #6
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_BDTR |=(1<<15);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f043 0209 	orr.w	r2, r3, #9
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	e294      	b.n	8001bb8 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b04      	cmp	r3, #4
 8001692:	f040 8291 	bne.w	8001bb8 <PWM+0x6d0>
			pinmode(GPIOA, pin11, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001696:	220b      	movs	r2, #11
 8001698:	210b      	movs	r1, #11
 800169a:	4839      	ldr	r0, [pc, #228]	; (8001780 <PWM+0x298>)
 800169c:	f7ff f8b8 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	4a2d      	ldr	r2, [pc, #180]	; (8001784 <PWM+0x29c>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	099a      	lsrs	r2, r3, #6
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_BDTR |=(1<<15);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b10001<<0);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f043 0211 	orr.w	r2, r3, #17
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	e262      	b.n	8001bb8 <PWM+0x6d0>
		}
	}

	//====================TIM2===================

	else if (TIMERx==TIM2){
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f8:	f040 80c8 	bne.w	800188c <PWM+0x3a4>
		TIMER2_CLOCK_Enable();//enable timer2 clock
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <PWM+0x294>)
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	4a1e      	ldr	r2, [pc, #120]	; (800177c <PWM+0x294>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();//enable porta clock
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <PWM+0x294>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <PWM+0x294>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <PWM+0x294>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a18      	ldr	r2, [pc, #96]	; (800177c <PWM+0x294>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d130      	bne.n	8001788 <PWM+0x2a0>
			pinmode(GPIOA, pin0, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001726:	220b      	movs	r2, #11
 8001728:	2100      	movs	r1, #0
 800172a:	4815      	ldr	r0, [pc, #84]	; (8001780 <PWM+0x298>)
 800172c:	f7ff f870 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f043 0208 	orr.w	r2, r3, #8
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	4a09      	ldr	r2, [pc, #36]	; (8001784 <PWM+0x29c>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	099a      	lsrs	r2, r3, #6
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f043 0203 	orr.w	r2, r3, #3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	e220      	b.n	8001bb8 <PWM+0x6d0>
 8001776:	bf00      	nop
 8001778:	40012c00 	.word	0x40012c00
 800177c:	40021000 	.word	0x40021000
 8001780:	40010800 	.word	0x40010800
 8001784:	10624dd3 	.word	0x10624dd3
		}
		else if(CH==CH_2){
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d127      	bne.n	80017de <PWM+0x2f6>
			pinmode(GPIOA, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800178e:	220b      	movs	r2, #11
 8001790:	2101      	movs	r1, #1
 8001792:	488d      	ldr	r0, [pc, #564]	; (80019c8 <PWM+0x4e0>)
 8001794:	f7ff f83c 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	f043 0210 	orr.w	r2, r3, #16
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	4a81      	ldr	r2, [pc, #516]	; (80019cc <PWM+0x4e4>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	099a      	lsrs	r2, r3, #6
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f043 0205 	orr.w	r2, r3, #5
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	e1ec      	b.n	8001bb8 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d127      	bne.n	8001834 <PWM+0x34c>
			pinmode(GPIOA, pin2, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80017e4:	220b      	movs	r2, #11
 80017e6:	2102      	movs	r1, #2
 80017e8:	4877      	ldr	r0, [pc, #476]	; (80019c8 <PWM+0x4e0>)
 80017ea:	f7ff f811 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f043 0208 	orr.w	r2, r3, #8
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	fb02 f303 	mul.w	r3, r2, r3
 800181a:	4a6c      	ldr	r2, [pc, #432]	; (80019cc <PWM+0x4e4>)
 800181c:	fba2 2303 	umull	r2, r3, r2, r3
 8001820:	099a      	lsrs	r2, r3, #6
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f043 0209 	orr.w	r2, r3, #9
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	e1c1      	b.n	8001bb8 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b04      	cmp	r3, #4
 8001838:	f040 81be 	bne.w	8001bb8 <PWM+0x6d0>
			pinmode(GPIOA, pin3, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800183c:	220b      	movs	r2, #11
 800183e:	2103      	movs	r1, #3
 8001840:	4861      	ldr	r0, [pc, #388]	; (80019c8 <PWM+0x4e0>)
 8001842:	f7fe ffe5 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	4a56      	ldr	r2, [pc, #344]	; (80019cc <PWM+0x4e4>)
 8001874:	fba2 2303 	umull	r2, r3, r2, r3
 8001878:	099a      	lsrs	r2, r3, #6
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f043 0211 	orr.w	r2, r3, #17
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	e195      	b.n	8001bb8 <PWM+0x6d0>
		}
	}
	//====================TIM3===================

	else if (TIMERx==TIM3){
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4a50      	ldr	r2, [pc, #320]	; (80019d0 <PWM+0x4e8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	f040 80cf 	bne.w	8001a34 <PWM+0x54c>
		TIMER3_CLOCK_Enable();//enable timer3 clock
 8001896:	4b4f      	ldr	r3, [pc, #316]	; (80019d4 <PWM+0x4ec>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a4e      	ldr	r2, [pc, #312]	; (80019d4 <PWM+0x4ec>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();//enable porta clock
 80018a2:	4b4c      	ldr	r3, [pc, #304]	; (80019d4 <PWM+0x4ec>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	4a4b      	ldr	r2, [pc, #300]	; (80019d4 <PWM+0x4ec>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6193      	str	r3, [r2, #24]
		GPIOB_Clock_Enable();//enable porta clock
 80018ae:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <PWM+0x4ec>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <PWM+0x4ec>)
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 80018ba:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <PWM+0x4ec>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	4a45      	ldr	r2, [pc, #276]	; (80019d4 <PWM+0x4ec>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d127      	bne.n	800191c <PWM+0x434>
			pinmode(GPIOA, pin6, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80018cc:	220b      	movs	r2, #11
 80018ce:	2106      	movs	r1, #6
 80018d0:	483d      	ldr	r0, [pc, #244]	; (80019c8 <PWM+0x4e0>)
 80018d2:	f7fe ff9d 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f043 0208 	orr.w	r2, r3, #8
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	4a32      	ldr	r2, [pc, #200]	; (80019cc <PWM+0x4e4>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	099a      	lsrs	r2, r3, #6
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f043 0203 	orr.w	r2, r3, #3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	e14d      	b.n	8001bb8 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d127      	bne.n	8001972 <PWM+0x48a>
			pinmode(GPIOA, pin7, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001922:	220b      	movs	r2, #11
 8001924:	2107      	movs	r1, #7
 8001926:	4828      	ldr	r0, [pc, #160]	; (80019c8 <PWM+0x4e0>)
 8001928:	f7fe ff72 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	f043 0210 	orr.w	r2, r3, #16
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <PWM+0x4e4>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	099a      	lsrs	r2, r3, #6
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f043 0205 	orr.w	r2, r3, #5
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	e122      	b.n	8001bb8 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d131      	bne.n	80019dc <PWM+0x4f4>
			pinmode(GPIOB, pin0, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001978:	220b      	movs	r2, #11
 800197a:	2100      	movs	r1, #0
 800197c:	4816      	ldr	r0, [pc, #88]	; (80019d8 <PWM+0x4f0>)
 800197e:	f7fe ff47 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f043 0208 	orr.w	r2, r3, #8
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	4a07      	ldr	r2, [pc, #28]	; (80019cc <PWM+0x4e4>)
 80019b0:	fba2 2303 	umull	r2, r3, r2, r3
 80019b4:	099a      	lsrs	r2, r3, #6
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f043 0209 	orr.w	r2, r3, #9
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	e0f7      	b.n	8001bb8 <PWM+0x6d0>
 80019c8:	40010800 	.word	0x40010800
 80019cc:	10624dd3 	.word	0x10624dd3
 80019d0:	40000400 	.word	0x40000400
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010c00 	.word	0x40010c00
		}
		else if(CH==CH_4){
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b04      	cmp	r3, #4
 80019e0:	f040 80ea 	bne.w	8001bb8 <PWM+0x6d0>
			pinmode(GPIOB, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80019e4:	220b      	movs	r2, #11
 80019e6:	2101      	movs	r1, #1
 80019e8:	4882      	ldr	r0, [pc, #520]	; (8001bf4 <PWM+0x70c>)
 80019ea:	f7fe ff11 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	4a77      	ldr	r2, [pc, #476]	; (8001bf8 <PWM+0x710>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	099a      	lsrs	r2, r3, #6
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f043 0211 	orr.w	r2, r3, #17
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	e0c1      	b.n	8001bb8 <PWM+0x6d0>
	}


	//====================TIM4===================

	else if (TIMERx==TIM4){
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4a71      	ldr	r2, [pc, #452]	; (8001bfc <PWM+0x714>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	f040 80bd 	bne.w	8001bb8 <PWM+0x6d0>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 8001a3e:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <PWM+0x718>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4a6f      	ldr	r2, [pc, #444]	; (8001c00 <PWM+0x718>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();//enable porta clock
 8001a4a:	4b6d      	ldr	r3, [pc, #436]	; (8001c00 <PWM+0x718>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	4a6c      	ldr	r2, [pc, #432]	; (8001c00 <PWM+0x718>)
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 8001a56:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <PWM+0x718>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	4a69      	ldr	r2, [pc, #420]	; (8001c00 <PWM+0x718>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d127      	bne.n	8001ab8 <PWM+0x5d0>
			pinmode(GPIOB, pin6, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001a68:	220b      	movs	r2, #11
 8001a6a:	2106      	movs	r1, #6
 8001a6c:	4861      	ldr	r0, [pc, #388]	; (8001bf4 <PWM+0x70c>)
 8001a6e:	f7fe fecf 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f043 0208 	orr.w	r2, r3, #8
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	f043 0201 	orr.w	r2, r3, #1
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	4a56      	ldr	r2, [pc, #344]	; (8001bf8 <PWM+0x710>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	099a      	lsrs	r2, r3, #6
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f043 0203 	orr.w	r2, r3, #3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	e07f      	b.n	8001bb8 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d127      	bne.n	8001b0e <PWM+0x626>
			pinmode(GPIOB, pin7, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001abe:	220b      	movs	r2, #11
 8001ac0:	2107      	movs	r1, #7
 8001ac2:	484c      	ldr	r0, [pc, #304]	; (8001bf4 <PWM+0x70c>)
 8001ac4:	f7fe fea4 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f043 0210 	orr.w	r2, r3, #16
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	4a40      	ldr	r2, [pc, #256]	; (8001bf8 <PWM+0x710>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	099a      	lsrs	r2, r3, #6
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f043 0205 	orr.w	r2, r3, #5
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	e054      	b.n	8001bb8 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d127      	bne.n	8001b64 <PWM+0x67c>
			pinmode(GPIOB, pin8, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001b14:	220b      	movs	r2, #11
 8001b16:	2108      	movs	r1, #8
 8001b18:	4836      	ldr	r0, [pc, #216]	; (8001bf4 <PWM+0x70c>)
 8001b1a:	f7fe fe79 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f043 0208 	orr.w	r2, r3, #8
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <PWM+0x710>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	099a      	lsrs	r2, r3, #6
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f043 0209 	orr.w	r2, r3, #9
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	e029      	b.n	8001bb8 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d126      	bne.n	8001bb8 <PWM+0x6d0>
			pinmode(GPIOB, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001b6a:	220b      	movs	r2, #11
 8001b6c:	2109      	movs	r1, #9
 8001b6e:	4821      	ldr	r0, [pc, #132]	; (8001bf4 <PWM+0x70c>)
 8001b70:	f7fe fe4e 	bl	8000810 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ba0:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <PWM+0x710>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	099a      	lsrs	r2, r3, #6
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f043 0211 	orr.w	r2, r3, #17
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	60da      	str	r2, [r3, #12]


	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->TIMx_CR1 |=(1<<7);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	601a      	str	r2, [r3, #0]


	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	TIMERx->TIMx_ARR=user_top;//frec peak value
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c

	TIMERx->TIMx_PSC=(user_pre-1);//prescaller
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	TIMERx->TIMx_EGR |=(1<<0);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	615a      	str	r2, [r3, #20]

	TIMERx->TIMx_CR1 |=(1<<0);//enable the timer
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	601a      	str	r2, [r3, #0]

}
 8001bea:	bf00      	nop
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40010c00 	.word	0x40010c00
 8001bf8:	10624dd3 	.word	0x10624dd3
 8001bfc:	40000800 	.word	0x40000800
 8001c00:	40021000 	.word	0x40021000

08001c04 <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(float time,uint8_t U,uint32_t clk){
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b08b      	sub	sp, #44	; 0x2c
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	72fb      	strb	r3, [r7, #11]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 8001c12:	4b5b      	ldr	r3, [pc, #364]	; (8001d80 <delay+0x17c>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a5a      	ldr	r2, [pc, #360]	; (8001d80 <delay+0x17c>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001c1e:	4b59      	ldr	r3, [pc, #356]	; (8001d84 <delay+0x180>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <delay+0x180>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0201 	bic.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
	uint32_t unit =1000;
 8001c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c40:	61bb      	str	r3, [r7, #24]
	uint8_t  increase=2;
 8001c42:	2302      	movs	r3, #2
 8001c44:	75fb      	strb	r3, [r7, #23]

	if (U == 0){
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10f      	bne.n	8001c6c <delay+0x68>
		unit = 1000;
 8001c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c50:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 100;
 8001c52:	494d      	ldr	r1, [pc, #308]	; (8001d88 <delay+0x184>)
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7fe fd55 	bl	8000704 <__aeabi_fcmpgt>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <delay+0x62>
 8001c60:	2364      	movs	r3, #100	; 0x64
 8001c62:	75fb      	strb	r3, [r7, #23]
 8001c64:	e045      	b.n	8001cf2 <delay+0xee>
		else increase = 10;
 8001c66:	230a      	movs	r3, #10
 8001c68:	75fb      	strb	r3, [r7, #23]
 8001c6a:	e042      	b.n	8001cf2 <delay+0xee>
	}
	else {
		unit = 1000000;
 8001c6c:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <delay+0x188>)
 8001c6e:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 10;
 8001c70:	4945      	ldr	r1, [pc, #276]	; (8001d88 <delay+0x184>)
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f7fe fd46 	bl	8000704 <__aeabi_fcmpgt>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <delay+0x80>
 8001c7e:	230a      	movs	r3, #10
 8001c80:	75fb      	strb	r3, [r7, #23]
 8001c82:	e036      	b.n	8001cf2 <delay+0xee>
		else increase = 5;
 8001c84:	2305      	movs	r3, #5
 8001c86:	75fb      	strb	r3, [r7, #23]
	}

	while(user_flage==1){
 8001c88:	e033      	b.n	8001cf2 <delay+0xee>
		user_top = (clk/unit*time)/( user_pre );
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fb22 	bl	80002dc <__aeabi_ui2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	68f9      	ldr	r1, [r7, #12]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fb75 	bl	800038c <__aeabi_fmul>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461c      	mov	r4, r3
 8001ca6:	69f8      	ldr	r0, [r7, #28]
 8001ca8:	f7fe fb18 	bl	80002dc <__aeabi_ui2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f7fe fc1f 	bl	80004f4 <__aeabi_fdiv>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fd2d 	bl	8000718 <__aeabi_f2uiz>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	623b      	str	r3, [r7, #32]
		if(user_top>=32000){
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001cc8:	d310      	bcc.n	8001cec <delay+0xe8>

			if(user_pre>65530){
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d906      	bls.n	8001ce2 <delay+0xde>
				user_pre=65530;
 8001cd4:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8001cd8:	61fb      	str	r3, [r7, #28]
				user_flage=0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ce0:	e007      	b.n	8001cf2 <delay+0xee>
			}
			else user_pre+=increase;
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	e002      	b.n	8001cf2 <delay+0xee>

		}
		else{
			user_flage=0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(user_flage==1){
 8001cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d0c7      	beq.n	8001c8a <delay+0x86>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <delay+0x180>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <delay+0x180>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <delay+0x180>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <delay+0x180>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0204 	orr.w	r2, r2, #4
 8001d18:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <delay+0x180>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <delay+0x180>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <delay+0x180>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6a3a      	ldr	r2, [r7, #32]
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <delay+0x180>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	3a01      	subs	r2, #1
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <delay+0x180>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <delay+0x180>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <delay+0x180>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <delay+0x180>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <delay+0x18c>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <delay+0x190>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <delay+0x190>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 8001d6e:	bf00      	nop
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <delay+0x18c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1fb      	bne.n	8001d70 <delay+0x16c>

	}
}
 8001d78:	bf00      	nop
 8001d7a:	372c      	adds	r7, #44	; 0x2c
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	2000001c 	.word	0x2000001c
 8001d88:	453b8000 	.word	0x453b8000
 8001d8c:	000f4240 	.word	0x000f4240
 8001d90:	20000018 	.word	0x20000018
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <TIME_CALCULATION>:
	NVIC_TIM3_global_interrupt_Enable;

}
//======================================================================================================

uint32_t TIME_CALCULATION(uint32_t clk,uint8_t TIMER_ST){
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
	if(TIMER_ST==TIMER_START){
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d132      	bne.n	8001e10 <TIME_CALCULATION+0x78>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 8001daa:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <TIME_CALCULATION+0xd0>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a2e      	ldr	r2, [pc, #184]	; (8001e68 <TIME_CALCULATION+0xd0>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	61d3      	str	r3, [r2, #28]
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_CR1  |=(1<<2);
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_DIER |=(1<<0);//Update interrupt enable
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	60d3      	str	r3, [r2, #12]

		TIM4->TIMx_ARR=64000;//peak value 8ms of freq=8000000hz
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001ddc:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM4->TIMx_PSC=0;//prescaller
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28

		TIM4->TIMx_EGR |=(1<<0);//Bit 0 UG: Update generation
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6153      	str	r3, [r2, #20]

		TIM4->TIMx_CR1 |=(1<<0);//enable the timer
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6013      	str	r3, [r2, #0]
		NVIC_TIM4_global_interrupt_Enable;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <TIME_CALCULATION+0xd8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <TIME_CALCULATION+0xd8>)
 8001e06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e0a:	6013      	str	r3, [r2, #0]
		return 1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e025      	b.n	8001e5c <TIME_CALCULATION+0xc4>
	}
	else {
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 8001e10:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6013      	str	r3, [r2, #0]
		timer_ticks=TIM4->TIMx_CNT;
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <TIME_CALCULATION+0xd4>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <TIME_CALCULATION+0xdc>)
 8001e24:	801a      	strh	r2, [r3, #0]
		uint32_t X=((timer_ticks+(overflowtims*64000))/(clk/1000000));
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <TIME_CALCULATION+0xdc>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <TIME_CALCULATION+0xe0>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8001e36:	fb03 f301 	mul.w	r3, r3, r1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <TIME_CALCULATION+0xe4>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0c9b      	lsrs	r3, r3, #18
 8001e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e4c:	60fb      	str	r3, [r7, #12]
		overflowtims=0;
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <TIME_CALCULATION+0xe0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	801a      	strh	r2, [r3, #0]
		timer_ticks=0;
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <TIME_CALCULATION+0xdc>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	801a      	strh	r2, [r3, #0]
		return X;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	200000a8 	.word	0x200000a8
 8001e78:	200000a6 	.word	0x200000a6
 8001e7c:	431bde83 	.word	0x431bde83

08001e80 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 8001e8e:	4b3c      	ldr	r3, [pc, #240]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d12f      	bne.n	8001f04 <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eb2:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 8001eb4:	4b32      	ldr	r3, [pc, #200]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001ec2:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0208 	orr.w	r2, r2, #8
 8001ed2:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001ee2:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8001ee4:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6a1a      	ldr	r2, [r3, #32]
 8001eea:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0210 	orr.w	r2, r2, #16
 8001ef2:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8001ef4:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6a1a      	ldr	r2, [r3, #32]
 8001efa:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f12:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SPWM_timer_INIT+0x100>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000000 	.word	0x20000000

08001f84 <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <TIM2_IRQHandler+0x34>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <TIM2_IRQHandler+0x34>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <TIM2_IRQHandler+0x38>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <TIM2_IRQHandler+0x34>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <TIM2_IRQHandler+0x34>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	2000001c 	.word	0x2000001c
 8001fbc:	20000018 	.word	0x20000018

08001fc0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <TIM3_IRQHandler+0x6c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d119      	bne.n	8002000 <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <TIM3_IRQHandler+0x70>)
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	4a17      	ldr	r2, [pc, #92]	; (8002030 <TIM3_IRQHandler+0x70>)
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <TIM3_IRQHandler+0x74>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <TIM3_IRQHandler+0x74>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	4a13      	ldr	r2, [pc, #76]	; (8002034 <TIM3_IRQHandler+0x74>)
 8001fe8:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 8001fea:	e01c      	b.n	8002026 <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <TIM3_IRQHandler+0x6c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <TIM3_IRQHandler+0x70>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a0e      	ldr	r2, [pc, #56]	; (8002030 <TIM3_IRQHandler+0x70>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	6013      	str	r3, [r2, #0]
}
 8001ffe:	e012      	b.n	8002026 <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <TIM3_IRQHandler+0x78>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <TIM3_IRQHandler+0x78>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <TIM3_IRQHandler+0x78>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <TIM3_IRQHandler+0x78>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <TIM3_IRQHandler+0x7c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4798      	blx	r3
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200000b0 	.word	0x200000b0
 8002030:	40000400 	.word	0x40000400
 8002034:	200000ac 	.word	0x200000ac
 8002038:	20000168 	.word	0x20000168
 800203c:	2000015c 	.word	0x2000015c

08002040 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <TIM4_IRQHandler+0x24>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a06      	ldr	r2, [pc, #24]	; (8002064 <TIM4_IRQHandler+0x24>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	6113      	str	r3, [r2, #16]
	overflowtims++;
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <TIM4_IRQHandler+0x28>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <TIM4_IRQHandler+0x28>)
 800205a:	801a      	strh	r2, [r3, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	40000800 	.word	0x40000800
 8002068:	200000a6 	.word	0x200000a6

0800206c <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 8002070:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <TIM1_UP_IRQHandler+0x17c>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b5d      	ldr	r3, [pc, #372]	; (80021ec <TIM1_UP_IRQHandler+0x180>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d911      	bls.n	80020a0 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 800207c:	4b5c      	ldr	r3, [pc, #368]	; (80021f0 <TIM1_UP_IRQHandler+0x184>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
		flage1=0;
 8002082:	4b5c      	ldr	r3, [pc, #368]	; (80021f4 <TIM1_UP_IRQHandler+0x188>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 8002088:	4b58      	ldr	r3, [pc, #352]	; (80021ec <TIM1_UP_IRQHandler+0x180>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a5a      	ldr	r2, [pc, #360]	; (80021f8 <TIM1_UP_IRQHandler+0x18c>)
 800208e:	7812      	ldrb	r2, [r2, #0]
 8002090:	fbb3 f2f2 	udiv	r2, r3, r2
 8002094:	4b55      	ldr	r3, [pc, #340]	; (80021ec <TIM1_UP_IRQHandler+0x180>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4413      	add	r3, r2
 800209a:	4a53      	ldr	r2, [pc, #332]	; (80021e8 <TIM1_UP_IRQHandler+0x17c>)
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e018      	b.n	80020d2 <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 80020a0:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <TIM1_UP_IRQHandler+0x17c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b63      	cmp	r3, #99	; 0x63
 80020a6:	d814      	bhi.n	80020d2 <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 80020a8:	4b51      	ldr	r3, [pc, #324]	; (80021f0 <TIM1_UP_IRQHandler+0x184>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
		flage1=1;
 80020ae:	4b51      	ldr	r3, [pc, #324]	; (80021f4 <TIM1_UP_IRQHandler+0x188>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 80020b4:	4b51      	ldr	r3, [pc, #324]	; (80021fc <TIM1_UP_IRQHandler+0x190>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	f083 0301 	eor.w	r3, r3, #1
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <TIM1_UP_IRQHandler+0x190>)
 80020c0:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 80020c2:	4b4a      	ldr	r3, [pc, #296]	; (80021ec <TIM1_UP_IRQHandler+0x180>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a4c      	ldr	r2, [pc, #304]	; (80021f8 <TIM1_UP_IRQHandler+0x18c>)
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ce:	4a46      	ldr	r2, [pc, #280]	; (80021e8 <TIM1_UP_IRQHandler+0x17c>)
 80020d0:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 80020d2:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <TIM1_UP_IRQHandler+0x190>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d110      	bne.n	80020fc <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 80020da:	4b49      	ldr	r3, [pc, #292]	; (8002200 <TIM1_UP_IRQHandler+0x194>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	4b47      	ldr	r3, [pc, #284]	; (8002200 <TIM1_UP_IRQHandler+0x194>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 80020ea:	4b45      	ldr	r3, [pc, #276]	; (8002200 <TIM1_UP_IRQHandler+0x194>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6a1a      	ldr	r2, [r3, #32]
 80020f0:	4b43      	ldr	r3, [pc, #268]	; (8002200 <TIM1_UP_IRQHandler+0x194>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0210 	orr.w	r2, r2, #16
 80020f8:	621a      	str	r2, [r3, #32]
 80020fa:	e013      	b.n	8002124 <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 80020fc:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <TIM1_UP_IRQHandler+0x190>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10f      	bne.n	8002124 <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 8002104:	4b3e      	ldr	r3, [pc, #248]	; (8002200 <TIM1_UP_IRQHandler+0x194>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <TIM1_UP_IRQHandler+0x194>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0210 	bic.w	r2, r2, #16
 8002112:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 8002114:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <TIM1_UP_IRQHandler+0x194>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	4b39      	ldr	r3, [pc, #228]	; (8002200 <TIM1_UP_IRQHandler+0x194>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 8002124:	4b33      	ldr	r3, [pc, #204]	; (80021f4 <TIM1_UP_IRQHandler+0x188>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d11c      	bne.n	8002166 <TIM1_UP_IRQHandler+0xfa>
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <TIM1_UP_IRQHandler+0x184>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d118      	bne.n	8002166 <TIM1_UP_IRQHandler+0xfa>
		top=c;
 8002134:	4b33      	ldr	r3, [pc, #204]	; (8002204 <TIM1_UP_IRQHandler+0x198>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2c      	ldr	r2, [pc, #176]	; (80021ec <TIM1_UP_IRQHandler+0x180>)
 800213a:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 800213c:	4b32      	ldr	r3, [pc, #200]	; (8002208 <TIM1_UP_IRQHandler+0x19c>)
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <TIM1_UP_IRQHandler+0x17c>)
 8002142:	6819      	ldr	r1, [r3, #0]
 8002144:	4b29      	ldr	r3, [pc, #164]	; (80021ec <TIM1_UP_IRQHandler+0x180>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2301      	movs	r3, #1
 800214a:	f7ff fe99 	bl	8001e80 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 800214e:	4b27      	ldr	r3, [pc, #156]	; (80021ec <TIM1_UP_IRQHandler+0x180>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a29      	ldr	r2, [pc, #164]	; (80021f8 <TIM1_UP_IRQHandler+0x18c>)
 8002154:	7812      	ldrb	r2, [r2, #0]
 8002156:	fbb3 f2f2 	udiv	r2, r3, r2
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <TIM1_UP_IRQHandler+0x17c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4413      	add	r3, r2
 8002160:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <TIM1_UP_IRQHandler+0x17c>)
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e035      	b.n	80021d2 <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 8002166:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <TIM1_UP_IRQHandler+0x184>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d129      	bne.n	80021c2 <TIM1_UP_IRQHandler+0x156>
 800216e:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <TIM1_UP_IRQHandler+0x188>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d125      	bne.n	80021c2 <TIM1_UP_IRQHandler+0x156>
		top=c;
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <TIM1_UP_IRQHandler+0x198>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <TIM1_UP_IRQHandler+0x180>)
 800217c:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <TIM1_UP_IRQHandler+0x17c>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <TIM1_UP_IRQHandler+0x180>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	491c      	ldr	r1, [pc, #112]	; (80021f8 <TIM1_UP_IRQHandler+0x18c>)
 8002188:	7809      	ldrb	r1, [r1, #0]
 800218a:	fbb3 f3f1 	udiv	r3, r3, r1
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <TIM1_UP_IRQHandler+0x17c>)
 8002192:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <TIM1_UP_IRQHandler+0x19c>)
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <TIM1_UP_IRQHandler+0x17c>)
 800219a:	6819      	ldr	r1, [r3, #0]
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <TIM1_UP_IRQHandler+0x180>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2301      	movs	r3, #1
 80021a2:	f7ff fe6d 	bl	8001e80 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <TIM1_UP_IRQHandler+0x180>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <TIM1_UP_IRQHandler+0x18c>)
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <TIM1_UP_IRQHandler+0x17c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d10b      	bne.n	80021d2 <TIM1_UP_IRQHandler+0x166>
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <TIM1_UP_IRQHandler+0x17c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e007      	b.n	80021d2 <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <TIM1_UP_IRQHandler+0x194>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <TIM1_UP_IRQHandler+0x194>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0201 	bic.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <TIM1_UP_IRQHandler+0x194>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <TIM1_UP_IRQHandler+0x194>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	611a      	str	r2, [r3, #16]
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000014 	.word	0x20000014
 80021ec:	20000008 	.word	0x20000008
 80021f0:	200000a5 	.word	0x200000a5
 80021f4:	20000004 	.word	0x20000004
 80021f8:	20000164 	.word	0x20000164
 80021fc:	20000005 	.word	0x20000005
 8002200:	20000000 	.word	0x20000000
 8002204:	20000010 	.word	0x20000010
 8002208:	2000000c 	.word	0x2000000c

0800220c <MCAL_speed_init>:
#include "stm32_speed_DRIVER.h"
#define FLASH_BASE_ADDR     0x40022000
#define FLASH_ACR_OFFSET    0x00
#define FLASH_ACR          (*(volatile unsigned int*)(FLASH_BASE_ADDR + FLASH_ACR_OFFSET))
#define FLASH_ACR_LATENCY_Pos 0
void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	460a      	mov	r2, r1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4613      	mov	r3, r2
 800221a:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d13a      	bne.n	8002298 <MCAL_speed_init+0x8c>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 8002222:	79bb      	ldrb	r3, [r7, #6]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 80cc 	bne.w	80023c2 <MCAL_speed_init+0x1b6>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 800222a:	4b68      	ldr	r3, [pc, #416]	; (80023cc <MCAL_speed_init+0x1c0>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4a67      	ldr	r2, [pc, #412]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002234:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 8002236:	4b65      	ldr	r3, [pc, #404]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a64      	ldr	r2, [pc, #400]	; (80023cc <MCAL_speed_init+0x1c0>)
 800223c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8002240:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 8002242:	4b62      	ldr	r3, [pc, #392]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4a61      	ldr	r2, [pc, #388]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002248:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800224c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 800224e:	4b5f      	ldr	r3, [pc, #380]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a5e      	ldr	r2, [pc, #376]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002258:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 800225a:	4b5c      	ldr	r3, [pc, #368]	; (80023cc <MCAL_speed_init+0x1c0>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4a5b      	ldr	r2, [pc, #364]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002260:	f023 0303 	bic.w	r3, r3, #3
 8002264:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8002266:	4b59      	ldr	r3, [pc, #356]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a58      	ldr	r2, [pc, #352]	; (80023cc <MCAL_speed_init+0x1c0>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 8002272:	4b56      	ldr	r3, [pc, #344]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a55      	ldr	r2, [pc, #340]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002278:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800227c:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 800227e:	4b53      	ldr	r3, [pc, #332]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4a52      	ldr	r2, [pc, #328]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002284:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002288:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 800228a:	4b50      	ldr	r3, [pc, #320]	; (80023cc <MCAL_speed_init+0x1c0>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4a4f      	ldr	r2, [pc, #316]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002290:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002294:	6053      	str	r3, [r2, #4]

		}
	}


}
 8002296:	e094      	b.n	80023c2 <MCAL_speed_init+0x1b6>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 8002298:	79bb      	ldrb	r3, [r7, #6]
 800229a:	2b03      	cmp	r3, #3
 800229c:	d150      	bne.n	8002340 <MCAL_speed_init+0x134>
			RCC->RCC_CR |= (1 << 16);
 800229e:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <MCAL_speed_init+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a4a      	ldr	r2, [pc, #296]	; (80023cc <MCAL_speed_init+0x1c0>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 80022aa:	bf00      	nop
 80022ac:	4b47      	ldr	r3, [pc, #284]	; (80023cc <MCAL_speed_init+0x1c0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f9      	beq.n	80022ac <MCAL_speed_init+0xa0>
			RCC->RCC_CFGR|=(1<<16);
 80022b8:	4b44      	ldr	r3, [pc, #272]	; (80023cc <MCAL_speed_init+0x1c0>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a43      	ldr	r2, [pc, #268]	; (80023cc <MCAL_speed_init+0x1c0>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c2:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 80022c4:	4b41      	ldr	r3, [pc, #260]	; (80023cc <MCAL_speed_init+0x1c0>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a40      	ldr	r2, [pc, #256]	; (80023cc <MCAL_speed_init+0x1c0>)
 80022ca:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80022ce:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 80022d0:	4b3e      	ldr	r3, [pc, #248]	; (80023cc <MCAL_speed_init+0x1c0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a3d      	ldr	r2, [pc, #244]	; (80023cc <MCAL_speed_init+0x1c0>)
 80022d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022da:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 80022dc:	bf00      	nop
 80022de:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <MCAL_speed_init+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f9      	beq.n	80022de <MCAL_speed_init+0xd2>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 80022ea:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <MCAL_speed_init+0x1c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a38      	ldr	r2, [pc, #224]	; (80023d0 <MCAL_speed_init+0x1c4>)
 80022f0:	f023 0307 	bic.w	r3, r3, #7
 80022f4:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 80022f6:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <MCAL_speed_init+0x1c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a35      	ldr	r2, [pc, #212]	; (80023d0 <MCAL_speed_init+0x1c4>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8002302:	4b32      	ldr	r3, [pc, #200]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4a31      	ldr	r2, [pc, #196]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002308:	f023 0303 	bic.w	r3, r3, #3
 800230c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 800230e:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4a2e      	ldr	r2, [pc, #184]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 800231a:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <MCAL_speed_init+0x1c0>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002324:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8002326:	4b29      	ldr	r3, [pc, #164]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4a28      	ldr	r2, [pc, #160]	; (80023cc <MCAL_speed_init+0x1c0>)
 800232c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002330:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a25      	ldr	r2, [pc, #148]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002338:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800233c:	6053      	str	r3, [r2, #4]
}
 800233e:	e040      	b.n	80023c2 <MCAL_speed_init+0x1b6>
		else if (mood==mood_FAST_MOOD_72MHzCORE72MHzpref){
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d13d      	bne.n	80023c2 <MCAL_speed_init+0x1b6>
			RCC->RCC_CR |= (1 << 16);
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a20      	ldr	r2, [pc, #128]	; (80023cc <MCAL_speed_init+0x1c0>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 8002352:	bf00      	nop
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f9      	beq.n	8002354 <MCAL_speed_init+0x148>
			RCC->RCC_CFGR|=(1<<16);
 8002360:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a19      	ldr	r2, [pc, #100]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <MCAL_speed_init+0x1c0>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a16      	ldr	r2, [pc, #88]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002372:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002376:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <MCAL_speed_init+0x1c0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a13      	ldr	r2, [pc, #76]	; (80023cc <MCAL_speed_init+0x1c0>)
 800237e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002382:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 8002384:	bf00      	nop
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <MCAL_speed_init+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f9      	beq.n	8002386 <MCAL_speed_init+0x17a>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <MCAL_speed_init+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <MCAL_speed_init+0x1c4>)
 8002398:	f023 0307 	bic.w	r3, r3, #7
 800239c:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <MCAL_speed_init+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <MCAL_speed_init+0x1c4>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <MCAL_speed_init+0x1c0>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4a07      	ldr	r2, [pc, #28]	; (80023cc <MCAL_speed_init+0x1c0>)
 80023b0:	f023 0303 	bic.w	r3, r3, #3
 80023b4:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <MCAL_speed_init+0x1c0>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <MCAL_speed_init+0x1c0>)
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	6053      	str	r3, [r2, #4]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40022000 	.word	0x40022000

080023d4 <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	2b0f      	cmp	r3, #15
 80023e2:	d854      	bhi.n	800248e <Enable_NVIC+0xba>
 80023e4:	a201      	add	r2, pc, #4	; (adr r2, 80023ec <Enable_NVIC+0x18>)
 80023e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ea:	bf00      	nop
 80023ec:	0800242d 	.word	0x0800242d
 80023f0:	0800243b 	.word	0x0800243b
 80023f4:	08002449 	.word	0x08002449
 80023f8:	08002457 	.word	0x08002457
 80023fc:	08002465 	.word	0x08002465
 8002400:	08002473 	.word	0x08002473
 8002404:	08002473 	.word	0x08002473
 8002408:	08002473 	.word	0x08002473
 800240c:	08002473 	.word	0x08002473
 8002410:	08002473 	.word	0x08002473
 8002414:	08002481 	.word	0x08002481
 8002418:	08002481 	.word	0x08002481
 800241c:	08002481 	.word	0x08002481
 8002420:	08002481 	.word	0x08002481
 8002424:	08002481 	.word	0x08002481
 8002428:	08002481 	.word	0x08002481
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 800242c:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <Enable_NVIC+0xc4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a19      	ldr	r2, [pc, #100]	; (8002498 <Enable_NVIC+0xc4>)
 8002432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002436:	6013      	str	r3, [r2, #0]
		break;
 8002438:	e029      	b.n	800248e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <Enable_NVIC+0xc4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a16      	ldr	r2, [pc, #88]	; (8002498 <Enable_NVIC+0xc4>)
 8002440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002444:	6013      	str	r3, [r2, #0]
		break;
 8002446:	e022      	b.n	800248e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <Enable_NVIC+0xc4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a12      	ldr	r2, [pc, #72]	; (8002498 <Enable_NVIC+0xc4>)
 800244e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002452:	6013      	str	r3, [r2, #0]
		break;
 8002454:	e01b      	b.n	800248e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <Enable_NVIC+0xc4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <Enable_NVIC+0xc4>)
 800245c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002460:	6013      	str	r3, [r2, #0]
		break;
 8002462:	e014      	b.n	800248e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <Enable_NVIC+0xc4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <Enable_NVIC+0xc4>)
 800246a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246e:	6013      	str	r3, [r2, #0]
		break;
 8002470:	e00d      	b.n	800248e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <Enable_NVIC+0xc4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <Enable_NVIC+0xc4>)
 8002478:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800247c:	6013      	str	r3, [r2, #0]
		break;
 800247e:	e006      	b.n	800248e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <Enable_NVIC+0xc8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a05      	ldr	r2, [pc, #20]	; (800249c <Enable_NVIC+0xc8>)
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	6013      	str	r3, [r2, #0]
		break;
 800248c:	bf00      	nop
	}


}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000e104 	.word	0xe000e104

080024a0 <EXTI>:
 * @param [in]      -function_addres : app ISR function
 * @retval          - none
 * Note             -
 *================================================================ */

void EXTI(GPIO_typeDef* PORTx ,uint16_t pin,uint16_t triggercase,void (*function_addres)(interrupt_data* isr_data,uint8_t interupt_num)){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	460b      	mov	r3, r1
 80024ac:	817b      	strh	r3, [r7, #10]
 80024ae:	4613      	mov	r3, r2
 80024b0:	813b      	strh	r3, [r7, #8]

	pinmode(PORTx,pin,GPIO_MODE_INTPUT_AF);//set pin to _INTPUT_AF
 80024b2:	897b      	ldrh	r3, [r7, #10]
 80024b4:	2204      	movs	r2, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7fe f9a9 	bl	8000810 <pinmode>
	AFIO_Clock_Enable();
 80024be:	4b96      	ldr	r3, [pc, #600]	; (8002718 <EXTI+0x278>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	4a95      	ldr	r2, [pc, #596]	; (8002718 <EXTI+0x278>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6193      	str	r3, [r2, #24]
	//	0000: PA[x] pin
	//	0001: PB[x] pin
	//	0010: PC[x] pin
	//	0011: PD[x] pin

	switch(pin){
 80024ca:	897b      	ldrh	r3, [r7, #10]
 80024cc:	2b0f      	cmp	r3, #15
 80024ce:	f200 8392 	bhi.w	8002bf6 <EXTI+0x756>
 80024d2:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <EXTI+0x38>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	08002519 	.word	0x08002519
 80024dc:	0800257f 	.word	0x0800257f
 80024e0:	080025e5 	.word	0x080025e5
 80024e4:	0800264b 	.word	0x0800264b
 80024e8:	080026b1 	.word	0x080026b1
 80024ec:	08002731 	.word	0x08002731
 80024f0:	08002797 	.word	0x08002797
 80024f4:	080027fd 	.word	0x080027fd
 80024f8:	08002863 	.word	0x08002863
 80024fc:	080028c9 	.word	0x080028c9
 8002500:	0800292f 	.word	0x0800292f
 8002504:	080029a9 	.word	0x080029a9
 8002508:	08002a0f 	.word	0x08002a0f
 800250c:	08002a75 	.word	0x08002a75
 8002510:	08002adb 	.word	0x08002adb
 8002514:	08002b3f 	.word	0x08002b3f
	case pin0:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<0);
 8002518:	4b80      	ldr	r3, [pc, #512]	; (800271c <EXTI+0x27c>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a7f      	ldr	r2, [pc, #508]	; (800271c <EXTI+0x27c>)
 800251e:	f023 030f 	bic.w	r3, r3, #15
 8002522:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<0);}
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a7e      	ldr	r2, [pc, #504]	; (8002720 <EXTI+0x280>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d106      	bne.n	800253a <EXTI+0x9a>
 800252c:	4b7b      	ldr	r3, [pc, #492]	; (800271c <EXTI+0x27c>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	4a7a      	ldr	r2, [pc, #488]	; (800271c <EXTI+0x27c>)
 8002532:	f023 030f 	bic.w	r3, r3, #15
 8002536:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}

		break;
 8002538:	e333      	b.n	8002ba2 <EXTI+0x702>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a79      	ldr	r2, [pc, #484]	; (8002724 <EXTI+0x284>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d106      	bne.n	8002550 <EXTI+0xb0>
 8002542:	4b76      	ldr	r3, [pc, #472]	; (800271c <EXTI+0x27c>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4a75      	ldr	r2, [pc, #468]	; (800271c <EXTI+0x27c>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6093      	str	r3, [r2, #8]
		break;
 800254e:	e328      	b.n	8002ba2 <EXTI+0x702>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a75      	ldr	r2, [pc, #468]	; (8002728 <EXTI+0x288>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d106      	bne.n	8002566 <EXTI+0xc6>
 8002558:	4b70      	ldr	r3, [pc, #448]	; (800271c <EXTI+0x27c>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a6f      	ldr	r2, [pc, #444]	; (800271c <EXTI+0x27c>)
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	6093      	str	r3, [r2, #8]
		break;
 8002564:	e31d      	b.n	8002ba2 <EXTI+0x702>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a70      	ldr	r2, [pc, #448]	; (800272c <EXTI+0x28c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	f040 8319 	bne.w	8002ba2 <EXTI+0x702>
 8002570:	4b6a      	ldr	r3, [pc, #424]	; (800271c <EXTI+0x27c>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a69      	ldr	r2, [pc, #420]	; (800271c <EXTI+0x27c>)
 8002576:	f043 0303 	orr.w	r3, r3, #3
 800257a:	6093      	str	r3, [r2, #8]
		break;
 800257c:	e311      	b.n	8002ba2 <EXTI+0x702>
	case pin1:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<4);
 800257e:	4b67      	ldr	r3, [pc, #412]	; (800271c <EXTI+0x27c>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	4a66      	ldr	r2, [pc, #408]	; (800271c <EXTI+0x27c>)
 8002584:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002588:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<4);}
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a64      	ldr	r2, [pc, #400]	; (8002720 <EXTI+0x280>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d106      	bne.n	80025a0 <EXTI+0x100>
 8002592:	4b62      	ldr	r3, [pc, #392]	; (800271c <EXTI+0x27c>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4a61      	ldr	r2, [pc, #388]	; (800271c <EXTI+0x27c>)
 8002598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259c:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}

		break;
 800259e:	e302      	b.n	8002ba6 <EXTI+0x706>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a60      	ldr	r2, [pc, #384]	; (8002724 <EXTI+0x284>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d106      	bne.n	80025b6 <EXTI+0x116>
 80025a8:	4b5c      	ldr	r3, [pc, #368]	; (800271c <EXTI+0x27c>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4a5b      	ldr	r2, [pc, #364]	; (800271c <EXTI+0x27c>)
 80025ae:	f043 0310 	orr.w	r3, r3, #16
 80025b2:	6093      	str	r3, [r2, #8]
		break;
 80025b4:	e2f7      	b.n	8002ba6 <EXTI+0x706>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4a5b      	ldr	r2, [pc, #364]	; (8002728 <EXTI+0x288>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d106      	bne.n	80025cc <EXTI+0x12c>
 80025be:	4b57      	ldr	r3, [pc, #348]	; (800271c <EXTI+0x27c>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4a56      	ldr	r2, [pc, #344]	; (800271c <EXTI+0x27c>)
 80025c4:	f043 0320 	orr.w	r3, r3, #32
 80025c8:	6093      	str	r3, [r2, #8]
		break;
 80025ca:	e2ec      	b.n	8002ba6 <EXTI+0x706>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a57      	ldr	r2, [pc, #348]	; (800272c <EXTI+0x28c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	f040 82e8 	bne.w	8002ba6 <EXTI+0x706>
 80025d6:	4b51      	ldr	r3, [pc, #324]	; (800271c <EXTI+0x27c>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a50      	ldr	r2, [pc, #320]	; (800271c <EXTI+0x27c>)
 80025dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80025e0:	6093      	str	r3, [r2, #8]
		break;
 80025e2:	e2e0      	b.n	8002ba6 <EXTI+0x706>
	case pin2:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<8);
 80025e4:	4b4d      	ldr	r3, [pc, #308]	; (800271c <EXTI+0x27c>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4a4c      	ldr	r2, [pc, #304]	; (800271c <EXTI+0x27c>)
 80025ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025ee:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<8);}
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a4b      	ldr	r2, [pc, #300]	; (8002720 <EXTI+0x280>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d106      	bne.n	8002606 <EXTI+0x166>
 80025f8:	4b48      	ldr	r3, [pc, #288]	; (800271c <EXTI+0x27c>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a47      	ldr	r2, [pc, #284]	; (800271c <EXTI+0x27c>)
 80025fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002602:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}

		break;
 8002604:	e2d1      	b.n	8002baa <EXTI+0x70a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4a46      	ldr	r2, [pc, #280]	; (8002724 <EXTI+0x284>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d106      	bne.n	800261c <EXTI+0x17c>
 800260e:	4b43      	ldr	r3, [pc, #268]	; (800271c <EXTI+0x27c>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4a42      	ldr	r2, [pc, #264]	; (800271c <EXTI+0x27c>)
 8002614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002618:	6093      	str	r3, [r2, #8]
		break;
 800261a:	e2c6      	b.n	8002baa <EXTI+0x70a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a42      	ldr	r2, [pc, #264]	; (8002728 <EXTI+0x288>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d106      	bne.n	8002632 <EXTI+0x192>
 8002624:	4b3d      	ldr	r3, [pc, #244]	; (800271c <EXTI+0x27c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a3c      	ldr	r2, [pc, #240]	; (800271c <EXTI+0x27c>)
 800262a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800262e:	6093      	str	r3, [r2, #8]
		break;
 8002630:	e2bb      	b.n	8002baa <EXTI+0x70a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4a3d      	ldr	r2, [pc, #244]	; (800272c <EXTI+0x28c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	f040 82b7 	bne.w	8002baa <EXTI+0x70a>
 800263c:	4b37      	ldr	r3, [pc, #220]	; (800271c <EXTI+0x27c>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a36      	ldr	r2, [pc, #216]	; (800271c <EXTI+0x27c>)
 8002642:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002646:	6093      	str	r3, [r2, #8]
		break;
 8002648:	e2af      	b.n	8002baa <EXTI+0x70a>
	case pin3:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<12);
 800264a:	4b34      	ldr	r3, [pc, #208]	; (800271c <EXTI+0x27c>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4a33      	ldr	r2, [pc, #204]	; (800271c <EXTI+0x27c>)
 8002650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002654:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<12);}
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4a31      	ldr	r2, [pc, #196]	; (8002720 <EXTI+0x280>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d106      	bne.n	800266c <EXTI+0x1cc>
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <EXTI+0x27c>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4a2e      	ldr	r2, [pc, #184]	; (800271c <EXTI+0x27c>)
 8002664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002668:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}

		break;
 800266a:	e2a0      	b.n	8002bae <EXTI+0x70e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a2d      	ldr	r2, [pc, #180]	; (8002724 <EXTI+0x284>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d106      	bne.n	8002682 <EXTI+0x1e2>
 8002674:	4b29      	ldr	r3, [pc, #164]	; (800271c <EXTI+0x27c>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a28      	ldr	r2, [pc, #160]	; (800271c <EXTI+0x27c>)
 800267a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800267e:	6093      	str	r3, [r2, #8]
		break;
 8002680:	e295      	b.n	8002bae <EXTI+0x70e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a28      	ldr	r2, [pc, #160]	; (8002728 <EXTI+0x288>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d106      	bne.n	8002698 <EXTI+0x1f8>
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <EXTI+0x27c>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4a23      	ldr	r2, [pc, #140]	; (800271c <EXTI+0x27c>)
 8002690:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002694:	6093      	str	r3, [r2, #8]
		break;
 8002696:	e28a      	b.n	8002bae <EXTI+0x70e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4a24      	ldr	r2, [pc, #144]	; (800272c <EXTI+0x28c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	f040 8286 	bne.w	8002bae <EXTI+0x70e>
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <EXTI+0x27c>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <EXTI+0x27c>)
 80026a8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80026ac:	6093      	str	r3, [r2, #8]
		break;
 80026ae:	e27e      	b.n	8002bae <EXTI+0x70e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin4:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<0);
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <EXTI+0x27c>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a19      	ldr	r2, [pc, #100]	; (800271c <EXTI+0x27c>)
 80026b6:	f023 030f 	bic.w	r3, r3, #15
 80026ba:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<0);}
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4a18      	ldr	r2, [pc, #96]	; (8002720 <EXTI+0x280>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d106      	bne.n	80026d2 <EXTI+0x232>
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <EXTI+0x27c>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <EXTI+0x27c>)
 80026ca:	f023 030f 	bic.w	r3, r3, #15
 80026ce:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}

		break;
 80026d0:	e26f      	b.n	8002bb2 <EXTI+0x712>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4a13      	ldr	r2, [pc, #76]	; (8002724 <EXTI+0x284>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d106      	bne.n	80026e8 <EXTI+0x248>
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <EXTI+0x27c>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	4a0f      	ldr	r2, [pc, #60]	; (800271c <EXTI+0x27c>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	60d3      	str	r3, [r2, #12]
		break;
 80026e6:	e264      	b.n	8002bb2 <EXTI+0x712>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <EXTI+0x288>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d106      	bne.n	80026fe <EXTI+0x25e>
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <EXTI+0x27c>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4a09      	ldr	r2, [pc, #36]	; (800271c <EXTI+0x27c>)
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	60d3      	str	r3, [r2, #12]
		break;
 80026fc:	e259      	b.n	8002bb2 <EXTI+0x712>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <EXTI+0x28c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	f040 8255 	bne.w	8002bb2 <EXTI+0x712>
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <EXTI+0x27c>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a03      	ldr	r2, [pc, #12]	; (800271c <EXTI+0x27c>)
 800270e:	f043 0303 	orr.w	r3, r3, #3
 8002712:	60d3      	str	r3, [r2, #12]
		break;
 8002714:	e24d      	b.n	8002bb2 <EXTI+0x712>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	40010000 	.word	0x40010000
 8002720:	40010800 	.word	0x40010800
 8002724:	40010c00 	.word	0x40010c00
 8002728:	40011000 	.word	0x40011000
 800272c:	40011400 	.word	0x40011400
	case pin5:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<4);
 8002730:	4b92      	ldr	r3, [pc, #584]	; (800297c <EXTI+0x4dc>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a91      	ldr	r2, [pc, #580]	; (800297c <EXTI+0x4dc>)
 8002736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800273a:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<4);}
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a90      	ldr	r2, [pc, #576]	; (8002980 <EXTI+0x4e0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d106      	bne.n	8002752 <EXTI+0x2b2>
 8002744:	4b8d      	ldr	r3, [pc, #564]	; (800297c <EXTI+0x4dc>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4a8c      	ldr	r2, [pc, #560]	; (800297c <EXTI+0x4dc>)
 800274a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800274e:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}

		break;
 8002750:	e231      	b.n	8002bb6 <EXTI+0x716>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a8b      	ldr	r2, [pc, #556]	; (8002984 <EXTI+0x4e4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d106      	bne.n	8002768 <EXTI+0x2c8>
 800275a:	4b88      	ldr	r3, [pc, #544]	; (800297c <EXTI+0x4dc>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4a87      	ldr	r2, [pc, #540]	; (800297c <EXTI+0x4dc>)
 8002760:	f043 0310 	orr.w	r3, r3, #16
 8002764:	60d3      	str	r3, [r2, #12]
		break;
 8002766:	e226      	b.n	8002bb6 <EXTI+0x716>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a87      	ldr	r2, [pc, #540]	; (8002988 <EXTI+0x4e8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d106      	bne.n	800277e <EXTI+0x2de>
 8002770:	4b82      	ldr	r3, [pc, #520]	; (800297c <EXTI+0x4dc>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a81      	ldr	r2, [pc, #516]	; (800297c <EXTI+0x4dc>)
 8002776:	f043 0320 	orr.w	r3, r3, #32
 800277a:	60d3      	str	r3, [r2, #12]
		break;
 800277c:	e21b      	b.n	8002bb6 <EXTI+0x716>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a82      	ldr	r2, [pc, #520]	; (800298c <EXTI+0x4ec>)
 8002782:	4293      	cmp	r3, r2
 8002784:	f040 8217 	bne.w	8002bb6 <EXTI+0x716>
 8002788:	4b7c      	ldr	r3, [pc, #496]	; (800297c <EXTI+0x4dc>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a7b      	ldr	r2, [pc, #492]	; (800297c <EXTI+0x4dc>)
 800278e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002792:	60d3      	str	r3, [r2, #12]
		break;
 8002794:	e20f      	b.n	8002bb6 <EXTI+0x716>
	case pin6:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<8);
 8002796:	4b79      	ldr	r3, [pc, #484]	; (800297c <EXTI+0x4dc>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4a78      	ldr	r2, [pc, #480]	; (800297c <EXTI+0x4dc>)
 800279c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027a0:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<8);}
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a76      	ldr	r2, [pc, #472]	; (8002980 <EXTI+0x4e0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d106      	bne.n	80027b8 <EXTI+0x318>
 80027aa:	4b74      	ldr	r3, [pc, #464]	; (800297c <EXTI+0x4dc>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4a73      	ldr	r2, [pc, #460]	; (800297c <EXTI+0x4dc>)
 80027b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027b4:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}

		break;
 80027b6:	e200      	b.n	8002bba <EXTI+0x71a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a72      	ldr	r2, [pc, #456]	; (8002984 <EXTI+0x4e4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d106      	bne.n	80027ce <EXTI+0x32e>
 80027c0:	4b6e      	ldr	r3, [pc, #440]	; (800297c <EXTI+0x4dc>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a6d      	ldr	r2, [pc, #436]	; (800297c <EXTI+0x4dc>)
 80027c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ca:	60d3      	str	r3, [r2, #12]
		break;
 80027cc:	e1f5      	b.n	8002bba <EXTI+0x71a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4a6d      	ldr	r2, [pc, #436]	; (8002988 <EXTI+0x4e8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d106      	bne.n	80027e4 <EXTI+0x344>
 80027d6:	4b69      	ldr	r3, [pc, #420]	; (800297c <EXTI+0x4dc>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4a68      	ldr	r2, [pc, #416]	; (800297c <EXTI+0x4dc>)
 80027dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e0:	60d3      	str	r3, [r2, #12]
		break;
 80027e2:	e1ea      	b.n	8002bba <EXTI+0x71a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a69      	ldr	r2, [pc, #420]	; (800298c <EXTI+0x4ec>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	f040 81e6 	bne.w	8002bba <EXTI+0x71a>
 80027ee:	4b63      	ldr	r3, [pc, #396]	; (800297c <EXTI+0x4dc>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	4a62      	ldr	r2, [pc, #392]	; (800297c <EXTI+0x4dc>)
 80027f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80027f8:	60d3      	str	r3, [r2, #12]
		break;
 80027fa:	e1de      	b.n	8002bba <EXTI+0x71a>
	case pin7:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<12);
 80027fc:	4b5f      	ldr	r3, [pc, #380]	; (800297c <EXTI+0x4dc>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a5e      	ldr	r2, [pc, #376]	; (800297c <EXTI+0x4dc>)
 8002802:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002806:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<12);}
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a5d      	ldr	r2, [pc, #372]	; (8002980 <EXTI+0x4e0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d106      	bne.n	800281e <EXTI+0x37e>
 8002810:	4b5a      	ldr	r3, [pc, #360]	; (800297c <EXTI+0x4dc>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a59      	ldr	r2, [pc, #356]	; (800297c <EXTI+0x4dc>)
 8002816:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800281a:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}

		break;
 800281c:	e1cf      	b.n	8002bbe <EXTI+0x71e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <EXTI+0x4e4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d106      	bne.n	8002834 <EXTI+0x394>
 8002826:	4b55      	ldr	r3, [pc, #340]	; (800297c <EXTI+0x4dc>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	4a54      	ldr	r2, [pc, #336]	; (800297c <EXTI+0x4dc>)
 800282c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002830:	60d3      	str	r3, [r2, #12]
		break;
 8002832:	e1c4      	b.n	8002bbe <EXTI+0x71e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a54      	ldr	r2, [pc, #336]	; (8002988 <EXTI+0x4e8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d106      	bne.n	800284a <EXTI+0x3aa>
 800283c:	4b4f      	ldr	r3, [pc, #316]	; (800297c <EXTI+0x4dc>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a4e      	ldr	r2, [pc, #312]	; (800297c <EXTI+0x4dc>)
 8002842:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002846:	60d3      	str	r3, [r2, #12]
		break;
 8002848:	e1b9      	b.n	8002bbe <EXTI+0x71e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a4f      	ldr	r2, [pc, #316]	; (800298c <EXTI+0x4ec>)
 800284e:	4293      	cmp	r3, r2
 8002850:	f040 81b5 	bne.w	8002bbe <EXTI+0x71e>
 8002854:	4b49      	ldr	r3, [pc, #292]	; (800297c <EXTI+0x4dc>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a48      	ldr	r2, [pc, #288]	; (800297c <EXTI+0x4dc>)
 800285a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800285e:	60d3      	str	r3, [r2, #12]
		break;
 8002860:	e1ad      	b.n	8002bbe <EXTI+0x71e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin8:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<0);
 8002862:	4b46      	ldr	r3, [pc, #280]	; (800297c <EXTI+0x4dc>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	4a45      	ldr	r2, [pc, #276]	; (800297c <EXTI+0x4dc>)
 8002868:	f023 030f 	bic.w	r3, r3, #15
 800286c:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<0);}
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4a43      	ldr	r2, [pc, #268]	; (8002980 <EXTI+0x4e0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d106      	bne.n	8002884 <EXTI+0x3e4>
 8002876:	4b41      	ldr	r3, [pc, #260]	; (800297c <EXTI+0x4dc>)
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	4a40      	ldr	r2, [pc, #256]	; (800297c <EXTI+0x4dc>)
 800287c:	f023 030f 	bic.w	r3, r3, #15
 8002880:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}

		break;
 8002882:	e19e      	b.n	8002bc2 <EXTI+0x722>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4a3f      	ldr	r2, [pc, #252]	; (8002984 <EXTI+0x4e4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d106      	bne.n	800289a <EXTI+0x3fa>
 800288c:	4b3b      	ldr	r3, [pc, #236]	; (800297c <EXTI+0x4dc>)
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	4a3a      	ldr	r2, [pc, #232]	; (800297c <EXTI+0x4dc>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6113      	str	r3, [r2, #16]
		break;
 8002898:	e193      	b.n	8002bc2 <EXTI+0x722>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4a3a      	ldr	r2, [pc, #232]	; (8002988 <EXTI+0x4e8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d106      	bne.n	80028b0 <EXTI+0x410>
 80028a2:	4b36      	ldr	r3, [pc, #216]	; (800297c <EXTI+0x4dc>)
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	4a35      	ldr	r2, [pc, #212]	; (800297c <EXTI+0x4dc>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	6113      	str	r3, [r2, #16]
		break;
 80028ae:	e188      	b.n	8002bc2 <EXTI+0x722>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a36      	ldr	r2, [pc, #216]	; (800298c <EXTI+0x4ec>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	f040 8184 	bne.w	8002bc2 <EXTI+0x722>
 80028ba:	4b30      	ldr	r3, [pc, #192]	; (800297c <EXTI+0x4dc>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	4a2f      	ldr	r2, [pc, #188]	; (800297c <EXTI+0x4dc>)
 80028c0:	f043 0303 	orr.w	r3, r3, #3
 80028c4:	6113      	str	r3, [r2, #16]
		break;
 80028c6:	e17c      	b.n	8002bc2 <EXTI+0x722>
	case pin9:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<4);
 80028c8:	4b2c      	ldr	r3, [pc, #176]	; (800297c <EXTI+0x4dc>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	4a2b      	ldr	r2, [pc, #172]	; (800297c <EXTI+0x4dc>)
 80028ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028d2:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<4);}
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a2a      	ldr	r2, [pc, #168]	; (8002980 <EXTI+0x4e0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d106      	bne.n	80028ea <EXTI+0x44a>
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <EXTI+0x4dc>)
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	4a26      	ldr	r2, [pc, #152]	; (800297c <EXTI+0x4dc>)
 80028e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e6:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}

		break;
 80028e8:	e16d      	b.n	8002bc6 <EXTI+0x726>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a25      	ldr	r2, [pc, #148]	; (8002984 <EXTI+0x4e4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d106      	bne.n	8002900 <EXTI+0x460>
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <EXTI+0x4dc>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <EXTI+0x4dc>)
 80028f8:	f043 0310 	orr.w	r3, r3, #16
 80028fc:	6113      	str	r3, [r2, #16]
		break;
 80028fe:	e162      	b.n	8002bc6 <EXTI+0x726>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a21      	ldr	r2, [pc, #132]	; (8002988 <EXTI+0x4e8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d106      	bne.n	8002916 <EXTI+0x476>
 8002908:	4b1c      	ldr	r3, [pc, #112]	; (800297c <EXTI+0x4dc>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	4a1b      	ldr	r2, [pc, #108]	; (800297c <EXTI+0x4dc>)
 800290e:	f043 0320 	orr.w	r3, r3, #32
 8002912:	6113      	str	r3, [r2, #16]
		break;
 8002914:	e157      	b.n	8002bc6 <EXTI+0x726>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a1c      	ldr	r2, [pc, #112]	; (800298c <EXTI+0x4ec>)
 800291a:	4293      	cmp	r3, r2
 800291c:	f040 8153 	bne.w	8002bc6 <EXTI+0x726>
 8002920:	4b16      	ldr	r3, [pc, #88]	; (800297c <EXTI+0x4dc>)
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	4a15      	ldr	r2, [pc, #84]	; (800297c <EXTI+0x4dc>)
 8002926:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800292a:	6113      	str	r3, [r2, #16]
		break;
 800292c:	e14b      	b.n	8002bc6 <EXTI+0x726>
	case pin10:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<8);
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <EXTI+0x4dc>)
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <EXTI+0x4dc>)
 8002934:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002938:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<8);}
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a10      	ldr	r2, [pc, #64]	; (8002980 <EXTI+0x4e0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d106      	bne.n	8002950 <EXTI+0x4b0>
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <EXTI+0x4dc>)
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	4a0d      	ldr	r2, [pc, #52]	; (800297c <EXTI+0x4dc>)
 8002948:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800294c:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}

		break;
 800294e:	e13c      	b.n	8002bca <EXTI+0x72a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a0c      	ldr	r2, [pc, #48]	; (8002984 <EXTI+0x4e4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d106      	bne.n	8002966 <EXTI+0x4c6>
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <EXTI+0x4dc>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <EXTI+0x4dc>)
 800295e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002962:	6113      	str	r3, [r2, #16]
		break;
 8002964:	e131      	b.n	8002bca <EXTI+0x72a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4a07      	ldr	r2, [pc, #28]	; (8002988 <EXTI+0x4e8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d110      	bne.n	8002990 <EXTI+0x4f0>
 800296e:	4b03      	ldr	r3, [pc, #12]	; (800297c <EXTI+0x4dc>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	4a02      	ldr	r2, [pc, #8]	; (800297c <EXTI+0x4dc>)
 8002974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002978:	6113      	str	r3, [r2, #16]
		break;
 800297a:	e126      	b.n	8002bca <EXTI+0x72a>
 800297c:	40010000 	.word	0x40010000
 8002980:	40010800 	.word	0x40010800
 8002984:	40010c00 	.word	0x40010c00
 8002988:	40011000 	.word	0x40011000
 800298c:	40011400 	.word	0x40011400
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a93      	ldr	r2, [pc, #588]	; (8002be0 <EXTI+0x740>)
 8002994:	4293      	cmp	r3, r2
 8002996:	f040 8118 	bne.w	8002bca <EXTI+0x72a>
 800299a:	4b92      	ldr	r3, [pc, #584]	; (8002be4 <EXTI+0x744>)
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	4a91      	ldr	r2, [pc, #580]	; (8002be4 <EXTI+0x744>)
 80029a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029a4:	6113      	str	r3, [r2, #16]
		break;
 80029a6:	e110      	b.n	8002bca <EXTI+0x72a>
	case pin11:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<12);
 80029a8:	4b8e      	ldr	r3, [pc, #568]	; (8002be4 <EXTI+0x744>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	4a8d      	ldr	r2, [pc, #564]	; (8002be4 <EXTI+0x744>)
 80029ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029b2:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<12);}
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a8c      	ldr	r2, [pc, #560]	; (8002be8 <EXTI+0x748>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d106      	bne.n	80029ca <EXTI+0x52a>
 80029bc:	4b89      	ldr	r3, [pc, #548]	; (8002be4 <EXTI+0x744>)
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	4a88      	ldr	r2, [pc, #544]	; (8002be4 <EXTI+0x744>)
 80029c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029c6:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}

		break;
 80029c8:	e101      	b.n	8002bce <EXTI+0x72e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4a87      	ldr	r2, [pc, #540]	; (8002bec <EXTI+0x74c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d106      	bne.n	80029e0 <EXTI+0x540>
 80029d2:	4b84      	ldr	r3, [pc, #528]	; (8002be4 <EXTI+0x744>)
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	4a83      	ldr	r2, [pc, #524]	; (8002be4 <EXTI+0x744>)
 80029d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029dc:	6113      	str	r3, [r2, #16]
		break;
 80029de:	e0f6      	b.n	8002bce <EXTI+0x72e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a83      	ldr	r2, [pc, #524]	; (8002bf0 <EXTI+0x750>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d106      	bne.n	80029f6 <EXTI+0x556>
 80029e8:	4b7e      	ldr	r3, [pc, #504]	; (8002be4 <EXTI+0x744>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	4a7d      	ldr	r2, [pc, #500]	; (8002be4 <EXTI+0x744>)
 80029ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029f2:	6113      	str	r3, [r2, #16]
		break;
 80029f4:	e0eb      	b.n	8002bce <EXTI+0x72e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4a79      	ldr	r2, [pc, #484]	; (8002be0 <EXTI+0x740>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	f040 80e7 	bne.w	8002bce <EXTI+0x72e>
 8002a00:	4b78      	ldr	r3, [pc, #480]	; (8002be4 <EXTI+0x744>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	4a77      	ldr	r2, [pc, #476]	; (8002be4 <EXTI+0x744>)
 8002a06:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002a0a:	6113      	str	r3, [r2, #16]
		break;
 8002a0c:	e0df      	b.n	8002bce <EXTI+0x72e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin12:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<0);
 8002a0e:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <EXTI+0x744>)
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4a74      	ldr	r2, [pc, #464]	; (8002be4 <EXTI+0x744>)
 8002a14:	f023 030f 	bic.w	r3, r3, #15
 8002a18:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<0);}
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4a72      	ldr	r2, [pc, #456]	; (8002be8 <EXTI+0x748>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d106      	bne.n	8002a30 <EXTI+0x590>
 8002a22:	4b70      	ldr	r3, [pc, #448]	; (8002be4 <EXTI+0x744>)
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	4a6f      	ldr	r2, [pc, #444]	; (8002be4 <EXTI+0x744>)
 8002a28:	f023 030f 	bic.w	r3, r3, #15
 8002a2c:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}

		break;
 8002a2e:	e0d0      	b.n	8002bd2 <EXTI+0x732>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a6e      	ldr	r2, [pc, #440]	; (8002bec <EXTI+0x74c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d106      	bne.n	8002a46 <EXTI+0x5a6>
 8002a38:	4b6a      	ldr	r3, [pc, #424]	; (8002be4 <EXTI+0x744>)
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	4a69      	ldr	r2, [pc, #420]	; (8002be4 <EXTI+0x744>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6153      	str	r3, [r2, #20]
		break;
 8002a44:	e0c5      	b.n	8002bd2 <EXTI+0x732>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a69      	ldr	r2, [pc, #420]	; (8002bf0 <EXTI+0x750>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d106      	bne.n	8002a5c <EXTI+0x5bc>
 8002a4e:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <EXTI+0x744>)
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	4a64      	ldr	r2, [pc, #400]	; (8002be4 <EXTI+0x744>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	6153      	str	r3, [r2, #20]
		break;
 8002a5a:	e0ba      	b.n	8002bd2 <EXTI+0x732>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a60      	ldr	r2, [pc, #384]	; (8002be0 <EXTI+0x740>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	f040 80b6 	bne.w	8002bd2 <EXTI+0x732>
 8002a66:	4b5f      	ldr	r3, [pc, #380]	; (8002be4 <EXTI+0x744>)
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4a5e      	ldr	r2, [pc, #376]	; (8002be4 <EXTI+0x744>)
 8002a6c:	f043 0303 	orr.w	r3, r3, #3
 8002a70:	6153      	str	r3, [r2, #20]
		break;
 8002a72:	e0ae      	b.n	8002bd2 <EXTI+0x732>
	case pin13:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<4);
 8002a74:	4b5b      	ldr	r3, [pc, #364]	; (8002be4 <EXTI+0x744>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	4a5a      	ldr	r2, [pc, #360]	; (8002be4 <EXTI+0x744>)
 8002a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a7e:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<4);}
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4a59      	ldr	r2, [pc, #356]	; (8002be8 <EXTI+0x748>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d106      	bne.n	8002a96 <EXTI+0x5f6>
 8002a88:	4b56      	ldr	r3, [pc, #344]	; (8002be4 <EXTI+0x744>)
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	4a55      	ldr	r2, [pc, #340]	; (8002be4 <EXTI+0x744>)
 8002a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a92:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}

		break;
 8002a94:	e09f      	b.n	8002bd6 <EXTI+0x736>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4a54      	ldr	r2, [pc, #336]	; (8002bec <EXTI+0x74c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d106      	bne.n	8002aac <EXTI+0x60c>
 8002a9e:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <EXTI+0x744>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	4a50      	ldr	r2, [pc, #320]	; (8002be4 <EXTI+0x744>)
 8002aa4:	f043 0310 	orr.w	r3, r3, #16
 8002aa8:	6153      	str	r3, [r2, #20]
		break;
 8002aaa:	e094      	b.n	8002bd6 <EXTI+0x736>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a50      	ldr	r2, [pc, #320]	; (8002bf0 <EXTI+0x750>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d106      	bne.n	8002ac2 <EXTI+0x622>
 8002ab4:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <EXTI+0x744>)
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	4a4a      	ldr	r2, [pc, #296]	; (8002be4 <EXTI+0x744>)
 8002aba:	f043 0320 	orr.w	r3, r3, #32
 8002abe:	6153      	str	r3, [r2, #20]
		break;
 8002ac0:	e089      	b.n	8002bd6 <EXTI+0x736>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4a46      	ldr	r2, [pc, #280]	; (8002be0 <EXTI+0x740>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	f040 8085 	bne.w	8002bd6 <EXTI+0x736>
 8002acc:	4b45      	ldr	r3, [pc, #276]	; (8002be4 <EXTI+0x744>)
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	4a44      	ldr	r2, [pc, #272]	; (8002be4 <EXTI+0x744>)
 8002ad2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002ad6:	6153      	str	r3, [r2, #20]
		break;
 8002ad8:	e07d      	b.n	8002bd6 <EXTI+0x736>
	case pin14:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<8);
 8002ada:	4b42      	ldr	r3, [pc, #264]	; (8002be4 <EXTI+0x744>)
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	4a41      	ldr	r2, [pc, #260]	; (8002be4 <EXTI+0x744>)
 8002ae0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ae4:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<8);}
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a3f      	ldr	r2, [pc, #252]	; (8002be8 <EXTI+0x748>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d106      	bne.n	8002afc <EXTI+0x65c>
 8002aee:	4b3d      	ldr	r3, [pc, #244]	; (8002be4 <EXTI+0x744>)
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	4a3c      	ldr	r2, [pc, #240]	; (8002be4 <EXTI+0x744>)
 8002af4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002af8:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}

		break;
 8002afa:	e06e      	b.n	8002bda <EXTI+0x73a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a3b      	ldr	r2, [pc, #236]	; (8002bec <EXTI+0x74c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d106      	bne.n	8002b12 <EXTI+0x672>
 8002b04:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <EXTI+0x744>)
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	4a36      	ldr	r2, [pc, #216]	; (8002be4 <EXTI+0x744>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0e:	6153      	str	r3, [r2, #20]
		break;
 8002b10:	e063      	b.n	8002bda <EXTI+0x73a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a36      	ldr	r2, [pc, #216]	; (8002bf0 <EXTI+0x750>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d106      	bne.n	8002b28 <EXTI+0x688>
 8002b1a:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <EXTI+0x744>)
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	4a31      	ldr	r2, [pc, #196]	; (8002be4 <EXTI+0x744>)
 8002b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b24:	6153      	str	r3, [r2, #20]
		break;
 8002b26:	e058      	b.n	8002bda <EXTI+0x73a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a2d      	ldr	r2, [pc, #180]	; (8002be0 <EXTI+0x740>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d154      	bne.n	8002bda <EXTI+0x73a>
 8002b30:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <EXTI+0x744>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	4a2b      	ldr	r2, [pc, #172]	; (8002be4 <EXTI+0x744>)
 8002b36:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b3a:	6153      	str	r3, [r2, #20]
		break;
 8002b3c:	e04d      	b.n	8002bda <EXTI+0x73a>
	case pin15:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<12);
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <EXTI+0x744>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	4a28      	ldr	r2, [pc, #160]	; (8002be4 <EXTI+0x744>)
 8002b44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b48:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<12);}
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <EXTI+0x748>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d106      	bne.n	8002b60 <EXTI+0x6c0>
 8002b52:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <EXTI+0x744>)
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	4a23      	ldr	r2, [pc, #140]	; (8002be4 <EXTI+0x744>)
 8002b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b5c:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}

		break;
 8002b5e:	e049      	b.n	8002bf4 <EXTI+0x754>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a22      	ldr	r2, [pc, #136]	; (8002bec <EXTI+0x74c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d106      	bne.n	8002b76 <EXTI+0x6d6>
 8002b68:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <EXTI+0x744>)
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <EXTI+0x744>)
 8002b6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b72:	6153      	str	r3, [r2, #20]
		break;
 8002b74:	e03e      	b.n	8002bf4 <EXTI+0x754>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <EXTI+0x750>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d106      	bne.n	8002b8c <EXTI+0x6ec>
 8002b7e:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <EXTI+0x744>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <EXTI+0x744>)
 8002b84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b88:	6153      	str	r3, [r2, #20]
		break;
 8002b8a:	e033      	b.n	8002bf4 <EXTI+0x754>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4a14      	ldr	r2, [pc, #80]	; (8002be0 <EXTI+0x740>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d12f      	bne.n	8002bf4 <EXTI+0x754>
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <EXTI+0x744>)
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	4a12      	ldr	r2, [pc, #72]	; (8002be4 <EXTI+0x744>)
 8002b9a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002b9e:	6153      	str	r3, [r2, #20]
		break;
 8002ba0:	e028      	b.n	8002bf4 <EXTI+0x754>
		break;
 8002ba2:	bf00      	nop
 8002ba4:	e027      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002ba6:	bf00      	nop
 8002ba8:	e025      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002baa:	bf00      	nop
 8002bac:	e023      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002bae:	bf00      	nop
 8002bb0:	e021      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002bb2:	bf00      	nop
 8002bb4:	e01f      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002bb6:	bf00      	nop
 8002bb8:	e01d      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002bba:	bf00      	nop
 8002bbc:	e01b      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002bbe:	bf00      	nop
 8002bc0:	e019      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002bc2:	bf00      	nop
 8002bc4:	e017      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002bc6:	bf00      	nop
 8002bc8:	e015      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002bca:	bf00      	nop
 8002bcc:	e013      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002bce:	bf00      	nop
 8002bd0:	e011      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002bd2:	bf00      	nop
 8002bd4:	e00f      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002bd6:	bf00      	nop
 8002bd8:	e00d      	b.n	8002bf6 <EXTI+0x756>
		break;
 8002bda:	bf00      	nop
 8002bdc:	e00b      	b.n	8002bf6 <EXTI+0x756>
 8002bde:	bf00      	nop
 8002be0:	40011400 	.word	0x40011400
 8002be4:	40010000 	.word	0x40010000
 8002be8:	40010800 	.word	0x40010800
 8002bec:	40010c00 	.word	0x40010c00
 8002bf0:	40011000 	.word	0x40011000
		break;
 8002bf4:	bf00      	nop
	}
	//================================================
	//3- Update Rising or Falling Register
	EXIT->EXTI_RTSR &=~(1<<pin);
 8002bf6:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <EXTI+0x898>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	897a      	ldrh	r2, [r7, #10]
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002c02:	43d2      	mvns	r2, r2
 8002c04:	4611      	mov	r1, r2
 8002c06:	4a4c      	ldr	r2, [pc, #304]	; (8002d38 <EXTI+0x898>)
 8002c08:	400b      	ands	r3, r1
 8002c0a:	6093      	str	r3, [r2, #8]
	EXIT->EXTI_FTSR &=~(1<<pin);
 8002c0c:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <EXTI+0x898>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	897a      	ldrh	r2, [r7, #10]
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	43d2      	mvns	r2, r2
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4a46      	ldr	r2, [pc, #280]	; (8002d38 <EXTI+0x898>)
 8002c1e:	400b      	ands	r3, r1
 8002c20:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 8002c22:	893b      	ldrh	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <EXTI+0x79e>
		EXIT->EXTI_RTSR |= (1<<pin);
 8002c28:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <EXTI+0x898>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	897a      	ldrh	r2, [r7, #10]
 8002c2e:	2101      	movs	r1, #1
 8002c30:	fa01 f202 	lsl.w	r2, r1, r2
 8002c34:	4611      	mov	r1, r2
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <EXTI+0x898>)
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	6093      	str	r3, [r2, #8]
 8002c3c:	e021      	b.n	8002c82 <EXTI+0x7e2>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 8002c3e:	893b      	ldrh	r3, [r7, #8]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d10a      	bne.n	8002c5a <EXTI+0x7ba>
		EXIT->EXTI_FTSR |= (1<<pin);
 8002c44:	4b3c      	ldr	r3, [pc, #240]	; (8002d38 <EXTI+0x898>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	897a      	ldrh	r2, [r7, #10]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c50:	4611      	mov	r1, r2
 8002c52:	4a39      	ldr	r2, [pc, #228]	; (8002d38 <EXTI+0x898>)
 8002c54:	430b      	orrs	r3, r1
 8002c56:	60d3      	str	r3, [r2, #12]
 8002c58:	e013      	b.n	8002c82 <EXTI+0x7e2>
	}
	else{
		EXIT->EXTI_RTSR |= (1<<pin);
 8002c5a:	4b37      	ldr	r3, [pc, #220]	; (8002d38 <EXTI+0x898>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	897a      	ldrh	r2, [r7, #10]
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f202 	lsl.w	r2, r1, r2
 8002c66:	4611      	mov	r1, r2
 8002c68:	4a33      	ldr	r2, [pc, #204]	; (8002d38 <EXTI+0x898>)
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	6093      	str	r3, [r2, #8]
		EXIT->EXTI_FTSR |= (1<<pin);
 8002c6e:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <EXTI+0x898>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	897a      	ldrh	r2, [r7, #10]
 8002c74:	2101      	movs	r1, #1
 8002c76:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4a2e      	ldr	r2, [pc, #184]	; (8002d38 <EXTI+0x898>)
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	60d3      	str	r3, [r2, #12]
	}


	//4- Update IRQ Handling callback
	ARR_INTERRUPT_TRACK[interrupt_numpers].pin=pin;
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <EXTI+0x89c>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	b2d9      	uxtb	r1, r3
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <EXTI+0x8a0>)
 8002c8e:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
	if(PORTx==GPIOA)     {ARR_INTERRUPT_TRACK[interrupt_numpers].port=1;}
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a2b      	ldr	r2, [pc, #172]	; (8002d44 <EXTI+0x8a4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d107      	bne.n	8002caa <EXTI+0x80a>
 8002c9a:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <EXTI+0x89c>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <EXTI+0x8a0>)
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	705a      	strb	r2, [r3, #1]
 8002ca8:	e022      	b.n	8002cf0 <EXTI+0x850>
	else if(PORTx==GPIOB){ARR_INTERRUPT_TRACK[interrupt_numpers].port=2;}
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a26      	ldr	r2, [pc, #152]	; (8002d48 <EXTI+0x8a8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d107      	bne.n	8002cc2 <EXTI+0x822>
 8002cb2:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <EXTI+0x89c>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <EXTI+0x8a0>)
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	705a      	strb	r2, [r3, #1]
 8002cc0:	e016      	b.n	8002cf0 <EXTI+0x850>
	else if(PORTx==GPIOC){ARR_INTERRUPT_TRACK[interrupt_numpers].port=3;}
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <EXTI+0x8ac>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d107      	bne.n	8002cda <EXTI+0x83a>
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <EXTI+0x89c>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <EXTI+0x8a0>)
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	705a      	strb	r2, [r3, #1]
 8002cd8:	e00a      	b.n	8002cf0 <EXTI+0x850>
	else if(PORTx==GPIOD){ARR_INTERRUPT_TRACK[interrupt_numpers].port=4;}
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <EXTI+0x8b0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d106      	bne.n	8002cf0 <EXTI+0x850>
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <EXTI+0x89c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <EXTI+0x8a0>)
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	2204      	movs	r2, #4
 8002cee:	705a      	strb	r2, [r3, #1]


	GP_IRQ_Callback[interrupt_numpers++] =(void(*)(interrupt_data* isr_data,uint8_t interupt_num))function_addres;
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <EXTI+0x89c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	b2d1      	uxtb	r1, r2
 8002cf8:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <EXTI+0x89c>)
 8002cfa:	7011      	strb	r1, [r2, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <EXTI+0x8b4>)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(interrupt_numpers>=15){
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <EXTI+0x89c>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b0e      	cmp	r3, #14
 8002d0c:	d902      	bls.n	8002d14 <EXTI+0x874>
		interrupt_numpers=0;
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <EXTI+0x89c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
	}

	EXIT->EXTI_IMR |=(1<<pin);
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <EXTI+0x898>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	897a      	ldrh	r2, [r7, #10]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	4611      	mov	r1, r2
 8002d22:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <EXTI+0x898>)
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 8002d28:	897b      	ldrh	r3, [r7, #10]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fb52 	bl	80023d4 <Enable_NVIC>
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40010400 	.word	0x40010400
 8002d3c:	200000b1 	.word	0x200000b1
 8002d40:	200001a8 	.word	0x200001a8
 8002d44:	40010800 	.word	0x40010800
 8002d48:	40010c00 	.word	0x40010c00
 8002d4c:	40011000 	.word	0x40011000
 8002d50:	40011400 	.word	0x40011400
 8002d54:	2000016c 	.word	0x2000016c

08002d58 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <EXTI0_IRQHandler+0x20>)
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <EXTI0_IRQHandler+0x20>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0](ARR_INTERRUPT_TRACK,0);
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <EXTI0_IRQHandler+0x24>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4804      	ldr	r0, [pc, #16]	; (8002d80 <EXTI0_IRQHandler+0x28>)
 8002d70:	4798      	blx	r3
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40010400 	.word	0x40010400
 8002d7c:	2000016c 	.word	0x2000016c
 8002d80:	200001a8 	.word	0x200001a8

08002d84 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <EXTI1_IRQHandler+0x20>)
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	4a05      	ldr	r2, [pc, #20]	; (8002da4 <EXTI1_IRQHandler+0x20>)
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1](ARR_INTERRUPT_TRACK,1);
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <EXTI1_IRQHandler+0x24>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4804      	ldr	r0, [pc, #16]	; (8002dac <EXTI1_IRQHandler+0x28>)
 8002d9c:	4798      	blx	r3

}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40010400 	.word	0x40010400
 8002da8:	2000016c 	.word	0x2000016c
 8002dac:	200001a8 	.word	0x200001a8

08002db0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <EXTI2_IRQHandler+0x20>)
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <EXTI2_IRQHandler+0x20>)
 8002dba:	f043 0304 	orr.w	r3, r3, #4
 8002dbe:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2](ARR_INTERRUPT_TRACK,2);
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <EXTI2_IRQHandler+0x24>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <EXTI2_IRQHandler+0x28>)
 8002dc8:	4798      	blx	r3
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40010400 	.word	0x40010400
 8002dd4:	2000016c 	.word	0x2000016c
 8002dd8:	200001a8 	.word	0x200001a8

08002ddc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <EXTI3_IRQHandler+0x20>)
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <EXTI3_IRQHandler+0x20>)
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3](ARR_INTERRUPT_TRACK,3);
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <EXTI3_IRQHandler+0x24>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2103      	movs	r1, #3
 8002df2:	4804      	ldr	r0, [pc, #16]	; (8002e04 <EXTI3_IRQHandler+0x28>)
 8002df4:	4798      	blx	r3
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40010400 	.word	0x40010400
 8002e00:	2000016c 	.word	0x2000016c
 8002e04:	200001a8 	.word	0x200001a8

08002e08 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <EXTI4_IRQHandler+0x20>)
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <EXTI4_IRQHandler+0x20>)
 8002e12:	f043 0310 	orr.w	r3, r3, #16
 8002e16:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4](ARR_INTERRUPT_TRACK,4);
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <EXTI4_IRQHandler+0x24>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	4804      	ldr	r0, [pc, #16]	; (8002e30 <EXTI4_IRQHandler+0x28>)
 8002e20:	4798      	blx	r3
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40010400 	.word	0x40010400
 8002e2c:	2000016c 	.word	0x2000016c
 8002e30:	200001a8 	.word	0x200001a8

08002e34 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5](ARR_INTERRUPT_TRACK,5);  }
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <EXTI9_5_IRQHandler+0x26>
 8002e44:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	4a27      	ldr	r2, [pc, #156]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002e4a:	f043 0320 	orr.w	r3, r3, #32
 8002e4e:	6153      	str	r3, [r2, #20]
 8002e50:	4b26      	ldr	r3, [pc, #152]	; (8002eec <EXTI9_5_IRQHandler+0xb8>)
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	2105      	movs	r1, #5
 8002e56:	4826      	ldr	r0, [pc, #152]	; (8002ef0 <EXTI9_5_IRQHandler+0xbc>)
 8002e58:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6](ARR_INTERRUPT_TRACK,6);  }
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <EXTI9_5_IRQHandler+0x48>
 8002e66:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e70:	6153      	str	r3, [r2, #20]
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <EXTI9_5_IRQHandler+0xb8>)
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2106      	movs	r1, #6
 8002e78:	481d      	ldr	r0, [pc, #116]	; (8002ef0 <EXTI9_5_IRQHandler+0xbc>)
 8002e7a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7](ARR_INTERRUPT_TRACK,7);  }
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <EXTI9_5_IRQHandler+0x6a>
 8002e88:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	4a16      	ldr	r2, [pc, #88]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e92:	6153      	str	r3, [r2, #20]
 8002e94:	4b15      	ldr	r3, [pc, #84]	; (8002eec <EXTI9_5_IRQHandler+0xb8>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	2107      	movs	r1, #7
 8002e9a:	4815      	ldr	r0, [pc, #84]	; (8002ef0 <EXTI9_5_IRQHandler+0xbc>)
 8002e9c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8](ARR_INTERRUPT_TRACK,8);  }
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <EXTI9_5_IRQHandler+0x8c>
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	4a0e      	ldr	r2, [pc, #56]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	6153      	str	r3, [r2, #20]
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <EXTI9_5_IRQHandler+0xb8>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	2108      	movs	r1, #8
 8002ebc:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <EXTI9_5_IRQHandler+0xbc>)
 8002ebe:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9](ARR_INTERRUPT_TRACK,9);  }
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <EXTI9_5_IRQHandler+0xae>
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <EXTI9_5_IRQHandler+0xb4>)
 8002ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed6:	6153      	str	r3, [r2, #20]
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <EXTI9_5_IRQHandler+0xb8>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2109      	movs	r1, #9
 8002ede:	4804      	ldr	r0, [pc, #16]	; (8002ef0 <EXTI9_5_IRQHandler+0xbc>)
 8002ee0:	4798      	blx	r3
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40010400 	.word	0x40010400
 8002eec:	2000016c 	.word	0x2000016c
 8002ef0:	200001a8 	.word	0x200001a8

08002ef4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10](ARR_INTERRUPT_TRACK,10);  }
 8002ef8:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <EXTI15_10_IRQHandler+0x26>
 8002f04:	4b30      	ldr	r3, [pc, #192]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	4a2f      	ldr	r2, [pc, #188]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f0e:	6153      	str	r3, [r2, #20]
 8002f10:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <EXTI15_10_IRQHandler+0xd8>)
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	210a      	movs	r1, #10
 8002f16:	482e      	ldr	r0, [pc, #184]	; (8002fd0 <EXTI15_10_IRQHandler+0xdc>)
 8002f18:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11](ARR_INTERRUPT_TRACK,11);  }
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <EXTI15_10_IRQHandler+0x48>
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	4a27      	ldr	r2, [pc, #156]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f30:	6153      	str	r3, [r2, #20]
 8002f32:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <EXTI15_10_IRQHandler+0xd8>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	210b      	movs	r1, #11
 8002f38:	4825      	ldr	r0, [pc, #148]	; (8002fd0 <EXTI15_10_IRQHandler+0xdc>)
 8002f3a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12](ARR_INTERRUPT_TRACK,12);  }
 8002f3c:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <EXTI15_10_IRQHandler+0x6a>
 8002f48:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f52:	6153      	str	r3, [r2, #20]
 8002f54:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <EXTI15_10_IRQHandler+0xd8>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	210c      	movs	r1, #12
 8002f5a:	481d      	ldr	r0, [pc, #116]	; (8002fd0 <EXTI15_10_IRQHandler+0xdc>)
 8002f5c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13](ARR_INTERRUPT_TRACK,13);  }
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <EXTI15_10_IRQHandler+0x8c>
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f74:	6153      	str	r3, [r2, #20]
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <EXTI15_10_IRQHandler+0xd8>)
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	210d      	movs	r1, #13
 8002f7c:	4814      	ldr	r0, [pc, #80]	; (8002fd0 <EXTI15_10_IRQHandler+0xdc>)
 8002f7e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14](ARR_INTERRUPT_TRACK,14);  }
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <EXTI15_10_IRQHandler+0xae>
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f96:	6153      	str	r3, [r2, #20]
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <EXTI15_10_IRQHandler+0xd8>)
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	210e      	movs	r1, #14
 8002f9e:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <EXTI15_10_IRQHandler+0xdc>)
 8002fa0:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15](ARR_INTERRUPT_TRACK,15);  }
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <EXTI15_10_IRQHandler+0xd0>
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <EXTI15_10_IRQHandler+0xd4>)
 8002fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb8:	6153      	str	r3, [r2, #20]
 8002fba:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <EXTI15_10_IRQHandler+0xd8>)
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	210f      	movs	r1, #15
 8002fc0:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <EXTI15_10_IRQHandler+0xdc>)
 8002fc2:	4798      	blx	r3

}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40010400 	.word	0x40010400
 8002fcc:	2000016c 	.word	0x2000016c
 8002fd0:	200001a8 	.word	0x200001a8

08002fd4 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
	//slave only todo
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
	//slave only todo
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <USART_SEND>:
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );


}
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	0b1b      	lsrs	r3, r3, #12
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d106      	bne.n	8003012 <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 8003010:	e004      	b.n	800301c <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b2da      	uxtb	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	605a      	str	r2, [r3, #4]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
	...

08003028 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800302e:	4b51      	ldr	r3, [pc, #324]	; (8003174 <USART1_IRQHandler+0x14c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	09db      	lsrs	r3, r3, #7
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d122      	bne.n	8003084 <USART1_IRQHandler+0x5c>
 800303e:	4b4d      	ldr	r3, [pc, #308]	; (8003174 <USART1_IRQHandler+0x14c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	09db      	lsrs	r3, r3, #7
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d11a      	bne.n	8003084 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 800304e:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <USART1_IRQHandler+0x150>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 8003058:	4b46      	ldr	r3, [pc, #280]	; (8003174 <USART1_IRQHandler+0x14c>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <USART1_IRQHandler+0x150>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f7ff ffc2 	bl	8002fec <USART_SEND>
			++arr_data[0];
 8003068:	4b43      	ldr	r3, [pc, #268]	; (8003178 <USART1_IRQHandler+0x150>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	4a42      	ldr	r2, [pc, #264]	; (8003178 <USART1_IRQHandler+0x150>)
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e007      	b.n	8003084 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 8003074:	4b3f      	ldr	r3, [pc, #252]	; (8003174 <USART1_IRQHandler+0x14c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <USART1_IRQHandler+0x14c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003082:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 8003084:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <USART1_IRQHandler+0x14c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d15b      	bne.n	800314c <USART1_IRQHandler+0x124>
 8003094:	4b37      	ldr	r3, [pc, #220]	; (8003174 <USART1_IRQHandler+0x14c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d153      	bne.n	800314c <USART1_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 80030a4:	4b33      	ldr	r3, [pc, #204]	; (8003174 <USART1_IRQHandler+0x14c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	0b1b      	lsrs	r3, r3, #12
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d117      	bne.n	80030e4 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 80030b4:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <USART1_IRQHandler+0x14c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	0a9b      	lsrs	r3, r3, #10
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d108      	bne.n	80030d6 <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <USART1_IRQHandler+0x14c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	4b2a      	ldr	r3, [pc, #168]	; (800317c <USART1_IRQHandler+0x154>)
 80030d2:	801a      	strh	r2, [r3, #0]
 80030d4:	e020      	b.n	8003118 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 80030d6:	4b27      	ldr	r3, [pc, #156]	; (8003174 <USART1_IRQHandler+0x14c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	4b27      	ldr	r3, [pc, #156]	; (800317c <USART1_IRQHandler+0x154>)
 80030e0:	801a      	strh	r2, [r3, #0]
 80030e2:	e019      	b.n	8003118 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 80030e4:	4b23      	ldr	r3, [pc, #140]	; (8003174 <USART1_IRQHandler+0x14c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	0a9b      	lsrs	r3, r3, #10
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d109      	bne.n	8003108 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 80030f4:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <USART1_IRQHandler+0x14c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003100:	b29a      	uxth	r2, r3
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <USART1_IRQHandler+0x154>)
 8003104:	801a      	strh	r2, [r3, #0]
 8003106:	e007      	b.n	8003118 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <USART1_IRQHandler+0x14c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	b29b      	uxth	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	b29a      	uxth	r2, r3
 8003114:	4b19      	ldr	r3, [pc, #100]	; (800317c <USART1_IRQHandler+0x154>)
 8003116:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <USART1_IRQHandler+0x158>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4798      	blx	r3
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <USART1_IRQHandler+0x14c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <USART1_IRQHandler+0x14c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0220 	bic.w	r2, r2, #32
 800312c:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <USART1_IRQHandler+0x14c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <USART1_IRQHandler+0x15c>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	b29b      	uxth	r3, r3
 800313a:	80fb      	strh	r3, [r7, #6]
			arr[0]->USART_SR &=~(1<<5);
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <USART1_IRQHandler+0x14c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <USART1_IRQHandler+0x14c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0220 	bic.w	r2, r2, #32
 800314a:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <USART1_IRQHandler+0x14c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <USART1_IRQHandler+0x15c>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	b29b      	uxth	r3, r3
 8003158:	80bb      	strh	r3, [r7, #4]
		arr[0]->USART_SR &=~(1<<5);
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <USART1_IRQHandler+0x14c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <USART1_IRQHandler+0x14c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0220 	bic.w	r2, r2, #32
 8003168:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	200001c8 	.word	0x200001c8
 8003178:	200001dc 	.word	0x200001dc
 800317c:	200001d4 	.word	0x200001d4
 8003180:	200001e8 	.word	0x200001e8
 8003184:	40013800 	.word	0x40013800

08003188 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800318e:	4b51      	ldr	r3, [pc, #324]	; (80032d4 <USART2_IRQHandler+0x14c>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	09db      	lsrs	r3, r3, #7
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d122      	bne.n	80031e4 <USART2_IRQHandler+0x5c>
 800319e:	4b4d      	ldr	r3, [pc, #308]	; (80032d4 <USART2_IRQHandler+0x14c>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	09db      	lsrs	r3, r3, #7
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d11a      	bne.n	80031e4 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <USART2_IRQHandler+0x150>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00d      	beq.n	80031d4 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 80031b8:	4b46      	ldr	r3, [pc, #280]	; (80032d4 <USART2_IRQHandler+0x14c>)
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	4b46      	ldr	r3, [pc, #280]	; (80032d8 <USART2_IRQHandler+0x150>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f7ff ff12 	bl	8002fec <USART_SEND>
			++arr_data[1];
 80031c8:	4b43      	ldr	r3, [pc, #268]	; (80032d8 <USART2_IRQHandler+0x150>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	3301      	adds	r3, #1
 80031ce:	4a42      	ldr	r2, [pc, #264]	; (80032d8 <USART2_IRQHandler+0x150>)
 80031d0:	6053      	str	r3, [r2, #4]
 80031d2:	e007      	b.n	80031e4 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 80031d4:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <USART2_IRQHandler+0x14c>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <USART2_IRQHandler+0x14c>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e2:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 80031e4:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <USART2_IRQHandler+0x14c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d15b      	bne.n	80032ac <USART2_IRQHandler+0x124>
 80031f4:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <USART2_IRQHandler+0x14c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b01      	cmp	r3, #1
 8003202:	d153      	bne.n	80032ac <USART2_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 8003204:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <USART2_IRQHandler+0x14c>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	0b1b      	lsrs	r3, r3, #12
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d117      	bne.n	8003244 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8003214:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <USART2_IRQHandler+0x14c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	0a9b      	lsrs	r3, r3, #10
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8003224:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <USART2_IRQHandler+0x14c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	b29b      	uxth	r3, r3
 800322c:	b2db      	uxtb	r3, r3
 800322e:	b29a      	uxth	r2, r3
 8003230:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <USART2_IRQHandler+0x154>)
 8003232:	805a      	strh	r2, [r3, #2]
 8003234:	e020      	b.n	8003278 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 8003236:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <USART2_IRQHandler+0x14c>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	b29a      	uxth	r2, r3
 800323e:	4b27      	ldr	r3, [pc, #156]	; (80032dc <USART2_IRQHandler+0x154>)
 8003240:	805a      	strh	r2, [r3, #2]
 8003242:	e019      	b.n	8003278 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <USART2_IRQHandler+0x14c>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	0a9b      	lsrs	r3, r3, #10
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d109      	bne.n	8003268 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8003254:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <USART2_IRQHandler+0x14c>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003260:	b29a      	uxth	r2, r3
 8003262:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <USART2_IRQHandler+0x154>)
 8003264:	805a      	strh	r2, [r3, #2]
 8003266:	e007      	b.n	8003278 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <USART2_IRQHandler+0x14c>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b29b      	uxth	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	b29a      	uxth	r2, r3
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <USART2_IRQHandler+0x154>)
 8003276:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <USART2_IRQHandler+0x158>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4798      	blx	r3
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <USART2_IRQHandler+0x14c>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <USART2_IRQHandler+0x14c>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f022 0220 	bic.w	r2, r2, #32
 800328c:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <USART2_IRQHandler+0x14c>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <USART2_IRQHandler+0x15c>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	b29b      	uxth	r3, r3
 800329a:	80fb      	strh	r3, [r7, #6]
			arr[1]->USART_SR &=~(1<<5);
 800329c:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <USART2_IRQHandler+0x14c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <USART2_IRQHandler+0x14c>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f022 0220 	bic.w	r2, r2, #32
 80032aa:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <USART2_IRQHandler+0x14c>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <USART2_IRQHandler+0x15c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	80bb      	strh	r3, [r7, #4]
		arr[1]->USART_SR &=~(1<<5);
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <USART2_IRQHandler+0x14c>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <USART2_IRQHandler+0x14c>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f022 0220 	bic.w	r2, r2, #32
 80032c8:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200001c8 	.word	0x200001c8
 80032d8:	200001dc 	.word	0x200001dc
 80032dc:	200001d4 	.word	0x200001d4
 80032e0:	200001e8 	.word	0x200001e8
 80032e4:	40004400 	.word	0x40004400

080032e8 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80032ee:	4b51      	ldr	r3, [pc, #324]	; (8003434 <USART3_IRQHandler+0x14c>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	09db      	lsrs	r3, r3, #7
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d122      	bne.n	8003344 <USART3_IRQHandler+0x5c>
 80032fe:	4b4d      	ldr	r3, [pc, #308]	; (8003434 <USART3_IRQHandler+0x14c>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	09db      	lsrs	r3, r3, #7
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d11a      	bne.n	8003344 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 800330e:	4b4a      	ldr	r3, [pc, #296]	; (8003438 <USART3_IRQHandler+0x150>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 8003318:	4b46      	ldr	r3, [pc, #280]	; (8003434 <USART3_IRQHandler+0x14c>)
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	4b46      	ldr	r3, [pc, #280]	; (8003438 <USART3_IRQHandler+0x150>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4619      	mov	r1, r3
 8003322:	4610      	mov	r0, r2
 8003324:	f7ff fe62 	bl	8002fec <USART_SEND>
			++arr_data[2];
 8003328:	4b43      	ldr	r3, [pc, #268]	; (8003438 <USART3_IRQHandler+0x150>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	3301      	adds	r3, #1
 800332e:	4a42      	ldr	r2, [pc, #264]	; (8003438 <USART3_IRQHandler+0x150>)
 8003330:	6093      	str	r3, [r2, #8]
 8003332:	e007      	b.n	8003344 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 8003334:	4b3f      	ldr	r3, [pc, #252]	; (8003434 <USART3_IRQHandler+0x14c>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <USART3_IRQHandler+0x14c>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003342:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 8003344:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <USART3_IRQHandler+0x14c>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d15b      	bne.n	800340c <USART3_IRQHandler+0x124>
 8003354:	4b37      	ldr	r3, [pc, #220]	; (8003434 <USART3_IRQHandler+0x14c>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d153      	bne.n	800340c <USART3_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 8003364:	4b33      	ldr	r3, [pc, #204]	; (8003434 <USART3_IRQHandler+0x14c>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	0b1b      	lsrs	r3, r3, #12
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d117      	bne.n	80033a4 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8003374:	4b2f      	ldr	r3, [pc, #188]	; (8003434 <USART3_IRQHandler+0x14c>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	0a9b      	lsrs	r3, r3, #10
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d108      	bne.n	8003396 <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8003384:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <USART3_IRQHandler+0x14c>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	b29b      	uxth	r3, r3
 800338c:	b2db      	uxtb	r3, r3
 800338e:	b29a      	uxth	r2, r3
 8003390:	4b2a      	ldr	r3, [pc, #168]	; (800343c <USART3_IRQHandler+0x154>)
 8003392:	809a      	strh	r2, [r3, #4]
 8003394:	e020      	b.n	80033d8 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 8003396:	4b27      	ldr	r3, [pc, #156]	; (8003434 <USART3_IRQHandler+0x14c>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	b29a      	uxth	r2, r3
 800339e:	4b27      	ldr	r3, [pc, #156]	; (800343c <USART3_IRQHandler+0x154>)
 80033a0:	809a      	strh	r2, [r3, #4]
 80033a2:	e019      	b.n	80033d8 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 80033a4:	4b23      	ldr	r3, [pc, #140]	; (8003434 <USART3_IRQHandler+0x14c>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	0a9b      	lsrs	r3, r3, #10
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d109      	bne.n	80033c8 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 80033b4:	4b1f      	ldr	r3, [pc, #124]	; (8003434 <USART3_IRQHandler+0x14c>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	4b1e      	ldr	r3, [pc, #120]	; (800343c <USART3_IRQHandler+0x154>)
 80033c4:	809a      	strh	r2, [r3, #4]
 80033c6:	e007      	b.n	80033d8 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 80033c8:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <USART3_IRQHandler+0x14c>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <USART3_IRQHandler+0x154>)
 80033d6:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <USART3_IRQHandler+0x158>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4798      	blx	r3
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <USART3_IRQHandler+0x14c>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b13      	ldr	r3, [pc, #76]	; (8003434 <USART3_IRQHandler+0x14c>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f022 0220 	bic.w	r2, r2, #32
 80033ec:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <USART3_IRQHandler+0x14c>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 80033f4:	4b13      	ldr	r3, [pc, #76]	; (8003444 <USART3_IRQHandler+0x15c>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	80fb      	strh	r3, [r7, #6]
			arr[2]->USART_SR &=~(1<<5);
 80033fc:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <USART3_IRQHandler+0x14c>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <USART3_IRQHandler+0x14c>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f022 0220 	bic.w	r2, r2, #32
 800340a:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <USART3_IRQHandler+0x14c>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 8003412:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <USART3_IRQHandler+0x15c>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	b29b      	uxth	r3, r3
 8003418:	80bb      	strh	r3, [r7, #4]
		arr[2]->USART_SR &=~(1<<5);
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <USART3_IRQHandler+0x14c>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <USART3_IRQHandler+0x14c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f022 0220 	bic.w	r2, r2, #32
 8003428:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200001c8 	.word	0x200001c8
 8003438:	200001dc 	.word	0x200001dc
 800343c:	200001d4 	.word	0x200001d4
 8003440:	200001e8 	.word	0x200001e8
 8003444:	40004800 	.word	0x40004800

08003448 <main>:

IR My_IR;
//============================================================================

int main(void)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b087      	sub	sp, #28
 800344c:	af02      	add	r7, sp, #8
	MCAL_speed_init(CLK_SORC_EX_CLK8MHz, mood_FAST_MOOD_72MHzCORE36MHzpref);
 800344e:	2103      	movs	r1, #3
 8003450:	2001      	movs	r0, #1
 8003452:	f7fe fedb 	bl	800220c <MCAL_speed_init>
	delay(200, U_ms,clk);
 8003456:	4a32      	ldr	r2, [pc, #200]	; (8003520 <main+0xd8>)
 8003458:	2100      	movs	r1, #0
 800345a:	4832      	ldr	r0, [pc, #200]	; (8003524 <main+0xdc>)
 800345c:	f7fe fbd2 	bl	8001c04 <delay>
	I2C_LCD_Init(I2C1,address,clk);
 8003460:	4a2f      	ldr	r2, [pc, #188]	; (8003520 <main+0xd8>)
 8003462:	213f      	movs	r1, #63	; 0x3f
 8003464:	4830      	ldr	r0, [pc, #192]	; (8003528 <main+0xe0>)
 8003466:	f7fd fb6d 	bl	8000b44 <I2C_LCD_Init>
	I2C_LCD_write_string(I2C1,"SANDY",address);
 800346a:	223f      	movs	r2, #63	; 0x3f
 800346c:	492f      	ldr	r1, [pc, #188]	; (800352c <main+0xe4>)
 800346e:	482e      	ldr	r0, [pc, #184]	; (8003528 <main+0xe0>)
 8003470:	f7fd fc39 	bl	8000ce6 <I2C_LCD_write_string>
	I2C_LCD_setcerser(I2C1, address,1,0);
 8003474:	2300      	movs	r3, #0
 8003476:	2201      	movs	r2, #1
 8003478:	213f      	movs	r1, #63	; 0x3f
 800347a:	482b      	ldr	r0, [pc, #172]	; (8003528 <main+0xe0>)
 800347c:	f7fd fc4d 	bl	8000d1a <I2C_LCD_setcerser>
	I2C_LCD_write_string(I2C1,"Katcoty",address);
 8003480:	223f      	movs	r2, #63	; 0x3f
 8003482:	492b      	ldr	r1, [pc, #172]	; (8003530 <main+0xe8>)
 8003484:	4828      	ldr	r0, [pc, #160]	; (8003528 <main+0xe0>)
 8003486:	f7fd fc2e 	bl	8000ce6 <I2C_LCD_write_string>
	delay(1000, U_ms,clk);
 800348a:	4a25      	ldr	r2, [pc, #148]	; (8003520 <main+0xd8>)
 800348c:	2100      	movs	r1, #0
 800348e:	4829      	ldr	r0, [pc, #164]	; (8003534 <main+0xec>)
 8003490:	f7fe fbb8 	bl	8001c04 <delay>
	IR_NEC_init(GPIOB, pin0,GPIOA, pin11);
 8003494:	230b      	movs	r3, #11
 8003496:	4a28      	ldr	r2, [pc, #160]	; (8003538 <main+0xf0>)
 8003498:	2100      	movs	r1, #0
 800349a:	4828      	ldr	r0, [pc, #160]	; (800353c <main+0xf4>)
 800349c:	f7fd fc94 	bl	8000dc8 <IR_NEC_init>
	I2C_LCD_clear(I2C1, address);
 80034a0:	213f      	movs	r1, #63	; 0x3f
 80034a2:	4821      	ldr	r0, [pc, #132]	; (8003528 <main+0xe0>)
 80034a4:	f7fd fc64 	bl	8000d70 <I2C_LCD_clear>
	I2C_LCD_setcerser(I2C1, address,0,0);
 80034a8:	2300      	movs	r3, #0
 80034aa:	2200      	movs	r2, #0
 80034ac:	213f      	movs	r1, #63	; 0x3f
 80034ae:	481e      	ldr	r0, [pc, #120]	; (8003528 <main+0xe0>)
 80034b0:	f7fd fc33 	bl	8000d1a <I2C_LCD_setcerser>
	while(1){
		My_IR=IR_CONVERT_READ();
 80034b4:	4c22      	ldr	r4, [pc, #136]	; (8003540 <main+0xf8>)
 80034b6:	463b      	mov	r3, r7
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd fd43 	bl	8000f44 <IR_CONVERT_READ>
 80034be:	463b      	mov	r3, r7
 80034c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		I2C_LCD_setcerser(I2C1, address,0,0);
 80034c8:	2300      	movs	r3, #0
 80034ca:	2200      	movs	r2, #0
 80034cc:	213f      	movs	r1, #63	; 0x3f
 80034ce:	4816      	ldr	r0, [pc, #88]	; (8003528 <main+0xe0>)
 80034d0:	f7fd fc23 	bl	8000d1a <I2C_LCD_setcerser>
		I2C_LCD_write_INTnumber(I2C1, address,My_IR.IR_address);
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <main+0xf8>)
 80034d6:	791b      	ldrb	r3, [r3, #4]
 80034d8:	461a      	mov	r2, r3
 80034da:	213f      	movs	r1, #63	; 0x3f
 80034dc:	4812      	ldr	r0, [pc, #72]	; (8003528 <main+0xe0>)
 80034de:	f7fd fc57 	bl	8000d90 <I2C_LCD_write_INTnumber>
		I2C_LCD_setcerser(I2C1, address,1,0);
 80034e2:	2300      	movs	r3, #0
 80034e4:	2201      	movs	r2, #1
 80034e6:	213f      	movs	r1, #63	; 0x3f
 80034e8:	480f      	ldr	r0, [pc, #60]	; (8003528 <main+0xe0>)
 80034ea:	f7fd fc16 	bl	8000d1a <I2C_LCD_setcerser>
		I2C_LCD_write_INTnumber(I2C1, address,My_IR.command);
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <main+0xf8>)
 80034f0:	799b      	ldrb	r3, [r3, #6]
 80034f2:	461a      	mov	r2, r3
 80034f4:	213f      	movs	r1, #63	; 0x3f
 80034f6:	480c      	ldr	r0, [pc, #48]	; (8003528 <main+0xe0>)
 80034f8:	f7fd fc4a 	bl	8000d90 <I2C_LCD_write_INTnumber>
		delay(250, U_ms, clk);
 80034fc:	4a08      	ldr	r2, [pc, #32]	; (8003520 <main+0xd8>)
 80034fe:	2100      	movs	r1, #0
 8003500:	4810      	ldr	r0, [pc, #64]	; (8003544 <main+0xfc>)
 8003502:	f7fe fb7f 	bl	8001c04 <delay>
		I2C_LCD_clear(I2C1, address);
 8003506:	213f      	movs	r1, #63	; 0x3f
 8003508:	4807      	ldr	r0, [pc, #28]	; (8003528 <main+0xe0>)
 800350a:	f7fd fc31 	bl	8000d70 <I2C_LCD_clear>
		IR_SEND(My_IR, GPIOA,pin11);
 800350e:	4a0c      	ldr	r2, [pc, #48]	; (8003540 <main+0xf8>)
 8003510:	230b      	movs	r3, #11
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <main+0xf0>)
 8003516:	ca07      	ldmia	r2, {r0, r1, r2}
 8003518:	f7fd fd62 	bl	8000fe0 <IR_SEND>
		My_IR=IR_CONVERT_READ();
 800351c:	e7ca      	b.n	80034b4 <main+0x6c>
 800351e:	bf00      	nop
 8003520:	02255100 	.word	0x02255100
 8003524:	43480000 	.word	0x43480000
 8003528:	40005400 	.word	0x40005400
 800352c:	08003e9c 	.word	0x08003e9c
 8003530:	08003ea4 	.word	0x08003ea4
 8003534:	447a0000 	.word	0x447a0000
 8003538:	40010800 	.word	0x40010800
 800353c:	40010c00 	.word	0x40010c00
 8003540:	20000200 	.word	0x20000200
 8003544:	437a0000 	.word	0x437a0000

08003548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <_sbrk+0x5c>)
 8003552:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <_sbrk+0x60>)
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <_sbrk+0x64>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <_sbrk+0x64>)
 8003566:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <_sbrk+0x68>)
 8003568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <_sbrk+0x64>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	429a      	cmp	r2, r3
 8003576:	d207      	bcs.n	8003588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003578:	f000 f846 	bl	8003608 <__errno>
 800357c:	4602      	mov	r2, r0
 800357e:	230c      	movs	r3, #12
 8003580:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	e009      	b.n	800359c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <_sbrk+0x64>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <_sbrk+0x64>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	4a05      	ldr	r2, [pc, #20]	; (80035ac <_sbrk+0x64>)
 8003598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800359a:	68fb      	ldr	r3, [r7, #12]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20005000 	.word	0x20005000
 80035a8:	00000400 	.word	0x00000400
 80035ac:	200000b4 	.word	0x200000b4
 80035b0:	20000210 	.word	0x20000210

080035b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035b4:	480d      	ldr	r0, [pc, #52]	; (80035ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035b6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80035b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035bc:	480c      	ldr	r0, [pc, #48]	; (80035f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80035be:	490d      	ldr	r1, [pc, #52]	; (80035f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035c0:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <LoopForever+0xe>)
  movs r3, #0
 80035c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c4:	e002      	b.n	80035cc <LoopCopyDataInit>

080035c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ca:	3304      	adds	r3, #4

080035cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d0:	d3f9      	bcc.n	80035c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80035d4:	4c0a      	ldr	r4, [pc, #40]	; (8003600 <LoopForever+0x16>)
  movs r3, #0
 80035d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035d8:	e001      	b.n	80035de <LoopFillZerobss>

080035da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035dc:	3204      	adds	r2, #4

080035de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e0:	d3fb      	bcc.n	80035da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035e2:	f000 f817 	bl	8003614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035e6:	f7ff ff2f 	bl	8003448 <main>

080035ea <LoopForever>:

LoopForever:
    b LoopForever
 80035ea:	e7fe      	b.n	80035ea <LoopForever>
  ldr   r0, =_estack
 80035ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80035f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80035f8:	08003ee8 	.word	0x08003ee8
  ldr r2, =_sbss
 80035fc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8003600:	20000210 	.word	0x20000210

08003604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003604:	e7fe      	b.n	8003604 <ADC1_2_IRQHandler>
	...

08003608 <__errno>:
 8003608:	4b01      	ldr	r3, [pc, #4]	; (8003610 <__errno+0x8>)
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000020 	.word	0x20000020

08003614 <__libc_init_array>:
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	2500      	movs	r5, #0
 8003618:	4e0c      	ldr	r6, [pc, #48]	; (800364c <__libc_init_array+0x38>)
 800361a:	4c0d      	ldr	r4, [pc, #52]	; (8003650 <__libc_init_array+0x3c>)
 800361c:	1ba4      	subs	r4, r4, r6
 800361e:	10a4      	asrs	r4, r4, #2
 8003620:	42a5      	cmp	r5, r4
 8003622:	d109      	bne.n	8003638 <__libc_init_array+0x24>
 8003624:	f000 fc2c 	bl	8003e80 <_init>
 8003628:	2500      	movs	r5, #0
 800362a:	4e0a      	ldr	r6, [pc, #40]	; (8003654 <__libc_init_array+0x40>)
 800362c:	4c0a      	ldr	r4, [pc, #40]	; (8003658 <__libc_init_array+0x44>)
 800362e:	1ba4      	subs	r4, r4, r6
 8003630:	10a4      	asrs	r4, r4, #2
 8003632:	42a5      	cmp	r5, r4
 8003634:	d105      	bne.n	8003642 <__libc_init_array+0x2e>
 8003636:	bd70      	pop	{r4, r5, r6, pc}
 8003638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800363c:	4798      	blx	r3
 800363e:	3501      	adds	r5, #1
 8003640:	e7ee      	b.n	8003620 <__libc_init_array+0xc>
 8003642:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003646:	4798      	blx	r3
 8003648:	3501      	adds	r5, #1
 800364a:	e7f2      	b.n	8003632 <__libc_init_array+0x1e>
 800364c:	08003ee0 	.word	0x08003ee0
 8003650:	08003ee0 	.word	0x08003ee0
 8003654:	08003ee0 	.word	0x08003ee0
 8003658:	08003ee4 	.word	0x08003ee4

0800365c <siprintf>:
 800365c:	b40e      	push	{r1, r2, r3}
 800365e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003662:	b500      	push	{lr}
 8003664:	b09c      	sub	sp, #112	; 0x70
 8003666:	ab1d      	add	r3, sp, #116	; 0x74
 8003668:	9002      	str	r0, [sp, #8]
 800366a:	9006      	str	r0, [sp, #24]
 800366c:	9107      	str	r1, [sp, #28]
 800366e:	9104      	str	r1, [sp, #16]
 8003670:	4808      	ldr	r0, [pc, #32]	; (8003694 <siprintf+0x38>)
 8003672:	4909      	ldr	r1, [pc, #36]	; (8003698 <siprintf+0x3c>)
 8003674:	f853 2b04 	ldr.w	r2, [r3], #4
 8003678:	9105      	str	r1, [sp, #20]
 800367a:	6800      	ldr	r0, [r0, #0]
 800367c:	a902      	add	r1, sp, #8
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	f000 f8e6 	bl	8003850 <_svfiprintf_r>
 8003684:	2200      	movs	r2, #0
 8003686:	9b02      	ldr	r3, [sp, #8]
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	b01c      	add	sp, #112	; 0x70
 800368c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003690:	b003      	add	sp, #12
 8003692:	4770      	bx	lr
 8003694:	20000020 	.word	0x20000020
 8003698:	ffff0208 	.word	0xffff0208

0800369c <_malloc_r>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	1ccd      	adds	r5, r1, #3
 80036a0:	f025 0503 	bic.w	r5, r5, #3
 80036a4:	3508      	adds	r5, #8
 80036a6:	2d0c      	cmp	r5, #12
 80036a8:	bf38      	it	cc
 80036aa:	250c      	movcc	r5, #12
 80036ac:	2d00      	cmp	r5, #0
 80036ae:	4606      	mov	r6, r0
 80036b0:	db01      	blt.n	80036b6 <_malloc_r+0x1a>
 80036b2:	42a9      	cmp	r1, r5
 80036b4:	d903      	bls.n	80036be <_malloc_r+0x22>
 80036b6:	230c      	movs	r3, #12
 80036b8:	6033      	str	r3, [r6, #0]
 80036ba:	2000      	movs	r0, #0
 80036bc:	bd70      	pop	{r4, r5, r6, pc}
 80036be:	f000 fb89 	bl	8003dd4 <__malloc_lock>
 80036c2:	4a21      	ldr	r2, [pc, #132]	; (8003748 <_malloc_r+0xac>)
 80036c4:	6814      	ldr	r4, [r2, #0]
 80036c6:	4621      	mov	r1, r4
 80036c8:	b991      	cbnz	r1, 80036f0 <_malloc_r+0x54>
 80036ca:	4c20      	ldr	r4, [pc, #128]	; (800374c <_malloc_r+0xb0>)
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	b91b      	cbnz	r3, 80036d8 <_malloc_r+0x3c>
 80036d0:	4630      	mov	r0, r6
 80036d2:	f000 fb3d 	bl	8003d50 <_sbrk_r>
 80036d6:	6020      	str	r0, [r4, #0]
 80036d8:	4629      	mov	r1, r5
 80036da:	4630      	mov	r0, r6
 80036dc:	f000 fb38 	bl	8003d50 <_sbrk_r>
 80036e0:	1c43      	adds	r3, r0, #1
 80036e2:	d124      	bne.n	800372e <_malloc_r+0x92>
 80036e4:	230c      	movs	r3, #12
 80036e6:	4630      	mov	r0, r6
 80036e8:	6033      	str	r3, [r6, #0]
 80036ea:	f000 fb74 	bl	8003dd6 <__malloc_unlock>
 80036ee:	e7e4      	b.n	80036ba <_malloc_r+0x1e>
 80036f0:	680b      	ldr	r3, [r1, #0]
 80036f2:	1b5b      	subs	r3, r3, r5
 80036f4:	d418      	bmi.n	8003728 <_malloc_r+0x8c>
 80036f6:	2b0b      	cmp	r3, #11
 80036f8:	d90f      	bls.n	800371a <_malloc_r+0x7e>
 80036fa:	600b      	str	r3, [r1, #0]
 80036fc:	18cc      	adds	r4, r1, r3
 80036fe:	50cd      	str	r5, [r1, r3]
 8003700:	4630      	mov	r0, r6
 8003702:	f000 fb68 	bl	8003dd6 <__malloc_unlock>
 8003706:	f104 000b 	add.w	r0, r4, #11
 800370a:	1d23      	adds	r3, r4, #4
 800370c:	f020 0007 	bic.w	r0, r0, #7
 8003710:	1ac3      	subs	r3, r0, r3
 8003712:	d0d3      	beq.n	80036bc <_malloc_r+0x20>
 8003714:	425a      	negs	r2, r3
 8003716:	50e2      	str	r2, [r4, r3]
 8003718:	e7d0      	b.n	80036bc <_malloc_r+0x20>
 800371a:	684b      	ldr	r3, [r1, #4]
 800371c:	428c      	cmp	r4, r1
 800371e:	bf16      	itet	ne
 8003720:	6063      	strne	r3, [r4, #4]
 8003722:	6013      	streq	r3, [r2, #0]
 8003724:	460c      	movne	r4, r1
 8003726:	e7eb      	b.n	8003700 <_malloc_r+0x64>
 8003728:	460c      	mov	r4, r1
 800372a:	6849      	ldr	r1, [r1, #4]
 800372c:	e7cc      	b.n	80036c8 <_malloc_r+0x2c>
 800372e:	1cc4      	adds	r4, r0, #3
 8003730:	f024 0403 	bic.w	r4, r4, #3
 8003734:	42a0      	cmp	r0, r4
 8003736:	d005      	beq.n	8003744 <_malloc_r+0xa8>
 8003738:	1a21      	subs	r1, r4, r0
 800373a:	4630      	mov	r0, r6
 800373c:	f000 fb08 	bl	8003d50 <_sbrk_r>
 8003740:	3001      	adds	r0, #1
 8003742:	d0cf      	beq.n	80036e4 <_malloc_r+0x48>
 8003744:	6025      	str	r5, [r4, #0]
 8003746:	e7db      	b.n	8003700 <_malloc_r+0x64>
 8003748:	200000b8 	.word	0x200000b8
 800374c:	200000bc 	.word	0x200000bc

08003750 <_realloc_r>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	4607      	mov	r7, r0
 8003754:	4614      	mov	r4, r2
 8003756:	460e      	mov	r6, r1
 8003758:	b921      	cbnz	r1, 8003764 <_realloc_r+0x14>
 800375a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800375e:	4611      	mov	r1, r2
 8003760:	f7ff bf9c 	b.w	800369c <_malloc_r>
 8003764:	b922      	cbnz	r2, 8003770 <_realloc_r+0x20>
 8003766:	f000 fb37 	bl	8003dd8 <_free_r>
 800376a:	4625      	mov	r5, r4
 800376c:	4628      	mov	r0, r5
 800376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003770:	f000 fb7e 	bl	8003e70 <_malloc_usable_size_r>
 8003774:	42a0      	cmp	r0, r4
 8003776:	d20f      	bcs.n	8003798 <_realloc_r+0x48>
 8003778:	4621      	mov	r1, r4
 800377a:	4638      	mov	r0, r7
 800377c:	f7ff ff8e 	bl	800369c <_malloc_r>
 8003780:	4605      	mov	r5, r0
 8003782:	2800      	cmp	r0, #0
 8003784:	d0f2      	beq.n	800376c <_realloc_r+0x1c>
 8003786:	4631      	mov	r1, r6
 8003788:	4622      	mov	r2, r4
 800378a:	f000 faff 	bl	8003d8c <memcpy>
 800378e:	4631      	mov	r1, r6
 8003790:	4638      	mov	r0, r7
 8003792:	f000 fb21 	bl	8003dd8 <_free_r>
 8003796:	e7e9      	b.n	800376c <_realloc_r+0x1c>
 8003798:	4635      	mov	r5, r6
 800379a:	e7e7      	b.n	800376c <_realloc_r+0x1c>

0800379c <__ssputs_r>:
 800379c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a0:	688e      	ldr	r6, [r1, #8]
 80037a2:	4682      	mov	sl, r0
 80037a4:	429e      	cmp	r6, r3
 80037a6:	460c      	mov	r4, r1
 80037a8:	4690      	mov	r8, r2
 80037aa:	4699      	mov	r9, r3
 80037ac:	d837      	bhi.n	800381e <__ssputs_r+0x82>
 80037ae:	898a      	ldrh	r2, [r1, #12]
 80037b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037b4:	d031      	beq.n	800381a <__ssputs_r+0x7e>
 80037b6:	2302      	movs	r3, #2
 80037b8:	6825      	ldr	r5, [r4, #0]
 80037ba:	6909      	ldr	r1, [r1, #16]
 80037bc:	1a6f      	subs	r7, r5, r1
 80037be:	6965      	ldr	r5, [r4, #20]
 80037c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80037c8:	f109 0301 	add.w	r3, r9, #1
 80037cc:	443b      	add	r3, r7
 80037ce:	429d      	cmp	r5, r3
 80037d0:	bf38      	it	cc
 80037d2:	461d      	movcc	r5, r3
 80037d4:	0553      	lsls	r3, r2, #21
 80037d6:	d530      	bpl.n	800383a <__ssputs_r+0x9e>
 80037d8:	4629      	mov	r1, r5
 80037da:	f7ff ff5f 	bl	800369c <_malloc_r>
 80037de:	4606      	mov	r6, r0
 80037e0:	b950      	cbnz	r0, 80037f8 <__ssputs_r+0x5c>
 80037e2:	230c      	movs	r3, #12
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	f8ca 3000 	str.w	r3, [sl]
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f8:	463a      	mov	r2, r7
 80037fa:	6921      	ldr	r1, [r4, #16]
 80037fc:	f000 fac6 	bl	8003d8c <memcpy>
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380a:	81a3      	strh	r3, [r4, #12]
 800380c:	6126      	str	r6, [r4, #16]
 800380e:	443e      	add	r6, r7
 8003810:	6026      	str	r6, [r4, #0]
 8003812:	464e      	mov	r6, r9
 8003814:	6165      	str	r5, [r4, #20]
 8003816:	1bed      	subs	r5, r5, r7
 8003818:	60a5      	str	r5, [r4, #8]
 800381a:	454e      	cmp	r6, r9
 800381c:	d900      	bls.n	8003820 <__ssputs_r+0x84>
 800381e:	464e      	mov	r6, r9
 8003820:	4632      	mov	r2, r6
 8003822:	4641      	mov	r1, r8
 8003824:	6820      	ldr	r0, [r4, #0]
 8003826:	f000 fabc 	bl	8003da2 <memmove>
 800382a:	68a3      	ldr	r3, [r4, #8]
 800382c:	2000      	movs	r0, #0
 800382e:	1b9b      	subs	r3, r3, r6
 8003830:	60a3      	str	r3, [r4, #8]
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	441e      	add	r6, r3
 8003836:	6026      	str	r6, [r4, #0]
 8003838:	e7dc      	b.n	80037f4 <__ssputs_r+0x58>
 800383a:	462a      	mov	r2, r5
 800383c:	f7ff ff88 	bl	8003750 <_realloc_r>
 8003840:	4606      	mov	r6, r0
 8003842:	2800      	cmp	r0, #0
 8003844:	d1e2      	bne.n	800380c <__ssputs_r+0x70>
 8003846:	6921      	ldr	r1, [r4, #16]
 8003848:	4650      	mov	r0, sl
 800384a:	f000 fac5 	bl	8003dd8 <_free_r>
 800384e:	e7c8      	b.n	80037e2 <__ssputs_r+0x46>

08003850 <_svfiprintf_r>:
 8003850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	461d      	mov	r5, r3
 8003856:	898b      	ldrh	r3, [r1, #12]
 8003858:	b09d      	sub	sp, #116	; 0x74
 800385a:	061f      	lsls	r7, r3, #24
 800385c:	4680      	mov	r8, r0
 800385e:	460c      	mov	r4, r1
 8003860:	4616      	mov	r6, r2
 8003862:	d50f      	bpl.n	8003884 <_svfiprintf_r+0x34>
 8003864:	690b      	ldr	r3, [r1, #16]
 8003866:	b96b      	cbnz	r3, 8003884 <_svfiprintf_r+0x34>
 8003868:	2140      	movs	r1, #64	; 0x40
 800386a:	f7ff ff17 	bl	800369c <_malloc_r>
 800386e:	6020      	str	r0, [r4, #0]
 8003870:	6120      	str	r0, [r4, #16]
 8003872:	b928      	cbnz	r0, 8003880 <_svfiprintf_r+0x30>
 8003874:	230c      	movs	r3, #12
 8003876:	f8c8 3000 	str.w	r3, [r8]
 800387a:	f04f 30ff 	mov.w	r0, #4294967295
 800387e:	e0c8      	b.n	8003a12 <_svfiprintf_r+0x1c2>
 8003880:	2340      	movs	r3, #64	; 0x40
 8003882:	6163      	str	r3, [r4, #20]
 8003884:	2300      	movs	r3, #0
 8003886:	9309      	str	r3, [sp, #36]	; 0x24
 8003888:	2320      	movs	r3, #32
 800388a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800388e:	2330      	movs	r3, #48	; 0x30
 8003890:	f04f 0b01 	mov.w	fp, #1
 8003894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003898:	9503      	str	r5, [sp, #12]
 800389a:	4637      	mov	r7, r6
 800389c:	463d      	mov	r5, r7
 800389e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80038a2:	b10b      	cbz	r3, 80038a8 <_svfiprintf_r+0x58>
 80038a4:	2b25      	cmp	r3, #37	; 0x25
 80038a6:	d13e      	bne.n	8003926 <_svfiprintf_r+0xd6>
 80038a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80038ac:	d00b      	beq.n	80038c6 <_svfiprintf_r+0x76>
 80038ae:	4653      	mov	r3, sl
 80038b0:	4632      	mov	r2, r6
 80038b2:	4621      	mov	r1, r4
 80038b4:	4640      	mov	r0, r8
 80038b6:	f7ff ff71 	bl	800379c <__ssputs_r>
 80038ba:	3001      	adds	r0, #1
 80038bc:	f000 80a4 	beq.w	8003a08 <_svfiprintf_r+0x1b8>
 80038c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c2:	4453      	add	r3, sl
 80038c4:	9309      	str	r3, [sp, #36]	; 0x24
 80038c6:	783b      	ldrb	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 809d 	beq.w	8003a08 <_svfiprintf_r+0x1b8>
 80038ce:	2300      	movs	r3, #0
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038d8:	9304      	str	r3, [sp, #16]
 80038da:	9307      	str	r3, [sp, #28]
 80038dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038e0:	931a      	str	r3, [sp, #104]	; 0x68
 80038e2:	462f      	mov	r7, r5
 80038e4:	2205      	movs	r2, #5
 80038e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80038ea:	4850      	ldr	r0, [pc, #320]	; (8003a2c <_svfiprintf_r+0x1dc>)
 80038ec:	f000 fa40 	bl	8003d70 <memchr>
 80038f0:	9b04      	ldr	r3, [sp, #16]
 80038f2:	b9d0      	cbnz	r0, 800392a <_svfiprintf_r+0xda>
 80038f4:	06d9      	lsls	r1, r3, #27
 80038f6:	bf44      	itt	mi
 80038f8:	2220      	movmi	r2, #32
 80038fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80038fe:	071a      	lsls	r2, r3, #28
 8003900:	bf44      	itt	mi
 8003902:	222b      	movmi	r2, #43	; 0x2b
 8003904:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003908:	782a      	ldrb	r2, [r5, #0]
 800390a:	2a2a      	cmp	r2, #42	; 0x2a
 800390c:	d015      	beq.n	800393a <_svfiprintf_r+0xea>
 800390e:	462f      	mov	r7, r5
 8003910:	2000      	movs	r0, #0
 8003912:	250a      	movs	r5, #10
 8003914:	9a07      	ldr	r2, [sp, #28]
 8003916:	4639      	mov	r1, r7
 8003918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800391c:	3b30      	subs	r3, #48	; 0x30
 800391e:	2b09      	cmp	r3, #9
 8003920:	d94d      	bls.n	80039be <_svfiprintf_r+0x16e>
 8003922:	b1b8      	cbz	r0, 8003954 <_svfiprintf_r+0x104>
 8003924:	e00f      	b.n	8003946 <_svfiprintf_r+0xf6>
 8003926:	462f      	mov	r7, r5
 8003928:	e7b8      	b.n	800389c <_svfiprintf_r+0x4c>
 800392a:	4a40      	ldr	r2, [pc, #256]	; (8003a2c <_svfiprintf_r+0x1dc>)
 800392c:	463d      	mov	r5, r7
 800392e:	1a80      	subs	r0, r0, r2
 8003930:	fa0b f000 	lsl.w	r0, fp, r0
 8003934:	4318      	orrs	r0, r3
 8003936:	9004      	str	r0, [sp, #16]
 8003938:	e7d3      	b.n	80038e2 <_svfiprintf_r+0x92>
 800393a:	9a03      	ldr	r2, [sp, #12]
 800393c:	1d11      	adds	r1, r2, #4
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	9103      	str	r1, [sp, #12]
 8003942:	2a00      	cmp	r2, #0
 8003944:	db01      	blt.n	800394a <_svfiprintf_r+0xfa>
 8003946:	9207      	str	r2, [sp, #28]
 8003948:	e004      	b.n	8003954 <_svfiprintf_r+0x104>
 800394a:	4252      	negs	r2, r2
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	9207      	str	r2, [sp, #28]
 8003952:	9304      	str	r3, [sp, #16]
 8003954:	783b      	ldrb	r3, [r7, #0]
 8003956:	2b2e      	cmp	r3, #46	; 0x2e
 8003958:	d10c      	bne.n	8003974 <_svfiprintf_r+0x124>
 800395a:	787b      	ldrb	r3, [r7, #1]
 800395c:	2b2a      	cmp	r3, #42	; 0x2a
 800395e:	d133      	bne.n	80039c8 <_svfiprintf_r+0x178>
 8003960:	9b03      	ldr	r3, [sp, #12]
 8003962:	3702      	adds	r7, #2
 8003964:	1d1a      	adds	r2, r3, #4
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	9203      	str	r2, [sp, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	bfb8      	it	lt
 800396e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003972:	9305      	str	r3, [sp, #20]
 8003974:	4d2e      	ldr	r5, [pc, #184]	; (8003a30 <_svfiprintf_r+0x1e0>)
 8003976:	2203      	movs	r2, #3
 8003978:	7839      	ldrb	r1, [r7, #0]
 800397a:	4628      	mov	r0, r5
 800397c:	f000 f9f8 	bl	8003d70 <memchr>
 8003980:	b138      	cbz	r0, 8003992 <_svfiprintf_r+0x142>
 8003982:	2340      	movs	r3, #64	; 0x40
 8003984:	1b40      	subs	r0, r0, r5
 8003986:	fa03 f000 	lsl.w	r0, r3, r0
 800398a:	9b04      	ldr	r3, [sp, #16]
 800398c:	3701      	adds	r7, #1
 800398e:	4303      	orrs	r3, r0
 8003990:	9304      	str	r3, [sp, #16]
 8003992:	7839      	ldrb	r1, [r7, #0]
 8003994:	2206      	movs	r2, #6
 8003996:	4827      	ldr	r0, [pc, #156]	; (8003a34 <_svfiprintf_r+0x1e4>)
 8003998:	1c7e      	adds	r6, r7, #1
 800399a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800399e:	f000 f9e7 	bl	8003d70 <memchr>
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d038      	beq.n	8003a18 <_svfiprintf_r+0x1c8>
 80039a6:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <_svfiprintf_r+0x1e8>)
 80039a8:	bb13      	cbnz	r3, 80039f0 <_svfiprintf_r+0x1a0>
 80039aa:	9b03      	ldr	r3, [sp, #12]
 80039ac:	3307      	adds	r3, #7
 80039ae:	f023 0307 	bic.w	r3, r3, #7
 80039b2:	3308      	adds	r3, #8
 80039b4:	9303      	str	r3, [sp, #12]
 80039b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039b8:	444b      	add	r3, r9
 80039ba:	9309      	str	r3, [sp, #36]	; 0x24
 80039bc:	e76d      	b.n	800389a <_svfiprintf_r+0x4a>
 80039be:	fb05 3202 	mla	r2, r5, r2, r3
 80039c2:	2001      	movs	r0, #1
 80039c4:	460f      	mov	r7, r1
 80039c6:	e7a6      	b.n	8003916 <_svfiprintf_r+0xc6>
 80039c8:	2300      	movs	r3, #0
 80039ca:	250a      	movs	r5, #10
 80039cc:	4619      	mov	r1, r3
 80039ce:	3701      	adds	r7, #1
 80039d0:	9305      	str	r3, [sp, #20]
 80039d2:	4638      	mov	r0, r7
 80039d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039d8:	3a30      	subs	r2, #48	; 0x30
 80039da:	2a09      	cmp	r2, #9
 80039dc:	d903      	bls.n	80039e6 <_svfiprintf_r+0x196>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0c8      	beq.n	8003974 <_svfiprintf_r+0x124>
 80039e2:	9105      	str	r1, [sp, #20]
 80039e4:	e7c6      	b.n	8003974 <_svfiprintf_r+0x124>
 80039e6:	fb05 2101 	mla	r1, r5, r1, r2
 80039ea:	2301      	movs	r3, #1
 80039ec:	4607      	mov	r7, r0
 80039ee:	e7f0      	b.n	80039d2 <_svfiprintf_r+0x182>
 80039f0:	ab03      	add	r3, sp, #12
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	4622      	mov	r2, r4
 80039f6:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <_svfiprintf_r+0x1ec>)
 80039f8:	a904      	add	r1, sp, #16
 80039fa:	4640      	mov	r0, r8
 80039fc:	f3af 8000 	nop.w
 8003a00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a04:	4681      	mov	r9, r0
 8003a06:	d1d6      	bne.n	80039b6 <_svfiprintf_r+0x166>
 8003a08:	89a3      	ldrh	r3, [r4, #12]
 8003a0a:	065b      	lsls	r3, r3, #25
 8003a0c:	f53f af35 	bmi.w	800387a <_svfiprintf_r+0x2a>
 8003a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a12:	b01d      	add	sp, #116	; 0x74
 8003a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a18:	ab03      	add	r3, sp, #12
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	4622      	mov	r2, r4
 8003a1e:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <_svfiprintf_r+0x1ec>)
 8003a20:	a904      	add	r1, sp, #16
 8003a22:	4640      	mov	r0, r8
 8003a24:	f000 f882 	bl	8003b2c <_printf_i>
 8003a28:	e7ea      	b.n	8003a00 <_svfiprintf_r+0x1b0>
 8003a2a:	bf00      	nop
 8003a2c:	08003eac 	.word	0x08003eac
 8003a30:	08003eb2 	.word	0x08003eb2
 8003a34:	08003eb6 	.word	0x08003eb6
 8003a38:	00000000 	.word	0x00000000
 8003a3c:	0800379d 	.word	0x0800379d

08003a40 <_printf_common>:
 8003a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a44:	4691      	mov	r9, r2
 8003a46:	461f      	mov	r7, r3
 8003a48:	688a      	ldr	r2, [r1, #8]
 8003a4a:	690b      	ldr	r3, [r1, #16]
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	bfb8      	it	lt
 8003a52:	4613      	movlt	r3, r2
 8003a54:	f8c9 3000 	str.w	r3, [r9]
 8003a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a62:	b112      	cbz	r2, 8003a6a <_printf_common+0x2a>
 8003a64:	3301      	adds	r3, #1
 8003a66:	f8c9 3000 	str.w	r3, [r9]
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	0699      	lsls	r1, r3, #26
 8003a6e:	bf42      	ittt	mi
 8003a70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003a74:	3302      	addmi	r3, #2
 8003a76:	f8c9 3000 	strmi.w	r3, [r9]
 8003a7a:	6825      	ldr	r5, [r4, #0]
 8003a7c:	f015 0506 	ands.w	r5, r5, #6
 8003a80:	d107      	bne.n	8003a92 <_printf_common+0x52>
 8003a82:	f104 0a19 	add.w	sl, r4, #25
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	f8d9 2000 	ldr.w	r2, [r9]
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	42ab      	cmp	r3, r5
 8003a90:	dc29      	bgt.n	8003ae6 <_printf_common+0xa6>
 8003a92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003a96:	6822      	ldr	r2, [r4, #0]
 8003a98:	3300      	adds	r3, #0
 8003a9a:	bf18      	it	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	0692      	lsls	r2, r2, #26
 8003aa0:	d42e      	bmi.n	8003b00 <_printf_common+0xc0>
 8003aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aa6:	4639      	mov	r1, r7
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	47c0      	blx	r8
 8003aac:	3001      	adds	r0, #1
 8003aae:	d021      	beq.n	8003af4 <_printf_common+0xb4>
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	68e5      	ldr	r5, [r4, #12]
 8003ab4:	f003 0306 	and.w	r3, r3, #6
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	bf18      	it	ne
 8003abc:	2500      	movne	r5, #0
 8003abe:	f8d9 2000 	ldr.w	r2, [r9]
 8003ac2:	f04f 0900 	mov.w	r9, #0
 8003ac6:	bf08      	it	eq
 8003ac8:	1aad      	subeq	r5, r5, r2
 8003aca:	68a3      	ldr	r3, [r4, #8]
 8003acc:	6922      	ldr	r2, [r4, #16]
 8003ace:	bf08      	it	eq
 8003ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	bfc4      	itt	gt
 8003ad8:	1a9b      	subgt	r3, r3, r2
 8003ada:	18ed      	addgt	r5, r5, r3
 8003adc:	341a      	adds	r4, #26
 8003ade:	454d      	cmp	r5, r9
 8003ae0:	d11a      	bne.n	8003b18 <_printf_common+0xd8>
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	e008      	b.n	8003af8 <_printf_common+0xb8>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	4652      	mov	r2, sl
 8003aea:	4639      	mov	r1, r7
 8003aec:	4630      	mov	r0, r6
 8003aee:	47c0      	blx	r8
 8003af0:	3001      	adds	r0, #1
 8003af2:	d103      	bne.n	8003afc <_printf_common+0xbc>
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afc:	3501      	adds	r5, #1
 8003afe:	e7c2      	b.n	8003a86 <_printf_common+0x46>
 8003b00:	2030      	movs	r0, #48	; 0x30
 8003b02:	18e1      	adds	r1, r4, r3
 8003b04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b0e:	4422      	add	r2, r4
 8003b10:	3302      	adds	r3, #2
 8003b12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b16:	e7c4      	b.n	8003aa2 <_printf_common+0x62>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	4622      	mov	r2, r4
 8003b1c:	4639      	mov	r1, r7
 8003b1e:	4630      	mov	r0, r6
 8003b20:	47c0      	blx	r8
 8003b22:	3001      	adds	r0, #1
 8003b24:	d0e6      	beq.n	8003af4 <_printf_common+0xb4>
 8003b26:	f109 0901 	add.w	r9, r9, #1
 8003b2a:	e7d8      	b.n	8003ade <_printf_common+0x9e>

08003b2c <_printf_i>:
 8003b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003b34:	460c      	mov	r4, r1
 8003b36:	7e09      	ldrb	r1, [r1, #24]
 8003b38:	b085      	sub	sp, #20
 8003b3a:	296e      	cmp	r1, #110	; 0x6e
 8003b3c:	4617      	mov	r7, r2
 8003b3e:	4606      	mov	r6, r0
 8003b40:	4698      	mov	r8, r3
 8003b42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b44:	f000 80b3 	beq.w	8003cae <_printf_i+0x182>
 8003b48:	d822      	bhi.n	8003b90 <_printf_i+0x64>
 8003b4a:	2963      	cmp	r1, #99	; 0x63
 8003b4c:	d036      	beq.n	8003bbc <_printf_i+0x90>
 8003b4e:	d80a      	bhi.n	8003b66 <_printf_i+0x3a>
 8003b50:	2900      	cmp	r1, #0
 8003b52:	f000 80b9 	beq.w	8003cc8 <_printf_i+0x19c>
 8003b56:	2958      	cmp	r1, #88	; 0x58
 8003b58:	f000 8083 	beq.w	8003c62 <_printf_i+0x136>
 8003b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003b64:	e032      	b.n	8003bcc <_printf_i+0xa0>
 8003b66:	2964      	cmp	r1, #100	; 0x64
 8003b68:	d001      	beq.n	8003b6e <_printf_i+0x42>
 8003b6a:	2969      	cmp	r1, #105	; 0x69
 8003b6c:	d1f6      	bne.n	8003b5c <_printf_i+0x30>
 8003b6e:	6820      	ldr	r0, [r4, #0]
 8003b70:	6813      	ldr	r3, [r2, #0]
 8003b72:	0605      	lsls	r5, r0, #24
 8003b74:	f103 0104 	add.w	r1, r3, #4
 8003b78:	d52a      	bpl.n	8003bd0 <_printf_i+0xa4>
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6011      	str	r1, [r2, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da03      	bge.n	8003b8a <_printf_i+0x5e>
 8003b82:	222d      	movs	r2, #45	; 0x2d
 8003b84:	425b      	negs	r3, r3
 8003b86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003b8a:	486f      	ldr	r0, [pc, #444]	; (8003d48 <_printf_i+0x21c>)
 8003b8c:	220a      	movs	r2, #10
 8003b8e:	e039      	b.n	8003c04 <_printf_i+0xd8>
 8003b90:	2973      	cmp	r1, #115	; 0x73
 8003b92:	f000 809d 	beq.w	8003cd0 <_printf_i+0x1a4>
 8003b96:	d808      	bhi.n	8003baa <_printf_i+0x7e>
 8003b98:	296f      	cmp	r1, #111	; 0x6f
 8003b9a:	d020      	beq.n	8003bde <_printf_i+0xb2>
 8003b9c:	2970      	cmp	r1, #112	; 0x70
 8003b9e:	d1dd      	bne.n	8003b5c <_printf_i+0x30>
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	f043 0320 	orr.w	r3, r3, #32
 8003ba6:	6023      	str	r3, [r4, #0]
 8003ba8:	e003      	b.n	8003bb2 <_printf_i+0x86>
 8003baa:	2975      	cmp	r1, #117	; 0x75
 8003bac:	d017      	beq.n	8003bde <_printf_i+0xb2>
 8003bae:	2978      	cmp	r1, #120	; 0x78
 8003bb0:	d1d4      	bne.n	8003b5c <_printf_i+0x30>
 8003bb2:	2378      	movs	r3, #120	; 0x78
 8003bb4:	4865      	ldr	r0, [pc, #404]	; (8003d4c <_printf_i+0x220>)
 8003bb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bba:	e055      	b.n	8003c68 <_printf_i+0x13c>
 8003bbc:	6813      	ldr	r3, [r2, #0]
 8003bbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc2:	1d19      	adds	r1, r3, #4
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6011      	str	r1, [r2, #0]
 8003bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e08c      	b.n	8003cea <_printf_i+0x1be>
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bd6:	6011      	str	r1, [r2, #0]
 8003bd8:	bf18      	it	ne
 8003bda:	b21b      	sxthne	r3, r3
 8003bdc:	e7cf      	b.n	8003b7e <_printf_i+0x52>
 8003bde:	6813      	ldr	r3, [r2, #0]
 8003be0:	6825      	ldr	r5, [r4, #0]
 8003be2:	1d18      	adds	r0, r3, #4
 8003be4:	6010      	str	r0, [r2, #0]
 8003be6:	0628      	lsls	r0, r5, #24
 8003be8:	d501      	bpl.n	8003bee <_printf_i+0xc2>
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	e002      	b.n	8003bf4 <_printf_i+0xc8>
 8003bee:	0668      	lsls	r0, r5, #25
 8003bf0:	d5fb      	bpl.n	8003bea <_printf_i+0xbe>
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	296f      	cmp	r1, #111	; 0x6f
 8003bf6:	bf14      	ite	ne
 8003bf8:	220a      	movne	r2, #10
 8003bfa:	2208      	moveq	r2, #8
 8003bfc:	4852      	ldr	r0, [pc, #328]	; (8003d48 <_printf_i+0x21c>)
 8003bfe:	2100      	movs	r1, #0
 8003c00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c04:	6865      	ldr	r5, [r4, #4]
 8003c06:	2d00      	cmp	r5, #0
 8003c08:	60a5      	str	r5, [r4, #8]
 8003c0a:	f2c0 8095 	blt.w	8003d38 <_printf_i+0x20c>
 8003c0e:	6821      	ldr	r1, [r4, #0]
 8003c10:	f021 0104 	bic.w	r1, r1, #4
 8003c14:	6021      	str	r1, [r4, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d13d      	bne.n	8003c96 <_printf_i+0x16a>
 8003c1a:	2d00      	cmp	r5, #0
 8003c1c:	f040 808e 	bne.w	8003d3c <_printf_i+0x210>
 8003c20:	4665      	mov	r5, ip
 8003c22:	2a08      	cmp	r2, #8
 8003c24:	d10b      	bne.n	8003c3e <_printf_i+0x112>
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	07db      	lsls	r3, r3, #31
 8003c2a:	d508      	bpl.n	8003c3e <_printf_i+0x112>
 8003c2c:	6923      	ldr	r3, [r4, #16]
 8003c2e:	6862      	ldr	r2, [r4, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	bfde      	ittt	le
 8003c34:	2330      	movle	r3, #48	; 0x30
 8003c36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c3e:	ebac 0305 	sub.w	r3, ip, r5
 8003c42:	6123      	str	r3, [r4, #16]
 8003c44:	f8cd 8000 	str.w	r8, [sp]
 8003c48:	463b      	mov	r3, r7
 8003c4a:	aa03      	add	r2, sp, #12
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f7ff fef6 	bl	8003a40 <_printf_common>
 8003c54:	3001      	adds	r0, #1
 8003c56:	d14d      	bne.n	8003cf4 <_printf_i+0x1c8>
 8003c58:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5c:	b005      	add	sp, #20
 8003c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c62:	4839      	ldr	r0, [pc, #228]	; (8003d48 <_printf_i+0x21c>)
 8003c64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003c68:	6813      	ldr	r3, [r2, #0]
 8003c6a:	6821      	ldr	r1, [r4, #0]
 8003c6c:	1d1d      	adds	r5, r3, #4
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6015      	str	r5, [r2, #0]
 8003c72:	060a      	lsls	r2, r1, #24
 8003c74:	d50b      	bpl.n	8003c8e <_printf_i+0x162>
 8003c76:	07ca      	lsls	r2, r1, #31
 8003c78:	bf44      	itt	mi
 8003c7a:	f041 0120 	orrmi.w	r1, r1, #32
 8003c7e:	6021      	strmi	r1, [r4, #0]
 8003c80:	b91b      	cbnz	r3, 8003c8a <_printf_i+0x15e>
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	f022 0220 	bic.w	r2, r2, #32
 8003c88:	6022      	str	r2, [r4, #0]
 8003c8a:	2210      	movs	r2, #16
 8003c8c:	e7b7      	b.n	8003bfe <_printf_i+0xd2>
 8003c8e:	064d      	lsls	r5, r1, #25
 8003c90:	bf48      	it	mi
 8003c92:	b29b      	uxthmi	r3, r3
 8003c94:	e7ef      	b.n	8003c76 <_printf_i+0x14a>
 8003c96:	4665      	mov	r5, ip
 8003c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c9c:	fb02 3311 	mls	r3, r2, r1, r3
 8003ca0:	5cc3      	ldrb	r3, [r0, r3]
 8003ca2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	2900      	cmp	r1, #0
 8003caa:	d1f5      	bne.n	8003c98 <_printf_i+0x16c>
 8003cac:	e7b9      	b.n	8003c22 <_printf_i+0xf6>
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	6825      	ldr	r5, [r4, #0]
 8003cb2:	1d18      	adds	r0, r3, #4
 8003cb4:	6961      	ldr	r1, [r4, #20]
 8003cb6:	6010      	str	r0, [r2, #0]
 8003cb8:	0628      	lsls	r0, r5, #24
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	d501      	bpl.n	8003cc2 <_printf_i+0x196>
 8003cbe:	6019      	str	r1, [r3, #0]
 8003cc0:	e002      	b.n	8003cc8 <_printf_i+0x19c>
 8003cc2:	066a      	lsls	r2, r5, #25
 8003cc4:	d5fb      	bpl.n	8003cbe <_printf_i+0x192>
 8003cc6:	8019      	strh	r1, [r3, #0]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	4665      	mov	r5, ip
 8003ccc:	6123      	str	r3, [r4, #16]
 8003cce:	e7b9      	b.n	8003c44 <_printf_i+0x118>
 8003cd0:	6813      	ldr	r3, [r2, #0]
 8003cd2:	1d19      	adds	r1, r3, #4
 8003cd4:	6011      	str	r1, [r2, #0]
 8003cd6:	681d      	ldr	r5, [r3, #0]
 8003cd8:	6862      	ldr	r2, [r4, #4]
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4628      	mov	r0, r5
 8003cde:	f000 f847 	bl	8003d70 <memchr>
 8003ce2:	b108      	cbz	r0, 8003ce8 <_printf_i+0x1bc>
 8003ce4:	1b40      	subs	r0, r0, r5
 8003ce6:	6060      	str	r0, [r4, #4]
 8003ce8:	6863      	ldr	r3, [r4, #4]
 8003cea:	6123      	str	r3, [r4, #16]
 8003cec:	2300      	movs	r3, #0
 8003cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cf2:	e7a7      	b.n	8003c44 <_printf_i+0x118>
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	462a      	mov	r2, r5
 8003cf8:	4639      	mov	r1, r7
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	47c0      	blx	r8
 8003cfe:	3001      	adds	r0, #1
 8003d00:	d0aa      	beq.n	8003c58 <_printf_i+0x12c>
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	079b      	lsls	r3, r3, #30
 8003d06:	d413      	bmi.n	8003d30 <_printf_i+0x204>
 8003d08:	68e0      	ldr	r0, [r4, #12]
 8003d0a:	9b03      	ldr	r3, [sp, #12]
 8003d0c:	4298      	cmp	r0, r3
 8003d0e:	bfb8      	it	lt
 8003d10:	4618      	movlt	r0, r3
 8003d12:	e7a3      	b.n	8003c5c <_printf_i+0x130>
 8003d14:	2301      	movs	r3, #1
 8003d16:	464a      	mov	r2, r9
 8003d18:	4639      	mov	r1, r7
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	47c0      	blx	r8
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d09a      	beq.n	8003c58 <_printf_i+0x12c>
 8003d22:	3501      	adds	r5, #1
 8003d24:	68e3      	ldr	r3, [r4, #12]
 8003d26:	9a03      	ldr	r2, [sp, #12]
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	42ab      	cmp	r3, r5
 8003d2c:	dcf2      	bgt.n	8003d14 <_printf_i+0x1e8>
 8003d2e:	e7eb      	b.n	8003d08 <_printf_i+0x1dc>
 8003d30:	2500      	movs	r5, #0
 8003d32:	f104 0919 	add.w	r9, r4, #25
 8003d36:	e7f5      	b.n	8003d24 <_printf_i+0x1f8>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ac      	bne.n	8003c96 <_printf_i+0x16a>
 8003d3c:	7803      	ldrb	r3, [r0, #0]
 8003d3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d46:	e76c      	b.n	8003c22 <_printf_i+0xf6>
 8003d48:	08003ebd 	.word	0x08003ebd
 8003d4c:	08003ece 	.word	0x08003ece

08003d50 <_sbrk_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	2300      	movs	r3, #0
 8003d54:	4c05      	ldr	r4, [pc, #20]	; (8003d6c <_sbrk_r+0x1c>)
 8003d56:	4605      	mov	r5, r0
 8003d58:	4608      	mov	r0, r1
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	f7ff fbf4 	bl	8003548 <_sbrk>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d102      	bne.n	8003d6a <_sbrk_r+0x1a>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	b103      	cbz	r3, 8003d6a <_sbrk_r+0x1a>
 8003d68:	602b      	str	r3, [r5, #0]
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	2000020c 	.word	0x2000020c

08003d70 <memchr>:
 8003d70:	b510      	push	{r4, lr}
 8003d72:	b2c9      	uxtb	r1, r1
 8003d74:	4402      	add	r2, r0
 8003d76:	4290      	cmp	r0, r2
 8003d78:	4603      	mov	r3, r0
 8003d7a:	d101      	bne.n	8003d80 <memchr+0x10>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e003      	b.n	8003d88 <memchr+0x18>
 8003d80:	781c      	ldrb	r4, [r3, #0]
 8003d82:	3001      	adds	r0, #1
 8003d84:	428c      	cmp	r4, r1
 8003d86:	d1f6      	bne.n	8003d76 <memchr+0x6>
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd10      	pop	{r4, pc}

08003d8c <memcpy>:
 8003d8c:	b510      	push	{r4, lr}
 8003d8e:	1e43      	subs	r3, r0, #1
 8003d90:	440a      	add	r2, r1
 8003d92:	4291      	cmp	r1, r2
 8003d94:	d100      	bne.n	8003d98 <memcpy+0xc>
 8003d96:	bd10      	pop	{r4, pc}
 8003d98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003da0:	e7f7      	b.n	8003d92 <memcpy+0x6>

08003da2 <memmove>:
 8003da2:	4288      	cmp	r0, r1
 8003da4:	b510      	push	{r4, lr}
 8003da6:	eb01 0302 	add.w	r3, r1, r2
 8003daa:	d807      	bhi.n	8003dbc <memmove+0x1a>
 8003dac:	1e42      	subs	r2, r0, #1
 8003dae:	4299      	cmp	r1, r3
 8003db0:	d00a      	beq.n	8003dc8 <memmove+0x26>
 8003db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003db6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003dba:	e7f8      	b.n	8003dae <memmove+0xc>
 8003dbc:	4283      	cmp	r3, r0
 8003dbe:	d9f5      	bls.n	8003dac <memmove+0xa>
 8003dc0:	1881      	adds	r1, r0, r2
 8003dc2:	1ad2      	subs	r2, r2, r3
 8003dc4:	42d3      	cmn	r3, r2
 8003dc6:	d100      	bne.n	8003dca <memmove+0x28>
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003dd2:	e7f7      	b.n	8003dc4 <memmove+0x22>

08003dd4 <__malloc_lock>:
 8003dd4:	4770      	bx	lr

08003dd6 <__malloc_unlock>:
 8003dd6:	4770      	bx	lr

08003dd8 <_free_r>:
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	4605      	mov	r5, r0
 8003ddc:	2900      	cmp	r1, #0
 8003dde:	d043      	beq.n	8003e68 <_free_r+0x90>
 8003de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003de4:	1f0c      	subs	r4, r1, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bfb8      	it	lt
 8003dea:	18e4      	addlt	r4, r4, r3
 8003dec:	f7ff fff2 	bl	8003dd4 <__malloc_lock>
 8003df0:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <_free_r+0x94>)
 8003df2:	6813      	ldr	r3, [r2, #0]
 8003df4:	4610      	mov	r0, r2
 8003df6:	b933      	cbnz	r3, 8003e06 <_free_r+0x2e>
 8003df8:	6063      	str	r3, [r4, #4]
 8003dfa:	6014      	str	r4, [r2, #0]
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e02:	f7ff bfe8 	b.w	8003dd6 <__malloc_unlock>
 8003e06:	42a3      	cmp	r3, r4
 8003e08:	d90b      	bls.n	8003e22 <_free_r+0x4a>
 8003e0a:	6821      	ldr	r1, [r4, #0]
 8003e0c:	1862      	adds	r2, r4, r1
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	bf01      	itttt	eq
 8003e12:	681a      	ldreq	r2, [r3, #0]
 8003e14:	685b      	ldreq	r3, [r3, #4]
 8003e16:	1852      	addeq	r2, r2, r1
 8003e18:	6022      	streq	r2, [r4, #0]
 8003e1a:	6063      	str	r3, [r4, #4]
 8003e1c:	6004      	str	r4, [r0, #0]
 8003e1e:	e7ed      	b.n	8003dfc <_free_r+0x24>
 8003e20:	4613      	mov	r3, r2
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	b10a      	cbz	r2, 8003e2a <_free_r+0x52>
 8003e26:	42a2      	cmp	r2, r4
 8003e28:	d9fa      	bls.n	8003e20 <_free_r+0x48>
 8003e2a:	6819      	ldr	r1, [r3, #0]
 8003e2c:	1858      	adds	r0, r3, r1
 8003e2e:	42a0      	cmp	r0, r4
 8003e30:	d10b      	bne.n	8003e4a <_free_r+0x72>
 8003e32:	6820      	ldr	r0, [r4, #0]
 8003e34:	4401      	add	r1, r0
 8003e36:	1858      	adds	r0, r3, r1
 8003e38:	4282      	cmp	r2, r0
 8003e3a:	6019      	str	r1, [r3, #0]
 8003e3c:	d1de      	bne.n	8003dfc <_free_r+0x24>
 8003e3e:	6810      	ldr	r0, [r2, #0]
 8003e40:	6852      	ldr	r2, [r2, #4]
 8003e42:	4401      	add	r1, r0
 8003e44:	6019      	str	r1, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	e7d8      	b.n	8003dfc <_free_r+0x24>
 8003e4a:	d902      	bls.n	8003e52 <_free_r+0x7a>
 8003e4c:	230c      	movs	r3, #12
 8003e4e:	602b      	str	r3, [r5, #0]
 8003e50:	e7d4      	b.n	8003dfc <_free_r+0x24>
 8003e52:	6820      	ldr	r0, [r4, #0]
 8003e54:	1821      	adds	r1, r4, r0
 8003e56:	428a      	cmp	r2, r1
 8003e58:	bf01      	itttt	eq
 8003e5a:	6811      	ldreq	r1, [r2, #0]
 8003e5c:	6852      	ldreq	r2, [r2, #4]
 8003e5e:	1809      	addeq	r1, r1, r0
 8003e60:	6021      	streq	r1, [r4, #0]
 8003e62:	6062      	str	r2, [r4, #4]
 8003e64:	605c      	str	r4, [r3, #4]
 8003e66:	e7c9      	b.n	8003dfc <_free_r+0x24>
 8003e68:	bd38      	pop	{r3, r4, r5, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200000b8 	.word	0x200000b8

08003e70 <_malloc_usable_size_r>:
 8003e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e74:	1f18      	subs	r0, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bfbc      	itt	lt
 8003e7a:	580b      	ldrlt	r3, [r1, r0]
 8003e7c:	18c0      	addlt	r0, r0, r3
 8003e7e:	4770      	bx	lr

08003e80 <_init>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	bf00      	nop
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr

08003e8c <_fini>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	bf00      	nop
 8003e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e92:	bc08      	pop	{r3}
 8003e94:	469e      	mov	lr, r3
 8003e96:	4770      	bx	lr
