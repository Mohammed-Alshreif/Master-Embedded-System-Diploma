
RTOS_PROJECT.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a84  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001bb4  08001bb4  00011bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001be8  08001be8  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001be8  08001be8  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001be8  08001be8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001be8  08001be8  00011be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bec  08001bec  00011bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000020  08001c10  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08001c10  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007eed  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001569  00000000  00000000  00027f36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003e0  00000000  00000000  000294a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000338  00000000  00000000  00029880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000041ca  00000000  00000000  00029bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004f11  00000000  00000000  0002dd82  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00010d39  00000000  00000000  00032c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000439cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ccc  00000000  00000000  00043a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08001b9c 	.word	0x08001b9c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08001b9c 	.word	0x08001b9c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
 *      Author: 20102
 */
#include "RTOS_CORTEX_M3_PORTING.h"
#include "stm32_speed_DRIVER.h"

void HardFault_Handler(){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}
void	MemManage_Handler(){
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}
void	BusFault_Handler(){
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}
void	UsageFault_Handler(){
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <HARD_WARE_INIT>:
}

//====================================
void HARD_WARE_INIT(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 8000238:	2100      	movs	r1, #0
 800023a:	2000      	movs	r0, #0
 800023c:	f000 fefa 	bl	8001034 <MCAL_speed_init>
	__NVIC_SetPriority(PendSV_IRQn, 15) ;
 8000240:	210f      	movs	r1, #15
 8000242:	f06f 0001 	mvn.w	r0, #1
 8000246:	f7ff ff9d 	bl	8000184 <__NVIC_SetPriority>
	pinmode(GPIOA, pin7, GPIO_MODE_OUTPUT_push_pull_Speed2);
 800024a:	2202      	movs	r2, #2
 800024c:	2107      	movs	r1, #7
 800024e:	480a      	ldr	r0, [pc, #40]	; (8000278 <HARD_WARE_INIT+0x44>)
 8000250:	f000 fc58 	bl	8000b04 <pinmode>
	pinmode(GPIOA, pin6, GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000254:	2202      	movs	r2, #2
 8000256:	2106      	movs	r1, #6
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <HARD_WARE_INIT+0x44>)
 800025a:	f000 fc53 	bl	8000b04 <pinmode>
	pinmode(GPIOB, pin0, GPIO_MODE_OUTPUT_push_pull_Speed2);
 800025e:	2202      	movs	r2, #2
 8000260:	2100      	movs	r1, #0
 8000262:	4806      	ldr	r0, [pc, #24]	; (800027c <HARD_WARE_INIT+0x48>)
 8000264:	f000 fc4e 	bl	8000b04 <pinmode>
	pinmode(GPIOB, pin1, GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000268:	2202      	movs	r2, #2
 800026a:	2101      	movs	r1, #1
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <HARD_WARE_INIT+0x48>)
 800026e:	f000 fc49 	bl	8000b04 <pinmode>

}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800
 800027c:	40010c00 	.word	0x40010c00

08000280 <SVC_Handler>:


//====================================

__attribute__((naked)) void SVC_Handler(){
	__asm("TST lr,#4 \n\t"
 8000280:	f01e 0f04 	tst.w	lr, #4
 8000284:	bf0c      	ite	eq
 8000286:	f3ef 8008 	mrseq	r0, MSP
 800028a:	f3ef 8009 	mrsne	r0, PSP
 800028e:	f000 bac9 	b.w	8000824 <OS_SVC_SERVICES>
			"ITE EQ \n\t"
			"MRSEQ r0,MSP \n\t"
			"MRSNE r0,PSP \n\t"
			"B OS_SVC_SERVICES");
}
 8000292:	bf00      	nop

08000294 <OS_TRIGDER_PENDSV>:



//====================================

void OS_TRIGDER_PENDSV(){
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <OS_TRIGDER_PENDSV+0x18>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a03      	ldr	r2, [pc, #12]	; (80002ac <OS_TRIGDER_PENDSV+0x18>)
 800029e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002a2:	6053      	str	r3, [r2, #4]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <TIMER_START>:
//====================================
void TIMER_START(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

	SysTick_Config( TICKS_TIMER);
 80002b4:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 80002b8:	f7ff ff8e 	bl	80001d8 <SysTick_Config>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}

080002c0 <OS_FIFO_INIT>:


#include "RTOS_FIFO.h"


FIFO_status_t OS_FIFO_INIT (FIFO_BUF_t* fifo,FIFO_TYPE* buff , uint16_t length){
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	4613      	mov	r3, r2
 80002cc:	80fb      	strh	r3, [r7, #6]

	if(!buff )
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d101      	bne.n	80002d8 <OS_FIFO_INIT+0x18>
		return FIFO_NULL;
 80002d4:	2301      	movs	r3, #1
 80002d6:	e011      	b.n	80002fc <OS_FIFO_INIT+0x3c>

	fifo->base = buff ;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	68ba      	ldr	r2, [r7, #8]
 80002dc:	609a      	str	r2, [r3, #8]
	fifo->head = fifo->base ;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	689a      	ldr	r2, [r3, #8]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	601a      	str	r2, [r3, #0]
	fifo->tail = fifo->base ;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	689a      	ldr	r2, [r3, #8]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	605a      	str	r2, [r3, #4]
	fifo->lenght = length;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	88fa      	ldrh	r2, [r7, #6]
 80002f2:	81da      	strh	r2, [r3, #14]
	fifo->count=0;
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	2200      	movs	r2, #0
 80002f8:	819a      	strh	r2, [r3, #12]

	return FIFO_NO_ERROR;
 80002fa:	2300      	movs	r3, #0

}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <OS_FIFO_ENQUEUE>:

/* *********************************** */

FIFO_status_t OS_FIFO_ENQUEUE (FIFO_BUF_t* fifo,FIFO_TYPE item){
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->lenght)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <OS_FIFO_ENQUEUE+0x1a>
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	89db      	ldrh	r3, [r3, #14]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d101      	bne.n	8000324 <OS_FIFO_ENQUEUE+0x1e>
		return FIFO_NULL;
 8000320:	2301      	movs	r3, #1
 8000322:	e02e      	b.n	8000382 <OS_FIFO_ENQUEUE+0x7c>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->count == fifo->lenght))
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	429a      	cmp	r2, r3
 800032e:	d107      	bne.n	8000340 <OS_FIFO_ENQUEUE+0x3a>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	899a      	ldrh	r2, [r3, #12]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	89db      	ldrh	r3, [r3, #14]
 8000338:	429a      	cmp	r2, r3
 800033a:	d101      	bne.n	8000340 <OS_FIFO_ENQUEUE+0x3a>
		return FIFO_FULL;
 800033c:	2302      	movs	r3, #2
 800033e:	e020      	b.n	8000382 <OS_FIFO_ENQUEUE+0x7c>

	*(fifo->tail)=item;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	601a      	str	r2, [r3, #0]
	fifo->count++;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	899b      	ldrh	r3, [r3, #12]
 800034c:	3301      	adds	r3, #1
 800034e:	b29a      	uxth	r2, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	819a      	strh	r2, [r3, #12]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->lenght )) - 4 ))
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	6892      	ldr	r2, [r2, #8]
 800035c:	4611      	mov	r1, r2
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	89d2      	ldrh	r2, [r2, #14]
 8000362:	0092      	lsls	r2, r2, #2
 8000364:	440a      	add	r2, r1
 8000366:	3a04      	subs	r2, #4
 8000368:	4293      	cmp	r3, r2
 800036a:	d104      	bne.n	8000376 <OS_FIFO_ENQUEUE+0x70>
		fifo->tail = fifo->base;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689a      	ldr	r2, [r3, #8]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	e004      	b.n	8000380 <OS_FIFO_ENQUEUE+0x7a>
	else
		fifo->tail++;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	1d1a      	adds	r2, r3, #4
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 8000380:	2300      	movs	r3, #0


}
 8000382:	4618      	mov	r0, r3
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <OS_FIFO_DEQUEUE>:

/* *********************************** */

FIFO_status_t OS_FIFO_DEQUEUE (FIFO_BUF_t* fifo, FIFO_TYPE* item){
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->lenght)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d003      	beq.n	80003a6 <OS_FIFO_DEQUEUE+0x1a>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	89db      	ldrh	r3, [r3, #14]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d101      	bne.n	80003aa <OS_FIFO_DEQUEUE+0x1e>
		return FIFO_NULL;
 80003a6:	2301      	movs	r3, #1
 80003a8:	e02d      	b.n	8000406 <OS_FIFO_DEQUEUE+0x7a>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d101      	bne.n	80003ba <OS_FIFO_DEQUEUE+0x2e>
		return FIFO_EMPTY;
 80003b6:	2303      	movs	r3, #3
 80003b8:	e025      	b.n	8000406 <OS_FIFO_DEQUEUE+0x7a>



	*item = *(fifo->head);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	601a      	str	r2, [r3, #0]
	*(fifo->head)=NULL;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
	fifo->count--;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	899b      	ldrh	r3, [r3, #12]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	819a      	strh	r2, [r3, #12]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->lenght )) - 4 ))
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	6892      	ldr	r2, [r2, #8]
 80003e0:	4611      	mov	r1, r2
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	89d2      	ldrh	r2, [r2, #14]
 80003e6:	0092      	lsls	r2, r2, #2
 80003e8:	440a      	add	r2, r1
 80003ea:	3a04      	subs	r2, #4
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d104      	bne.n	80003fa <OS_FIFO_DEQUEUE+0x6e>
		fifo->head = fifo->base;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	689a      	ldr	r2, [r3, #8]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	e004      	b.n	8000404 <OS_FIFO_DEQUEUE+0x78>
	else
		fifo->head++;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	1d1a      	adds	r2, r3, #4
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <idle_task_fun>:
	SVC_TERMINATE_task,
	SVC_Wating_task
}_SVC_ID;
//===============================idle_task_fun==================================
uint8_t idle=0;
void idle_task_fun(){
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	while(1){
		idle^=1;
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <idle_task_fun+0x18>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	f083 0301 	eor.w	r3, r3, #1
 800041c:	b2da      	uxtb	r2, r3
 800041e:	4b02      	ldr	r3, [pc, #8]	; (8000428 <idle_task_fun+0x18>)
 8000420:	701a      	strb	r2, [r3, #0]
		__asm("WFE");
 8000422:	bf20      	wfe
		idle^=1;
 8000424:	e7f6      	b.n	8000414 <idle_task_fun+0x4>
 8000426:	bf00      	nop
 8000428:	2000003c 	.word	0x2000003c

0800042c <ALSHREIF_RTOS_CREAT_TASK_FRAM>:
	}
}
//=======================ALSHREIF_RTOS_CREAT_TASK_FRAM==========================

void ALSHREIF_RTOS_CREAT_TASK_FRAM(TASK_FRAME_t* TASK){
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	 * r8
	 * r9
	 * r10
	 * r11
	 * */
	TASK->_PSP_STACK_CURENT=TASK->_PSP_STACK_TOP;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	461a      	mov	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	615a      	str	r2, [r3, #20]
	TASK->_PSP_STACK_CURENT--;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	1f1a      	subs	r2, r3, #4
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	615a      	str	r2, [r3, #20]
	*(TASK->_PSP_STACK_CURENT)=0x01000000;//xpsr
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000450:	601a      	str	r2, [r3, #0]

	TASK->_PSP_STACK_CURENT--;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	1f1a      	subs	r2, r3, #4
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	615a      	str	r2, [r3, #20]
	*(TASK->_PSP_STACK_CURENT)=(uint32_t)TASK->TASK_FUNCTION;//pc
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	689a      	ldr	r2, [r3, #8]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	601a      	str	r2, [r3, #0]

	TASK->_PSP_STACK_CURENT--;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	1f1a      	subs	r2, r3, #4
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	615a      	str	r2, [r3, #20]
	*(TASK->_PSP_STACK_CURENT)=0xFFFFFFFD;//lr
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	f06f 0202 	mvn.w	r2, #2
 8000478:	601a      	str	r2, [r3, #0]

	for(uint8_t i =0;i<13;i++){
 800047a:	2300      	movs	r3, #0
 800047c:	73fb      	strb	r3, [r7, #15]
 800047e:	e00b      	b.n	8000498 <ALSHREIF_RTOS_CREAT_TASK_FRAM+0x6c>
		TASK->_PSP_STACK_CURENT--;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	1f1a      	subs	r2, r3, #4
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	615a      	str	r2, [r3, #20]
		*(TASK->_PSP_STACK_CURENT)=0;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
	for(uint8_t i =0;i<13;i++){
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	3301      	adds	r3, #1
 8000496:	73fb      	strb	r3, [r7, #15]
 8000498:	7bfb      	ldrb	r3, [r7, #15]
 800049a:	2b0c      	cmp	r3, #12
 800049c:	d9f0      	bls.n	8000480 <ALSHREIF_RTOS_CREAT_TASK_FRAM+0x54>
	}

}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <ALSHREIF_CREATE_MAIN_STACK>:
//===============================CREATE_MAIN_STACK==============================
void ALSHREIF_CREATE_MAIN_STACK(){
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	OS_CONTROL._MSP_STACK_TOP=(uint32_t volatile)&_estack;//top main stack
 80004ac:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <ALSHREIF_CREATE_MAIN_STACK+0x34>)
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004b0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_CONTROL._MSP_STACK_END=OS_CONTROL._MSP_STACK_TOP-MAIN_STACK_SIZE;//end main stack
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004b6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80004ba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80004be:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004c0:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_CONTROL._PSP_TASK_locator =(OS_CONTROL._MSP_STACK_END-8);//locator task 1
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004c6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80004ca:	3b08      	subs	r3, #8
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004ce:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20005000 	.word	0x20005000
 80004e0:	200001e4 	.word	0x200001e4

080004e4 <ALSHREIF_RTOS_CREAT_TASK>:
//===============================ALSHREIF_RTOS_CREAT_TASK========================
void ALSHREIF_RTOS_CREAT_TASK(TASK_FRAME_t* TASK){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	TASK->_PSP_STACK_TOP=OS_CONTROL._PSP_TASK_locator;
 80004ec:	4b19      	ldr	r3, [pc, #100]	; (8000554 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 80004ee:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	60da      	str	r2, [r3, #12]
	TASK->_PSP_STACK_END=(TASK->_PSP_STACK_TOP-TASK->stack_size);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	68da      	ldr	r2, [r3, #12]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	1ad2      	subs	r2, r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	611a      	str	r2, [r3, #16]
	if(TASK->_PSP_STACK_END<(uint32_t)(&_end_heap))while(1); //over flow
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	4a13      	ldr	r2, [pc, #76]	; (8000558 <ALSHREIF_RTOS_CREAT_TASK+0x74>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d200      	bcs.n	8000510 <ALSHREIF_RTOS_CREAT_TASK+0x2c>
 800050e:	e7fe      	b.n	800050e <ALSHREIF_RTOS_CREAT_TASK+0x2a>
	OS_CONTROL._PSP_TASK_locator=(TASK->_PSP_STACK_END-8);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	691b      	ldr	r3, [r3, #16]
 8000514:	3b08      	subs	r3, #8
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000518:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	ALSHREIF_RTOS_CREAT_TASK_FRAM(TASK);//pointer ((:
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ff85 	bl	800042c <ALSHREIF_RTOS_CREAT_TASK_FRAM>
	//in the first time in runtime when it context SAVE the idle task,
	//and go to the next task this will make a problem because current_task->>_PSP_STACK_CURENT did not enter before
	//so _PSP_STACK_CURENT will be zero and if it but zero in PSP it will make HardFault
	//check @context tasks

	OS_CONTROL.OS_TASKS[OS_CONTROL.NUMBER_OF_TASKS]=TASK;
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000524:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000528:	4619      	mov	r1, r3
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	OS_CONTROL.NUMBER_OF_TASKS++;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000534:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000538:	3301      	adds	r3, #1
 800053a:	b29a      	uxth	r2, r3
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 800053e:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c

	TASK->State=Suspend;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200001e4 	.word	0x200001e4
 8000558:	20000b50 	.word	0x20000b50

0800055c <ALSHREIF_RTOS_INIT>:
//=============================== RTOS_INIT =====================================
OS_ERRORS ALSHREIF_RTOS_INIT(){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	OS_ERRORS error =no_error;
 8000562:	2300      	movs	r3, #0
 8000564:	71fb      	strb	r3, [r7, #7]
	//os mode
	OS_CONTROL.OS_MODE=OS_Suspend;
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <ALSHREIF_RTOS_INIT+0x54>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//main stack of os
	ALSHREIF_CREATE_MAIN_STACK();
 800056e:	f7ff ff9b 	bl	80004a8 <ALSHREIF_CREATE_MAIN_STACK>
	//init ready queue
	OS_FIFO_INIT(&READY_QUEUE,READY_QUEUE_TABLE, TASKS_NUMPER_DEFINE);
 8000572:	2264      	movs	r2, #100	; 0x64
 8000574:	490f      	ldr	r1, [pc, #60]	; (80005b4 <ALSHREIF_RTOS_INIT+0x58>)
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <ALSHREIF_RTOS_INIT+0x5c>)
 8000578:	f7ff fea2 	bl	80002c0 <OS_FIFO_INIT>
	//create idle task
	strcpy(IDLE_TASK.NAME,"idle task");
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <ALSHREIF_RTOS_INIT+0x60>)
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <ALSHREIF_RTOS_INIT+0x64>)
 8000580:	ca07      	ldmia	r2, {r0, r1, r2}
 8000582:	c303      	stmia	r3!, {r0, r1}
 8000584:	801a      	strh	r2, [r3, #0]
	IDLE_TASK.priority=255;
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <ALSHREIF_RTOS_INIT+0x68>)
 8000588:	22ff      	movs	r2, #255	; 0xff
 800058a:	711a      	strb	r2, [r3, #4]
	IDLE_TASK.TASK_FUNCTION=idle_task_fun;
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <ALSHREIF_RTOS_INIT+0x68>)
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <ALSHREIF_RTOS_INIT+0x6c>)
 8000590:	609a      	str	r2, [r3, #8]
	IDLE_TASK.stack_size=100;
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <ALSHREIF_RTOS_INIT+0x68>)
 8000594:	2264      	movs	r2, #100	; 0x64
 8000596:	601a      	str	r2, [r3, #0]

	ALSHREIF_RTOS_CREAT_TASK(&IDLE_TASK);
 8000598:	480a      	ldr	r0, [pc, #40]	; (80005c4 <ALSHREIF_RTOS_INIT+0x68>)
 800059a:	f7ff ffa3 	bl	80004e4 <ALSHREIF_RTOS_CREAT_TASK>

	IDLE_TASK.State=Suspend;
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <ALSHREIF_RTOS_INIT+0x68>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	return error;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200001e4 	.word	0x200001e4
 80005b4:	20000054 	.word	0x20000054
 80005b8:	200003c0 	.word	0x200003c0
 80005bc:	200003a8 	.word	0x200003a8
 80005c0:	08001bb4 	.word	0x08001bb4
 80005c4:	20000390 	.word	0x20000390
 80005c8:	08000411 	.word	0x08000411

080005cc <shell_sort>:
				OS_CONTROL.OS_TASKS[j+1] = temp ;
			}

}

void shell_sort() {
 80005cc:	b480      	push	{r7}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
	unsigned int i, j, n, gap;
	TASK_FRAME_t *temp;
	n = OS_CONTROL.NUMBER_OF_TASKS;
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <shell_sort+0x94>)
 80005d4:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 80005d8:	60bb      	str	r3, [r7, #8]
	for (gap = n / 2; gap > 0; gap /= 2) {
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	085b      	lsrs	r3, r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e036      	b.n	8000650 <shell_sort+0x84>
		for (i = gap; i < n; i++) {
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	e02c      	b.n	8000642 <shell_sort+0x76>
			temp = OS_CONTROL.OS_TASKS[i];
 80005e8:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <shell_sort+0x94>)
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	607b      	str	r3, [r7, #4]
			for (j = i; j >= gap && OS_CONTROL.OS_TASKS[j - gap]->priority > temp->priority; j -= gap) {
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	e00d      	b.n	8000614 <shell_sort+0x48>
				OS_CONTROL.OS_TASKS[j] = OS_CONTROL.OS_TASKS[j - gap];
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	4a18      	ldr	r2, [pc, #96]	; (8000660 <shell_sort+0x94>)
 8000600:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000604:	4916      	ldr	r1, [pc, #88]	; (8000660 <shell_sort+0x94>)
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (j = i; j >= gap && OS_CONTROL.OS_TASKS[j - gap]->priority > temp->priority; j -= gap) {
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	429a      	cmp	r2, r3
 800061a:	d30a      	bcc.n	8000632 <shell_sort+0x66>
 800061c:	693a      	ldr	r2, [r7, #16]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <shell_sort+0x94>)
 8000624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000628:	791a      	ldrb	r2, [r3, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	429a      	cmp	r2, r3
 8000630:	d8e2      	bhi.n	80005f8 <shell_sort+0x2c>
			}
			OS_CONTROL.OS_TASKS[j] = temp;
 8000632:	490b      	ldr	r1, [pc, #44]	; (8000660 <shell_sort+0x94>)
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = gap; i < n; i++) {
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	3301      	adds	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	429a      	cmp	r2, r3
 8000648:	d3ce      	bcc.n	80005e8 <shell_sort+0x1c>
	for (gap = n / 2; gap > 0; gap /= 2) {
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	085b      	lsrs	r3, r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1c5      	bne.n	80005e2 <shell_sort+0x16>
		}
	}
}
 8000656:	bf00      	nop
 8000658:	371c      	adds	r7, #28
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	200001e4 	.word	0x200001e4

08000664 <free_the_FIFO>:
//=====================

void free_the_FIFO(){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	TASK_FRAME_t* temp;//Because I went to pointer to pointer **
	while(OS_FIFO_DEQUEUE(&READY_QUEUE,&temp) !=FIFO_EMPTY){//Address of the pointer
 800066a:	bf00      	nop
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4619      	mov	r1, r3
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <free_the_FIFO+0x20>)
 8000672:	f7ff fe8b 	bl	800038c <OS_FIFO_DEQUEUE>
 8000676:	4603      	mov	r3, r0
 8000678:	2b03      	cmp	r3, #3
 800067a:	d1f7      	bne.n	800066c <free_the_FIFO+0x8>

	}
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200003c0 	.word	0x200003c0

08000688 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>:
//=====================

void ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
	//=====================
	TASK_FRAME_t *NEXT_TASK,*CURENT_TASK;
	uint8_t i=0;
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]
	//=====================
	shell_sort();//Rearrange  the SCEDULER table
 8000692:	f7ff ff9b 	bl	80005cc <shell_sort>
	//=====================
	free_the_FIFO(); //free the FIFO
 8000696:	f7ff ffe5 	bl	8000664 <free_the_FIFO>

	//=====================
	//update the FIFO
	while(i<OS_CONTROL.NUMBER_OF_TASKS)
 800069a:	e03d      	b.n	8000718 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x90>
	{
		CURENT_TASK=OS_CONTROL.OS_TASKS[i];
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4a24      	ldr	r2, [pc, #144]	; (8000730 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 80006a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a4:	60bb      	str	r3, [r7, #8]
		NEXT_TASK=OS_CONTROL.OS_TASKS[i+1];
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a21      	ldr	r2, [pc, #132]	; (8000730 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 80006ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b0:	607b      	str	r3, [r7, #4]

		/*
		 * <<I need only the highest  priority element or all  equal highest priority >>
		 */

		if(CURENT_TASK->State!=Suspend){
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d02a      	beq.n	8000712 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x8a>
			 * Suspend
			 * wait
			 * >>i++
			 */

			if(NEXT_TASK->State==Suspend){//Suspend or NULL don not care it is the same =0
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d108      	bne.n	80006d8 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x50>
				/*
				 * wait go to the fifo
				 * Suspend
				 * */

				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 80006c6:	68b9      	ldr	r1, [r7, #8]
 80006c8:	481a      	ldr	r0, [pc, #104]	; (8000734 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 80006ca:	f7ff fe1c 	bl	8000306 <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	2202      	movs	r2, #2
 80006d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				break;
 80006d6:	e026      	b.n	8000726 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x9e>
			/*
			 * wait priority =0 >>>go to the fifo
			 * wait priority= 1
			 *
			 * */
			if(CURENT_TASK->priority < NEXT_TASK->priority){
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	791a      	ldrb	r2, [r3, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d208      	bcs.n	80006f6 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x6e>
				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	4813      	ldr	r0, [pc, #76]	; (8000734 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 80006e8:	f7ff fe0d 	bl	8000306 <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	2202      	movs	r2, #2
 80006f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				break;
 80006f4:	e017      	b.n	8000726 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x9e>
			 * wait priority =1  go to the fifo
			 * wait priority= 1  go to the fifo
			 *
			 * >>> round robin
			 * */
			else if(CURENT_TASK->priority == NEXT_TASK->priority){
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	791a      	ldrb	r2, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d107      	bne.n	8000712 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x8a>
				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 8000702:	68b9      	ldr	r1, [r7, #8]
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 8000706:	f7ff fdfe 	bl	8000306 <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	2202      	movs	r2, #2
 800070e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			}

		}


		i++;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
	while(i<OS_CONTROL.NUMBER_OF_TASKS)
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 800071e:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000722:	429a      	cmp	r2, r3
 8000724:	d3ba      	bcc.n	800069c <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x14>
	}
	//end while
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200001e4 	.word	0x200001e4
 8000734:	200003c0 	.word	0x200003c0

08000738 <OS_SVC_SET>:

//======================================== SVC =====================================================

void OS_SVC_SET(_SVC_ID ID){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	//OS_SVC_SERVICES
	switch(ID){
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d006      	beq.n	8000756 <OS_SVC_SET+0x1e>
 8000748:	2b02      	cmp	r3, #2
 800074a:	d006      	beq.n	800075a <OS_SVC_SET+0x22>
 800074c:	2b00      	cmp	r3, #0
 800074e:	d000      	beq.n	8000752 <OS_SVC_SET+0x1a>
		break;
	case SVC_Wating_task:
		__asm("SVC #0x02");//wating
		break;
	}
}
 8000750:	e005      	b.n	800075e <OS_SVC_SET+0x26>
		__asm("SVC #0x0");//ACTIVAT
 8000752:	df00      	svc	0
		break;
 8000754:	e003      	b.n	800075e <OS_SVC_SET+0x26>
		__asm("SVC #0x01");//TERMINATE
 8000756:	df01      	svc	1
		break;
 8000758:	e001      	b.n	800075e <OS_SVC_SET+0x26>
		__asm("SVC #0x02");//wating
 800075a:	df02      	svc	2
		break;
 800075c:	bf00      	nop
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <OS_WHATE_NEXT>:
//=====================
void OS_WHATE_NEXT(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

	if((READY_QUEUE.count==0)){
 800076c:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <OS_WHATE_NEXT+0xb0>)
 800076e:	899b      	ldrh	r3, [r3, #12]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d122      	bne.n	80007ba <OS_WHATE_NEXT+0x52>
		//if fifo empty
		if((OS_CONTROL.CURENT_TASK->State==Suspend||OS_CONTROL.CURENT_TASK->State==Running||OS_CONTROL.CURENT_TASK->State==Wating)){
 8000774:	4b29      	ldr	r3, [pc, #164]	; (800081c <OS_WHATE_NEXT+0xb4>)
 8000776:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800077a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800077e:	2b00      	cmp	r3, #0
 8000780:	d00d      	beq.n	800079e <OS_WHATE_NEXT+0x36>
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <OS_WHATE_NEXT+0xb4>)
 8000784:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000788:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800078c:	2b03      	cmp	r3, #3
 800078e:	d006      	beq.n	800079e <OS_WHATE_NEXT+0x36>
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <OS_WHATE_NEXT+0xb4>)
 8000792:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000796:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800079a:	2b01      	cmp	r3, #1
 800079c:	d13a      	bne.n	8000814 <OS_WHATE_NEXT+0xac>
			//if CURENT_TASK Wating then it come from ALSHREIF_RTOS_ACTIVAT_TASK(task will be wait)
			//SysTick_Handler will cut it and enter here

			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK); //go to fifo
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <OS_WHATE_NEXT+0xb4>)
 80007a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007a4:	4619      	mov	r1, r3
 80007a6:	481c      	ldr	r0, [pc, #112]	; (8000818 <OS_WHATE_NEXT+0xb0>)
 80007a8:	f7ff fdad 	bl	8000306 <OS_FIFO_ENQUEUE>
			OS_CONTROL.NEXT_TASK=OS_CONTROL.CURENT_TASK;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <OS_WHATE_NEXT+0xb4>)
 80007ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007b2:	4a1a      	ldr	r2, [pc, #104]	; (800081c <OS_WHATE_NEXT+0xb4>)
 80007b4:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		if((OS_CONTROL.CURENT_TASK->priority==OS_CONTROL.NEXT_TASK->priority)&&(OS_CONTROL.CURENT_TASK->State!=Suspend)){
			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK);
			OS_CONTROL.CURENT_TASK->State=Ready;
		}
	}
}
 80007b8:	e02c      	b.n	8000814 <OS_WHATE_NEXT+0xac>
		if(READY_QUEUE.count==0){while(1);}//todo}
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <OS_WHATE_NEXT+0xb0>)
 80007bc:	899b      	ldrh	r3, [r3, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d100      	bne.n	80007c4 <OS_WHATE_NEXT+0x5c>
 80007c2:	e7fe      	b.n	80007c2 <OS_WHATE_NEXT+0x5a>
		OS_FIFO_DEQUEUE(&READY_QUEUE,&OS_CONTROL.NEXT_TASK);
 80007c4:	4916      	ldr	r1, [pc, #88]	; (8000820 <OS_WHATE_NEXT+0xb8>)
 80007c6:	4814      	ldr	r0, [pc, #80]	; (8000818 <OS_WHATE_NEXT+0xb0>)
 80007c8:	f7ff fde0 	bl	800038c <OS_FIFO_DEQUEUE>
		OS_CONTROL.NEXT_TASK->State=Running;//not if fifo is empty it will access to zero pointer
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <OS_WHATE_NEXT+0xb4>)
 80007ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007d2:	2203      	movs	r2, #3
 80007d4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		if((OS_CONTROL.CURENT_TASK->priority==OS_CONTROL.NEXT_TASK->priority)&&(OS_CONTROL.CURENT_TASK->State!=Suspend)){
 80007d8:	4b10      	ldr	r3, [pc, #64]	; (800081c <OS_WHATE_NEXT+0xb4>)
 80007da:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007de:	791a      	ldrb	r2, [r3, #4]
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <OS_WHATE_NEXT+0xb4>)
 80007e2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d113      	bne.n	8000814 <OS_WHATE_NEXT+0xac>
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <OS_WHATE_NEXT+0xb4>)
 80007ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007f2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00c      	beq.n	8000814 <OS_WHATE_NEXT+0xac>
			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK);
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <OS_WHATE_NEXT+0xb4>)
 80007fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000800:	4619      	mov	r1, r3
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <OS_WHATE_NEXT+0xb0>)
 8000804:	f7ff fd7f 	bl	8000306 <OS_FIFO_ENQUEUE>
			OS_CONTROL.CURENT_TASK->State=Ready;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <OS_WHATE_NEXT+0xb4>)
 800080a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800080e:	2202      	movs	r2, #2
 8000810:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200003c0 	.word	0x200003c0
 800081c:	200001e4 	.word	0x200001e4
 8000820:	20000388 	.word	0x20000388

08000824 <OS_SVC_SERVICES>:
//======================
void OS_SVC_SERVICES(int* STACK_FRAM_POINTER){
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	uint8_t SVC_NUM;
	__asm(   "LDR r0,[r0,#24]\n\t"
 800082c:	6980      	ldr	r0, [r0, #24]
 800082e:	f810 0c02 	ldrb.w	r0, [r0, #-2]
 8000832:	4603      	mov	r3, r0
 8000834:	73fb      	strb	r3, [r7, #15]
			"LDRB r0,[r0,#-2]\n\t"
			"MOV %0,r0"
			:"=r"(SVC_NUM));
	//SVC_NUM=*((unsigned char*)(((unsigned char*)STACK_FRAM_POINTER[6])-2));
	switch(SVC_NUM){
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	2b00      	cmp	r3, #0
 800083a:	db1f      	blt.n	800087c <OS_SVC_SERVICES+0x58>
 800083c:	2b01      	cmp	r3, #1
 800083e:	dd02      	ble.n	8000846 <OS_SVC_SERVICES+0x22>
 8000840:	2b02      	cmp	r3, #2
 8000842:	d017      	beq.n	8000874 <OS_SVC_SERVICES+0x50>
		break;

	}


}
 8000844:	e01a      	b.n	800087c <OS_SVC_SERVICES+0x58>
		ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES();//init to know the next task
 8000846:	f7ff ff1f 	bl	8000688 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>
		if(OS_CONTROL.OS_MODE==OS_Running){
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <OS_SVC_SERVICES+0x60>)
 800084c:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000850:	2b01      	cmp	r3, #1
 8000852:	d112      	bne.n	800087a <OS_SVC_SERVICES+0x56>
			if(strcmp(OS_CONTROL.CURENT_TASK->NAME,"idle task")!=0){
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <OS_SVC_SERVICES+0x60>)
 8000856:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800085a:	3318      	adds	r3, #24
 800085c:	490a      	ldr	r1, [pc, #40]	; (8000888 <OS_SVC_SERVICES+0x64>)
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fc86 	bl	8000170 <strcmp>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d007      	beq.n	800087a <OS_SVC_SERVICES+0x56>
				OS_WHATE_NEXT();//to know the next task
 800086a:	f7ff ff7d 	bl	8000768 <OS_WHATE_NEXT>
				OS_TRIGDER_PENDSV();//to make context switching
 800086e:	f7ff fd11 	bl	8000294 <OS_TRIGDER_PENDSV>
		break;
 8000872:	e002      	b.n	800087a <OS_SVC_SERVICES+0x56>
		ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES();//init to know the next task
 8000874:	f7ff ff08 	bl	8000688 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>
		break;
 8000878:	e000      	b.n	800087c <OS_SVC_SERVICES+0x58>
		break;
 800087a:	bf00      	nop
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200001e4 	.word	0x200001e4
 8000888:	08001bb4 	.word	0x08001bb4

0800088c <PendSV_Handler>:
	 * R2
	 * R1
	 * R0
	 * >>>>PSP current because it comes from thread mode
	 */
	OS_get_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT);//PSP-->_PSP_STACK_CURENT
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <PendSV_Handler+0x7c>)
 800088e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000892:	f3ef 8009 	mrs	r0, PSP
 8000896:	4602      	mov	r2, r0
 8000898:	615a      	str	r2, [r3, #20]
	 * r9
	 * r10
	 * r11
	 * */
	//context SAVE
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT -= 8;
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <PendSV_Handler+0x7c>)
 800089c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008a0:	695a      	ldr	r2, [r3, #20]
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <PendSV_Handler+0x7c>)
 80008a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008a8:	3a20      	subs	r2, #32
 80008aa:	615a      	str	r2, [r3, #20]
	__asm volatile("stmia %0!, {r4-r11}" : : "r" (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT));
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <PendSV_Handler+0x7c>)
 80008ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	e8a3 0ff0 	stmia.w	r3!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// now (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT) will save this address to the next execute of this task
	//and it will enter to make BACK context switching in the next call back :)

	//@context tasks
	if (OS_CONTROL.NEXT_TASK != NULL){
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <PendSV_Handler+0x7c>)
 80008ba:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d009      	beq.n	80008d6 <PendSV_Handler+0x4a>
		OS_CONTROL.CURENT_TASK = OS_CONTROL.NEXT_TASK;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <PendSV_Handler+0x7c>)
 80008c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80008c8:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <PendSV_Handler+0x7c>)
 80008ca:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_CONTROL.NEXT_TASK = NULL ;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <PendSV_Handler+0x7c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	 * r9
	 * r10
	 * r11
	 * */

	__asm volatile("ldmia %0!, {r4-r11}" : : "r" (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT));
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <PendSV_Handler+0x7c>)
 80008d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	e8b3 0ff0 	ldmia.w	r3!, {r4, r5, r6, r7, r8, r9, sl, fp}
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT += 8;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <PendSV_Handler+0x7c>)
 80008e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <PendSV_Handler+0x7c>)
 80008ec:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008f0:	3220      	adds	r2, #32
 80008f2:	615a      	str	r2, [r3, #20]
	 * R2
	 * R1
	 * R0
	 * >>>>PSP current because it comes from thread mode
	 */
	OS_set_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT);//we but the PSP with current psp to force the cpu making this task context
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <PendSV_Handler+0x7c>)
 80008f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");//make cpu context back
 8000902:	4770      	bx	lr
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	200001e4 	.word	0x200001e4

0800090c <ALSHREIF_RTOS_ACTIVAT_TASK>:

//========================================================================================================



void ALSHREIF_RTOS_ACTIVAT_TASK(TASK_FRAME_t* CURENT_TASK,TASK_FRAME_t* TASK){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	if(CURENT_TASK!=NULL){
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d003      	beq.n	8000924 <ALSHREIF_RTOS_ACTIVAT_TASK+0x18>
		CURENT_TASK->State=Wating;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2201      	movs	r2, #1
 8000920:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	}
	TASK->State=Wating;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	2201      	movs	r2, #1
 8000928:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	OS_SVC_SET(SVC_ACTIVAT_task);
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ff03 	bl	8000738 <OS_SVC_SET>

}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <ALSHREIF_RTOS_TERMINAT_TASK>:
void ALSHREIF_RTOS_TERMINAT_TASK(TASK_FRAME_t* TASK){
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
	TASK->State=Suspend;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	OS_SVC_SET(SVC_TERMINATE_task);
 800094a:	2001      	movs	r0, #1
 800094c:	f7ff fef4 	bl	8000738 <OS_SVC_SET>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <ALSHREIF_RTOS_START_OS>:


//========================================================================================================

void ALSHREIF_RTOS_START_OS(){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	OS_CONTROL.OS_MODE=OS_Running;//mode
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <ALSHREIF_RTOS_START_OS+0x54>)
 800095e:	2201      	movs	r2, #1
 8000960:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	OS_CONTROL.CURENT_TASK=&IDLE_TASK;//set current task
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <ALSHREIF_RTOS_START_OS+0x54>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <ALSHREIF_RTOS_START_OS+0x58>)
 8000968:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	ALSHREIF_RTOS_ACTIVAT_TASK(NULL,&IDLE_TASK);//activate idle task
 800096c:	4910      	ldr	r1, [pc, #64]	; (80009b0 <ALSHREIF_RTOS_START_OS+0x58>)
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff ffcc 	bl	800090c <ALSHREIF_RTOS_ACTIVAT_TASK>
	TIMER_START();//set timer every one m second
 8000974:	f7ff fc9c 	bl	80002b0 <TIMER_START>
	OS_set_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_TOP);
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <ALSHREIF_RTOS_START_OS+0x54>)
 800097a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	4618      	mov	r0, r3
 8000982:	f380 8809 	msr	PSP, r0
	OS_SP2_PSP;
 8000986:	f3ef 8014 	mrs	r0, CONTROL
 800098a:	f040 0002 	orr.w	r0, r0, #2
 800098e:	f380 8814 	msr	CONTROL, r0
	OS_CHANGE_CPU_UNPRIVILDEG;
 8000992:	f3ef 8314 	mrs	r3, CONTROL
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	f383 8814 	msr	CONTROL, r3

	OS_CONTROL.CURENT_TASK->TASK_FUNCTION();
 800099e:	4b03      	ldr	r3, [pc, #12]	; (80009ac <ALSHREIF_RTOS_START_OS+0x54>)
 80009a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	4798      	blx	r3
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200001e4 	.word	0x200001e4
 80009b0:	20000390 	.word	0x20000390

080009b4 <ALSHREIF_RTOS_WAITING_TIMING>:

//========================================================================================================
void ALSHREIF_RTOS_WAITING_TIMING(){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0

	for(int i=0;i<OS_CONTROL.NUMBER_OF_TASKS;i++){
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	e02d      	b.n	8000a1c <ALSHREIF_RTOS_WAITING_TIMING+0x68>
		if(OS_CONTROL.OS_TASKS[i]->State==Suspend){
 80009c0:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d122      	bne.n	8000a16 <ALSHREIF_RTOS_WAITING_TIMING+0x62>
			if(OS_CONTROL.OS_TASKS[i]->wating_time.blocking==enable){
 80009d0:	4a18      	ldr	r2, [pc, #96]	; (8000a34 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d11a      	bne.n	8000a16 <ALSHREIF_RTOS_WAITING_TIMING+0x62>

				//@ref_sheck_time
				if((--OS_CONTROL.OS_TASKS[i]->wating_time.TICKS)==0){
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ea:	3a01      	subs	r2, #1
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d110      	bne.n	8000a16 <ALSHREIF_RTOS_WAITING_TIMING+0x62>
					OS_CONTROL.OS_TASKS[i]->wating_time.blocking=disable;
 80009f4:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fc:	2201      	movs	r2, #1
 80009fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					OS_CONTROL.OS_TASKS[i]->State=Wating;
 8000a02:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

					OS_SVC_SET(SVC_Wating_task);
 8000a10:	2002      	movs	r0, #2
 8000a12:	f7ff fe91 	bl	8000738 <OS_SVC_SET>
	for(int i=0;i<OS_CONTROL.NUMBER_OF_TASKS;i++){
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000a1e:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000a22:	461a      	mov	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4293      	cmp	r3, r2
 8000a28:	dbca      	blt.n	80009c0 <ALSHREIF_RTOS_WAITING_TIMING+0xc>
				}
			}
		}
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001e4 	.word	0x200001e4

08000a38 <SysTick_Handler>:
//========================================================================================================

void SysTick_Handler(){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	//=====
	OS_WHATE_NEXT();//to know the next task
 8000a3c:	f7ff fe94 	bl	8000768 <OS_WHATE_NEXT>
	//=====
	OS_TRIGDER_PENDSV();//to make context switching
 8000a40:	f7ff fc28 	bl	8000294 <OS_TRIGDER_PENDSV>
	//=====
	ALSHREIF_RTOS_WAITING_TIMING();
 8000a44:	f7ff ffb6 	bl	80009b4 <ALSHREIF_RTOS_WAITING_TIMING>
	//=====
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d101      	bne.n	8000a60 <getposition+0x14>
		rval =0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d101      	bne.n	8000a6a <getposition+0x1e>
		rval =4;
 8000a66:	2304      	movs	r3, #4
 8000a68:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d101      	bne.n	8000a74 <getposition+0x28>
		rval =8;
 8000a70:	2308      	movs	r3, #8
 8000a72:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d101      	bne.n	8000a7e <getposition+0x32>
		rval =12;
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d101      	bne.n	8000a88 <getposition+0x3c>
		rval =16;
 8000a84:	2310      	movs	r3, #16
 8000a86:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	2b05      	cmp	r3, #5
 8000a8c:	d101      	bne.n	8000a92 <getposition+0x46>
		rval =20;
 8000a8e:	2314      	movs	r3, #20
 8000a90:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	2b06      	cmp	r3, #6
 8000a96:	d101      	bne.n	8000a9c <getposition+0x50>
		rval =24;
 8000a98:	2318      	movs	r3, #24
 8000a9a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	2b07      	cmp	r3, #7
 8000aa0:	d101      	bne.n	8000aa6 <getposition+0x5a>
		rval =28;
 8000aa2:	231c      	movs	r3, #28
 8000aa4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	2b08      	cmp	r3, #8
 8000aaa:	d101      	bne.n	8000ab0 <getposition+0x64>
		rval =0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	2b09      	cmp	r3, #9
 8000ab4:	d101      	bne.n	8000aba <getposition+0x6e>
		rval =4;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	2b0a      	cmp	r3, #10
 8000abe:	d101      	bne.n	8000ac4 <getposition+0x78>
		rval =8;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	2b0b      	cmp	r3, #11
 8000ac8:	d101      	bne.n	8000ace <getposition+0x82>
		rval =12;
 8000aca:	230c      	movs	r3, #12
 8000acc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	2b0c      	cmp	r3, #12
 8000ad2:	d101      	bne.n	8000ad8 <getposition+0x8c>
		rval =16;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	2b0d      	cmp	r3, #13
 8000adc:	d101      	bne.n	8000ae2 <getposition+0x96>
		rval =20;
 8000ade:	2314      	movs	r3, #20
 8000ae0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	2b0e      	cmp	r3, #14
 8000ae6:	d101      	bne.n	8000aec <getposition+0xa0>
		rval =24;
 8000ae8:	2318      	movs	r3, #24
 8000aea:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	d101      	bne.n	8000af6 <getposition+0xaa>
		rval =28;
 8000af2:	231c      	movs	r3, #28
 8000af4:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000af6:	7bfb      	ldrb	r3, [r7, #15]


}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
	...

08000b04 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4a69      	ldr	r2, [pc, #420]	; (8000cbc <pinmode+0x1b8>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d106      	bne.n	8000b28 <pinmode+0x24>
		GPIOA_Clock_Enable();
 8000b1a:	4b69      	ldr	r3, [pc, #420]	; (8000cc0 <pinmode+0x1bc>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a68      	ldr	r2, [pc, #416]	; (8000cc0 <pinmode+0x1bc>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6193      	str	r3, [r2, #24]
 8000b26:	e010      	b.n	8000b4a <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4a66      	ldr	r2, [pc, #408]	; (8000cc4 <pinmode+0x1c0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d106      	bne.n	8000b3e <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8000b30:	4b63      	ldr	r3, [pc, #396]	; (8000cc0 <pinmode+0x1bc>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a62      	ldr	r2, [pc, #392]	; (8000cc0 <pinmode+0x1bc>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	e005      	b.n	8000b4a <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 8000b3e:	4b60      	ldr	r3, [pc, #384]	; (8000cc0 <pinmode+0x1bc>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	4a5f      	ldr	r2, [pc, #380]	; (8000cc0 <pinmode+0x1bc>)
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8000b4a:	897b      	ldrh	r3, [r7, #10]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	d856      	bhi.n	8000bfe <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 8000b50:	897b      	ldrh	r3, [r7, #10]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff7a 	bl	8000a4c <getposition>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	4093      	lsls	r3, r2
 8000b60:	43da      	mvns	r2, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	401a      	ands	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d002      	beq.n	8000b78 <pinmode+0x74>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b18      	cmp	r3, #24
 8000b76:	d133      	bne.n	8000be0 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b18      	cmp	r3, #24
 8000b7c:	d117      	bne.n	8000bae <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000b7e:	897b      	ldrh	r3, [r7, #10]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff63 	bl	8000a4c <getposition>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	fa03 f202 	lsl.w	r2, r3, r2
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	431a      	orrs	r2, r3
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	897a      	ldrh	r2, [r7, #10]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000bac:	e081      	b.n	8000cb2 <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000bae:	897b      	ldrh	r3, [r7, #10]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff4b 	bl	8000a4c <getposition>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	2308      	movs	r3, #8
 8000bbc:	fa03 f202 	lsl.w	r2, r3, r2
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	897a      	ldrh	r2, [r7, #10]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd6:	43d2      	mvns	r2, r2
 8000bd8:	401a      	ands	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000bde:	e068      	b.n	8000cb2 <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 8000be0:	897b      	ldrh	r3, [r7, #10]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff32 	bl	8000a4c <getposition>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	fa03 f202 	lsl.w	r2, r3, r2
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	601a      	str	r2, [r3, #0]

	}



}
 8000bfc:	e059      	b.n	8000cb2 <pinmode+0x1ae>
	else if(pin>7){
 8000bfe:	897b      	ldrh	r3, [r7, #10]
 8000c00:	2b07      	cmp	r3, #7
 8000c02:	d956      	bls.n	8000cb2 <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 8000c04:	897b      	ldrh	r3, [r7, #10]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff20 	bl	8000a4c <getposition>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	230f      	movs	r3, #15
 8000c12:	4093      	lsls	r3, r2
 8000c14:	43da      	mvns	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b08      	cmp	r3, #8
 8000c24:	d002      	beq.n	8000c2c <pinmode+0x128>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b18      	cmp	r3, #24
 8000c2a:	d133      	bne.n	8000c94 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b18      	cmp	r3, #24
 8000c30:	d117      	bne.n	8000c62 <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000c32:	897b      	ldrh	r3, [r7, #10]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff09 	bl	8000a4c <getposition>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	2308      	movs	r3, #8
 8000c40:	fa03 f202 	lsl.w	r2, r3, r2
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	897a      	ldrh	r2, [r7, #10]
 8000c54:	2101      	movs	r1, #1
 8000c56:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000c60:	e027      	b.n	8000cb2 <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000c62:	897b      	ldrh	r3, [r7, #10]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fef1 	bl	8000a4c <getposition>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	2308      	movs	r3, #8
 8000c70:	fa03 f202 	lsl.w	r2, r3, r2
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	897a      	ldrh	r2, [r7, #10]
 8000c84:	2101      	movs	r1, #1
 8000c86:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8a:	43d2      	mvns	r2, r2
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000c92:	e00e      	b.n	8000cb2 <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8000c94:	897b      	ldrh	r3, [r7, #10]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fed8 	bl	8000a4c <getposition>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	fa03 f202 	lsl.w	r2, r3, r2
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	431a      	orrs	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	605a      	str	r2, [r3, #4]
}
 8000cb0:	e7ff      	b.n	8000cb2 <pinmode+0x1ae>
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010c00 	.word	0x40010c00

08000cc8 <TogglePin>:
uint16_t READ_PORT(GPIO_typeDef* GPIOx){

	return GPIOx->GPIOx_IDR;
}

void TogglePin(GPIO_typeDef* GPIOx, uint16_t pin){
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIOx_ODR ^=(1<<pin);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	887a      	ldrh	r2, [r7, #2]
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce0:	405a      	eors	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60da      	str	r2, [r3, #12]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b3a      	ldr	r3, [pc, #232]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 0201 	bic.w	r2, r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d12f      	bne.n	8000d74 <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 8000d14:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	699a      	ldr	r2, [r3, #24]
 8000d1a:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d22:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 8000d24:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	699a      	ldr	r2, [r3, #24]
 8000d2a:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000d32:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8000d34:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	699a      	ldr	r2, [r3, #24]
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f042 0208 	orr.w	r2, r2, #8
 8000d42:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8000d44:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	699a      	ldr	r2, [r3, #24]
 8000d4a:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000d52:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8000d54:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6a1a      	ldr	r2, [r3, #32]
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f042 0210 	orr.w	r2, r2, #16
 8000d62:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6a1a      	ldr	r2, [r3, #32]
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d82:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000db2:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 0201 	orr.w	r2, r2, #1
 8000dc2:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	695a      	ldr	r2, [r3, #20]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0201 	orr.w	r2, r2, #1
 8000dd2:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SPWM_timer_INIT+0x100>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f042 0201 	orr.w	r2, r2, #1
 8000de2:	601a      	str	r2, [r3, #0]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000000 	.word	0x20000000

08000df4 <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <TIM2_IRQHandler+0x34>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	691a      	ldr	r2, [r3, #16]
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <TIM2_IRQHandler+0x34>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0201 	bic.w	r2, r2, #1
 8000e06:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <TIM2_IRQHandler+0x38>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <TIM2_IRQHandler+0x34>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <TIM2_IRQHandler+0x34>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0201 	bic.w	r2, r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]

}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	2000001c 	.word	0x2000001c
 8000e2c:	20000018 	.word	0x20000018

08000e30 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin10,LOW);
	ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <TIM3_IRQHandler+0x30>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <TIM3_IRQHandler+0x30>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0201 	bic.w	r2, r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
	ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <TIM3_IRQHandler+0x30>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <TIM3_IRQHandler+0x30>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0201 	bic.w	r2, r2, #1
 8000e52:	611a      	str	r2, [r3, #16]
	ISRcalback[0]();
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <TIM3_IRQHandler+0x34>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4798      	blx	r3
	//NVIC_TIM3_global_interrupt_Disable;
	//pinwrite(GPIOB, pin10,HIGH);
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200003dc 	.word	0x200003dc
 8000e64:	200003d0 	.word	0x200003d0

08000e68 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <TIM4_IRQHandler+0x24>)
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <TIM4_IRQHandler+0x24>)
 8000e72:	f023 0301 	bic.w	r3, r3, #1
 8000e76:	6113      	str	r3, [r2, #16]
	overflowtims++;
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <TIM4_IRQHandler+0x28>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <TIM4_IRQHandler+0x28>)
 8000e82:	801a      	strh	r2, [r3, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40000800 	.word	0x40000800
 8000e90:	2000003e 	.word	0x2000003e

08000e94 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 8000e98:	4b5d      	ldr	r3, [pc, #372]	; (8001010 <TIM1_UP_IRQHandler+0x17c>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b5d      	ldr	r3, [pc, #372]	; (8001014 <TIM1_UP_IRQHandler+0x180>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d911      	bls.n	8000ec8 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 8000ea4:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <TIM1_UP_IRQHandler+0x184>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
		flage1=0;
 8000eaa:	4b5c      	ldr	r3, [pc, #368]	; (800101c <TIM1_UP_IRQHandler+0x188>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <TIM1_UP_IRQHandler+0x180>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a5a      	ldr	r2, [pc, #360]	; (8001020 <TIM1_UP_IRQHandler+0x18c>)
 8000eb6:	7812      	ldrb	r2, [r2, #0]
 8000eb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ebc:	4b55      	ldr	r3, [pc, #340]	; (8001014 <TIM1_UP_IRQHandler+0x180>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a53      	ldr	r2, [pc, #332]	; (8001010 <TIM1_UP_IRQHandler+0x17c>)
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e018      	b.n	8000efa <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 8000ec8:	4b51      	ldr	r3, [pc, #324]	; (8001010 <TIM1_UP_IRQHandler+0x17c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b63      	cmp	r3, #99	; 0x63
 8000ece:	d814      	bhi.n	8000efa <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 8000ed0:	4b51      	ldr	r3, [pc, #324]	; (8001018 <TIM1_UP_IRQHandler+0x184>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
		flage1=1;
 8000ed6:	4b51      	ldr	r3, [pc, #324]	; (800101c <TIM1_UP_IRQHandler+0x188>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 8000edc:	4b51      	ldr	r3, [pc, #324]	; (8001024 <TIM1_UP_IRQHandler+0x190>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	f083 0301 	eor.w	r3, r3, #1
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b4f      	ldr	r3, [pc, #316]	; (8001024 <TIM1_UP_IRQHandler+0x190>)
 8000ee8:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 8000eea:	4b4a      	ldr	r3, [pc, #296]	; (8001014 <TIM1_UP_IRQHandler+0x180>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a4c      	ldr	r2, [pc, #304]	; (8001020 <TIM1_UP_IRQHandler+0x18c>)
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ef6:	4a46      	ldr	r2, [pc, #280]	; (8001010 <TIM1_UP_IRQHandler+0x17c>)
 8000ef8:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 8000efa:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <TIM1_UP_IRQHandler+0x190>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d110      	bne.n	8000f24 <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 8000f02:	4b49      	ldr	r3, [pc, #292]	; (8001028 <TIM1_UP_IRQHandler+0x194>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6a1a      	ldr	r2, [r3, #32]
 8000f08:	4b47      	ldr	r3, [pc, #284]	; (8001028 <TIM1_UP_IRQHandler+0x194>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0201 	bic.w	r2, r2, #1
 8000f10:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 8000f12:	4b45      	ldr	r3, [pc, #276]	; (8001028 <TIM1_UP_IRQHandler+0x194>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6a1a      	ldr	r2, [r3, #32]
 8000f18:	4b43      	ldr	r3, [pc, #268]	; (8001028 <TIM1_UP_IRQHandler+0x194>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f042 0210 	orr.w	r2, r2, #16
 8000f20:	621a      	str	r2, [r3, #32]
 8000f22:	e013      	b.n	8000f4c <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 8000f24:	4b3f      	ldr	r3, [pc, #252]	; (8001024 <TIM1_UP_IRQHandler+0x190>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10f      	bne.n	8000f4c <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <TIM1_UP_IRQHandler+0x194>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6a1a      	ldr	r2, [r3, #32]
 8000f32:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <TIM1_UP_IRQHandler+0x194>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 0210 	bic.w	r2, r2, #16
 8000f3a:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 8000f3c:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <TIM1_UP_IRQHandler+0x194>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6a1a      	ldr	r2, [r3, #32]
 8000f42:	4b39      	ldr	r3, [pc, #228]	; (8001028 <TIM1_UP_IRQHandler+0x194>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0201 	orr.w	r2, r2, #1
 8000f4a:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 8000f4c:	4b33      	ldr	r3, [pc, #204]	; (800101c <TIM1_UP_IRQHandler+0x188>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d11c      	bne.n	8000f8e <TIM1_UP_IRQHandler+0xfa>
 8000f54:	4b30      	ldr	r3, [pc, #192]	; (8001018 <TIM1_UP_IRQHandler+0x184>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d118      	bne.n	8000f8e <TIM1_UP_IRQHandler+0xfa>
		top=c;
 8000f5c:	4b33      	ldr	r3, [pc, #204]	; (800102c <TIM1_UP_IRQHandler+0x198>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a2c      	ldr	r2, [pc, #176]	; (8001014 <TIM1_UP_IRQHandler+0x180>)
 8000f62:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <TIM1_UP_IRQHandler+0x19c>)
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	4b29      	ldr	r3, [pc, #164]	; (8001010 <TIM1_UP_IRQHandler+0x17c>)
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	4b29      	ldr	r3, [pc, #164]	; (8001014 <TIM1_UP_IRQHandler+0x180>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	f7ff febd 	bl	8000cf0 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 8000f76:	4b27      	ldr	r3, [pc, #156]	; (8001014 <TIM1_UP_IRQHandler+0x180>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a29      	ldr	r2, [pc, #164]	; (8001020 <TIM1_UP_IRQHandler+0x18c>)
 8000f7c:	7812      	ldrb	r2, [r2, #0]
 8000f7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <TIM1_UP_IRQHandler+0x17c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <TIM1_UP_IRQHandler+0x17c>)
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	e035      	b.n	8000ffa <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 8000f8e:	4b22      	ldr	r3, [pc, #136]	; (8001018 <TIM1_UP_IRQHandler+0x184>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d129      	bne.n	8000fea <TIM1_UP_IRQHandler+0x156>
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <TIM1_UP_IRQHandler+0x188>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d125      	bne.n	8000fea <TIM1_UP_IRQHandler+0x156>
		top=c;
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <TIM1_UP_IRQHandler+0x198>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <TIM1_UP_IRQHandler+0x180>)
 8000fa4:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <TIM1_UP_IRQHandler+0x17c>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <TIM1_UP_IRQHandler+0x180>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	491c      	ldr	r1, [pc, #112]	; (8001020 <TIM1_UP_IRQHandler+0x18c>)
 8000fb0:	7809      	ldrb	r1, [r1, #0]
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	4a15      	ldr	r2, [pc, #84]	; (8001010 <TIM1_UP_IRQHandler+0x17c>)
 8000fba:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <TIM1_UP_IRQHandler+0x19c>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <TIM1_UP_IRQHandler+0x17c>)
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <TIM1_UP_IRQHandler+0x180>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f7ff fe91 	bl	8000cf0 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <TIM1_UP_IRQHandler+0x180>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <TIM1_UP_IRQHandler+0x18c>)
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <TIM1_UP_IRQHandler+0x17c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d10b      	bne.n	8000ffa <TIM1_UP_IRQHandler+0x166>
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <TIM1_UP_IRQHandler+0x17c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e007      	b.n	8000ffa <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <TIM1_UP_IRQHandler+0x194>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <TIM1_UP_IRQHandler+0x194>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0201 	bic.w	r2, r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <TIM1_UP_IRQHandler+0x194>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <TIM1_UP_IRQHandler+0x194>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0201 	bic.w	r2, r2, #1
 8001008:	611a      	str	r2, [r3, #16]
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000014 	.word	0x20000014
 8001014:	20000008 	.word	0x20000008
 8001018:	2000003d 	.word	0x2000003d
 800101c:	20000004 	.word	0x20000004
 8001020:	200003d8 	.word	0x200003d8
 8001024:	20000005 	.word	0x20000005
 8001028:	20000000 	.word	0x20000000
 800102c:	20000010 	.word	0x20000010
 8001030:	2000000c 	.word	0x2000000c

08001034 <MCAL_speed_init>:
 *      Author: mo
 */

#include "stm32_speed_DRIVER.h"

void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d139      	bne.n	80010be <MCAL_speed_init+0x8a>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d175      	bne.n	800113c <MCAL_speed_init+0x108>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 8001050:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <MCAL_speed_init+0x114>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	4a3c      	ldr	r2, [pc, #240]	; (8001148 <MCAL_speed_init+0x114>)
 8001056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105a:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <MCAL_speed_init+0x114>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4a39      	ldr	r2, [pc, #228]	; (8001148 <MCAL_speed_init+0x114>)
 8001062:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001066:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 8001068:	4b37      	ldr	r3, [pc, #220]	; (8001148 <MCAL_speed_init+0x114>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4a36      	ldr	r2, [pc, #216]	; (8001148 <MCAL_speed_init+0x114>)
 800106e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001072:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001074:	4b34      	ldr	r3, [pc, #208]	; (8001148 <MCAL_speed_init+0x114>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a33      	ldr	r2, [pc, #204]	; (8001148 <MCAL_speed_init+0x114>)
 800107a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800107e:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 8001080:	4b31      	ldr	r3, [pc, #196]	; (8001148 <MCAL_speed_init+0x114>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	4a30      	ldr	r2, [pc, #192]	; (8001148 <MCAL_speed_init+0x114>)
 8001086:	f023 0303 	bic.w	r3, r3, #3
 800108a:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <MCAL_speed_init+0x114>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a2d      	ldr	r2, [pc, #180]	; (8001148 <MCAL_speed_init+0x114>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <MCAL_speed_init+0x114>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <MCAL_speed_init+0x114>)
 800109e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010a2:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 80010a4:	4b28      	ldr	r3, [pc, #160]	; (8001148 <MCAL_speed_init+0x114>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4a27      	ldr	r2, [pc, #156]	; (8001148 <MCAL_speed_init+0x114>)
 80010aa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010ae:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <MCAL_speed_init+0x114>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4a24      	ldr	r2, [pc, #144]	; (8001148 <MCAL_speed_init+0x114>)
 80010b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010ba:	6053      	str	r3, [r2, #4]

		}
	}


}
 80010bc:	e03e      	b.n	800113c <MCAL_speed_init+0x108>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 80010be:	79bb      	ldrb	r3, [r7, #6]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d13b      	bne.n	800113c <MCAL_speed_init+0x108>
			RCC->RCC_CR &=~(1<<18);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <MCAL_speed_init+0x114>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <MCAL_speed_init+0x114>)
 80010ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]
			RCC->RCC_CR|=(1<<16);
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MCAL_speed_init+0x114>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <MCAL_speed_init+0x114>)
 80010d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR|=(1<<16);
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MCAL_speed_init+0x114>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <MCAL_speed_init+0x114>)
 80010e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e6:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MCAL_speed_init+0x114>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a16      	ldr	r2, [pc, #88]	; (8001148 <MCAL_speed_init+0x114>)
 80010ee:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80010f2:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MCAL_speed_init+0x114>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a13      	ldr	r2, [pc, #76]	; (8001148 <MCAL_speed_init+0x114>)
 80010fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010fe:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MCAL_speed_init+0x114>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a10      	ldr	r2, [pc, #64]	; (8001148 <MCAL_speed_init+0x114>)
 8001106:	f023 0303 	bic.w	r3, r3, #3
 800110a:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MCAL_speed_init+0x114>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <MCAL_speed_init+0x114>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MCAL_speed_init+0x114>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <MCAL_speed_init+0x114>)
 800111e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001122:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MCAL_speed_init+0x114>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <MCAL_speed_init+0x114>)
 800112a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800112e:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <MCAL_speed_init+0x114>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <MCAL_speed_init+0x114>)
 8001136:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800113a:	6053      	str	r3, [r2, #4]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000

0800114c <EXTI0_IRQHandler>:
	Enable_NVIC(pin);
}



void EXTI0_IRQHandler(void){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <EXTI0_IRQHandler+0x1c>)
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <EXTI0_IRQHandler+0x1c>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <EXTI0_IRQHandler+0x20>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4798      	blx	r3
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40010400 	.word	0x40010400
 800116c:	200003e0 	.word	0x200003e0

08001170 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <EXTI1_IRQHandler+0x1c>)
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <EXTI1_IRQHandler+0x1c>)
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <EXTI1_IRQHandler+0x20>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4798      	blx	r3

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010400 	.word	0x40010400
 8001190:	200003e0 	.word	0x200003e0

08001194 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <EXTI2_IRQHandler+0x1c>)
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <EXTI2_IRQHandler+0x1c>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <EXTI2_IRQHandler+0x20>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4798      	blx	r3
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40010400 	.word	0x40010400
 80011b4:	200003e0 	.word	0x200003e0

080011b8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <EXTI3_IRQHandler+0x1c>)
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <EXTI3_IRQHandler+0x1c>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <EXTI3_IRQHandler+0x20>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4798      	blx	r3
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40010400 	.word	0x40010400
 80011d8:	200003e0 	.word	0x200003e0

080011dc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <EXTI4_IRQHandler+0x1c>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <EXTI4_IRQHandler+0x1c>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <EXTI4_IRQHandler+0x20>)
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4798      	blx	r3
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40010400 	.word	0x40010400
 80011fc:	200003e0 	.word	0x200003e0

08001200 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5]();  }
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <EXTI9_5_IRQHandler+0x22>
 8001210:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	4a22      	ldr	r2, [pc, #136]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 8001216:	f043 0320 	orr.w	r3, r3, #32
 800121a:	6153      	str	r3, [r2, #20]
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <EXTI9_5_IRQHandler+0xa4>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6]();  }
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122a:	2b00      	cmp	r3, #0
 800122c:	d008      	beq.n	8001240 <EXTI9_5_IRQHandler+0x40>
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 8001234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <EXTI9_5_IRQHandler+0xa4>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7]();  }
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001248:	2b00      	cmp	r3, #0
 800124a:	d008      	beq.n	800125e <EXTI9_5_IRQHandler+0x5e>
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 8001252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001256:	6153      	str	r3, [r2, #20]
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <EXTI9_5_IRQHandler+0xa4>)
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8]();  }
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d008      	beq.n	800127c <EXTI9_5_IRQHandler+0x7c>
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 8001270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001274:	6153      	str	r3, [r2, #20]
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <EXTI9_5_IRQHandler+0xa4>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9]();  }
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <EXTI9_5_IRQHandler+0x9a>
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <EXTI9_5_IRQHandler+0xa0>)
 800128e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001292:	6153      	str	r3, [r2, #20]
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <EXTI9_5_IRQHandler+0xa4>)
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	4798      	blx	r3
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40010400 	.word	0x40010400
 80012a4:	200003e0 	.word	0x200003e0

080012a8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10]();  }
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d008      	beq.n	80012ca <EXTI15_10_IRQHandler+0x22>
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	4a29      	ldr	r2, [pc, #164]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 80012be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c2:	6153      	str	r3, [r2, #20]
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <EXTI15_10_IRQHandler+0xc0>)
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11]();  }
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d008      	beq.n	80012e8 <EXTI15_10_IRQHandler+0x40>
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	4a22      	ldr	r2, [pc, #136]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 80012dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012e0:	6153      	str	r3, [r2, #20]
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <EXTI15_10_IRQHandler+0xc0>)
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12]();  }
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <EXTI15_10_IRQHandler+0x5e>
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 80012fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012fe:	6153      	str	r3, [r2, #20]
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <EXTI15_10_IRQHandler+0xc0>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13]();  }
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d008      	beq.n	8001324 <EXTI15_10_IRQHandler+0x7c>
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 8001318:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800131c:	6153      	str	r3, [r2, #20]
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <EXTI15_10_IRQHandler+0xc0>)
 8001320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001322:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14]();  }
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d008      	beq.n	8001342 <EXTI15_10_IRQHandler+0x9a>
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 8001336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133a:	6153      	str	r3, [r2, #20]
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <EXTI15_10_IRQHandler+0xc0>)
 800133e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001340:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15]();  }
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d008      	beq.n	8001360 <EXTI15_10_IRQHandler+0xb8>
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <EXTI15_10_IRQHandler+0xbc>)
 8001354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001358:	6153      	str	r3, [r2, #20]
 800135a:	4b03      	ldr	r3, [pc, #12]	; (8001368 <EXTI15_10_IRQHandler+0xc0>)
 800135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135e:	4798      	blx	r3

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40010400 	.word	0x40010400
 8001368:	200003e0 	.word	0x200003e0

0800136c <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	//slave only todo
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	//slave only todo
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <USART_SEND>:
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );


}
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	0b1b      	lsrs	r3, r3, #12
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b01      	cmp	r3, #1
 800139a:	d106      	bne.n	80013aa <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 80013a8:	e004      	b.n	80013b4 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	605a      	str	r2, [r3, #4]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
	...

080013c0 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80013c6:	4b56      	ldr	r3, [pc, #344]	; (8001520 <USART1_IRQHandler+0x160>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	09db      	lsrs	r3, r3, #7
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d122      	bne.n	800141c <USART1_IRQHandler+0x5c>
 80013d6:	4b52      	ldr	r3, [pc, #328]	; (8001520 <USART1_IRQHandler+0x160>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	09db      	lsrs	r3, r3, #7
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d11a      	bne.n	800141c <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 80013e6:	4b4f      	ldr	r3, [pc, #316]	; (8001524 <USART1_IRQHandler+0x164>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00d      	beq.n	800140c <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 80013f0:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <USART1_IRQHandler+0x160>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b4b      	ldr	r3, [pc, #300]	; (8001524 <USART1_IRQHandler+0x164>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	4610      	mov	r0, r2
 80013fc:	f7ff ffc2 	bl	8001384 <USART_SEND>
			++arr_data[0];
 8001400:	4b48      	ldr	r3, [pc, #288]	; (8001524 <USART1_IRQHandler+0x164>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	4a47      	ldr	r2, [pc, #284]	; (8001524 <USART1_IRQHandler+0x164>)
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e007      	b.n	800141c <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 800140c:	4b44      	ldr	r3, [pc, #272]	; (8001520 <USART1_IRQHandler+0x160>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	4b43      	ldr	r3, [pc, #268]	; (8001520 <USART1_IRQHandler+0x160>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800141a:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 800141c:	4b40      	ldr	r3, [pc, #256]	; (8001520 <USART1_IRQHandler+0x160>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d166      	bne.n	80014fa <USART1_IRQHandler+0x13a>
 800142c:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <USART1_IRQHandler+0x160>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d15e      	bne.n	80014fa <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 800143c:	4b38      	ldr	r3, [pc, #224]	; (8001520 <USART1_IRQHandler+0x160>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	0b1b      	lsrs	r3, r3, #12
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d117      	bne.n	800147c <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 800144c:	4b34      	ldr	r3, [pc, #208]	; (8001520 <USART1_IRQHandler+0x160>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	0a9b      	lsrs	r3, r3, #10
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b01      	cmp	r3, #1
 800145a:	d108      	bne.n	800146e <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 800145c:	4b30      	ldr	r3, [pc, #192]	; (8001520 <USART1_IRQHandler+0x160>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	b29b      	uxth	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <USART1_IRQHandler+0x168>)
 800146a:	801a      	strh	r2, [r3, #0]
 800146c:	e020      	b.n	80014b0 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <USART1_IRQHandler+0x160>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	b29a      	uxth	r2, r3
 8001476:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <USART1_IRQHandler+0x168>)
 8001478:	801a      	strh	r2, [r3, #0]
 800147a:	e019      	b.n	80014b0 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <USART1_IRQHandler+0x160>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	0a9b      	lsrs	r3, r3, #10
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d109      	bne.n	80014a0 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <USART1_IRQHandler+0x160>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	b29b      	uxth	r3, r3
 8001494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001498:	b29a      	uxth	r2, r3
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <USART1_IRQHandler+0x168>)
 800149c:	801a      	strh	r2, [r3, #0]
 800149e:	e007      	b.n	80014b0 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <USART1_IRQHandler+0x160>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <USART1_IRQHandler+0x168>)
 80014ae:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <USART1_IRQHandler+0x16c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	e002      	b.n	80014c2 <USART1_IRQHandler+0x102>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3301      	adds	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014c8:	4293      	cmp	r3, r2
 80014ca:	ddf7      	ble.n	80014bc <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <USART1_IRQHandler+0x160>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <USART1_IRQHandler+0x160>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0220 	bic.w	r2, r2, #32
 80014da:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <USART1_IRQHandler+0x160>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <USART1_IRQHandler+0x170>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <USART1_IRQHandler+0x160>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <USART1_IRQHandler+0x160>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0220 	bic.w	r2, r2, #32
 80014f8:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <USART1_IRQHandler+0x160>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <USART1_IRQHandler+0x170>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	b29b      	uxth	r3, r3
 8001506:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <USART1_IRQHandler+0x160>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <USART1_IRQHandler+0x160>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0220 	bic.w	r2, r2, #32
 8001516:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000041c 	.word	0x2000041c
 8001524:	20000430 	.word	0x20000430
 8001528:	20000428 	.word	0x20000428
 800152c:	2000043c 	.word	0x2000043c
 8001530:	40013800 	.word	0x40013800

08001534 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800153a:	4b56      	ldr	r3, [pc, #344]	; (8001694 <USART2_IRQHandler+0x160>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	09db      	lsrs	r3, r3, #7
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b01      	cmp	r3, #1
 8001548:	d122      	bne.n	8001590 <USART2_IRQHandler+0x5c>
 800154a:	4b52      	ldr	r3, [pc, #328]	; (8001694 <USART2_IRQHandler+0x160>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	09db      	lsrs	r3, r3, #7
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b01      	cmp	r3, #1
 8001558:	d11a      	bne.n	8001590 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 800155a:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <USART2_IRQHandler+0x164>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00d      	beq.n	8001580 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 8001564:	4b4b      	ldr	r3, [pc, #300]	; (8001694 <USART2_IRQHandler+0x160>)
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <USART2_IRQHandler+0x164>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f7ff ff08 	bl	8001384 <USART_SEND>
			++arr_data[1];
 8001574:	4b48      	ldr	r3, [pc, #288]	; (8001698 <USART2_IRQHandler+0x164>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	3301      	adds	r3, #1
 800157a:	4a47      	ldr	r2, [pc, #284]	; (8001698 <USART2_IRQHandler+0x164>)
 800157c:	6053      	str	r3, [r2, #4]
 800157e:	e007      	b.n	8001590 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8001580:	4b44      	ldr	r3, [pc, #272]	; (8001694 <USART2_IRQHandler+0x160>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	4b43      	ldr	r3, [pc, #268]	; (8001694 <USART2_IRQHandler+0x160>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800158e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8001590:	4b40      	ldr	r3, [pc, #256]	; (8001694 <USART2_IRQHandler+0x160>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b01      	cmp	r3, #1
 800159e:	d166      	bne.n	800166e <USART2_IRQHandler+0x13a>
 80015a0:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <USART2_IRQHandler+0x160>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d15e      	bne.n	800166e <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 80015b0:	4b38      	ldr	r3, [pc, #224]	; (8001694 <USART2_IRQHandler+0x160>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	0b1b      	lsrs	r3, r3, #12
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d117      	bne.n	80015f0 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 80015c0:	4b34      	ldr	r3, [pc, #208]	; (8001694 <USART2_IRQHandler+0x160>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	0a9b      	lsrs	r3, r3, #10
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d108      	bne.n	80015e2 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <USART2_IRQHandler+0x160>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b2f      	ldr	r3, [pc, #188]	; (800169c <USART2_IRQHandler+0x168>)
 80015de:	805a      	strh	r2, [r3, #2]
 80015e0:	e020      	b.n	8001624 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 80015e2:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <USART2_IRQHandler+0x160>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <USART2_IRQHandler+0x168>)
 80015ec:	805a      	strh	r2, [r3, #2]
 80015ee:	e019      	b.n	8001624 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <USART2_IRQHandler+0x160>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	0a9b      	lsrs	r3, r3, #10
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d109      	bne.n	8001614 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <USART2_IRQHandler+0x160>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	b29b      	uxth	r3, r3
 8001608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <USART2_IRQHandler+0x168>)
 8001610:	805a      	strh	r2, [r3, #2]
 8001612:	e007      	b.n	8001624 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <USART2_IRQHandler+0x160>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	b29b      	uxth	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <USART2_IRQHandler+0x168>)
 8001622:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <USART2_IRQHandler+0x16c>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	e002      	b.n	8001636 <USART2_IRQHandler+0x102>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3301      	adds	r3, #1
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800163c:	4293      	cmp	r3, r2
 800163e:	ddf7      	ble.n	8001630 <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <USART2_IRQHandler+0x160>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <USART2_IRQHandler+0x160>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f022 0220 	bic.w	r2, r2, #32
 800164e:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <USART2_IRQHandler+0x160>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <USART2_IRQHandler+0x170>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	b29b      	uxth	r3, r3
 800165c:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <USART2_IRQHandler+0x160>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <USART2_IRQHandler+0x160>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f022 0220 	bic.w	r2, r2, #32
 800166c:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <USART2_IRQHandler+0x160>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <USART2_IRQHandler+0x170>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	b29b      	uxth	r3, r3
 800167a:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <USART2_IRQHandler+0x160>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <USART2_IRQHandler+0x160>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f022 0220 	bic.w	r2, r2, #32
 800168a:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2000041c 	.word	0x2000041c
 8001698:	20000430 	.word	0x20000430
 800169c:	20000428 	.word	0x20000428
 80016a0:	2000043c 	.word	0x2000043c
 80016a4:	40004400 	.word	0x40004400

080016a8 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80016ae:	4b56      	ldr	r3, [pc, #344]	; (8001808 <USART3_IRQHandler+0x160>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	09db      	lsrs	r3, r3, #7
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d122      	bne.n	8001704 <USART3_IRQHandler+0x5c>
 80016be:	4b52      	ldr	r3, [pc, #328]	; (8001808 <USART3_IRQHandler+0x160>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	09db      	lsrs	r3, r3, #7
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d11a      	bne.n	8001704 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 80016ce:	4b4f      	ldr	r3, [pc, #316]	; (800180c <USART3_IRQHandler+0x164>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00d      	beq.n	80016f4 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 80016d8:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <USART3_IRQHandler+0x160>)
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	4b4b      	ldr	r3, [pc, #300]	; (800180c <USART3_IRQHandler+0x164>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4610      	mov	r0, r2
 80016e4:	f7ff fe4e 	bl	8001384 <USART_SEND>
			++arr_data[2];
 80016e8:	4b48      	ldr	r3, [pc, #288]	; (800180c <USART3_IRQHandler+0x164>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a47      	ldr	r2, [pc, #284]	; (800180c <USART3_IRQHandler+0x164>)
 80016f0:	6093      	str	r3, [r2, #8]
 80016f2:	e007      	b.n	8001704 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 80016f4:	4b44      	ldr	r3, [pc, #272]	; (8001808 <USART3_IRQHandler+0x160>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <USART3_IRQHandler+0x160>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001702:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 8001704:	4b40      	ldr	r3, [pc, #256]	; (8001808 <USART3_IRQHandler+0x160>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b01      	cmp	r3, #1
 8001712:	d166      	bne.n	80017e2 <USART3_IRQHandler+0x13a>
 8001714:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <USART3_IRQHandler+0x160>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d15e      	bne.n	80017e2 <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 8001724:	4b38      	ldr	r3, [pc, #224]	; (8001808 <USART3_IRQHandler+0x160>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	0b1b      	lsrs	r3, r3, #12
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b01      	cmp	r3, #1
 8001732:	d117      	bne.n	8001764 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8001734:	4b34      	ldr	r3, [pc, #208]	; (8001808 <USART3_IRQHandler+0x160>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	0a9b      	lsrs	r3, r3, #10
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b01      	cmp	r3, #1
 8001742:	d108      	bne.n	8001756 <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <USART3_IRQHandler+0x160>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	b29b      	uxth	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <USART3_IRQHandler+0x168>)
 8001752:	809a      	strh	r2, [r3, #4]
 8001754:	e020      	b.n	8001798 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <USART3_IRQHandler+0x160>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	b29a      	uxth	r2, r3
 800175e:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <USART3_IRQHandler+0x168>)
 8001760:	809a      	strh	r2, [r3, #4]
 8001762:	e019      	b.n	8001798 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <USART3_IRQHandler+0x160>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	0a9b      	lsrs	r3, r3, #10
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b01      	cmp	r3, #1
 8001772:	d109      	bne.n	8001788 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <USART3_IRQHandler+0x160>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	b29b      	uxth	r3, r3
 800177c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001780:	b29a      	uxth	r2, r3
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <USART3_IRQHandler+0x168>)
 8001784:	809a      	strh	r2, [r3, #4]
 8001786:	e007      	b.n	8001798 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <USART3_IRQHandler+0x160>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	b29b      	uxth	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <USART3_IRQHandler+0x168>)
 8001796:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <USART3_IRQHandler+0x16c>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	e002      	b.n	80017aa <USART3_IRQHandler+0x102>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3301      	adds	r3, #1
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017b0:	4293      	cmp	r3, r2
 80017b2:	ddf7      	ble.n	80017a4 <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <USART3_IRQHandler+0x160>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <USART3_IRQHandler+0x160>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f022 0220 	bic.w	r2, r2, #32
 80017c2:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <USART3_IRQHandler+0x160>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <USART3_IRQHandler+0x170>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <USART3_IRQHandler+0x160>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <USART3_IRQHandler+0x160>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f022 0220 	bic.w	r2, r2, #32
 80017e0:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <USART3_IRQHandler+0x160>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <USART3_IRQHandler+0x170>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <USART3_IRQHandler+0x160>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <USART3_IRQHandler+0x160>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f022 0220 	bic.w	r2, r2, #32
 80017fe:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000041c 	.word	0x2000041c
 800180c:	20000430 	.word	0x20000430
 8001810:	20000428 	.word	0x20000428
 8001814:	2000043c 	.word	0x2000043c
 8001818:	40004800 	.word	0x40004800

0800181c <TASK1_fun>:
#include "SCEDULER.h"
TASK_FRAME_t TASK1,TASK2,TASK3,TASK4,TASK5;
uint8_t T1,T2,T3,T4,T5;


void TASK1_fun(){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T1^=1;
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <TASK1_fun+0x3c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	f083 0301 	eor.w	r3, r3, #1
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <TASK1_fun+0x3c>)
 800182c:	701a      	strb	r2, [r3, #0]
		co++;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <TASK1_fun+0x40>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	4a09      	ldr	r2, [pc, #36]	; (800185c <TASK1_fun+0x40>)
 8001836:	6013      	str	r3, [r2, #0]
		TogglePin(GPIOA, pin7);
 8001838:	2107      	movs	r1, #7
 800183a:	4809      	ldr	r0, [pc, #36]	; (8001860 <TASK1_fun+0x44>)
 800183c:	f7ff fa44 	bl	8000cc8 <TogglePin>
		//ALSHREIF_RTOS_TASK_WAIT(&TASK1, 100);
		if(co==100){
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <TASK1_fun+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d1eb      	bne.n	8001820 <TASK1_fun+0x4>
			co=0;
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <TASK1_fun+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK1,&TASK2);
 800184e:	4905      	ldr	r1, [pc, #20]	; (8001864 <TASK1_fun+0x48>)
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <TASK1_fun+0x4c>)
 8001852:	f7ff f85b 	bl	800090c <ALSHREIF_RTOS_ACTIVAT_TASK>
		T1^=1;
 8001856:	e7e3      	b.n	8001820 <TASK1_fun+0x4>
 8001858:	200004ee 	.word	0x200004ee
 800185c:	20000040 	.word	0x20000040
 8001860:	40010800 	.word	0x40010800
 8001864:	20000458 	.word	0x20000458
 8001868:	20000488 	.word	0x20000488

0800186c <TASK2_fun>:

		}
	}
}
void TASK2_fun(){
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T2^=1;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <TASK2_fun+0x4c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f083 0301 	eor.w	r3, r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <TASK2_fun+0x4c>)
 800187c:	701a      	strb	r2, [r3, #0]
		co++;
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <TASK2_fun+0x50>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <TASK2_fun+0x50>)
 8001886:	6013      	str	r3, [r2, #0]
		TogglePin(GPIOB, pin0);
 8001888:	2100      	movs	r1, #0
 800188a:	480d      	ldr	r0, [pc, #52]	; (80018c0 <TASK2_fun+0x54>)
 800188c:	f7ff fa1c 	bl	8000cc8 <TogglePin>
		//ALSHREIF_RTOS_TASK_WAIT(&TASK2, 400);
		if(co==100){
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <TASK2_fun+0x50>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b64      	cmp	r3, #100	; 0x64
 8001896:	d103      	bne.n	80018a0 <TASK2_fun+0x34>
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK2,&TASK3);
 8001898:	490a      	ldr	r1, [pc, #40]	; (80018c4 <TASK2_fun+0x58>)
 800189a:	480b      	ldr	r0, [pc, #44]	; (80018c8 <TASK2_fun+0x5c>)
 800189c:	f7ff f836 	bl	800090c <ALSHREIF_RTOS_ACTIVAT_TASK>

		}
		if(co==200){
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <TASK2_fun+0x50>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2bc8      	cmp	r3, #200	; 0xc8
 80018a6:	d1e3      	bne.n	8001870 <TASK2_fun+0x4>
			co=0;
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <TASK2_fun+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
			ALSHREIF_RTOS_TERMINAT_TASK(&TASK2);
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <TASK2_fun+0x5c>)
 80018b0:	f7ff f843 	bl	800093a <ALSHREIF_RTOS_TERMINAT_TASK>
		T2^=1;
 80018b4:	e7dc      	b.n	8001870 <TASK2_fun+0x4>
 80018b6:	bf00      	nop
 80018b8:	20000454 	.word	0x20000454
 80018bc:	20000044 	.word	0x20000044
 80018c0:	40010c00 	.word	0x40010c00
 80018c4:	200004f0 	.word	0x200004f0
 80018c8:	20000458 	.word	0x20000458

080018cc <TASK3_fun>:

		}
	}
}
void TASK3_fun(){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T3^=1;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <TASK3_fun+0x4c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	f083 0301 	eor.w	r3, r3, #1
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <TASK3_fun+0x4c>)
 80018dc:	701a      	strb	r2, [r3, #0]
		co++;
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <TASK3_fun+0x50>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <TASK3_fun+0x50>)
 80018e6:	6013      	str	r3, [r2, #0]
		TogglePin(GPIOB, pin1);
 80018e8:	2101      	movs	r1, #1
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <TASK3_fun+0x54>)
 80018ec:	f7ff f9ec 	bl	8000cc8 <TogglePin>
		//ALSHREIF_RTOS_TASK_WAIT(&TASK3, 1000);
		if(co==100){
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <TASK3_fun+0x50>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b64      	cmp	r3, #100	; 0x64
 80018f6:	d103      	bne.n	8001900 <TASK3_fun+0x34>
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK3,&TASK4);
 80018f8:	490a      	ldr	r1, [pc, #40]	; (8001924 <TASK3_fun+0x58>)
 80018fa:	480b      	ldr	r0, [pc, #44]	; (8001928 <TASK3_fun+0x5c>)
 80018fc:	f7ff f806 	bl	800090c <ALSHREIF_RTOS_ACTIVAT_TASK>
		}
		if(co==200){
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <TASK3_fun+0x50>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2bc8      	cmp	r3, #200	; 0xc8
 8001906:	d1e3      	bne.n	80018d0 <TASK3_fun+0x4>
			co=0;
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <TASK3_fun+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
			ALSHREIF_RTOS_TERMINAT_TASK(&TASK3);
 800190e:	4806      	ldr	r0, [pc, #24]	; (8001928 <TASK3_fun+0x5c>)
 8001910:	f7ff f813 	bl	800093a <ALSHREIF_RTOS_TERMINAT_TASK>
		T3^=1;
 8001914:	e7dc      	b.n	80018d0 <TASK3_fun+0x4>
 8001916:	bf00      	nop
 8001918:	200004ed 	.word	0x200004ed
 800191c:	20000048 	.word	0x20000048
 8001920:	40010c00 	.word	0x40010c00
 8001924:	200004bc 	.word	0x200004bc
 8001928:	200004f0 	.word	0x200004f0

0800192c <TASK4_fun>:
		}
	}
}
void TASK4_fun(){
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T4^=1;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <TASK4_fun+0x4c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	f083 0301 	eor.w	r3, r3, #1
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <TASK4_fun+0x4c>)
 800193c:	701a      	strb	r2, [r3, #0]
		co++;
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <TASK4_fun+0x50>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <TASK4_fun+0x50>)
 8001946:	6013      	str	r3, [r2, #0]
		TogglePin(GPIOB, pin1);
 8001948:	2101      	movs	r1, #1
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <TASK4_fun+0x54>)
 800194c:	f7ff f9bc 	bl	8000cc8 <TogglePin>
		//ALSHREIF_RTOS_TASK_WAIT(&TASK3, 1000);
		if(co==100){
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <TASK4_fun+0x50>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b64      	cmp	r3, #100	; 0x64
 8001956:	d103      	bne.n	8001960 <TASK4_fun+0x34>
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK4,&TASK5);
 8001958:	490a      	ldr	r1, [pc, #40]	; (8001984 <TASK4_fun+0x58>)
 800195a:	480b      	ldr	r0, [pc, #44]	; (8001988 <TASK4_fun+0x5c>)
 800195c:	f7fe ffd6 	bl	800090c <ALSHREIF_RTOS_ACTIVAT_TASK>
		}
		if(co==200){
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <TASK4_fun+0x50>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2bc8      	cmp	r3, #200	; 0xc8
 8001966:	d1e3      	bne.n	8001930 <TASK4_fun+0x4>
			co=0;
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <TASK4_fun+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
			ALSHREIF_RTOS_TERMINAT_TASK(&TASK4);
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <TASK4_fun+0x5c>)
 8001970:	f7fe ffe3 	bl	800093a <ALSHREIF_RTOS_TERMINAT_TASK>
		T4^=1;
 8001974:	e7dc      	b.n	8001930 <TASK4_fun+0x4>
 8001976:	bf00      	nop
 8001978:	200004b8 	.word	0x200004b8
 800197c:	2000004c 	.word	0x2000004c
 8001980:	40010c00 	.word	0x40010c00
 8001984:	20000520 	.word	0x20000520
 8001988:	200004bc 	.word	0x200004bc

0800198c <TASK5_fun>:
		}
	}
}
void TASK5_fun(){
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T5^=1;
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <TASK5_fun+0x34>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <TASK5_fun+0x34>)
 800199c:	701a      	strb	r2, [r3, #0]
		co++;
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <TASK5_fun+0x38>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <TASK5_fun+0x38>)
 80019a6:	6013      	str	r3, [r2, #0]
		//ALSHREIF_RTOS_TASK_WAIT(&TASK4, 100);
		if(co==300){
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <TASK5_fun+0x38>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80019b0:	d1ee      	bne.n	8001990 <TASK5_fun+0x4>
			co=0;
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <TASK5_fun+0x38>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
			ALSHREIF_RTOS_TERMINAT_TASK(&TASK5);
 80019b8:	4803      	ldr	r0, [pc, #12]	; (80019c8 <TASK5_fun+0x3c>)
 80019ba:	f7fe ffbe 	bl	800093a <ALSHREIF_RTOS_TERMINAT_TASK>
		T5^=1;
 80019be:	e7e7      	b.n	8001990 <TASK5_fun+0x4>
 80019c0:	200004ec 	.word	0x200004ec
 80019c4:	20000050 	.word	0x20000050
 80019c8:	20000520 	.word	0x20000520

080019cc <main>:
		}
	}
}
//============================================================================================================
int main(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0

	HARD_WARE_INIT();
 80019d0:	f7fe fc30 	bl	8000234 <HARD_WARE_INIT>
	ALSHREIF_RTOS_INIT();
 80019d4:	f7fe fdc2 	bl	800055c <ALSHREIF_RTOS_INIT>

	strcpy(TASK1.NAME,"TASK1");
 80019d8:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <main+0xe4>)
 80019da:	4a36      	ldr	r2, [pc, #216]	; (8001ab4 <main+0xe8>)
 80019dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019e0:	6018      	str	r0, [r3, #0]
 80019e2:	3304      	adds	r3, #4
 80019e4:	8019      	strh	r1, [r3, #0]
	TASK1.TASK_FUNCTION=TASK1_fun;
 80019e6:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <main+0xec>)
 80019e8:	4a34      	ldr	r2, [pc, #208]	; (8001abc <main+0xf0>)
 80019ea:	609a      	str	r2, [r3, #8]
	TASK1.priority=4;
 80019ec:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <main+0xec>)
 80019ee:	2204      	movs	r2, #4
 80019f0:	711a      	strb	r2, [r3, #4]
	TASK1.stack_size=1024;
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <main+0xec>)
 80019f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f8:	601a      	str	r2, [r3, #0]

	strcpy(TASK2.NAME,"TASK2");
 80019fa:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <main+0xf4>)
 80019fc:	4a31      	ldr	r2, [pc, #196]	; (8001ac4 <main+0xf8>)
 80019fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a02:	6018      	str	r0, [r3, #0]
 8001a04:	3304      	adds	r3, #4
 8001a06:	8019      	strh	r1, [r3, #0]
	TASK2.TASK_FUNCTION=TASK2_fun;
 8001a08:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <main+0xfc>)
 8001a0a:	4a30      	ldr	r2, [pc, #192]	; (8001acc <main+0x100>)
 8001a0c:	609a      	str	r2, [r3, #8]
	TASK2.priority=3;
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <main+0xfc>)
 8001a10:	2203      	movs	r2, #3
 8001a12:	711a      	strb	r2, [r3, #4]
	TASK2.stack_size=1024;
 8001a14:	4b2c      	ldr	r3, [pc, #176]	; (8001ac8 <main+0xfc>)
 8001a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a1a:	601a      	str	r2, [r3, #0]

	strcpy(TASK3.NAME,"TASK3");
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <main+0x104>)
 8001a1e:	4a2d      	ldr	r2, [pc, #180]	; (8001ad4 <main+0x108>)
 8001a20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a24:	6018      	str	r0, [r3, #0]
 8001a26:	3304      	adds	r3, #4
 8001a28:	8019      	strh	r1, [r3, #0]
	TASK3.TASK_FUNCTION=TASK3_fun;
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <main+0x10c>)
 8001a2c:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <main+0x110>)
 8001a2e:	609a      	str	r2, [r3, #8]
	TASK3.priority=2;
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <main+0x10c>)
 8001a32:	2202      	movs	r2, #2
 8001a34:	711a      	strb	r2, [r3, #4]
	TASK3.stack_size=1024;
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <main+0x10c>)
 8001a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3c:	601a      	str	r2, [r3, #0]

	strcpy(TASK4.NAME,"TASK4");
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <main+0x114>)
 8001a40:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <main+0x118>)
 8001a42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a46:	6018      	str	r0, [r3, #0]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	8019      	strh	r1, [r3, #0]
	TASK4.TASK_FUNCTION=TASK4_fun;
 8001a4c:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <main+0x11c>)
 8001a4e:	4a27      	ldr	r2, [pc, #156]	; (8001aec <main+0x120>)
 8001a50:	609a      	str	r2, [r3, #8]
	TASK4.priority=1;
 8001a52:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <main+0x11c>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	711a      	strb	r2, [r3, #4]
	TASK4.stack_size=1024;
 8001a58:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <main+0x11c>)
 8001a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5e:	601a      	str	r2, [r3, #0]

	strcpy(TASK5.NAME,"TASK5");
 8001a60:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <main+0x124>)
 8001a62:	4a24      	ldr	r2, [pc, #144]	; (8001af4 <main+0x128>)
 8001a64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a68:	6018      	str	r0, [r3, #0]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	8019      	strh	r1, [r3, #0]
	TASK5.TASK_FUNCTION=TASK5_fun;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <main+0x12c>)
 8001a70:	4a22      	ldr	r2, [pc, #136]	; (8001afc <main+0x130>)
 8001a72:	609a      	str	r2, [r3, #8]
	TASK5.priority=0;
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <main+0x12c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	711a      	strb	r2, [r3, #4]
	TASK5.stack_size=1024;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <main+0x12c>)
 8001a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a80:	601a      	str	r2, [r3, #0]

	ALSHREIF_RTOS_CREAT_TASK(&TASK1);
 8001a82:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <main+0xec>)
 8001a84:	f7fe fd2e 	bl	80004e4 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK2);
 8001a88:	480f      	ldr	r0, [pc, #60]	; (8001ac8 <main+0xfc>)
 8001a8a:	f7fe fd2b 	bl	80004e4 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK3);
 8001a8e:	4812      	ldr	r0, [pc, #72]	; (8001ad8 <main+0x10c>)
 8001a90:	f7fe fd28 	bl	80004e4 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK4);
 8001a94:	4814      	ldr	r0, [pc, #80]	; (8001ae8 <main+0x11c>)
 8001a96:	f7fe fd25 	bl	80004e4 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK5);
 8001a9a:	4817      	ldr	r0, [pc, #92]	; (8001af8 <main+0x12c>)
 8001a9c:	f7fe fd22 	bl	80004e4 <ALSHREIF_RTOS_CREAT_TASK>

	ALSHREIF_RTOS_ACTIVAT_TASK(NULL,&TASK1);
 8001aa0:	4905      	ldr	r1, [pc, #20]	; (8001ab8 <main+0xec>)
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7fe ff32 	bl	800090c <ALSHREIF_RTOS_ACTIVAT_TASK>
	//	ALSHREIF_RTOS_ACTIVAT_TASK(&TASK2);
	//	ALSHREIF_RTOS_ACTIVAT_TASK(&TASK3);

	ALSHREIF_RTOS_START_OS();
 8001aa8:	f7fe ff56 	bl	8000958 <ALSHREIF_RTOS_START_OS>
	while(1);
 8001aac:	e7fe      	b.n	8001aac <main+0xe0>
 8001aae:	bf00      	nop
 8001ab0:	200004a0 	.word	0x200004a0
 8001ab4:	08001bc0 	.word	0x08001bc0
 8001ab8:	20000488 	.word	0x20000488
 8001abc:	0800181d 	.word	0x0800181d
 8001ac0:	20000470 	.word	0x20000470
 8001ac4:	08001bc8 	.word	0x08001bc8
 8001ac8:	20000458 	.word	0x20000458
 8001acc:	0800186d 	.word	0x0800186d
 8001ad0:	20000508 	.word	0x20000508
 8001ad4:	08001bd0 	.word	0x08001bd0
 8001ad8:	200004f0 	.word	0x200004f0
 8001adc:	080018cd 	.word	0x080018cd
 8001ae0:	200004d4 	.word	0x200004d4
 8001ae4:	08001bd8 	.word	0x08001bd8
 8001ae8:	200004bc 	.word	0x200004bc
 8001aec:	0800192d 	.word	0x0800192d
 8001af0:	20000538 	.word	0x20000538
 8001af4:	08001be0 	.word	0x08001be0
 8001af8:	20000520 	.word	0x20000520
 8001afc:	0800198d 	.word	0x0800198d

08001b00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b02:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b04:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b0a:	490d      	ldr	r1, [pc, #52]	; (8001b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <LoopForever+0xe>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b20:	4c0a      	ldr	r4, [pc, #40]	; (8001b4c <LoopForever+0x16>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b2e:	f000 f811 	bl	8001b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b32:	f7ff ff4b 	bl	80019cc <main>

08001b36 <LoopForever>:

LoopForever:
    b LoopForever
 8001b36:	e7fe      	b.n	8001b36 <LoopForever>
  ldr   r0, =_estack
 8001b38:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001b44:	08001bf0 	.word	0x08001bf0
  ldr r2, =_sbss
 8001b48:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001b4c:	20000550 	.word	0x20000550

08001b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC1_2_IRQHandler>
	...

08001b54 <__libc_init_array>:
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	2500      	movs	r5, #0
 8001b58:	4e0c      	ldr	r6, [pc, #48]	; (8001b8c <__libc_init_array+0x38>)
 8001b5a:	4c0d      	ldr	r4, [pc, #52]	; (8001b90 <__libc_init_array+0x3c>)
 8001b5c:	1ba4      	subs	r4, r4, r6
 8001b5e:	10a4      	asrs	r4, r4, #2
 8001b60:	42a5      	cmp	r5, r4
 8001b62:	d109      	bne.n	8001b78 <__libc_init_array+0x24>
 8001b64:	f000 f81a 	bl	8001b9c <_init>
 8001b68:	2500      	movs	r5, #0
 8001b6a:	4e0a      	ldr	r6, [pc, #40]	; (8001b94 <__libc_init_array+0x40>)
 8001b6c:	4c0a      	ldr	r4, [pc, #40]	; (8001b98 <__libc_init_array+0x44>)
 8001b6e:	1ba4      	subs	r4, r4, r6
 8001b70:	10a4      	asrs	r4, r4, #2
 8001b72:	42a5      	cmp	r5, r4
 8001b74:	d105      	bne.n	8001b82 <__libc_init_array+0x2e>
 8001b76:	bd70      	pop	{r4, r5, r6, pc}
 8001b78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b7c:	4798      	blx	r3
 8001b7e:	3501      	adds	r5, #1
 8001b80:	e7ee      	b.n	8001b60 <__libc_init_array+0xc>
 8001b82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b86:	4798      	blx	r3
 8001b88:	3501      	adds	r5, #1
 8001b8a:	e7f2      	b.n	8001b72 <__libc_init_array+0x1e>
 8001b8c:	08001be8 	.word	0x08001be8
 8001b90:	08001be8 	.word	0x08001be8
 8001b94:	08001be8 	.word	0x08001be8
 8001b98:	08001bec 	.word	0x08001bec

08001b9c <_init>:
 8001b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9e:	bf00      	nop
 8001ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ba2:	bc08      	pop	{r3}
 8001ba4:	469e      	mov	lr, r3
 8001ba6:	4770      	bx	lr

08001ba8 <_fini>:
 8001ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001baa:	bf00      	nop
 8001bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bae:	bc08      	pop	{r3}
 8001bb0:	469e      	mov	lr, r3
 8001bb2:	4770      	bx	lr
