
RTOS_PROJECT.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019cc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001afc  08001afc  00011afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b28  08001b28  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001b28  08001b28  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b28  08001b28  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b28  08001b28  00011b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b2c  08001b2c  00011b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000020  08001b50  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08001b50  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074bd  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001406  00000000  00000000  00027506  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003b0  00000000  00000000  00028910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000318  00000000  00000000  00028cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003fd4  00000000  00000000  00028fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004783  00000000  00000000  0002cfac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00010cdd  00000000  00000000  0003172f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004240c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c50  00000000  00000000  00042488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08001ae4 	.word	0x08001ae4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08001ae4 	.word	0x08001ae4

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
 *  Created on: Mar 10, 2023
 *      Author: 20102
 */
#include "RTOS_CORTEX_M3_PORTING.h"
#include "stm32_speed_DRIVER.h"
void HardFault_Handler(){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}
void	MemManage_Handler(){
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}
void	BusFault_Handler(){
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}
void	UsageFault_Handler(){
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <HARD_WARE_INIT>:
}

//====================================
void HARD_WARE_INIT(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

	__NVIC_SetPriority(PendSV_IRQn, 15) ;
 8000238:	210f      	movs	r1, #15
 800023a:	f06f 0001 	mvn.w	r0, #1
 800023e:	f7ff ffa1 	bl	8000184 <__NVIC_SetPriority>
	pinmode(GPIOA, pin7, GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000242:	2202      	movs	r2, #2
 8000244:	2107      	movs	r1, #7
 8000246:	4807      	ldr	r0, [pc, #28]	; (8000264 <HARD_WARE_INIT+0x30>)
 8000248:	f000 fce0 	bl	8000c0c <pinmode>
	pinmode(GPIOB, pin0, GPIO_MODE_OUTPUT_push_pull_Speed2);
 800024c:	2202      	movs	r2, #2
 800024e:	2100      	movs	r1, #0
 8000250:	4805      	ldr	r0, [pc, #20]	; (8000268 <HARD_WARE_INIT+0x34>)
 8000252:	f000 fcdb 	bl	8000c0c <pinmode>
	pinmode(GPIOB, pin1, GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000256:	2202      	movs	r2, #2
 8000258:	2101      	movs	r1, #1
 800025a:	4803      	ldr	r0, [pc, #12]	; (8000268 <HARD_WARE_INIT+0x34>)
 800025c:	f000 fcd6 	bl	8000c0c <pinmode>

}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40010800 	.word	0x40010800
 8000268:	40010c00 	.word	0x40010c00

0800026c <SVC_Handler>:


//====================================

__attribute__((naked)) void SVC_Handler(){
	__asm("TST lr,#4 \n\t"
 800026c:	f01e 0f04 	tst.w	lr, #4
 8000270:	bf0c      	ite	eq
 8000272:	f3ef 8008 	mrseq	r0, MSP
 8000276:	f3ef 8009 	mrsne	r0, PSP
 800027a:	f000 bab3 	b.w	80007e4 <OS_SVC_SERVICES>
			"ITE EQ \n\t"
			"MRSEQ r0,MSP \n\t"
			"MRSNE r0,PSP \n\t"
			"B OS_SVC_SERVICES");
}
 800027e:	bf00      	nop

08000280 <OS_TRIGDER_PENDSV>:



//====================================

void OS_TRIGDER_PENDSV(){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <OS_TRIGDER_PENDSV+0x18>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a03      	ldr	r2, [pc, #12]	; (8000298 <OS_TRIGDER_PENDSV+0x18>)
 800028a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800028e:	6053      	str	r3, [r2, #4]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <TIMER_START>:
//====================================
void TIMER_START(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0

	SysTick_Config( TICKS_TIMER);
 80002a0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80002a4:	f7ff ff98 	bl	80001d8 <SysTick_Config>
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}

080002ac <OS_FIFO_INIT>:


#include "RTOS_FIFO.h"


FIFO_status_t OS_FIFO_INIT (FIFO_BUF_t* fifo,FIFO_TYPE* buff , uint16_t length){
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	4613      	mov	r3, r2
 80002b8:	80fb      	strh	r3, [r7, #6]

	if(!buff )
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d101      	bne.n	80002c4 <OS_FIFO_INIT+0x18>
		return FIFO_NULL;
 80002c0:	2301      	movs	r3, #1
 80002c2:	e011      	b.n	80002e8 <OS_FIFO_INIT+0x3c>

	fifo->base = buff ;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	609a      	str	r2, [r3, #8]
	fifo->head = fifo->base ;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	689a      	ldr	r2, [r3, #8]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	601a      	str	r2, [r3, #0]
	fifo->tail = fifo->base ;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	689a      	ldr	r2, [r3, #8]
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	605a      	str	r2, [r3, #4]
	fifo->lenght = length;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	88fa      	ldrh	r2, [r7, #6]
 80002de:	81da      	strh	r2, [r3, #14]
	fifo->count=0;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	2200      	movs	r2, #0
 80002e4:	819a      	strh	r2, [r3, #12]

	return FIFO_NO_ERROR;
 80002e6:	2300      	movs	r3, #0

}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr

080002f2 <OS_FIFO_ENQUEUE>:

/* *********************************** */

FIFO_status_t OS_FIFO_ENQUEUE (FIFO_BUF_t* fifo,FIFO_TYPE item){
 80002f2:	b480      	push	{r7}
 80002f4:	b083      	sub	sp, #12
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
 80002fa:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->lenght)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d003      	beq.n	800030c <OS_FIFO_ENQUEUE+0x1a>
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	89db      	ldrh	r3, [r3, #14]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d101      	bne.n	8000310 <OS_FIFO_ENQUEUE+0x1e>
		return FIFO_NULL;
 800030c:	2301      	movs	r3, #1
 800030e:	e02e      	b.n	800036e <OS_FIFO_ENQUEUE+0x7c>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->count == fifo->lenght))
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	429a      	cmp	r2, r3
 800031a:	d107      	bne.n	800032c <OS_FIFO_ENQUEUE+0x3a>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	899a      	ldrh	r2, [r3, #12]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	89db      	ldrh	r3, [r3, #14]
 8000324:	429a      	cmp	r2, r3
 8000326:	d101      	bne.n	800032c <OS_FIFO_ENQUEUE+0x3a>
		return FIFO_FULL;
 8000328:	2302      	movs	r3, #2
 800032a:	e020      	b.n	800036e <OS_FIFO_ENQUEUE+0x7c>

	*(fifo->tail)=item;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	683a      	ldr	r2, [r7, #0]
 8000332:	601a      	str	r2, [r3, #0]
	fifo->count++;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	899b      	ldrh	r3, [r3, #12]
 8000338:	3301      	adds	r3, #1
 800033a:	b29a      	uxth	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	819a      	strh	r2, [r3, #12]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->lenght )) - 4 ))
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6892      	ldr	r2, [r2, #8]
 8000348:	4611      	mov	r1, r2
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	89d2      	ldrh	r2, [r2, #14]
 800034e:	0092      	lsls	r2, r2, #2
 8000350:	440a      	add	r2, r1
 8000352:	3a04      	subs	r2, #4
 8000354:	4293      	cmp	r3, r2
 8000356:	d104      	bne.n	8000362 <OS_FIFO_ENQUEUE+0x70>
		fifo->tail = fifo->base;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	689a      	ldr	r2, [r3, #8]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	e004      	b.n	800036c <OS_FIFO_ENQUEUE+0x7a>
	else
		fifo->tail++;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	1d1a      	adds	r2, r3, #4
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 800036c:	2300      	movs	r3, #0


}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <OS_FIFO_DEQUEUE>:

/* *********************************** */

FIFO_status_t OS_FIFO_DEQUEUE (FIFO_BUF_t* fifo, FIFO_TYPE* item){
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->lenght)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d003      	beq.n	8000392 <OS_FIFO_DEQUEUE+0x1a>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	89db      	ldrh	r3, [r3, #14]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d101      	bne.n	8000396 <OS_FIFO_DEQUEUE+0x1e>
		return FIFO_NULL;
 8000392:	2301      	movs	r3, #1
 8000394:	e02d      	b.n	80003f2 <OS_FIFO_DEQUEUE+0x7a>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d101      	bne.n	80003a6 <OS_FIFO_DEQUEUE+0x2e>
		return FIFO_EMPTY;
 80003a2:	2303      	movs	r3, #3
 80003a4:	e025      	b.n	80003f2 <OS_FIFO_DEQUEUE+0x7a>



	*item = *(fifo->head);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	601a      	str	r2, [r3, #0]
	*(fifo->head)=NULL;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
	fifo->count--;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	899b      	ldrh	r3, [r3, #12]
 80003bc:	3b01      	subs	r3, #1
 80003be:	b29a      	uxth	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	819a      	strh	r2, [r3, #12]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->lenght )) - 4 ))
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	6892      	ldr	r2, [r2, #8]
 80003cc:	4611      	mov	r1, r2
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	89d2      	ldrh	r2, [r2, #14]
 80003d2:	0092      	lsls	r2, r2, #2
 80003d4:	440a      	add	r2, r1
 80003d6:	3a04      	subs	r2, #4
 80003d8:	4293      	cmp	r3, r2
 80003da:	d104      	bne.n	80003e6 <OS_FIFO_DEQUEUE+0x6e>
		fifo->head = fifo->base;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	689a      	ldr	r2, [r3, #8]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	e004      	b.n	80003f0 <OS_FIFO_DEQUEUE+0x78>
	else
		fifo->head++;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	1d1a      	adds	r2, r3, #4
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80003f0:	2300      	movs	r3, #0
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <idle_task_fun>:
	SVC_TERMINATE_task,
	SVC_Wating_task
}_SVC_ID;
//===============================idle_task_fun==================================
uint8_t idle=0;
void idle_task_fun(){
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	while(1){
		idle^=1;
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <idle_task_fun+0x18>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	f083 0301 	eor.w	r3, r3, #1
 8000408:	b2da      	uxtb	r2, r3
 800040a:	4b02      	ldr	r3, [pc, #8]	; (8000414 <idle_task_fun+0x18>)
 800040c:	701a      	strb	r2, [r3, #0]
		__asm("WFE");
 800040e:	bf20      	wfe
		idle^=1;
 8000410:	e7f6      	b.n	8000400 <idle_task_fun+0x4>
 8000412:	bf00      	nop
 8000414:	2000003c 	.word	0x2000003c

08000418 <ALSHREIF_RTOS_CREAT_TASK_FRAM>:
	}
}
//=======================ALSHREIF_RTOS_CREAT_TASK_FRAM==========================

void ALSHREIF_RTOS_CREAT_TASK_FRAM(TASK_FRAME_t* TASK){
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	 * r8
	 * r9
	 * r10
	 * r11
	 * */
	TASK->_PSP_STACK_CURENT=TASK->_PSP_STACK_TOP;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	461a      	mov	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	615a      	str	r2, [r3, #20]
	TASK->_PSP_STACK_CURENT--;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	1f1a      	subs	r2, r3, #4
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	615a      	str	r2, [r3, #20]
	*(TASK->_PSP_STACK_CURENT)=0x01000000;//xpsr
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800043c:	601a      	str	r2, [r3, #0]

	TASK->_PSP_STACK_CURENT--;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	1f1a      	subs	r2, r3, #4
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	615a      	str	r2, [r3, #20]
	*(TASK->_PSP_STACK_CURENT)=(uint32_t)TASK->TASK_FUNCTION;//pc
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	689a      	ldr	r2, [r3, #8]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	601a      	str	r2, [r3, #0]

	TASK->_PSP_STACK_CURENT--;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	1f1a      	subs	r2, r3, #4
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	615a      	str	r2, [r3, #20]
	*(TASK->_PSP_STACK_CURENT)=0xFFFFFFFD;//lr
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	f06f 0202 	mvn.w	r2, #2
 8000464:	601a      	str	r2, [r3, #0]

	for(uint8_t i =0;i<13;i++){
 8000466:	2300      	movs	r3, #0
 8000468:	73fb      	strb	r3, [r7, #15]
 800046a:	e00b      	b.n	8000484 <ALSHREIF_RTOS_CREAT_TASK_FRAM+0x6c>
		TASK->_PSP_STACK_CURENT--;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	1f1a      	subs	r2, r3, #4
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	615a      	str	r2, [r3, #20]
		*(TASK->_PSP_STACK_CURENT)=0;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
	for(uint8_t i =0;i<13;i++){
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	3301      	adds	r3, #1
 8000482:	73fb      	strb	r3, [r7, #15]
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	2b0c      	cmp	r3, #12
 8000488:	d9f0      	bls.n	800046c <ALSHREIF_RTOS_CREAT_TASK_FRAM+0x54>
	}

}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <ALSHREIF_CREATE_MAIN_STACK>:
//===============================CREATE_MAIN_STACK==============================
void ALSHREIF_CREATE_MAIN_STACK(){
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
	OS_CONTROL._MSP_STACK_TOP=(uint32_t volatile)&_estack;//top main stack
 8000498:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <ALSHREIF_CREATE_MAIN_STACK+0x34>)
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 800049c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_CONTROL._MSP_STACK_END=OS_CONTROL._MSP_STACK_TOP-MAIN_STACK_SIZE;//end main stack
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004a2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80004a6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80004aa:	4a08      	ldr	r2, [pc, #32]	; (80004cc <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004ac:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_CONTROL._PSP_TASK_locator =(OS_CONTROL._MSP_STACK_END-8);//locator task 1
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004b2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80004b6:	3b08      	subs	r3, #8
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004ba:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	20005000 	.word	0x20005000
 80004cc:	200001e4 	.word	0x200001e4

080004d0 <ALSHREIF_RTOS_CREAT_TASK>:
//===============================ALSHREIF_RTOS_CREAT_TASK========================
void ALSHREIF_RTOS_CREAT_TASK(TASK_FRAME_t* TASK){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	TASK->_PSP_STACK_TOP=OS_CONTROL._PSP_TASK_locator;
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 80004da:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	60da      	str	r2, [r3, #12]
	TASK->_PSP_STACK_END=(TASK->_PSP_STACK_TOP-TASK->stack_size);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	68da      	ldr	r2, [r3, #12]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1ad2      	subs	r2, r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	611a      	str	r2, [r3, #16]
	if(TASK->_PSP_STACK_END<(uint32_t)(&_end_heap))while(1); //over flow
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	691b      	ldr	r3, [r3, #16]
 80004f4:	4a13      	ldr	r2, [pc, #76]	; (8000544 <ALSHREIF_RTOS_CREAT_TASK+0x74>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d200      	bcs.n	80004fc <ALSHREIF_RTOS_CREAT_TASK+0x2c>
 80004fa:	e7fe      	b.n	80004fa <ALSHREIF_RTOS_CREAT_TASK+0x2a>
	OS_CONTROL._PSP_TASK_locator=(TASK->_PSP_STACK_END-8);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	691b      	ldr	r3, [r3, #16]
 8000500:	3b08      	subs	r3, #8
 8000502:	4a0f      	ldr	r2, [pc, #60]	; (8000540 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000504:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	ALSHREIF_RTOS_CREAT_TASK_FRAM(TASK);//pointer ((:
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f7ff ff85 	bl	8000418 <ALSHREIF_RTOS_CREAT_TASK_FRAM>
	//in the first time in runtime when it context SAVE the idle task,
	//and go to the next task this will make a problem because current_task->>_PSP_STACK_CURENT did not enter before
	//so _PSP_STACK_CURENT will be zero and if it but zero in PSP it will make HardFault
	//check @context tasks

	OS_CONTROL.OS_TASKS[OS_CONTROL.NUMBER_OF_TASKS]=TASK;
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000510:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000514:	4619      	mov	r1, r3
 8000516:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	OS_CONTROL.NUMBER_OF_TASKS++;
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000520:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000524:	3301      	adds	r3, #1
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 800052a:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c

	TASK->State=Suspend;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200001e4 	.word	0x200001e4
 8000544:	20000b20 	.word	0x20000b20

08000548 <ALSHREIF_RTOS_INIT>:
//=============================== RTOS_INIT =====================================
OS_ERRORS ALSHREIF_RTOS_INIT(){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
	OS_ERRORS error =no_error;
 800054e:	2300      	movs	r3, #0
 8000550:	71fb      	strb	r3, [r7, #7]
	//os mode
	OS_CONTROL.OS_MODE=OS_Suspend;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <ALSHREIF_RTOS_INIT+0x54>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//main stack of os
	ALSHREIF_CREATE_MAIN_STACK();
 800055a:	f7ff ff9b 	bl	8000494 <ALSHREIF_CREATE_MAIN_STACK>
	//init ready queue
	OS_FIFO_INIT(&READY_QUEUE,READY_QUEUE_TABLE, TASKS_NUMPER_DEFINE);
 800055e:	2264      	movs	r2, #100	; 0x64
 8000560:	490f      	ldr	r1, [pc, #60]	; (80005a0 <ALSHREIF_RTOS_INIT+0x58>)
 8000562:	4810      	ldr	r0, [pc, #64]	; (80005a4 <ALSHREIF_RTOS_INIT+0x5c>)
 8000564:	f7ff fea2 	bl	80002ac <OS_FIFO_INIT>
	//create idle task
	strcpy(IDLE_TASK.NAME,"idle task");
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <ALSHREIF_RTOS_INIT+0x60>)
 800056a:	4a10      	ldr	r2, [pc, #64]	; (80005ac <ALSHREIF_RTOS_INIT+0x64>)
 800056c:	ca07      	ldmia	r2, {r0, r1, r2}
 800056e:	c303      	stmia	r3!, {r0, r1}
 8000570:	801a      	strh	r2, [r3, #0]
	IDLE_TASK.priority=255;
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <ALSHREIF_RTOS_INIT+0x68>)
 8000574:	22ff      	movs	r2, #255	; 0xff
 8000576:	711a      	strb	r2, [r3, #4]
	IDLE_TASK.TASK_FUNCTION=idle_task_fun;
 8000578:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <ALSHREIF_RTOS_INIT+0x68>)
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <ALSHREIF_RTOS_INIT+0x6c>)
 800057c:	609a      	str	r2, [r3, #8]
	IDLE_TASK.stack_size=100;
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <ALSHREIF_RTOS_INIT+0x68>)
 8000580:	2264      	movs	r2, #100	; 0x64
 8000582:	601a      	str	r2, [r3, #0]

	ALSHREIF_RTOS_CREAT_TASK(&IDLE_TASK);
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <ALSHREIF_RTOS_INIT+0x68>)
 8000586:	f7ff ffa3 	bl	80004d0 <ALSHREIF_RTOS_CREAT_TASK>

	IDLE_TASK.State=Suspend;
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <ALSHREIF_RTOS_INIT+0x68>)
 800058c:	2200      	movs	r2, #0
 800058e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	return error;
 8000592:	79fb      	ldrb	r3, [r7, #7]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200001e4 	.word	0x200001e4
 80005a0:	20000054 	.word	0x20000054
 80005a4:	200003c0 	.word	0x200003c0
 80005a8:	200003a8 	.word	0x200003a8
 80005ac:	08001afc 	.word	0x08001afc
 80005b0:	20000390 	.word	0x20000390
 80005b4:	080003fd 	.word	0x080003fd

080005b8 <bubble_sort>:
//===========================================UPDATE_SCEDULER=======================================================
void bubble_sort(){
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
	unsigned int i, j , n;
	TASK_FRAME_t* temp ;
	n = OS_CONTROL.NUMBER_OF_TASKS;
 80005be:	4b21      	ldr	r3, [pc, #132]	; (8000644 <bubble_sort+0x8c>)
 80005c0:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 80005c4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e030      	b.n	800062e <bubble_sort+0x76>
		for (j = 0; j < n - i - 1; j++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	e023      	b.n	800061a <bubble_sort+0x62>
			if (OS_CONTROL.OS_TASKS[j]->priority > OS_CONTROL.OS_TASKS[j+1]->priority)
 80005d2:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <bubble_sort+0x8c>)
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005da:	791a      	ldrb	r2, [r3, #4]
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	3301      	adds	r3, #1
 80005e0:	4918      	ldr	r1, [pc, #96]	; (8000644 <bubble_sort+0x8c>)
 80005e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d913      	bls.n	8000614 <bubble_sort+0x5c>
			{
				temp =OS_CONTROL.OS_TASKS[j];
 80005ec:	4a15      	ldr	r2, [pc, #84]	; (8000644 <bubble_sort+0x8c>)
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f4:	603b      	str	r3, [r7, #0]
				OS_CONTROL.OS_TASKS[j] =OS_CONTROL.OS_TASKS[j+1] ;
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	3301      	adds	r3, #1
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <bubble_sort+0x8c>)
 80005fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000600:	4910      	ldr	r1, [pc, #64]	; (8000644 <bubble_sort+0x8c>)
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_CONTROL.OS_TASKS[j+1] = temp ;
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	3301      	adds	r3, #1
 800060c:	490d      	ldr	r1, [pc, #52]	; (8000644 <bubble_sort+0x8c>)
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	3301      	adds	r3, #1
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	3b01      	subs	r3, #1
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	429a      	cmp	r2, r3
 8000626:	d3d4      	bcc.n	80005d2 <bubble_sort+0x1a>
	for (i = 0; i < n - 1; i++)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3301      	adds	r3, #1
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3b01      	subs	r3, #1
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	429a      	cmp	r2, r3
 8000636:	d3c9      	bcc.n	80005cc <bubble_sort+0x14>
			}

}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	200001e4 	.word	0x200001e4

08000648 <free_the_FIFO>:
//=====================
void free_the_FIFO(){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	TASK_FRAME_t* temp;//Because I went to pointer to pointer **
	while(OS_FIFO_DEQUEUE(&READY_QUEUE,&temp) !=FIFO_EMPTY){//Address of the pointer
 800064e:	bf00      	nop
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <free_the_FIFO+0x20>)
 8000656:	f7ff fe8f 	bl	8000378 <OS_FIFO_DEQUEUE>
 800065a:	4603      	mov	r3, r0
 800065c:	2b03      	cmp	r3, #3
 800065e:	d1f7      	bne.n	8000650 <free_the_FIFO+0x8>

	}
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200003c0 	.word	0x200003c0

0800066c <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>:
//=====================
void ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES(){
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
	//=====================
	TASK_FRAME_t *NEXT_TASK,*CURENT_TASK;
	uint8_t i=0;
 8000672:	2300      	movs	r3, #0
 8000674:	73fb      	strb	r3, [r7, #15]
	//=====================
	bubble_sort();//Rearrange  the SCEDULER table
 8000676:	f7ff ff9f 	bl	80005b8 <bubble_sort>
	//=====================
	free_the_FIFO(); //free the FIFO
 800067a:	f7ff ffe5 	bl	8000648 <free_the_FIFO>

	//=====================
	//update the FIFO
	while(i<OS_CONTROL.NUMBER_OF_TASKS)
 800067e:	e03d      	b.n	80006fc <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x90>
	{
		CURENT_TASK=OS_CONTROL.OS_TASKS[i];
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	4a24      	ldr	r2, [pc, #144]	; (8000714 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 8000684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000688:	60bb      	str	r3, [r7, #8]
		NEXT_TASK=OS_CONTROL.OS_TASKS[i+1];
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	3301      	adds	r3, #1
 800068e:	4a21      	ldr	r2, [pc, #132]	; (8000714 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 8000690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000694:	607b      	str	r3, [r7, #4]

		/*
		 * <<I need only the highest  priority element or all  equal highest priority >>
		 */

		if(CURENT_TASK->State!=Suspend){
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800069c:	2b00      	cmp	r3, #0
 800069e:	d02a      	beq.n	80006f6 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x8a>
			 * Suspend
			 * wait
			 * >>i++
			 */

			if(NEXT_TASK->State==Suspend){//Suspend or NULL don not care it is the same =0
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d108      	bne.n	80006bc <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x50>
				/*
				 * wait go to the fifo
				 * Suspend
				 * */

				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 80006aa:	68b9      	ldr	r1, [r7, #8]
 80006ac:	481a      	ldr	r0, [pc, #104]	; (8000718 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 80006ae:	f7ff fe20 	bl	80002f2 <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2202      	movs	r2, #2
 80006b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				break;
 80006ba:	e026      	b.n	800070a <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x9e>
			/*
			 * wait priority =0 >>>go to the fifo
			 * wait priority= 1
			 *
			 * */
			if(CURENT_TASK->priority < NEXT_TASK->priority){
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	791a      	ldrb	r2, [r3, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d208      	bcs.n	80006da <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x6e>
				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 80006c8:	68b9      	ldr	r1, [r7, #8]
 80006ca:	4813      	ldr	r0, [pc, #76]	; (8000718 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 80006cc:	f7ff fe11 	bl	80002f2 <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2202      	movs	r2, #2
 80006d4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				break;
 80006d8:	e017      	b.n	800070a <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x9e>
			 * wait priority =1  go to the fifo
			 * wait priority= 1  go to the fifo
			 *
			 * >>> round robin
			 * */
			else if(CURENT_TASK->priority == NEXT_TASK->priority){
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	791a      	ldrb	r2, [r3, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d107      	bne.n	80006f6 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x8a>
				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 80006e6:	68b9      	ldr	r1, [r7, #8]
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 80006ea:	f7ff fe02 	bl	80002f2 <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	2202      	movs	r2, #2
 80006f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			}

		}


		i++;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	3301      	adds	r3, #1
 80006fa:	73fb      	strb	r3, [r7, #15]
	while(i<OS_CONTROL.NUMBER_OF_TASKS)
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 8000702:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000706:	429a      	cmp	r2, r3
 8000708:	d3ba      	bcc.n	8000680 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x14>
	}
	//end while
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200001e4 	.word	0x200001e4
 8000718:	200003c0 	.word	0x200003c0

0800071c <OS_SVC_SET>:

//======================================== SVC =====================================================

void OS_SVC_SET(_SVC_ID ID){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	//OS_SVC_SERVICES
	switch(ID){
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d006      	beq.n	800073a <OS_SVC_SET+0x1e>
 800072c:	2b02      	cmp	r3, #2
 800072e:	d006      	beq.n	800073e <OS_SVC_SET+0x22>
 8000730:	2b00      	cmp	r3, #0
 8000732:	d000      	beq.n	8000736 <OS_SVC_SET+0x1a>
		break;
	case SVC_Wating_task:
		__asm("SVC #0x02");//wating
		break;
	}
}
 8000734:	e005      	b.n	8000742 <OS_SVC_SET+0x26>
		__asm("SVC #0x0");//ACTIVAT
 8000736:	df00      	svc	0
		break;
 8000738:	e003      	b.n	8000742 <OS_SVC_SET+0x26>
		__asm("SVC #0x01");//TERMINATE
 800073a:	df01      	svc	1
		break;
 800073c:	e001      	b.n	8000742 <OS_SVC_SET+0x26>
		__asm("SVC #0x02");//wating
 800073e:	df02      	svc	2
		break;
 8000740:	bf00      	nop
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <OS_WHATE_NEXT>:
//=====================
void OS_WHATE_NEXT(){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

	if((READY_QUEUE.count==0)&&(OS_CONTROL.CURENT_TASK->State==Suspend)){
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <OS_WHATE_NEXT+0x8c>)
 8000752:	899b      	ldrh	r3, [r3, #12]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d114      	bne.n	8000782 <OS_WHATE_NEXT+0x36>
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <OS_WHATE_NEXT+0x90>)
 800075a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800075e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000762:	2b00      	cmp	r3, #0
 8000764:	d10d      	bne.n	8000782 <OS_WHATE_NEXT+0x36>
		OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK); //go to fifo
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <OS_WHATE_NEXT+0x90>)
 8000768:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800076c:	4619      	mov	r1, r3
 800076e:	481a      	ldr	r0, [pc, #104]	; (80007d8 <OS_WHATE_NEXT+0x8c>)
 8000770:	f7ff fdbf 	bl	80002f2 <OS_FIFO_ENQUEUE>
		OS_CONTROL.NEXT_TASK=OS_CONTROL.CURENT_TASK;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <OS_WHATE_NEXT+0x90>)
 8000776:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800077a:	4a18      	ldr	r2, [pc, #96]	; (80007dc <OS_WHATE_NEXT+0x90>)
 800077c:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		if((OS_CONTROL.CURENT_TASK->priority==OS_CONTROL.NEXT_TASK->priority)&&(OS_CONTROL.CURENT_TASK->State!=Suspend)){
			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK);
			OS_CONTROL.CURENT_TASK->State=Ready;
		}
	}
}
 8000780:	e027      	b.n	80007d2 <OS_WHATE_NEXT+0x86>
		OS_FIFO_DEQUEUE(&READY_QUEUE,&OS_CONTROL.NEXT_TASK);
 8000782:	4917      	ldr	r1, [pc, #92]	; (80007e0 <OS_WHATE_NEXT+0x94>)
 8000784:	4814      	ldr	r0, [pc, #80]	; (80007d8 <OS_WHATE_NEXT+0x8c>)
 8000786:	f7ff fdf7 	bl	8000378 <OS_FIFO_DEQUEUE>
		OS_CONTROL.NEXT_TASK->State=Running;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <OS_WHATE_NEXT+0x90>)
 800078c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000790:	2203      	movs	r2, #3
 8000792:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		if((OS_CONTROL.CURENT_TASK->priority==OS_CONTROL.NEXT_TASK->priority)&&(OS_CONTROL.CURENT_TASK->State!=Suspend)){
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <OS_WHATE_NEXT+0x90>)
 8000798:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800079c:	791a      	ldrb	r2, [r3, #4]
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <OS_WHATE_NEXT+0x90>)
 80007a0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d113      	bne.n	80007d2 <OS_WHATE_NEXT+0x86>
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <OS_WHATE_NEXT+0x90>)
 80007ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00c      	beq.n	80007d2 <OS_WHATE_NEXT+0x86>
			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK);
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <OS_WHATE_NEXT+0x90>)
 80007ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <OS_WHATE_NEXT+0x8c>)
 80007c2:	f7ff fd96 	bl	80002f2 <OS_FIFO_ENQUEUE>
			OS_CONTROL.CURENT_TASK->State=Ready;
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <OS_WHATE_NEXT+0x90>)
 80007c8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007cc:	2202      	movs	r2, #2
 80007ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200003c0 	.word	0x200003c0
 80007dc:	200001e4 	.word	0x200001e4
 80007e0:	20000388 	.word	0x20000388

080007e4 <OS_SVC_SERVICES>:
//======================
void OS_SVC_SERVICES(int* STACK_FRAM_POINTER){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	uint8_t SVC_NUM;
	__asm(   "LDR r0,[r0,#24]\n\t"
 80007ec:	6980      	ldr	r0, [r0, #24]
 80007ee:	f810 0c02 	ldrb.w	r0, [r0, #-2]
 80007f2:	4603      	mov	r3, r0
 80007f4:	73fb      	strb	r3, [r7, #15]
			"LDRB r0,[r0,#-2]\n\t"
			"MOV %0,r0"
			:"=r"(SVC_NUM));
	//SVC_NUM=*((unsigned char*)(((unsigned char*)STACK_FRAM_POINTER[6])-2));
	switch(SVC_NUM){
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	db1f      	blt.n	800083c <OS_SVC_SERVICES+0x58>
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	dd02      	ble.n	8000806 <OS_SVC_SERVICES+0x22>
 8000800:	2b02      	cmp	r3, #2
 8000802:	d017      	beq.n	8000834 <OS_SVC_SERVICES+0x50>
		break;

	}


}
 8000804:	e01a      	b.n	800083c <OS_SVC_SERVICES+0x58>
		ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES();//init to know the next task
 8000806:	f7ff ff31 	bl	800066c <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>
		if(OS_CONTROL.OS_MODE==OS_Running){
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <OS_SVC_SERVICES+0x60>)
 800080c:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000810:	2b01      	cmp	r3, #1
 8000812:	d112      	bne.n	800083a <OS_SVC_SERVICES+0x56>
			if(strcmp(OS_CONTROL.CURENT_TASK->NAME,"idle task")!=0){
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <OS_SVC_SERVICES+0x60>)
 8000816:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800081a:	3318      	adds	r3, #24
 800081c:	490a      	ldr	r1, [pc, #40]	; (8000848 <OS_SVC_SERVICES+0x64>)
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fca6 	bl	8000170 <strcmp>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d007      	beq.n	800083a <OS_SVC_SERVICES+0x56>
				OS_WHATE_NEXT();//to know the next task
 800082a:	f7ff ff8f 	bl	800074c <OS_WHATE_NEXT>
				OS_TRIGDER_PENDSV();//to make context switching
 800082e:	f7ff fd27 	bl	8000280 <OS_TRIGDER_PENDSV>
		break;
 8000832:	e002      	b.n	800083a <OS_SVC_SERVICES+0x56>
		ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES();//init to know the next task
 8000834:	f7ff ff1a 	bl	800066c <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>
		break;
 8000838:	e000      	b.n	800083c <OS_SVC_SERVICES+0x58>
		break;
 800083a:	bf00      	nop
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200001e4 	.word	0x200001e4
 8000848:	08001afc 	.word	0x08001afc

0800084c <PendSV_Handler>:
	 * R2
	 * R1
	 * R0
	 * >>>>PSP current because it comes from thread mode
	 */
	OS_get_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT);//PSP-->_PSP_STACK_CURENT
 800084c:	4b6f      	ldr	r3, [pc, #444]	; (8000a0c <PendSV_Handler+0x1c0>)
 800084e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000852:	f3ef 8009 	mrs	r0, PSP
 8000856:	4602      	mov	r2, r0
 8000858:	615a      	str	r2, [r3, #20]
	 * r9
	 * r10
	 * r11
	 * */
	//context SAVE
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT--;
 800085a:	4b6c      	ldr	r3, [pc, #432]	; (8000a0c <PendSV_Handler+0x1c0>)
 800085c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	3a04      	subs	r2, #4
 8000864:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r4 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 8000866:	4b69      	ldr	r3, [pc, #420]	; (8000a0c <PendSV_Handler+0x1c0>)
 8000868:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4622      	mov	r2, r4
 8000870:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 8000872:	4b66      	ldr	r3, [pc, #408]	; (8000a0c <PendSV_Handler+0x1c0>)
 8000874:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	3a04      	subs	r2, #4
 800087c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r5 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 800087e:	4b63      	ldr	r3, [pc, #396]	; (8000a0c <PendSV_Handler+0x1c0>)
 8000880:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	462a      	mov	r2, r5
 8000888:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 800088a:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <PendSV_Handler+0x1c0>)
 800088c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000890:	695a      	ldr	r2, [r3, #20]
 8000892:	3a04      	subs	r2, #4
 8000894:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r6 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 8000896:	4b5d      	ldr	r3, [pc, #372]	; (8000a0c <PendSV_Handler+0x1c0>)
 8000898:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4632      	mov	r2, r6
 80008a0:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 80008a2:	4b5a      	ldr	r3, [pc, #360]	; (8000a0c <PendSV_Handler+0x1c0>)
 80008a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	3a04      	subs	r2, #4
 80008ac:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r7 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80008ae:	4b57      	ldr	r3, [pc, #348]	; (8000a0c <PendSV_Handler+0x1c0>)
 80008b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	463a      	mov	r2, r7
 80008b8:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 80008ba:	4b54      	ldr	r3, [pc, #336]	; (8000a0c <PendSV_Handler+0x1c0>)
 80008bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008c0:	695a      	ldr	r2, [r3, #20]
 80008c2:	3a04      	subs	r2, #4
 80008c4:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r8 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80008c6:	4b51      	ldr	r3, [pc, #324]	; (8000a0c <PendSV_Handler+0x1c0>)
 80008c8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4642      	mov	r2, r8
 80008d0:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 80008d2:	4b4e      	ldr	r3, [pc, #312]	; (8000a0c <PendSV_Handler+0x1c0>)
 80008d4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	3a04      	subs	r2, #4
 80008dc:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r9 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80008de:	4b4b      	ldr	r3, [pc, #300]	; (8000a0c <PendSV_Handler+0x1c0>)
 80008e0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	464a      	mov	r2, r9
 80008e8:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 80008ea:	4b48      	ldr	r3, [pc, #288]	; (8000a0c <PendSV_Handler+0x1c0>)
 80008ec:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008f0:	695a      	ldr	r2, [r3, #20]
 80008f2:	3a04      	subs	r2, #4
 80008f4:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r10 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80008f6:	4b45      	ldr	r3, [pc, #276]	; (8000a0c <PendSV_Handler+0x1c0>)
 80008f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4652      	mov	r2, sl
 8000900:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 8000902:	4b42      	ldr	r3, [pc, #264]	; (8000a0c <PendSV_Handler+0x1c0>)
 8000904:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000908:	695a      	ldr	r2, [r3, #20]
 800090a:	3a04      	subs	r2, #4
 800090c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r11 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 800090e:	4b3f      	ldr	r3, [pc, #252]	; (8000a0c <PendSV_Handler+0x1c0>)
 8000910:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	465a      	mov	r2, fp
 8000918:	601a      	str	r2, [r3, #0]

	// now (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT) will save this address to the next execute of this task
	//and it will enter to make BACK context switching in the next call back :)

	//@context tasks
	if (OS_CONTROL.NEXT_TASK != NULL){
 800091a:	4b3c      	ldr	r3, [pc, #240]	; (8000a0c <PendSV_Handler+0x1c0>)
 800091c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000920:	2b00      	cmp	r3, #0
 8000922:	d009      	beq.n	8000938 <PendSV_Handler+0xec>
		OS_CONTROL.CURENT_TASK = OS_CONTROL.NEXT_TASK;
 8000924:	4b39      	ldr	r3, [pc, #228]	; (8000a0c <PendSV_Handler+0x1c0>)
 8000926:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800092a:	4a38      	ldr	r2, [pc, #224]	; (8000a0c <PendSV_Handler+0x1c0>)
 800092c:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_CONTROL.NEXT_TASK = NULL ;
 8000930:	4b36      	ldr	r3, [pc, #216]	; (8000a0c <PendSV_Handler+0x1c0>)
 8000932:	2200      	movs	r2, #0
 8000934:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	 * r8
	 * r9
	 * r10
	 * r11
	 * */
	__asm volatile("mov r11,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT)) );//it stored from the last context :) @context tasks
 8000938:	4b34      	ldr	r3, [pc, #208]	; (8000a0c <PendSV_Handler+0x1c0>)
 800093a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	469b      	mov	fp, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 8000944:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <PendSV_Handler+0x1c0>)
 8000946:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800094a:	695a      	ldr	r2, [r3, #20]
 800094c:	3204      	adds	r2, #4
 800094e:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r10,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT)) );
 8000950:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <PendSV_Handler+0x1c0>)
 8000952:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	469a      	mov	sl, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 800095c:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <PendSV_Handler+0x1c0>)
 800095e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000962:	695a      	ldr	r2, [r3, #20]
 8000964:	3204      	adds	r2, #4
 8000966:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r9,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <PendSV_Handler+0x1c0>)
 800096a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4699      	mov	r9, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <PendSV_Handler+0x1c0>)
 8000976:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	3204      	adds	r2, #4
 800097e:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r8,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <PendSV_Handler+0x1c0>)
 8000982:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4698      	mov	r8, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <PendSV_Handler+0x1c0>)
 800098e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	3204      	adds	r2, #4
 8000996:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r7,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <PendSV_Handler+0x1c0>)
 800099a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	461f      	mov	r7, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <PendSV_Handler+0x1c0>)
 80009a6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	3204      	adds	r2, #4
 80009ae:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r6,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <PendSV_Handler+0x1c0>)
 80009b2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	461e      	mov	r6, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <PendSV_Handler+0x1c0>)
 80009be:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009c2:	695a      	ldr	r2, [r3, #20]
 80009c4:	3204      	adds	r2, #4
 80009c6:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r5,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <PendSV_Handler+0x1c0>)
 80009ca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	461d      	mov	r5, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <PendSV_Handler+0x1c0>)
 80009d6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009da:	695a      	ldr	r2, [r3, #20]
 80009dc:	3204      	adds	r2, #4
 80009de:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r4,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <PendSV_Handler+0x1c0>)
 80009e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	461c      	mov	r4, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <PendSV_Handler+0x1c0>)
 80009ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009f2:	695a      	ldr	r2, [r3, #20]
 80009f4:	3204      	adds	r2, #4
 80009f6:	615a      	str	r2, [r3, #20]
	 * R2
	 * R1
	 * R0
	 * >>>>PSP current because it comes from thread mode
	 */
	OS_set_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT);//we but the PSP with current psp to force the cpu making this task context
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <PendSV_Handler+0x1c0>)
 80009fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");//make cpu context back
 8000a06:	4770      	bx	lr
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	200001e4 	.word	0x200001e4

08000a10 <ALSHREIF_RTOS_ACTIVAT_TASK>:

//========================================================================================================



void ALSHREIF_RTOS_ACTIVAT_TASK(TASK_FRAME_t* TASK){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	TASK->State=Wating;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	OS_SVC_SET(SVC_ACTIVAT_task);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fe7b 	bl	800071c <OS_SVC_SET>

}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <ALSHREIF_RTOS_TERMINAT_TASK>:
void ALSHREIF_RTOS_TERMINAT_TASK(TASK_FRAME_t* TASK){
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
	TASK->State=Suspend;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	OS_SVC_SET(SVC_TERMINATE_task);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff fe6c 	bl	800071c <OS_SVC_SET>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <ALSHREIF_RTOS_START_OS>:


//========================================================================================================

void ALSHREIF_RTOS_START_OS(){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	OS_CONTROL.OS_MODE=OS_Running;//mode
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <ALSHREIF_RTOS_START_OS+0x54>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	OS_CONTROL.CURENT_TASK=&IDLE_TASK;//set current task
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <ALSHREIF_RTOS_START_OS+0x54>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <ALSHREIF_RTOS_START_OS+0x58>)
 8000a5c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	ALSHREIF_RTOS_ACTIVAT_TASK(&IDLE_TASK);//activate idle task
 8000a60:	4810      	ldr	r0, [pc, #64]	; (8000aa4 <ALSHREIF_RTOS_START_OS+0x58>)
 8000a62:	f7ff ffd5 	bl	8000a10 <ALSHREIF_RTOS_ACTIVAT_TASK>
	TIMER_START();//set timer every one m second
 8000a66:	f7ff fc19 	bl	800029c <TIMER_START>
	OS_set_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_TOP);
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <ALSHREIF_RTOS_START_OS+0x54>)
 8000a6c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f380 8809 	msr	PSP, r0
	OS_SP2_PSP;
 8000a78:	f3ef 8014 	mrs	r0, CONTROL
 8000a7c:	f040 0002 	orr.w	r0, r0, #2
 8000a80:	f380 8814 	msr	CONTROL, r0
	OS_CHANGE_CPU_UNPRIVILDEG;
 8000a84:	f3ef 8314 	mrs	r3, CONTROL
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	f383 8814 	msr	CONTROL, r3

	OS_CONTROL.CURENT_TASK->TASK_FUNCTION();
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <ALSHREIF_RTOS_START_OS+0x54>)
 8000a92:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	4798      	blx	r3
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200001e4 	.word	0x200001e4
 8000aa4:	20000390 	.word	0x20000390

08000aa8 <ALSHREIF_RTOS_WAITING_TIMING>:
uint8_t T_SYStick=0;
//========================================================================================================
void ALSHREIF_RTOS_WAITING_TIMING(){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0

	for(int i=0;i<OS_CONTROL.NUMBER_OF_TASKS;i++){
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	e02d      	b.n	8000b10 <ALSHREIF_RTOS_WAITING_TIMING+0x68>
		if(OS_CONTROL.OS_TASKS[i]->State==Suspend){
 8000ab4:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d122      	bne.n	8000b0a <ALSHREIF_RTOS_WAITING_TIMING+0x62>
			if(OS_CONTROL.OS_TASKS[i]->wating_time.blocking==enable){
 8000ac4:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d11a      	bne.n	8000b0a <ALSHREIF_RTOS_WAITING_TIMING+0x62>

				//@ref_sheck_time
				if((--OS_CONTROL.OS_TASKS[i]->wating_time.TICKS)==0){
 8000ad4:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ade:	3a01      	subs	r2, #1
 8000ae0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d110      	bne.n	8000b0a <ALSHREIF_RTOS_WAITING_TIMING+0x62>
					OS_CONTROL.OS_TASKS[i]->wating_time.blocking=disable;
 8000ae8:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	2201      	movs	r2, #1
 8000af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					OS_CONTROL.OS_TASKS[i]->State=Wating;
 8000af6:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afe:	2201      	movs	r2, #1
 8000b00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

					OS_SVC_SET(SVC_Wating_task);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f7ff fe09 	bl	800071c <OS_SVC_SET>
	for(int i=0;i<OS_CONTROL.NUMBER_OF_TASKS;i++){
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000b12:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	dbca      	blt.n	8000ab4 <ALSHREIF_RTOS_WAITING_TIMING+0xc>
				}
			}
		}
	}
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200001e4 	.word	0x200001e4

08000b2c <SysTick_Handler>:
//========================================================================================================

void SysTick_Handler(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	OS_WHATE_NEXT();//to know the next task
 8000b30:	f7ff fe0c 	bl	800074c <OS_WHATE_NEXT>
	//=====
	OS_TRIGDER_PENDSV();//to make context switching
 8000b34:	f7ff fba4 	bl	8000280 <OS_TRIGDER_PENDSV>

	ALSHREIF_RTOS_WAITING_TIMING();
 8000b38:	f7ff ffb6 	bl	8000aa8 <ALSHREIF_RTOS_WAITING_TIMING>

	T_SYStick^=1;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SysTick_Handler+0x24>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	f083 0301 	eor.w	r3, r3, #1
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <SysTick_Handler+0x24>)
 8000b48:	701a      	strb	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000003d 	.word	0x2000003d

08000b54 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <getposition+0x14>
		rval =0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d101      	bne.n	8000b72 <getposition+0x1e>
		rval =4;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d101      	bne.n	8000b7c <getposition+0x28>
		rval =8;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d101      	bne.n	8000b86 <getposition+0x32>
		rval =12;
 8000b82:	230c      	movs	r3, #12
 8000b84:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d101      	bne.n	8000b90 <getposition+0x3c>
		rval =16;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	2b05      	cmp	r3, #5
 8000b94:	d101      	bne.n	8000b9a <getposition+0x46>
		rval =20;
 8000b96:	2314      	movs	r3, #20
 8000b98:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	2b06      	cmp	r3, #6
 8000b9e:	d101      	bne.n	8000ba4 <getposition+0x50>
		rval =24;
 8000ba0:	2318      	movs	r3, #24
 8000ba2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	2b07      	cmp	r3, #7
 8000ba8:	d101      	bne.n	8000bae <getposition+0x5a>
		rval =28;
 8000baa:	231c      	movs	r3, #28
 8000bac:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	d101      	bne.n	8000bb8 <getposition+0x64>
		rval =0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	2b09      	cmp	r3, #9
 8000bbc:	d101      	bne.n	8000bc2 <getposition+0x6e>
		rval =4;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	2b0a      	cmp	r3, #10
 8000bc6:	d101      	bne.n	8000bcc <getposition+0x78>
		rval =8;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	2b0b      	cmp	r3, #11
 8000bd0:	d101      	bne.n	8000bd6 <getposition+0x82>
		rval =12;
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	2b0c      	cmp	r3, #12
 8000bda:	d101      	bne.n	8000be0 <getposition+0x8c>
		rval =16;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	2b0d      	cmp	r3, #13
 8000be4:	d101      	bne.n	8000bea <getposition+0x96>
		rval =20;
 8000be6:	2314      	movs	r3, #20
 8000be8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	2b0e      	cmp	r3, #14
 8000bee:	d101      	bne.n	8000bf4 <getposition+0xa0>
		rval =24;
 8000bf0:	2318      	movs	r3, #24
 8000bf2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	2b0f      	cmp	r3, #15
 8000bf8:	d101      	bne.n	8000bfe <getposition+0xaa>
		rval =28;
 8000bfa:	231c      	movs	r3, #28
 8000bfc:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]


}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
	...

08000c0c <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	460b      	mov	r3, r1
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4a69      	ldr	r2, [pc, #420]	; (8000dc4 <pinmode+0x1b8>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d106      	bne.n	8000c30 <pinmode+0x24>
		GPIOA_Clock_Enable();
 8000c22:	4b69      	ldr	r3, [pc, #420]	; (8000dc8 <pinmode+0x1bc>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a68      	ldr	r2, [pc, #416]	; (8000dc8 <pinmode+0x1bc>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	e010      	b.n	8000c52 <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4a66      	ldr	r2, [pc, #408]	; (8000dcc <pinmode+0x1c0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d106      	bne.n	8000c46 <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8000c38:	4b63      	ldr	r3, [pc, #396]	; (8000dc8 <pinmode+0x1bc>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a62      	ldr	r2, [pc, #392]	; (8000dc8 <pinmode+0x1bc>)
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	e005      	b.n	8000c52 <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 8000c46:	4b60      	ldr	r3, [pc, #384]	; (8000dc8 <pinmode+0x1bc>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	4a5f      	ldr	r2, [pc, #380]	; (8000dc8 <pinmode+0x1bc>)
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8000c52:	897b      	ldrh	r3, [r7, #10]
 8000c54:	2b07      	cmp	r3, #7
 8000c56:	d856      	bhi.n	8000d06 <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 8000c58:	897b      	ldrh	r3, [r7, #10]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff7a 	bl	8000b54 <getposition>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	230f      	movs	r3, #15
 8000c66:	4093      	lsls	r3, r2
 8000c68:	43da      	mvns	r2, r3
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b08      	cmp	r3, #8
 8000c78:	d002      	beq.n	8000c80 <pinmode+0x74>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b18      	cmp	r3, #24
 8000c7e:	d133      	bne.n	8000ce8 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b18      	cmp	r3, #24
 8000c84:	d117      	bne.n	8000cb6 <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000c86:	897b      	ldrh	r3, [r7, #10]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff63 	bl	8000b54 <getposition>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	2308      	movs	r3, #8
 8000c94:	fa03 f202 	lsl.w	r2, r3, r2
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	897a      	ldrh	r2, [r7, #10]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000cb4:	e081      	b.n	8000dba <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000cb6:	897b      	ldrh	r3, [r7, #10]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff4b 	bl	8000b54 <getposition>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	fa03 f202 	lsl.w	r2, r3, r2
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	897a      	ldrh	r2, [r7, #10]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fa01 f202 	lsl.w	r2, r1, r2
 8000cde:	43d2      	mvns	r2, r2
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000ce6:	e068      	b.n	8000dba <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 8000ce8:	897b      	ldrh	r3, [r7, #10]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff32 	bl	8000b54 <getposition>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	fa03 f202 	lsl.w	r2, r3, r2
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	601a      	str	r2, [r3, #0]

	}



}
 8000d04:	e059      	b.n	8000dba <pinmode+0x1ae>
	else if(pin>7){
 8000d06:	897b      	ldrh	r3, [r7, #10]
 8000d08:	2b07      	cmp	r3, #7
 8000d0a:	d956      	bls.n	8000dba <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 8000d0c:	897b      	ldrh	r3, [r7, #10]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff20 	bl	8000b54 <getposition>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	230f      	movs	r3, #15
 8000d1a:	4093      	lsls	r3, r2
 8000d1c:	43da      	mvns	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	401a      	ands	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b08      	cmp	r3, #8
 8000d2c:	d002      	beq.n	8000d34 <pinmode+0x128>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b18      	cmp	r3, #24
 8000d32:	d133      	bne.n	8000d9c <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b18      	cmp	r3, #24
 8000d38:	d117      	bne.n	8000d6a <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000d3a:	897b      	ldrh	r3, [r7, #10]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff09 	bl	8000b54 <getposition>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461a      	mov	r2, r3
 8000d46:	2308      	movs	r3, #8
 8000d48:	fa03 f202 	lsl.w	r2, r3, r2
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	897a      	ldrh	r2, [r7, #10]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d62:	431a      	orrs	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000d68:	e027      	b.n	8000dba <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000d6a:	897b      	ldrh	r3, [r7, #10]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fef1 	bl	8000b54 <getposition>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	2308      	movs	r3, #8
 8000d78:	fa03 f202 	lsl.w	r2, r3, r2
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	431a      	orrs	r2, r3
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	897a      	ldrh	r2, [r7, #10]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d92:	43d2      	mvns	r2, r2
 8000d94:	401a      	ands	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000d9a:	e00e      	b.n	8000dba <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8000d9c:	897b      	ldrh	r3, [r7, #10]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fed8 	bl	8000b54 <getposition>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	fa03 f202 	lsl.w	r2, r3, r2
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	431a      	orrs	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	605a      	str	r2, [r3, #4]
}
 8000db8:	e7ff      	b.n	8000dba <pinmode+0x1ae>
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <TogglePin>:
uint16_t READ_PORT(GPIO_typeDef* GPIOx){

	return GPIOx->GPIOx_IDR;
}

void TogglePin(GPIO_typeDef* GPIOx, uint16_t pin){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIOx_ODR ^=(1<<pin);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	887a      	ldrh	r2, [r7, #2]
 8000de2:	2101      	movs	r1, #1
 8000de4:	fa01 f202 	lsl.w	r2, r1, r2
 8000de8:	405a      	eors	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60da      	str	r2, [r3, #12]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 8000e06:	4b3c      	ldr	r3, [pc, #240]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0201 	bic.w	r2, r2, #1
 8000e14:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 8000e16:	78fb      	ldrb	r3, [r7, #3]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d12f      	bne.n	8000e7c <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 8000e1c:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	699a      	ldr	r2, [r3, #24]
 8000e22:	4b35      	ldr	r3, [pc, #212]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e2a:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 8000e2c:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	699a      	ldr	r2, [r3, #24]
 8000e32:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000e3a:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	699a      	ldr	r2, [r3, #24]
 8000e42:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0208 	orr.w	r2, r2, #8
 8000e4a:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	699a      	ldr	r2, [r3, #24]
 8000e52:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000e5a:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6a1a      	ldr	r2, [r3, #32]
 8000e62:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 0210 	orr.w	r2, r2, #16
 8000e6a:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6a1a      	ldr	r2, [r3, #32]
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f042 0201 	orr.w	r2, r2, #1
 8000e7a:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e8a:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eba:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	695a      	ldr	r2, [r3, #20]
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0201 	orr.w	r2, r2, #1
 8000eda:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SPWM_timer_INIT+0x100>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0201 	orr.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000000 	.word	0x20000000

08000efc <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <TIM2_IRQHandler+0x34>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	691a      	ldr	r2, [r3, #16]
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <TIM2_IRQHandler+0x34>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0201 	bic.w	r2, r2, #1
 8000f0e:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <TIM2_IRQHandler+0x38>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <TIM2_IRQHandler+0x34>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <TIM2_IRQHandler+0x34>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0201 	bic.w	r2, r2, #1
 8000f24:	601a      	str	r2, [r3, #0]

}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	2000001c 	.word	0x2000001c
 8000f34:	20000018 	.word	0x20000018

08000f38 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin10,LOW);
	ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <TIM3_IRQHandler+0x30>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <TIM3_IRQHandler+0x30>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
	ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <TIM3_IRQHandler+0x30>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	691a      	ldr	r2, [r3, #16]
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <TIM3_IRQHandler+0x30>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0201 	bic.w	r2, r2, #1
 8000f5a:	611a      	str	r2, [r3, #16]
	ISRcalback[0]();
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <TIM3_IRQHandler+0x34>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4798      	blx	r3
	//NVIC_TIM3_global_interrupt_Disable;
	//pinwrite(GPIOB, pin10,HIGH);
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200003dc 	.word	0x200003dc
 8000f6c:	200003d0 	.word	0x200003d0

08000f70 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <TIM4_IRQHandler+0x24>)
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <TIM4_IRQHandler+0x24>)
 8000f7a:	f023 0301 	bic.w	r3, r3, #1
 8000f7e:	6113      	str	r3, [r2, #16]
	overflowtims++;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <TIM4_IRQHandler+0x28>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <TIM4_IRQHandler+0x28>)
 8000f8a:	801a      	strh	r2, [r3, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40000800 	.word	0x40000800
 8000f98:	20000040 	.word	0x20000040

08000f9c <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 8000fa0:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <TIM1_UP_IRQHandler+0x17c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b5d      	ldr	r3, [pc, #372]	; (800111c <TIM1_UP_IRQHandler+0x180>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d911      	bls.n	8000fd0 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 8000fac:	4b5c      	ldr	r3, [pc, #368]	; (8001120 <TIM1_UP_IRQHandler+0x184>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
		flage1=0;
 8000fb2:	4b5c      	ldr	r3, [pc, #368]	; (8001124 <TIM1_UP_IRQHandler+0x188>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 8000fb8:	4b58      	ldr	r3, [pc, #352]	; (800111c <TIM1_UP_IRQHandler+0x180>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a5a      	ldr	r2, [pc, #360]	; (8001128 <TIM1_UP_IRQHandler+0x18c>)
 8000fbe:	7812      	ldrb	r2, [r2, #0]
 8000fc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000fc4:	4b55      	ldr	r3, [pc, #340]	; (800111c <TIM1_UP_IRQHandler+0x180>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a53      	ldr	r2, [pc, #332]	; (8001118 <TIM1_UP_IRQHandler+0x17c>)
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e018      	b.n	8001002 <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 8000fd0:	4b51      	ldr	r3, [pc, #324]	; (8001118 <TIM1_UP_IRQHandler+0x17c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b63      	cmp	r3, #99	; 0x63
 8000fd6:	d814      	bhi.n	8001002 <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 8000fd8:	4b51      	ldr	r3, [pc, #324]	; (8001120 <TIM1_UP_IRQHandler+0x184>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
		flage1=1;
 8000fde:	4b51      	ldr	r3, [pc, #324]	; (8001124 <TIM1_UP_IRQHandler+0x188>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 8000fe4:	4b51      	ldr	r3, [pc, #324]	; (800112c <TIM1_UP_IRQHandler+0x190>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f083 0301 	eor.w	r3, r3, #1
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b4f      	ldr	r3, [pc, #316]	; (800112c <TIM1_UP_IRQHandler+0x190>)
 8000ff0:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 8000ff2:	4b4a      	ldr	r3, [pc, #296]	; (800111c <TIM1_UP_IRQHandler+0x180>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a4c      	ldr	r2, [pc, #304]	; (8001128 <TIM1_UP_IRQHandler+0x18c>)
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ffe:	4a46      	ldr	r2, [pc, #280]	; (8001118 <TIM1_UP_IRQHandler+0x17c>)
 8001000:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 8001002:	4b4a      	ldr	r3, [pc, #296]	; (800112c <TIM1_UP_IRQHandler+0x190>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d110      	bne.n	800102c <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 800100a:	4b49      	ldr	r3, [pc, #292]	; (8001130 <TIM1_UP_IRQHandler+0x194>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6a1a      	ldr	r2, [r3, #32]
 8001010:	4b47      	ldr	r3, [pc, #284]	; (8001130 <TIM1_UP_IRQHandler+0x194>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0201 	bic.w	r2, r2, #1
 8001018:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 800101a:	4b45      	ldr	r3, [pc, #276]	; (8001130 <TIM1_UP_IRQHandler+0x194>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6a1a      	ldr	r2, [r3, #32]
 8001020:	4b43      	ldr	r3, [pc, #268]	; (8001130 <TIM1_UP_IRQHandler+0x194>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 0210 	orr.w	r2, r2, #16
 8001028:	621a      	str	r2, [r3, #32]
 800102a:	e013      	b.n	8001054 <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 800102c:	4b3f      	ldr	r3, [pc, #252]	; (800112c <TIM1_UP_IRQHandler+0x190>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10f      	bne.n	8001054 <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 8001034:	4b3e      	ldr	r3, [pc, #248]	; (8001130 <TIM1_UP_IRQHandler+0x194>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a1a      	ldr	r2, [r3, #32]
 800103a:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <TIM1_UP_IRQHandler+0x194>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0210 	bic.w	r2, r2, #16
 8001042:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 8001044:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <TIM1_UP_IRQHandler+0x194>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6a1a      	ldr	r2, [r3, #32]
 800104a:	4b39      	ldr	r3, [pc, #228]	; (8001130 <TIM1_UP_IRQHandler+0x194>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0201 	orr.w	r2, r2, #1
 8001052:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 8001054:	4b33      	ldr	r3, [pc, #204]	; (8001124 <TIM1_UP_IRQHandler+0x188>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d11c      	bne.n	8001096 <TIM1_UP_IRQHandler+0xfa>
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <TIM1_UP_IRQHandler+0x184>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d118      	bne.n	8001096 <TIM1_UP_IRQHandler+0xfa>
		top=c;
 8001064:	4b33      	ldr	r3, [pc, #204]	; (8001134 <TIM1_UP_IRQHandler+0x198>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a2c      	ldr	r2, [pc, #176]	; (800111c <TIM1_UP_IRQHandler+0x180>)
 800106a:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 800106c:	4b32      	ldr	r3, [pc, #200]	; (8001138 <TIM1_UP_IRQHandler+0x19c>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	4b29      	ldr	r3, [pc, #164]	; (8001118 <TIM1_UP_IRQHandler+0x17c>)
 8001072:	6819      	ldr	r1, [r3, #0]
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <TIM1_UP_IRQHandler+0x180>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	2301      	movs	r3, #1
 800107a:	f7ff febd 	bl	8000df8 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <TIM1_UP_IRQHandler+0x180>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a29      	ldr	r2, [pc, #164]	; (8001128 <TIM1_UP_IRQHandler+0x18c>)
 8001084:	7812      	ldrb	r2, [r2, #0]
 8001086:	fbb3 f2f2 	udiv	r2, r3, r2
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <TIM1_UP_IRQHandler+0x17c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a21      	ldr	r2, [pc, #132]	; (8001118 <TIM1_UP_IRQHandler+0x17c>)
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	e035      	b.n	8001102 <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <TIM1_UP_IRQHandler+0x184>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d129      	bne.n	80010f2 <TIM1_UP_IRQHandler+0x156>
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <TIM1_UP_IRQHandler+0x188>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d125      	bne.n	80010f2 <TIM1_UP_IRQHandler+0x156>
		top=c;
 80010a6:	4b23      	ldr	r3, [pc, #140]	; (8001134 <TIM1_UP_IRQHandler+0x198>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <TIM1_UP_IRQHandler+0x180>)
 80010ac:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <TIM1_UP_IRQHandler+0x17c>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <TIM1_UP_IRQHandler+0x180>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	491c      	ldr	r1, [pc, #112]	; (8001128 <TIM1_UP_IRQHandler+0x18c>)
 80010b8:	7809      	ldrb	r1, [r1, #0]
 80010ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	4a15      	ldr	r2, [pc, #84]	; (8001118 <TIM1_UP_IRQHandler+0x17c>)
 80010c2:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <TIM1_UP_IRQHandler+0x19c>)
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <TIM1_UP_IRQHandler+0x17c>)
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <TIM1_UP_IRQHandler+0x180>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	f7ff fe91 	bl	8000df8 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <TIM1_UP_IRQHandler+0x180>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a13      	ldr	r2, [pc, #76]	; (8001128 <TIM1_UP_IRQHandler+0x18c>)
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	fbb3 f2f2 	udiv	r2, r3, r2
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <TIM1_UP_IRQHandler+0x17c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d10b      	bne.n	8001102 <TIM1_UP_IRQHandler+0x166>
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <TIM1_UP_IRQHandler+0x17c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e007      	b.n	8001102 <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <TIM1_UP_IRQHandler+0x194>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <TIM1_UP_IRQHandler+0x194>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0201 	bic.w	r2, r2, #1
 8001100:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <TIM1_UP_IRQHandler+0x194>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <TIM1_UP_IRQHandler+0x194>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0201 	bic.w	r2, r2, #1
 8001110:	611a      	str	r2, [r3, #16]
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000014 	.word	0x20000014
 800111c:	20000008 	.word	0x20000008
 8001120:	2000003e 	.word	0x2000003e
 8001124:	20000004 	.word	0x20000004
 8001128:	200003d8 	.word	0x200003d8
 800112c:	20000005 	.word	0x20000005
 8001130:	20000000 	.word	0x20000000
 8001134:	20000010 	.word	0x20000010
 8001138:	2000000c 	.word	0x2000000c

0800113c <EXTI0_IRQHandler>:
	Enable_NVIC(pin);
}



void EXTI0_IRQHandler(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <EXTI0_IRQHandler+0x1c>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <EXTI0_IRQHandler+0x1c>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <EXTI0_IRQHandler+0x20>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4798      	blx	r3
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40010400 	.word	0x40010400
 800115c:	200003e0 	.word	0x200003e0

08001160 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <EXTI1_IRQHandler+0x1c>)
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <EXTI1_IRQHandler+0x1c>)
 800116a:	f043 0302 	orr.w	r3, r3, #2
 800116e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <EXTI1_IRQHandler+0x20>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4798      	blx	r3

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40010400 	.word	0x40010400
 8001180:	200003e0 	.word	0x200003e0

08001184 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <EXTI2_IRQHandler+0x1c>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <EXTI2_IRQHandler+0x1c>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <EXTI2_IRQHandler+0x20>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4798      	blx	r3
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010400 	.word	0x40010400
 80011a4:	200003e0 	.word	0x200003e0

080011a8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <EXTI3_IRQHandler+0x1c>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <EXTI3_IRQHandler+0x1c>)
 80011b2:	f043 0308 	orr.w	r3, r3, #8
 80011b6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <EXTI3_IRQHandler+0x20>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	4798      	blx	r3
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40010400 	.word	0x40010400
 80011c8:	200003e0 	.word	0x200003e0

080011cc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <EXTI4_IRQHandler+0x1c>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <EXTI4_IRQHandler+0x1c>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <EXTI4_IRQHandler+0x20>)
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4798      	blx	r3
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40010400 	.word	0x40010400
 80011ec:	200003e0 	.word	0x200003e0

080011f0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5]();  }
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	f003 0320 	and.w	r3, r3, #32
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d008      	beq.n	8001212 <EXTI9_5_IRQHandler+0x22>
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	4a22      	ldr	r2, [pc, #136]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 8001206:	f043 0320 	orr.w	r3, r3, #32
 800120a:	6153      	str	r3, [r2, #20]
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <EXTI9_5_IRQHandler+0xa4>)
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6]();  }
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121a:	2b00      	cmp	r3, #0
 800121c:	d008      	beq.n	8001230 <EXTI9_5_IRQHandler+0x40>
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 8001224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <EXTI9_5_IRQHandler+0xa4>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7]();  }
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <EXTI9_5_IRQHandler+0x5e>
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	4a13      	ldr	r2, [pc, #76]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 8001242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001246:	6153      	str	r3, [r2, #20]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <EXTI9_5_IRQHandler+0xa4>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8]();  }
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	2b00      	cmp	r3, #0
 8001258:	d008      	beq.n	800126c <EXTI9_5_IRQHandler+0x7c>
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6153      	str	r3, [r2, #20]
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <EXTI9_5_IRQHandler+0xa4>)
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9]();  }
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <EXTI9_5_IRQHandler+0x9a>
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <EXTI9_5_IRQHandler+0xa0>)
 800127e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001282:	6153      	str	r3, [r2, #20]
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <EXTI9_5_IRQHandler+0xa4>)
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	4798      	blx	r3
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40010400 	.word	0x40010400
 8001294:	200003e0 	.word	0x200003e0

08001298 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10]();  }
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d008      	beq.n	80012ba <EXTI15_10_IRQHandler+0x22>
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	4a29      	ldr	r2, [pc, #164]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6153      	str	r3, [r2, #20]
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <EXTI15_10_IRQHandler+0xc0>)
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11]();  }
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d008      	beq.n	80012d8 <EXTI15_10_IRQHandler+0x40>
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4a22      	ldr	r2, [pc, #136]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 80012cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d0:	6153      	str	r3, [r2, #20]
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <EXTI15_10_IRQHandler+0xc0>)
 80012d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d6:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12]();  }
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <EXTI15_10_IRQHandler+0x5e>
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	4a1a      	ldr	r2, [pc, #104]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 80012ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ee:	6153      	str	r3, [r2, #20]
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <EXTI15_10_IRQHandler+0xc0>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13]();  }
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d008      	beq.n	8001314 <EXTI15_10_IRQHandler+0x7c>
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 8001308:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800130c:	6153      	str	r3, [r2, #20]
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <EXTI15_10_IRQHandler+0xc0>)
 8001310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001312:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14]();  }
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <EXTI15_10_IRQHandler+0x9a>
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 8001326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132a:	6153      	str	r3, [r2, #20]
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <EXTI15_10_IRQHandler+0xc0>)
 800132e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001330:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15]();  }
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d008      	beq.n	8001350 <EXTI15_10_IRQHandler+0xb8>
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <EXTI15_10_IRQHandler+0xbc>)
 8001344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001348:	6153      	str	r3, [r2, #20]
 800134a:	4b03      	ldr	r3, [pc, #12]	; (8001358 <EXTI15_10_IRQHandler+0xc0>)
 800134c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134e:	4798      	blx	r3

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40010400 	.word	0x40010400
 8001358:	200003e0 	.word	0x200003e0

0800135c <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	//slave only todo
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	//slave only todo
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <USART_SEND>:
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );


}
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	0b1b      	lsrs	r3, r3, #12
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b01      	cmp	r3, #1
 800138a:	d106      	bne.n	800139a <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 8001398:	e004      	b.n	80013a4 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
	...

080013b0 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80013b6:	4b56      	ldr	r3, [pc, #344]	; (8001510 <USART1_IRQHandler+0x160>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	09db      	lsrs	r3, r3, #7
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d122      	bne.n	800140c <USART1_IRQHandler+0x5c>
 80013c6:	4b52      	ldr	r3, [pc, #328]	; (8001510 <USART1_IRQHandler+0x160>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	09db      	lsrs	r3, r3, #7
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d11a      	bne.n	800140c <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 80013d6:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <USART1_IRQHandler+0x164>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00d      	beq.n	80013fc <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 80013e0:	4b4b      	ldr	r3, [pc, #300]	; (8001510 <USART1_IRQHandler+0x160>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <USART1_IRQHandler+0x164>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	4610      	mov	r0, r2
 80013ec:	f7ff ffc2 	bl	8001374 <USART_SEND>
			++arr_data[0];
 80013f0:	4b48      	ldr	r3, [pc, #288]	; (8001514 <USART1_IRQHandler+0x164>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	4a47      	ldr	r2, [pc, #284]	; (8001514 <USART1_IRQHandler+0x164>)
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e007      	b.n	800140c <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 80013fc:	4b44      	ldr	r3, [pc, #272]	; (8001510 <USART1_IRQHandler+0x160>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	4b43      	ldr	r3, [pc, #268]	; (8001510 <USART1_IRQHandler+0x160>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800140a:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 800140c:	4b40      	ldr	r3, [pc, #256]	; (8001510 <USART1_IRQHandler+0x160>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b01      	cmp	r3, #1
 800141a:	d166      	bne.n	80014ea <USART1_IRQHandler+0x13a>
 800141c:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <USART1_IRQHandler+0x160>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d15e      	bne.n	80014ea <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 800142c:	4b38      	ldr	r3, [pc, #224]	; (8001510 <USART1_IRQHandler+0x160>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	0b1b      	lsrs	r3, r3, #12
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d117      	bne.n	800146c <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 800143c:	4b34      	ldr	r3, [pc, #208]	; (8001510 <USART1_IRQHandler+0x160>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	0a9b      	lsrs	r3, r3, #10
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d108      	bne.n	800145e <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <USART1_IRQHandler+0x160>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	b29b      	uxth	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <USART1_IRQHandler+0x168>)
 800145a:	801a      	strh	r2, [r3, #0]
 800145c:	e020      	b.n	80014a0 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <USART1_IRQHandler+0x160>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <USART1_IRQHandler+0x168>)
 8001468:	801a      	strh	r2, [r3, #0]
 800146a:	e019      	b.n	80014a0 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <USART1_IRQHandler+0x160>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	0a9b      	lsrs	r3, r3, #10
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d109      	bne.n	8001490 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <USART1_IRQHandler+0x160>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	b29b      	uxth	r3, r3
 8001484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001488:	b29a      	uxth	r2, r3
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <USART1_IRQHandler+0x168>)
 800148c:	801a      	strh	r2, [r3, #0]
 800148e:	e007      	b.n	80014a0 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <USART1_IRQHandler+0x160>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	b29b      	uxth	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <USART1_IRQHandler+0x168>)
 800149e:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <USART1_IRQHandler+0x16c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	e002      	b.n	80014b2 <USART1_IRQHandler+0x102>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3301      	adds	r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014b8:	4293      	cmp	r3, r2
 80014ba:	ddf7      	ble.n	80014ac <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <USART1_IRQHandler+0x160>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <USART1_IRQHandler+0x160>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0220 	bic.w	r2, r2, #32
 80014ca:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <USART1_IRQHandler+0x160>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <USART1_IRQHandler+0x170>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <USART1_IRQHandler+0x160>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <USART1_IRQHandler+0x160>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0220 	bic.w	r2, r2, #32
 80014e8:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <USART1_IRQHandler+0x160>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <USART1_IRQHandler+0x170>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <USART1_IRQHandler+0x160>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <USART1_IRQHandler+0x160>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0220 	bic.w	r2, r2, #32
 8001506:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000041c 	.word	0x2000041c
 8001514:	20000430 	.word	0x20000430
 8001518:	20000428 	.word	0x20000428
 800151c:	2000043c 	.word	0x2000043c
 8001520:	40013800 	.word	0x40013800

08001524 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800152a:	4b56      	ldr	r3, [pc, #344]	; (8001684 <USART2_IRQHandler+0x160>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	09db      	lsrs	r3, r3, #7
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b01      	cmp	r3, #1
 8001538:	d122      	bne.n	8001580 <USART2_IRQHandler+0x5c>
 800153a:	4b52      	ldr	r3, [pc, #328]	; (8001684 <USART2_IRQHandler+0x160>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	09db      	lsrs	r3, r3, #7
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b01      	cmp	r3, #1
 8001548:	d11a      	bne.n	8001580 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 800154a:	4b4f      	ldr	r3, [pc, #316]	; (8001688 <USART2_IRQHandler+0x164>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00d      	beq.n	8001570 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 8001554:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <USART2_IRQHandler+0x160>)
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <USART2_IRQHandler+0x164>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4619      	mov	r1, r3
 800155e:	4610      	mov	r0, r2
 8001560:	f7ff ff08 	bl	8001374 <USART_SEND>
			++arr_data[1];
 8001564:	4b48      	ldr	r3, [pc, #288]	; (8001688 <USART2_IRQHandler+0x164>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	3301      	adds	r3, #1
 800156a:	4a47      	ldr	r2, [pc, #284]	; (8001688 <USART2_IRQHandler+0x164>)
 800156c:	6053      	str	r3, [r2, #4]
 800156e:	e007      	b.n	8001580 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8001570:	4b44      	ldr	r3, [pc, #272]	; (8001684 <USART2_IRQHandler+0x160>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	4b43      	ldr	r3, [pc, #268]	; (8001684 <USART2_IRQHandler+0x160>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800157e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8001580:	4b40      	ldr	r3, [pc, #256]	; (8001684 <USART2_IRQHandler+0x160>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	d166      	bne.n	800165e <USART2_IRQHandler+0x13a>
 8001590:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <USART2_IRQHandler+0x160>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b01      	cmp	r3, #1
 800159e:	d15e      	bne.n	800165e <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 80015a0:	4b38      	ldr	r3, [pc, #224]	; (8001684 <USART2_IRQHandler+0x160>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	0b1b      	lsrs	r3, r3, #12
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d117      	bne.n	80015e0 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 80015b0:	4b34      	ldr	r3, [pc, #208]	; (8001684 <USART2_IRQHandler+0x160>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	0a9b      	lsrs	r3, r3, #10
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d108      	bne.n	80015d2 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 80015c0:	4b30      	ldr	r3, [pc, #192]	; (8001684 <USART2_IRQHandler+0x160>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <USART2_IRQHandler+0x168>)
 80015ce:	805a      	strh	r2, [r3, #2]
 80015d0:	e020      	b.n	8001614 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 80015d2:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <USART2_IRQHandler+0x160>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b2c      	ldr	r3, [pc, #176]	; (800168c <USART2_IRQHandler+0x168>)
 80015dc:	805a      	strh	r2, [r3, #2]
 80015de:	e019      	b.n	8001614 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <USART2_IRQHandler+0x160>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	0a9b      	lsrs	r3, r3, #10
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d109      	bne.n	8001604 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <USART2_IRQHandler+0x160>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <USART2_IRQHandler+0x168>)
 8001600:	805a      	strh	r2, [r3, #2]
 8001602:	e007      	b.n	8001614 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <USART2_IRQHandler+0x160>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	b29b      	uxth	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <USART2_IRQHandler+0x168>)
 8001612:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <USART2_IRQHandler+0x16c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	e002      	b.n	8001626 <USART2_IRQHandler+0x102>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3301      	adds	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800162c:	4293      	cmp	r3, r2
 800162e:	ddf7      	ble.n	8001620 <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <USART2_IRQHandler+0x160>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <USART2_IRQHandler+0x160>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f022 0220 	bic.w	r2, r2, #32
 800163e:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <USART2_IRQHandler+0x160>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <USART2_IRQHandler+0x170>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	b29b      	uxth	r3, r3
 800164c:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <USART2_IRQHandler+0x160>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <USART2_IRQHandler+0x160>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f022 0220 	bic.w	r2, r2, #32
 800165c:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <USART2_IRQHandler+0x160>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <USART2_IRQHandler+0x170>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	b29b      	uxth	r3, r3
 800166a:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <USART2_IRQHandler+0x160>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <USART2_IRQHandler+0x160>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f022 0220 	bic.w	r2, r2, #32
 800167a:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000041c 	.word	0x2000041c
 8001688:	20000430 	.word	0x20000430
 800168c:	20000428 	.word	0x20000428
 8001690:	2000043c 	.word	0x2000043c
 8001694:	40004400 	.word	0x40004400

08001698 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800169e:	4b56      	ldr	r3, [pc, #344]	; (80017f8 <USART3_IRQHandler+0x160>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	09db      	lsrs	r3, r3, #7
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d122      	bne.n	80016f4 <USART3_IRQHandler+0x5c>
 80016ae:	4b52      	ldr	r3, [pc, #328]	; (80017f8 <USART3_IRQHandler+0x160>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	09db      	lsrs	r3, r3, #7
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d11a      	bne.n	80016f4 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 80016be:	4b4f      	ldr	r3, [pc, #316]	; (80017fc <USART3_IRQHandler+0x164>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00d      	beq.n	80016e4 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 80016c8:	4b4b      	ldr	r3, [pc, #300]	; (80017f8 <USART3_IRQHandler+0x160>)
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <USART3_IRQHandler+0x164>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f7ff fe4e 	bl	8001374 <USART_SEND>
			++arr_data[2];
 80016d8:	4b48      	ldr	r3, [pc, #288]	; (80017fc <USART3_IRQHandler+0x164>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	3301      	adds	r3, #1
 80016de:	4a47      	ldr	r2, [pc, #284]	; (80017fc <USART3_IRQHandler+0x164>)
 80016e0:	6093      	str	r3, [r2, #8]
 80016e2:	e007      	b.n	80016f4 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 80016e4:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <USART3_IRQHandler+0x160>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	4b43      	ldr	r3, [pc, #268]	; (80017f8 <USART3_IRQHandler+0x160>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016f2:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 80016f4:	4b40      	ldr	r3, [pc, #256]	; (80017f8 <USART3_IRQHandler+0x160>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d166      	bne.n	80017d2 <USART3_IRQHandler+0x13a>
 8001704:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <USART3_IRQHandler+0x160>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b01      	cmp	r3, #1
 8001712:	d15e      	bne.n	80017d2 <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 8001714:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <USART3_IRQHandler+0x160>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	0b1b      	lsrs	r3, r3, #12
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d117      	bne.n	8001754 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8001724:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <USART3_IRQHandler+0x160>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	0a9b      	lsrs	r3, r3, #10
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b01      	cmp	r3, #1
 8001732:	d108      	bne.n	8001746 <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <USART3_IRQHandler+0x160>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	b29b      	uxth	r3, r3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	b29a      	uxth	r2, r3
 8001740:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <USART3_IRQHandler+0x168>)
 8001742:	809a      	strh	r2, [r3, #4]
 8001744:	e020      	b.n	8001788 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <USART3_IRQHandler+0x160>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <USART3_IRQHandler+0x168>)
 8001750:	809a      	strh	r2, [r3, #4]
 8001752:	e019      	b.n	8001788 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <USART3_IRQHandler+0x160>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	0a9b      	lsrs	r3, r3, #10
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d109      	bne.n	8001778 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <USART3_IRQHandler+0x160>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	b29b      	uxth	r3, r3
 800176c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001770:	b29a      	uxth	r2, r3
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <USART3_IRQHandler+0x168>)
 8001774:	809a      	strh	r2, [r3, #4]
 8001776:	e007      	b.n	8001788 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <USART3_IRQHandler+0x160>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	b29b      	uxth	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	b29a      	uxth	r2, r3
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <USART3_IRQHandler+0x168>)
 8001786:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <USART3_IRQHandler+0x16c>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	e002      	b.n	800179a <USART3_IRQHandler+0x102>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017a0:	4293      	cmp	r3, r2
 80017a2:	ddf7      	ble.n	8001794 <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <USART3_IRQHandler+0x160>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <USART3_IRQHandler+0x160>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f022 0220 	bic.w	r2, r2, #32
 80017b2:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <USART3_IRQHandler+0x160>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <USART3_IRQHandler+0x170>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <USART3_IRQHandler+0x160>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <USART3_IRQHandler+0x160>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f022 0220 	bic.w	r2, r2, #32
 80017d0:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <USART3_IRQHandler+0x160>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <USART3_IRQHandler+0x170>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <USART3_IRQHandler+0x160>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <USART3_IRQHandler+0x160>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f022 0220 	bic.w	r2, r2, #32
 80017ee:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000041c 	.word	0x2000041c
 80017fc:	20000430 	.word	0x20000430
 8001800:	20000428 	.word	0x20000428
 8001804:	2000043c 	.word	0x2000043c
 8001808:	40004800 	.word	0x40004800

0800180c <TASK1_fun>:
#include "GPIO_DRIVER.h"
TASK_FRAME_t TASK1,TASK2,TASK3,TASK4;
uint8_t T1,T2,T3,T4;


void TASK1_fun(){
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T1^=1;
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <TASK1_fun+0x3c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	f083 0301 	eor.w	r3, r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <TASK1_fun+0x3c>)
 800181c:	701a      	strb	r2, [r3, #0]
		co++;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <TASK1_fun+0x40>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	4a09      	ldr	r2, [pc, #36]	; (800184c <TASK1_fun+0x40>)
 8001826:	6013      	str	r3, [r2, #0]
		TogglePin(GPIOA, pin7);
 8001828:	2107      	movs	r1, #7
 800182a:	4809      	ldr	r0, [pc, #36]	; (8001850 <TASK1_fun+0x44>)
 800182c:	f7ff fad0 	bl	8000dd0 <TogglePin>
		//ALSHREIF_RTOS_TASK_WAIT(&TASK1, 100);
		if(co==100){
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <TASK1_fun+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b64      	cmp	r3, #100	; 0x64
 8001836:	d1eb      	bne.n	8001810 <TASK1_fun+0x4>
			co=0;
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <TASK1_fun+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK2);
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <TASK1_fun+0x48>)
 8001840:	f7ff f8e6 	bl	8000a10 <ALSHREIF_RTOS_ACTIVAT_TASK>
		T1^=1;
 8001844:	e7e4      	b.n	8001810 <TASK1_fun+0x4>
 8001846:	bf00      	nop
 8001848:	200004ed 	.word	0x200004ed
 800184c:	20000044 	.word	0x20000044
 8001850:	40010800 	.word	0x40010800
 8001854:	20000458 	.word	0x20000458

08001858 <TASK2_fun>:

		}
	}
}
void TASK2_fun(){
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T2^=1;
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <TASK2_fun+0x48>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <TASK2_fun+0x48>)
 8001868:	701a      	strb	r2, [r3, #0]
		co++;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <TASK2_fun+0x4c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4a0c      	ldr	r2, [pc, #48]	; (80018a4 <TASK2_fun+0x4c>)
 8001872:	6013      	str	r3, [r2, #0]
		TogglePin(GPIOB, pin0);
 8001874:	2100      	movs	r1, #0
 8001876:	480c      	ldr	r0, [pc, #48]	; (80018a8 <TASK2_fun+0x50>)
 8001878:	f7ff faaa 	bl	8000dd0 <TogglePin>
		//ALSHREIF_RTOS_TASK_WAIT(&TASK2, 400);
		if(co==100){
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <TASK2_fun+0x4c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d102      	bne.n	800188a <TASK2_fun+0x32>
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK3);
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <TASK2_fun+0x54>)
 8001886:	f7ff f8c3 	bl	8000a10 <ALSHREIF_RTOS_ACTIVAT_TASK>

		}
		if(co==200){
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <TASK2_fun+0x4c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2bc8      	cmp	r3, #200	; 0xc8
 8001890:	d1e4      	bne.n	800185c <TASK2_fun+0x4>
			co=0;
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <TASK2_fun+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
			ALSHREIF_RTOS_TERMINAT_TASK(&TASK2);
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <TASK2_fun+0x58>)
 800189a:	f7ff f8c8 	bl	8000a2e <ALSHREIF_RTOS_TERMINAT_TASK>
		T2^=1;
 800189e:	e7dd      	b.n	800185c <TASK2_fun+0x4>
 80018a0:	20000454 	.word	0x20000454
 80018a4:	20000048 	.word	0x20000048
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	200004f0 	.word	0x200004f0
 80018b0:	20000458 	.word	0x20000458

080018b4 <TASK3_fun>:

		}
	}
}
void TASK3_fun(){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T3^=1;
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <TASK3_fun+0x48>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	f083 0301 	eor.w	r3, r3, #1
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <TASK3_fun+0x48>)
 80018c4:	701a      	strb	r2, [r3, #0]
		co++;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <TASK3_fun+0x4c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <TASK3_fun+0x4c>)
 80018ce:	6013      	str	r3, [r2, #0]
		TogglePin(GPIOB, pin1);
 80018d0:	2101      	movs	r1, #1
 80018d2:	480c      	ldr	r0, [pc, #48]	; (8001904 <TASK3_fun+0x50>)
 80018d4:	f7ff fa7c 	bl	8000dd0 <TogglePin>
		//ALSHREIF_RTOS_TASK_WAIT(&TASK3, 1000);
		if(co==100){
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <TASK3_fun+0x4c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b64      	cmp	r3, #100	; 0x64
 80018de:	d102      	bne.n	80018e6 <TASK3_fun+0x32>
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK4);
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <TASK3_fun+0x54>)
 80018e2:	f7ff f895 	bl	8000a10 <ALSHREIF_RTOS_ACTIVAT_TASK>
		}
		if(co==200){
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <TASK3_fun+0x4c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2bc8      	cmp	r3, #200	; 0xc8
 80018ec:	d1e4      	bne.n	80018b8 <TASK3_fun+0x4>
			co=0;
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <TASK3_fun+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
			ALSHREIF_RTOS_TERMINAT_TASK(&TASK3);
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <TASK3_fun+0x58>)
 80018f6:	f7ff f89a 	bl	8000a2e <ALSHREIF_RTOS_TERMINAT_TASK>
		T3^=1;
 80018fa:	e7dd      	b.n	80018b8 <TASK3_fun+0x4>
 80018fc:	200004ec 	.word	0x200004ec
 8001900:	2000004c 	.word	0x2000004c
 8001904:	40010c00 	.word	0x40010c00
 8001908:	200004bc 	.word	0x200004bc
 800190c:	200004f0 	.word	0x200004f0

08001910 <TASK4_fun>:
		}
	}
}
void TASK4_fun(){
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T4^=1;
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <TASK4_fun+0x34>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f083 0301 	eor.w	r3, r3, #1
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <TASK4_fun+0x34>)
 8001920:	701a      	strb	r2, [r3, #0]
		co++;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <TASK4_fun+0x38>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <TASK4_fun+0x38>)
 800192a:	6013      	str	r3, [r2, #0]
		//ALSHREIF_RTOS_TASK_WAIT(&TASK4, 100);
		if(co==300){
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <TASK4_fun+0x38>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001934:	d1ee      	bne.n	8001914 <TASK4_fun+0x4>
			co=0;
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <TASK4_fun+0x38>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
			ALSHREIF_RTOS_TERMINAT_TASK(&TASK4);
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <TASK4_fun+0x3c>)
 800193e:	f7ff f876 	bl	8000a2e <ALSHREIF_RTOS_TERMINAT_TASK>
		T4^=1;
 8001942:	e7e7      	b.n	8001914 <TASK4_fun+0x4>
 8001944:	200004b8 	.word	0x200004b8
 8001948:	20000050 	.word	0x20000050
 800194c:	200004bc 	.word	0x200004bc

08001950 <main>:
		}
	}
}
//============================================================================================================
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

	HARD_WARE_INIT();
 8001954:	f7fe fc6e 	bl	8000234 <HARD_WARE_INIT>
	ALSHREIF_RTOS_INIT();
 8001958:	f7fe fdf6 	bl	8000548 <ALSHREIF_RTOS_INIT>

	strcpy(TASK1.NAME,"TASK1");
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <main+0xb8>)
 800195e:	4a2b      	ldr	r2, [pc, #172]	; (8001a0c <main+0xbc>)
 8001960:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001964:	6018      	str	r0, [r3, #0]
 8001966:	3304      	adds	r3, #4
 8001968:	8019      	strh	r1, [r3, #0]
	TASK1.TASK_FUNCTION=TASK1_fun;
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <main+0xc0>)
 800196c:	4a29      	ldr	r2, [pc, #164]	; (8001a14 <main+0xc4>)
 800196e:	609a      	str	r2, [r3, #8]
	TASK1.priority=4;
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <main+0xc0>)
 8001972:	2204      	movs	r2, #4
 8001974:	711a      	strb	r2, [r3, #4]
	TASK1.stack_size=1024;
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <main+0xc0>)
 8001978:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197c:	601a      	str	r2, [r3, #0]

	strcpy(TASK2.NAME,"TASK2");
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <main+0xc8>)
 8001980:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <main+0xcc>)
 8001982:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001986:	6018      	str	r0, [r3, #0]
 8001988:	3304      	adds	r3, #4
 800198a:	8019      	strh	r1, [r3, #0]
	TASK2.TASK_FUNCTION=TASK2_fun;
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <main+0xd0>)
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <main+0xd4>)
 8001990:	609a      	str	r2, [r3, #8]
	TASK2.priority=3;
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <main+0xd0>)
 8001994:	2203      	movs	r2, #3
 8001996:	711a      	strb	r2, [r3, #4]
	TASK2.stack_size=1024;
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <main+0xd0>)
 800199a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800199e:	601a      	str	r2, [r3, #0]

	strcpy(TASK3.NAME,"TASK3");
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <main+0xd8>)
 80019a2:	4a22      	ldr	r2, [pc, #136]	; (8001a2c <main+0xdc>)
 80019a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a8:	6018      	str	r0, [r3, #0]
 80019aa:	3304      	adds	r3, #4
 80019ac:	8019      	strh	r1, [r3, #0]
	TASK3.TASK_FUNCTION=TASK3_fun;
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <main+0xe0>)
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <main+0xe4>)
 80019b2:	609a      	str	r2, [r3, #8]
	TASK3.priority=2;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <main+0xe0>)
 80019b6:	2202      	movs	r2, #2
 80019b8:	711a      	strb	r2, [r3, #4]
	TASK3.stack_size=1024;
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <main+0xe0>)
 80019bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c0:	601a      	str	r2, [r3, #0]

	strcpy(TASK4.NAME,"TASK4");
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <main+0xe8>)
 80019c4:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <main+0xec>)
 80019c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ca:	6018      	str	r0, [r3, #0]
 80019cc:	3304      	adds	r3, #4
 80019ce:	8019      	strh	r1, [r3, #0]
	TASK4.TASK_FUNCTION=TASK4_fun;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <main+0xf0>)
 80019d2:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <main+0xf4>)
 80019d4:	609a      	str	r2, [r3, #8]
	TASK4.priority=1;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <main+0xf0>)
 80019d8:	2201      	movs	r2, #1
 80019da:	711a      	strb	r2, [r3, #4]
	TASK4.stack_size=1024;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <main+0xf0>)
 80019de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e2:	601a      	str	r2, [r3, #0]

	ALSHREIF_RTOS_CREAT_TASK(&TASK1);
 80019e4:	480a      	ldr	r0, [pc, #40]	; (8001a10 <main+0xc0>)
 80019e6:	f7fe fd73 	bl	80004d0 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK2);
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <main+0xd0>)
 80019ec:	f7fe fd70 	bl	80004d0 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK3);
 80019f0:	480f      	ldr	r0, [pc, #60]	; (8001a30 <main+0xe0>)
 80019f2:	f7fe fd6d 	bl	80004d0 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK4);
 80019f6:	4812      	ldr	r0, [pc, #72]	; (8001a40 <main+0xf0>)
 80019f8:	f7fe fd6a 	bl	80004d0 <ALSHREIF_RTOS_CREAT_TASK>

	ALSHREIF_RTOS_ACTIVAT_TASK(&TASK1);
 80019fc:	4804      	ldr	r0, [pc, #16]	; (8001a10 <main+0xc0>)
 80019fe:	f7ff f807 	bl	8000a10 <ALSHREIF_RTOS_ACTIVAT_TASK>
	//	ALSHREIF_RTOS_ACTIVAT_TASK(&TASK2);
	//	ALSHREIF_RTOS_ACTIVAT_TASK(&TASK3);

	ALSHREIF_RTOS_START_OS();
 8001a02:	f7ff f823 	bl	8000a4c <ALSHREIF_RTOS_START_OS>
	while(1);
 8001a06:	e7fe      	b.n	8001a06 <main+0xb6>
 8001a08:	200004a0 	.word	0x200004a0
 8001a0c:	08001b08 	.word	0x08001b08
 8001a10:	20000488 	.word	0x20000488
 8001a14:	0800180d 	.word	0x0800180d
 8001a18:	20000470 	.word	0x20000470
 8001a1c:	08001b10 	.word	0x08001b10
 8001a20:	20000458 	.word	0x20000458
 8001a24:	08001859 	.word	0x08001859
 8001a28:	20000508 	.word	0x20000508
 8001a2c:	08001b18 	.word	0x08001b18
 8001a30:	200004f0 	.word	0x200004f0
 8001a34:	080018b5 	.word	0x080018b5
 8001a38:	200004d4 	.word	0x200004d4
 8001a3c:	08001b20 	.word	0x08001b20
 8001a40:	200004bc 	.word	0x200004bc
 8001a44:	08001911 	.word	0x08001911

08001a48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a48:	480d      	ldr	r0, [pc, #52]	; (8001a80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a4a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a52:	490d      	ldr	r1, [pc, #52]	; (8001a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <LoopForever+0xe>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a68:	4c0a      	ldr	r4, [pc, #40]	; (8001a94 <LoopForever+0x16>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a76:	f000 f811 	bl	8001a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a7a:	f7ff ff69 	bl	8001950 <main>

08001a7e <LoopForever>:

LoopForever:
    b LoopForever
 8001a7e:	e7fe      	b.n	8001a7e <LoopForever>
  ldr   r0, =_estack
 8001a80:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a88:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001a8c:	08001b30 	.word	0x08001b30
  ldr r2, =_sbss
 8001a90:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001a94:	20000520 	.word	0x20000520

08001a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC1_2_IRQHandler>
	...

08001a9c <__libc_init_array>:
 8001a9c:	b570      	push	{r4, r5, r6, lr}
 8001a9e:	2500      	movs	r5, #0
 8001aa0:	4e0c      	ldr	r6, [pc, #48]	; (8001ad4 <__libc_init_array+0x38>)
 8001aa2:	4c0d      	ldr	r4, [pc, #52]	; (8001ad8 <__libc_init_array+0x3c>)
 8001aa4:	1ba4      	subs	r4, r4, r6
 8001aa6:	10a4      	asrs	r4, r4, #2
 8001aa8:	42a5      	cmp	r5, r4
 8001aaa:	d109      	bne.n	8001ac0 <__libc_init_array+0x24>
 8001aac:	f000 f81a 	bl	8001ae4 <_init>
 8001ab0:	2500      	movs	r5, #0
 8001ab2:	4e0a      	ldr	r6, [pc, #40]	; (8001adc <__libc_init_array+0x40>)
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <__libc_init_array+0x44>)
 8001ab6:	1ba4      	subs	r4, r4, r6
 8001ab8:	10a4      	asrs	r4, r4, #2
 8001aba:	42a5      	cmp	r5, r4
 8001abc:	d105      	bne.n	8001aca <__libc_init_array+0x2e>
 8001abe:	bd70      	pop	{r4, r5, r6, pc}
 8001ac0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ac4:	4798      	blx	r3
 8001ac6:	3501      	adds	r5, #1
 8001ac8:	e7ee      	b.n	8001aa8 <__libc_init_array+0xc>
 8001aca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ace:	4798      	blx	r3
 8001ad0:	3501      	adds	r5, #1
 8001ad2:	e7f2      	b.n	8001aba <__libc_init_array+0x1e>
 8001ad4:	08001b28 	.word	0x08001b28
 8001ad8:	08001b28 	.word	0x08001b28
 8001adc:	08001b28 	.word	0x08001b28
 8001ae0:	08001b2c 	.word	0x08001b2c

08001ae4 <_init>:
 8001ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ae6:	bf00      	nop
 8001ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aea:	bc08      	pop	{r3}
 8001aec:	469e      	mov	lr, r3
 8001aee:	4770      	bx	lr

08001af0 <_fini>:
 8001af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af2:	bf00      	nop
 8001af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001af6:	bc08      	pop	{r3}
 8001af8:	469e      	mov	lr, r3
 8001afa:	4770      	bx	lr
