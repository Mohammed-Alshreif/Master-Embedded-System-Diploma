
RTOS_PROJECT.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b2c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001c5c  08001c5c  00011c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c88  08001c88  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001c88  08001c88  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c88  08001c88  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c88  08001c88  00011c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c8c  08001c8c  00011c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000020  08001cb0  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08001cb0  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007eb8  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000157a  00000000  00000000  00027f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003d8  00000000  00000000  00029480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000330  00000000  00000000  00029858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000041ca  00000000  00000000  00029b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004f03  00000000  00000000  0002dd52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00010d33  00000000  00000000  00032c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00043988  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cb0  00000000  00000000  00043a04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08001c44 	.word	0x08001c44

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08001c44 	.word	0x08001c44

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
 *      Author: 20102
 */
#include "RTOS_CORTEX_M3_PORTING.h"
#include "stm32_speed_DRIVER.h"

void HardFault_Handler(){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}
void	MemManage_Handler(){
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}
void	BusFault_Handler(){
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}
void	UsageFault_Handler(){
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <HARD_WARE_INIT>:
}

//====================================
void HARD_WARE_INIT(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 8000238:	2100      	movs	r1, #0
 800023a:	2000      	movs	r0, #0
 800023c:	f000 ff9a 	bl	8001174 <MCAL_speed_init>
	__NVIC_SetPriority(PendSV_IRQn, 15) ;
 8000240:	210f      	movs	r1, #15
 8000242:	f06f 0001 	mvn.w	r0, #1
 8000246:	f7ff ff9d 	bl	8000184 <__NVIC_SetPriority>
	pinmode(GPIOA, pin7, GPIO_MODE_OUTPUT_push_pull_Speed2);
 800024a:	2202      	movs	r2, #2
 800024c:	2107      	movs	r1, #7
 800024e:	480a      	ldr	r0, [pc, #40]	; (8000278 <HARD_WARE_INIT+0x44>)
 8000250:	f000 fcf8 	bl	8000c44 <pinmode>
	pinmode(GPIOA, pin6, GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000254:	2202      	movs	r2, #2
 8000256:	2106      	movs	r1, #6
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <HARD_WARE_INIT+0x44>)
 800025a:	f000 fcf3 	bl	8000c44 <pinmode>
	pinmode(GPIOB, pin0, GPIO_MODE_OUTPUT_push_pull_Speed2);
 800025e:	2202      	movs	r2, #2
 8000260:	2100      	movs	r1, #0
 8000262:	4806      	ldr	r0, [pc, #24]	; (800027c <HARD_WARE_INIT+0x48>)
 8000264:	f000 fcee 	bl	8000c44 <pinmode>
	pinmode(GPIOB, pin1, GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000268:	2202      	movs	r2, #2
 800026a:	2101      	movs	r1, #1
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <HARD_WARE_INIT+0x48>)
 800026e:	f000 fce9 	bl	8000c44 <pinmode>

}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800
 800027c:	40010c00 	.word	0x40010c00

08000280 <SVC_Handler>:


//====================================

__attribute__((naked)) void SVC_Handler(){
	__asm("TST lr,#4 \n\t"
 8000280:	f01e 0f04 	tst.w	lr, #4
 8000284:	bf0c      	ite	eq
 8000286:	f3ef 8008 	mrseq	r0, MSP
 800028a:	f3ef 8009 	mrsne	r0, PSP
 800028e:	f000 babd 	b.w	800080c <OS_SVC_SERVICES>
			"ITE EQ \n\t"
			"MRSEQ r0,MSP \n\t"
			"MRSNE r0,PSP \n\t"
			"B OS_SVC_SERVICES");
}
 8000292:	bf00      	nop

08000294 <OS_TRIGDER_PENDSV>:



//====================================

void OS_TRIGDER_PENDSV(){
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <OS_TRIGDER_PENDSV+0x18>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a03      	ldr	r2, [pc, #12]	; (80002ac <OS_TRIGDER_PENDSV+0x18>)
 800029e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002a2:	6053      	str	r3, [r2, #4]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <TIMER_START>:
//====================================
void TIMER_START(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

	SysTick_Config( TICKS_TIMER);
 80002b4:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 80002b8:	f7ff ff8e 	bl	80001d8 <SysTick_Config>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}

080002c0 <OS_FIFO_INIT>:


#include "RTOS_FIFO.h"


FIFO_status_t OS_FIFO_INIT (FIFO_BUF_t* fifo,FIFO_TYPE* buff , uint16_t length){
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	4613      	mov	r3, r2
 80002cc:	80fb      	strh	r3, [r7, #6]

	if(!buff )
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d101      	bne.n	80002d8 <OS_FIFO_INIT+0x18>
		return FIFO_NULL;
 80002d4:	2301      	movs	r3, #1
 80002d6:	e011      	b.n	80002fc <OS_FIFO_INIT+0x3c>

	fifo->base = buff ;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	68ba      	ldr	r2, [r7, #8]
 80002dc:	609a      	str	r2, [r3, #8]
	fifo->head = fifo->base ;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	689a      	ldr	r2, [r3, #8]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	601a      	str	r2, [r3, #0]
	fifo->tail = fifo->base ;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	689a      	ldr	r2, [r3, #8]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	605a      	str	r2, [r3, #4]
	fifo->lenght = length;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	88fa      	ldrh	r2, [r7, #6]
 80002f2:	81da      	strh	r2, [r3, #14]
	fifo->count=0;
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	2200      	movs	r2, #0
 80002f8:	819a      	strh	r2, [r3, #12]

	return FIFO_NO_ERROR;
 80002fa:	2300      	movs	r3, #0

}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <OS_FIFO_ENQUEUE>:

/* *********************************** */

FIFO_status_t OS_FIFO_ENQUEUE (FIFO_BUF_t* fifo,FIFO_TYPE item){
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->lenght)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <OS_FIFO_ENQUEUE+0x1a>
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	89db      	ldrh	r3, [r3, #14]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d101      	bne.n	8000324 <OS_FIFO_ENQUEUE+0x1e>
		return FIFO_NULL;
 8000320:	2301      	movs	r3, #1
 8000322:	e02e      	b.n	8000382 <OS_FIFO_ENQUEUE+0x7c>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->count == fifo->lenght))
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	429a      	cmp	r2, r3
 800032e:	d107      	bne.n	8000340 <OS_FIFO_ENQUEUE+0x3a>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	899a      	ldrh	r2, [r3, #12]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	89db      	ldrh	r3, [r3, #14]
 8000338:	429a      	cmp	r2, r3
 800033a:	d101      	bne.n	8000340 <OS_FIFO_ENQUEUE+0x3a>
		return FIFO_FULL;
 800033c:	2302      	movs	r3, #2
 800033e:	e020      	b.n	8000382 <OS_FIFO_ENQUEUE+0x7c>

	*(fifo->tail)=item;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	601a      	str	r2, [r3, #0]
	fifo->count++;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	899b      	ldrh	r3, [r3, #12]
 800034c:	3301      	adds	r3, #1
 800034e:	b29a      	uxth	r2, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	819a      	strh	r2, [r3, #12]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->lenght )) - 4 ))
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	6892      	ldr	r2, [r2, #8]
 800035c:	4611      	mov	r1, r2
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	89d2      	ldrh	r2, [r2, #14]
 8000362:	0092      	lsls	r2, r2, #2
 8000364:	440a      	add	r2, r1
 8000366:	3a04      	subs	r2, #4
 8000368:	4293      	cmp	r3, r2
 800036a:	d104      	bne.n	8000376 <OS_FIFO_ENQUEUE+0x70>
		fifo->tail = fifo->base;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689a      	ldr	r2, [r3, #8]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	e004      	b.n	8000380 <OS_FIFO_ENQUEUE+0x7a>
	else
		fifo->tail++;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	1d1a      	adds	r2, r3, #4
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 8000380:	2300      	movs	r3, #0


}
 8000382:	4618      	mov	r0, r3
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <OS_FIFO_DEQUEUE>:

/* *********************************** */

FIFO_status_t OS_FIFO_DEQUEUE (FIFO_BUF_t* fifo, FIFO_TYPE* item){
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->lenght)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d003      	beq.n	80003a6 <OS_FIFO_DEQUEUE+0x1a>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	89db      	ldrh	r3, [r3, #14]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d101      	bne.n	80003aa <OS_FIFO_DEQUEUE+0x1e>
		return FIFO_NULL;
 80003a6:	2301      	movs	r3, #1
 80003a8:	e02d      	b.n	8000406 <OS_FIFO_DEQUEUE+0x7a>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d101      	bne.n	80003ba <OS_FIFO_DEQUEUE+0x2e>
		return FIFO_EMPTY;
 80003b6:	2303      	movs	r3, #3
 80003b8:	e025      	b.n	8000406 <OS_FIFO_DEQUEUE+0x7a>



	*item = *(fifo->head);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	601a      	str	r2, [r3, #0]
	*(fifo->head)=NULL;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
	fifo->count--;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	899b      	ldrh	r3, [r3, #12]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	819a      	strh	r2, [r3, #12]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->lenght )) - 4 ))
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	6892      	ldr	r2, [r2, #8]
 80003e0:	4611      	mov	r1, r2
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	89d2      	ldrh	r2, [r2, #14]
 80003e6:	0092      	lsls	r2, r2, #2
 80003e8:	440a      	add	r2, r1
 80003ea:	3a04      	subs	r2, #4
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d104      	bne.n	80003fa <OS_FIFO_DEQUEUE+0x6e>
		fifo->head = fifo->base;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	689a      	ldr	r2, [r3, #8]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	e004      	b.n	8000404 <OS_FIFO_DEQUEUE+0x78>
	else
		fifo->head++;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	1d1a      	adds	r2, r3, #4
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <idle_task_fun>:
	SVC_TERMINATE_task,
	SVC_Wating_task
}_SVC_ID;
//===============================idle_task_fun==================================
uint8_t idle=0;
void idle_task_fun(){
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	while(1){
		idle^=1;
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <idle_task_fun+0x18>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	f083 0301 	eor.w	r3, r3, #1
 800041c:	b2da      	uxtb	r2, r3
 800041e:	4b02      	ldr	r3, [pc, #8]	; (8000428 <idle_task_fun+0x18>)
 8000420:	701a      	strb	r2, [r3, #0]
		__asm("WFE");
 8000422:	bf20      	wfe
		idle^=1;
 8000424:	e7f6      	b.n	8000414 <idle_task_fun+0x4>
 8000426:	bf00      	nop
 8000428:	2000003c 	.word	0x2000003c

0800042c <ALSHREIF_RTOS_CREAT_TASK_FRAM>:
	}
}
//=======================ALSHREIF_RTOS_CREAT_TASK_FRAM==========================

void ALSHREIF_RTOS_CREAT_TASK_FRAM(TASK_FRAME_t* TASK){
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	 * r8
	 * r9
	 * r10
	 * r11
	 * */
	TASK->_PSP_STACK_CURENT=TASK->_PSP_STACK_TOP;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	461a      	mov	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	615a      	str	r2, [r3, #20]
	TASK->_PSP_STACK_CURENT--;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	1f1a      	subs	r2, r3, #4
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	615a      	str	r2, [r3, #20]
	*(TASK->_PSP_STACK_CURENT)=0x01000000;//xpsr
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000450:	601a      	str	r2, [r3, #0]

	TASK->_PSP_STACK_CURENT--;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	1f1a      	subs	r2, r3, #4
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	615a      	str	r2, [r3, #20]
	*(TASK->_PSP_STACK_CURENT)=(uint32_t)TASK->TASK_FUNCTION;//pc
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	689a      	ldr	r2, [r3, #8]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	601a      	str	r2, [r3, #0]

	TASK->_PSP_STACK_CURENT--;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	1f1a      	subs	r2, r3, #4
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	615a      	str	r2, [r3, #20]
	*(TASK->_PSP_STACK_CURENT)=0xFFFFFFFD;//lr
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	f06f 0202 	mvn.w	r2, #2
 8000478:	601a      	str	r2, [r3, #0]

	for(uint8_t i =0;i<13;i++){
 800047a:	2300      	movs	r3, #0
 800047c:	73fb      	strb	r3, [r7, #15]
 800047e:	e00b      	b.n	8000498 <ALSHREIF_RTOS_CREAT_TASK_FRAM+0x6c>
		TASK->_PSP_STACK_CURENT--;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	1f1a      	subs	r2, r3, #4
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	615a      	str	r2, [r3, #20]
		*(TASK->_PSP_STACK_CURENT)=0;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
	for(uint8_t i =0;i<13;i++){
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	3301      	adds	r3, #1
 8000496:	73fb      	strb	r3, [r7, #15]
 8000498:	7bfb      	ldrb	r3, [r7, #15]
 800049a:	2b0c      	cmp	r3, #12
 800049c:	d9f0      	bls.n	8000480 <ALSHREIF_RTOS_CREAT_TASK_FRAM+0x54>
	}

}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <ALSHREIF_CREATE_MAIN_STACK>:
//===============================CREATE_MAIN_STACK==============================
void ALSHREIF_CREATE_MAIN_STACK(){
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	OS_CONTROL._MSP_STACK_TOP=(uint32_t volatile)&_estack;//top main stack
 80004ac:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <ALSHREIF_CREATE_MAIN_STACK+0x34>)
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004b0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_CONTROL._MSP_STACK_END=OS_CONTROL._MSP_STACK_TOP-MAIN_STACK_SIZE;//end main stack
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004b6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80004ba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80004be:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004c0:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_CONTROL._PSP_TASK_locator =(OS_CONTROL._MSP_STACK_END-8);//locator task 1
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004c6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80004ca:	3b08      	subs	r3, #8
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <ALSHREIF_CREATE_MAIN_STACK+0x38>)
 80004ce:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20005000 	.word	0x20005000
 80004e0:	200001e4 	.word	0x200001e4

080004e4 <ALSHREIF_RTOS_CREAT_TASK>:
//===============================ALSHREIF_RTOS_CREAT_TASK========================
void ALSHREIF_RTOS_CREAT_TASK(TASK_FRAME_t* TASK){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	TASK->_PSP_STACK_TOP=OS_CONTROL._PSP_TASK_locator;
 80004ec:	4b19      	ldr	r3, [pc, #100]	; (8000554 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 80004ee:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	60da      	str	r2, [r3, #12]
	TASK->_PSP_STACK_END=(TASK->_PSP_STACK_TOP-TASK->stack_size);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	68da      	ldr	r2, [r3, #12]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	1ad2      	subs	r2, r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	611a      	str	r2, [r3, #16]
	if(TASK->_PSP_STACK_END<(uint32_t)(&_end_heap))while(1); //over flow
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	4a13      	ldr	r2, [pc, #76]	; (8000558 <ALSHREIF_RTOS_CREAT_TASK+0x74>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d200      	bcs.n	8000510 <ALSHREIF_RTOS_CREAT_TASK+0x2c>
 800050e:	e7fe      	b.n	800050e <ALSHREIF_RTOS_CREAT_TASK+0x2a>
	OS_CONTROL._PSP_TASK_locator=(TASK->_PSP_STACK_END-8);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	691b      	ldr	r3, [r3, #16]
 8000514:	3b08      	subs	r3, #8
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000518:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	ALSHREIF_RTOS_CREAT_TASK_FRAM(TASK);//pointer ((:
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ff85 	bl	800042c <ALSHREIF_RTOS_CREAT_TASK_FRAM>
	//in the first time in runtime when it context SAVE the idle task,
	//and go to the next task this will make a problem because current_task->>_PSP_STACK_CURENT did not enter before
	//so _PSP_STACK_CURENT will be zero and if it but zero in PSP it will make HardFault
	//check @context tasks

	OS_CONTROL.OS_TASKS[OS_CONTROL.NUMBER_OF_TASKS]=TASK;
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000524:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000528:	4619      	mov	r1, r3
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	OS_CONTROL.NUMBER_OF_TASKS++;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 8000534:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000538:	3301      	adds	r3, #1
 800053a:	b29a      	uxth	r2, r3
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <ALSHREIF_RTOS_CREAT_TASK+0x70>)
 800053e:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c

	TASK->State=Suspend;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200001e4 	.word	0x200001e4
 8000558:	20000b20 	.word	0x20000b20

0800055c <ALSHREIF_RTOS_INIT>:
//=============================== RTOS_INIT =====================================
OS_ERRORS ALSHREIF_RTOS_INIT(){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	OS_ERRORS error =no_error;
 8000562:	2300      	movs	r3, #0
 8000564:	71fb      	strb	r3, [r7, #7]
	//os mode
	OS_CONTROL.OS_MODE=OS_Suspend;
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <ALSHREIF_RTOS_INIT+0x54>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//main stack of os
	ALSHREIF_CREATE_MAIN_STACK();
 800056e:	f7ff ff9b 	bl	80004a8 <ALSHREIF_CREATE_MAIN_STACK>
	//init ready queue
	OS_FIFO_INIT(&READY_QUEUE,READY_QUEUE_TABLE, TASKS_NUMPER_DEFINE);
 8000572:	2264      	movs	r2, #100	; 0x64
 8000574:	490f      	ldr	r1, [pc, #60]	; (80005b4 <ALSHREIF_RTOS_INIT+0x58>)
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <ALSHREIF_RTOS_INIT+0x5c>)
 8000578:	f7ff fea2 	bl	80002c0 <OS_FIFO_INIT>
	//create idle task
	strcpy(IDLE_TASK.NAME,"idle task");
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <ALSHREIF_RTOS_INIT+0x60>)
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <ALSHREIF_RTOS_INIT+0x64>)
 8000580:	ca07      	ldmia	r2, {r0, r1, r2}
 8000582:	c303      	stmia	r3!, {r0, r1}
 8000584:	801a      	strh	r2, [r3, #0]
	IDLE_TASK.priority=255;
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <ALSHREIF_RTOS_INIT+0x68>)
 8000588:	22ff      	movs	r2, #255	; 0xff
 800058a:	711a      	strb	r2, [r3, #4]
	IDLE_TASK.TASK_FUNCTION=idle_task_fun;
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <ALSHREIF_RTOS_INIT+0x68>)
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <ALSHREIF_RTOS_INIT+0x6c>)
 8000590:	609a      	str	r2, [r3, #8]
	IDLE_TASK.stack_size=100;
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <ALSHREIF_RTOS_INIT+0x68>)
 8000594:	2264      	movs	r2, #100	; 0x64
 8000596:	601a      	str	r2, [r3, #0]

	ALSHREIF_RTOS_CREAT_TASK(&IDLE_TASK);
 8000598:	480a      	ldr	r0, [pc, #40]	; (80005c4 <ALSHREIF_RTOS_INIT+0x68>)
 800059a:	f7ff ffa3 	bl	80004e4 <ALSHREIF_RTOS_CREAT_TASK>

	IDLE_TASK.State=Suspend;
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <ALSHREIF_RTOS_INIT+0x68>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	return error;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200001e4 	.word	0x200001e4
 80005b4:	20000054 	.word	0x20000054
 80005b8:	200003c0 	.word	0x200003c0
 80005bc:	200003a8 	.word	0x200003a8
 80005c0:	08001c5c 	.word	0x08001c5c
 80005c4:	20000390 	.word	0x20000390
 80005c8:	08000411 	.word	0x08000411

080005cc <shell_sort>:
				OS_CONTROL.OS_TASKS[j+1] = temp ;
			}

}

void shell_sort() {
 80005cc:	b480      	push	{r7}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
	unsigned int i, j, n, gap;
	TASK_FRAME_t *temp;
	n = OS_CONTROL.NUMBER_OF_TASKS;
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <shell_sort+0x94>)
 80005d4:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 80005d8:	60bb      	str	r3, [r7, #8]
	for (gap = n / 2; gap > 0; gap /= 2) {
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	085b      	lsrs	r3, r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e036      	b.n	8000650 <shell_sort+0x84>
		for (i = gap; i < n; i++) {
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	e02c      	b.n	8000642 <shell_sort+0x76>
			temp = OS_CONTROL.OS_TASKS[i];
 80005e8:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <shell_sort+0x94>)
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	607b      	str	r3, [r7, #4]
			for (j = i; j >= gap && OS_CONTROL.OS_TASKS[j - gap]->priority > temp->priority; j -= gap) {
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	e00d      	b.n	8000614 <shell_sort+0x48>
				OS_CONTROL.OS_TASKS[j] = OS_CONTROL.OS_TASKS[j - gap];
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	4a18      	ldr	r2, [pc, #96]	; (8000660 <shell_sort+0x94>)
 8000600:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000604:	4916      	ldr	r1, [pc, #88]	; (8000660 <shell_sort+0x94>)
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (j = i; j >= gap && OS_CONTROL.OS_TASKS[j - gap]->priority > temp->priority; j -= gap) {
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	429a      	cmp	r2, r3
 800061a:	d30a      	bcc.n	8000632 <shell_sort+0x66>
 800061c:	693a      	ldr	r2, [r7, #16]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <shell_sort+0x94>)
 8000624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000628:	791a      	ldrb	r2, [r3, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	429a      	cmp	r2, r3
 8000630:	d8e2      	bhi.n	80005f8 <shell_sort+0x2c>
			}
			OS_CONTROL.OS_TASKS[j] = temp;
 8000632:	490b      	ldr	r1, [pc, #44]	; (8000660 <shell_sort+0x94>)
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = gap; i < n; i++) {
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	3301      	adds	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	429a      	cmp	r2, r3
 8000648:	d3ce      	bcc.n	80005e8 <shell_sort+0x1c>
	for (gap = n / 2; gap > 0; gap /= 2) {
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	085b      	lsrs	r3, r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1c5      	bne.n	80005e2 <shell_sort+0x16>
		}
	}
}
 8000656:	bf00      	nop
 8000658:	371c      	adds	r7, #28
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	200001e4 	.word	0x200001e4

08000664 <free_the_FIFO>:
//=====================

void free_the_FIFO(){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	TASK_FRAME_t* temp;//Because I went to pointer to pointer **
	while(OS_FIFO_DEQUEUE(&READY_QUEUE,&temp) !=FIFO_EMPTY){//Address of the pointer
 800066a:	bf00      	nop
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4619      	mov	r1, r3
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <free_the_FIFO+0x20>)
 8000672:	f7ff fe8b 	bl	800038c <OS_FIFO_DEQUEUE>
 8000676:	4603      	mov	r3, r0
 8000678:	2b03      	cmp	r3, #3
 800067a:	d1f7      	bne.n	800066c <free_the_FIFO+0x8>

	}
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200003c0 	.word	0x200003c0

08000688 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>:
//=====================

void ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
	//=====================
	TASK_FRAME_t *NEXT_TASK,*CURENT_TASK;
	uint8_t i=0;
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]
	//=====================
	shell_sort();//Rearrange  the SCEDULER table
 8000692:	f7ff ff9b 	bl	80005cc <shell_sort>
	//=====================
	free_the_FIFO(); //free the FIFO
 8000696:	f7ff ffe5 	bl	8000664 <free_the_FIFO>

	//=====================
	//update the FIFO
	while(i<OS_CONTROL.NUMBER_OF_TASKS)
 800069a:	e03d      	b.n	8000718 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x90>
	{
		CURENT_TASK=OS_CONTROL.OS_TASKS[i];
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4a24      	ldr	r2, [pc, #144]	; (8000730 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 80006a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a4:	60bb      	str	r3, [r7, #8]
		NEXT_TASK=OS_CONTROL.OS_TASKS[i+1];
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a21      	ldr	r2, [pc, #132]	; (8000730 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 80006ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b0:	607b      	str	r3, [r7, #4]

		/*
		 * <<I need only the highest  priority element or all  equal highest priority >>
		 */

		if(CURENT_TASK->State!=Suspend){
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d02a      	beq.n	8000712 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x8a>
			 * Suspend
			 * wait
			 * >>i++
			 */

			if(NEXT_TASK->State==Suspend){//Suspend or NULL don not care it is the same =0
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d108      	bne.n	80006d8 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x50>
				/*
				 * wait go to the fifo
				 * Suspend
				 * */

				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 80006c6:	68b9      	ldr	r1, [r7, #8]
 80006c8:	481a      	ldr	r0, [pc, #104]	; (8000734 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 80006ca:	f7ff fe1c 	bl	8000306 <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	2202      	movs	r2, #2
 80006d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				break;
 80006d6:	e026      	b.n	8000726 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x9e>
			/*
			 * wait priority =0 >>>go to the fifo
			 * wait priority= 1
			 *
			 * */
			if(CURENT_TASK->priority < NEXT_TASK->priority){
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	791a      	ldrb	r2, [r3, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d208      	bcs.n	80006f6 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x6e>
				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	4813      	ldr	r0, [pc, #76]	; (8000734 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 80006e8:	f7ff fe0d 	bl	8000306 <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	2202      	movs	r2, #2
 80006f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				break;
 80006f4:	e017      	b.n	8000726 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x9e>
			 * wait priority =1  go to the fifo
			 * wait priority= 1  go to the fifo
			 *
			 * >>> round robin
			 * */
			else if(CURENT_TASK->priority == NEXT_TASK->priority){
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	791a      	ldrb	r2, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d107      	bne.n	8000712 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x8a>
				OS_FIFO_ENQUEUE(&READY_QUEUE,CURENT_TASK);
 8000702:	68b9      	ldr	r1, [r7, #8]
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xac>)
 8000706:	f7ff fdfe 	bl	8000306 <OS_FIFO_ENQUEUE>
				CURENT_TASK->State=Ready;
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	2202      	movs	r2, #2
 800070e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			}

		}


		i++;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
	while(i<OS_CONTROL.NUMBER_OF_TASKS)
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0xa8>)
 800071e:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000722:	429a      	cmp	r2, r3
 8000724:	d3ba      	bcc.n	800069c <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES+0x14>
	}
	//end while
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200001e4 	.word	0x200001e4
 8000734:	200003c0 	.word	0x200003c0

08000738 <OS_SVC_SET>:

//======================================== SVC =====================================================

void OS_SVC_SET(_SVC_ID ID){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	//OS_SVC_SERVICES
	switch(ID){
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d006      	beq.n	8000756 <OS_SVC_SET+0x1e>
 8000748:	2b02      	cmp	r3, #2
 800074a:	d006      	beq.n	800075a <OS_SVC_SET+0x22>
 800074c:	2b00      	cmp	r3, #0
 800074e:	d000      	beq.n	8000752 <OS_SVC_SET+0x1a>
		break;
	case SVC_Wating_task:
		__asm("SVC #0x02");//wating
		break;
	}
}
 8000750:	e005      	b.n	800075e <OS_SVC_SET+0x26>
		__asm("SVC #0x0");//ACTIVAT
 8000752:	df00      	svc	0
		break;
 8000754:	e003      	b.n	800075e <OS_SVC_SET+0x26>
		__asm("SVC #0x01");//TERMINATE
 8000756:	df01      	svc	1
		break;
 8000758:	e001      	b.n	800075e <OS_SVC_SET+0x26>
		__asm("SVC #0x02");//wating
 800075a:	df02      	svc	2
		break;
 800075c:	bf00      	nop
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <OS_WHATE_NEXT>:
//=====================
void OS_WHATE_NEXT(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

	if((READY_QUEUE.count==0)&&(OS_CONTROL.CURENT_TASK->State==Suspend||OS_CONTROL.CURENT_TASK->State==Running)){
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <OS_WHATE_NEXT+0x98>)
 800076e:	899b      	ldrh	r3, [r3, #12]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d11b      	bne.n	80007ac <OS_WHATE_NEXT+0x44>
 8000774:	4b23      	ldr	r3, [pc, #140]	; (8000804 <OS_WHATE_NEXT+0x9c>)
 8000776:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800077a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800077e:	2b00      	cmp	r3, #0
 8000780:	d006      	beq.n	8000790 <OS_WHATE_NEXT+0x28>
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <OS_WHATE_NEXT+0x9c>)
 8000784:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000788:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800078c:	2b03      	cmp	r3, #3
 800078e:	d10d      	bne.n	80007ac <OS_WHATE_NEXT+0x44>
		OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK); //go to fifo
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <OS_WHATE_NEXT+0x9c>)
 8000792:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000796:	4619      	mov	r1, r3
 8000798:	4819      	ldr	r0, [pc, #100]	; (8000800 <OS_WHATE_NEXT+0x98>)
 800079a:	f7ff fdb4 	bl	8000306 <OS_FIFO_ENQUEUE>
		OS_CONTROL.NEXT_TASK=OS_CONTROL.CURENT_TASK;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <OS_WHATE_NEXT+0x9c>)
 80007a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <OS_WHATE_NEXT+0x9c>)
 80007a6:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		if((OS_CONTROL.CURENT_TASK->priority==OS_CONTROL.NEXT_TASK->priority)&&(OS_CONTROL.CURENT_TASK->State!=Suspend)){
			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK);
			OS_CONTROL.CURENT_TASK->State=Ready;
		}
	}
}
 80007aa:	e027      	b.n	80007fc <OS_WHATE_NEXT+0x94>
		OS_FIFO_DEQUEUE(&READY_QUEUE,&OS_CONTROL.NEXT_TASK);
 80007ac:	4916      	ldr	r1, [pc, #88]	; (8000808 <OS_WHATE_NEXT+0xa0>)
 80007ae:	4814      	ldr	r0, [pc, #80]	; (8000800 <OS_WHATE_NEXT+0x98>)
 80007b0:	f7ff fdec 	bl	800038c <OS_FIFO_DEQUEUE>
		OS_CONTROL.NEXT_TASK->State=Running;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <OS_WHATE_NEXT+0x9c>)
 80007b6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007ba:	2203      	movs	r2, #3
 80007bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		if((OS_CONTROL.CURENT_TASK->priority==OS_CONTROL.NEXT_TASK->priority)&&(OS_CONTROL.CURENT_TASK->State!=Suspend)){
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <OS_WHATE_NEXT+0x9c>)
 80007c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007c6:	791a      	ldrb	r2, [r3, #4]
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <OS_WHATE_NEXT+0x9c>)
 80007ca:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d113      	bne.n	80007fc <OS_WHATE_NEXT+0x94>
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <OS_WHATE_NEXT+0x9c>)
 80007d6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007da:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00c      	beq.n	80007fc <OS_WHATE_NEXT+0x94>
			OS_FIFO_ENQUEUE(&READY_QUEUE, OS_CONTROL.CURENT_TASK);
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <OS_WHATE_NEXT+0x9c>)
 80007e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007e8:	4619      	mov	r1, r3
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <OS_WHATE_NEXT+0x98>)
 80007ec:	f7ff fd8b 	bl	8000306 <OS_FIFO_ENQUEUE>
			OS_CONTROL.CURENT_TASK->State=Ready;
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <OS_WHATE_NEXT+0x9c>)
 80007f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007f6:	2202      	movs	r2, #2
 80007f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200003c0 	.word	0x200003c0
 8000804:	200001e4 	.word	0x200001e4
 8000808:	20000388 	.word	0x20000388

0800080c <OS_SVC_SERVICES>:
//======================
void OS_SVC_SERVICES(int* STACK_FRAM_POINTER){
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	uint8_t SVC_NUM;
	__asm(   "LDR r0,[r0,#24]\n\t"
 8000814:	6980      	ldr	r0, [r0, #24]
 8000816:	f810 0c02 	ldrb.w	r0, [r0, #-2]
 800081a:	4603      	mov	r3, r0
 800081c:	73fb      	strb	r3, [r7, #15]
			"LDRB r0,[r0,#-2]\n\t"
			"MOV %0,r0"
			:"=r"(SVC_NUM));
	//SVC_NUM=*((unsigned char*)(((unsigned char*)STACK_FRAM_POINTER[6])-2));
	switch(SVC_NUM){
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db1f      	blt.n	8000864 <OS_SVC_SERVICES+0x58>
 8000824:	2b01      	cmp	r3, #1
 8000826:	dd02      	ble.n	800082e <OS_SVC_SERVICES+0x22>
 8000828:	2b02      	cmp	r3, #2
 800082a:	d017      	beq.n	800085c <OS_SVC_SERVICES+0x50>
		break;

	}


}
 800082c:	e01a      	b.n	8000864 <OS_SVC_SERVICES+0x58>
		ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES();//init to know the next task
 800082e:	f7ff ff2b 	bl	8000688 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>
		if(OS_CONTROL.OS_MODE==OS_Running){
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <OS_SVC_SERVICES+0x60>)
 8000834:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000838:	2b01      	cmp	r3, #1
 800083a:	d112      	bne.n	8000862 <OS_SVC_SERVICES+0x56>
			if(strcmp(OS_CONTROL.CURENT_TASK->NAME,"idle task")!=0){
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <OS_SVC_SERVICES+0x60>)
 800083e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000842:	3318      	adds	r3, #24
 8000844:	490a      	ldr	r1, [pc, #40]	; (8000870 <OS_SVC_SERVICES+0x64>)
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fc92 	bl	8000170 <strcmp>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d007      	beq.n	8000862 <OS_SVC_SERVICES+0x56>
				OS_WHATE_NEXT();//to know the next task
 8000852:	f7ff ff89 	bl	8000768 <OS_WHATE_NEXT>
				OS_TRIGDER_PENDSV();//to make context switching
 8000856:	f7ff fd1d 	bl	8000294 <OS_TRIGDER_PENDSV>
		break;
 800085a:	e002      	b.n	8000862 <OS_SVC_SERVICES+0x56>
		ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES();//init to know the next task
 800085c:	f7ff ff14 	bl	8000688 <ALSHREIF_RTOS_UPDATE_SCEDULER_TABLES>
		break;
 8000860:	e000      	b.n	8000864 <OS_SVC_SERVICES+0x58>
		break;
 8000862:	bf00      	nop
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200001e4 	.word	0x200001e4
 8000870:	08001c5c 	.word	0x08001c5c

08000874 <PendSV_Handler>:
	 * R2
	 * R1
	 * R0
	 * >>>>PSP current because it comes from thread mode
	 */
	OS_get_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT);//PSP-->_PSP_STACK_CURENT
 8000874:	4b6f      	ldr	r3, [pc, #444]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000876:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800087a:	f3ef 8009 	mrs	r0, PSP
 800087e:	4602      	mov	r2, r0
 8000880:	615a      	str	r2, [r3, #20]
	 * */
	//context SAVE
	//	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT -= 8;
	//	__asm volatile("stmia %0!, {r4-r11}" : : "r" (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT));

	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT--;
 8000882:	4b6c      	ldr	r3, [pc, #432]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000884:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000888:	695a      	ldr	r2, [r3, #20]
 800088a:	3a04      	subs	r2, #4
 800088c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r4 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 800088e:	4b69      	ldr	r3, [pc, #420]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000890:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	4622      	mov	r2, r4
 8000898:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 800089a:	4b66      	ldr	r3, [pc, #408]	; (8000a34 <PendSV_Handler+0x1c0>)
 800089c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008a0:	695a      	ldr	r2, [r3, #20]
 80008a2:	3a04      	subs	r2, #4
 80008a4:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r5 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80008a6:	4b63      	ldr	r3, [pc, #396]	; (8000a34 <PendSV_Handler+0x1c0>)
 80008a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	462a      	mov	r2, r5
 80008b0:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 80008b2:	4b60      	ldr	r3, [pc, #384]	; (8000a34 <PendSV_Handler+0x1c0>)
 80008b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	3a04      	subs	r2, #4
 80008bc:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r6 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80008be:	4b5d      	ldr	r3, [pc, #372]	; (8000a34 <PendSV_Handler+0x1c0>)
 80008c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4632      	mov	r2, r6
 80008c8:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 80008ca:	4b5a      	ldr	r3, [pc, #360]	; (8000a34 <PendSV_Handler+0x1c0>)
 80008cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008d0:	695a      	ldr	r2, [r3, #20]
 80008d2:	3a04      	subs	r2, #4
 80008d4:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r7 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80008d6:	4b57      	ldr	r3, [pc, #348]	; (8000a34 <PendSV_Handler+0x1c0>)
 80008d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	463a      	mov	r2, r7
 80008e0:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 80008e2:	4b54      	ldr	r3, [pc, #336]	; (8000a34 <PendSV_Handler+0x1c0>)
 80008e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	3a04      	subs	r2, #4
 80008ec:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r8 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80008ee:	4b51      	ldr	r3, [pc, #324]	; (8000a34 <PendSV_Handler+0x1c0>)
 80008f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4642      	mov	r2, r8
 80008f8:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 80008fa:	4b4e      	ldr	r3, [pc, #312]	; (8000a34 <PendSV_Handler+0x1c0>)
 80008fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000900:	695a      	ldr	r2, [r3, #20]
 8000902:	3a04      	subs	r2, #4
 8000904:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r9 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 8000906:	4b4b      	ldr	r3, [pc, #300]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000908:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	464a      	mov	r2, r9
 8000910:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 8000912:	4b48      	ldr	r3, [pc, #288]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000914:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000918:	695a      	ldr	r2, [r3, #20]
 800091a:	3a04      	subs	r2, #4
 800091c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r10 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 800091e:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000920:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4652      	mov	r2, sl
 8000928:	601a      	str	r2, [r3, #0]
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT-- ;
 800092a:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <PendSV_Handler+0x1c0>)
 800092c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000930:	695a      	ldr	r2, [r3, #20]
 8000932:	3a04      	subs	r2, #4
 8000934:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r11 " : "=r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 8000936:	4b3f      	ldr	r3, [pc, #252]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000938:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	465a      	mov	r2, fp
 8000940:	601a      	str	r2, [r3, #0]

	// now (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT) will save this address to the next execute of this task
	//and it will enter to make BACK context switching in the next call back :)

	//@context tasks
	if (OS_CONTROL.NEXT_TASK != NULL){
 8000942:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000944:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000948:	2b00      	cmp	r3, #0
 800094a:	d009      	beq.n	8000960 <PendSV_Handler+0xec>
		OS_CONTROL.CURENT_TASK = OS_CONTROL.NEXT_TASK;
 800094c:	4b39      	ldr	r3, [pc, #228]	; (8000a34 <PendSV_Handler+0x1c0>)
 800094e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000952:	4a38      	ldr	r2, [pc, #224]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000954:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_CONTROL.NEXT_TASK = NULL ;
 8000958:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <PendSV_Handler+0x1c0>)
 800095a:	2200      	movs	r2, #0
 800095c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	 * r11
	 * */
	//	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT += 8;
	//	__asm volatile("ldmia %0!, {r4-r11}" : : "r" (OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT));

	__asm volatile("mov r11,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT)) );//it stored from the last context :) @context tasks
 8000960:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000962:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	469b      	mov	fp, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 800096c:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <PendSV_Handler+0x1c0>)
 800096e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	3204      	adds	r2, #4
 8000976:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r10,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT)) );
 8000978:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <PendSV_Handler+0x1c0>)
 800097a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	469a      	mov	sl, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000986:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	3204      	adds	r2, #4
 800098e:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r9,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000992:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4699      	mov	r9, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <PendSV_Handler+0x1c0>)
 800099e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	3204      	adds	r2, #4
 80009a6:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r8,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <PendSV_Handler+0x1c0>)
 80009aa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4698      	mov	r8, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <PendSV_Handler+0x1c0>)
 80009b6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009ba:	695a      	ldr	r2, [r3, #20]
 80009bc:	3204      	adds	r2, #4
 80009be:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r7,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <PendSV_Handler+0x1c0>)
 80009c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	461f      	mov	r7, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <PendSV_Handler+0x1c0>)
 80009ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	3204      	adds	r2, #4
 80009d6:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r6,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <PendSV_Handler+0x1c0>)
 80009da:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	461e      	mov	r6, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <PendSV_Handler+0x1c0>)
 80009e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	3204      	adds	r2, #4
 80009ee:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r5,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <PendSV_Handler+0x1c0>)
 80009f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	461d      	mov	r5, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <PendSV_Handler+0x1c0>)
 80009fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a02:	695a      	ldr	r2, [r3, #20]
 8000a04:	3204      	adds	r2, #4
 8000a06:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r4,%0 " : : "r" (*(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT))  );
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000a0a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	461c      	mov	r4, r3
	OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT++ ;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000a16:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a1a:	695a      	ldr	r2, [r3, #20]
 8000a1c:	3204      	adds	r2, #4
 8000a1e:	615a      	str	r2, [r3, #20]
	 * R2
	 * R1
	 * R0
	 * >>>>PSP current because it comes from thread mode
	 */
	OS_set_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_CURENT);//we but the PSP with current psp to force the cpu making this task context
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <PendSV_Handler+0x1c0>)
 8000a22:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");//make cpu context back
 8000a2e:	4770      	bx	lr
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	200001e4 	.word	0x200001e4

08000a38 <ALSHREIF_RTOS_ACTIVAT_TASK>:

//========================================================================================================



void ALSHREIF_RTOS_ACTIVAT_TASK(TASK_FRAME_t* CURENT_TASK,TASK_FRAME_t* TASK){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	if(CURENT_TASK!=NULL){
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <ALSHREIF_RTOS_ACTIVAT_TASK+0x18>
		CURENT_TASK->State=Wating;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	}
	TASK->State=Wating;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	2201      	movs	r2, #1
 8000a54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	OS_SVC_SET(SVC_ACTIVAT_task);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fe6d 	bl	8000738 <OS_SVC_SET>

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <ALSHREIF_RTOS_TERMINAT_TASK>:
void ALSHREIF_RTOS_TERMINAT_TASK(TASK_FRAME_t* TASK){
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
	TASK->State=Suspend;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	OS_SVC_SET(SVC_TERMINATE_task);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff fe5e 	bl	8000738 <OS_SVC_SET>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <ALSHREIF_RTOS_START_OS>:


//========================================================================================================

void ALSHREIF_RTOS_START_OS(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	OS_CONTROL.OS_MODE=OS_Running;//mode
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <ALSHREIF_RTOS_START_OS+0x54>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	OS_CONTROL.CURENT_TASK=&IDLE_TASK;//set current task
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <ALSHREIF_RTOS_START_OS+0x54>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <ALSHREIF_RTOS_START_OS+0x58>)
 8000a94:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	ALSHREIF_RTOS_ACTIVAT_TASK(NULL,&IDLE_TASK);//activate idle task
 8000a98:	4910      	ldr	r1, [pc, #64]	; (8000adc <ALSHREIF_RTOS_START_OS+0x58>)
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff ffcc 	bl	8000a38 <ALSHREIF_RTOS_ACTIVAT_TASK>
	TIMER_START();//set timer every one m second
 8000aa0:	f7ff fc06 	bl	80002b0 <TIMER_START>
	OS_set_PSP_stack(OS_CONTROL.CURENT_TASK->_PSP_STACK_TOP);
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <ALSHREIF_RTOS_START_OS+0x54>)
 8000aa6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f380 8809 	msr	PSP, r0
	OS_SP2_PSP;
 8000ab2:	f3ef 8014 	mrs	r0, CONTROL
 8000ab6:	f040 0002 	orr.w	r0, r0, #2
 8000aba:	f380 8814 	msr	CONTROL, r0
	OS_CHANGE_CPU_UNPRIVILDEG;
 8000abe:	f3ef 8314 	mrs	r3, CONTROL
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	f383 8814 	msr	CONTROL, r3

	OS_CONTROL.CURENT_TASK->TASK_FUNCTION();
 8000aca:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <ALSHREIF_RTOS_START_OS+0x54>)
 8000acc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	4798      	blx	r3
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200001e4 	.word	0x200001e4
 8000adc:	20000390 	.word	0x20000390

08000ae0 <ALSHREIF_RTOS_WAITING_TIMING>:
uint8_t T_SYStick=0;
//========================================================================================================
void ALSHREIF_RTOS_WAITING_TIMING(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

	for(int i=0;i<OS_CONTROL.NUMBER_OF_TASKS;i++){
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	e02d      	b.n	8000b48 <ALSHREIF_RTOS_WAITING_TIMING+0x68>
		if(OS_CONTROL.OS_TASKS[i]->State==Suspend){
 8000aec:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d122      	bne.n	8000b42 <ALSHREIF_RTOS_WAITING_TIMING+0x62>
			if(OS_CONTROL.OS_TASKS[i]->wating_time.blocking==enable){
 8000afc:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d11a      	bne.n	8000b42 <ALSHREIF_RTOS_WAITING_TIMING+0x62>

				//@ref_sheck_time
				if((--OS_CONTROL.OS_TASKS[i]->wating_time.TICKS)==0){
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b16:	3a01      	subs	r2, #1
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d110      	bne.n	8000b42 <ALSHREIF_RTOS_WAITING_TIMING+0x62>
					OS_CONTROL.OS_TASKS[i]->wating_time.blocking=disable;
 8000b20:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					OS_CONTROL.OS_TASKS[i]->State=Wating;
 8000b2e:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b36:	2201      	movs	r2, #1
 8000b38:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

					OS_SVC_SET(SVC_Wating_task);
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	f7ff fdfb 	bl	8000738 <OS_SVC_SET>
	for(int i=0;i<OS_CONTROL.NUMBER_OF_TASKS;i++){
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3301      	adds	r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <ALSHREIF_RTOS_WAITING_TIMING+0x80>)
 8000b4a:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000b4e:	461a      	mov	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4293      	cmp	r3, r2
 8000b54:	dbca      	blt.n	8000aec <ALSHREIF_RTOS_WAITING_TIMING+0xc>
				}
			}
		}
	}
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200001e4 	.word	0x200001e4

08000b64 <SysTick_Handler>:
//========================================================================================================

void SysTick_Handler(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	OS_WHATE_NEXT();//to know the next task
 8000b68:	f7ff fdfe 	bl	8000768 <OS_WHATE_NEXT>
	//=====
	OS_TRIGDER_PENDSV();//to make context switching
 8000b6c:	f7ff fb92 	bl	8000294 <OS_TRIGDER_PENDSV>

	ALSHREIF_RTOS_WAITING_TIMING();
 8000b70:	f7ff ffb6 	bl	8000ae0 <ALSHREIF_RTOS_WAITING_TIMING>

	T_SYStick^=1;
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SysTick_Handler+0x24>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	f083 0301 	eor.w	r3, r3, #1
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <SysTick_Handler+0x24>)
 8000b80:	701a      	strb	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000003d 	.word	0x2000003d

08000b8c <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <getposition+0x14>
		rval =0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d101      	bne.n	8000baa <getposition+0x1e>
		rval =4;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d101      	bne.n	8000bb4 <getposition+0x28>
		rval =8;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d101      	bne.n	8000bbe <getposition+0x32>
		rval =12;
 8000bba:	230c      	movs	r3, #12
 8000bbc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d101      	bne.n	8000bc8 <getposition+0x3c>
		rval =16;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	2b05      	cmp	r3, #5
 8000bcc:	d101      	bne.n	8000bd2 <getposition+0x46>
		rval =20;
 8000bce:	2314      	movs	r3, #20
 8000bd0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	2b06      	cmp	r3, #6
 8000bd6:	d101      	bne.n	8000bdc <getposition+0x50>
		rval =24;
 8000bd8:	2318      	movs	r3, #24
 8000bda:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	d101      	bne.n	8000be6 <getposition+0x5a>
		rval =28;
 8000be2:	231c      	movs	r3, #28
 8000be4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d101      	bne.n	8000bf0 <getposition+0x64>
		rval =0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	2b09      	cmp	r3, #9
 8000bf4:	d101      	bne.n	8000bfa <getposition+0x6e>
		rval =4;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	2b0a      	cmp	r3, #10
 8000bfe:	d101      	bne.n	8000c04 <getposition+0x78>
		rval =8;
 8000c00:	2308      	movs	r3, #8
 8000c02:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	2b0b      	cmp	r3, #11
 8000c08:	d101      	bne.n	8000c0e <getposition+0x82>
		rval =12;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	2b0c      	cmp	r3, #12
 8000c12:	d101      	bne.n	8000c18 <getposition+0x8c>
		rval =16;
 8000c14:	2310      	movs	r3, #16
 8000c16:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	2b0d      	cmp	r3, #13
 8000c1c:	d101      	bne.n	8000c22 <getposition+0x96>
		rval =20;
 8000c1e:	2314      	movs	r3, #20
 8000c20:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	2b0e      	cmp	r3, #14
 8000c26:	d101      	bne.n	8000c2c <getposition+0xa0>
		rval =24;
 8000c28:	2318      	movs	r3, #24
 8000c2a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	2b0f      	cmp	r3, #15
 8000c30:	d101      	bne.n	8000c36 <getposition+0xaa>
		rval =28;
 8000c32:	231c      	movs	r3, #28
 8000c34:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000c36:	7bfb      	ldrb	r3, [r7, #15]


}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
	...

08000c44 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4a69      	ldr	r2, [pc, #420]	; (8000dfc <pinmode+0x1b8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d106      	bne.n	8000c68 <pinmode+0x24>
		GPIOA_Clock_Enable();
 8000c5a:	4b69      	ldr	r3, [pc, #420]	; (8000e00 <pinmode+0x1bc>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	4a68      	ldr	r2, [pc, #416]	; (8000e00 <pinmode+0x1bc>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6193      	str	r3, [r2, #24]
 8000c66:	e010      	b.n	8000c8a <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4a66      	ldr	r2, [pc, #408]	; (8000e04 <pinmode+0x1c0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d106      	bne.n	8000c7e <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8000c70:	4b63      	ldr	r3, [pc, #396]	; (8000e00 <pinmode+0x1bc>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a62      	ldr	r2, [pc, #392]	; (8000e00 <pinmode+0x1bc>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	e005      	b.n	8000c8a <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 8000c7e:	4b60      	ldr	r3, [pc, #384]	; (8000e00 <pinmode+0x1bc>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	4a5f      	ldr	r2, [pc, #380]	; (8000e00 <pinmode+0x1bc>)
 8000c84:	f043 0310 	orr.w	r3, r3, #16
 8000c88:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8000c8a:	897b      	ldrh	r3, [r7, #10]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	d856      	bhi.n	8000d3e <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 8000c90:	897b      	ldrh	r3, [r7, #10]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff7a 	bl	8000b8c <getposition>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	4093      	lsls	r3, r2
 8000ca0:	43da      	mvns	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b08      	cmp	r3, #8
 8000cb0:	d002      	beq.n	8000cb8 <pinmode+0x74>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b18      	cmp	r3, #24
 8000cb6:	d133      	bne.n	8000d20 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b18      	cmp	r3, #24
 8000cbc:	d117      	bne.n	8000cee <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000cbe:	897b      	ldrh	r3, [r7, #10]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff63 	bl	8000b8c <getposition>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	2308      	movs	r3, #8
 8000ccc:	fa03 f202 	lsl.w	r2, r3, r2
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	897a      	ldrh	r2, [r7, #10]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000cec:	e081      	b.n	8000df2 <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000cee:	897b      	ldrh	r3, [r7, #10]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff4b 	bl	8000b8c <getposition>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	fa03 f202 	lsl.w	r2, r3, r2
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	431a      	orrs	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	897a      	ldrh	r2, [r7, #10]
 8000d10:	2101      	movs	r1, #1
 8000d12:	fa01 f202 	lsl.w	r2, r1, r2
 8000d16:	43d2      	mvns	r2, r2
 8000d18:	401a      	ands	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000d1e:	e068      	b.n	8000df2 <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 8000d20:	897b      	ldrh	r3, [r7, #10]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff32 	bl	8000b8c <getposition>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	fa03 f202 	lsl.w	r2, r3, r2
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	431a      	orrs	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	601a      	str	r2, [r3, #0]

	}



}
 8000d3c:	e059      	b.n	8000df2 <pinmode+0x1ae>
	else if(pin>7){
 8000d3e:	897b      	ldrh	r3, [r7, #10]
 8000d40:	2b07      	cmp	r3, #7
 8000d42:	d956      	bls.n	8000df2 <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 8000d44:	897b      	ldrh	r3, [r7, #10]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff20 	bl	8000b8c <getposition>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	230f      	movs	r3, #15
 8000d52:	4093      	lsls	r3, r2
 8000d54:	43da      	mvns	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b08      	cmp	r3, #8
 8000d64:	d002      	beq.n	8000d6c <pinmode+0x128>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b18      	cmp	r3, #24
 8000d6a:	d133      	bne.n	8000dd4 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b18      	cmp	r3, #24
 8000d70:	d117      	bne.n	8000da2 <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000d72:	897b      	ldrh	r3, [r7, #10]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff09 	bl	8000b8c <getposition>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	2308      	movs	r3, #8
 8000d80:	fa03 f202 	lsl.w	r2, r3, r2
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	897a      	ldrh	r2, [r7, #10]
 8000d94:	2101      	movs	r1, #1
 8000d96:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000da0:	e027      	b.n	8000df2 <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000da2:	897b      	ldrh	r3, [r7, #10]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fef1 	bl	8000b8c <getposition>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	2308      	movs	r3, #8
 8000db0:	fa03 f202 	lsl.w	r2, r3, r2
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	897a      	ldrh	r2, [r7, #10]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	43d2      	mvns	r2, r2
 8000dcc:	401a      	ands	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000dd2:	e00e      	b.n	8000df2 <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8000dd4:	897b      	ldrh	r3, [r7, #10]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fed8 	bl	8000b8c <getposition>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	fa03 f202 	lsl.w	r2, r3, r2
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	431a      	orrs	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	605a      	str	r2, [r3, #4]
}
 8000df0:	e7ff      	b.n	8000df2 <pinmode+0x1ae>
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <TogglePin>:
uint16_t READ_PORT(GPIO_typeDef* GPIOx){

	return GPIOx->GPIOx_IDR;
}

void TogglePin(GPIO_typeDef* GPIOx, uint16_t pin){
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIOx_ODR ^=(1<<pin);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	887a      	ldrh	r2, [r7, #2]
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e20:	405a      	eors	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60da      	str	r2, [r3, #12]
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 8000e3e:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0201 	bic.w	r2, r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d12f      	bne.n	8000eb4 <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	699a      	ldr	r2, [r3, #24]
 8000e5a:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e62:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	699a      	ldr	r2, [r3, #24]
 8000e6a:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000e72:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	699a      	ldr	r2, [r3, #24]
 8000e7a:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0208 	orr.w	r2, r2, #8
 8000e82:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8000e84:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	699a      	ldr	r2, [r3, #24]
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000e92:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6a1a      	ldr	r2, [r3, #32]
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0210 	orr.w	r2, r2, #16
 8000ea2:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6a1a      	ldr	r2, [r3, #32]
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0201 	orr.w	r2, r2, #1
 8000eb2:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ec2:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ef2:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0201 	orr.w	r2, r2, #1
 8000f02:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SPWM_timer_INIT+0x100>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000000 	.word	0x20000000

08000f34 <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <TIM2_IRQHandler+0x34>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	691a      	ldr	r2, [r3, #16]
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <TIM2_IRQHandler+0x34>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <TIM2_IRQHandler+0x38>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <TIM2_IRQHandler+0x34>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <TIM2_IRQHandler+0x34>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0201 	bic.w	r2, r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]

}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2000001c 	.word	0x2000001c
 8000f6c:	20000018 	.word	0x20000018

08000f70 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin10,LOW);
	ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <TIM3_IRQHandler+0x30>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <TIM3_IRQHandler+0x30>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0201 	bic.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
	ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <TIM3_IRQHandler+0x30>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <TIM3_IRQHandler+0x30>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0201 	bic.w	r2, r2, #1
 8000f92:	611a      	str	r2, [r3, #16]
	ISRcalback[0]();
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <TIM3_IRQHandler+0x34>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4798      	blx	r3
	//NVIC_TIM3_global_interrupt_Disable;
	//pinwrite(GPIOB, pin10,HIGH);
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200003dc 	.word	0x200003dc
 8000fa4:	200003d0 	.word	0x200003d0

08000fa8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <TIM4_IRQHandler+0x24>)
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <TIM4_IRQHandler+0x24>)
 8000fb2:	f023 0301 	bic.w	r3, r3, #1
 8000fb6:	6113      	str	r3, [r2, #16]
	overflowtims++;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <TIM4_IRQHandler+0x28>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <TIM4_IRQHandler+0x28>)
 8000fc2:	801a      	strh	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	40000800 	.word	0x40000800
 8000fd0:	20000040 	.word	0x20000040

08000fd4 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 8000fd8:	4b5d      	ldr	r3, [pc, #372]	; (8001150 <TIM1_UP_IRQHandler+0x17c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b5d      	ldr	r3, [pc, #372]	; (8001154 <TIM1_UP_IRQHandler+0x180>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d911      	bls.n	8001008 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 8000fe4:	4b5c      	ldr	r3, [pc, #368]	; (8001158 <TIM1_UP_IRQHandler+0x184>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
		flage1=0;
 8000fea:	4b5c      	ldr	r3, [pc, #368]	; (800115c <TIM1_UP_IRQHandler+0x188>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 8000ff0:	4b58      	ldr	r3, [pc, #352]	; (8001154 <TIM1_UP_IRQHandler+0x180>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a5a      	ldr	r2, [pc, #360]	; (8001160 <TIM1_UP_IRQHandler+0x18c>)
 8000ff6:	7812      	ldrb	r2, [r2, #0]
 8000ff8:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ffc:	4b55      	ldr	r3, [pc, #340]	; (8001154 <TIM1_UP_IRQHandler+0x180>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4413      	add	r3, r2
 8001002:	4a53      	ldr	r2, [pc, #332]	; (8001150 <TIM1_UP_IRQHandler+0x17c>)
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e018      	b.n	800103a <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 8001008:	4b51      	ldr	r3, [pc, #324]	; (8001150 <TIM1_UP_IRQHandler+0x17c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b63      	cmp	r3, #99	; 0x63
 800100e:	d814      	bhi.n	800103a <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 8001010:	4b51      	ldr	r3, [pc, #324]	; (8001158 <TIM1_UP_IRQHandler+0x184>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
		flage1=1;
 8001016:	4b51      	ldr	r3, [pc, #324]	; (800115c <TIM1_UP_IRQHandler+0x188>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 800101c:	4b51      	ldr	r3, [pc, #324]	; (8001164 <TIM1_UP_IRQHandler+0x190>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	f083 0301 	eor.w	r3, r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b4f      	ldr	r3, [pc, #316]	; (8001164 <TIM1_UP_IRQHandler+0x190>)
 8001028:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 800102a:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <TIM1_UP_IRQHandler+0x180>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <TIM1_UP_IRQHandler+0x18c>)
 8001030:	7812      	ldrb	r2, [r2, #0]
 8001032:	fbb3 f3f2 	udiv	r3, r3, r2
 8001036:	4a46      	ldr	r2, [pc, #280]	; (8001150 <TIM1_UP_IRQHandler+0x17c>)
 8001038:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <TIM1_UP_IRQHandler+0x190>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d110      	bne.n	8001064 <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 8001042:	4b49      	ldr	r3, [pc, #292]	; (8001168 <TIM1_UP_IRQHandler+0x194>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6a1a      	ldr	r2, [r3, #32]
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <TIM1_UP_IRQHandler+0x194>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0201 	bic.w	r2, r2, #1
 8001050:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 8001052:	4b45      	ldr	r3, [pc, #276]	; (8001168 <TIM1_UP_IRQHandler+0x194>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a1a      	ldr	r2, [r3, #32]
 8001058:	4b43      	ldr	r3, [pc, #268]	; (8001168 <TIM1_UP_IRQHandler+0x194>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 0210 	orr.w	r2, r2, #16
 8001060:	621a      	str	r2, [r3, #32]
 8001062:	e013      	b.n	800108c <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 8001064:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <TIM1_UP_IRQHandler+0x190>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10f      	bne.n	800108c <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 800106c:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <TIM1_UP_IRQHandler+0x194>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6a1a      	ldr	r2, [r3, #32]
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <TIM1_UP_IRQHandler+0x194>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0210 	bic.w	r2, r2, #16
 800107a:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 800107c:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <TIM1_UP_IRQHandler+0x194>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6a1a      	ldr	r2, [r3, #32]
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <TIM1_UP_IRQHandler+0x194>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0201 	orr.w	r2, r2, #1
 800108a:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 800108c:	4b33      	ldr	r3, [pc, #204]	; (800115c <TIM1_UP_IRQHandler+0x188>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d11c      	bne.n	80010ce <TIM1_UP_IRQHandler+0xfa>
 8001094:	4b30      	ldr	r3, [pc, #192]	; (8001158 <TIM1_UP_IRQHandler+0x184>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d118      	bne.n	80010ce <TIM1_UP_IRQHandler+0xfa>
		top=c;
 800109c:	4b33      	ldr	r3, [pc, #204]	; (800116c <TIM1_UP_IRQHandler+0x198>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <TIM1_UP_IRQHandler+0x180>)
 80010a2:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <TIM1_UP_IRQHandler+0x19c>)
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <TIM1_UP_IRQHandler+0x17c>)
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <TIM1_UP_IRQHandler+0x180>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	f7ff febd 	bl	8000e30 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <TIM1_UP_IRQHandler+0x180>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a29      	ldr	r2, [pc, #164]	; (8001160 <TIM1_UP_IRQHandler+0x18c>)
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	fbb3 f2f2 	udiv	r2, r3, r2
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <TIM1_UP_IRQHandler+0x17c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a21      	ldr	r2, [pc, #132]	; (8001150 <TIM1_UP_IRQHandler+0x17c>)
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e035      	b.n	800113a <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <TIM1_UP_IRQHandler+0x184>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d129      	bne.n	800112a <TIM1_UP_IRQHandler+0x156>
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <TIM1_UP_IRQHandler+0x188>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d125      	bne.n	800112a <TIM1_UP_IRQHandler+0x156>
		top=c;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <TIM1_UP_IRQHandler+0x198>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <TIM1_UP_IRQHandler+0x180>)
 80010e4:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <TIM1_UP_IRQHandler+0x17c>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <TIM1_UP_IRQHandler+0x180>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	491c      	ldr	r1, [pc, #112]	; (8001160 <TIM1_UP_IRQHandler+0x18c>)
 80010f0:	7809      	ldrb	r1, [r1, #0]
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	4a15      	ldr	r2, [pc, #84]	; (8001150 <TIM1_UP_IRQHandler+0x17c>)
 80010fa:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <TIM1_UP_IRQHandler+0x19c>)
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <TIM1_UP_IRQHandler+0x17c>)
 8001102:	6819      	ldr	r1, [r3, #0]
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <TIM1_UP_IRQHandler+0x180>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	f7ff fe91 	bl	8000e30 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <TIM1_UP_IRQHandler+0x180>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a13      	ldr	r2, [pc, #76]	; (8001160 <TIM1_UP_IRQHandler+0x18c>)
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	fbb3 f2f2 	udiv	r2, r3, r2
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <TIM1_UP_IRQHandler+0x17c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d10b      	bne.n	800113a <TIM1_UP_IRQHandler+0x166>
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <TIM1_UP_IRQHandler+0x17c>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e007      	b.n	800113a <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <TIM1_UP_IRQHandler+0x194>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <TIM1_UP_IRQHandler+0x194>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0201 	bic.w	r2, r2, #1
 8001138:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <TIM1_UP_IRQHandler+0x194>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <TIM1_UP_IRQHandler+0x194>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 0201 	bic.w	r2, r2, #1
 8001148:	611a      	str	r2, [r3, #16]
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000014 	.word	0x20000014
 8001154:	20000008 	.word	0x20000008
 8001158:	2000003e 	.word	0x2000003e
 800115c:	20000004 	.word	0x20000004
 8001160:	200003d8 	.word	0x200003d8
 8001164:	20000005 	.word	0x20000005
 8001168:	20000000 	.word	0x20000000
 800116c:	20000010 	.word	0x20000010
 8001170:	2000000c 	.word	0x2000000c

08001174 <MCAL_speed_init>:
 *      Author: mo
 */

#include "stm32_speed_DRIVER.h"

void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	460a      	mov	r2, r1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	4613      	mov	r3, r2
 8001182:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d139      	bne.n	80011fe <MCAL_speed_init+0x8a>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d175      	bne.n	800127c <MCAL_speed_init+0x108>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 8001190:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <MCAL_speed_init+0x114>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4a3c      	ldr	r2, [pc, #240]	; (8001288 <MCAL_speed_init+0x114>)
 8001196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119a:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 800119c:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <MCAL_speed_init+0x114>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4a39      	ldr	r2, [pc, #228]	; (8001288 <MCAL_speed_init+0x114>)
 80011a2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80011a6:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 80011a8:	4b37      	ldr	r3, [pc, #220]	; (8001288 <MCAL_speed_init+0x114>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4a36      	ldr	r2, [pc, #216]	; (8001288 <MCAL_speed_init+0x114>)
 80011ae:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80011b2:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 80011b4:	4b34      	ldr	r3, [pc, #208]	; (8001288 <MCAL_speed_init+0x114>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a33      	ldr	r2, [pc, #204]	; (8001288 <MCAL_speed_init+0x114>)
 80011ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011be:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 80011c0:	4b31      	ldr	r3, [pc, #196]	; (8001288 <MCAL_speed_init+0x114>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4a30      	ldr	r2, [pc, #192]	; (8001288 <MCAL_speed_init+0x114>)
 80011c6:	f023 0303 	bic.w	r3, r3, #3
 80011ca:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 80011cc:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <MCAL_speed_init+0x114>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4a2d      	ldr	r2, [pc, #180]	; (8001288 <MCAL_speed_init+0x114>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <MCAL_speed_init+0x114>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a2a      	ldr	r2, [pc, #168]	; (8001288 <MCAL_speed_init+0x114>)
 80011de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011e2:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <MCAL_speed_init+0x114>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a27      	ldr	r2, [pc, #156]	; (8001288 <MCAL_speed_init+0x114>)
 80011ea:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011ee:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 80011f0:	4b25      	ldr	r3, [pc, #148]	; (8001288 <MCAL_speed_init+0x114>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4a24      	ldr	r2, [pc, #144]	; (8001288 <MCAL_speed_init+0x114>)
 80011f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011fa:	6053      	str	r3, [r2, #4]

		}
	}


}
 80011fc:	e03e      	b.n	800127c <MCAL_speed_init+0x108>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	2b03      	cmp	r3, #3
 8001202:	d13b      	bne.n	800127c <MCAL_speed_init+0x108>
			RCC->RCC_CR &=~(1<<18);
 8001204:	4b20      	ldr	r3, [pc, #128]	; (8001288 <MCAL_speed_init+0x114>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <MCAL_speed_init+0x114>)
 800120a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120e:	6013      	str	r3, [r2, #0]
			RCC->RCC_CR|=(1<<16);
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MCAL_speed_init+0x114>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <MCAL_speed_init+0x114>)
 8001216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121a:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR|=(1<<16);
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MCAL_speed_init+0x114>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	4a19      	ldr	r2, [pc, #100]	; (8001288 <MCAL_speed_init+0x114>)
 8001222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001226:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MCAL_speed_init+0x114>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4a16      	ldr	r2, [pc, #88]	; (8001288 <MCAL_speed_init+0x114>)
 800122e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001232:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MCAL_speed_init+0x114>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a13      	ldr	r2, [pc, #76]	; (8001288 <MCAL_speed_init+0x114>)
 800123a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800123e:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MCAL_speed_init+0x114>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a10      	ldr	r2, [pc, #64]	; (8001288 <MCAL_speed_init+0x114>)
 8001246:	f023 0303 	bic.w	r3, r3, #3
 800124a:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MCAL_speed_init+0x114>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <MCAL_speed_init+0x114>)
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MCAL_speed_init+0x114>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <MCAL_speed_init+0x114>)
 800125e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001262:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MCAL_speed_init+0x114>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <MCAL_speed_init+0x114>)
 800126a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800126e:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <MCAL_speed_init+0x114>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <MCAL_speed_init+0x114>)
 8001276:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800127a:	6053      	str	r3, [r2, #4]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000

0800128c <EXTI0_IRQHandler>:
	Enable_NVIC(pin);
}



void EXTI0_IRQHandler(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <EXTI0_IRQHandler+0x1c>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <EXTI0_IRQHandler+0x1c>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <EXTI0_IRQHandler+0x20>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4798      	blx	r3
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40010400 	.word	0x40010400
 80012ac:	200003e0 	.word	0x200003e0

080012b0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <EXTI1_IRQHandler+0x1c>)
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <EXTI1_IRQHandler+0x1c>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <EXTI1_IRQHandler+0x20>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4798      	blx	r3

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40010400 	.word	0x40010400
 80012d0:	200003e0 	.word	0x200003e0

080012d4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <EXTI2_IRQHandler+0x1c>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <EXTI2_IRQHandler+0x1c>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <EXTI2_IRQHandler+0x20>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	4798      	blx	r3
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40010400 	.word	0x40010400
 80012f4:	200003e0 	.word	0x200003e0

080012f8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <EXTI3_IRQHandler+0x1c>)
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <EXTI3_IRQHandler+0x1c>)
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <EXTI3_IRQHandler+0x20>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4798      	blx	r3
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40010400 	.word	0x40010400
 8001318:	200003e0 	.word	0x200003e0

0800131c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <EXTI4_IRQHandler+0x1c>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <EXTI4_IRQHandler+0x1c>)
 8001326:	f043 0310 	orr.w	r3, r3, #16
 800132a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <EXTI4_IRQHandler+0x20>)
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	4798      	blx	r3
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40010400 	.word	0x40010400
 800133c:	200003e0 	.word	0x200003e0

08001340 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5]();  }
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	f003 0320 	and.w	r3, r3, #32
 800134c:	2b00      	cmp	r3, #0
 800134e:	d008      	beq.n	8001362 <EXTI9_5_IRQHandler+0x22>
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 8001356:	f043 0320 	orr.w	r3, r3, #32
 800135a:	6153      	str	r3, [r2, #20]
 800135c:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <EXTI9_5_IRQHandler+0xa4>)
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6]();  }
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800136a:	2b00      	cmp	r3, #0
 800136c:	d008      	beq.n	8001380 <EXTI9_5_IRQHandler+0x40>
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 8001374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001378:	6153      	str	r3, [r2, #20]
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <EXTI9_5_IRQHandler+0xa4>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7]();  }
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001388:	2b00      	cmp	r3, #0
 800138a:	d008      	beq.n	800139e <EXTI9_5_IRQHandler+0x5e>
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 8001392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001396:	6153      	str	r3, [r2, #20]
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <EXTI9_5_IRQHandler+0xa4>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8]();  }
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d008      	beq.n	80013bc <EXTI9_5_IRQHandler+0x7c>
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b4:	6153      	str	r3, [r2, #20]
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <EXTI9_5_IRQHandler+0xa4>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9]();  }
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <EXTI9_5_IRQHandler+0x9a>
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <EXTI9_5_IRQHandler+0xa0>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d2:	6153      	str	r3, [r2, #20]
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <EXTI9_5_IRQHandler+0xa4>)
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	4798      	blx	r3
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40010400 	.word	0x40010400
 80013e4:	200003e0 	.word	0x200003e0

080013e8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10]();  }
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d008      	beq.n	800140a <EXTI15_10_IRQHandler+0x22>
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	4a29      	ldr	r2, [pc, #164]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 80013fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001402:	6153      	str	r3, [r2, #20]
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <EXTI15_10_IRQHandler+0xc0>)
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11]();  }
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001412:	2b00      	cmp	r3, #0
 8001414:	d008      	beq.n	8001428 <EXTI15_10_IRQHandler+0x40>
 8001416:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 800141c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001420:	6153      	str	r3, [r2, #20]
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <EXTI15_10_IRQHandler+0xc0>)
 8001424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001426:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12]();  }
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <EXTI15_10_IRQHandler+0x5e>
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	4a1a      	ldr	r2, [pc, #104]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 800143a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800143e:	6153      	str	r3, [r2, #20]
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <EXTI15_10_IRQHandler+0xc0>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13]();  }
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d008      	beq.n	8001464 <EXTI15_10_IRQHandler+0x7c>
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 8001458:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <EXTI15_10_IRQHandler+0xc0>)
 8001460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001462:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14]();  }
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <EXTI15_10_IRQHandler+0x9a>
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 8001476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147a:	6153      	str	r3, [r2, #20]
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <EXTI15_10_IRQHandler+0xc0>)
 800147e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001480:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15]();  }
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <EXTI15_10_IRQHandler+0xb8>
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <EXTI15_10_IRQHandler+0xbc>)
 8001494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001498:	6153      	str	r3, [r2, #20]
 800149a:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <EXTI15_10_IRQHandler+0xc0>)
 800149c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149e:	4798      	blx	r3

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40010400 	.word	0x40010400
 80014a8:	200003e0 	.word	0x200003e0

080014ac <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	//slave only todo
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
	//slave only todo
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <USART_SEND>:
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );


}
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	0b1b      	lsrs	r3, r3, #12
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 80014e8:	e004      	b.n	80014f4 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	605a      	str	r2, [r3, #4]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
	...

08001500 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8001506:	4b56      	ldr	r3, [pc, #344]	; (8001660 <USART1_IRQHandler+0x160>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	09db      	lsrs	r3, r3, #7
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b01      	cmp	r3, #1
 8001514:	d122      	bne.n	800155c <USART1_IRQHandler+0x5c>
 8001516:	4b52      	ldr	r3, [pc, #328]	; (8001660 <USART1_IRQHandler+0x160>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	09db      	lsrs	r3, r3, #7
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b01      	cmp	r3, #1
 8001524:	d11a      	bne.n	800155c <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 8001526:	4b4f      	ldr	r3, [pc, #316]	; (8001664 <USART1_IRQHandler+0x164>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00d      	beq.n	800154c <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 8001530:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <USART1_IRQHandler+0x160>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b4b      	ldr	r3, [pc, #300]	; (8001664 <USART1_IRQHandler+0x164>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	4610      	mov	r0, r2
 800153c:	f7ff ffc2 	bl	80014c4 <USART_SEND>
			++arr_data[0];
 8001540:	4b48      	ldr	r3, [pc, #288]	; (8001664 <USART1_IRQHandler+0x164>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a47      	ldr	r2, [pc, #284]	; (8001664 <USART1_IRQHandler+0x164>)
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e007      	b.n	800155c <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 800154c:	4b44      	ldr	r3, [pc, #272]	; (8001660 <USART1_IRQHandler+0x160>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	4b43      	ldr	r3, [pc, #268]	; (8001660 <USART1_IRQHandler+0x160>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800155a:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 800155c:	4b40      	ldr	r3, [pc, #256]	; (8001660 <USART1_IRQHandler+0x160>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b01      	cmp	r3, #1
 800156a:	d166      	bne.n	800163a <USART1_IRQHandler+0x13a>
 800156c:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <USART1_IRQHandler+0x160>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b01      	cmp	r3, #1
 800157a:	d15e      	bne.n	800163a <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 800157c:	4b38      	ldr	r3, [pc, #224]	; (8001660 <USART1_IRQHandler+0x160>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	0b1b      	lsrs	r3, r3, #12
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b01      	cmp	r3, #1
 800158a:	d117      	bne.n	80015bc <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 800158c:	4b34      	ldr	r3, [pc, #208]	; (8001660 <USART1_IRQHandler+0x160>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	0a9b      	lsrs	r3, r3, #10
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b01      	cmp	r3, #1
 800159a:	d108      	bne.n	80015ae <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <USART1_IRQHandler+0x160>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <USART1_IRQHandler+0x168>)
 80015aa:	801a      	strh	r2, [r3, #0]
 80015ac:	e020      	b.n	80015f0 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 80015ae:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <USART1_IRQHandler+0x160>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <USART1_IRQHandler+0x168>)
 80015b8:	801a      	strh	r2, [r3, #0]
 80015ba:	e019      	b.n	80015f0 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <USART1_IRQHandler+0x160>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	0a9b      	lsrs	r3, r3, #10
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d109      	bne.n	80015e0 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <USART1_IRQHandler+0x160>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <USART1_IRQHandler+0x168>)
 80015dc:	801a      	strh	r2, [r3, #0]
 80015de:	e007      	b.n	80015f0 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <USART1_IRQHandler+0x160>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <USART1_IRQHandler+0x168>)
 80015ee:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <USART1_IRQHandler+0x16c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	e002      	b.n	8001602 <USART1_IRQHandler+0x102>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3301      	adds	r3, #1
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001608:	4293      	cmp	r3, r2
 800160a:	ddf7      	ble.n	80015fc <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <USART1_IRQHandler+0x160>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <USART1_IRQHandler+0x160>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0220 	bic.w	r2, r2, #32
 800161a:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <USART1_IRQHandler+0x160>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <USART1_IRQHandler+0x170>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	b29b      	uxth	r3, r3
 8001628:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <USART1_IRQHandler+0x160>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <USART1_IRQHandler+0x160>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0220 	bic.w	r2, r2, #32
 8001638:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <USART1_IRQHandler+0x160>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <USART1_IRQHandler+0x170>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	b29b      	uxth	r3, r3
 8001646:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <USART1_IRQHandler+0x160>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <USART1_IRQHandler+0x160>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0220 	bic.w	r2, r2, #32
 8001656:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000041c 	.word	0x2000041c
 8001664:	20000430 	.word	0x20000430
 8001668:	20000428 	.word	0x20000428
 800166c:	2000043c 	.word	0x2000043c
 8001670:	40013800 	.word	0x40013800

08001674 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800167a:	4b56      	ldr	r3, [pc, #344]	; (80017d4 <USART2_IRQHandler+0x160>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	09db      	lsrs	r3, r3, #7
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b01      	cmp	r3, #1
 8001688:	d122      	bne.n	80016d0 <USART2_IRQHandler+0x5c>
 800168a:	4b52      	ldr	r3, [pc, #328]	; (80017d4 <USART2_IRQHandler+0x160>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	09db      	lsrs	r3, r3, #7
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b01      	cmp	r3, #1
 8001698:	d11a      	bne.n	80016d0 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 800169a:	4b4f      	ldr	r3, [pc, #316]	; (80017d8 <USART2_IRQHandler+0x164>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00d      	beq.n	80016c0 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 80016a4:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <USART2_IRQHandler+0x160>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4b4b      	ldr	r3, [pc, #300]	; (80017d8 <USART2_IRQHandler+0x164>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4619      	mov	r1, r3
 80016ae:	4610      	mov	r0, r2
 80016b0:	f7ff ff08 	bl	80014c4 <USART_SEND>
			++arr_data[1];
 80016b4:	4b48      	ldr	r3, [pc, #288]	; (80017d8 <USART2_IRQHandler+0x164>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4a47      	ldr	r2, [pc, #284]	; (80017d8 <USART2_IRQHandler+0x164>)
 80016bc:	6053      	str	r3, [r2, #4]
 80016be:	e007      	b.n	80016d0 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 80016c0:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <USART2_IRQHandler+0x160>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <USART2_IRQHandler+0x160>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ce:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 80016d0:	4b40      	ldr	r3, [pc, #256]	; (80017d4 <USART2_IRQHandler+0x160>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d166      	bne.n	80017ae <USART2_IRQHandler+0x13a>
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <USART2_IRQHandler+0x160>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d15e      	bne.n	80017ae <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <USART2_IRQHandler+0x160>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	0b1b      	lsrs	r3, r3, #12
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d117      	bne.n	8001730 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8001700:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <USART2_IRQHandler+0x160>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	0a9b      	lsrs	r3, r3, #10
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b01      	cmp	r3, #1
 800170e:	d108      	bne.n	8001722 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8001710:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <USART2_IRQHandler+0x160>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	b29b      	uxth	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <USART2_IRQHandler+0x168>)
 800171e:	805a      	strh	r2, [r3, #2]
 8001720:	e020      	b.n	8001764 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 8001722:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <USART2_IRQHandler+0x160>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <USART2_IRQHandler+0x168>)
 800172c:	805a      	strh	r2, [r3, #2]
 800172e:	e019      	b.n	8001764 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <USART2_IRQHandler+0x160>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	0a9b      	lsrs	r3, r3, #10
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b01      	cmp	r3, #1
 800173e:	d109      	bne.n	8001754 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <USART2_IRQHandler+0x160>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	b29b      	uxth	r3, r3
 8001748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <USART2_IRQHandler+0x168>)
 8001750:	805a      	strh	r2, [r3, #2]
 8001752:	e007      	b.n	8001764 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <USART2_IRQHandler+0x160>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	b29b      	uxth	r3, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <USART2_IRQHandler+0x168>)
 8001762:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <USART2_IRQHandler+0x16c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	e002      	b.n	8001776 <USART2_IRQHandler+0x102>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3301      	adds	r3, #1
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800177c:	4293      	cmp	r3, r2
 800177e:	ddf7      	ble.n	8001770 <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <USART2_IRQHandler+0x160>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <USART2_IRQHandler+0x160>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f022 0220 	bic.w	r2, r2, #32
 800178e:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <USART2_IRQHandler+0x160>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <USART2_IRQHandler+0x170>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	b29b      	uxth	r3, r3
 800179c:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <USART2_IRQHandler+0x160>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <USART2_IRQHandler+0x160>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f022 0220 	bic.w	r2, r2, #32
 80017ac:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <USART2_IRQHandler+0x160>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <USART2_IRQHandler+0x170>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <USART2_IRQHandler+0x160>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <USART2_IRQHandler+0x160>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f022 0220 	bic.w	r2, r2, #32
 80017ca:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000041c 	.word	0x2000041c
 80017d8:	20000430 	.word	0x20000430
 80017dc:	20000428 	.word	0x20000428
 80017e0:	2000043c 	.word	0x2000043c
 80017e4:	40004400 	.word	0x40004400

080017e8 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80017ee:	4b56      	ldr	r3, [pc, #344]	; (8001948 <USART3_IRQHandler+0x160>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	09db      	lsrs	r3, r3, #7
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d122      	bne.n	8001844 <USART3_IRQHandler+0x5c>
 80017fe:	4b52      	ldr	r3, [pc, #328]	; (8001948 <USART3_IRQHandler+0x160>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	09db      	lsrs	r3, r3, #7
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d11a      	bne.n	8001844 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 800180e:	4b4f      	ldr	r3, [pc, #316]	; (800194c <USART3_IRQHandler+0x164>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00d      	beq.n	8001834 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 8001818:	4b4b      	ldr	r3, [pc, #300]	; (8001948 <USART3_IRQHandler+0x160>)
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	4b4b      	ldr	r3, [pc, #300]	; (800194c <USART3_IRQHandler+0x164>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4619      	mov	r1, r3
 8001822:	4610      	mov	r0, r2
 8001824:	f7ff fe4e 	bl	80014c4 <USART_SEND>
			++arr_data[2];
 8001828:	4b48      	ldr	r3, [pc, #288]	; (800194c <USART3_IRQHandler+0x164>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	3301      	adds	r3, #1
 800182e:	4a47      	ldr	r2, [pc, #284]	; (800194c <USART3_IRQHandler+0x164>)
 8001830:	6093      	str	r3, [r2, #8]
 8001832:	e007      	b.n	8001844 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 8001834:	4b44      	ldr	r3, [pc, #272]	; (8001948 <USART3_IRQHandler+0x160>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	4b43      	ldr	r3, [pc, #268]	; (8001948 <USART3_IRQHandler+0x160>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001842:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 8001844:	4b40      	ldr	r3, [pc, #256]	; (8001948 <USART3_IRQHandler+0x160>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b01      	cmp	r3, #1
 8001852:	d166      	bne.n	8001922 <USART3_IRQHandler+0x13a>
 8001854:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <USART3_IRQHandler+0x160>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	d15e      	bne.n	8001922 <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 8001864:	4b38      	ldr	r3, [pc, #224]	; (8001948 <USART3_IRQHandler+0x160>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	0b1b      	lsrs	r3, r3, #12
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b01      	cmp	r3, #1
 8001872:	d117      	bne.n	80018a4 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8001874:	4b34      	ldr	r3, [pc, #208]	; (8001948 <USART3_IRQHandler+0x160>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	0a9b      	lsrs	r3, r3, #10
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b01      	cmp	r3, #1
 8001882:	d108      	bne.n	8001896 <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <USART3_IRQHandler+0x160>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	b29b      	uxth	r3, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <USART3_IRQHandler+0x168>)
 8001892:	809a      	strh	r2, [r3, #4]
 8001894:	e020      	b.n	80018d8 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <USART3_IRQHandler+0x160>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	b29a      	uxth	r2, r3
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <USART3_IRQHandler+0x168>)
 80018a0:	809a      	strh	r2, [r3, #4]
 80018a2:	e019      	b.n	80018d8 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <USART3_IRQHandler+0x160>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	0a9b      	lsrs	r3, r3, #10
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d109      	bne.n	80018c8 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <USART3_IRQHandler+0x160>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	4b23      	ldr	r3, [pc, #140]	; (8001950 <USART3_IRQHandler+0x168>)
 80018c4:	809a      	strh	r2, [r3, #4]
 80018c6:	e007      	b.n	80018d8 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <USART3_IRQHandler+0x160>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <USART3_IRQHandler+0x168>)
 80018d6:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <USART3_IRQHandler+0x16c>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	e002      	b.n	80018ea <USART3_IRQHandler+0x102>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018f0:	4293      	cmp	r3, r2
 80018f2:	ddf7      	ble.n	80018e4 <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <USART3_IRQHandler+0x160>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <USART3_IRQHandler+0x160>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f022 0220 	bic.w	r2, r2, #32
 8001902:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <USART3_IRQHandler+0x160>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <USART3_IRQHandler+0x170>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	b29b      	uxth	r3, r3
 8001910:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <USART3_IRQHandler+0x160>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <USART3_IRQHandler+0x160>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f022 0220 	bic.w	r2, r2, #32
 8001920:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <USART3_IRQHandler+0x160>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <USART3_IRQHandler+0x170>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	b29b      	uxth	r3, r3
 800192e:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <USART3_IRQHandler+0x160>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <USART3_IRQHandler+0x160>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f022 0220 	bic.w	r2, r2, #32
 800193e:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000041c 	.word	0x2000041c
 800194c:	20000430 	.word	0x20000430
 8001950:	20000428 	.word	0x20000428
 8001954:	2000043c 	.word	0x2000043c
 8001958:	40004800 	.word	0x40004800

0800195c <TASK1_fun>:
#include "SCEDULER.h"
TASK_FRAME_t TASK1,TASK2,TASK3,TASK4;
uint8_t T1,T2,T3,T4;


void TASK1_fun(){
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T1^=1;
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <TASK1_fun+0x3c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	f083 0301 	eor.w	r3, r3, #1
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <TASK1_fun+0x3c>)
 800196c:	701a      	strb	r2, [r3, #0]
		co++;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <TASK1_fun+0x40>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	4a09      	ldr	r2, [pc, #36]	; (800199c <TASK1_fun+0x40>)
 8001976:	6013      	str	r3, [r2, #0]
		TogglePin(GPIOA, pin7);
 8001978:	2107      	movs	r1, #7
 800197a:	4809      	ldr	r0, [pc, #36]	; (80019a0 <TASK1_fun+0x44>)
 800197c:	f7ff fa44 	bl	8000e08 <TogglePin>
		//ALSHREIF_RTOS_TASK_WAIT(&TASK1, 100);
		if(co==100){
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <TASK1_fun+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b64      	cmp	r3, #100	; 0x64
 8001986:	d1eb      	bne.n	8001960 <TASK1_fun+0x4>
			co=0;
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <TASK1_fun+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK1,&TASK2);
 800198e:	4905      	ldr	r1, [pc, #20]	; (80019a4 <TASK1_fun+0x48>)
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <TASK1_fun+0x4c>)
 8001992:	f7ff f851 	bl	8000a38 <ALSHREIF_RTOS_ACTIVAT_TASK>
		T1^=1;
 8001996:	e7e3      	b.n	8001960 <TASK1_fun+0x4>
 8001998:	200004ed 	.word	0x200004ed
 800199c:	20000044 	.word	0x20000044
 80019a0:	40010800 	.word	0x40010800
 80019a4:	20000458 	.word	0x20000458
 80019a8:	20000488 	.word	0x20000488

080019ac <TASK2_fun>:

		}
	}
}
void TASK2_fun(){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T2^=1;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <TASK2_fun+0x4c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	f083 0301 	eor.w	r3, r3, #1
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <TASK2_fun+0x4c>)
 80019bc:	701a      	strb	r2, [r3, #0]
		co++;
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <TASK2_fun+0x50>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <TASK2_fun+0x50>)
 80019c6:	6013      	str	r3, [r2, #0]
		TogglePin(GPIOB, pin0);
 80019c8:	2100      	movs	r1, #0
 80019ca:	480d      	ldr	r0, [pc, #52]	; (8001a00 <TASK2_fun+0x54>)
 80019cc:	f7ff fa1c 	bl	8000e08 <TogglePin>
		//ALSHREIF_RTOS_TASK_WAIT(&TASK2, 400);
		if(co==100){
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <TASK2_fun+0x50>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b64      	cmp	r3, #100	; 0x64
 80019d6:	d103      	bne.n	80019e0 <TASK2_fun+0x34>
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK2,&TASK3);
 80019d8:	490a      	ldr	r1, [pc, #40]	; (8001a04 <TASK2_fun+0x58>)
 80019da:	480b      	ldr	r0, [pc, #44]	; (8001a08 <TASK2_fun+0x5c>)
 80019dc:	f7ff f82c 	bl	8000a38 <ALSHREIF_RTOS_ACTIVAT_TASK>

		}
		if(co==200){
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <TASK2_fun+0x50>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2bc8      	cmp	r3, #200	; 0xc8
 80019e6:	d1e3      	bne.n	80019b0 <TASK2_fun+0x4>
			co=0;
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <TASK2_fun+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
			ALSHREIF_RTOS_TERMINAT_TASK(&TASK2);
 80019ee:	4806      	ldr	r0, [pc, #24]	; (8001a08 <TASK2_fun+0x5c>)
 80019f0:	f7ff f839 	bl	8000a66 <ALSHREIF_RTOS_TERMINAT_TASK>
		T2^=1;
 80019f4:	e7dc      	b.n	80019b0 <TASK2_fun+0x4>
 80019f6:	bf00      	nop
 80019f8:	20000454 	.word	0x20000454
 80019fc:	20000048 	.word	0x20000048
 8001a00:	40010c00 	.word	0x40010c00
 8001a04:	200004f0 	.word	0x200004f0
 8001a08:	20000458 	.word	0x20000458

08001a0c <TASK3_fun>:

		}
	}
}
void TASK3_fun(){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T3^=1;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <TASK3_fun+0x4c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	f083 0301 	eor.w	r3, r3, #1
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <TASK3_fun+0x4c>)
 8001a1c:	701a      	strb	r2, [r3, #0]
		co++;
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <TASK3_fun+0x50>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <TASK3_fun+0x50>)
 8001a26:	6013      	str	r3, [r2, #0]
		TogglePin(GPIOB, pin1);
 8001a28:	2101      	movs	r1, #1
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <TASK3_fun+0x54>)
 8001a2c:	f7ff f9ec 	bl	8000e08 <TogglePin>
		//ALSHREIF_RTOS_TASK_WAIT(&TASK3, 1000);
		if(co==100){
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <TASK3_fun+0x50>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b64      	cmp	r3, #100	; 0x64
 8001a36:	d103      	bne.n	8001a40 <TASK3_fun+0x34>
			ALSHREIF_RTOS_ACTIVAT_TASK(&TASK3,&TASK4);
 8001a38:	490a      	ldr	r1, [pc, #40]	; (8001a64 <TASK3_fun+0x58>)
 8001a3a:	480b      	ldr	r0, [pc, #44]	; (8001a68 <TASK3_fun+0x5c>)
 8001a3c:	f7fe fffc 	bl	8000a38 <ALSHREIF_RTOS_ACTIVAT_TASK>
		}
		if(co==200){
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <TASK3_fun+0x50>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2bc8      	cmp	r3, #200	; 0xc8
 8001a46:	d1e3      	bne.n	8001a10 <TASK3_fun+0x4>
			co=0;
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <TASK3_fun+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
			ALSHREIF_RTOS_TERMINAT_TASK(&TASK3);
 8001a4e:	4806      	ldr	r0, [pc, #24]	; (8001a68 <TASK3_fun+0x5c>)
 8001a50:	f7ff f809 	bl	8000a66 <ALSHREIF_RTOS_TERMINAT_TASK>
		T3^=1;
 8001a54:	e7dc      	b.n	8001a10 <TASK3_fun+0x4>
 8001a56:	bf00      	nop
 8001a58:	200004ec 	.word	0x200004ec
 8001a5c:	2000004c 	.word	0x2000004c
 8001a60:	40010c00 	.word	0x40010c00
 8001a64:	200004bc 	.word	0x200004bc
 8001a68:	200004f0 	.word	0x200004f0

08001a6c <TASK4_fun>:
		}
	}
}
void TASK4_fun(){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	static volatile uint32_t co=0;
	while(1){
		T4^=1;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <TASK4_fun+0x34>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	f083 0301 	eor.w	r3, r3, #1
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <TASK4_fun+0x34>)
 8001a7c:	701a      	strb	r2, [r3, #0]
		co++;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <TASK4_fun+0x38>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <TASK4_fun+0x38>)
 8001a86:	6013      	str	r3, [r2, #0]
		//ALSHREIF_RTOS_TASK_WAIT(&TASK4, 100);
		if(co==300){
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <TASK4_fun+0x38>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a90:	d1ee      	bne.n	8001a70 <TASK4_fun+0x4>
			co=0;
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <TASK4_fun+0x38>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
			ALSHREIF_RTOS_TERMINAT_TASK(&TASK4);
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <TASK4_fun+0x3c>)
 8001a9a:	f7fe ffe4 	bl	8000a66 <ALSHREIF_RTOS_TERMINAT_TASK>
		T4^=1;
 8001a9e:	e7e7      	b.n	8001a70 <TASK4_fun+0x4>
 8001aa0:	200004b8 	.word	0x200004b8
 8001aa4:	20000050 	.word	0x20000050
 8001aa8:	200004bc 	.word	0x200004bc

08001aac <main>:
		}
	}
}
//============================================================================================================
int main(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

	HARD_WARE_INIT();
 8001ab0:	f7fe fbc0 	bl	8000234 <HARD_WARE_INIT>
	ALSHREIF_RTOS_INIT();
 8001ab4:	f7fe fd52 	bl	800055c <ALSHREIF_RTOS_INIT>

	strcpy(TASK1.NAME,"TASK1");
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <main+0xbc>)
 8001aba:	4a2c      	ldr	r2, [pc, #176]	; (8001b6c <main+0xc0>)
 8001abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ac0:	6018      	str	r0, [r3, #0]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	8019      	strh	r1, [r3, #0]
	TASK1.TASK_FUNCTION=TASK1_fun;
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <main+0xc4>)
 8001ac8:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <main+0xc8>)
 8001aca:	609a      	str	r2, [r3, #8]
	TASK1.priority=4;
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <main+0xc4>)
 8001ace:	2204      	movs	r2, #4
 8001ad0:	711a      	strb	r2, [r3, #4]
	TASK1.stack_size=1024;
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <main+0xc4>)
 8001ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad8:	601a      	str	r2, [r3, #0]

	strcpy(TASK2.NAME,"TASK2");
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <main+0xcc>)
 8001adc:	4a27      	ldr	r2, [pc, #156]	; (8001b7c <main+0xd0>)
 8001ade:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ae2:	6018      	str	r0, [r3, #0]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	8019      	strh	r1, [r3, #0]
	TASK2.TASK_FUNCTION=TASK2_fun;
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <main+0xd4>)
 8001aea:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <main+0xd8>)
 8001aec:	609a      	str	r2, [r3, #8]
	TASK2.priority=3;
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <main+0xd4>)
 8001af0:	2203      	movs	r2, #3
 8001af2:	711a      	strb	r2, [r3, #4]
	TASK2.stack_size=1024;
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <main+0xd4>)
 8001af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001afa:	601a      	str	r2, [r3, #0]

	strcpy(TASK3.NAME,"TASK3");
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <main+0xdc>)
 8001afe:	4a23      	ldr	r2, [pc, #140]	; (8001b8c <main+0xe0>)
 8001b00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b04:	6018      	str	r0, [r3, #0]
 8001b06:	3304      	adds	r3, #4
 8001b08:	8019      	strh	r1, [r3, #0]
	TASK3.TASK_FUNCTION=TASK3_fun;
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <main+0xe4>)
 8001b0c:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <main+0xe8>)
 8001b0e:	609a      	str	r2, [r3, #8]
	TASK3.priority=2;
 8001b10:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <main+0xe4>)
 8001b12:	2202      	movs	r2, #2
 8001b14:	711a      	strb	r2, [r3, #4]
	TASK3.stack_size=1024;
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <main+0xe4>)
 8001b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b1c:	601a      	str	r2, [r3, #0]

	strcpy(TASK4.NAME,"TASK4");
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <main+0xec>)
 8001b20:	4a1e      	ldr	r2, [pc, #120]	; (8001b9c <main+0xf0>)
 8001b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b26:	6018      	str	r0, [r3, #0]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	8019      	strh	r1, [r3, #0]
	TASK4.TASK_FUNCTION=TASK4_fun;
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <main+0xf4>)
 8001b2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ba4 <main+0xf8>)
 8001b30:	609a      	str	r2, [r3, #8]
	TASK4.priority=1;
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <main+0xf4>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	711a      	strb	r2, [r3, #4]
	TASK4.stack_size=1024;
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <main+0xf4>)
 8001b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3e:	601a      	str	r2, [r3, #0]

	ALSHREIF_RTOS_CREAT_TASK(&TASK1);
 8001b40:	480b      	ldr	r0, [pc, #44]	; (8001b70 <main+0xc4>)
 8001b42:	f7fe fccf 	bl	80004e4 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK2);
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <main+0xd4>)
 8001b48:	f7fe fccc 	bl	80004e4 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK3);
 8001b4c:	4810      	ldr	r0, [pc, #64]	; (8001b90 <main+0xe4>)
 8001b4e:	f7fe fcc9 	bl	80004e4 <ALSHREIF_RTOS_CREAT_TASK>
	ALSHREIF_RTOS_CREAT_TASK(&TASK4);
 8001b52:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <main+0xf4>)
 8001b54:	f7fe fcc6 	bl	80004e4 <ALSHREIF_RTOS_CREAT_TASK>

	ALSHREIF_RTOS_ACTIVAT_TASK(NULL,&TASK1);
 8001b58:	4905      	ldr	r1, [pc, #20]	; (8001b70 <main+0xc4>)
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7fe ff6c 	bl	8000a38 <ALSHREIF_RTOS_ACTIVAT_TASK>
	//	ALSHREIF_RTOS_ACTIVAT_TASK(&TASK2);
	//	ALSHREIF_RTOS_ACTIVAT_TASK(&TASK3);

	ALSHREIF_RTOS_START_OS();
 8001b60:	f7fe ff90 	bl	8000a84 <ALSHREIF_RTOS_START_OS>
	while(1);
 8001b64:	e7fe      	b.n	8001b64 <main+0xb8>
 8001b66:	bf00      	nop
 8001b68:	200004a0 	.word	0x200004a0
 8001b6c:	08001c68 	.word	0x08001c68
 8001b70:	20000488 	.word	0x20000488
 8001b74:	0800195d 	.word	0x0800195d
 8001b78:	20000470 	.word	0x20000470
 8001b7c:	08001c70 	.word	0x08001c70
 8001b80:	20000458 	.word	0x20000458
 8001b84:	080019ad 	.word	0x080019ad
 8001b88:	20000508 	.word	0x20000508
 8001b8c:	08001c78 	.word	0x08001c78
 8001b90:	200004f0 	.word	0x200004f0
 8001b94:	08001a0d 	.word	0x08001a0d
 8001b98:	200004d4 	.word	0x200004d4
 8001b9c:	08001c80 	.word	0x08001c80
 8001ba0:	200004bc 	.word	0x200004bc
 8001ba4:	08001a6d 	.word	0x08001a6d

08001ba8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001baa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb0:	480c      	ldr	r0, [pc, #48]	; (8001be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bb2:	490d      	ldr	r1, [pc, #52]	; (8001be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <LoopForever+0xe>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc8:	4c0a      	ldr	r4, [pc, #40]	; (8001bf4 <LoopForever+0x16>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bd6:	f000 f811 	bl	8001bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bda:	f7ff ff67 	bl	8001aac <main>

08001bde <LoopForever>:

LoopForever:
    b LoopForever
 8001bde:	e7fe      	b.n	8001bde <LoopForever>
  ldr   r0, =_estack
 8001be0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001bec:	08001c90 	.word	0x08001c90
  ldr r2, =_sbss
 8001bf0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001bf4:	20000520 	.word	0x20000520

08001bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC1_2_IRQHandler>
	...

08001bfc <__libc_init_array>:
 8001bfc:	b570      	push	{r4, r5, r6, lr}
 8001bfe:	2500      	movs	r5, #0
 8001c00:	4e0c      	ldr	r6, [pc, #48]	; (8001c34 <__libc_init_array+0x38>)
 8001c02:	4c0d      	ldr	r4, [pc, #52]	; (8001c38 <__libc_init_array+0x3c>)
 8001c04:	1ba4      	subs	r4, r4, r6
 8001c06:	10a4      	asrs	r4, r4, #2
 8001c08:	42a5      	cmp	r5, r4
 8001c0a:	d109      	bne.n	8001c20 <__libc_init_array+0x24>
 8001c0c:	f000 f81a 	bl	8001c44 <_init>
 8001c10:	2500      	movs	r5, #0
 8001c12:	4e0a      	ldr	r6, [pc, #40]	; (8001c3c <__libc_init_array+0x40>)
 8001c14:	4c0a      	ldr	r4, [pc, #40]	; (8001c40 <__libc_init_array+0x44>)
 8001c16:	1ba4      	subs	r4, r4, r6
 8001c18:	10a4      	asrs	r4, r4, #2
 8001c1a:	42a5      	cmp	r5, r4
 8001c1c:	d105      	bne.n	8001c2a <__libc_init_array+0x2e>
 8001c1e:	bd70      	pop	{r4, r5, r6, pc}
 8001c20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c24:	4798      	blx	r3
 8001c26:	3501      	adds	r5, #1
 8001c28:	e7ee      	b.n	8001c08 <__libc_init_array+0xc>
 8001c2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c2e:	4798      	blx	r3
 8001c30:	3501      	adds	r5, #1
 8001c32:	e7f2      	b.n	8001c1a <__libc_init_array+0x1e>
 8001c34:	08001c88 	.word	0x08001c88
 8001c38:	08001c88 	.word	0x08001c88
 8001c3c:	08001c88 	.word	0x08001c88
 8001c40:	08001c8c 	.word	0x08001c8c

08001c44 <_init>:
 8001c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c46:	bf00      	nop
 8001c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c4a:	bc08      	pop	{r3}
 8001c4c:	469e      	mov	lr, r3
 8001c4e:	4770      	bx	lr

08001c50 <_fini>:
 8001c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c52:	bf00      	nop
 8001c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c56:	bc08      	pop	{r3}
 8001c58:	469e      	mov	lr, r3
 8001c5a:	4770      	bx	lr
