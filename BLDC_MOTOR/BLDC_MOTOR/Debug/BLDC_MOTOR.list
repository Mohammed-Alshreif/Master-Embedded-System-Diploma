
BLDC_MOTOR.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c44  08003c44  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08003c44  08003c44  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c44  08003c44  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c44  08003c44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c48  08003c48  00013c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08003c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200001f4  08003e40  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08003e40  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006eaf  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011ef  00000000  00000000  000270cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002f8  00000000  00000000  000282c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000260  00000000  00000000  000285b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000369e  00000000  00000000  00028818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000421f  00000000  00000000  0002beb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bb4e  00000000  00000000  000300d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003bc23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fec  00000000  00000000  0003bca0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001f4 	.word	0x200001f4
 800014c:	00000000 	.word	0x00000000
 8000150:	08003ae0 	.word	0x08003ae0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001f8 	.word	0x200001f8
 800016c:	08003ae0 	.word	0x08003ae0

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	d1ed      	bne.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <s1>:
char string_data[10];
uint8_t serial_flag=0,index1;
//*******************************************************
//===================== -INTERRUPT- =====================
//*******************************************************
void s1(){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	hall1state=READ_PIN(GPIOA, pin0);
 800075c:	2100      	movs	r1, #0
 800075e:	4816      	ldr	r0, [pc, #88]	; (80007b8 <s1+0x60>)
 8000760:	f000 fe3c 	bl	80013dc <READ_PIN>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <s1+0x64>)
 800076a:	701a      	strb	r2, [r3, #0]

	//calculate the distance
	HALL2READ = READ_PIN(GPIOA, pin1);
 800076c:	2101      	movs	r1, #1
 800076e:	4812      	ldr	r0, [pc, #72]	; (80007b8 <s1+0x60>)
 8000770:	f000 fe34 	bl	80013dc <READ_PIN>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <s1+0x68>)
 800077a:	701a      	strb	r2, [r3, #0]
	if(hall1state==1){
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <s1+0x64>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d10e      	bne.n	80007a2 <s1+0x4a>
		if(HALL2READ > 0){
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <s1+0x68>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d005      	beq.n	8000798 <s1+0x40>
			encoder_pulses++;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <s1+0x6c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <s1+0x6c>)
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	e004      	b.n	80007a2 <s1+0x4a>
		}
		else{
			encoder_pulses--;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <s1+0x6c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3b01      	subs	r3, #1
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <s1+0x6c>)
 80007a0:	6013      	str	r3, [r2, #0]
		}
	}

	//motor direction
	if(MOTOR_DIRECTION==0){
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <s1+0x70>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d102      	bne.n	80007b0 <s1+0x58>
		NextStep_NORMAL();
 80007aa:	f000 f863 	bl	8000874 <NextStep_NORMAL>
	}
	else {
		NextStep_REVERES();
	}

}
 80007ae:	e001      	b.n	80007b4 <s1+0x5c>
		NextStep_REVERES();
 80007b0:	f000 f8f6 	bl	80009a0 <NextStep_REVERES>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40010800 	.word	0x40010800
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000248 	.word	0x20000248
 80007c4:	20000244 	.word	0x20000244
 80007c8:	20000242 	.word	0x20000242

080007cc <s2>:
void s2(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	//calculate the speed
	if(flag_SPEED==0){
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <s2+0x58>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d107      	bne.n	80007e8 <s2+0x1c>
		TIME_CALCULATION(clk, TIMER_START);
 80007d8:	2101      	movs	r1, #1
 80007da:	4813      	ldr	r0, [pc, #76]	; (8000828 <s2+0x5c>)
 80007dc:	f000 ff82 	bl	80016e4 <TIME_CALCULATION>
		flag_SPEED=1;
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <s2+0x58>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	e009      	b.n	80007fc <s2+0x30>
	}
	else{
		TIME_CALC=TIME_CALCULATION(clk, TIMER_STOP);
 80007e8:	2100      	movs	r1, #0
 80007ea:	480f      	ldr	r0, [pc, #60]	; (8000828 <s2+0x5c>)
 80007ec:	f000 ff7a 	bl	80016e4 <TIME_CALCULATION>
 80007f0:	4602      	mov	r2, r0
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <s2+0x60>)
 80007f4:	601a      	str	r2, [r3, #0]
		flag_SPEED=0;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <s2+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
	}

	//hall read
	hall2state=READ_PIN(GPIOA, pin1);
 80007fc:	2101      	movs	r1, #1
 80007fe:	480c      	ldr	r0, [pc, #48]	; (8000830 <s2+0x64>)
 8000800:	f000 fdec 	bl	80013dc <READ_PIN>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <s2+0x68>)
 800080a:	701a      	strb	r2, [r3, #0]
	//motor direction
	if(MOTOR_DIRECTION==0){
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <s2+0x6c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <s2+0x4e>
		NextStep_NORMAL();
 8000814:	f000 f82e 	bl	8000874 <NextStep_NORMAL>
	}
	else {
		NextStep_REVERES();
	}
}
 8000818:	e001      	b.n	800081e <s2+0x52>
		NextStep_REVERES();
 800081a:	f000 f8c1 	bl	80009a0 <NextStep_REVERES>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000260 	.word	0x20000260
 8000828:	02255100 	.word	0x02255100
 800082c:	20000264 	.word	0x20000264
 8000830:	40010800 	.word	0x40010800
 8000834:	20000210 	.word	0x20000210
 8000838:	20000242 	.word	0x20000242

0800083c <s3>:
void s3(){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	//hall read
	hall3state=READ_PIN(GPIOA, pin2);
 8000840:	2102      	movs	r1, #2
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <s3+0x2c>)
 8000844:	f000 fdca 	bl	80013dc <READ_PIN>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <s3+0x30>)
 800084e:	701a      	strb	r2, [r3, #0]
	//motor direction
	if(MOTOR_DIRECTION==0){
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <s3+0x34>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d102      	bne.n	800085e <s3+0x22>
		NextStep_NORMAL();
 8000858:	f000 f80c 	bl	8000874 <NextStep_NORMAL>
	}
	else {
		NextStep_REVERES();
	}
}
 800085c:	e001      	b.n	8000862 <s3+0x26>
		NextStep_REVERES();
 800085e:	f000 f89f 	bl	80009a0 <NextStep_REVERES>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40010800 	.word	0x40010800
 800086c:	20000001 	.word	0x20000001
 8000870:	20000242 	.word	0x20000242

08000874 <NextStep_NORMAL>:
//*******************************************************
//=============== -NextStep action- =====================
//*******************************************************
void NextStep_NORMAL() {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af02      	add	r7, sp, #8
	if ((hall1state == 1) && (hall2state == 0) && (hall3state == 1)) {
 800087a:	4b41      	ldr	r3, [pc, #260]	; (8000980 <NextStep_NORMAL+0x10c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d10a      	bne.n	8000898 <NextStep_NORMAL+0x24>
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <NextStep_NORMAL+0x110>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d106      	bne.n	8000898 <NextStep_NORMAL+0x24>
 800088a:	4b3f      	ldr	r3, [pc, #252]	; (8000988 <NextStep_NORMAL+0x114>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d102      	bne.n	8000898 <NextStep_NORMAL+0x24>
		MOTOR_state = 0;
 8000892:	4b3e      	ldr	r3, [pc, #248]	; (800098c <NextStep_NORMAL+0x118>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 0) && (hall3state == 1)) {
 8000898:	4b39      	ldr	r3, [pc, #228]	; (8000980 <NextStep_NORMAL+0x10c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d10a      	bne.n	80008b6 <NextStep_NORMAL+0x42>
 80008a0:	4b38      	ldr	r3, [pc, #224]	; (8000984 <NextStep_NORMAL+0x110>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d106      	bne.n	80008b6 <NextStep_NORMAL+0x42>
 80008a8:	4b37      	ldr	r3, [pc, #220]	; (8000988 <NextStep_NORMAL+0x114>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d102      	bne.n	80008b6 <NextStep_NORMAL+0x42>
		MOTOR_state = 1;
 80008b0:	4b36      	ldr	r3, [pc, #216]	; (800098c <NextStep_NORMAL+0x118>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 1) && (hall3state == 1)) {
 80008b6:	4b32      	ldr	r3, [pc, #200]	; (8000980 <NextStep_NORMAL+0x10c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10a      	bne.n	80008d4 <NextStep_NORMAL+0x60>
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <NextStep_NORMAL+0x110>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d106      	bne.n	80008d4 <NextStep_NORMAL+0x60>
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <NextStep_NORMAL+0x114>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d102      	bne.n	80008d4 <NextStep_NORMAL+0x60>
		MOTOR_state = 2;
 80008ce:	4b2f      	ldr	r3, [pc, #188]	; (800098c <NextStep_NORMAL+0x118>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 1) && (hall3state == 0)) {
 80008d4:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <NextStep_NORMAL+0x10c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10a      	bne.n	80008f2 <NextStep_NORMAL+0x7e>
 80008dc:	4b29      	ldr	r3, [pc, #164]	; (8000984 <NextStep_NORMAL+0x110>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d106      	bne.n	80008f2 <NextStep_NORMAL+0x7e>
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <NextStep_NORMAL+0x114>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <NextStep_NORMAL+0x7e>
		MOTOR_state = 3;
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <NextStep_NORMAL+0x118>)
 80008ee:	2203      	movs	r2, #3
 80008f0:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 1) && (hall2state == 1) && (hall3state == 0)) {
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <NextStep_NORMAL+0x10c>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d10a      	bne.n	8000910 <NextStep_NORMAL+0x9c>
 80008fa:	4b22      	ldr	r3, [pc, #136]	; (8000984 <NextStep_NORMAL+0x110>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d106      	bne.n	8000910 <NextStep_NORMAL+0x9c>
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <NextStep_NORMAL+0x114>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d102      	bne.n	8000910 <NextStep_NORMAL+0x9c>
		MOTOR_state = 4;
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <NextStep_NORMAL+0x118>)
 800090c:	2204      	movs	r2, #4
 800090e:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 1) && (hall2state == 0) && (hall3state == 0)) {
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <NextStep_NORMAL+0x10c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d10a      	bne.n	800092e <NextStep_NORMAL+0xba>
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <NextStep_NORMAL+0x110>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d106      	bne.n	800092e <NextStep_NORMAL+0xba>
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <NextStep_NORMAL+0x114>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <NextStep_NORMAL+0xba>
		MOTOR_state = 5;
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <NextStep_NORMAL+0x118>)
 800092a:	2205      	movs	r2, #5
 800092c:	701a      	strb	r2, [r3, #0]
	}
	//second problem % interrupt debouncing %
	//when the interrupt Happens the state change if we first put a rest(LOW PWM),
	//the motor will lose the torque and it return and it make another interrupt
	//and it happens again and again so we start with high side for 50 us to shore the motor pass the sensor
	TIMER_ISR(TIM3,50, U_us, clk, state);
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <NextStep_NORMAL+0x11c>)
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <NextStep_NORMAL+0x120>)
 8000934:	2201      	movs	r2, #1
 8000936:	2132      	movs	r1, #50	; 0x32
 8000938:	4817      	ldr	r0, [pc, #92]	; (8000998 <NextStep_NORMAL+0x124>)
 800093a:	f000 fe2d 	bl	8001598 <TIMER_ISR>
	// 3 phase as a float to solve the pulse stop of motor when it run at high speed
	// when changing the step without rest the motor stuck at pulse time , make it very violent
	//A floating
	pinwrite(GPIOB, pin0,LOW);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	4816      	ldr	r0, [pc, #88]	; (800099c <NextStep_NORMAL+0x128>)
 8000944:	f000 fd26 	bl	8001394 <pinwrite>
	pinwrite(GPIOB, pin1,HIGH);
 8000948:	2201      	movs	r2, #1
 800094a:	2101      	movs	r1, #1
 800094c:	4813      	ldr	r0, [pc, #76]	; (800099c <NextStep_NORMAL+0x128>)
 800094e:	f000 fd21 	bl	8001394 <pinwrite>
	//B floating
	pinwrite(GPIOB, pin10,LOW);
 8000952:	2200      	movs	r2, #0
 8000954:	210a      	movs	r1, #10
 8000956:	4811      	ldr	r0, [pc, #68]	; (800099c <NextStep_NORMAL+0x128>)
 8000958:	f000 fd1c 	bl	8001394 <pinwrite>
	pinwrite(GPIOB, pin7,HIGH);
 800095c:	2201      	movs	r2, #1
 800095e:	2107      	movs	r1, #7
 8000960:	480e      	ldr	r0, [pc, #56]	; (800099c <NextStep_NORMAL+0x128>)
 8000962:	f000 fd17 	bl	8001394 <pinwrite>
	//C floating
	pinwrite(GPIOB, pin8,LOW);
 8000966:	2200      	movs	r2, #0
 8000968:	2108      	movs	r1, #8
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <NextStep_NORMAL+0x128>)
 800096c:	f000 fd12 	bl	8001394 <pinwrite>
	pinwrite(GPIOB, pin5,HIGH);
 8000970:	2201      	movs	r2, #1
 8000972:	2105      	movs	r1, #5
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <NextStep_NORMAL+0x128>)
 8000976:	f000 fd0d 	bl	8001394 <pinwrite>
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000210 	.word	0x20000210
 8000988:	20000001 	.word	0x20000001
 800098c:	20000211 	.word	0x20000211
 8000990:	08000b39 	.word	0x08000b39
 8000994:	02255100 	.word	0x02255100
 8000998:	40000400 	.word	0x40000400
 800099c:	40010c00 	.word	0x40010c00

080009a0 <NextStep_REVERES>:
void NextStep_REVERES() {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af02      	add	r7, sp, #8
	if ((hall2state == 1) && (hall1state == 0) && (hall3state == 1)) {
 80009a6:	4b41      	ldr	r3, [pc, #260]	; (8000aac <NextStep_REVERES+0x10c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d10a      	bne.n	80009c4 <NextStep_REVERES+0x24>
 80009ae:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <NextStep_REVERES+0x110>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d106      	bne.n	80009c4 <NextStep_REVERES+0x24>
 80009b6:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <NextStep_REVERES+0x114>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d102      	bne.n	80009c4 <NextStep_REVERES+0x24>
		MOTOR_state = 5;
 80009be:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <NextStep_REVERES+0x118>)
 80009c0:	2205      	movs	r2, #5
 80009c2:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 0) && (hall1state == 0) && (hall3state == 1)) {
 80009c4:	4b39      	ldr	r3, [pc, #228]	; (8000aac <NextStep_REVERES+0x10c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10a      	bne.n	80009e2 <NextStep_REVERES+0x42>
 80009cc:	4b38      	ldr	r3, [pc, #224]	; (8000ab0 <NextStep_REVERES+0x110>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d106      	bne.n	80009e2 <NextStep_REVERES+0x42>
 80009d4:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <NextStep_REVERES+0x114>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d102      	bne.n	80009e2 <NextStep_REVERES+0x42>
		MOTOR_state = 4;
 80009dc:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <NextStep_REVERES+0x118>)
 80009de:	2204      	movs	r2, #4
 80009e0:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 0) && (hall1state == 1) && (hall3state == 1)) {
 80009e2:	4b32      	ldr	r3, [pc, #200]	; (8000aac <NextStep_REVERES+0x10c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10a      	bne.n	8000a00 <NextStep_REVERES+0x60>
 80009ea:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <NextStep_REVERES+0x110>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d106      	bne.n	8000a00 <NextStep_REVERES+0x60>
 80009f2:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <NextStep_REVERES+0x114>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d102      	bne.n	8000a00 <NextStep_REVERES+0x60>
		MOTOR_state = 3;
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <NextStep_REVERES+0x118>)
 80009fc:	2203      	movs	r2, #3
 80009fe:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 0) && (hall1state == 1) && (hall3state == 0)) {
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <NextStep_REVERES+0x10c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d10a      	bne.n	8000a1e <NextStep_REVERES+0x7e>
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <NextStep_REVERES+0x110>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d106      	bne.n	8000a1e <NextStep_REVERES+0x7e>
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <NextStep_REVERES+0x114>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <NextStep_REVERES+0x7e>
		MOTOR_state = 2;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <NextStep_REVERES+0x118>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 1) && (hall1state == 1) && (hall3state == 0)) {
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <NextStep_REVERES+0x10c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d10a      	bne.n	8000a3c <NextStep_REVERES+0x9c>
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <NextStep_REVERES+0x110>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d106      	bne.n	8000a3c <NextStep_REVERES+0x9c>
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <NextStep_REVERES+0x114>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d102      	bne.n	8000a3c <NextStep_REVERES+0x9c>
		MOTOR_state = 1;
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <NextStep_REVERES+0x118>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 1) && (hall1state == 0) && (hall3state == 0)) {
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <NextStep_REVERES+0x10c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10a      	bne.n	8000a5a <NextStep_REVERES+0xba>
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <NextStep_REVERES+0x110>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d106      	bne.n	8000a5a <NextStep_REVERES+0xba>
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <NextStep_REVERES+0x114>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <NextStep_REVERES+0xba>
		MOTOR_state = 0;
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <NextStep_REVERES+0x118>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
	}

	TIMER_ISR(TIM3,50, U_us, clk, state);
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <NextStep_REVERES+0x11c>)
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <NextStep_REVERES+0x120>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	2132      	movs	r1, #50	; 0x32
 8000a64:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <NextStep_REVERES+0x124>)
 8000a66:	f000 fd97 	bl	8001598 <TIMER_ISR>
	// 3 phase as a float to solve the pulse stop of motor when it run at high speed
	// when changing the step without rest the motor stuck at pulse time , make it very violent
	//A floating
	pinwrite(GPIOB, pin0,LOW);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4816      	ldr	r0, [pc, #88]	; (8000ac8 <NextStep_REVERES+0x128>)
 8000a70:	f000 fc90 	bl	8001394 <pinwrite>
	pinwrite(GPIOB, pin1,HIGH);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2101      	movs	r1, #1
 8000a78:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <NextStep_REVERES+0x128>)
 8000a7a:	f000 fc8b 	bl	8001394 <pinwrite>
	//B floating
	pinwrite(GPIOB, pin10,LOW);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	210a      	movs	r1, #10
 8000a82:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <NextStep_REVERES+0x128>)
 8000a84:	f000 fc86 	bl	8001394 <pinwrite>
	pinwrite(GPIOB, pin7,HIGH);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2107      	movs	r1, #7
 8000a8c:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <NextStep_REVERES+0x128>)
 8000a8e:	f000 fc81 	bl	8001394 <pinwrite>
	//C floating
	pinwrite(GPIOB, pin8,LOW);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2108      	movs	r1, #8
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <NextStep_REVERES+0x128>)
 8000a98:	f000 fc7c 	bl	8001394 <pinwrite>
	pinwrite(GPIOB, pin5,HIGH);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2105      	movs	r1, #5
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <NextStep_REVERES+0x128>)
 8000aa2:	f000 fc77 	bl	8001394 <pinwrite>
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000210 	.word	0x20000210
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000001 	.word	0x20000001
 8000ab8:	20000211 	.word	0x20000211
 8000abc:	08000b39 	.word	0x08000b39
 8000ac0:	02255100 	.word	0x02255100
 8000ac4:	40000400 	.word	0x40000400
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <wate>:
//*******************************************************
//==================== -LOW PWM- ========================
//*******************************************************
void wate(){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af02      	add	r7, sp, #8
	//A floating
	pinwrite(GPIOB, pin0,LOW);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4814      	ldr	r0, [pc, #80]	; (8000b28 <wate+0x5c>)
 8000ad8:	f000 fc5c 	bl	8001394 <pinwrite>
	pinwrite(GPIOB, pin1,HIGH);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4811      	ldr	r0, [pc, #68]	; (8000b28 <wate+0x5c>)
 8000ae2:	f000 fc57 	bl	8001394 <pinwrite>
	//B floating
	pinwrite(GPIOB, pin10,LOW);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210a      	movs	r1, #10
 8000aea:	480f      	ldr	r0, [pc, #60]	; (8000b28 <wate+0x5c>)
 8000aec:	f000 fc52 	bl	8001394 <pinwrite>
	pinwrite(GPIOB, pin7,HIGH);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2107      	movs	r1, #7
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <wate+0x5c>)
 8000af6:	f000 fc4d 	bl	8001394 <pinwrite>
	//C floating
	pinwrite(GPIOB, pin8,LOW);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2108      	movs	r1, #8
 8000afe:	480a      	ldr	r0, [pc, #40]	; (8000b28 <wate+0x5c>)
 8000b00:	f000 fc48 	bl	8001394 <pinwrite>
	pinwrite(GPIOB, pin5,HIGH);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2105      	movs	r1, #5
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <wate+0x5c>)
 8000b0a:	f000 fc43 	bl	8001394 <pinwrite>
	TIMER_ISR(TIM3,MOTOR_PWM_LOW, U_us, clk, state);
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <wate+0x60>)
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <wate+0x64>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <wate+0x68>)
 8000b1c:	f000 fd3c 	bl	8001598 <TIMER_ISR>
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40010c00 	.word	0x40010c00
 8000b2c:	08000b39 	.word	0x08000b39
 8000b30:	02255100 	.word	0x02255100
 8000b34:	40000400 	.word	0x40000400

08000b38 <state>:
//*******************************************************
//==================== -HIGH PWM- =======================
//*******************************************************
void state(){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af02      	add	r7, sp, #8
	switch (MOTOR_state) {
 8000b3e:	4b6e      	ldr	r3, [pc, #440]	; (8000cf8 <state+0x1c0>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b05      	cmp	r3, #5
 8000b44:	f200 80ca 	bhi.w	8000cdc <state+0x1a4>
 8000b48:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <state+0x18>)
 8000b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4e:	bf00      	nop
 8000b50:	08000b69 	.word	0x08000b69
 8000b54:	08000ba7 	.word	0x08000ba7
 8000b58:	08000be5 	.word	0x08000be5
 8000b5c:	08000c23 	.word	0x08000c23
 8000b60:	08000c61 	.word	0x08000c61
 8000b64:	08000c9f 	.word	0x08000c9f
	case 0:
		//MOTOR_state++;
		//A h
		pinwrite(GPIOB, pin0,HIGH);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4863      	ldr	r0, [pc, #396]	; (8000cfc <state+0x1c4>)
 8000b6e:	f000 fc11 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2101      	movs	r1, #1
 8000b76:	4861      	ldr	r0, [pc, #388]	; (8000cfc <state+0x1c4>)
 8000b78:	f000 fc0c 	bl	8001394 <pinwrite>
		//B floating
		pinwrite(GPIOB, pin10,LOW);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	210a      	movs	r1, #10
 8000b80:	485e      	ldr	r0, [pc, #376]	; (8000cfc <state+0x1c4>)
 8000b82:	f000 fc07 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2107      	movs	r1, #7
 8000b8a:	485c      	ldr	r0, [pc, #368]	; (8000cfc <state+0x1c4>)
 8000b8c:	f000 fc02 	bl	8001394 <pinwrite>
		//C LOW
		pinwrite(GPIOB, pin8,LOW);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2108      	movs	r1, #8
 8000b94:	4859      	ldr	r0, [pc, #356]	; (8000cfc <state+0x1c4>)
 8000b96:	f000 fbfd 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin5,LOW);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2105      	movs	r1, #5
 8000b9e:	4857      	ldr	r0, [pc, #348]	; (8000cfc <state+0x1c4>)
 8000ba0:	f000 fbf8 	bl	8001394 <pinwrite>
		break;
 8000ba4:	e09a      	b.n	8000cdc <state+0x1a4>

	case 1:
		//MOTOR_state++;
		//A floating
		pinwrite(GPIOB, pin0,LOW);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4854      	ldr	r0, [pc, #336]	; (8000cfc <state+0x1c4>)
 8000bac:	f000 fbf2 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4851      	ldr	r0, [pc, #324]	; (8000cfc <state+0x1c4>)
 8000bb6:	f000 fbed 	bl	8001394 <pinwrite>
		//B h
		pinwrite(GPIOB, pin10,HIGH);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	210a      	movs	r1, #10
 8000bbe:	484f      	ldr	r0, [pc, #316]	; (8000cfc <state+0x1c4>)
 8000bc0:	f000 fbe8 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2107      	movs	r1, #7
 8000bc8:	484c      	ldr	r0, [pc, #304]	; (8000cfc <state+0x1c4>)
 8000bca:	f000 fbe3 	bl	8001394 <pinwrite>
		//C LOW
		pinwrite(GPIOB, pin8,LOW);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2108      	movs	r1, #8
 8000bd2:	484a      	ldr	r0, [pc, #296]	; (8000cfc <state+0x1c4>)
 8000bd4:	f000 fbde 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin5,LOW);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2105      	movs	r1, #5
 8000bdc:	4847      	ldr	r0, [pc, #284]	; (8000cfc <state+0x1c4>)
 8000bde:	f000 fbd9 	bl	8001394 <pinwrite>
		break;
 8000be2:	e07b      	b.n	8000cdc <state+0x1a4>

	case 2:
		//MOTOR_state++;
		//A l
		pinwrite(GPIOB, pin0,LOW);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	4844      	ldr	r0, [pc, #272]	; (8000cfc <state+0x1c4>)
 8000bea:	f000 fbd3 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin1,LOW);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4842      	ldr	r0, [pc, #264]	; (8000cfc <state+0x1c4>)
 8000bf4:	f000 fbce 	bl	8001394 <pinwrite>
		//B h
		pinwrite(GPIOB, pin10,HIGH);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	210a      	movs	r1, #10
 8000bfc:	483f      	ldr	r0, [pc, #252]	; (8000cfc <state+0x1c4>)
 8000bfe:	f000 fbc9 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8000c02:	2201      	movs	r2, #1
 8000c04:	2107      	movs	r1, #7
 8000c06:	483d      	ldr	r0, [pc, #244]	; (8000cfc <state+0x1c4>)
 8000c08:	f000 fbc4 	bl	8001394 <pinwrite>
		//C floating
		pinwrite(GPIOB, pin8,LOW);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2108      	movs	r1, #8
 8000c10:	483a      	ldr	r0, [pc, #232]	; (8000cfc <state+0x1c4>)
 8000c12:	f000 fbbf 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2105      	movs	r1, #5
 8000c1a:	4838      	ldr	r0, [pc, #224]	; (8000cfc <state+0x1c4>)
 8000c1c:	f000 fbba 	bl	8001394 <pinwrite>
		break;
 8000c20:	e05c      	b.n	8000cdc <state+0x1a4>

	case 3:
		//MOTOR_state++;
		//A l
		pinwrite(GPIOB, pin0,LOW);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	4835      	ldr	r0, [pc, #212]	; (8000cfc <state+0x1c4>)
 8000c28:	f000 fbb4 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin1,LOW);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4832      	ldr	r0, [pc, #200]	; (8000cfc <state+0x1c4>)
 8000c32:	f000 fbaf 	bl	8001394 <pinwrite>
		//B floating
		pinwrite(GPIOB, pin10,LOW);
 8000c36:	2200      	movs	r2, #0
 8000c38:	210a      	movs	r1, #10
 8000c3a:	4830      	ldr	r0, [pc, #192]	; (8000cfc <state+0x1c4>)
 8000c3c:	f000 fbaa 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2107      	movs	r1, #7
 8000c44:	482d      	ldr	r0, [pc, #180]	; (8000cfc <state+0x1c4>)
 8000c46:	f000 fba5 	bl	8001394 <pinwrite>
		//C h
		pinwrite(GPIOB, pin8,HIGH);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2108      	movs	r1, #8
 8000c4e:	482b      	ldr	r0, [pc, #172]	; (8000cfc <state+0x1c4>)
 8000c50:	f000 fba0 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2105      	movs	r1, #5
 8000c58:	4828      	ldr	r0, [pc, #160]	; (8000cfc <state+0x1c4>)
 8000c5a:	f000 fb9b 	bl	8001394 <pinwrite>
		break;
 8000c5e:	e03d      	b.n	8000cdc <state+0x1a4>

	case 4:
		//MOTOR_state++;
		//A floating
		pinwrite(GPIOB, pin0,LOW);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	4825      	ldr	r0, [pc, #148]	; (8000cfc <state+0x1c4>)
 8000c66:	f000 fb95 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4823      	ldr	r0, [pc, #140]	; (8000cfc <state+0x1c4>)
 8000c70:	f000 fb90 	bl	8001394 <pinwrite>
		//B l
		pinwrite(GPIOB, pin10,LOW);
 8000c74:	2200      	movs	r2, #0
 8000c76:	210a      	movs	r1, #10
 8000c78:	4820      	ldr	r0, [pc, #128]	; (8000cfc <state+0x1c4>)
 8000c7a:	f000 fb8b 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin7,LOW);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2107      	movs	r1, #7
 8000c82:	481e      	ldr	r0, [pc, #120]	; (8000cfc <state+0x1c4>)
 8000c84:	f000 fb86 	bl	8001394 <pinwrite>
		//C h
		pinwrite(GPIOB, pin8,HIGH);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2108      	movs	r1, #8
 8000c8c:	481b      	ldr	r0, [pc, #108]	; (8000cfc <state+0x1c4>)
 8000c8e:	f000 fb81 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2105      	movs	r1, #5
 8000c96:	4819      	ldr	r0, [pc, #100]	; (8000cfc <state+0x1c4>)
 8000c98:	f000 fb7c 	bl	8001394 <pinwrite>
		break;
 8000c9c:	e01e      	b.n	8000cdc <state+0x1a4>

	case 5:
		//MOTOR_state=0;
		//A h
		pinwrite(GPIOB, pin0,HIGH);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4816      	ldr	r0, [pc, #88]	; (8000cfc <state+0x1c4>)
 8000ca4:	f000 fb76 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2101      	movs	r1, #1
 8000cac:	4813      	ldr	r0, [pc, #76]	; (8000cfc <state+0x1c4>)
 8000cae:	f000 fb71 	bl	8001394 <pinwrite>
		//B l
		pinwrite(GPIOB, pin10,LOW);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	210a      	movs	r1, #10
 8000cb6:	4811      	ldr	r0, [pc, #68]	; (8000cfc <state+0x1c4>)
 8000cb8:	f000 fb6c 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin7,LOW);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2107      	movs	r1, #7
 8000cc0:	480e      	ldr	r0, [pc, #56]	; (8000cfc <state+0x1c4>)
 8000cc2:	f000 fb67 	bl	8001394 <pinwrite>
		//C floating
		pinwrite(GPIOB, pin8,LOW);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2108      	movs	r1, #8
 8000cca:	480c      	ldr	r0, [pc, #48]	; (8000cfc <state+0x1c4>)
 8000ccc:	f000 fb62 	bl	8001394 <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2105      	movs	r1, #5
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <state+0x1c4>)
 8000cd6:	f000 fb5d 	bl	8001394 <pinwrite>
		break;
 8000cda:	bf00      	nop
	}
	TIMER_ISR(TIM3,MOTOR_PWM, U_us, clk, wate);
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <state+0x1c8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	b299      	uxth	r1, r3
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <state+0x1cc>)
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <state+0x1d0>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4808      	ldr	r0, [pc, #32]	; (8000d0c <state+0x1d4>)
 8000cec:	f000 fc54 	bl	8001598 <TIMER_ISR>

}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000211 	.word	0x20000211
 8000cfc:	40010c00 	.word	0x40010c00
 8000d00:	20000230 	.word	0x20000230
 8000d04:	08000acd 	.word	0x08000acd
 8000d08:	02255100 	.word	0x02255100
 8000d0c:	40000400 	.word	0x40000400

08000d10 <BLDC_init>:
	stop_flage=1;
}
//*******************************************************
//==================== -BLDC_init- ======================
//*******************************************************
void BLDC_init(){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af04      	add	r7, sp, #16
	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 8000d16:	2100      	movs	r1, #0
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 ff1d 	bl	8001b58 <MCAL_speed_init>
	pinmode(GPIOB, pin0,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2100      	movs	r1, #0
 8000d22:	483a      	ldr	r0, [pc, #232]	; (8000e0c <BLDC_init+0xfc>)
 8000d24:	f000 fa54 	bl	80011d0 <pinmode>
	pinmode(GPIOB, pin1,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4837      	ldr	r0, [pc, #220]	; (8000e0c <BLDC_init+0xfc>)
 8000d2e:	f000 fa4f 	bl	80011d0 <pinmode>
	pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000d32:	2201      	movs	r2, #1
 8000d34:	210a      	movs	r1, #10
 8000d36:	4835      	ldr	r0, [pc, #212]	; (8000e0c <BLDC_init+0xfc>)
 8000d38:	f000 fa4a 	bl	80011d0 <pinmode>
	pinmode(GPIOB, pin7,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2107      	movs	r1, #7
 8000d40:	4832      	ldr	r0, [pc, #200]	; (8000e0c <BLDC_init+0xfc>)
 8000d42:	f000 fa45 	bl	80011d0 <pinmode>
	pinmode(GPIOB, pin8,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2108      	movs	r1, #8
 8000d4a:	4830      	ldr	r0, [pc, #192]	; (8000e0c <BLDC_init+0xfc>)
 8000d4c:	f000 fa40 	bl	80011d0 <pinmode>
	pinmode(GPIOB, pin5,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2105      	movs	r1, #5
 8000d54:	482d      	ldr	r0, [pc, #180]	; (8000e0c <BLDC_init+0xfc>)
 8000d56:	f000 fa3b 	bl	80011d0 <pinmode>
	ADC_INIT(ADC1, ADC_STATE_START);
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	482c      	ldr	r0, [pc, #176]	; (8000e10 <BLDC_init+0x100>)
 8000d5e:	f000 ffdf 	bl	8001d20 <ADC_INIT>
	EXTI(GPIOA, pin0,EXTI_Trigger_RisingAndFalling, s1);
 8000d62:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <BLDC_init+0x104>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	2100      	movs	r1, #0
 8000d68:	482b      	ldr	r0, [pc, #172]	; (8000e18 <BLDC_init+0x108>)
 8000d6a:	f001 f89d 	bl	8001ea8 <EXTI>
	EXTI(GPIOA, pin1,EXTI_Trigger_RisingAndFalling, s2);
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <BLDC_init+0x10c>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	2101      	movs	r1, #1
 8000d74:	4828      	ldr	r0, [pc, #160]	; (8000e18 <BLDC_init+0x108>)
 8000d76:	f001 f897 	bl	8001ea8 <EXTI>
	EXTI(GPIOA, pin2,EXTI_Trigger_RisingAndFalling, s3);
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <BLDC_init+0x110>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	2102      	movs	r1, #2
 8000d80:	4825      	ldr	r0, [pc, #148]	; (8000e18 <BLDC_init+0x108>)
 8000d82:	f001 f891 	bl	8001ea8 <EXTI>
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,clk);
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <BLDC_init+0x114>)
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2300      	movs	r3, #0
 8000d96:	2200      	movs	r2, #0
 8000d98:	210c      	movs	r1, #12
 8000d9a:	4823      	ldr	r0, [pc, #140]	; (8000e28 <BLDC_init+0x118>)
 8000d9c:	f001 fe2a 	bl	80029f4 <USART_INIT>
	pinmode(GPIOA, pin8,GPIO_MODE_INPUT_PU);
 8000da0:	2218      	movs	r2, #24
 8000da2:	2108      	movs	r1, #8
 8000da4:	481c      	ldr	r0, [pc, #112]	; (8000e18 <BLDC_init+0x108>)
 8000da6:	f000 fa13 	bl	80011d0 <pinmode>

	if(READ_PIN(GPIOA, pin8)==0){
 8000daa:	2108      	movs	r1, #8
 8000dac:	481a      	ldr	r0, [pc, #104]	; (8000e18 <BLDC_init+0x108>)
 8000dae:	f000 fb15 	bl	80013dc <READ_PIN>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d103      	bne.n	8000dc0 <BLDC_init+0xb0>
		MOTOR_DIRECTION=1;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <BLDC_init+0x11c>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	e002      	b.n	8000dc6 <BLDC_init+0xb6>
	}
	else {
		MOTOR_DIRECTION=0;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <BLDC_init+0x11c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
	}

	s1();
 8000dc6:	f7ff fcc7 	bl	8000758 <s1>
	s2();
 8000dca:	f7ff fcff 	bl	80007cc <s2>
	s3();
 8000dce:	f7ff fd35 	bl	800083c <s3>
	//soft start
	for(int i=0;i<100;i++){
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	e00d      	b.n	8000df4 <BLDC_init+0xe4>
		MOTOR_PWM+=1;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <BLDC_init+0x120>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <BLDC_init+0x120>)
 8000de0:	6013      	str	r3, [r2, #0]
		delay(2, U_ms, clk);
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <BLDC_init+0x114>)
 8000de4:	2100      	movs	r1, #0
 8000de6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dea:	f000 fb0b 	bl	8001404 <delay>
	for(int i=0;i<100;i++){
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3301      	adds	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b63      	cmp	r3, #99	; 0x63
 8000df8:	ddee      	ble.n	8000dd8 <BLDC_init+0xc8>
	}
	USART_READ_INTERRUPT_EN(USART1, read_string);
 8000dfa:	490e      	ldr	r1, [pc, #56]	; (8000e34 <BLDC_init+0x124>)
 8000dfc:	480a      	ldr	r0, [pc, #40]	; (8000e28 <BLDC_init+0x118>)
 8000dfe:	f001 ff3f 	bl	8002c80 <USART_READ_INTERRUPT_EN>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	40012400 	.word	0x40012400
 8000e14:	08000759 	.word	0x08000759
 8000e18:	40010800 	.word	0x40010800
 8000e1c:	080007cd 	.word	0x080007cd
 8000e20:	0800083d 	.word	0x0800083d
 8000e24:	02255100 	.word	0x02255100
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	20000242 	.word	0x20000242
 8000e30:	20000230 	.word	0x20000230
 8000e34:	08000e39 	.word	0x08000e39

08000e38 <read_string>:
void read_string (){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

	USART_READ(USART1,&ch);
 8000e3c:	4919      	ldr	r1, [pc, #100]	; (8000ea4 <read_string+0x6c>)
 8000e3e:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <read_string+0x70>)
 8000e40:	f001 febc 	bl	8002bbc <USART_READ>

	if(ch=='$'){
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <read_string+0x6c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b24      	cmp	r3, #36	; 0x24
 8000e4a:	d105      	bne.n	8000e58 <read_string+0x20>
		serial_flag=1;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <read_string+0x74>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
		index1=0;
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <read_string+0x78>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
	}
	if(ch=='e'){
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <read_string+0x6c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b65      	cmp	r3, #101	; 0x65
 8000e5e:	d10e      	bne.n	8000e7e <read_string+0x46>
		serial_flag=0;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <read_string+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
		string_data[index1]='\n';
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <read_string+0x78>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <read_string+0x7c>)
 8000e6e:	210a      	movs	r1, #10
 8000e70:	5499      	strb	r1, [r3, r2]
		string_data[index1+1]=0;
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <read_string+0x78>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <read_string+0x7c>)
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	54d1      	strb	r1, [r2, r3]

	}

	if(serial_flag==1){
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <read_string+0x74>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d10c      	bne.n	8000ea0 <read_string+0x68>
		string_data[index1]=ch;
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <read_string+0x78>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <read_string+0x6c>)
 8000e8e:	7819      	ldrb	r1, [r3, #0]
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <read_string+0x7c>)
 8000e92:	5499      	strb	r1, [r3, r2]
		index1++;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <read_string+0x78>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <read_string+0x78>)
 8000e9e:	701a      	strb	r2, [r3, #0]
	}
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000268 	.word	0x20000268
 8000ea8:	40013800 	.word	0x40013800
 8000eac:	20000212 	.word	0x20000212
 8000eb0:	20000243 	.word	0x20000243
 8000eb4:	20000238 	.word	0x20000238

08000eb8 <main>:
//*******************************************************
//==================== -MAIN Fun- =======================
//*******************************************************
int main (){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

	BLDC_init();
 8000ebc:	f7ff ff28 	bl	8000d10 <BLDC_init>

	while(1){
		delay(270, U_ms, clk);
 8000ec0:	4a54      	ldr	r2, [pc, #336]	; (8001014 <main+0x15c>)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4854      	ldr	r0, [pc, #336]	; (8001018 <main+0x160>)
 8000ec6:	f000 fa9d 	bl	8001404 <delay>
		//direction
		if(READ_PIN(GPIOA, pin8)==0){
 8000eca:	2108      	movs	r1, #8
 8000ecc:	4853      	ldr	r0, [pc, #332]	; (800101c <main+0x164>)
 8000ece:	f000 fa85 	bl	80013dc <READ_PIN>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d103      	bne.n	8000ee0 <main+0x28>
			MOTOR_DIRECTION=1;
 8000ed8:	4b51      	ldr	r3, [pc, #324]	; (8001020 <main+0x168>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e002      	b.n	8000ee6 <main+0x2e>
		}
		else {
			MOTOR_DIRECTION=0;
 8000ee0:	4b4f      	ldr	r3, [pc, #316]	; (8001020 <main+0x168>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
		}

		//read speed value
		adcread=atoi(string_data+1)*10;//ADC_READ(ADC1, ADC_pin_PA5)/2;
 8000ee6:	4b4f      	ldr	r3, [pc, #316]	; (8001024 <main+0x16c>)
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 f903 	bl	80030f4 <atoi>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b4b      	ldr	r3, [pc, #300]	; (8001028 <main+0x170>)
 8000efc:	601a      	str	r2, [r3, #0]

		MOTOR_SPEED_RPM=600000000/(TIME_CALC*NUM_OF_HALLSENSOR_PULS);
 8000efe:	4b4b      	ldr	r3, [pc, #300]	; (800102c <main+0x174>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4613      	mov	r3, r2
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b48      	ldr	r3, [pc, #288]	; (8001030 <main+0x178>)
 8000f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b47      	ldr	r3, [pc, #284]	; (8001034 <main+0x17c>)
 8000f16:	601a      	str	r2, [r3, #0]
		TIME_CALC=0;
 8000f18:	4b44      	ldr	r3, [pc, #272]	; (800102c <main+0x174>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]

		//filter
		if( (abs(MOTOR_SPEED_RPM-last_read_motor_speed))>2100 ){
 8000f1e:	4b45      	ldr	r3, [pc, #276]	; (8001034 <main+0x17c>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b45      	ldr	r3, [pc, #276]	; (8001038 <main+0x180>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	bfb8      	it	lt
 8000f2c:	425b      	neglt	r3, r3
 8000f2e:	f640 0234 	movw	r2, #2100	; 0x834
 8000f32:	4293      	cmp	r3, r2
 8000f34:	dd04      	ble.n	8000f40 <main+0x88>
			MOTOR_SPEED_RPM=last_read_motor_speed;
 8000f36:	4b40      	ldr	r3, [pc, #256]	; (8001038 <main+0x180>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a3e      	ldr	r2, [pc, #248]	; (8001034 <main+0x17c>)
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e003      	b.n	8000f48 <main+0x90>
		}
		else {
			last_read_motor_speed=MOTOR_SPEED_RPM;
 8000f40:	4b3c      	ldr	r3, [pc, #240]	; (8001034 <main+0x17c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a3c      	ldr	r2, [pc, #240]	; (8001038 <main+0x180>)
 8000f46:	6013      	str	r3, [r2, #0]
		}
		//pid
		error=MOTOR_SPEED_RPM-adcread;
 8000f48:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <main+0x17c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b36      	ldr	r3, [pc, #216]	; (8001028 <main+0x170>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b39      	ldr	r3, [pc, #228]	; (800103c <main+0x184>)
 8000f58:	601a      	str	r2, [r3, #0]
		if(error<0){
 8000f5a:	4b38      	ldr	r3, [pc, #224]	; (800103c <main+0x184>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da04      	bge.n	8000f6c <main+0xb4>
			error=-error;
 8000f62:	4b36      	ldr	r3, [pc, #216]	; (800103c <main+0x184>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	425b      	negs	r3, r3
 8000f68:	4a34      	ldr	r2, [pc, #208]	; (800103c <main+0x184>)
 8000f6a:	6013      	str	r3, [r2, #0]
		}

		if(MOTOR_SPEED_RPM<adcread){
 8000f6c:	4b31      	ldr	r3, [pc, #196]	; (8001034 <main+0x17c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <main+0x170>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d215      	bcs.n	8000fa6 <main+0xee>
			MOTOR_PWM+=(error/8);
 8000f7a:	4b30      	ldr	r3, [pc, #192]	; (800103c <main+0x184>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da00      	bge.n	8000f84 <main+0xcc>
 8000f82:	3307      	adds	r3, #7
 8000f84:	10db      	asrs	r3, r3, #3
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <main+0x188>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a2c      	ldr	r2, [pc, #176]	; (8001040 <main+0x188>)
 8000f90:	6013      	str	r3, [r2, #0]
			if(MOTOR_PWM>=MAX_PWM){
 8000f92:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <main+0x188>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f9a:	db1f      	blt.n	8000fdc <main+0x124>
				MOTOR_PWM=MAX_PWM;
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <main+0x188>)
 8000f9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e01a      	b.n	8000fdc <main+0x124>
			}
		}
		else if(MOTOR_SPEED_RPM>adcread){
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <main+0x17c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <main+0x170>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d913      	bls.n	8000fdc <main+0x124>
			MOTOR_PWM-=(error/8);
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <main+0x184>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da00      	bge.n	8000fbe <main+0x106>
 8000fbc:	3307      	adds	r3, #7
 8000fbe:	10db      	asrs	r3, r3, #3
 8000fc0:	425b      	negs	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <main+0x188>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <main+0x188>)
 8000fcc:	6013      	str	r3, [r2, #0]
			if(MOTOR_PWM<=5){
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <main+0x188>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	dc02      	bgt.n	8000fdc <main+0x124>
				MOTOR_PWM=5;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <main+0x188>)
 8000fd8:	2205      	movs	r2, #5
 8000fda:	601a      	str	r2, [r3, #0]
			}
		}


		//display
		sprintf (buf, "%d",MOTOR_SPEED_RPM/10);
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <main+0x17c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <main+0x18c>)
 8000fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe6:	1092      	asrs	r2, r2, #2
 8000fe8:	17db      	asrs	r3, r3, #31
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	4916      	ldr	r1, [pc, #88]	; (8001048 <main+0x190>)
 8000ff0:	4816      	ldr	r0, [pc, #88]	; (800104c <main+0x194>)
 8000ff2:	f002 f8ad 	bl	8003150 <siprintf>
		USART_SEND_STRING(USART1,buf);
 8000ff6:	4915      	ldr	r1, [pc, #84]	; (800104c <main+0x194>)
 8000ff8:	4815      	ldr	r0, [pc, #84]	; (8001050 <main+0x198>)
 8000ffa:	f001 fe09 	bl	8002c10 <USART_SEND_STRING>
		delay(3, U_ms, clk);
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <main+0x15c>)
 8001000:	2100      	movs	r1, #0
 8001002:	4814      	ldr	r0, [pc, #80]	; (8001054 <main+0x19c>)
 8001004:	f000 f9fe 	bl	8001404 <delay>
		USART_SEND_STRING(USART1," RPM \n");
 8001008:	4913      	ldr	r1, [pc, #76]	; (8001058 <main+0x1a0>)
 800100a:	4811      	ldr	r0, [pc, #68]	; (8001050 <main+0x198>)
 800100c:	f001 fe00 	bl	8002c10 <USART_SEND_STRING>
		delay(270, U_ms, clk);
 8001010:	e756      	b.n	8000ec0 <main+0x8>
 8001012:	bf00      	nop
 8001014:	02255100 	.word	0x02255100
 8001018:	43870000 	.word	0x43870000
 800101c:	40010800 	.word	0x40010800
 8001020:	20000242 	.word	0x20000242
 8001024:	20000239 	.word	0x20000239
 8001028:	2000024c 	.word	0x2000024c
 800102c:	20000264 	.word	0x20000264
 8001030:	23c34600 	.word	0x23c34600
 8001034:	20000250 	.word	0x20000250
 8001038:	20000234 	.word	0x20000234
 800103c:	20000254 	.word	0x20000254
 8001040:	20000230 	.word	0x20000230
 8001044:	66666667 	.word	0x66666667
 8001048:	08003af8 	.word	0x08003af8
 800104c:	20000258 	.word	0x20000258
 8001050:	40013800 	.word	0x40013800
 8001054:	40400000 	.word	0x40400000
 8001058:	08003afc 	.word	0x08003afc

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800108c:	f002 f836 	bl	80030fc <__errno>
 8001090:	4602      	mov	r2, r0
 8001092:	230c      	movs	r3, #12
 8001094:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e009      	b.n	80010b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <_sbrk+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20005000 	.word	0x20005000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	20000214 	.word	0x20000214
 80010c4:	20000318 	.word	0x20000318

080010c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <LoopForever+0x6>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	; (8001108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <LoopForever+0xe>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	; (8001114 <LoopForever+0x16>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010f6:	f002 f807 	bl	8003108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fa:	f7ff fedd 	bl	8000eb8 <main>

080010fe <LoopForever>:

LoopForever:
    b LoopForever
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
  ldr   r0, =_estack
 8001100:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800110c:	08003c4c 	.word	0x08003c4c
  ldr r2, =_sbss
 8001110:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001114:	20000314 	.word	0x20000314

08001118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC1_2_IRQHandler>

0800111a <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 800111a:	b480      	push	{r7}
 800111c:	b085      	sub	sp, #20
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <getposition+0x14>
		rval =0;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <getposition+0x1e>
		rval =4;
 8001134:	2304      	movs	r3, #4
 8001136:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d101      	bne.n	8001142 <getposition+0x28>
		rval =8;
 800113e:	2308      	movs	r3, #8
 8001140:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2b03      	cmp	r3, #3
 8001146:	d101      	bne.n	800114c <getposition+0x32>
		rval =12;
 8001148:	230c      	movs	r3, #12
 800114a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d101      	bne.n	8001156 <getposition+0x3c>
		rval =16;
 8001152:	2310      	movs	r3, #16
 8001154:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	2b05      	cmp	r3, #5
 800115a:	d101      	bne.n	8001160 <getposition+0x46>
		rval =20;
 800115c:	2314      	movs	r3, #20
 800115e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	2b06      	cmp	r3, #6
 8001164:	d101      	bne.n	800116a <getposition+0x50>
		rval =24;
 8001166:	2318      	movs	r3, #24
 8001168:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	2b07      	cmp	r3, #7
 800116e:	d101      	bne.n	8001174 <getposition+0x5a>
		rval =28;
 8001170:	231c      	movs	r3, #28
 8001172:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	2b08      	cmp	r3, #8
 8001178:	d101      	bne.n	800117e <getposition+0x64>
		rval =0;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	2b09      	cmp	r3, #9
 8001182:	d101      	bne.n	8001188 <getposition+0x6e>
		rval =4;
 8001184:	2304      	movs	r3, #4
 8001186:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	2b0a      	cmp	r3, #10
 800118c:	d101      	bne.n	8001192 <getposition+0x78>
		rval =8;
 800118e:	2308      	movs	r3, #8
 8001190:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	2b0b      	cmp	r3, #11
 8001196:	d101      	bne.n	800119c <getposition+0x82>
		rval =12;
 8001198:	230c      	movs	r3, #12
 800119a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	2b0c      	cmp	r3, #12
 80011a0:	d101      	bne.n	80011a6 <getposition+0x8c>
		rval =16;
 80011a2:	2310      	movs	r3, #16
 80011a4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	2b0d      	cmp	r3, #13
 80011aa:	d101      	bne.n	80011b0 <getposition+0x96>
		rval =20;
 80011ac:	2314      	movs	r3, #20
 80011ae:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	2b0e      	cmp	r3, #14
 80011b4:	d101      	bne.n	80011ba <getposition+0xa0>
		rval =24;
 80011b6:	2318      	movs	r3, #24
 80011b8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d101      	bne.n	80011c4 <getposition+0xaa>
		rval =28;
 80011c0:	231c      	movs	r3, #28
 80011c2:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]


}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	460b      	mov	r3, r1
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4a69      	ldr	r2, [pc, #420]	; (8001388 <pinmode+0x1b8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d106      	bne.n	80011f4 <pinmode+0x24>
		GPIOA_Clock_Enable();
 80011e6:	4b69      	ldr	r3, [pc, #420]	; (800138c <pinmode+0x1bc>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	4a68      	ldr	r2, [pc, #416]	; (800138c <pinmode+0x1bc>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6193      	str	r3, [r2, #24]
 80011f2:	e010      	b.n	8001216 <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4a66      	ldr	r2, [pc, #408]	; (8001390 <pinmode+0x1c0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d106      	bne.n	800120a <pinmode+0x3a>
		GPIOB_Clock_Enable();
 80011fc:	4b63      	ldr	r3, [pc, #396]	; (800138c <pinmode+0x1bc>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a62      	ldr	r2, [pc, #392]	; (800138c <pinmode+0x1bc>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	e005      	b.n	8001216 <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 800120a:	4b60      	ldr	r3, [pc, #384]	; (800138c <pinmode+0x1bc>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4a5f      	ldr	r2, [pc, #380]	; (800138c <pinmode+0x1bc>)
 8001210:	f043 0310 	orr.w	r3, r3, #16
 8001214:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8001216:	897b      	ldrh	r3, [r7, #10]
 8001218:	2b07      	cmp	r3, #7
 800121a:	d856      	bhi.n	80012ca <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 800121c:	897b      	ldrh	r3, [r7, #10]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff7b 	bl	800111a <getposition>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	230f      	movs	r3, #15
 800122a:	4093      	lsls	r3, r2
 800122c:	43da      	mvns	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	401a      	ands	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b08      	cmp	r3, #8
 800123c:	d002      	beq.n	8001244 <pinmode+0x74>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b18      	cmp	r3, #24
 8001242:	d133      	bne.n	80012ac <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b18      	cmp	r3, #24
 8001248:	d117      	bne.n	800127a <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 800124a:	897b      	ldrh	r3, [r7, #10]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff64 	bl	800111a <getposition>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	2308      	movs	r3, #8
 8001258:	fa03 f202 	lsl.w	r2, r3, r2
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	431a      	orrs	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	897a      	ldrh	r2, [r7, #10]
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001278:	e081      	b.n	800137e <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 800127a:	897b      	ldrh	r3, [r7, #10]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff4c 	bl	800111a <getposition>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	2308      	movs	r3, #8
 8001288:	fa03 f202 	lsl.w	r2, r3, r2
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	431a      	orrs	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	897a      	ldrh	r2, [r7, #10]
 800129c:	2101      	movs	r1, #1
 800129e:	fa01 f202 	lsl.w	r2, r1, r2
 80012a2:	43d2      	mvns	r2, r2
 80012a4:	401a      	ands	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80012aa:	e068      	b.n	800137e <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 80012ac:	897b      	ldrh	r3, [r7, #10]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff33 	bl	800111a <getposition>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	fa03 f202 	lsl.w	r2, r3, r2
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	601a      	str	r2, [r3, #0]

	}



}
 80012c8:	e059      	b.n	800137e <pinmode+0x1ae>
	else if(pin>7){
 80012ca:	897b      	ldrh	r3, [r7, #10]
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	d956      	bls.n	800137e <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 80012d0:	897b      	ldrh	r3, [r7, #10]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff21 	bl	800111a <getposition>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	230f      	movs	r3, #15
 80012de:	4093      	lsls	r3, r2
 80012e0:	43da      	mvns	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	401a      	ands	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d002      	beq.n	80012f8 <pinmode+0x128>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b18      	cmp	r3, #24
 80012f6:	d133      	bne.n	8001360 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b18      	cmp	r3, #24
 80012fc:	d117      	bne.n	800132e <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 80012fe:	897b      	ldrh	r3, [r7, #10]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff0a 	bl	800111a <getposition>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	2308      	movs	r3, #8
 800130c:	fa03 f202 	lsl.w	r2, r3, r2
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	897a      	ldrh	r2, [r7, #10]
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	431a      	orrs	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800132c:	e027      	b.n	800137e <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800132e:	897b      	ldrh	r3, [r7, #10]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fef2 	bl	800111a <getposition>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	2308      	movs	r3, #8
 800133c:	fa03 f202 	lsl.w	r2, r3, r2
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	431a      	orrs	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	897a      	ldrh	r2, [r7, #10]
 8001350:	2101      	movs	r1, #1
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	43d2      	mvns	r2, r2
 8001358:	401a      	ands	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800135e:	e00e      	b.n	800137e <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8001360:	897b      	ldrh	r3, [r7, #10]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fed9 	bl	800111a <getposition>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	fa03 f202 	lsl.w	r2, r3, r2
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	431a      	orrs	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	605a      	str	r2, [r3, #4]
}
 800137c:	e7ff      	b.n	800137e <pinmode+0x1ae>
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40010800 	.word	0x40010800
 800138c:	40021000 	.word	0x40021000
 8001390:	40010c00 	.word	0x40010c00

08001394 <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_typeDef* GPIOx,uint16_t pin,uint8_t status){
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <pinwrite+0x2a>
		GPIOx->GPIOx_ODR |=(1<<pin);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f202 	lsl.w	r2, r1, r2
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->GPIOx_ODR &=~(1<<pin);

}
 80013bc:	e009      	b.n	80013d2 <pinwrite+0x3e>
	else GPIOx->GPIOx_ODR &=~(1<<pin);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	43d2      	mvns	r2, r2
 80013cc:	401a      	ands	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60da      	str	r2, [r3, #12]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <READ_PIN>:
 * @param [in]      - Pin: GPIOx PIN Number
 * @retval          - uint8_t
 * Note             - none
 */

uint8_t READ_PIN(GPIO_typeDef* GPIOx, uint16_t pin){
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
	return (GPIOx->GPIOx_IDR>>pin)&1;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	fa22 f303 	lsr.w	r3, r2, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(float time,uint8_t U,uint32_t clk){
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b08b      	sub	sp, #44	; 0x2c
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	460b      	mov	r3, r1
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	72fb      	strb	r3, [r7, #11]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 8001412:	4b5b      	ldr	r3, [pc, #364]	; (8001580 <delay+0x17c>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a5a      	ldr	r2, [pc, #360]	; (8001580 <delay+0x17c>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 800141e:	4b59      	ldr	r3, [pc, #356]	; (8001584 <delay+0x180>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b57      	ldr	r3, [pc, #348]	; (8001584 <delay+0x180>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0201 	bic.w	r2, r2, #1
 800142c:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 8001438:	2301      	movs	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
	uint32_t unit =1000;
 800143c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001440:	61bb      	str	r3, [r7, #24]
	uint8_t  increase=2;
 8001442:	2302      	movs	r3, #2
 8001444:	75fb      	strb	r3, [r7, #23]

	if (U == 0){
 8001446:	7afb      	ldrb	r3, [r7, #11]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10f      	bne.n	800146c <delay+0x68>
		unit = 1000;
 800144c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001450:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 100;
 8001452:	494d      	ldr	r1, [pc, #308]	; (8001588 <delay+0x184>)
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f7ff f955 	bl	8000704 <__aeabi_fcmpgt>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <delay+0x62>
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	75fb      	strb	r3, [r7, #23]
 8001464:	e045      	b.n	80014f2 <delay+0xee>
		else increase = 10;
 8001466:	230a      	movs	r3, #10
 8001468:	75fb      	strb	r3, [r7, #23]
 800146a:	e042      	b.n	80014f2 <delay+0xee>
	}
	else {
		unit = 1000000;
 800146c:	4b47      	ldr	r3, [pc, #284]	; (800158c <delay+0x188>)
 800146e:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 10;
 8001470:	4945      	ldr	r1, [pc, #276]	; (8001588 <delay+0x184>)
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff f946 	bl	8000704 <__aeabi_fcmpgt>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <delay+0x80>
 800147e:	230a      	movs	r3, #10
 8001480:	75fb      	strb	r3, [r7, #23]
 8001482:	e036      	b.n	80014f2 <delay+0xee>
		else increase = 5;
 8001484:	2305      	movs	r3, #5
 8001486:	75fb      	strb	r3, [r7, #23]
	}

	while(user_flage==1){
 8001488:	e033      	b.n	80014f2 <delay+0xee>
		user_top = (clk/unit*time)/( user_pre );
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe ff22 	bl	80002dc <__aeabi_ui2f>
 8001498:	4603      	mov	r3, r0
 800149a:	68f9      	ldr	r1, [r7, #12]
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ff75 	bl	800038c <__aeabi_fmul>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461c      	mov	r4, r3
 80014a6:	69f8      	ldr	r0, [r7, #28]
 80014a8:	f7fe ff18 	bl	80002dc <__aeabi_ui2f>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff f81f 	bl	80004f4 <__aeabi_fdiv>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f92d 	bl	8000718 <__aeabi_f2uiz>
 80014be:	4603      	mov	r3, r0
 80014c0:	623b      	str	r3, [r7, #32]
		if(user_top>=32000){
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80014c8:	d310      	bcc.n	80014ec <delay+0xe8>

			if(user_pre>65530){
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d906      	bls.n	80014e2 <delay+0xde>
				user_pre=65530;
 80014d4:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 80014d8:	61fb      	str	r3, [r7, #28]
				user_flage=0;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014e0:	e007      	b.n	80014f2 <delay+0xee>
			}
			else user_pre+=increase;
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	4413      	add	r3, r2
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e002      	b.n	80014f2 <delay+0xee>

		}
		else{
			user_flage=0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(user_flage==1){
 80014f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d0c7      	beq.n	800148a <delay+0x86>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <delay+0x180>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <delay+0x180>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <delay+0x180>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <delay+0x180>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0204 	orr.w	r2, r2, #4
 8001518:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <delay+0x180>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <delay+0x180>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f042 0201 	orr.w	r2, r2, #1
 8001528:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <delay+0x180>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6a3a      	ldr	r2, [r7, #32]
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <delay+0x180>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	3a01      	subs	r2, #1
 800153a:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <delay+0x180>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <delay+0x180>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <delay+0x180>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <delay+0x180>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <delay+0x18c>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <delay+0x190>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <delay+0x190>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 800156e:	bf00      	nop
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <delay+0x18c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1fb      	bne.n	8001570 <delay+0x16c>

	}
}
 8001578:	bf00      	nop
 800157a:	372c      	adds	r7, #44	; 0x2c
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	40021000 	.word	0x40021000
 8001584:	20000020 	.word	0x20000020
 8001588:	453b8000 	.word	0x453b8000
 800158c:	000f4240 	.word	0x000f4240
 8001590:	2000001c 	.word	0x2000001c
 8001594:	e000e100 	.word	0xe000e100

08001598 <TIMER_ISR>:

//==================================================================================================

void TIMER_ISR(TIMERS_typeDef* ISR_TIMER,uint16_t time_ms,uint8_t U,uint32_t clk,void (*calback) (void)){
 8001598:	b480      	push	{r7}
 800159a:	b08b      	sub	sp, #44	; 0x2c
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	817b      	strh	r3, [r7, #10]
 80015a6:	4613      	mov	r3, r2
 80015a8:	727b      	strb	r3, [r7, #9]

	TIMER3_CLOCK_Enable();//enable timer3 clock
 80015aa:	4b49      	ldr	r3, [pc, #292]	; (80016d0 <TIMER_ISR+0x138>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a48      	ldr	r2, [pc, #288]	; (80016d0 <TIMER_ISR+0x138>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	61d3      	str	r3, [r2, #28]
	ISR_TIMER->TIMx_CR1 &=~(1<<0);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 0201 	bic.w	r2, r3, #1
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	601a      	str	r2, [r3, #0]
	ISRcalback[0] = calback;
 80015c2:	4a44      	ldr	r2, [pc, #272]	; (80016d4 <TIMER_ISR+0x13c>)
 80015c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c6:	6013      	str	r3, [r2, #0]
	ISR_TIMER_COPY=ISR_TIMER;
 80015c8:	4a43      	ldr	r2, [pc, #268]	; (80016d8 <TIMER_ISR+0x140>)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6013      	str	r3, [r2, #0]

	char user_flage=1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 80015d8:	2301      	movs	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
	uint8_t  increase=2;
 80015dc:	2302      	movs	r3, #2
 80015de:	76fb      	strb	r3, [r7, #27]
	uint32_t unit =1000;
 80015e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e4:	617b      	str	r3, [r7, #20]
	if (U == 0){
 80015e6:	7a7b      	ldrb	r3, [r7, #9]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10d      	bne.n	8001608 <TIMER_ISR+0x70>
			unit = 1000;
 80015ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f0:	617b      	str	r3, [r7, #20]
			if (time_ms > 3000)increase = 100;
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d902      	bls.n	8001602 <TIMER_ISR+0x6a>
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	76fb      	strb	r3, [r7, #27]
 8001600:	e032      	b.n	8001668 <TIMER_ISR+0xd0>
			else increase = 10;
 8001602:	230a      	movs	r3, #10
 8001604:	76fb      	strb	r3, [r7, #27]
 8001606:	e02f      	b.n	8001668 <TIMER_ISR+0xd0>
		}
		else {
			unit = 1000000;
 8001608:	4b34      	ldr	r3, [pc, #208]	; (80016dc <TIMER_ISR+0x144>)
 800160a:	617b      	str	r3, [r7, #20]
			if (time_ms > 3000)increase = 10;
 800160c:	897b      	ldrh	r3, [r7, #10]
 800160e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001612:	4293      	cmp	r3, r2
 8001614:	d902      	bls.n	800161c <TIMER_ISR+0x84>
 8001616:	230a      	movs	r3, #10
 8001618:	76fb      	strb	r3, [r7, #27]
 800161a:	e025      	b.n	8001668 <TIMER_ISR+0xd0>
			else increase = 5;
 800161c:	2305      	movs	r3, #5
 800161e:	76fb      	strb	r3, [r7, #27]
		}

		while(user_flage==1){
 8001620:	e022      	b.n	8001668 <TIMER_ISR+0xd0>
			user_top = (clk/unit*time_ms)/( user_pre );
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	897a      	ldrh	r2, [r7, #10]
 800162c:	fb02 f203 	mul.w	r2, r2, r3
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	623b      	str	r3, [r7, #32]
			if(user_top>=32000){
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800163e:	d310      	bcc.n	8001662 <TIMER_ISR+0xca>

				if(user_pre>65530){
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001646:	4293      	cmp	r3, r2
 8001648:	d906      	bls.n	8001658 <TIMER_ISR+0xc0>
					user_pre=65530;
 800164a:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800164e:	61fb      	str	r3, [r7, #28]
					user_flage=0;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001656:	e007      	b.n	8001668 <TIMER_ISR+0xd0>
				}
				else user_pre+=increase;
 8001658:	7efb      	ldrb	r3, [r7, #27]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	4413      	add	r3, r2
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	e002      	b.n	8001668 <TIMER_ISR+0xd0>

			}
			else{
				user_flage=0;
 8001662:	2300      	movs	r3, #0
 8001664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(user_flage==1){
 8001668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800166c:	2b01      	cmp	r3, #1
 800166e:	d0d8      	beq.n	8001622 <TIMER_ISR+0x8a>
			}
		}



	ISR_TIMER->TIMx_CR1 &=~(1<<0);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 0201 	bic.w	r2, r3, #1
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	601a      	str	r2, [r3, #0]

	ISR_TIMER->TIMx_CR1  |=(1<<2);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f043 0204 	orr.w	r2, r3, #4
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	601a      	str	r2, [r3, #0]

	ISR_TIMER->TIMx_DIER |=(1<<0);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	60da      	str	r2, [r3, #12]

	ISR_TIMER->TIMx_ARR=user_top;//frec peak value
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a3a      	ldr	r2, [r7, #32]
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c

	ISR_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	1e5a      	subs	r2, r3, #1
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28

	ISR_TIMER->TIMx_EGR |=(1<<0);//		Bit 0 UG: Update generation
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	615a      	str	r2, [r3, #20]

	ISR_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f043 0201 	orr.w	r2, r3, #1
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	601a      	str	r2, [r3, #0]

	NVIC_TIM3_global_interrupt_Enable;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <TIMER_ISR+0x148>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <TIMER_ISR+0x148>)
 80016c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016c4:	6013      	str	r3, [r2, #0]

}
 80016c6:	bf00      	nop
 80016c8:	372c      	adds	r7, #44	; 0x2c
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000
 80016d4:	2000026c 	.word	0x2000026c
 80016d8:	20000278 	.word	0x20000278
 80016dc:	000f4240 	.word	0x000f4240
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <TIME_CALCULATION>:
//======================================================================================================

uint32_t TIME_CALCULATION(uint32_t clk,uint8_t TIMER_ST){
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
	if(TIMER_ST==TIMER_START){
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d132      	bne.n	800175c <TIME_CALCULATION+0x78>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <TIME_CALCULATION+0xd0>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a2e      	ldr	r2, [pc, #184]	; (80017b4 <TIME_CALCULATION+0xd0>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	61d3      	str	r3, [r2, #28]
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <TIME_CALCULATION+0xd4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a2c      	ldr	r2, [pc, #176]	; (80017b8 <TIME_CALCULATION+0xd4>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_CR1  |=(1<<2);
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <TIME_CALCULATION+0xd4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <TIME_CALCULATION+0xd4>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_DIER |=(1<<0);//Update interrupt enable
 800171a:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <TIME_CALCULATION+0xd4>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	4a26      	ldr	r2, [pc, #152]	; (80017b8 <TIME_CALCULATION+0xd4>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	60d3      	str	r3, [r2, #12]

		TIM4->TIMx_ARR=64000;//peak value 8ms of freq=8000000hz
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <TIME_CALCULATION+0xd4>)
 8001728:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM4->TIMx_PSC=0;//prescaller
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <TIME_CALCULATION+0xd4>)
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	; 0x28

		TIM4->TIMx_EGR |=(1<<0);//Bit 0 UG: Update generation
 8001734:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <TIME_CALCULATION+0xd4>)
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <TIME_CALCULATION+0xd4>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6153      	str	r3, [r2, #20]

		TIM4->TIMx_CR1 |=(1<<0);//enable the timer
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <TIME_CALCULATION+0xd4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <TIME_CALCULATION+0xd4>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]
		NVIC_TIM4_global_interrupt_Enable;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <TIME_CALCULATION+0xd8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <TIME_CALCULATION+0xd8>)
 8001752:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001756:	6013      	str	r3, [r2, #0]
		return 1;
 8001758:	2301      	movs	r3, #1
 800175a:	e025      	b.n	80017a8 <TIME_CALCULATION+0xc4>
	}
	else {
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <TIME_CALCULATION+0xd4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <TIME_CALCULATION+0xd4>)
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]
		timer_ticks=TIM4->TIMx_CNT;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <TIME_CALCULATION+0xd4>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <TIME_CALCULATION+0xdc>)
 8001770:	801a      	strh	r2, [r3, #0]
		uint32_t X=((timer_ticks+(overflowtims*64000))/(clk/1000000));
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <TIME_CALCULATION+0xdc>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <TIME_CALCULATION+0xe0>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8001782:	fb03 f301 	mul.w	r3, r3, r1
 8001786:	4413      	add	r3, r2
 8001788:	4619      	mov	r1, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <TIME_CALCULATION+0xe4>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9b      	lsrs	r3, r3, #18
 8001794:	fbb1 f3f3 	udiv	r3, r1, r3
 8001798:	60fb      	str	r3, [r7, #12]
		overflowtims=0;
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <TIME_CALCULATION+0xe0>)
 800179c:	2200      	movs	r2, #0
 800179e:	801a      	strh	r2, [r3, #0]
		timer_ticks=0;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <TIME_CALCULATION+0xdc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	801a      	strh	r2, [r3, #0]
		return X;
 80017a6:	68fb      	ldr	r3, [r7, #12]
	}
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40000800 	.word	0x40000800
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	2000021c 	.word	0x2000021c
 80017c4:	2000021a 	.word	0x2000021a
 80017c8:	431bde83 	.word	0x431bde83

080017cc <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 80017da:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <SPWM_timer_INIT+0x100>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <SPWM_timer_INIT+0x100>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d12f      	bne.n	8001850 <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <SPWM_timer_INIT+0x100>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	4b35      	ldr	r3, [pc, #212]	; (80018cc <SPWM_timer_INIT+0x100>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017fe:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	4b31      	ldr	r3, [pc, #196]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800180e:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8001810:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0208 	orr.w	r2, r2, #8
 800181e:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	4b29      	ldr	r3, [pc, #164]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800182e:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8001830:	4b26      	ldr	r3, [pc, #152]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6a1a      	ldr	r2, [r3, #32]
 8001836:	4b25      	ldr	r3, [pc, #148]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0210 	orr.w	r2, r2, #16
 800183e:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a1a      	ldr	r2, [r3, #32]
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800185e:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <SPWM_timer_INIT+0x100>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <SPWM_timer_INIT+0x100>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800188e:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <SPWM_timer_INIT+0x100>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <SPWM_timer_INIT+0x100>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <SPWM_timer_INIT+0x100>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <SPWM_timer_INIT+0x100>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SPWM_timer_INIT+0x100>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0201 	orr.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000004 	.word	0x20000004

080018d0 <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <TIM2_IRQHandler+0x34>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <TIM2_IRQHandler+0x34>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <TIM2_IRQHandler+0x38>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <TIM2_IRQHandler+0x34>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <TIM2_IRQHandler+0x34>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0201 	bic.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000020 	.word	0x20000020
 8001908:	2000001c 	.word	0x2000001c

0800190c <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <TIM3_IRQHandler+0x6c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d119      	bne.n	800194c <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <TIM3_IRQHandler+0x70>)
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	4a17      	ldr	r2, [pc, #92]	; (800197c <TIM3_IRQHandler+0x70>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <TIM3_IRQHandler+0x74>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <TIM3_IRQHandler+0x74>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3b01      	subs	r3, #1
 8001932:	4a13      	ldr	r2, [pc, #76]	; (8001980 <TIM3_IRQHandler+0x74>)
 8001934:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 8001936:	e01c      	b.n	8001972 <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <TIM3_IRQHandler+0x6c>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <TIM3_IRQHandler+0x70>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <TIM3_IRQHandler+0x70>)
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6013      	str	r3, [r2, #0]
}
 800194a:	e012      	b.n	8001972 <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <TIM3_IRQHandler+0x78>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <TIM3_IRQHandler+0x78>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <TIM3_IRQHandler+0x78>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	691a      	ldr	r2, [r3, #16]
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <TIM3_IRQHandler+0x78>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0201 	bic.w	r2, r2, #1
 800196a:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <TIM3_IRQHandler+0x7c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4798      	blx	r3
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000224 	.word	0x20000224
 800197c:	40000400 	.word	0x40000400
 8001980:	20000220 	.word	0x20000220
 8001984:	20000278 	.word	0x20000278
 8001988:	2000026c 	.word	0x2000026c

0800198c <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <TIM4_IRQHandler+0x24>)
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <TIM4_IRQHandler+0x24>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	6113      	str	r3, [r2, #16]
	overflowtims++;
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <TIM4_IRQHandler+0x28>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <TIM4_IRQHandler+0x28>)
 80019a6:	801a      	strh	r2, [r3, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40000800 	.word	0x40000800
 80019b4:	2000021a 	.word	0x2000021a

080019b8 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 80019bc:	4b5d      	ldr	r3, [pc, #372]	; (8001b34 <TIM1_UP_IRQHandler+0x17c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <TIM1_UP_IRQHandler+0x180>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d911      	bls.n	80019ec <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 80019c8:	4b5c      	ldr	r3, [pc, #368]	; (8001b3c <TIM1_UP_IRQHandler+0x184>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
		flage1=0;
 80019ce:	4b5c      	ldr	r3, [pc, #368]	; (8001b40 <TIM1_UP_IRQHandler+0x188>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 80019d4:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <TIM1_UP_IRQHandler+0x180>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a5a      	ldr	r2, [pc, #360]	; (8001b44 <TIM1_UP_IRQHandler+0x18c>)
 80019da:	7812      	ldrb	r2, [r2, #0]
 80019dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80019e0:	4b55      	ldr	r3, [pc, #340]	; (8001b38 <TIM1_UP_IRQHandler+0x180>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a53      	ldr	r2, [pc, #332]	; (8001b34 <TIM1_UP_IRQHandler+0x17c>)
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e018      	b.n	8001a1e <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 80019ec:	4b51      	ldr	r3, [pc, #324]	; (8001b34 <TIM1_UP_IRQHandler+0x17c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b63      	cmp	r3, #99	; 0x63
 80019f2:	d814      	bhi.n	8001a1e <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 80019f4:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <TIM1_UP_IRQHandler+0x184>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
		flage1=1;
 80019fa:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <TIM1_UP_IRQHandler+0x188>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 8001a00:	4b51      	ldr	r3, [pc, #324]	; (8001b48 <TIM1_UP_IRQHandler+0x190>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	f083 0301 	eor.w	r3, r3, #1
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b4f      	ldr	r3, [pc, #316]	; (8001b48 <TIM1_UP_IRQHandler+0x190>)
 8001a0c:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <TIM1_UP_IRQHandler+0x180>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <TIM1_UP_IRQHandler+0x18c>)
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a1a:	4a46      	ldr	r2, [pc, #280]	; (8001b34 <TIM1_UP_IRQHandler+0x17c>)
 8001a1c:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <TIM1_UP_IRQHandler+0x190>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d110      	bne.n	8001a48 <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 8001a26:	4b49      	ldr	r3, [pc, #292]	; (8001b4c <TIM1_UP_IRQHandler+0x194>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6a1a      	ldr	r2, [r3, #32]
 8001a2c:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <TIM1_UP_IRQHandler+0x194>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0201 	bic.w	r2, r2, #1
 8001a34:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 8001a36:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <TIM1_UP_IRQHandler+0x194>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <TIM1_UP_IRQHandler+0x194>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0210 	orr.w	r2, r2, #16
 8001a44:	621a      	str	r2, [r3, #32]
 8001a46:	e013      	b.n	8001a70 <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 8001a48:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <TIM1_UP_IRQHandler+0x190>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10f      	bne.n	8001a70 <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 8001a50:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <TIM1_UP_IRQHandler+0x194>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6a1a      	ldr	r2, [r3, #32]
 8001a56:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <TIM1_UP_IRQHandler+0x194>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0210 	bic.w	r2, r2, #16
 8001a5e:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 8001a60:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <TIM1_UP_IRQHandler+0x194>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	4b39      	ldr	r3, [pc, #228]	; (8001b4c <TIM1_UP_IRQHandler+0x194>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 8001a70:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <TIM1_UP_IRQHandler+0x188>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d11c      	bne.n	8001ab2 <TIM1_UP_IRQHandler+0xfa>
 8001a78:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <TIM1_UP_IRQHandler+0x184>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d118      	bne.n	8001ab2 <TIM1_UP_IRQHandler+0xfa>
		top=c;
 8001a80:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <TIM1_UP_IRQHandler+0x198>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a2c      	ldr	r2, [pc, #176]	; (8001b38 <TIM1_UP_IRQHandler+0x180>)
 8001a86:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8001a88:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <TIM1_UP_IRQHandler+0x19c>)
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <TIM1_UP_IRQHandler+0x17c>)
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <TIM1_UP_IRQHandler+0x180>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	f7ff fe99 	bl	80017cc <SPWM_timer_INIT>
		x+=(top/numper_waves);
 8001a9a:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <TIM1_UP_IRQHandler+0x180>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a29      	ldr	r2, [pc, #164]	; (8001b44 <TIM1_UP_IRQHandler+0x18c>)
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <TIM1_UP_IRQHandler+0x17c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <TIM1_UP_IRQHandler+0x17c>)
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e035      	b.n	8001b1e <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <TIM1_UP_IRQHandler+0x184>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d129      	bne.n	8001b0e <TIM1_UP_IRQHandler+0x156>
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <TIM1_UP_IRQHandler+0x188>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d125      	bne.n	8001b0e <TIM1_UP_IRQHandler+0x156>
		top=c;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <TIM1_UP_IRQHandler+0x198>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <TIM1_UP_IRQHandler+0x180>)
 8001ac8:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <TIM1_UP_IRQHandler+0x17c>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <TIM1_UP_IRQHandler+0x180>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	491c      	ldr	r1, [pc, #112]	; (8001b44 <TIM1_UP_IRQHandler+0x18c>)
 8001ad4:	7809      	ldrb	r1, [r1, #0]
 8001ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <TIM1_UP_IRQHandler+0x17c>)
 8001ade:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <TIM1_UP_IRQHandler+0x19c>)
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <TIM1_UP_IRQHandler+0x17c>)
 8001ae6:	6819      	ldr	r1, [r3, #0]
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <TIM1_UP_IRQHandler+0x180>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2301      	movs	r3, #1
 8001aee:	f7ff fe6d 	bl	80017cc <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <TIM1_UP_IRQHandler+0x180>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <TIM1_UP_IRQHandler+0x18c>)
 8001af8:	7812      	ldrb	r2, [r2, #0]
 8001afa:	fbb3 f2f2 	udiv	r2, r3, r2
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <TIM1_UP_IRQHandler+0x17c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d10b      	bne.n	8001b1e <TIM1_UP_IRQHandler+0x166>
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <TIM1_UP_IRQHandler+0x17c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e007      	b.n	8001b1e <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <TIM1_UP_IRQHandler+0x194>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <TIM1_UP_IRQHandler+0x194>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0201 	bic.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <TIM1_UP_IRQHandler+0x194>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <TIM1_UP_IRQHandler+0x194>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0201 	bic.w	r2, r2, #1
 8001b2c:	611a      	str	r2, [r3, #16]
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000018 	.word	0x20000018
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	20000218 	.word	0x20000218
 8001b40:	20000008 	.word	0x20000008
 8001b44:	20000274 	.word	0x20000274
 8001b48:	20000009 	.word	0x20000009
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	20000014 	.word	0x20000014
 8001b54:	20000010 	.word	0x20000010

08001b58 <MCAL_speed_init>:
#include "stm32_speed_DRIVER.h"
#define FLASH_BASE_ADDR     0x40022000
#define FLASH_ACR_OFFSET    0x00
#define FLASH_ACR          (*(volatile unsigned int*)(FLASH_BASE_ADDR + FLASH_ACR_OFFSET))
#define FLASH_ACR_LATENCY_Pos 0
void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460a      	mov	r2, r1
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d13a      	bne.n	8001be4 <MCAL_speed_init+0x8c>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 8001b6e:	79bb      	ldrb	r3, [r7, #6]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 80cc 	bne.w	8001d0e <MCAL_speed_init+0x1b6>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 8001b76:	4b68      	ldr	r3, [pc, #416]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4a67      	ldr	r2, [pc, #412]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b80:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 8001b82:	4b65      	ldr	r3, [pc, #404]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4a64      	ldr	r2, [pc, #400]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001b88:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001b8c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 8001b8e:	4b62      	ldr	r3, [pc, #392]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4a61      	ldr	r2, [pc, #388]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001b94:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001b98:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001b9a:	4b5f      	ldr	r3, [pc, #380]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a5e      	ldr	r2, [pc, #376]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba4:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 8001ba6:	4b5c      	ldr	r3, [pc, #368]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4a5b      	ldr	r2, [pc, #364]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001bac:	f023 0303 	bic.w	r3, r3, #3
 8001bb0:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8001bb2:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 8001bbe:	4b56      	ldr	r3, [pc, #344]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a55      	ldr	r2, [pc, #340]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bc8:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 8001bca:	4b53      	ldr	r3, [pc, #332]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001bd0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001bd4:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 8001bd6:	4b50      	ldr	r3, [pc, #320]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a4f      	ldr	r2, [pc, #316]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001bdc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001be0:	6053      	str	r3, [r2, #4]

		}
	}


}
 8001be2:	e094      	b.n	8001d0e <MCAL_speed_init+0x1b6>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 8001be4:	79bb      	ldrb	r3, [r7, #6]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d150      	bne.n	8001c8c <MCAL_speed_init+0x134>
			RCC->RCC_CR |= (1 << 16);
 8001bea:	4b4b      	ldr	r3, [pc, #300]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a4a      	ldr	r2, [pc, #296]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 8001bf6:	bf00      	nop
 8001bf8:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f9      	beq.n	8001bf8 <MCAL_speed_init+0xa0>
			RCC->RCC_CFGR|=(1<<16);
 8001c04:	4b44      	ldr	r3, [pc, #272]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a43      	ldr	r2, [pc, #268]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0e:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8001c10:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a40      	ldr	r2, [pc, #256]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c16:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001c1a:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001c1c:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a3d      	ldr	r2, [pc, #244]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c26:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 8001c28:	bf00      	nop
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f9      	beq.n	8001c2a <MCAL_speed_init+0xd2>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 8001c36:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <MCAL_speed_init+0x1c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a38      	ldr	r2, [pc, #224]	; (8001d1c <MCAL_speed_init+0x1c4>)
 8001c3c:	f023 0307 	bic.w	r3, r3, #7
 8001c40:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 8001c42:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <MCAL_speed_init+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a35      	ldr	r2, [pc, #212]	; (8001d1c <MCAL_speed_init+0x1c4>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8001c4e:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4a31      	ldr	r2, [pc, #196]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c54:	f023 0303 	bic.w	r3, r3, #3
 8001c58:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4a2e      	ldr	r2, [pc, #184]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 8001c66:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4a2b      	ldr	r2, [pc, #172]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c70:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8001c72:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c7c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 8001c7e:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c88:	6053      	str	r3, [r2, #4]
}
 8001c8a:	e040      	b.n	8001d0e <MCAL_speed_init+0x1b6>
		else if (mood==mood_FAST_MOOD_72MHzCORE72MHzpref){
 8001c8c:	79bb      	ldrb	r3, [r7, #6]
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d13d      	bne.n	8001d0e <MCAL_speed_init+0x1b6>
			RCC->RCC_CR |= (1 << 16);
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a20      	ldr	r2, [pc, #128]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 8001c9e:	bf00      	nop
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f9      	beq.n	8001ca0 <MCAL_speed_init+0x148>
			RCC->RCC_CFGR|=(1<<16);
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb6:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001cbe:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001cc2:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a13      	ldr	r2, [pc, #76]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cce:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 8001cd0:	bf00      	nop
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f9      	beq.n	8001cd2 <MCAL_speed_init+0x17a>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MCAL_speed_init+0x1c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <MCAL_speed_init+0x1c4>)
 8001ce4:	f023 0307 	bic.w	r3, r3, #7
 8001ce8:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MCAL_speed_init+0x1c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <MCAL_speed_init+0x1c4>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001cfc:	f023 0303 	bic.w	r3, r3, #3
 8001d00:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <MCAL_speed_init+0x1c0>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6053      	str	r3, [r2, #4]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40022000 	.word	0x40022000

08001d20 <ADC_INIT>:
#include "stm32f103c6_ADC.h"


uint8_t flag_ADC_INIT=0;

void ADC_INIT(ADC_typeDef* ADCx,uint8_t ADC_STATE_){
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]

	if(ADC_STATE_==ADC_STATE_START){
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d132      	bne.n	8001d98 <ADC_INIT+0x78>
		if(ADCx==ADC1){
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <ADC_INIT+0xac>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d106      	bne.n	8001d48 <ADC_INIT+0x28>
			ADC1_Clock_Enable();
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <ADC_INIT+0xb0>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	4a24      	ldr	r2, [pc, #144]	; (8001dd0 <ADC_INIT+0xb0>)
 8001d40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d44:	6193      	str	r3, [r2, #24]
 8001d46:	e009      	b.n	8001d5c <ADC_INIT+0x3c>
		}
		else if(ADCx==ADC2){
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <ADC_INIT+0xb4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d105      	bne.n	8001d5c <ADC_INIT+0x3c>
			ADC2_Clock_Enable();
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <ADC_INIT+0xb0>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <ADC_INIT+0xb0>)
 8001d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d5a:	6193      	str	r3, [r2, #24]
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]
		//		Bit 1 CONT: Continuous conversion
		//		This bit is set and cleared by software. If set conversion takes place continuously till this bit is
		//		reset.
		//		0: Single conversion mode
		//		1: Continuous conversion mode
		ADCx->ADC_CR2 &=~(1<<1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 0202 	bic.w	r2, r3, #2
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]
		//		Bit 2 CAL: A/D Calibration
		//		This bit is set by software to start the calibration. It is reset by hardware after calibration is
		//		complete.
		//		0: Calibration completed
		//		1: Enable calibratio
		ADCx->ADC_CR2 |=(1<<2);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f043 0204 	orr.w	r2, r3, #4
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
		while(((ADCx->ADC_CR2>>2)&1)){};
 8001d80:	bf00      	nop
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f8      	bne.n	8001d82 <ADC_INIT+0x62>


		flag_ADC_INIT=1;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <ADC_INIT+0xb8>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
		ADC2_Clock_DESABLE();
		flag_ADC_INIT=0;
	}


}
 8001d96:	e014      	b.n	8001dc2 <ADC_INIT+0xa2>
		ADCx->ADC_CR2 &=~(1<<0);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 0201 	bic.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	609a      	str	r2, [r3, #8]
		ADC1_Clock_DESABLE();
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <ADC_INIT+0xb0>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <ADC_INIT+0xb0>)
 8001daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dae:	60d3      	str	r3, [r2, #12]
		ADC2_Clock_DESABLE();
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <ADC_INIT+0xb0>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <ADC_INIT+0xb0>)
 8001db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dba:	60d3      	str	r3, [r2, #12]
		flag_ADC_INIT=0;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <ADC_INIT+0xb8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	40012400 	.word	0x40012400
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40012800 	.word	0x40012800
 8001dd8:	20000225 	.word	0x20000225

08001ddc <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d854      	bhi.n	8001e96 <Enable_NVIC+0xba>
 8001dec:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <Enable_NVIC+0x18>)
 8001dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df2:	bf00      	nop
 8001df4:	08001e35 	.word	0x08001e35
 8001df8:	08001e43 	.word	0x08001e43
 8001dfc:	08001e51 	.word	0x08001e51
 8001e00:	08001e5f 	.word	0x08001e5f
 8001e04:	08001e6d 	.word	0x08001e6d
 8001e08:	08001e7b 	.word	0x08001e7b
 8001e0c:	08001e7b 	.word	0x08001e7b
 8001e10:	08001e7b 	.word	0x08001e7b
 8001e14:	08001e7b 	.word	0x08001e7b
 8001e18:	08001e7b 	.word	0x08001e7b
 8001e1c:	08001e89 	.word	0x08001e89
 8001e20:	08001e89 	.word	0x08001e89
 8001e24:	08001e89 	.word	0x08001e89
 8001e28:	08001e89 	.word	0x08001e89
 8001e2c:	08001e89 	.word	0x08001e89
 8001e30:	08001e89 	.word	0x08001e89
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <Enable_NVIC+0xc4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <Enable_NVIC+0xc4>)
 8001e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e3e:	6013      	str	r3, [r2, #0]
		break;
 8001e40:	e029      	b.n	8001e96 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <Enable_NVIC+0xc4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <Enable_NVIC+0xc4>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4c:	6013      	str	r3, [r2, #0]
		break;
 8001e4e:	e022      	b.n	8001e96 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <Enable_NVIC+0xc4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <Enable_NVIC+0xc4>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5a:	6013      	str	r3, [r2, #0]
		break;
 8001e5c:	e01b      	b.n	8001e96 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <Enable_NVIC+0xc4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <Enable_NVIC+0xc4>)
 8001e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e68:	6013      	str	r3, [r2, #0]
		break;
 8001e6a:	e014      	b.n	8001e96 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <Enable_NVIC+0xc4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <Enable_NVIC+0xc4>)
 8001e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e76:	6013      	str	r3, [r2, #0]
		break;
 8001e78:	e00d      	b.n	8001e96 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <Enable_NVIC+0xc4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <Enable_NVIC+0xc4>)
 8001e80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e84:	6013      	str	r3, [r2, #0]
		break;
 8001e86:	e006      	b.n	8001e96 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <Enable_NVIC+0xc8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <Enable_NVIC+0xc8>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e92:	6013      	str	r3, [r2, #0]
		break;
 8001e94:	bf00      	nop
	}


}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	e000e100 	.word	0xe000e100
 8001ea4:	e000e104 	.word	0xe000e104

08001ea8 <EXTI>:
 * @param [in]      -function_addres : app ISR function
 * @retval          - none
 * Note             -
 *================================================================ */

void EXTI(GPIO_typeDef* PORTx ,uint16_t pin,uint16_t triggercase,void (*function_addres)(interrupt_data* isr_data,uint8_t interupt_num)){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	817b      	strh	r3, [r7, #10]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	813b      	strh	r3, [r7, #8]

	pinmode(PORTx,pin,GPIO_MODE_INTPUT_AF);//set pin to _INTPUT_AF
 8001eba:	897b      	ldrh	r3, [r7, #10]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7ff f985 	bl	80011d0 <pinmode>
	AFIO_Clock_Enable();
 8001ec6:	4b96      	ldr	r3, [pc, #600]	; (8002120 <EXTI+0x278>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	4a95      	ldr	r2, [pc, #596]	; (8002120 <EXTI+0x278>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6193      	str	r3, [r2, #24]
	//	0000: PA[x] pin
	//	0001: PB[x] pin
	//	0010: PC[x] pin
	//	0011: PD[x] pin

	switch(pin){
 8001ed2:	897b      	ldrh	r3, [r7, #10]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	f200 8392 	bhi.w	80025fe <EXTI+0x756>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <EXTI+0x38>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001f21 	.word	0x08001f21
 8001ee4:	08001f87 	.word	0x08001f87
 8001ee8:	08001fed 	.word	0x08001fed
 8001eec:	08002053 	.word	0x08002053
 8001ef0:	080020b9 	.word	0x080020b9
 8001ef4:	08002139 	.word	0x08002139
 8001ef8:	0800219f 	.word	0x0800219f
 8001efc:	08002205 	.word	0x08002205
 8001f00:	0800226b 	.word	0x0800226b
 8001f04:	080022d1 	.word	0x080022d1
 8001f08:	08002337 	.word	0x08002337
 8001f0c:	080023b1 	.word	0x080023b1
 8001f10:	08002417 	.word	0x08002417
 8001f14:	0800247d 	.word	0x0800247d
 8001f18:	080024e3 	.word	0x080024e3
 8001f1c:	08002547 	.word	0x08002547
	case pin0:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<0);
 8001f20:	4b80      	ldr	r3, [pc, #512]	; (8002124 <EXTI+0x27c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a7f      	ldr	r2, [pc, #508]	; (8002124 <EXTI+0x27c>)
 8001f26:	f023 030f 	bic.w	r3, r3, #15
 8001f2a:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<0);}
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4a7e      	ldr	r2, [pc, #504]	; (8002128 <EXTI+0x280>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d106      	bne.n	8001f42 <EXTI+0x9a>
 8001f34:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <EXTI+0x27c>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4a7a      	ldr	r2, [pc, #488]	; (8002124 <EXTI+0x27c>)
 8001f3a:	f023 030f 	bic.w	r3, r3, #15
 8001f3e:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}

		break;
 8001f40:	e333      	b.n	80025aa <EXTI+0x702>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4a79      	ldr	r2, [pc, #484]	; (800212c <EXTI+0x284>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d106      	bne.n	8001f58 <EXTI+0xb0>
 8001f4a:	4b76      	ldr	r3, [pc, #472]	; (8002124 <EXTI+0x27c>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4a75      	ldr	r2, [pc, #468]	; (8002124 <EXTI+0x27c>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6093      	str	r3, [r2, #8]
		break;
 8001f56:	e328      	b.n	80025aa <EXTI+0x702>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4a75      	ldr	r2, [pc, #468]	; (8002130 <EXTI+0x288>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d106      	bne.n	8001f6e <EXTI+0xc6>
 8001f60:	4b70      	ldr	r3, [pc, #448]	; (8002124 <EXTI+0x27c>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a6f      	ldr	r2, [pc, #444]	; (8002124 <EXTI+0x27c>)
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	6093      	str	r3, [r2, #8]
		break;
 8001f6c:	e31d      	b.n	80025aa <EXTI+0x702>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4a70      	ldr	r2, [pc, #448]	; (8002134 <EXTI+0x28c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	f040 8319 	bne.w	80025aa <EXTI+0x702>
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <EXTI+0x27c>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	4a69      	ldr	r2, [pc, #420]	; (8002124 <EXTI+0x27c>)
 8001f7e:	f043 0303 	orr.w	r3, r3, #3
 8001f82:	6093      	str	r3, [r2, #8]
		break;
 8001f84:	e311      	b.n	80025aa <EXTI+0x702>
	case pin1:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<4);
 8001f86:	4b67      	ldr	r3, [pc, #412]	; (8002124 <EXTI+0x27c>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4a66      	ldr	r2, [pc, #408]	; (8002124 <EXTI+0x27c>)
 8001f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f90:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<4);}
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4a64      	ldr	r2, [pc, #400]	; (8002128 <EXTI+0x280>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d106      	bne.n	8001fa8 <EXTI+0x100>
 8001f9a:	4b62      	ldr	r3, [pc, #392]	; (8002124 <EXTI+0x27c>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	4a61      	ldr	r2, [pc, #388]	; (8002124 <EXTI+0x27c>)
 8001fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fa4:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}

		break;
 8001fa6:	e302      	b.n	80025ae <EXTI+0x706>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a60      	ldr	r2, [pc, #384]	; (800212c <EXTI+0x284>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d106      	bne.n	8001fbe <EXTI+0x116>
 8001fb0:	4b5c      	ldr	r3, [pc, #368]	; (8002124 <EXTI+0x27c>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4a5b      	ldr	r2, [pc, #364]	; (8002124 <EXTI+0x27c>)
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	6093      	str	r3, [r2, #8]
		break;
 8001fbc:	e2f7      	b.n	80025ae <EXTI+0x706>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4a5b      	ldr	r2, [pc, #364]	; (8002130 <EXTI+0x288>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d106      	bne.n	8001fd4 <EXTI+0x12c>
 8001fc6:	4b57      	ldr	r3, [pc, #348]	; (8002124 <EXTI+0x27c>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4a56      	ldr	r2, [pc, #344]	; (8002124 <EXTI+0x27c>)
 8001fcc:	f043 0320 	orr.w	r3, r3, #32
 8001fd0:	6093      	str	r3, [r2, #8]
		break;
 8001fd2:	e2ec      	b.n	80025ae <EXTI+0x706>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a57      	ldr	r2, [pc, #348]	; (8002134 <EXTI+0x28c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	f040 82e8 	bne.w	80025ae <EXTI+0x706>
 8001fde:	4b51      	ldr	r3, [pc, #324]	; (8002124 <EXTI+0x27c>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4a50      	ldr	r2, [pc, #320]	; (8002124 <EXTI+0x27c>)
 8001fe4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001fe8:	6093      	str	r3, [r2, #8]
		break;
 8001fea:	e2e0      	b.n	80025ae <EXTI+0x706>
	case pin2:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<8);
 8001fec:	4b4d      	ldr	r3, [pc, #308]	; (8002124 <EXTI+0x27c>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a4c      	ldr	r2, [pc, #304]	; (8002124 <EXTI+0x27c>)
 8001ff2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ff6:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<8);}
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4a4b      	ldr	r2, [pc, #300]	; (8002128 <EXTI+0x280>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d106      	bne.n	800200e <EXTI+0x166>
 8002000:	4b48      	ldr	r3, [pc, #288]	; (8002124 <EXTI+0x27c>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4a47      	ldr	r2, [pc, #284]	; (8002124 <EXTI+0x27c>)
 8002006:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800200a:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}

		break;
 800200c:	e2d1      	b.n	80025b2 <EXTI+0x70a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a46      	ldr	r2, [pc, #280]	; (800212c <EXTI+0x284>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d106      	bne.n	8002024 <EXTI+0x17c>
 8002016:	4b43      	ldr	r3, [pc, #268]	; (8002124 <EXTI+0x27c>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	4a42      	ldr	r2, [pc, #264]	; (8002124 <EXTI+0x27c>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002020:	6093      	str	r3, [r2, #8]
		break;
 8002022:	e2c6      	b.n	80025b2 <EXTI+0x70a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a42      	ldr	r2, [pc, #264]	; (8002130 <EXTI+0x288>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d106      	bne.n	800203a <EXTI+0x192>
 800202c:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <EXTI+0x27c>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a3c      	ldr	r2, [pc, #240]	; (8002124 <EXTI+0x27c>)
 8002032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002036:	6093      	str	r3, [r2, #8]
		break;
 8002038:	e2bb      	b.n	80025b2 <EXTI+0x70a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a3d      	ldr	r2, [pc, #244]	; (8002134 <EXTI+0x28c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	f040 82b7 	bne.w	80025b2 <EXTI+0x70a>
 8002044:	4b37      	ldr	r3, [pc, #220]	; (8002124 <EXTI+0x27c>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a36      	ldr	r2, [pc, #216]	; (8002124 <EXTI+0x27c>)
 800204a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800204e:	6093      	str	r3, [r2, #8]
		break;
 8002050:	e2af      	b.n	80025b2 <EXTI+0x70a>
	case pin3:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<12);
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <EXTI+0x27c>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	4a33      	ldr	r2, [pc, #204]	; (8002124 <EXTI+0x27c>)
 8002058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800205c:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<12);}
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a31      	ldr	r2, [pc, #196]	; (8002128 <EXTI+0x280>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d106      	bne.n	8002074 <EXTI+0x1cc>
 8002066:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <EXTI+0x27c>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <EXTI+0x27c>)
 800206c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002070:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}

		break;
 8002072:	e2a0      	b.n	80025b6 <EXTI+0x70e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a2d      	ldr	r2, [pc, #180]	; (800212c <EXTI+0x284>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d106      	bne.n	800208a <EXTI+0x1e2>
 800207c:	4b29      	ldr	r3, [pc, #164]	; (8002124 <EXTI+0x27c>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a28      	ldr	r2, [pc, #160]	; (8002124 <EXTI+0x27c>)
 8002082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002086:	6093      	str	r3, [r2, #8]
		break;
 8002088:	e295      	b.n	80025b6 <EXTI+0x70e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4a28      	ldr	r2, [pc, #160]	; (8002130 <EXTI+0x288>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d106      	bne.n	80020a0 <EXTI+0x1f8>
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <EXTI+0x27c>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	4a23      	ldr	r2, [pc, #140]	; (8002124 <EXTI+0x27c>)
 8002098:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800209c:	6093      	str	r3, [r2, #8]
		break;
 800209e:	e28a      	b.n	80025b6 <EXTI+0x70e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <EXTI+0x28c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	f040 8286 	bne.w	80025b6 <EXTI+0x70e>
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <EXTI+0x27c>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <EXTI+0x27c>)
 80020b0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80020b4:	6093      	str	r3, [r2, #8]
		break;
 80020b6:	e27e      	b.n	80025b6 <EXTI+0x70e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin4:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<0);
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <EXTI+0x27c>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a19      	ldr	r2, [pc, #100]	; (8002124 <EXTI+0x27c>)
 80020be:	f023 030f 	bic.w	r3, r3, #15
 80020c2:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<0);}
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4a18      	ldr	r2, [pc, #96]	; (8002128 <EXTI+0x280>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d106      	bne.n	80020da <EXTI+0x232>
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <EXTI+0x27c>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <EXTI+0x27c>)
 80020d2:	f023 030f 	bic.w	r3, r3, #15
 80020d6:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}

		break;
 80020d8:	e26f      	b.n	80025ba <EXTI+0x712>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4a13      	ldr	r2, [pc, #76]	; (800212c <EXTI+0x284>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d106      	bne.n	80020f0 <EXTI+0x248>
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <EXTI+0x27c>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <EXTI+0x27c>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	60d3      	str	r3, [r2, #12]
		break;
 80020ee:	e264      	b.n	80025ba <EXTI+0x712>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a0f      	ldr	r2, [pc, #60]	; (8002130 <EXTI+0x288>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d106      	bne.n	8002106 <EXTI+0x25e>
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <EXTI+0x27c>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a09      	ldr	r2, [pc, #36]	; (8002124 <EXTI+0x27c>)
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	60d3      	str	r3, [r2, #12]
		break;
 8002104:	e259      	b.n	80025ba <EXTI+0x712>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <EXTI+0x28c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	f040 8255 	bne.w	80025ba <EXTI+0x712>
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <EXTI+0x27c>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a03      	ldr	r2, [pc, #12]	; (8002124 <EXTI+0x27c>)
 8002116:	f043 0303 	orr.w	r3, r3, #3
 800211a:	60d3      	str	r3, [r2, #12]
		break;
 800211c:	e24d      	b.n	80025ba <EXTI+0x712>
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	40010000 	.word	0x40010000
 8002128:	40010800 	.word	0x40010800
 800212c:	40010c00 	.word	0x40010c00
 8002130:	40011000 	.word	0x40011000
 8002134:	40011400 	.word	0x40011400
	case pin5:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<4);
 8002138:	4b92      	ldr	r3, [pc, #584]	; (8002384 <EXTI+0x4dc>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a91      	ldr	r2, [pc, #580]	; (8002384 <EXTI+0x4dc>)
 800213e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002142:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<4);}
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a90      	ldr	r2, [pc, #576]	; (8002388 <EXTI+0x4e0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d106      	bne.n	800215a <EXTI+0x2b2>
 800214c:	4b8d      	ldr	r3, [pc, #564]	; (8002384 <EXTI+0x4dc>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a8c      	ldr	r2, [pc, #560]	; (8002384 <EXTI+0x4dc>)
 8002152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002156:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}

		break;
 8002158:	e231      	b.n	80025be <EXTI+0x716>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4a8b      	ldr	r2, [pc, #556]	; (800238c <EXTI+0x4e4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d106      	bne.n	8002170 <EXTI+0x2c8>
 8002162:	4b88      	ldr	r3, [pc, #544]	; (8002384 <EXTI+0x4dc>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	4a87      	ldr	r2, [pc, #540]	; (8002384 <EXTI+0x4dc>)
 8002168:	f043 0310 	orr.w	r3, r3, #16
 800216c:	60d3      	str	r3, [r2, #12]
		break;
 800216e:	e226      	b.n	80025be <EXTI+0x716>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a87      	ldr	r2, [pc, #540]	; (8002390 <EXTI+0x4e8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d106      	bne.n	8002186 <EXTI+0x2de>
 8002178:	4b82      	ldr	r3, [pc, #520]	; (8002384 <EXTI+0x4dc>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a81      	ldr	r2, [pc, #516]	; (8002384 <EXTI+0x4dc>)
 800217e:	f043 0320 	orr.w	r3, r3, #32
 8002182:	60d3      	str	r3, [r2, #12]
		break;
 8002184:	e21b      	b.n	80025be <EXTI+0x716>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a82      	ldr	r2, [pc, #520]	; (8002394 <EXTI+0x4ec>)
 800218a:	4293      	cmp	r3, r2
 800218c:	f040 8217 	bne.w	80025be <EXTI+0x716>
 8002190:	4b7c      	ldr	r3, [pc, #496]	; (8002384 <EXTI+0x4dc>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a7b      	ldr	r2, [pc, #492]	; (8002384 <EXTI+0x4dc>)
 8002196:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800219a:	60d3      	str	r3, [r2, #12]
		break;
 800219c:	e20f      	b.n	80025be <EXTI+0x716>
	case pin6:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<8);
 800219e:	4b79      	ldr	r3, [pc, #484]	; (8002384 <EXTI+0x4dc>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	4a78      	ldr	r2, [pc, #480]	; (8002384 <EXTI+0x4dc>)
 80021a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021a8:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<8);}
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4a76      	ldr	r2, [pc, #472]	; (8002388 <EXTI+0x4e0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d106      	bne.n	80021c0 <EXTI+0x318>
 80021b2:	4b74      	ldr	r3, [pc, #464]	; (8002384 <EXTI+0x4dc>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	4a73      	ldr	r2, [pc, #460]	; (8002384 <EXTI+0x4dc>)
 80021b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021bc:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}

		break;
 80021be:	e200      	b.n	80025c2 <EXTI+0x71a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a72      	ldr	r2, [pc, #456]	; (800238c <EXTI+0x4e4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d106      	bne.n	80021d6 <EXTI+0x32e>
 80021c8:	4b6e      	ldr	r3, [pc, #440]	; (8002384 <EXTI+0x4dc>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a6d      	ldr	r2, [pc, #436]	; (8002384 <EXTI+0x4dc>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d2:	60d3      	str	r3, [r2, #12]
		break;
 80021d4:	e1f5      	b.n	80025c2 <EXTI+0x71a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4a6d      	ldr	r2, [pc, #436]	; (8002390 <EXTI+0x4e8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d106      	bne.n	80021ec <EXTI+0x344>
 80021de:	4b69      	ldr	r3, [pc, #420]	; (8002384 <EXTI+0x4dc>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	4a68      	ldr	r2, [pc, #416]	; (8002384 <EXTI+0x4dc>)
 80021e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e8:	60d3      	str	r3, [r2, #12]
		break;
 80021ea:	e1ea      	b.n	80025c2 <EXTI+0x71a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4a69      	ldr	r2, [pc, #420]	; (8002394 <EXTI+0x4ec>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	f040 81e6 	bne.w	80025c2 <EXTI+0x71a>
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <EXTI+0x4dc>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	4a62      	ldr	r2, [pc, #392]	; (8002384 <EXTI+0x4dc>)
 80021fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002200:	60d3      	str	r3, [r2, #12]
		break;
 8002202:	e1de      	b.n	80025c2 <EXTI+0x71a>
	case pin7:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<12);
 8002204:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <EXTI+0x4dc>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a5e      	ldr	r2, [pc, #376]	; (8002384 <EXTI+0x4dc>)
 800220a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800220e:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<12);}
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a5d      	ldr	r2, [pc, #372]	; (8002388 <EXTI+0x4e0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d106      	bne.n	8002226 <EXTI+0x37e>
 8002218:	4b5a      	ldr	r3, [pc, #360]	; (8002384 <EXTI+0x4dc>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a59      	ldr	r2, [pc, #356]	; (8002384 <EXTI+0x4dc>)
 800221e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002222:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}

		break;
 8002224:	e1cf      	b.n	80025c6 <EXTI+0x71e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4a58      	ldr	r2, [pc, #352]	; (800238c <EXTI+0x4e4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d106      	bne.n	800223c <EXTI+0x394>
 800222e:	4b55      	ldr	r3, [pc, #340]	; (8002384 <EXTI+0x4dc>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	4a54      	ldr	r2, [pc, #336]	; (8002384 <EXTI+0x4dc>)
 8002234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002238:	60d3      	str	r3, [r2, #12]
		break;
 800223a:	e1c4      	b.n	80025c6 <EXTI+0x71e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a54      	ldr	r2, [pc, #336]	; (8002390 <EXTI+0x4e8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d106      	bne.n	8002252 <EXTI+0x3aa>
 8002244:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <EXTI+0x4dc>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a4e      	ldr	r2, [pc, #312]	; (8002384 <EXTI+0x4dc>)
 800224a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800224e:	60d3      	str	r3, [r2, #12]
		break;
 8002250:	e1b9      	b.n	80025c6 <EXTI+0x71e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4a4f      	ldr	r2, [pc, #316]	; (8002394 <EXTI+0x4ec>)
 8002256:	4293      	cmp	r3, r2
 8002258:	f040 81b5 	bne.w	80025c6 <EXTI+0x71e>
 800225c:	4b49      	ldr	r3, [pc, #292]	; (8002384 <EXTI+0x4dc>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a48      	ldr	r2, [pc, #288]	; (8002384 <EXTI+0x4dc>)
 8002262:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002266:	60d3      	str	r3, [r2, #12]
		break;
 8002268:	e1ad      	b.n	80025c6 <EXTI+0x71e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin8:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<0);
 800226a:	4b46      	ldr	r3, [pc, #280]	; (8002384 <EXTI+0x4dc>)
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	4a45      	ldr	r2, [pc, #276]	; (8002384 <EXTI+0x4dc>)
 8002270:	f023 030f 	bic.w	r3, r3, #15
 8002274:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<0);}
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a43      	ldr	r2, [pc, #268]	; (8002388 <EXTI+0x4e0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d106      	bne.n	800228c <EXTI+0x3e4>
 800227e:	4b41      	ldr	r3, [pc, #260]	; (8002384 <EXTI+0x4dc>)
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	4a40      	ldr	r2, [pc, #256]	; (8002384 <EXTI+0x4dc>)
 8002284:	f023 030f 	bic.w	r3, r3, #15
 8002288:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}

		break;
 800228a:	e19e      	b.n	80025ca <EXTI+0x722>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4a3f      	ldr	r2, [pc, #252]	; (800238c <EXTI+0x4e4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d106      	bne.n	80022a2 <EXTI+0x3fa>
 8002294:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <EXTI+0x4dc>)
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	4a3a      	ldr	r2, [pc, #232]	; (8002384 <EXTI+0x4dc>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6113      	str	r3, [r2, #16]
		break;
 80022a0:	e193      	b.n	80025ca <EXTI+0x722>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <EXTI+0x4e8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d106      	bne.n	80022b8 <EXTI+0x410>
 80022aa:	4b36      	ldr	r3, [pc, #216]	; (8002384 <EXTI+0x4dc>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	4a35      	ldr	r2, [pc, #212]	; (8002384 <EXTI+0x4dc>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	6113      	str	r3, [r2, #16]
		break;
 80022b6:	e188      	b.n	80025ca <EXTI+0x722>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a36      	ldr	r2, [pc, #216]	; (8002394 <EXTI+0x4ec>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	f040 8184 	bne.w	80025ca <EXTI+0x722>
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <EXTI+0x4dc>)
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	4a2f      	ldr	r2, [pc, #188]	; (8002384 <EXTI+0x4dc>)
 80022c8:	f043 0303 	orr.w	r3, r3, #3
 80022cc:	6113      	str	r3, [r2, #16]
		break;
 80022ce:	e17c      	b.n	80025ca <EXTI+0x722>
	case pin9:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<4);
 80022d0:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <EXTI+0x4dc>)
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	4a2b      	ldr	r2, [pc, #172]	; (8002384 <EXTI+0x4dc>)
 80022d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022da:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<4);}
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4a2a      	ldr	r2, [pc, #168]	; (8002388 <EXTI+0x4e0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d106      	bne.n	80022f2 <EXTI+0x44a>
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <EXTI+0x4dc>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	4a26      	ldr	r2, [pc, #152]	; (8002384 <EXTI+0x4dc>)
 80022ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ee:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}

		break;
 80022f0:	e16d      	b.n	80025ce <EXTI+0x726>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a25      	ldr	r2, [pc, #148]	; (800238c <EXTI+0x4e4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d106      	bne.n	8002308 <EXTI+0x460>
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <EXTI+0x4dc>)
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	4a21      	ldr	r2, [pc, #132]	; (8002384 <EXTI+0x4dc>)
 8002300:	f043 0310 	orr.w	r3, r3, #16
 8002304:	6113      	str	r3, [r2, #16]
		break;
 8002306:	e162      	b.n	80025ce <EXTI+0x726>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4a21      	ldr	r2, [pc, #132]	; (8002390 <EXTI+0x4e8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d106      	bne.n	800231e <EXTI+0x476>
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <EXTI+0x4dc>)
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <EXTI+0x4dc>)
 8002316:	f043 0320 	orr.w	r3, r3, #32
 800231a:	6113      	str	r3, [r2, #16]
		break;
 800231c:	e157      	b.n	80025ce <EXTI+0x726>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <EXTI+0x4ec>)
 8002322:	4293      	cmp	r3, r2
 8002324:	f040 8153 	bne.w	80025ce <EXTI+0x726>
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <EXTI+0x4dc>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4a15      	ldr	r2, [pc, #84]	; (8002384 <EXTI+0x4dc>)
 800232e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002332:	6113      	str	r3, [r2, #16]
		break;
 8002334:	e14b      	b.n	80025ce <EXTI+0x726>
	case pin10:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<8);
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <EXTI+0x4dc>)
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <EXTI+0x4dc>)
 800233c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002340:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<8);}
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a10      	ldr	r2, [pc, #64]	; (8002388 <EXTI+0x4e0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d106      	bne.n	8002358 <EXTI+0x4b0>
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <EXTI+0x4dc>)
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <EXTI+0x4dc>)
 8002350:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002354:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}

		break;
 8002356:	e13c      	b.n	80025d2 <EXTI+0x72a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <EXTI+0x4e4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d106      	bne.n	800236e <EXTI+0x4c6>
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <EXTI+0x4dc>)
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	4a07      	ldr	r2, [pc, #28]	; (8002384 <EXTI+0x4dc>)
 8002366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236a:	6113      	str	r3, [r2, #16]
		break;
 800236c:	e131      	b.n	80025d2 <EXTI+0x72a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <EXTI+0x4e8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d110      	bne.n	8002398 <EXTI+0x4f0>
 8002376:	4b03      	ldr	r3, [pc, #12]	; (8002384 <EXTI+0x4dc>)
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	4a02      	ldr	r2, [pc, #8]	; (8002384 <EXTI+0x4dc>)
 800237c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002380:	6113      	str	r3, [r2, #16]
		break;
 8002382:	e126      	b.n	80025d2 <EXTI+0x72a>
 8002384:	40010000 	.word	0x40010000
 8002388:	40010800 	.word	0x40010800
 800238c:	40010c00 	.word	0x40010c00
 8002390:	40011000 	.word	0x40011000
 8002394:	40011400 	.word	0x40011400
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a93      	ldr	r2, [pc, #588]	; (80025e8 <EXTI+0x740>)
 800239c:	4293      	cmp	r3, r2
 800239e:	f040 8118 	bne.w	80025d2 <EXTI+0x72a>
 80023a2:	4b92      	ldr	r3, [pc, #584]	; (80025ec <EXTI+0x744>)
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	4a91      	ldr	r2, [pc, #580]	; (80025ec <EXTI+0x744>)
 80023a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80023ac:	6113      	str	r3, [r2, #16]
		break;
 80023ae:	e110      	b.n	80025d2 <EXTI+0x72a>
	case pin11:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<12);
 80023b0:	4b8e      	ldr	r3, [pc, #568]	; (80025ec <EXTI+0x744>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	4a8d      	ldr	r2, [pc, #564]	; (80025ec <EXTI+0x744>)
 80023b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023ba:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<12);}
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a8c      	ldr	r2, [pc, #560]	; (80025f0 <EXTI+0x748>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d106      	bne.n	80023d2 <EXTI+0x52a>
 80023c4:	4b89      	ldr	r3, [pc, #548]	; (80025ec <EXTI+0x744>)
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	4a88      	ldr	r2, [pc, #544]	; (80025ec <EXTI+0x744>)
 80023ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023ce:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}

		break;
 80023d0:	e101      	b.n	80025d6 <EXTI+0x72e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4a87      	ldr	r2, [pc, #540]	; (80025f4 <EXTI+0x74c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d106      	bne.n	80023e8 <EXTI+0x540>
 80023da:	4b84      	ldr	r3, [pc, #528]	; (80025ec <EXTI+0x744>)
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	4a83      	ldr	r2, [pc, #524]	; (80025ec <EXTI+0x744>)
 80023e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023e4:	6113      	str	r3, [r2, #16]
		break;
 80023e6:	e0f6      	b.n	80025d6 <EXTI+0x72e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a83      	ldr	r2, [pc, #524]	; (80025f8 <EXTI+0x750>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d106      	bne.n	80023fe <EXTI+0x556>
 80023f0:	4b7e      	ldr	r3, [pc, #504]	; (80025ec <EXTI+0x744>)
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	4a7d      	ldr	r2, [pc, #500]	; (80025ec <EXTI+0x744>)
 80023f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023fa:	6113      	str	r3, [r2, #16]
		break;
 80023fc:	e0eb      	b.n	80025d6 <EXTI+0x72e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4a79      	ldr	r2, [pc, #484]	; (80025e8 <EXTI+0x740>)
 8002402:	4293      	cmp	r3, r2
 8002404:	f040 80e7 	bne.w	80025d6 <EXTI+0x72e>
 8002408:	4b78      	ldr	r3, [pc, #480]	; (80025ec <EXTI+0x744>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4a77      	ldr	r2, [pc, #476]	; (80025ec <EXTI+0x744>)
 800240e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002412:	6113      	str	r3, [r2, #16]
		break;
 8002414:	e0df      	b.n	80025d6 <EXTI+0x72e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin12:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<0);
 8002416:	4b75      	ldr	r3, [pc, #468]	; (80025ec <EXTI+0x744>)
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	4a74      	ldr	r2, [pc, #464]	; (80025ec <EXTI+0x744>)
 800241c:	f023 030f 	bic.w	r3, r3, #15
 8002420:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<0);}
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4a72      	ldr	r2, [pc, #456]	; (80025f0 <EXTI+0x748>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d106      	bne.n	8002438 <EXTI+0x590>
 800242a:	4b70      	ldr	r3, [pc, #448]	; (80025ec <EXTI+0x744>)
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	4a6f      	ldr	r2, [pc, #444]	; (80025ec <EXTI+0x744>)
 8002430:	f023 030f 	bic.w	r3, r3, #15
 8002434:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}

		break;
 8002436:	e0d0      	b.n	80025da <EXTI+0x732>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4a6e      	ldr	r2, [pc, #440]	; (80025f4 <EXTI+0x74c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d106      	bne.n	800244e <EXTI+0x5a6>
 8002440:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <EXTI+0x744>)
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	4a69      	ldr	r2, [pc, #420]	; (80025ec <EXTI+0x744>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6153      	str	r3, [r2, #20]
		break;
 800244c:	e0c5      	b.n	80025da <EXTI+0x732>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4a69      	ldr	r2, [pc, #420]	; (80025f8 <EXTI+0x750>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d106      	bne.n	8002464 <EXTI+0x5bc>
 8002456:	4b65      	ldr	r3, [pc, #404]	; (80025ec <EXTI+0x744>)
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	4a64      	ldr	r2, [pc, #400]	; (80025ec <EXTI+0x744>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	6153      	str	r3, [r2, #20]
		break;
 8002462:	e0ba      	b.n	80025da <EXTI+0x732>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4a60      	ldr	r2, [pc, #384]	; (80025e8 <EXTI+0x740>)
 8002468:	4293      	cmp	r3, r2
 800246a:	f040 80b6 	bne.w	80025da <EXTI+0x732>
 800246e:	4b5f      	ldr	r3, [pc, #380]	; (80025ec <EXTI+0x744>)
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	4a5e      	ldr	r2, [pc, #376]	; (80025ec <EXTI+0x744>)
 8002474:	f043 0303 	orr.w	r3, r3, #3
 8002478:	6153      	str	r3, [r2, #20]
		break;
 800247a:	e0ae      	b.n	80025da <EXTI+0x732>
	case pin13:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<4);
 800247c:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <EXTI+0x744>)
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	4a5a      	ldr	r2, [pc, #360]	; (80025ec <EXTI+0x744>)
 8002482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002486:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<4);}
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a59      	ldr	r2, [pc, #356]	; (80025f0 <EXTI+0x748>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d106      	bne.n	800249e <EXTI+0x5f6>
 8002490:	4b56      	ldr	r3, [pc, #344]	; (80025ec <EXTI+0x744>)
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	4a55      	ldr	r2, [pc, #340]	; (80025ec <EXTI+0x744>)
 8002496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800249a:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}

		break;
 800249c:	e09f      	b.n	80025de <EXTI+0x736>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a54      	ldr	r2, [pc, #336]	; (80025f4 <EXTI+0x74c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d106      	bne.n	80024b4 <EXTI+0x60c>
 80024a6:	4b51      	ldr	r3, [pc, #324]	; (80025ec <EXTI+0x744>)
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	4a50      	ldr	r2, [pc, #320]	; (80025ec <EXTI+0x744>)
 80024ac:	f043 0310 	orr.w	r3, r3, #16
 80024b0:	6153      	str	r3, [r2, #20]
		break;
 80024b2:	e094      	b.n	80025de <EXTI+0x736>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a50      	ldr	r2, [pc, #320]	; (80025f8 <EXTI+0x750>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d106      	bne.n	80024ca <EXTI+0x622>
 80024bc:	4b4b      	ldr	r3, [pc, #300]	; (80025ec <EXTI+0x744>)
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	4a4a      	ldr	r2, [pc, #296]	; (80025ec <EXTI+0x744>)
 80024c2:	f043 0320 	orr.w	r3, r3, #32
 80024c6:	6153      	str	r3, [r2, #20]
		break;
 80024c8:	e089      	b.n	80025de <EXTI+0x736>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4a46      	ldr	r2, [pc, #280]	; (80025e8 <EXTI+0x740>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	f040 8085 	bne.w	80025de <EXTI+0x736>
 80024d4:	4b45      	ldr	r3, [pc, #276]	; (80025ec <EXTI+0x744>)
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	4a44      	ldr	r2, [pc, #272]	; (80025ec <EXTI+0x744>)
 80024da:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80024de:	6153      	str	r3, [r2, #20]
		break;
 80024e0:	e07d      	b.n	80025de <EXTI+0x736>
	case pin14:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<8);
 80024e2:	4b42      	ldr	r3, [pc, #264]	; (80025ec <EXTI+0x744>)
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4a41      	ldr	r2, [pc, #260]	; (80025ec <EXTI+0x744>)
 80024e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024ec:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<8);}
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a3f      	ldr	r2, [pc, #252]	; (80025f0 <EXTI+0x748>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d106      	bne.n	8002504 <EXTI+0x65c>
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <EXTI+0x744>)
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	4a3c      	ldr	r2, [pc, #240]	; (80025ec <EXTI+0x744>)
 80024fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002500:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}

		break;
 8002502:	e06e      	b.n	80025e2 <EXTI+0x73a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4a3b      	ldr	r2, [pc, #236]	; (80025f4 <EXTI+0x74c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d106      	bne.n	800251a <EXTI+0x672>
 800250c:	4b37      	ldr	r3, [pc, #220]	; (80025ec <EXTI+0x744>)
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	4a36      	ldr	r2, [pc, #216]	; (80025ec <EXTI+0x744>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002516:	6153      	str	r3, [r2, #20]
		break;
 8002518:	e063      	b.n	80025e2 <EXTI+0x73a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4a36      	ldr	r2, [pc, #216]	; (80025f8 <EXTI+0x750>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d106      	bne.n	8002530 <EXTI+0x688>
 8002522:	4b32      	ldr	r3, [pc, #200]	; (80025ec <EXTI+0x744>)
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	4a31      	ldr	r2, [pc, #196]	; (80025ec <EXTI+0x744>)
 8002528:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800252c:	6153      	str	r3, [r2, #20]
		break;
 800252e:	e058      	b.n	80025e2 <EXTI+0x73a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4a2d      	ldr	r2, [pc, #180]	; (80025e8 <EXTI+0x740>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d154      	bne.n	80025e2 <EXTI+0x73a>
 8002538:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <EXTI+0x744>)
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <EXTI+0x744>)
 800253e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002542:	6153      	str	r3, [r2, #20]
		break;
 8002544:	e04d      	b.n	80025e2 <EXTI+0x73a>
	case pin15:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<12);
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <EXTI+0x744>)
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	4a28      	ldr	r2, [pc, #160]	; (80025ec <EXTI+0x744>)
 800254c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002550:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<12);}
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <EXTI+0x748>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d106      	bne.n	8002568 <EXTI+0x6c0>
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <EXTI+0x744>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	4a23      	ldr	r2, [pc, #140]	; (80025ec <EXTI+0x744>)
 8002560:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002564:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}

		break;
 8002566:	e049      	b.n	80025fc <EXTI+0x754>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <EXTI+0x74c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d106      	bne.n	800257e <EXTI+0x6d6>
 8002570:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <EXTI+0x744>)
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <EXTI+0x744>)
 8002576:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800257a:	6153      	str	r3, [r2, #20]
		break;
 800257c:	e03e      	b.n	80025fc <EXTI+0x754>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <EXTI+0x750>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d106      	bne.n	8002594 <EXTI+0x6ec>
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <EXTI+0x744>)
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	4a18      	ldr	r2, [pc, #96]	; (80025ec <EXTI+0x744>)
 800258c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002590:	6153      	str	r3, [r2, #20]
		break;
 8002592:	e033      	b.n	80025fc <EXTI+0x754>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <EXTI+0x740>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d12f      	bne.n	80025fc <EXTI+0x754>
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <EXTI+0x744>)
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	4a12      	ldr	r2, [pc, #72]	; (80025ec <EXTI+0x744>)
 80025a2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80025a6:	6153      	str	r3, [r2, #20]
		break;
 80025a8:	e028      	b.n	80025fc <EXTI+0x754>
		break;
 80025aa:	bf00      	nop
 80025ac:	e027      	b.n	80025fe <EXTI+0x756>
		break;
 80025ae:	bf00      	nop
 80025b0:	e025      	b.n	80025fe <EXTI+0x756>
		break;
 80025b2:	bf00      	nop
 80025b4:	e023      	b.n	80025fe <EXTI+0x756>
		break;
 80025b6:	bf00      	nop
 80025b8:	e021      	b.n	80025fe <EXTI+0x756>
		break;
 80025ba:	bf00      	nop
 80025bc:	e01f      	b.n	80025fe <EXTI+0x756>
		break;
 80025be:	bf00      	nop
 80025c0:	e01d      	b.n	80025fe <EXTI+0x756>
		break;
 80025c2:	bf00      	nop
 80025c4:	e01b      	b.n	80025fe <EXTI+0x756>
		break;
 80025c6:	bf00      	nop
 80025c8:	e019      	b.n	80025fe <EXTI+0x756>
		break;
 80025ca:	bf00      	nop
 80025cc:	e017      	b.n	80025fe <EXTI+0x756>
		break;
 80025ce:	bf00      	nop
 80025d0:	e015      	b.n	80025fe <EXTI+0x756>
		break;
 80025d2:	bf00      	nop
 80025d4:	e013      	b.n	80025fe <EXTI+0x756>
		break;
 80025d6:	bf00      	nop
 80025d8:	e011      	b.n	80025fe <EXTI+0x756>
		break;
 80025da:	bf00      	nop
 80025dc:	e00f      	b.n	80025fe <EXTI+0x756>
		break;
 80025de:	bf00      	nop
 80025e0:	e00d      	b.n	80025fe <EXTI+0x756>
		break;
 80025e2:	bf00      	nop
 80025e4:	e00b      	b.n	80025fe <EXTI+0x756>
 80025e6:	bf00      	nop
 80025e8:	40011400 	.word	0x40011400
 80025ec:	40010000 	.word	0x40010000
 80025f0:	40010800 	.word	0x40010800
 80025f4:	40010c00 	.word	0x40010c00
 80025f8:	40011000 	.word	0x40011000
		break;
 80025fc:	bf00      	nop
	}
	//================================================
	//3- Update Rising or Falling Register
	EXIT->EXTI_RTSR &=~(1<<pin);
 80025fe:	4b50      	ldr	r3, [pc, #320]	; (8002740 <EXTI+0x898>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	897a      	ldrh	r2, [r7, #10]
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	43d2      	mvns	r2, r2
 800260c:	4611      	mov	r1, r2
 800260e:	4a4c      	ldr	r2, [pc, #304]	; (8002740 <EXTI+0x898>)
 8002610:	400b      	ands	r3, r1
 8002612:	6093      	str	r3, [r2, #8]
	EXIT->EXTI_FTSR &=~(1<<pin);
 8002614:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <EXTI+0x898>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	897a      	ldrh	r2, [r7, #10]
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	43d2      	mvns	r2, r2
 8002622:	4611      	mov	r1, r2
 8002624:	4a46      	ldr	r2, [pc, #280]	; (8002740 <EXTI+0x898>)
 8002626:	400b      	ands	r3, r1
 8002628:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 800262a:	893b      	ldrh	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <EXTI+0x79e>
		EXIT->EXTI_RTSR |= (1<<pin);
 8002630:	4b43      	ldr	r3, [pc, #268]	; (8002740 <EXTI+0x898>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	897a      	ldrh	r2, [r7, #10]
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	4611      	mov	r1, r2
 800263e:	4a40      	ldr	r2, [pc, #256]	; (8002740 <EXTI+0x898>)
 8002640:	430b      	orrs	r3, r1
 8002642:	6093      	str	r3, [r2, #8]
 8002644:	e021      	b.n	800268a <EXTI+0x7e2>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 8002646:	893b      	ldrh	r3, [r7, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d10a      	bne.n	8002662 <EXTI+0x7ba>
		EXIT->EXTI_FTSR |= (1<<pin);
 800264c:	4b3c      	ldr	r3, [pc, #240]	; (8002740 <EXTI+0x898>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	897a      	ldrh	r2, [r7, #10]
 8002652:	2101      	movs	r1, #1
 8002654:	fa01 f202 	lsl.w	r2, r1, r2
 8002658:	4611      	mov	r1, r2
 800265a:	4a39      	ldr	r2, [pc, #228]	; (8002740 <EXTI+0x898>)
 800265c:	430b      	orrs	r3, r1
 800265e:	60d3      	str	r3, [r2, #12]
 8002660:	e013      	b.n	800268a <EXTI+0x7e2>
	}
	else{
		EXIT->EXTI_RTSR |= (1<<pin);
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <EXTI+0x898>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	897a      	ldrh	r2, [r7, #10]
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f202 	lsl.w	r2, r1, r2
 800266e:	4611      	mov	r1, r2
 8002670:	4a33      	ldr	r2, [pc, #204]	; (8002740 <EXTI+0x898>)
 8002672:	430b      	orrs	r3, r1
 8002674:	6093      	str	r3, [r2, #8]
		EXIT->EXTI_FTSR |= (1<<pin);
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <EXTI+0x898>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	897a      	ldrh	r2, [r7, #10]
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	4611      	mov	r1, r2
 8002684:	4a2e      	ldr	r2, [pc, #184]	; (8002740 <EXTI+0x898>)
 8002686:	430b      	orrs	r3, r1
 8002688:	60d3      	str	r3, [r2, #12]
	}


	//4- Update IRQ Handling callback
	ARR_INTERRUPT_TRACK[interrupt_numpers].pin=pin;
 800268a:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <EXTI+0x89c>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	897b      	ldrh	r3, [r7, #10]
 8002692:	b2d9      	uxtb	r1, r3
 8002694:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <EXTI+0x8a0>)
 8002696:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
	if(PORTx==GPIOA)     {ARR_INTERRUPT_TRACK[interrupt_numpers].port=1;}
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4a2b      	ldr	r2, [pc, #172]	; (800274c <EXTI+0x8a4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d107      	bne.n	80026b2 <EXTI+0x80a>
 80026a2:	4b28      	ldr	r3, [pc, #160]	; (8002744 <EXTI+0x89c>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	4a28      	ldr	r2, [pc, #160]	; (8002748 <EXTI+0x8a0>)
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	2201      	movs	r2, #1
 80026ae:	705a      	strb	r2, [r3, #1]
 80026b0:	e022      	b.n	80026f8 <EXTI+0x850>
	else if(PORTx==GPIOB){ARR_INTERRUPT_TRACK[interrupt_numpers].port=2;}
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a26      	ldr	r2, [pc, #152]	; (8002750 <EXTI+0x8a8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d107      	bne.n	80026ca <EXTI+0x822>
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <EXTI+0x89c>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4a22      	ldr	r2, [pc, #136]	; (8002748 <EXTI+0x8a0>)
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	2202      	movs	r2, #2
 80026c6:	705a      	strb	r2, [r3, #1]
 80026c8:	e016      	b.n	80026f8 <EXTI+0x850>
	else if(PORTx==GPIOC){ARR_INTERRUPT_TRACK[interrupt_numpers].port=3;}
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4a21      	ldr	r2, [pc, #132]	; (8002754 <EXTI+0x8ac>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d107      	bne.n	80026e2 <EXTI+0x83a>
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <EXTI+0x89c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <EXTI+0x8a0>)
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	2203      	movs	r2, #3
 80026de:	705a      	strb	r2, [r3, #1]
 80026e0:	e00a      	b.n	80026f8 <EXTI+0x850>
	else if(PORTx==GPIOD){ARR_INTERRUPT_TRACK[interrupt_numpers].port=4;}
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <EXTI+0x8b0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d106      	bne.n	80026f8 <EXTI+0x850>
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <EXTI+0x89c>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4a16      	ldr	r2, [pc, #88]	; (8002748 <EXTI+0x8a0>)
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	2204      	movs	r2, #4
 80026f6:	705a      	strb	r2, [r3, #1]


	GP_IRQ_Callback[interrupt_numpers++] =(void(*)(interrupt_data* isr_data,uint8_t interupt_num))function_addres;
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <EXTI+0x89c>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	b2d1      	uxtb	r1, r2
 8002700:	4a10      	ldr	r2, [pc, #64]	; (8002744 <EXTI+0x89c>)
 8002702:	7011      	strb	r1, [r2, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <EXTI+0x8b4>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(interrupt_numpers>=15){
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <EXTI+0x89c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b0e      	cmp	r3, #14
 8002714:	d902      	bls.n	800271c <EXTI+0x874>
		interrupt_numpers=0;
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <EXTI+0x89c>)
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
	}

	EXIT->EXTI_IMR |=(1<<pin);
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <EXTI+0x898>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	897a      	ldrh	r2, [r7, #10]
 8002722:	2101      	movs	r1, #1
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	4611      	mov	r1, r2
 800272a:	4a05      	ldr	r2, [pc, #20]	; (8002740 <EXTI+0x898>)
 800272c:	430b      	orrs	r3, r1
 800272e:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 8002730:	897b      	ldrh	r3, [r7, #10]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fb52 	bl	8001ddc <Enable_NVIC>
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40010400 	.word	0x40010400
 8002744:	20000226 	.word	0x20000226
 8002748:	200002b8 	.word	0x200002b8
 800274c:	40010800 	.word	0x40010800
 8002750:	40010c00 	.word	0x40010c00
 8002754:	40011000 	.word	0x40011000
 8002758:	40011400 	.word	0x40011400
 800275c:	2000027c 	.word	0x2000027c

08002760 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <EXTI0_IRQHandler+0x20>)
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	4a05      	ldr	r2, [pc, #20]	; (8002780 <EXTI0_IRQHandler+0x20>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0](ARR_INTERRUPT_TRACK,0);
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <EXTI0_IRQHandler+0x24>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2100      	movs	r1, #0
 8002776:	4804      	ldr	r0, [pc, #16]	; (8002788 <EXTI0_IRQHandler+0x28>)
 8002778:	4798      	blx	r3
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40010400 	.word	0x40010400
 8002784:	2000027c 	.word	0x2000027c
 8002788:	200002b8 	.word	0x200002b8

0800278c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <EXTI1_IRQHandler+0x20>)
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	4a05      	ldr	r2, [pc, #20]	; (80027ac <EXTI1_IRQHandler+0x20>)
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1](ARR_INTERRUPT_TRACK,1);
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <EXTI1_IRQHandler+0x24>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2101      	movs	r1, #1
 80027a2:	4804      	ldr	r0, [pc, #16]	; (80027b4 <EXTI1_IRQHandler+0x28>)
 80027a4:	4798      	blx	r3

}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40010400 	.word	0x40010400
 80027b0:	2000027c 	.word	0x2000027c
 80027b4:	200002b8 	.word	0x200002b8

080027b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <EXTI2_IRQHandler+0x20>)
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <EXTI2_IRQHandler+0x20>)
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2](ARR_INTERRUPT_TRACK,2);
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <EXTI2_IRQHandler+0x24>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2102      	movs	r1, #2
 80027ce:	4804      	ldr	r0, [pc, #16]	; (80027e0 <EXTI2_IRQHandler+0x28>)
 80027d0:	4798      	blx	r3
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40010400 	.word	0x40010400
 80027dc:	2000027c 	.word	0x2000027c
 80027e0:	200002b8 	.word	0x200002b8

080027e4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <EXTI3_IRQHandler+0x20>)
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	4a05      	ldr	r2, [pc, #20]	; (8002804 <EXTI3_IRQHandler+0x20>)
 80027ee:	f043 0308 	orr.w	r3, r3, #8
 80027f2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3](ARR_INTERRUPT_TRACK,3);
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <EXTI3_IRQHandler+0x24>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2103      	movs	r1, #3
 80027fa:	4804      	ldr	r0, [pc, #16]	; (800280c <EXTI3_IRQHandler+0x28>)
 80027fc:	4798      	blx	r3
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40010400 	.word	0x40010400
 8002808:	2000027c 	.word	0x2000027c
 800280c:	200002b8 	.word	0x200002b8

08002810 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <EXTI4_IRQHandler+0x20>)
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	4a05      	ldr	r2, [pc, #20]	; (8002830 <EXTI4_IRQHandler+0x20>)
 800281a:	f043 0310 	orr.w	r3, r3, #16
 800281e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4](ARR_INTERRUPT_TRACK,4);
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <EXTI4_IRQHandler+0x24>)
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2104      	movs	r1, #4
 8002826:	4804      	ldr	r0, [pc, #16]	; (8002838 <EXTI4_IRQHandler+0x28>)
 8002828:	4798      	blx	r3
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40010400 	.word	0x40010400
 8002834:	2000027c 	.word	0x2000027c
 8002838:	200002b8 	.word	0x200002b8

0800283c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5](ARR_INTERRUPT_TRACK,5);  }
 8002840:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <EXTI9_5_IRQHandler+0x26>
 800284c:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 8002852:	f043 0320 	orr.w	r3, r3, #32
 8002856:	6153      	str	r3, [r2, #20]
 8002858:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <EXTI9_5_IRQHandler+0xb8>)
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	2105      	movs	r1, #5
 800285e:	4826      	ldr	r0, [pc, #152]	; (80028f8 <EXTI9_5_IRQHandler+0xbc>)
 8002860:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6](ARR_INTERRUPT_TRACK,6);  }
 8002862:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <EXTI9_5_IRQHandler+0x48>
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4a1f      	ldr	r2, [pc, #124]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 8002874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002878:	6153      	str	r3, [r2, #20]
 800287a:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <EXTI9_5_IRQHandler+0xb8>)
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2106      	movs	r1, #6
 8002880:	481d      	ldr	r0, [pc, #116]	; (80028f8 <EXTI9_5_IRQHandler+0xbc>)
 8002882:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7](ARR_INTERRUPT_TRACK,7);  }
 8002884:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <EXTI9_5_IRQHandler+0x6a>
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 8002896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289a:	6153      	str	r3, [r2, #20]
 800289c:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <EXTI9_5_IRQHandler+0xb8>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2107      	movs	r1, #7
 80028a2:	4815      	ldr	r0, [pc, #84]	; (80028f8 <EXTI9_5_IRQHandler+0xbc>)
 80028a4:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8](ARR_INTERRUPT_TRACK,8);  }
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <EXTI9_5_IRQHandler+0x8c>
 80028b2:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028bc:	6153      	str	r3, [r2, #20]
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <EXTI9_5_IRQHandler+0xb8>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	2108      	movs	r1, #8
 80028c4:	480c      	ldr	r0, [pc, #48]	; (80028f8 <EXTI9_5_IRQHandler+0xbc>)
 80028c6:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9](ARR_INTERRUPT_TRACK,9);  }
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <EXTI9_5_IRQHandler+0xae>
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <EXTI9_5_IRQHandler+0xb4>)
 80028da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028de:	6153      	str	r3, [r2, #20]
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <EXTI9_5_IRQHandler+0xb8>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2109      	movs	r1, #9
 80028e6:	4804      	ldr	r0, [pc, #16]	; (80028f8 <EXTI9_5_IRQHandler+0xbc>)
 80028e8:	4798      	blx	r3
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40010400 	.word	0x40010400
 80028f4:	2000027c 	.word	0x2000027c
 80028f8:	200002b8 	.word	0x200002b8

080028fc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10](ARR_INTERRUPT_TRACK,10);  }
 8002900:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <EXTI15_10_IRQHandler+0x26>
 800290c:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4a2f      	ldr	r2, [pc, #188]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 8002912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002916:	6153      	str	r3, [r2, #20]
 8002918:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <EXTI15_10_IRQHandler+0xd8>)
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	210a      	movs	r1, #10
 800291e:	482e      	ldr	r0, [pc, #184]	; (80029d8 <EXTI15_10_IRQHandler+0xdc>)
 8002920:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11](ARR_INTERRUPT_TRACK,11);  }
 8002922:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <EXTI15_10_IRQHandler+0x48>
 800292e:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 8002934:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002938:	6153      	str	r3, [r2, #20]
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <EXTI15_10_IRQHandler+0xd8>)
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	210b      	movs	r1, #11
 8002940:	4825      	ldr	r0, [pc, #148]	; (80029d8 <EXTI15_10_IRQHandler+0xdc>)
 8002942:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12](ARR_INTERRUPT_TRACK,12);  }
 8002944:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <EXTI15_10_IRQHandler+0x6a>
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 8002956:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800295a:	6153      	str	r3, [r2, #20]
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <EXTI15_10_IRQHandler+0xd8>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	210c      	movs	r1, #12
 8002962:	481d      	ldr	r0, [pc, #116]	; (80029d8 <EXTI15_10_IRQHandler+0xdc>)
 8002964:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13](ARR_INTERRUPT_TRACK,13);  }
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <EXTI15_10_IRQHandler+0x8c>
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 8002978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800297c:	6153      	str	r3, [r2, #20]
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <EXTI15_10_IRQHandler+0xd8>)
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	210d      	movs	r1, #13
 8002984:	4814      	ldr	r0, [pc, #80]	; (80029d8 <EXTI15_10_IRQHandler+0xdc>)
 8002986:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14](ARR_INTERRUPT_TRACK,14);  }
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <EXTI15_10_IRQHandler+0xae>
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 800299a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299e:	6153      	str	r3, [r2, #20]
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <EXTI15_10_IRQHandler+0xd8>)
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	210e      	movs	r1, #14
 80029a6:	480c      	ldr	r0, [pc, #48]	; (80029d8 <EXTI15_10_IRQHandler+0xdc>)
 80029a8:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15](ARR_INTERRUPT_TRACK,15);  }
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <EXTI15_10_IRQHandler+0xd0>
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <EXTI15_10_IRQHandler+0xd4>)
 80029bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c0:	6153      	str	r3, [r2, #20]
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <EXTI15_10_IRQHandler+0xd8>)
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	210f      	movs	r1, #15
 80029c8:	4803      	ldr	r0, [pc, #12]	; (80029d8 <EXTI15_10_IRQHandler+0xdc>)
 80029ca:	4798      	blx	r3

}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40010400 	.word	0x40010400
 80029d4:	2000027c 	.word	0x2000027c
 80029d8:	200002b8 	.word	0x200002b8

080029dc <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
	//slave only todo
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
	//slave only todo
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <USART_INIT>:
//===============================================================
void send_string (){

}
//===============================================================
void USART_INIT(USART_typeDef* USARTx,uint32_t mode,uint32_t word_length,uint32_t stop_bits,uint32_t baud_rate,uint32_t parity,uint32_t CLCK){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]

	if(USARTx ==USART1){
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a55      	ldr	r2, [pc, #340]	; (8002b5c <USART_INIT+0x168>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d11f      	bne.n	8002a4a <USART_INIT+0x56>
		USART1_Clock_Enable();
 8002a0a:	4b55      	ldr	r3, [pc, #340]	; (8002b60 <USART_INIT+0x16c>)
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	4a54      	ldr	r2, [pc, #336]	; (8002b60 <USART_INIT+0x16c>)
 8002a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a14:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();
 8002a16:	4b52      	ldr	r3, [pc, #328]	; (8002b60 <USART_INIT+0x16c>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	4a51      	ldr	r2, [pc, #324]	; (8002b60 <USART_INIT+0x16c>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	6193      	str	r3, [r2, #24]
		NVIC_USART1_interrupt_Enable;
 8002a22:	4b50      	ldr	r3, [pc, #320]	; (8002b64 <USART_INIT+0x170>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a4f      	ldr	r2, [pc, #316]	; (8002b64 <USART_INIT+0x170>)
 8002a28:	f043 0320 	orr.w	r3, r3, #32
 8002a2c:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin9,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8002a2e:	2209      	movs	r2, #9
 8002a30:	2109      	movs	r1, #9
 8002a32:	484d      	ldr	r0, [pc, #308]	; (8002b68 <USART_INIT+0x174>)
 8002a34:	f7fe fbcc 	bl	80011d0 <pinmode>
		//RX
		pinmode(GPIOA, pin10,GPIO_MODE_INTPUT_AF);
 8002a38:	2204      	movs	r2, #4
 8002a3a:	210a      	movs	r1, #10
 8002a3c:	484a      	ldr	r0, [pc, #296]	; (8002b68 <USART_INIT+0x174>)
 8002a3e:	f7fe fbc7 	bl	80011d0 <pinmode>
		arr[0]=USART1;
 8002a42:	4b4a      	ldr	r3, [pc, #296]	; (8002b6c <USART_INIT+0x178>)
 8002a44:	4a45      	ldr	r2, [pc, #276]	; (8002b5c <USART_INIT+0x168>)
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	e042      	b.n	8002ad0 <USART_INIT+0xdc>
	}
	else if(USARTx ==USART2){
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a48      	ldr	r2, [pc, #288]	; (8002b70 <USART_INIT+0x17c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d11f      	bne.n	8002a92 <USART_INIT+0x9e>
		USART2_Clock_Enable();
 8002a52:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <USART_INIT+0x16c>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	4a42      	ldr	r2, [pc, #264]	; (8002b60 <USART_INIT+0x16c>)
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5c:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();
 8002a5e:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <USART_INIT+0x16c>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	4a3f      	ldr	r2, [pc, #252]	; (8002b60 <USART_INIT+0x16c>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	6193      	str	r3, [r2, #24]
		NVIC_USART2_interrupt_Enable;
 8002a6a:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <USART_INIT+0x170>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a3d      	ldr	r2, [pc, #244]	; (8002b64 <USART_INIT+0x170>)
 8002a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a74:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin2,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8002a76:	2209      	movs	r2, #9
 8002a78:	2102      	movs	r1, #2
 8002a7a:	483b      	ldr	r0, [pc, #236]	; (8002b68 <USART_INIT+0x174>)
 8002a7c:	f7fe fba8 	bl	80011d0 <pinmode>
		//RX
		pinmode(GPIOA, pin3,GPIO_MODE_INTPUT_AF);
 8002a80:	2204      	movs	r2, #4
 8002a82:	2103      	movs	r1, #3
 8002a84:	4838      	ldr	r0, [pc, #224]	; (8002b68 <USART_INIT+0x174>)
 8002a86:	f7fe fba3 	bl	80011d0 <pinmode>
		arr[1]=USART2;
 8002a8a:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <USART_INIT+0x178>)
 8002a8c:	4a38      	ldr	r2, [pc, #224]	; (8002b70 <USART_INIT+0x17c>)
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	e01e      	b.n	8002ad0 <USART_INIT+0xdc>
	}
	else{
		USART3_Clock_Enable();
 8002a92:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <USART_INIT+0x16c>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4a32      	ldr	r2, [pc, #200]	; (8002b60 <USART_INIT+0x16c>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 8002a9e:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <USART_INIT+0x16c>)
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	4a2f      	ldr	r2, [pc, #188]	; (8002b60 <USART_INIT+0x16c>)
 8002aa4:	f043 0308 	orr.w	r3, r3, #8
 8002aa8:	6193      	str	r3, [r2, #24]
		NVIC_USART3_interrupt_Enable;
 8002aaa:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <USART_INIT+0x170>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2d      	ldr	r2, [pc, #180]	; (8002b64 <USART_INIT+0x170>)
 8002ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab4:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8002ab6:	2209      	movs	r2, #9
 8002ab8:	210a      	movs	r1, #10
 8002aba:	482e      	ldr	r0, [pc, #184]	; (8002b74 <USART_INIT+0x180>)
 8002abc:	f7fe fb88 	bl	80011d0 <pinmode>
		//RX
		pinmode(GPIOB, pin11,GPIO_MODE_INTPUT_AF);
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	210b      	movs	r1, #11
 8002ac4:	482b      	ldr	r0, [pc, #172]	; (8002b74 <USART_INIT+0x180>)
 8002ac6:	f7fe fb83 	bl	80011d0 <pinmode>
		arr[2]=USART3;
 8002aca:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <USART_INIT+0x178>)
 8002acc:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <USART_INIT+0x184>)
 8002ace:	609a      	str	r2, [r3, #8]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enabled
	USARTx->USART_CR1 |=(1<<13);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	60da      	str	r2, [r3, #12]
	//STEP 2
	//	Bit 12 M: Word length
	//	This bit determines the word length. It is set or cleared by software.
	//	0: 1 Start bit, 8 Data bits, n Stop bit
	//	1: 1 Start bit, 9 Data bits, n Stop bit
	USARTx->USART_CR1 |=word_length;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	60da      	str	r2, [r3, #12]
	//	These bits are used for programming the stop bits.
	//	00: 1 Stop bit
	//	01: 0.5 Stop bit
	//	10: 2 Stop bits
	//	11: 1.5 Stop bit
	USARTx->USART_CR2 |=stop_bits;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	611a      	str	r2, [r3, #16]
	//	2: When TE is set there is a 1 bit-time delay before the transmission starts.
	//	Bit 2 RE: Receiver enable
	//	This bit enables the receiver. It is set and cleared by software.
	//	0: Receiver is disabled
	//	1: Receiver is enabled and begins searching for a start bit
	USARTx->USART_CR1 |=mode;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	60da      	str	r2, [r3, #12]
	//	Bit 9 PS: Parity selection
	//	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	//	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	//	0: Even parity
	//	1: Odd parity
	USARTx->USART_CR1 |=parity;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	431a      	orrs	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	60da      	str	r2, [r3, #12]
	//	Bits 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV
	//	These 12 bits define the mantissa of the USART Divider (USARTDIV)
	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV
	//	These 4 bits define the fraction of the USART Divider (USARTDIV)

	uint16_t DIV_Mantissa =CLCK /(baud_rate*16);
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b16:	82fb      	strh	r3, [r7, #22]
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <USART_INIT+0x188>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	8afa      	ldrh	r2, [r7, #22]
 8002b2c:	2164      	movs	r1, #100	; 0x64
 8002b2e:	fb01 f202 	mul.w	r2, r1, r2
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <USART_INIT+0x188>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	82bb      	strh	r3, [r7, #20]
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );
 8002b40:	8afb      	ldrh	r3, [r7, #22]
 8002b42:	011a      	lsls	r2, r3, #4
 8002b44:	8abb      	ldrh	r3, [r7, #20]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	609a      	str	r2, [r3, #8]


}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40021000 	.word	0x40021000
 8002b64:	e000e104 	.word	0xe000e104
 8002b68:	40010800 	.word	0x40010800
 8002b6c:	200002d8 	.word	0x200002d8
 8002b70:	40004400 	.word	0x40004400
 8002b74:	40010c00 	.word	0x40010c00
 8002b78:	40004800 	.word	0x40004800
 8002b7c:	51eb851f 	.word	0x51eb851f

08002b80 <USART_SEND>:
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	0b1b      	lsrs	r3, r3, #12
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d106      	bne.n	8002ba6 <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 8002ba4:	e004      	b.n	8002bb0 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	605a      	str	r2, [r3, #4]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
	...

08002bbc <USART_READ>:

void USART_READ(USART_typeDef* USARTx,uint16_t* data){
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <USART_READ+0x44>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d103      	bne.n	8002bd6 <USART_READ+0x1a>
		*data=arr_data_RES[0];
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <USART_READ+0x48>)
 8002bd0:	881a      	ldrh	r2, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	801a      	strh	r2, [r3, #0]
	}
	if(USARTx==USART2){
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a0b      	ldr	r2, [pc, #44]	; (8002c08 <USART_READ+0x4c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d103      	bne.n	8002be6 <USART_READ+0x2a>
		*data=arr_data_RES[1];
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <USART_READ+0x48>)
 8002be0:	885a      	ldrh	r2, [r3, #2]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	801a      	strh	r2, [r3, #0]
	}
	if(USARTx==USART3){
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <USART_READ+0x50>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d103      	bne.n	8002bf6 <USART_READ+0x3a>
		*data=arr_data_RES[2];
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <USART_READ+0x48>)
 8002bf0:	889a      	ldrh	r2, [r3, #4]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	801a      	strh	r2, [r3, #0]
	}

}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	40013800 	.word	0x40013800
 8002c04:	200002e4 	.word	0x200002e4
 8002c08:	40004400 	.word	0x40004400
 8002c0c:	40004800 	.word	0x40004800

08002c10 <USART_SEND_STRING>:

void USART_SEND_STRING(USART_typeDef* USARTx,uint8_t* data){
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <USART_SEND_STRING+0x5c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d105      	bne.n	8002c2e <USART_SEND_STRING+0x1e>
		arr_data[0]=data;
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <USART_SEND_STRING+0x60>)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6013      	str	r3, [r2, #0]
		arr[0]=USART1;
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <USART_SEND_STRING+0x64>)
 8002c2a:	4a10      	ldr	r2, [pc, #64]	; (8002c6c <USART_SEND_STRING+0x5c>)
 8002c2c:	601a      	str	r2, [r3, #0]
	}
	if(USARTx==USART2){
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a11      	ldr	r2, [pc, #68]	; (8002c78 <USART_SEND_STRING+0x68>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d105      	bne.n	8002c42 <USART_SEND_STRING+0x32>
		arr_data[1]=data;
 8002c36:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <USART_SEND_STRING+0x60>)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6053      	str	r3, [r2, #4]
		arr[1]=USART2;
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <USART_SEND_STRING+0x64>)
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <USART_SEND_STRING+0x68>)
 8002c40:	605a      	str	r2, [r3, #4]
	}
	if(USARTx==USART3){
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <USART_SEND_STRING+0x6c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d105      	bne.n	8002c56 <USART_SEND_STRING+0x46>
		arr_data[2]=data;
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <USART_SEND_STRING+0x60>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6093      	str	r3, [r2, #8]
		arr[2]=USART3;
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <USART_SEND_STRING+0x64>)
 8002c52:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <USART_SEND_STRING+0x6c>)
 8002c54:	609a      	str	r2, [r3, #8]
	}
	//Bit 7 TXEIE: TXE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
	USARTx->USART_CR1 |=Transmit_data_register_empty;//open flage of interrupt
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60da      	str	r2, [r3, #12]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	200002ec 	.word	0x200002ec
 8002c74:	200002d8 	.word	0x200002d8
 8002c78:	40004400 	.word	0x40004400
 8002c7c:	40004800 	.word	0x40004800

08002c80 <USART_READ_INTERRUPT_EN>:

void USART_READ_INTERRUPT_EN(USART_typeDef* USARTx,void (*calback) (void)){
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <USART_READ_INTERRUPT_EN+0x48>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d103      	bne.n	8002c9a <USART_READ_INTERRUPT_EN+0x1a>
		GP_reseve_Callback[0] = calback;
 8002c92:	4a0e      	ldr	r2, [pc, #56]	; (8002ccc <USART_READ_INTERRUPT_EN+0x4c>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	e00a      	b.n	8002cb0 <USART_READ_INTERRUPT_EN+0x30>
	}
	else if(USARTx==USART2){
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a0c      	ldr	r2, [pc, #48]	; (8002cd0 <USART_READ_INTERRUPT_EN+0x50>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d103      	bne.n	8002caa <USART_READ_INTERRUPT_EN+0x2a>
		GP_reseve_Callback[1] = calback;
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <USART_READ_INTERRUPT_EN+0x4c>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6053      	str	r3, [r2, #4]
 8002ca8:	e002      	b.n	8002cb0 <USART_READ_INTERRUPT_EN+0x30>
	}
	else{
		GP_reseve_Callback[2] = calback;
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <USART_READ_INTERRUPT_EN+0x4c>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6093      	str	r3, [r2, #8]
	//RX INTRRUPT
	//Bit 5 RXNEIE: RXNE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 |=Received_data_ready_to_be_read;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	60da      	str	r2, [r3, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	200002f8 	.word	0x200002f8
 8002cd0:	40004400 	.word	0x40004400

08002cd4 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8002cda:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	09db      	lsrs	r3, r3, #7
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d122      	bne.n	8002d30 <USART1_IRQHandler+0x5c>
 8002cea:	4b4d      	ldr	r3, [pc, #308]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	09db      	lsrs	r3, r3, #7
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d11a      	bne.n	8002d30 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <USART1_IRQHandler+0x150>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 8002d04:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <USART1_IRQHandler+0x150>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f7ff ff36 	bl	8002b80 <USART_SEND>
			++arr_data[0];
 8002d14:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <USART1_IRQHandler+0x150>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	4a42      	ldr	r2, [pc, #264]	; (8002e24 <USART1_IRQHandler+0x150>)
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e007      	b.n	8002d30 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 8002d20:	4b3f      	ldr	r3, [pc, #252]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4b3e      	ldr	r3, [pc, #248]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d2e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 8002d30:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d15b      	bne.n	8002df8 <USART1_IRQHandler+0x124>
 8002d40:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d153      	bne.n	8002df8 <USART1_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 8002d50:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	0b1b      	lsrs	r3, r3, #12
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d117      	bne.n	8002d90 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8002d60:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	0a9b      	lsrs	r3, r3, #10
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d108      	bne.n	8002d82 <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <USART1_IRQHandler+0x154>)
 8002d7e:	801a      	strh	r2, [r3, #0]
 8002d80:	e020      	b.n	8002dc4 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 8002d82:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <USART1_IRQHandler+0x154>)
 8002d8c:	801a      	strh	r2, [r3, #0]
 8002d8e:	e019      	b.n	8002dc4 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8002d90:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	0a9b      	lsrs	r3, r3, #10
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d109      	bne.n	8002db4 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 8002da0:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <USART1_IRQHandler+0x154>)
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	e007      	b.n	8002dc4 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8002db4:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <USART1_IRQHandler+0x154>)
 8002dc2:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 8002dc4:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <USART1_IRQHandler+0x158>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4798      	blx	r3

		//for(long i=0;i<(20000);i++);
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0220 	bic.w	r2, r2, #32
 8002dd8:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <USART1_IRQHandler+0x15c>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	80fb      	strh	r3, [r7, #6]
			arr[0]->USART_SR &=~(1<<5);
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0220 	bic.w	r2, r2, #32
 8002df6:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <USART1_IRQHandler+0x15c>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	80bb      	strh	r3, [r7, #4]
		arr[0]->USART_SR &=~(1<<5);
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <USART1_IRQHandler+0x14c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0220 	bic.w	r2, r2, #32
 8002e14:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200002d8 	.word	0x200002d8
 8002e24:	200002ec 	.word	0x200002ec
 8002e28:	200002e4 	.word	0x200002e4
 8002e2c:	200002f8 	.word	0x200002f8
 8002e30:	40013800 	.word	0x40013800

08002e34 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8002e3a:	4b51      	ldr	r3, [pc, #324]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	09db      	lsrs	r3, r3, #7
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d122      	bne.n	8002e90 <USART2_IRQHandler+0x5c>
 8002e4a:	4b4d      	ldr	r3, [pc, #308]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	09db      	lsrs	r3, r3, #7
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d11a      	bne.n	8002e90 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 8002e5a:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <USART2_IRQHandler+0x150>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00d      	beq.n	8002e80 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 8002e64:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <USART2_IRQHandler+0x150>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	f7ff fe86 	bl	8002b80 <USART_SEND>
			++arr_data[1];
 8002e74:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <USART2_IRQHandler+0x150>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	4a42      	ldr	r2, [pc, #264]	; (8002f84 <USART2_IRQHandler+0x150>)
 8002e7c:	6053      	str	r3, [r2, #4]
 8002e7e:	e007      	b.n	8002e90 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8002e80:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e8e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8002e90:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d15b      	bne.n	8002f58 <USART2_IRQHandler+0x124>
 8002ea0:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d153      	bne.n	8002f58 <USART2_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 8002eb0:	4b33      	ldr	r3, [pc, #204]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	0b1b      	lsrs	r3, r3, #12
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d117      	bne.n	8002ef0 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8002ec0:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	0a9b      	lsrs	r3, r3, #10
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d108      	bne.n	8002ee2 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <USART2_IRQHandler+0x154>)
 8002ede:	805a      	strh	r2, [r3, #2]
 8002ee0:	e020      	b.n	8002f24 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 8002ee2:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <USART2_IRQHandler+0x154>)
 8002eec:	805a      	strh	r2, [r3, #2]
 8002eee:	e019      	b.n	8002f24 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8002ef0:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	0a9b      	lsrs	r3, r3, #10
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d109      	bne.n	8002f14 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8002f00:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <USART2_IRQHandler+0x154>)
 8002f10:	805a      	strh	r2, [r3, #2]
 8002f12:	e007      	b.n	8002f24 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <USART2_IRQHandler+0x154>)
 8002f22:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <USART2_IRQHandler+0x158>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4798      	blx	r3
		//for(long i=0;i<(20000);i++);
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f022 0220 	bic.w	r2, r2, #32
 8002f38:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <USART2_IRQHandler+0x15c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	80fb      	strh	r3, [r7, #6]
			arr[1]->USART_SR &=~(1<<5);
 8002f48:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f022 0220 	bic.w	r2, r2, #32
 8002f56:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <USART2_IRQHandler+0x15c>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	80bb      	strh	r3, [r7, #4]
		arr[1]->USART_SR &=~(1<<5);
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <USART2_IRQHandler+0x14c>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f022 0220 	bic.w	r2, r2, #32
 8002f74:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200002d8 	.word	0x200002d8
 8002f84:	200002ec 	.word	0x200002ec
 8002f88:	200002e4 	.word	0x200002e4
 8002f8c:	200002f8 	.word	0x200002f8
 8002f90:	40004400 	.word	0x40004400

08002f94 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8002f9a:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	09db      	lsrs	r3, r3, #7
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d122      	bne.n	8002ff0 <USART3_IRQHandler+0x5c>
 8002faa:	4b4d      	ldr	r3, [pc, #308]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	09db      	lsrs	r3, r3, #7
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d11a      	bne.n	8002ff0 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <USART3_IRQHandler+0x150>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00d      	beq.n	8002fe0 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 8002fc4:	4b46      	ldr	r3, [pc, #280]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	4b46      	ldr	r3, [pc, #280]	; (80030e4 <USART3_IRQHandler+0x150>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f7ff fdd6 	bl	8002b80 <USART_SEND>
			++arr_data[2];
 8002fd4:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <USART3_IRQHandler+0x150>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	4a42      	ldr	r2, [pc, #264]	; (80030e4 <USART3_IRQHandler+0x150>)
 8002fdc:	6093      	str	r3, [r2, #8]
 8002fde:	e007      	b.n	8002ff0 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 8002fe0:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fee:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d15b      	bne.n	80030b8 <USART3_IRQHandler+0x124>
 8003000:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d153      	bne.n	80030b8 <USART3_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 8003010:	4b33      	ldr	r3, [pc, #204]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	0b1b      	lsrs	r3, r3, #12
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d117      	bne.n	8003050 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8003020:	4b2f      	ldr	r3, [pc, #188]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	0a9b      	lsrs	r3, r3, #10
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d108      	bne.n	8003042 <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8003030:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	b29b      	uxth	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	b29a      	uxth	r2, r3
 800303c:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <USART3_IRQHandler+0x154>)
 800303e:	809a      	strh	r2, [r3, #4]
 8003040:	e020      	b.n	8003084 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 8003042:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	b29a      	uxth	r2, r3
 800304a:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <USART3_IRQHandler+0x154>)
 800304c:	809a      	strh	r2, [r3, #4]
 800304e:	e019      	b.n	8003084 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	0a9b      	lsrs	r3, r3, #10
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d109      	bne.n	8003074 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 8003060:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	b29b      	uxth	r3, r3
 8003068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800306c:	b29a      	uxth	r2, r3
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <USART3_IRQHandler+0x154>)
 8003070:	809a      	strh	r2, [r3, #4]
 8003072:	e007      	b.n	8003084 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8003074:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	b29b      	uxth	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	b29a      	uxth	r2, r3
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <USART3_IRQHandler+0x154>)
 8003082:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <USART3_IRQHandler+0x158>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4798      	blx	r3
		//for(long i=0;i<(20000);i++);

		arr[2]->USART_SR &=~(1<<5);//clear
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <USART3_IRQHandler+0x14c>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <USART3_IRQHandler+0x14c>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f022 0220 	bic.w	r2, r2, #32
 8003098:	601a      	str	r2, [r3, #0]

		if(((arr[2]->USART_SR>>3)&1)|1){
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <USART3_IRQHandler+0x14c>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 80030a0:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <USART3_IRQHandler+0x15c>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	80fb      	strh	r3, [r7, #6]
			arr[2]->USART_SR &=~(1<<5);
 80030a8:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <USART3_IRQHandler+0x14c>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <USART3_IRQHandler+0x14c>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f022 0220 	bic.w	r2, r2, #32
 80030b6:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <USART3_IRQHandler+0x14c>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <USART3_IRQHandler+0x15c>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	80bb      	strh	r3, [r7, #4]
		arr[2]->USART_SR &=~(1<<5);
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <USART3_IRQHandler+0x14c>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <USART3_IRQHandler+0x14c>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f022 0220 	bic.w	r2, r2, #32
 80030d4:	601a      	str	r2, [r3, #0]
	}

}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200002d8 	.word	0x200002d8
 80030e4:	200002ec 	.word	0x200002ec
 80030e8:	200002e4 	.word	0x200002e4
 80030ec:	200002f8 	.word	0x200002f8
 80030f0:	40004800 	.word	0x40004800

080030f4 <atoi>:
 80030f4:	220a      	movs	r2, #10
 80030f6:	2100      	movs	r1, #0
 80030f8:	f000 b8c6 	b.w	8003288 <strtol>

080030fc <__errno>:
 80030fc:	4b01      	ldr	r3, [pc, #4]	; (8003104 <__errno+0x8>)
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000024 	.word	0x20000024

08003108 <__libc_init_array>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	2500      	movs	r5, #0
 800310c:	4e0c      	ldr	r6, [pc, #48]	; (8003140 <__libc_init_array+0x38>)
 800310e:	4c0d      	ldr	r4, [pc, #52]	; (8003144 <__libc_init_array+0x3c>)
 8003110:	1ba4      	subs	r4, r4, r6
 8003112:	10a4      	asrs	r4, r4, #2
 8003114:	42a5      	cmp	r5, r4
 8003116:	d109      	bne.n	800312c <__libc_init_array+0x24>
 8003118:	f000 fce2 	bl	8003ae0 <_init>
 800311c:	2500      	movs	r5, #0
 800311e:	4e0a      	ldr	r6, [pc, #40]	; (8003148 <__libc_init_array+0x40>)
 8003120:	4c0a      	ldr	r4, [pc, #40]	; (800314c <__libc_init_array+0x44>)
 8003122:	1ba4      	subs	r4, r4, r6
 8003124:	10a4      	asrs	r4, r4, #2
 8003126:	42a5      	cmp	r5, r4
 8003128:	d105      	bne.n	8003136 <__libc_init_array+0x2e>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003130:	4798      	blx	r3
 8003132:	3501      	adds	r5, #1
 8003134:	e7ee      	b.n	8003114 <__libc_init_array+0xc>
 8003136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800313a:	4798      	blx	r3
 800313c:	3501      	adds	r5, #1
 800313e:	e7f2      	b.n	8003126 <__libc_init_array+0x1e>
 8003140:	08003c44 	.word	0x08003c44
 8003144:	08003c44 	.word	0x08003c44
 8003148:	08003c44 	.word	0x08003c44
 800314c:	08003c48 	.word	0x08003c48

08003150 <siprintf>:
 8003150:	b40e      	push	{r1, r2, r3}
 8003152:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003156:	b500      	push	{lr}
 8003158:	b09c      	sub	sp, #112	; 0x70
 800315a:	ab1d      	add	r3, sp, #116	; 0x74
 800315c:	9002      	str	r0, [sp, #8]
 800315e:	9006      	str	r0, [sp, #24]
 8003160:	9107      	str	r1, [sp, #28]
 8003162:	9104      	str	r1, [sp, #16]
 8003164:	4808      	ldr	r0, [pc, #32]	; (8003188 <siprintf+0x38>)
 8003166:	4909      	ldr	r1, [pc, #36]	; (800318c <siprintf+0x3c>)
 8003168:	f853 2b04 	ldr.w	r2, [r3], #4
 800316c:	9105      	str	r1, [sp, #20]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	a902      	add	r1, sp, #8
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	f000 f98e 	bl	8003494 <_svfiprintf_r>
 8003178:	2200      	movs	r2, #0
 800317a:	9b02      	ldr	r3, [sp, #8]
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	b01c      	add	sp, #112	; 0x70
 8003180:	f85d eb04 	ldr.w	lr, [sp], #4
 8003184:	b003      	add	sp, #12
 8003186:	4770      	bx	lr
 8003188:	20000024 	.word	0x20000024
 800318c:	ffff0208 	.word	0xffff0208

08003190 <_strtol_l.isra.0>:
 8003190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003194:	4680      	mov	r8, r0
 8003196:	4689      	mov	r9, r1
 8003198:	4692      	mov	sl, r2
 800319a:	461e      	mov	r6, r3
 800319c:	460f      	mov	r7, r1
 800319e:	463d      	mov	r5, r7
 80031a0:	9808      	ldr	r0, [sp, #32]
 80031a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80031a6:	f000 f885 	bl	80032b4 <__locale_ctype_ptr_l>
 80031aa:	4420      	add	r0, r4
 80031ac:	7843      	ldrb	r3, [r0, #1]
 80031ae:	f013 0308 	ands.w	r3, r3, #8
 80031b2:	d132      	bne.n	800321a <_strtol_l.isra.0+0x8a>
 80031b4:	2c2d      	cmp	r4, #45	; 0x2d
 80031b6:	d132      	bne.n	800321e <_strtol_l.isra.0+0x8e>
 80031b8:	2201      	movs	r2, #1
 80031ba:	787c      	ldrb	r4, [r7, #1]
 80031bc:	1cbd      	adds	r5, r7, #2
 80031be:	2e00      	cmp	r6, #0
 80031c0:	d05d      	beq.n	800327e <_strtol_l.isra.0+0xee>
 80031c2:	2e10      	cmp	r6, #16
 80031c4:	d109      	bne.n	80031da <_strtol_l.isra.0+0x4a>
 80031c6:	2c30      	cmp	r4, #48	; 0x30
 80031c8:	d107      	bne.n	80031da <_strtol_l.isra.0+0x4a>
 80031ca:	782b      	ldrb	r3, [r5, #0]
 80031cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80031d0:	2b58      	cmp	r3, #88	; 0x58
 80031d2:	d14f      	bne.n	8003274 <_strtol_l.isra.0+0xe4>
 80031d4:	2610      	movs	r6, #16
 80031d6:	786c      	ldrb	r4, [r5, #1]
 80031d8:	3502      	adds	r5, #2
 80031da:	2a00      	cmp	r2, #0
 80031dc:	bf14      	ite	ne
 80031de:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80031e2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80031e6:	2700      	movs	r7, #0
 80031e8:	fbb1 fcf6 	udiv	ip, r1, r6
 80031ec:	4638      	mov	r0, r7
 80031ee:	fb06 1e1c 	mls	lr, r6, ip, r1
 80031f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80031f6:	2b09      	cmp	r3, #9
 80031f8:	d817      	bhi.n	800322a <_strtol_l.isra.0+0x9a>
 80031fa:	461c      	mov	r4, r3
 80031fc:	42a6      	cmp	r6, r4
 80031fe:	dd23      	ble.n	8003248 <_strtol_l.isra.0+0xb8>
 8003200:	1c7b      	adds	r3, r7, #1
 8003202:	d007      	beq.n	8003214 <_strtol_l.isra.0+0x84>
 8003204:	4584      	cmp	ip, r0
 8003206:	d31c      	bcc.n	8003242 <_strtol_l.isra.0+0xb2>
 8003208:	d101      	bne.n	800320e <_strtol_l.isra.0+0x7e>
 800320a:	45a6      	cmp	lr, r4
 800320c:	db19      	blt.n	8003242 <_strtol_l.isra.0+0xb2>
 800320e:	2701      	movs	r7, #1
 8003210:	fb00 4006 	mla	r0, r0, r6, r4
 8003214:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003218:	e7eb      	b.n	80031f2 <_strtol_l.isra.0+0x62>
 800321a:	462f      	mov	r7, r5
 800321c:	e7bf      	b.n	800319e <_strtol_l.isra.0+0xe>
 800321e:	2c2b      	cmp	r4, #43	; 0x2b
 8003220:	bf04      	itt	eq
 8003222:	1cbd      	addeq	r5, r7, #2
 8003224:	787c      	ldrbeq	r4, [r7, #1]
 8003226:	461a      	mov	r2, r3
 8003228:	e7c9      	b.n	80031be <_strtol_l.isra.0+0x2e>
 800322a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800322e:	2b19      	cmp	r3, #25
 8003230:	d801      	bhi.n	8003236 <_strtol_l.isra.0+0xa6>
 8003232:	3c37      	subs	r4, #55	; 0x37
 8003234:	e7e2      	b.n	80031fc <_strtol_l.isra.0+0x6c>
 8003236:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800323a:	2b19      	cmp	r3, #25
 800323c:	d804      	bhi.n	8003248 <_strtol_l.isra.0+0xb8>
 800323e:	3c57      	subs	r4, #87	; 0x57
 8003240:	e7dc      	b.n	80031fc <_strtol_l.isra.0+0x6c>
 8003242:	f04f 37ff 	mov.w	r7, #4294967295
 8003246:	e7e5      	b.n	8003214 <_strtol_l.isra.0+0x84>
 8003248:	1c7b      	adds	r3, r7, #1
 800324a:	d108      	bne.n	800325e <_strtol_l.isra.0+0xce>
 800324c:	2322      	movs	r3, #34	; 0x22
 800324e:	4608      	mov	r0, r1
 8003250:	f8c8 3000 	str.w	r3, [r8]
 8003254:	f1ba 0f00 	cmp.w	sl, #0
 8003258:	d107      	bne.n	800326a <_strtol_l.isra.0+0xda>
 800325a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800325e:	b102      	cbz	r2, 8003262 <_strtol_l.isra.0+0xd2>
 8003260:	4240      	negs	r0, r0
 8003262:	f1ba 0f00 	cmp.w	sl, #0
 8003266:	d0f8      	beq.n	800325a <_strtol_l.isra.0+0xca>
 8003268:	b10f      	cbz	r7, 800326e <_strtol_l.isra.0+0xde>
 800326a:	f105 39ff 	add.w	r9, r5, #4294967295
 800326e:	f8ca 9000 	str.w	r9, [sl]
 8003272:	e7f2      	b.n	800325a <_strtol_l.isra.0+0xca>
 8003274:	2430      	movs	r4, #48	; 0x30
 8003276:	2e00      	cmp	r6, #0
 8003278:	d1af      	bne.n	80031da <_strtol_l.isra.0+0x4a>
 800327a:	2608      	movs	r6, #8
 800327c:	e7ad      	b.n	80031da <_strtol_l.isra.0+0x4a>
 800327e:	2c30      	cmp	r4, #48	; 0x30
 8003280:	d0a3      	beq.n	80031ca <_strtol_l.isra.0+0x3a>
 8003282:	260a      	movs	r6, #10
 8003284:	e7a9      	b.n	80031da <_strtol_l.isra.0+0x4a>
	...

08003288 <strtol>:
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <strtol+0x24>)
 800328a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800328c:	681c      	ldr	r4, [r3, #0]
 800328e:	4d08      	ldr	r5, [pc, #32]	; (80032b0 <strtol+0x28>)
 8003290:	6a23      	ldr	r3, [r4, #32]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf08      	it	eq
 8003296:	462b      	moveq	r3, r5
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	4613      	mov	r3, r2
 800329c:	460a      	mov	r2, r1
 800329e:	4601      	mov	r1, r0
 80032a0:	4620      	mov	r0, r4
 80032a2:	f7ff ff75 	bl	8003190 <_strtol_l.isra.0>
 80032a6:	b003      	add	sp, #12
 80032a8:	bd30      	pop	{r4, r5, pc}
 80032aa:	bf00      	nop
 80032ac:	20000024 	.word	0x20000024
 80032b0:	20000088 	.word	0x20000088

080032b4 <__locale_ctype_ptr_l>:
 80032b4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80032b8:	4770      	bx	lr

080032ba <__ascii_mbtowc>:
 80032ba:	b082      	sub	sp, #8
 80032bc:	b901      	cbnz	r1, 80032c0 <__ascii_mbtowc+0x6>
 80032be:	a901      	add	r1, sp, #4
 80032c0:	b142      	cbz	r2, 80032d4 <__ascii_mbtowc+0x1a>
 80032c2:	b14b      	cbz	r3, 80032d8 <__ascii_mbtowc+0x1e>
 80032c4:	7813      	ldrb	r3, [r2, #0]
 80032c6:	600b      	str	r3, [r1, #0]
 80032c8:	7812      	ldrb	r2, [r2, #0]
 80032ca:	1c10      	adds	r0, r2, #0
 80032cc:	bf18      	it	ne
 80032ce:	2001      	movne	r0, #1
 80032d0:	b002      	add	sp, #8
 80032d2:	4770      	bx	lr
 80032d4:	4610      	mov	r0, r2
 80032d6:	e7fb      	b.n	80032d0 <__ascii_mbtowc+0x16>
 80032d8:	f06f 0001 	mvn.w	r0, #1
 80032dc:	e7f8      	b.n	80032d0 <__ascii_mbtowc+0x16>
	...

080032e0 <_malloc_r>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	1ccd      	adds	r5, r1, #3
 80032e4:	f025 0503 	bic.w	r5, r5, #3
 80032e8:	3508      	adds	r5, #8
 80032ea:	2d0c      	cmp	r5, #12
 80032ec:	bf38      	it	cc
 80032ee:	250c      	movcc	r5, #12
 80032f0:	2d00      	cmp	r5, #0
 80032f2:	4606      	mov	r6, r0
 80032f4:	db01      	blt.n	80032fa <_malloc_r+0x1a>
 80032f6:	42a9      	cmp	r1, r5
 80032f8:	d903      	bls.n	8003302 <_malloc_r+0x22>
 80032fa:	230c      	movs	r3, #12
 80032fc:	6033      	str	r3, [r6, #0]
 80032fe:	2000      	movs	r0, #0
 8003300:	bd70      	pop	{r4, r5, r6, pc}
 8003302:	f000 fb96 	bl	8003a32 <__malloc_lock>
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <_malloc_r+0xac>)
 8003308:	6814      	ldr	r4, [r2, #0]
 800330a:	4621      	mov	r1, r4
 800330c:	b991      	cbnz	r1, 8003334 <_malloc_r+0x54>
 800330e:	4c20      	ldr	r4, [pc, #128]	; (8003390 <_malloc_r+0xb0>)
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	b91b      	cbnz	r3, 800331c <_malloc_r+0x3c>
 8003314:	4630      	mov	r0, r6
 8003316:	f000 fb3d 	bl	8003994 <_sbrk_r>
 800331a:	6020      	str	r0, [r4, #0]
 800331c:	4629      	mov	r1, r5
 800331e:	4630      	mov	r0, r6
 8003320:	f000 fb38 	bl	8003994 <_sbrk_r>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d124      	bne.n	8003372 <_malloc_r+0x92>
 8003328:	230c      	movs	r3, #12
 800332a:	4630      	mov	r0, r6
 800332c:	6033      	str	r3, [r6, #0]
 800332e:	f000 fb81 	bl	8003a34 <__malloc_unlock>
 8003332:	e7e4      	b.n	80032fe <_malloc_r+0x1e>
 8003334:	680b      	ldr	r3, [r1, #0]
 8003336:	1b5b      	subs	r3, r3, r5
 8003338:	d418      	bmi.n	800336c <_malloc_r+0x8c>
 800333a:	2b0b      	cmp	r3, #11
 800333c:	d90f      	bls.n	800335e <_malloc_r+0x7e>
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	18cc      	adds	r4, r1, r3
 8003342:	50cd      	str	r5, [r1, r3]
 8003344:	4630      	mov	r0, r6
 8003346:	f000 fb75 	bl	8003a34 <__malloc_unlock>
 800334a:	f104 000b 	add.w	r0, r4, #11
 800334e:	1d23      	adds	r3, r4, #4
 8003350:	f020 0007 	bic.w	r0, r0, #7
 8003354:	1ac3      	subs	r3, r0, r3
 8003356:	d0d3      	beq.n	8003300 <_malloc_r+0x20>
 8003358:	425a      	negs	r2, r3
 800335a:	50e2      	str	r2, [r4, r3]
 800335c:	e7d0      	b.n	8003300 <_malloc_r+0x20>
 800335e:	684b      	ldr	r3, [r1, #4]
 8003360:	428c      	cmp	r4, r1
 8003362:	bf16      	itet	ne
 8003364:	6063      	strne	r3, [r4, #4]
 8003366:	6013      	streq	r3, [r2, #0]
 8003368:	460c      	movne	r4, r1
 800336a:	e7eb      	b.n	8003344 <_malloc_r+0x64>
 800336c:	460c      	mov	r4, r1
 800336e:	6849      	ldr	r1, [r1, #4]
 8003370:	e7cc      	b.n	800330c <_malloc_r+0x2c>
 8003372:	1cc4      	adds	r4, r0, #3
 8003374:	f024 0403 	bic.w	r4, r4, #3
 8003378:	42a0      	cmp	r0, r4
 800337a:	d005      	beq.n	8003388 <_malloc_r+0xa8>
 800337c:	1a21      	subs	r1, r4, r0
 800337e:	4630      	mov	r0, r6
 8003380:	f000 fb08 	bl	8003994 <_sbrk_r>
 8003384:	3001      	adds	r0, #1
 8003386:	d0cf      	beq.n	8003328 <_malloc_r+0x48>
 8003388:	6025      	str	r5, [r4, #0]
 800338a:	e7db      	b.n	8003344 <_malloc_r+0x64>
 800338c:	20000228 	.word	0x20000228
 8003390:	2000022c 	.word	0x2000022c

08003394 <_realloc_r>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	4607      	mov	r7, r0
 8003398:	4614      	mov	r4, r2
 800339a:	460e      	mov	r6, r1
 800339c:	b921      	cbnz	r1, 80033a8 <_realloc_r+0x14>
 800339e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033a2:	4611      	mov	r1, r2
 80033a4:	f7ff bf9c 	b.w	80032e0 <_malloc_r>
 80033a8:	b922      	cbnz	r2, 80033b4 <_realloc_r+0x20>
 80033aa:	f000 fb45 	bl	8003a38 <_free_r>
 80033ae:	4625      	mov	r5, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b4:	f000 fb8c 	bl	8003ad0 <_malloc_usable_size_r>
 80033b8:	42a0      	cmp	r0, r4
 80033ba:	d20f      	bcs.n	80033dc <_realloc_r+0x48>
 80033bc:	4621      	mov	r1, r4
 80033be:	4638      	mov	r0, r7
 80033c0:	f7ff ff8e 	bl	80032e0 <_malloc_r>
 80033c4:	4605      	mov	r5, r0
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d0f2      	beq.n	80033b0 <_realloc_r+0x1c>
 80033ca:	4631      	mov	r1, r6
 80033cc:	4622      	mov	r2, r4
 80033ce:	f000 fb0c 	bl	80039ea <memcpy>
 80033d2:	4631      	mov	r1, r6
 80033d4:	4638      	mov	r0, r7
 80033d6:	f000 fb2f 	bl	8003a38 <_free_r>
 80033da:	e7e9      	b.n	80033b0 <_realloc_r+0x1c>
 80033dc:	4635      	mov	r5, r6
 80033de:	e7e7      	b.n	80033b0 <_realloc_r+0x1c>

080033e0 <__ssputs_r>:
 80033e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e4:	688e      	ldr	r6, [r1, #8]
 80033e6:	4682      	mov	sl, r0
 80033e8:	429e      	cmp	r6, r3
 80033ea:	460c      	mov	r4, r1
 80033ec:	4690      	mov	r8, r2
 80033ee:	4699      	mov	r9, r3
 80033f0:	d837      	bhi.n	8003462 <__ssputs_r+0x82>
 80033f2:	898a      	ldrh	r2, [r1, #12]
 80033f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033f8:	d031      	beq.n	800345e <__ssputs_r+0x7e>
 80033fa:	2302      	movs	r3, #2
 80033fc:	6825      	ldr	r5, [r4, #0]
 80033fe:	6909      	ldr	r1, [r1, #16]
 8003400:	1a6f      	subs	r7, r5, r1
 8003402:	6965      	ldr	r5, [r4, #20]
 8003404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003408:	fb95 f5f3 	sdiv	r5, r5, r3
 800340c:	f109 0301 	add.w	r3, r9, #1
 8003410:	443b      	add	r3, r7
 8003412:	429d      	cmp	r5, r3
 8003414:	bf38      	it	cc
 8003416:	461d      	movcc	r5, r3
 8003418:	0553      	lsls	r3, r2, #21
 800341a:	d530      	bpl.n	800347e <__ssputs_r+0x9e>
 800341c:	4629      	mov	r1, r5
 800341e:	f7ff ff5f 	bl	80032e0 <_malloc_r>
 8003422:	4606      	mov	r6, r0
 8003424:	b950      	cbnz	r0, 800343c <__ssputs_r+0x5c>
 8003426:	230c      	movs	r3, #12
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f8ca 3000 	str.w	r3, [sl]
 8003430:	89a3      	ldrh	r3, [r4, #12]
 8003432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003436:	81a3      	strh	r3, [r4, #12]
 8003438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800343c:	463a      	mov	r2, r7
 800343e:	6921      	ldr	r1, [r4, #16]
 8003440:	f000 fad3 	bl	80039ea <memcpy>
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800344a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344e:	81a3      	strh	r3, [r4, #12]
 8003450:	6126      	str	r6, [r4, #16]
 8003452:	443e      	add	r6, r7
 8003454:	6026      	str	r6, [r4, #0]
 8003456:	464e      	mov	r6, r9
 8003458:	6165      	str	r5, [r4, #20]
 800345a:	1bed      	subs	r5, r5, r7
 800345c:	60a5      	str	r5, [r4, #8]
 800345e:	454e      	cmp	r6, r9
 8003460:	d900      	bls.n	8003464 <__ssputs_r+0x84>
 8003462:	464e      	mov	r6, r9
 8003464:	4632      	mov	r2, r6
 8003466:	4641      	mov	r1, r8
 8003468:	6820      	ldr	r0, [r4, #0]
 800346a:	f000 fac9 	bl	8003a00 <memmove>
 800346e:	68a3      	ldr	r3, [r4, #8]
 8003470:	2000      	movs	r0, #0
 8003472:	1b9b      	subs	r3, r3, r6
 8003474:	60a3      	str	r3, [r4, #8]
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	441e      	add	r6, r3
 800347a:	6026      	str	r6, [r4, #0]
 800347c:	e7dc      	b.n	8003438 <__ssputs_r+0x58>
 800347e:	462a      	mov	r2, r5
 8003480:	f7ff ff88 	bl	8003394 <_realloc_r>
 8003484:	4606      	mov	r6, r0
 8003486:	2800      	cmp	r0, #0
 8003488:	d1e2      	bne.n	8003450 <__ssputs_r+0x70>
 800348a:	6921      	ldr	r1, [r4, #16]
 800348c:	4650      	mov	r0, sl
 800348e:	f000 fad3 	bl	8003a38 <_free_r>
 8003492:	e7c8      	b.n	8003426 <__ssputs_r+0x46>

08003494 <_svfiprintf_r>:
 8003494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003498:	461d      	mov	r5, r3
 800349a:	898b      	ldrh	r3, [r1, #12]
 800349c:	b09d      	sub	sp, #116	; 0x74
 800349e:	061f      	lsls	r7, r3, #24
 80034a0:	4680      	mov	r8, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	4616      	mov	r6, r2
 80034a6:	d50f      	bpl.n	80034c8 <_svfiprintf_r+0x34>
 80034a8:	690b      	ldr	r3, [r1, #16]
 80034aa:	b96b      	cbnz	r3, 80034c8 <_svfiprintf_r+0x34>
 80034ac:	2140      	movs	r1, #64	; 0x40
 80034ae:	f7ff ff17 	bl	80032e0 <_malloc_r>
 80034b2:	6020      	str	r0, [r4, #0]
 80034b4:	6120      	str	r0, [r4, #16]
 80034b6:	b928      	cbnz	r0, 80034c4 <_svfiprintf_r+0x30>
 80034b8:	230c      	movs	r3, #12
 80034ba:	f8c8 3000 	str.w	r3, [r8]
 80034be:	f04f 30ff 	mov.w	r0, #4294967295
 80034c2:	e0c8      	b.n	8003656 <_svfiprintf_r+0x1c2>
 80034c4:	2340      	movs	r3, #64	; 0x40
 80034c6:	6163      	str	r3, [r4, #20]
 80034c8:	2300      	movs	r3, #0
 80034ca:	9309      	str	r3, [sp, #36]	; 0x24
 80034cc:	2320      	movs	r3, #32
 80034ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034d2:	2330      	movs	r3, #48	; 0x30
 80034d4:	f04f 0b01 	mov.w	fp, #1
 80034d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034dc:	9503      	str	r5, [sp, #12]
 80034de:	4637      	mov	r7, r6
 80034e0:	463d      	mov	r5, r7
 80034e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034e6:	b10b      	cbz	r3, 80034ec <_svfiprintf_r+0x58>
 80034e8:	2b25      	cmp	r3, #37	; 0x25
 80034ea:	d13e      	bne.n	800356a <_svfiprintf_r+0xd6>
 80034ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80034f0:	d00b      	beq.n	800350a <_svfiprintf_r+0x76>
 80034f2:	4653      	mov	r3, sl
 80034f4:	4632      	mov	r2, r6
 80034f6:	4621      	mov	r1, r4
 80034f8:	4640      	mov	r0, r8
 80034fa:	f7ff ff71 	bl	80033e0 <__ssputs_r>
 80034fe:	3001      	adds	r0, #1
 8003500:	f000 80a4 	beq.w	800364c <_svfiprintf_r+0x1b8>
 8003504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003506:	4453      	add	r3, sl
 8003508:	9309      	str	r3, [sp, #36]	; 0x24
 800350a:	783b      	ldrb	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 809d 	beq.w	800364c <_svfiprintf_r+0x1b8>
 8003512:	2300      	movs	r3, #0
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800351c:	9304      	str	r3, [sp, #16]
 800351e:	9307      	str	r3, [sp, #28]
 8003520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003524:	931a      	str	r3, [sp, #104]	; 0x68
 8003526:	462f      	mov	r7, r5
 8003528:	2205      	movs	r2, #5
 800352a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800352e:	4850      	ldr	r0, [pc, #320]	; (8003670 <_svfiprintf_r+0x1dc>)
 8003530:	f000 fa4d 	bl	80039ce <memchr>
 8003534:	9b04      	ldr	r3, [sp, #16]
 8003536:	b9d0      	cbnz	r0, 800356e <_svfiprintf_r+0xda>
 8003538:	06d9      	lsls	r1, r3, #27
 800353a:	bf44      	itt	mi
 800353c:	2220      	movmi	r2, #32
 800353e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003542:	071a      	lsls	r2, r3, #28
 8003544:	bf44      	itt	mi
 8003546:	222b      	movmi	r2, #43	; 0x2b
 8003548:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800354c:	782a      	ldrb	r2, [r5, #0]
 800354e:	2a2a      	cmp	r2, #42	; 0x2a
 8003550:	d015      	beq.n	800357e <_svfiprintf_r+0xea>
 8003552:	462f      	mov	r7, r5
 8003554:	2000      	movs	r0, #0
 8003556:	250a      	movs	r5, #10
 8003558:	9a07      	ldr	r2, [sp, #28]
 800355a:	4639      	mov	r1, r7
 800355c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003560:	3b30      	subs	r3, #48	; 0x30
 8003562:	2b09      	cmp	r3, #9
 8003564:	d94d      	bls.n	8003602 <_svfiprintf_r+0x16e>
 8003566:	b1b8      	cbz	r0, 8003598 <_svfiprintf_r+0x104>
 8003568:	e00f      	b.n	800358a <_svfiprintf_r+0xf6>
 800356a:	462f      	mov	r7, r5
 800356c:	e7b8      	b.n	80034e0 <_svfiprintf_r+0x4c>
 800356e:	4a40      	ldr	r2, [pc, #256]	; (8003670 <_svfiprintf_r+0x1dc>)
 8003570:	463d      	mov	r5, r7
 8003572:	1a80      	subs	r0, r0, r2
 8003574:	fa0b f000 	lsl.w	r0, fp, r0
 8003578:	4318      	orrs	r0, r3
 800357a:	9004      	str	r0, [sp, #16]
 800357c:	e7d3      	b.n	8003526 <_svfiprintf_r+0x92>
 800357e:	9a03      	ldr	r2, [sp, #12]
 8003580:	1d11      	adds	r1, r2, #4
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	9103      	str	r1, [sp, #12]
 8003586:	2a00      	cmp	r2, #0
 8003588:	db01      	blt.n	800358e <_svfiprintf_r+0xfa>
 800358a:	9207      	str	r2, [sp, #28]
 800358c:	e004      	b.n	8003598 <_svfiprintf_r+0x104>
 800358e:	4252      	negs	r2, r2
 8003590:	f043 0302 	orr.w	r3, r3, #2
 8003594:	9207      	str	r2, [sp, #28]
 8003596:	9304      	str	r3, [sp, #16]
 8003598:	783b      	ldrb	r3, [r7, #0]
 800359a:	2b2e      	cmp	r3, #46	; 0x2e
 800359c:	d10c      	bne.n	80035b8 <_svfiprintf_r+0x124>
 800359e:	787b      	ldrb	r3, [r7, #1]
 80035a0:	2b2a      	cmp	r3, #42	; 0x2a
 80035a2:	d133      	bne.n	800360c <_svfiprintf_r+0x178>
 80035a4:	9b03      	ldr	r3, [sp, #12]
 80035a6:	3702      	adds	r7, #2
 80035a8:	1d1a      	adds	r2, r3, #4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	9203      	str	r2, [sp, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bfb8      	it	lt
 80035b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80035b6:	9305      	str	r3, [sp, #20]
 80035b8:	4d2e      	ldr	r5, [pc, #184]	; (8003674 <_svfiprintf_r+0x1e0>)
 80035ba:	2203      	movs	r2, #3
 80035bc:	7839      	ldrb	r1, [r7, #0]
 80035be:	4628      	mov	r0, r5
 80035c0:	f000 fa05 	bl	80039ce <memchr>
 80035c4:	b138      	cbz	r0, 80035d6 <_svfiprintf_r+0x142>
 80035c6:	2340      	movs	r3, #64	; 0x40
 80035c8:	1b40      	subs	r0, r0, r5
 80035ca:	fa03 f000 	lsl.w	r0, r3, r0
 80035ce:	9b04      	ldr	r3, [sp, #16]
 80035d0:	3701      	adds	r7, #1
 80035d2:	4303      	orrs	r3, r0
 80035d4:	9304      	str	r3, [sp, #16]
 80035d6:	7839      	ldrb	r1, [r7, #0]
 80035d8:	2206      	movs	r2, #6
 80035da:	4827      	ldr	r0, [pc, #156]	; (8003678 <_svfiprintf_r+0x1e4>)
 80035dc:	1c7e      	adds	r6, r7, #1
 80035de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035e2:	f000 f9f4 	bl	80039ce <memchr>
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d038      	beq.n	800365c <_svfiprintf_r+0x1c8>
 80035ea:	4b24      	ldr	r3, [pc, #144]	; (800367c <_svfiprintf_r+0x1e8>)
 80035ec:	bb13      	cbnz	r3, 8003634 <_svfiprintf_r+0x1a0>
 80035ee:	9b03      	ldr	r3, [sp, #12]
 80035f0:	3307      	adds	r3, #7
 80035f2:	f023 0307 	bic.w	r3, r3, #7
 80035f6:	3308      	adds	r3, #8
 80035f8:	9303      	str	r3, [sp, #12]
 80035fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035fc:	444b      	add	r3, r9
 80035fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003600:	e76d      	b.n	80034de <_svfiprintf_r+0x4a>
 8003602:	fb05 3202 	mla	r2, r5, r2, r3
 8003606:	2001      	movs	r0, #1
 8003608:	460f      	mov	r7, r1
 800360a:	e7a6      	b.n	800355a <_svfiprintf_r+0xc6>
 800360c:	2300      	movs	r3, #0
 800360e:	250a      	movs	r5, #10
 8003610:	4619      	mov	r1, r3
 8003612:	3701      	adds	r7, #1
 8003614:	9305      	str	r3, [sp, #20]
 8003616:	4638      	mov	r0, r7
 8003618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800361c:	3a30      	subs	r2, #48	; 0x30
 800361e:	2a09      	cmp	r2, #9
 8003620:	d903      	bls.n	800362a <_svfiprintf_r+0x196>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0c8      	beq.n	80035b8 <_svfiprintf_r+0x124>
 8003626:	9105      	str	r1, [sp, #20]
 8003628:	e7c6      	b.n	80035b8 <_svfiprintf_r+0x124>
 800362a:	fb05 2101 	mla	r1, r5, r1, r2
 800362e:	2301      	movs	r3, #1
 8003630:	4607      	mov	r7, r0
 8003632:	e7f0      	b.n	8003616 <_svfiprintf_r+0x182>
 8003634:	ab03      	add	r3, sp, #12
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	4622      	mov	r2, r4
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <_svfiprintf_r+0x1ec>)
 800363c:	a904      	add	r1, sp, #16
 800363e:	4640      	mov	r0, r8
 8003640:	f3af 8000 	nop.w
 8003644:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003648:	4681      	mov	r9, r0
 800364a:	d1d6      	bne.n	80035fa <_svfiprintf_r+0x166>
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	065b      	lsls	r3, r3, #25
 8003650:	f53f af35 	bmi.w	80034be <_svfiprintf_r+0x2a>
 8003654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003656:	b01d      	add	sp, #116	; 0x74
 8003658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800365c:	ab03      	add	r3, sp, #12
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4622      	mov	r2, r4
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <_svfiprintf_r+0x1ec>)
 8003664:	a904      	add	r1, sp, #16
 8003666:	4640      	mov	r0, r8
 8003668:	f000 f882 	bl	8003770 <_printf_i>
 800366c:	e7ea      	b.n	8003644 <_svfiprintf_r+0x1b0>
 800366e:	bf00      	nop
 8003670:	08003b0d 	.word	0x08003b0d
 8003674:	08003b13 	.word	0x08003b13
 8003678:	08003b17 	.word	0x08003b17
 800367c:	00000000 	.word	0x00000000
 8003680:	080033e1 	.word	0x080033e1

08003684 <_printf_common>:
 8003684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003688:	4691      	mov	r9, r2
 800368a:	461f      	mov	r7, r3
 800368c:	688a      	ldr	r2, [r1, #8]
 800368e:	690b      	ldr	r3, [r1, #16]
 8003690:	4606      	mov	r6, r0
 8003692:	4293      	cmp	r3, r2
 8003694:	bfb8      	it	lt
 8003696:	4613      	movlt	r3, r2
 8003698:	f8c9 3000 	str.w	r3, [r9]
 800369c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036a0:	460c      	mov	r4, r1
 80036a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a6:	b112      	cbz	r2, 80036ae <_printf_common+0x2a>
 80036a8:	3301      	adds	r3, #1
 80036aa:	f8c9 3000 	str.w	r3, [r9]
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	0699      	lsls	r1, r3, #26
 80036b2:	bf42      	ittt	mi
 80036b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036b8:	3302      	addmi	r3, #2
 80036ba:	f8c9 3000 	strmi.w	r3, [r9]
 80036be:	6825      	ldr	r5, [r4, #0]
 80036c0:	f015 0506 	ands.w	r5, r5, #6
 80036c4:	d107      	bne.n	80036d6 <_printf_common+0x52>
 80036c6:	f104 0a19 	add.w	sl, r4, #25
 80036ca:	68e3      	ldr	r3, [r4, #12]
 80036cc:	f8d9 2000 	ldr.w	r2, [r9]
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	42ab      	cmp	r3, r5
 80036d4:	dc29      	bgt.n	800372a <_printf_common+0xa6>
 80036d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80036da:	6822      	ldr	r2, [r4, #0]
 80036dc:	3300      	adds	r3, #0
 80036de:	bf18      	it	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	0692      	lsls	r2, r2, #26
 80036e4:	d42e      	bmi.n	8003744 <_printf_common+0xc0>
 80036e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ea:	4639      	mov	r1, r7
 80036ec:	4630      	mov	r0, r6
 80036ee:	47c0      	blx	r8
 80036f0:	3001      	adds	r0, #1
 80036f2:	d021      	beq.n	8003738 <_printf_common+0xb4>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	68e5      	ldr	r5, [r4, #12]
 80036f8:	f003 0306 	and.w	r3, r3, #6
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	bf18      	it	ne
 8003700:	2500      	movne	r5, #0
 8003702:	f8d9 2000 	ldr.w	r2, [r9]
 8003706:	f04f 0900 	mov.w	r9, #0
 800370a:	bf08      	it	eq
 800370c:	1aad      	subeq	r5, r5, r2
 800370e:	68a3      	ldr	r3, [r4, #8]
 8003710:	6922      	ldr	r2, [r4, #16]
 8003712:	bf08      	it	eq
 8003714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003718:	4293      	cmp	r3, r2
 800371a:	bfc4      	itt	gt
 800371c:	1a9b      	subgt	r3, r3, r2
 800371e:	18ed      	addgt	r5, r5, r3
 8003720:	341a      	adds	r4, #26
 8003722:	454d      	cmp	r5, r9
 8003724:	d11a      	bne.n	800375c <_printf_common+0xd8>
 8003726:	2000      	movs	r0, #0
 8003728:	e008      	b.n	800373c <_printf_common+0xb8>
 800372a:	2301      	movs	r3, #1
 800372c:	4652      	mov	r2, sl
 800372e:	4639      	mov	r1, r7
 8003730:	4630      	mov	r0, r6
 8003732:	47c0      	blx	r8
 8003734:	3001      	adds	r0, #1
 8003736:	d103      	bne.n	8003740 <_printf_common+0xbc>
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003740:	3501      	adds	r5, #1
 8003742:	e7c2      	b.n	80036ca <_printf_common+0x46>
 8003744:	2030      	movs	r0, #48	; 0x30
 8003746:	18e1      	adds	r1, r4, r3
 8003748:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003752:	4422      	add	r2, r4
 8003754:	3302      	adds	r3, #2
 8003756:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800375a:	e7c4      	b.n	80036e6 <_printf_common+0x62>
 800375c:	2301      	movs	r3, #1
 800375e:	4622      	mov	r2, r4
 8003760:	4639      	mov	r1, r7
 8003762:	4630      	mov	r0, r6
 8003764:	47c0      	blx	r8
 8003766:	3001      	adds	r0, #1
 8003768:	d0e6      	beq.n	8003738 <_printf_common+0xb4>
 800376a:	f109 0901 	add.w	r9, r9, #1
 800376e:	e7d8      	b.n	8003722 <_printf_common+0x9e>

08003770 <_printf_i>:
 8003770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003774:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003778:	460c      	mov	r4, r1
 800377a:	7e09      	ldrb	r1, [r1, #24]
 800377c:	b085      	sub	sp, #20
 800377e:	296e      	cmp	r1, #110	; 0x6e
 8003780:	4617      	mov	r7, r2
 8003782:	4606      	mov	r6, r0
 8003784:	4698      	mov	r8, r3
 8003786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003788:	f000 80b3 	beq.w	80038f2 <_printf_i+0x182>
 800378c:	d822      	bhi.n	80037d4 <_printf_i+0x64>
 800378e:	2963      	cmp	r1, #99	; 0x63
 8003790:	d036      	beq.n	8003800 <_printf_i+0x90>
 8003792:	d80a      	bhi.n	80037aa <_printf_i+0x3a>
 8003794:	2900      	cmp	r1, #0
 8003796:	f000 80b9 	beq.w	800390c <_printf_i+0x19c>
 800379a:	2958      	cmp	r1, #88	; 0x58
 800379c:	f000 8083 	beq.w	80038a6 <_printf_i+0x136>
 80037a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037a8:	e032      	b.n	8003810 <_printf_i+0xa0>
 80037aa:	2964      	cmp	r1, #100	; 0x64
 80037ac:	d001      	beq.n	80037b2 <_printf_i+0x42>
 80037ae:	2969      	cmp	r1, #105	; 0x69
 80037b0:	d1f6      	bne.n	80037a0 <_printf_i+0x30>
 80037b2:	6820      	ldr	r0, [r4, #0]
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	0605      	lsls	r5, r0, #24
 80037b8:	f103 0104 	add.w	r1, r3, #4
 80037bc:	d52a      	bpl.n	8003814 <_printf_i+0xa4>
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6011      	str	r1, [r2, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	da03      	bge.n	80037ce <_printf_i+0x5e>
 80037c6:	222d      	movs	r2, #45	; 0x2d
 80037c8:	425b      	negs	r3, r3
 80037ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80037ce:	486f      	ldr	r0, [pc, #444]	; (800398c <_printf_i+0x21c>)
 80037d0:	220a      	movs	r2, #10
 80037d2:	e039      	b.n	8003848 <_printf_i+0xd8>
 80037d4:	2973      	cmp	r1, #115	; 0x73
 80037d6:	f000 809d 	beq.w	8003914 <_printf_i+0x1a4>
 80037da:	d808      	bhi.n	80037ee <_printf_i+0x7e>
 80037dc:	296f      	cmp	r1, #111	; 0x6f
 80037de:	d020      	beq.n	8003822 <_printf_i+0xb2>
 80037e0:	2970      	cmp	r1, #112	; 0x70
 80037e2:	d1dd      	bne.n	80037a0 <_printf_i+0x30>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	f043 0320 	orr.w	r3, r3, #32
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	e003      	b.n	80037f6 <_printf_i+0x86>
 80037ee:	2975      	cmp	r1, #117	; 0x75
 80037f0:	d017      	beq.n	8003822 <_printf_i+0xb2>
 80037f2:	2978      	cmp	r1, #120	; 0x78
 80037f4:	d1d4      	bne.n	80037a0 <_printf_i+0x30>
 80037f6:	2378      	movs	r3, #120	; 0x78
 80037f8:	4865      	ldr	r0, [pc, #404]	; (8003990 <_printf_i+0x220>)
 80037fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037fe:	e055      	b.n	80038ac <_printf_i+0x13c>
 8003800:	6813      	ldr	r3, [r2, #0]
 8003802:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003806:	1d19      	adds	r1, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6011      	str	r1, [r2, #0]
 800380c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003810:	2301      	movs	r3, #1
 8003812:	e08c      	b.n	800392e <_printf_i+0x1be>
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f010 0f40 	tst.w	r0, #64	; 0x40
 800381a:	6011      	str	r1, [r2, #0]
 800381c:	bf18      	it	ne
 800381e:	b21b      	sxthne	r3, r3
 8003820:	e7cf      	b.n	80037c2 <_printf_i+0x52>
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	6825      	ldr	r5, [r4, #0]
 8003826:	1d18      	adds	r0, r3, #4
 8003828:	6010      	str	r0, [r2, #0]
 800382a:	0628      	lsls	r0, r5, #24
 800382c:	d501      	bpl.n	8003832 <_printf_i+0xc2>
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	e002      	b.n	8003838 <_printf_i+0xc8>
 8003832:	0668      	lsls	r0, r5, #25
 8003834:	d5fb      	bpl.n	800382e <_printf_i+0xbe>
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	296f      	cmp	r1, #111	; 0x6f
 800383a:	bf14      	ite	ne
 800383c:	220a      	movne	r2, #10
 800383e:	2208      	moveq	r2, #8
 8003840:	4852      	ldr	r0, [pc, #328]	; (800398c <_printf_i+0x21c>)
 8003842:	2100      	movs	r1, #0
 8003844:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003848:	6865      	ldr	r5, [r4, #4]
 800384a:	2d00      	cmp	r5, #0
 800384c:	60a5      	str	r5, [r4, #8]
 800384e:	f2c0 8095 	blt.w	800397c <_printf_i+0x20c>
 8003852:	6821      	ldr	r1, [r4, #0]
 8003854:	f021 0104 	bic.w	r1, r1, #4
 8003858:	6021      	str	r1, [r4, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d13d      	bne.n	80038da <_printf_i+0x16a>
 800385e:	2d00      	cmp	r5, #0
 8003860:	f040 808e 	bne.w	8003980 <_printf_i+0x210>
 8003864:	4665      	mov	r5, ip
 8003866:	2a08      	cmp	r2, #8
 8003868:	d10b      	bne.n	8003882 <_printf_i+0x112>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	07db      	lsls	r3, r3, #31
 800386e:	d508      	bpl.n	8003882 <_printf_i+0x112>
 8003870:	6923      	ldr	r3, [r4, #16]
 8003872:	6862      	ldr	r2, [r4, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	bfde      	ittt	le
 8003878:	2330      	movle	r3, #48	; 0x30
 800387a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800387e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003882:	ebac 0305 	sub.w	r3, ip, r5
 8003886:	6123      	str	r3, [r4, #16]
 8003888:	f8cd 8000 	str.w	r8, [sp]
 800388c:	463b      	mov	r3, r7
 800388e:	aa03      	add	r2, sp, #12
 8003890:	4621      	mov	r1, r4
 8003892:	4630      	mov	r0, r6
 8003894:	f7ff fef6 	bl	8003684 <_printf_common>
 8003898:	3001      	adds	r0, #1
 800389a:	d14d      	bne.n	8003938 <_printf_i+0x1c8>
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	b005      	add	sp, #20
 80038a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038a6:	4839      	ldr	r0, [pc, #228]	; (800398c <_printf_i+0x21c>)
 80038a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	6821      	ldr	r1, [r4, #0]
 80038b0:	1d1d      	adds	r5, r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6015      	str	r5, [r2, #0]
 80038b6:	060a      	lsls	r2, r1, #24
 80038b8:	d50b      	bpl.n	80038d2 <_printf_i+0x162>
 80038ba:	07ca      	lsls	r2, r1, #31
 80038bc:	bf44      	itt	mi
 80038be:	f041 0120 	orrmi.w	r1, r1, #32
 80038c2:	6021      	strmi	r1, [r4, #0]
 80038c4:	b91b      	cbnz	r3, 80038ce <_printf_i+0x15e>
 80038c6:	6822      	ldr	r2, [r4, #0]
 80038c8:	f022 0220 	bic.w	r2, r2, #32
 80038cc:	6022      	str	r2, [r4, #0]
 80038ce:	2210      	movs	r2, #16
 80038d0:	e7b7      	b.n	8003842 <_printf_i+0xd2>
 80038d2:	064d      	lsls	r5, r1, #25
 80038d4:	bf48      	it	mi
 80038d6:	b29b      	uxthmi	r3, r3
 80038d8:	e7ef      	b.n	80038ba <_printf_i+0x14a>
 80038da:	4665      	mov	r5, ip
 80038dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80038e0:	fb02 3311 	mls	r3, r2, r1, r3
 80038e4:	5cc3      	ldrb	r3, [r0, r3]
 80038e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80038ea:	460b      	mov	r3, r1
 80038ec:	2900      	cmp	r1, #0
 80038ee:	d1f5      	bne.n	80038dc <_printf_i+0x16c>
 80038f0:	e7b9      	b.n	8003866 <_printf_i+0xf6>
 80038f2:	6813      	ldr	r3, [r2, #0]
 80038f4:	6825      	ldr	r5, [r4, #0]
 80038f6:	1d18      	adds	r0, r3, #4
 80038f8:	6961      	ldr	r1, [r4, #20]
 80038fa:	6010      	str	r0, [r2, #0]
 80038fc:	0628      	lsls	r0, r5, #24
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	d501      	bpl.n	8003906 <_printf_i+0x196>
 8003902:	6019      	str	r1, [r3, #0]
 8003904:	e002      	b.n	800390c <_printf_i+0x19c>
 8003906:	066a      	lsls	r2, r5, #25
 8003908:	d5fb      	bpl.n	8003902 <_printf_i+0x192>
 800390a:	8019      	strh	r1, [r3, #0]
 800390c:	2300      	movs	r3, #0
 800390e:	4665      	mov	r5, ip
 8003910:	6123      	str	r3, [r4, #16]
 8003912:	e7b9      	b.n	8003888 <_printf_i+0x118>
 8003914:	6813      	ldr	r3, [r2, #0]
 8003916:	1d19      	adds	r1, r3, #4
 8003918:	6011      	str	r1, [r2, #0]
 800391a:	681d      	ldr	r5, [r3, #0]
 800391c:	6862      	ldr	r2, [r4, #4]
 800391e:	2100      	movs	r1, #0
 8003920:	4628      	mov	r0, r5
 8003922:	f000 f854 	bl	80039ce <memchr>
 8003926:	b108      	cbz	r0, 800392c <_printf_i+0x1bc>
 8003928:	1b40      	subs	r0, r0, r5
 800392a:	6060      	str	r0, [r4, #4]
 800392c:	6863      	ldr	r3, [r4, #4]
 800392e:	6123      	str	r3, [r4, #16]
 8003930:	2300      	movs	r3, #0
 8003932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003936:	e7a7      	b.n	8003888 <_printf_i+0x118>
 8003938:	6923      	ldr	r3, [r4, #16]
 800393a:	462a      	mov	r2, r5
 800393c:	4639      	mov	r1, r7
 800393e:	4630      	mov	r0, r6
 8003940:	47c0      	blx	r8
 8003942:	3001      	adds	r0, #1
 8003944:	d0aa      	beq.n	800389c <_printf_i+0x12c>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	079b      	lsls	r3, r3, #30
 800394a:	d413      	bmi.n	8003974 <_printf_i+0x204>
 800394c:	68e0      	ldr	r0, [r4, #12]
 800394e:	9b03      	ldr	r3, [sp, #12]
 8003950:	4298      	cmp	r0, r3
 8003952:	bfb8      	it	lt
 8003954:	4618      	movlt	r0, r3
 8003956:	e7a3      	b.n	80038a0 <_printf_i+0x130>
 8003958:	2301      	movs	r3, #1
 800395a:	464a      	mov	r2, r9
 800395c:	4639      	mov	r1, r7
 800395e:	4630      	mov	r0, r6
 8003960:	47c0      	blx	r8
 8003962:	3001      	adds	r0, #1
 8003964:	d09a      	beq.n	800389c <_printf_i+0x12c>
 8003966:	3501      	adds	r5, #1
 8003968:	68e3      	ldr	r3, [r4, #12]
 800396a:	9a03      	ldr	r2, [sp, #12]
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	42ab      	cmp	r3, r5
 8003970:	dcf2      	bgt.n	8003958 <_printf_i+0x1e8>
 8003972:	e7eb      	b.n	800394c <_printf_i+0x1dc>
 8003974:	2500      	movs	r5, #0
 8003976:	f104 0919 	add.w	r9, r4, #25
 800397a:	e7f5      	b.n	8003968 <_printf_i+0x1f8>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1ac      	bne.n	80038da <_printf_i+0x16a>
 8003980:	7803      	ldrb	r3, [r0, #0]
 8003982:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003986:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800398a:	e76c      	b.n	8003866 <_printf_i+0xf6>
 800398c:	08003b1e 	.word	0x08003b1e
 8003990:	08003b2f 	.word	0x08003b2f

08003994 <_sbrk_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	2300      	movs	r3, #0
 8003998:	4c05      	ldr	r4, [pc, #20]	; (80039b0 <_sbrk_r+0x1c>)
 800399a:	4605      	mov	r5, r0
 800399c:	4608      	mov	r0, r1
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	f7fd fb5c 	bl	800105c <_sbrk>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	d102      	bne.n	80039ae <_sbrk_r+0x1a>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	b103      	cbz	r3, 80039ae <_sbrk_r+0x1a>
 80039ac:	602b      	str	r3, [r5, #0]
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	20000310 	.word	0x20000310

080039b4 <__ascii_wctomb>:
 80039b4:	b149      	cbz	r1, 80039ca <__ascii_wctomb+0x16>
 80039b6:	2aff      	cmp	r2, #255	; 0xff
 80039b8:	bf8b      	itete	hi
 80039ba:	238a      	movhi	r3, #138	; 0x8a
 80039bc:	700a      	strbls	r2, [r1, #0]
 80039be:	6003      	strhi	r3, [r0, #0]
 80039c0:	2001      	movls	r0, #1
 80039c2:	bf88      	it	hi
 80039c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80039c8:	4770      	bx	lr
 80039ca:	4608      	mov	r0, r1
 80039cc:	4770      	bx	lr

080039ce <memchr>:
 80039ce:	b510      	push	{r4, lr}
 80039d0:	b2c9      	uxtb	r1, r1
 80039d2:	4402      	add	r2, r0
 80039d4:	4290      	cmp	r0, r2
 80039d6:	4603      	mov	r3, r0
 80039d8:	d101      	bne.n	80039de <memchr+0x10>
 80039da:	2300      	movs	r3, #0
 80039dc:	e003      	b.n	80039e6 <memchr+0x18>
 80039de:	781c      	ldrb	r4, [r3, #0]
 80039e0:	3001      	adds	r0, #1
 80039e2:	428c      	cmp	r4, r1
 80039e4:	d1f6      	bne.n	80039d4 <memchr+0x6>
 80039e6:	4618      	mov	r0, r3
 80039e8:	bd10      	pop	{r4, pc}

080039ea <memcpy>:
 80039ea:	b510      	push	{r4, lr}
 80039ec:	1e43      	subs	r3, r0, #1
 80039ee:	440a      	add	r2, r1
 80039f0:	4291      	cmp	r1, r2
 80039f2:	d100      	bne.n	80039f6 <memcpy+0xc>
 80039f4:	bd10      	pop	{r4, pc}
 80039f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039fe:	e7f7      	b.n	80039f0 <memcpy+0x6>

08003a00 <memmove>:
 8003a00:	4288      	cmp	r0, r1
 8003a02:	b510      	push	{r4, lr}
 8003a04:	eb01 0302 	add.w	r3, r1, r2
 8003a08:	d807      	bhi.n	8003a1a <memmove+0x1a>
 8003a0a:	1e42      	subs	r2, r0, #1
 8003a0c:	4299      	cmp	r1, r3
 8003a0e:	d00a      	beq.n	8003a26 <memmove+0x26>
 8003a10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a14:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003a18:	e7f8      	b.n	8003a0c <memmove+0xc>
 8003a1a:	4283      	cmp	r3, r0
 8003a1c:	d9f5      	bls.n	8003a0a <memmove+0xa>
 8003a1e:	1881      	adds	r1, r0, r2
 8003a20:	1ad2      	subs	r2, r2, r3
 8003a22:	42d3      	cmn	r3, r2
 8003a24:	d100      	bne.n	8003a28 <memmove+0x28>
 8003a26:	bd10      	pop	{r4, pc}
 8003a28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a2c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003a30:	e7f7      	b.n	8003a22 <memmove+0x22>

08003a32 <__malloc_lock>:
 8003a32:	4770      	bx	lr

08003a34 <__malloc_unlock>:
 8003a34:	4770      	bx	lr
	...

08003a38 <_free_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	d043      	beq.n	8003ac8 <_free_r+0x90>
 8003a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a44:	1f0c      	subs	r4, r1, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bfb8      	it	lt
 8003a4a:	18e4      	addlt	r4, r4, r3
 8003a4c:	f7ff fff1 	bl	8003a32 <__malloc_lock>
 8003a50:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <_free_r+0x94>)
 8003a52:	6813      	ldr	r3, [r2, #0]
 8003a54:	4610      	mov	r0, r2
 8003a56:	b933      	cbnz	r3, 8003a66 <_free_r+0x2e>
 8003a58:	6063      	str	r3, [r4, #4]
 8003a5a:	6014      	str	r4, [r2, #0]
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a62:	f7ff bfe7 	b.w	8003a34 <__malloc_unlock>
 8003a66:	42a3      	cmp	r3, r4
 8003a68:	d90b      	bls.n	8003a82 <_free_r+0x4a>
 8003a6a:	6821      	ldr	r1, [r4, #0]
 8003a6c:	1862      	adds	r2, r4, r1
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	bf01      	itttt	eq
 8003a72:	681a      	ldreq	r2, [r3, #0]
 8003a74:	685b      	ldreq	r3, [r3, #4]
 8003a76:	1852      	addeq	r2, r2, r1
 8003a78:	6022      	streq	r2, [r4, #0]
 8003a7a:	6063      	str	r3, [r4, #4]
 8003a7c:	6004      	str	r4, [r0, #0]
 8003a7e:	e7ed      	b.n	8003a5c <_free_r+0x24>
 8003a80:	4613      	mov	r3, r2
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	b10a      	cbz	r2, 8003a8a <_free_r+0x52>
 8003a86:	42a2      	cmp	r2, r4
 8003a88:	d9fa      	bls.n	8003a80 <_free_r+0x48>
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	1858      	adds	r0, r3, r1
 8003a8e:	42a0      	cmp	r0, r4
 8003a90:	d10b      	bne.n	8003aaa <_free_r+0x72>
 8003a92:	6820      	ldr	r0, [r4, #0]
 8003a94:	4401      	add	r1, r0
 8003a96:	1858      	adds	r0, r3, r1
 8003a98:	4282      	cmp	r2, r0
 8003a9a:	6019      	str	r1, [r3, #0]
 8003a9c:	d1de      	bne.n	8003a5c <_free_r+0x24>
 8003a9e:	6810      	ldr	r0, [r2, #0]
 8003aa0:	6852      	ldr	r2, [r2, #4]
 8003aa2:	4401      	add	r1, r0
 8003aa4:	6019      	str	r1, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	e7d8      	b.n	8003a5c <_free_r+0x24>
 8003aaa:	d902      	bls.n	8003ab2 <_free_r+0x7a>
 8003aac:	230c      	movs	r3, #12
 8003aae:	602b      	str	r3, [r5, #0]
 8003ab0:	e7d4      	b.n	8003a5c <_free_r+0x24>
 8003ab2:	6820      	ldr	r0, [r4, #0]
 8003ab4:	1821      	adds	r1, r4, r0
 8003ab6:	428a      	cmp	r2, r1
 8003ab8:	bf01      	itttt	eq
 8003aba:	6811      	ldreq	r1, [r2, #0]
 8003abc:	6852      	ldreq	r2, [r2, #4]
 8003abe:	1809      	addeq	r1, r1, r0
 8003ac0:	6021      	streq	r1, [r4, #0]
 8003ac2:	6062      	str	r2, [r4, #4]
 8003ac4:	605c      	str	r4, [r3, #4]
 8003ac6:	e7c9      	b.n	8003a5c <_free_r+0x24>
 8003ac8:	bd38      	pop	{r3, r4, r5, pc}
 8003aca:	bf00      	nop
 8003acc:	20000228 	.word	0x20000228

08003ad0 <_malloc_usable_size_r>:
 8003ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ad4:	1f18      	subs	r0, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bfbc      	itt	lt
 8003ada:	580b      	ldrlt	r3, [r1, r0]
 8003adc:	18c0      	addlt	r0, r0, r3
 8003ade:	4770      	bx	lr

08003ae0 <_init>:
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	bf00      	nop
 8003ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae6:	bc08      	pop	{r3}
 8003ae8:	469e      	mov	lr, r3
 8003aea:	4770      	bx	lr

08003aec <_fini>:
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	bf00      	nop
 8003af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af2:	bc08      	pop	{r3}
 8003af4:	469e      	mov	lr, r3
 8003af6:	4770      	bx	lr
