
BLDC_MOTOR.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800446c  0800446c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800446c  0800446c  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800446c  0800446c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800446c  0800446c  0001446c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004470  08004470  00014470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08004474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200001f4  08004668  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004668  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ec0  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011ef  00000000  00000000  000270dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002f8  00000000  00000000  000282d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000260  00000000  00000000  000285c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000036aa  00000000  00000000  00028828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000041d6  00000000  00000000  0002bed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bbb0  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003bc58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001110  00000000  00000000  0003bcd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001f4 	.word	0x200001f4
 800014c:	00000000 	.word	0x00000000
 8000150:	08004308 	.word	0x08004308

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001f8 	.word	0x200001f8
 800016c:	08004308 	.word	0x08004308

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2iz>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d215      	bcs.n	8000942 <__aeabi_d2iz+0x36>
 8000916:	d511      	bpl.n	800093c <__aeabi_d2iz+0x30>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d912      	bls.n	8000948 <__aeabi_d2iz+0x3c>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	bf18      	it	ne
 8000938:	4240      	negne	r0, r0
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000946:	d105      	bne.n	8000954 <__aeabi_d2iz+0x48>
 8000948:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800094c:	bf08      	it	eq
 800094e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000952:	4770      	bx	lr
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_frsub>:
 800095c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000960:	e002      	b.n	8000968 <__addsf3>
 8000962:	bf00      	nop

08000964 <__aeabi_fsub>:
 8000964:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000968 <__addsf3>:
 8000968:	0042      	lsls	r2, r0, #1
 800096a:	bf1f      	itttt	ne
 800096c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000970:	ea92 0f03 	teqne	r2, r3
 8000974:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000978:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800097c:	d06a      	beq.n	8000a54 <__addsf3+0xec>
 800097e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000982:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000986:	bfc1      	itttt	gt
 8000988:	18d2      	addgt	r2, r2, r3
 800098a:	4041      	eorgt	r1, r0
 800098c:	4048      	eorgt	r0, r1
 800098e:	4041      	eorgt	r1, r0
 8000990:	bfb8      	it	lt
 8000992:	425b      	neglt	r3, r3
 8000994:	2b19      	cmp	r3, #25
 8000996:	bf88      	it	hi
 8000998:	4770      	bxhi	lr
 800099a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800099e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009b6:	bf18      	it	ne
 80009b8:	4249      	negne	r1, r1
 80009ba:	ea92 0f03 	teq	r2, r3
 80009be:	d03f      	beq.n	8000a40 <__addsf3+0xd8>
 80009c0:	f1a2 0201 	sub.w	r2, r2, #1
 80009c4:	fa41 fc03 	asr.w	ip, r1, r3
 80009c8:	eb10 000c 	adds.w	r0, r0, ip
 80009cc:	f1c3 0320 	rsb	r3, r3, #32
 80009d0:	fa01 f103 	lsl.w	r1, r1, r3
 80009d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009d8:	d502      	bpl.n	80009e0 <__addsf3+0x78>
 80009da:	4249      	negs	r1, r1
 80009dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009e4:	d313      	bcc.n	8000a0e <__addsf3+0xa6>
 80009e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ea:	d306      	bcc.n	80009fa <__addsf3+0x92>
 80009ec:	0840      	lsrs	r0, r0, #1
 80009ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80009f2:	f102 0201 	add.w	r2, r2, #1
 80009f6:	2afe      	cmp	r2, #254	; 0xfe
 80009f8:	d251      	bcs.n	8000a9e <__addsf3+0x136>
 80009fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a02:	bf08      	it	eq
 8000a04:	f020 0001 	biceq.w	r0, r0, #1
 8000a08:	ea40 0003 	orr.w	r0, r0, r3
 8000a0c:	4770      	bx	lr
 8000a0e:	0049      	lsls	r1, r1, #1
 8000a10:	eb40 0000 	adc.w	r0, r0, r0
 8000a14:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a18:	f1a2 0201 	sub.w	r2, r2, #1
 8000a1c:	d1ed      	bne.n	80009fa <__addsf3+0x92>
 8000a1e:	fab0 fc80 	clz	ip, r0
 8000a22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a26:	ebb2 020c 	subs.w	r2, r2, ip
 8000a2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a2e:	bfaa      	itet	ge
 8000a30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a34:	4252      	neglt	r2, r2
 8000a36:	4318      	orrge	r0, r3
 8000a38:	bfbc      	itt	lt
 8000a3a:	40d0      	lsrlt	r0, r2
 8000a3c:	4318      	orrlt	r0, r3
 8000a3e:	4770      	bx	lr
 8000a40:	f092 0f00 	teq	r2, #0
 8000a44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a48:	bf06      	itte	eq
 8000a4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a4e:	3201      	addeq	r2, #1
 8000a50:	3b01      	subne	r3, #1
 8000a52:	e7b5      	b.n	80009c0 <__addsf3+0x58>
 8000a54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a62:	d021      	beq.n	8000aa8 <__addsf3+0x140>
 8000a64:	ea92 0f03 	teq	r2, r3
 8000a68:	d004      	beq.n	8000a74 <__addsf3+0x10c>
 8000a6a:	f092 0f00 	teq	r2, #0
 8000a6e:	bf08      	it	eq
 8000a70:	4608      	moveq	r0, r1
 8000a72:	4770      	bx	lr
 8000a74:	ea90 0f01 	teq	r0, r1
 8000a78:	bf1c      	itt	ne
 8000a7a:	2000      	movne	r0, #0
 8000a7c:	4770      	bxne	lr
 8000a7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a82:	d104      	bne.n	8000a8e <__addsf3+0x126>
 8000a84:	0040      	lsls	r0, r0, #1
 8000a86:	bf28      	it	cs
 8000a88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	4770      	bx	lr
 8000a8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a92:	bf3c      	itt	cc
 8000a94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bxcc	lr
 8000a9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aa2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa6:	4770      	bx	lr
 8000aa8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aac:	bf16      	itet	ne
 8000aae:	4608      	movne	r0, r1
 8000ab0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ab4:	4601      	movne	r1, r0
 8000ab6:	0242      	lsls	r2, r0, #9
 8000ab8:	bf06      	itte	eq
 8000aba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000abe:	ea90 0f01 	teqeq	r0, r1
 8000ac2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_ui2f>:
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	e004      	b.n	8000ad8 <__aeabi_i2f+0x8>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_i2f>:
 8000ad0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ad4:	bf48      	it	mi
 8000ad6:	4240      	negmi	r0, r0
 8000ad8:	ea5f 0c00 	movs.w	ip, r0
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	f04f 0000 	mov.w	r0, #0
 8000aea:	e01c      	b.n	8000b26 <__aeabi_l2f+0x2a>

08000aec <__aeabi_ul2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e00a      	b.n	8000b10 <__aeabi_l2f+0x14>
 8000afa:	bf00      	nop

08000afc <__aeabi_l2f>:
 8000afc:	ea50 0201 	orrs.w	r2, r0, r1
 8000b00:	bf08      	it	eq
 8000b02:	4770      	bxeq	lr
 8000b04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b08:	d502      	bpl.n	8000b10 <__aeabi_l2f+0x14>
 8000b0a:	4240      	negs	r0, r0
 8000b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b10:	ea5f 0c01 	movs.w	ip, r1
 8000b14:	bf02      	ittt	eq
 8000b16:	4684      	moveq	ip, r0
 8000b18:	4601      	moveq	r1, r0
 8000b1a:	2000      	moveq	r0, #0
 8000b1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b20:	bf08      	it	eq
 8000b22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b2a:	fabc f28c 	clz	r2, ip
 8000b2e:	3a08      	subs	r2, #8
 8000b30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b34:	db10      	blt.n	8000b58 <__aeabi_l2f+0x5c>
 8000b36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b48:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f102 0220 	add.w	r2, r2, #32
 8000b5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b60:	f1c2 0220 	rsb	r2, r2, #32
 8000b64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b68:	fa21 f202 	lsr.w	r2, r1, r2
 8000b6c:	eb43 0002 	adc.w	r0, r3, r2
 8000b70:	bf08      	it	eq
 8000b72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_fmul>:
 8000b78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b80:	bf1e      	ittt	ne
 8000b82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b86:	ea92 0f0c 	teqne	r2, ip
 8000b8a:	ea93 0f0c 	teqne	r3, ip
 8000b8e:	d06f      	beq.n	8000c70 <__aeabi_fmul+0xf8>
 8000b90:	441a      	add	r2, r3
 8000b92:	ea80 0c01 	eor.w	ip, r0, r1
 8000b96:	0240      	lsls	r0, r0, #9
 8000b98:	bf18      	it	ne
 8000b9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b9e:	d01e      	beq.n	8000bde <__aeabi_fmul+0x66>
 8000ba0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ba4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ba8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bac:	fba0 3101 	umull	r3, r1, r0, r1
 8000bb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bb8:	bf3e      	ittt	cc
 8000bba:	0049      	lslcc	r1, r1, #1
 8000bbc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bc0:	005b      	lslcc	r3, r3, #1
 8000bc2:	ea40 0001 	orr.w	r0, r0, r1
 8000bc6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bca:	2afd      	cmp	r2, #253	; 0xfd
 8000bcc:	d81d      	bhi.n	8000c0a <__aeabi_fmul+0x92>
 8000bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd6:	bf08      	it	eq
 8000bd8:	f020 0001 	biceq.w	r0, r0, #1
 8000bdc:	4770      	bx	lr
 8000bde:	f090 0f00 	teq	r0, #0
 8000be2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000be6:	bf08      	it	eq
 8000be8:	0249      	lsleq	r1, r1, #9
 8000bea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bf2:	3a7f      	subs	r2, #127	; 0x7f
 8000bf4:	bfc2      	ittt	gt
 8000bf6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bfa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bfe:	4770      	bxgt	lr
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	dc5d      	bgt.n	8000cc8 <__aeabi_fmul+0x150>
 8000c0c:	f112 0f19 	cmn.w	r2, #25
 8000c10:	bfdc      	itt	le
 8000c12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c16:	4770      	bxle	lr
 8000c18:	f1c2 0200 	rsb	r2, r2, #0
 8000c1c:	0041      	lsls	r1, r0, #1
 8000c1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c22:	f1c2 0220 	rsb	r2, r2, #32
 8000c26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c2e:	f140 0000 	adc.w	r0, r0, #0
 8000c32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c36:	bf08      	it	eq
 8000c38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c3c:	4770      	bx	lr
 8000c3e:	f092 0f00 	teq	r2, #0
 8000c42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c46:	bf02      	ittt	eq
 8000c48:	0040      	lsleq	r0, r0, #1
 8000c4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c4e:	3a01      	subeq	r2, #1
 8000c50:	d0f9      	beq.n	8000c46 <__aeabi_fmul+0xce>
 8000c52:	ea40 000c 	orr.w	r0, r0, ip
 8000c56:	f093 0f00 	teq	r3, #0
 8000c5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c5e:	bf02      	ittt	eq
 8000c60:	0049      	lsleq	r1, r1, #1
 8000c62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c66:	3b01      	subeq	r3, #1
 8000c68:	d0f9      	beq.n	8000c5e <__aeabi_fmul+0xe6>
 8000c6a:	ea41 010c 	orr.w	r1, r1, ip
 8000c6e:	e78f      	b.n	8000b90 <__aeabi_fmul+0x18>
 8000c70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c74:	ea92 0f0c 	teq	r2, ip
 8000c78:	bf18      	it	ne
 8000c7a:	ea93 0f0c 	teqne	r3, ip
 8000c7e:	d00a      	beq.n	8000c96 <__aeabi_fmul+0x11e>
 8000c80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c84:	bf18      	it	ne
 8000c86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	d1d8      	bne.n	8000c3e <__aeabi_fmul+0xc6>
 8000c8c:	ea80 0001 	eor.w	r0, r0, r1
 8000c90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f090 0f00 	teq	r0, #0
 8000c9a:	bf17      	itett	ne
 8000c9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ca0:	4608      	moveq	r0, r1
 8000ca2:	f091 0f00 	teqne	r1, #0
 8000ca6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000caa:	d014      	beq.n	8000cd6 <__aeabi_fmul+0x15e>
 8000cac:	ea92 0f0c 	teq	r2, ip
 8000cb0:	d101      	bne.n	8000cb6 <__aeabi_fmul+0x13e>
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	d10f      	bne.n	8000cd6 <__aeabi_fmul+0x15e>
 8000cb6:	ea93 0f0c 	teq	r3, ip
 8000cba:	d103      	bne.n	8000cc4 <__aeabi_fmul+0x14c>
 8000cbc:	024b      	lsls	r3, r1, #9
 8000cbe:	bf18      	it	ne
 8000cc0:	4608      	movne	r0, r1
 8000cc2:	d108      	bne.n	8000cd6 <__aeabi_fmul+0x15e>
 8000cc4:	ea80 0001 	eor.w	r0, r0, r1
 8000cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_fdiv>:
 8000ce0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce8:	bf1e      	ittt	ne
 8000cea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cee:	ea92 0f0c 	teqne	r2, ip
 8000cf2:	ea93 0f0c 	teqne	r3, ip
 8000cf6:	d069      	beq.n	8000dcc <__aeabi_fdiv+0xec>
 8000cf8:	eba2 0203 	sub.w	r2, r2, r3
 8000cfc:	ea80 0c01 	eor.w	ip, r0, r1
 8000d00:	0249      	lsls	r1, r1, #9
 8000d02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d06:	d037      	beq.n	8000d78 <__aeabi_fdiv+0x98>
 8000d08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	bf38      	it	cc
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d22:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d26:	428b      	cmp	r3, r1
 8000d28:	bf24      	itt	cs
 8000d2a:	1a5b      	subcs	r3, r3, r1
 8000d2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d34:	bf24      	itt	cs
 8000d36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d42:	bf24      	itt	cs
 8000d44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d50:	bf24      	itt	cs
 8000d52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d62:	d1e0      	bne.n	8000d26 <__aeabi_fdiv+0x46>
 8000d64:	2afd      	cmp	r2, #253	; 0xfd
 8000d66:	f63f af50 	bhi.w	8000c0a <__aeabi_fmul+0x92>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d80:	327f      	adds	r2, #127	; 0x7f
 8000d82:	bfc2      	ittt	gt
 8000d84:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8c:	4770      	bxgt	lr
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	f04f 0300 	mov.w	r3, #0
 8000d96:	3a01      	subs	r2, #1
 8000d98:	e737      	b.n	8000c0a <__aeabi_fmul+0x92>
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fdiv+0xc2>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fdiv+0xda>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e795      	b.n	8000cf8 <__aeabi_fdiv+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	d108      	bne.n	8000de8 <__aeabi_fdiv+0x108>
 8000dd6:	0242      	lsls	r2, r0, #9
 8000dd8:	f47f af7d 	bne.w	8000cd6 <__aeabi_fmul+0x15e>
 8000ddc:	ea93 0f0c 	teq	r3, ip
 8000de0:	f47f af70 	bne.w	8000cc4 <__aeabi_fmul+0x14c>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e776      	b.n	8000cd6 <__aeabi_fmul+0x15e>
 8000de8:	ea93 0f0c 	teq	r3, ip
 8000dec:	d104      	bne.n	8000df8 <__aeabi_fdiv+0x118>
 8000dee:	024b      	lsls	r3, r1, #9
 8000df0:	f43f af4c 	beq.w	8000c8c <__aeabi_fmul+0x114>
 8000df4:	4608      	mov	r0, r1
 8000df6:	e76e      	b.n	8000cd6 <__aeabi_fmul+0x15e>
 8000df8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dfc:	bf18      	it	ne
 8000dfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e02:	d1ca      	bne.n	8000d9a <__aeabi_fdiv+0xba>
 8000e04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e08:	f47f af5c 	bne.w	8000cc4 <__aeabi_fmul+0x14c>
 8000e0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e10:	f47f af3c 	bne.w	8000c8c <__aeabi_fmul+0x114>
 8000e14:	e75f      	b.n	8000cd6 <__aeabi_fmul+0x15e>
 8000e16:	bf00      	nop

08000e18 <__gesf2>:
 8000e18:	f04f 3cff 	mov.w	ip, #4294967295
 8000e1c:	e006      	b.n	8000e2c <__cmpsf2+0x4>
 8000e1e:	bf00      	nop

08000e20 <__lesf2>:
 8000e20:	f04f 0c01 	mov.w	ip, #1
 8000e24:	e002      	b.n	8000e2c <__cmpsf2+0x4>
 8000e26:	bf00      	nop

08000e28 <__cmpsf2>:
 8000e28:	f04f 0c01 	mov.w	ip, #1
 8000e2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e3c:	bf18      	it	ne
 8000e3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e42:	d011      	beq.n	8000e68 <__cmpsf2+0x40>
 8000e44:	b001      	add	sp, #4
 8000e46:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e4a:	bf18      	it	ne
 8000e4c:	ea90 0f01 	teqne	r0, r1
 8000e50:	bf58      	it	pl
 8000e52:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e56:	bf88      	it	hi
 8000e58:	17c8      	asrhi	r0, r1, #31
 8000e5a:	bf38      	it	cc
 8000e5c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e60:	bf18      	it	ne
 8000e62:	f040 0001 	orrne.w	r0, r0, #1
 8000e66:	4770      	bx	lr
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	d102      	bne.n	8000e74 <__cmpsf2+0x4c>
 8000e6e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e72:	d105      	bne.n	8000e80 <__cmpsf2+0x58>
 8000e74:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e78:	d1e4      	bne.n	8000e44 <__cmpsf2+0x1c>
 8000e7a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e7e:	d0e1      	beq.n	8000e44 <__cmpsf2+0x1c>
 8000e80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <__aeabi_cfrcmple>:
 8000e88:	4684      	mov	ip, r0
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	4661      	mov	r1, ip
 8000e8e:	e7ff      	b.n	8000e90 <__aeabi_cfcmpeq>

08000e90 <__aeabi_cfcmpeq>:
 8000e90:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e92:	f7ff ffc9 	bl	8000e28 <__cmpsf2>
 8000e96:	2800      	cmp	r0, #0
 8000e98:	bf48      	it	mi
 8000e9a:	f110 0f00 	cmnmi.w	r0, #0
 8000e9e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ea0 <__aeabi_fcmpeq>:
 8000ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea4:	f7ff fff4 	bl	8000e90 <__aeabi_cfcmpeq>
 8000ea8:	bf0c      	ite	eq
 8000eaa:	2001      	moveq	r0, #1
 8000eac:	2000      	movne	r0, #0
 8000eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_fcmplt>:
 8000eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb8:	f7ff ffea 	bl	8000e90 <__aeabi_cfcmpeq>
 8000ebc:	bf34      	ite	cc
 8000ebe:	2001      	movcc	r0, #1
 8000ec0:	2000      	movcs	r0, #0
 8000ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_fcmple>:
 8000ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ecc:	f7ff ffe0 	bl	8000e90 <__aeabi_cfcmpeq>
 8000ed0:	bf94      	ite	ls
 8000ed2:	2001      	movls	r0, #1
 8000ed4:	2000      	movhi	r0, #0
 8000ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eda:	bf00      	nop

08000edc <__aeabi_fcmpge>:
 8000edc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee0:	f7ff ffd2 	bl	8000e88 <__aeabi_cfrcmple>
 8000ee4:	bf94      	ite	ls
 8000ee6:	2001      	movls	r0, #1
 8000ee8:	2000      	movhi	r0, #0
 8000eea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eee:	bf00      	nop

08000ef0 <__aeabi_fcmpgt>:
 8000ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef4:	f7ff ffc8 	bl	8000e88 <__aeabi_cfrcmple>
 8000ef8:	bf34      	ite	cc
 8000efa:	2001      	movcc	r0, #1
 8000efc:	2000      	movcs	r0, #0
 8000efe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f02:	bf00      	nop

08000f04 <__aeabi_f2uiz>:
 8000f04:	0042      	lsls	r2, r0, #1
 8000f06:	d20e      	bcs.n	8000f26 <__aeabi_f2uiz+0x22>
 8000f08:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f0c:	d30b      	bcc.n	8000f26 <__aeabi_f2uiz+0x22>
 8000f0e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f12:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f16:	d409      	bmi.n	8000f2c <__aeabi_f2uiz+0x28>
 8000f18:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f20:	fa23 f002 	lsr.w	r0, r3, r2
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr
 8000f2c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f30:	d101      	bne.n	8000f36 <__aeabi_f2uiz+0x32>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	d102      	bne.n	8000f3c <__aeabi_f2uiz+0x38>
 8000f36:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3a:	4770      	bx	lr
 8000f3c:	f04f 0000 	mov.w	r0, #0
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <s1>:
//=================
uint8_t system_count =0;
//*******************************************************
//===================== -INTERRUPT- =====================
//*******************************************************
void s1(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	hall1state=READ_PIN(GPIOA, pin0);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <s1+0x60>)
 8000f4c:	f000 fe5a 	bl	8001c04 <READ_PIN>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <s1+0x64>)
 8000f56:	701a      	strb	r2, [r3, #0]

	//calculate the distance
	HALL2READ = READ_PIN(GPIOA, pin1);
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <s1+0x60>)
 8000f5c:	f000 fe52 	bl	8001c04 <READ_PIN>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <s1+0x68>)
 8000f66:	701a      	strb	r2, [r3, #0]
	if(hall1state==1){
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <s1+0x64>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d10e      	bne.n	8000f8e <s1+0x4a>
		if(HALL2READ > 0){
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <s1+0x68>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <s1+0x40>
			encoder_pulses++;
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <s1+0x6c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <s1+0x6c>)
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e004      	b.n	8000f8e <s1+0x4a>
		}
		else{
			encoder_pulses--;
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <s1+0x6c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <s1+0x6c>)
 8000f8c:	6013      	str	r3, [r2, #0]
		}
	}

	//motor direction
	if(MOTOR_DIRECTION==0){
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <s1+0x70>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <s1+0x58>
		NextStep_NORMAL();
 8000f96:	f000 f86d 	bl	8001074 <NextStep_NORMAL>
	}
	else {
		NextStep_REVERES();
	}

}
 8000f9a:	e001      	b.n	8000fa0 <s1+0x5c>
		NextStep_REVERES();
 8000f9c:	f000 f900 	bl	80011a0 <NextStep_REVERES>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000250 	.word	0x20000250
 8000fb0:	2000024c 	.word	0x2000024c
 8000fb4:	20000242 	.word	0x20000242

08000fb8 <s2>:
void s2(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	//calculate the speed
	if(flag_SPEED==0){
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <s2+0x68>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d107      	bne.n	8000fd4 <s2+0x1c>
		TIME_CALCULATION(clk, TIMER_START);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4817      	ldr	r0, [pc, #92]	; (8001024 <s2+0x6c>)
 8000fc8:	f000 ffa0 	bl	8001f0c <TIME_CALCULATION>
		flag_SPEED=1;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <s2+0x68>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e012      	b.n	8000ffa <s2+0x42>
	}
	else{
		MOTOR_SPEED_RPM=600000000/(TIME_CALCULATION(clk, TIMER_STOP)*NUM_OF_HALLSENSOR_PULS);//read the actual speed //60second *(1000000 micro seconds)*(10 increase the scale)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4813      	ldr	r0, [pc, #76]	; (8001024 <s2+0x6c>)
 8000fd8:	f000 ff98 	bl	8001f0c <TIME_CALCULATION>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4613      	mov	r3, r2
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	1a9b      	subs	r3, r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <s2+0x70>)
 8000fea:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <s2+0x74>)
 8000ff2:	601a      	str	r2, [r3, #0]
		flag_SPEED=0;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <s2+0x68>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	}

	//hall read
	hall2state=READ_PIN(GPIOA, pin1);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <s2+0x78>)
 8000ffe:	f000 fe01 	bl	8001c04 <READ_PIN>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <s2+0x7c>)
 8001008:	701a      	strb	r2, [r3, #0]
	//motor direction
	if(MOTOR_DIRECTION==0){
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <s2+0x80>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <s2+0x60>
		NextStep_NORMAL();
 8001012:	f000 f82f 	bl	8001074 <NextStep_NORMAL>
	}
	else {
		NextStep_REVERES();
	}
}
 8001016:	e001      	b.n	800101c <s2+0x64>
		NextStep_REVERES();
 8001018:	f000 f8c2 	bl	80011a0 <NextStep_REVERES>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000264 	.word	0x20000264
 8001024:	02255100 	.word	0x02255100
 8001028:	23c34600 	.word	0x23c34600
 800102c:	20000254 	.word	0x20000254
 8001030:	40010800 	.word	0x40010800
 8001034:	20000210 	.word	0x20000210
 8001038:	20000242 	.word	0x20000242

0800103c <s3>:
void s3(){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	//hall read
	hall3state=READ_PIN(GPIOA, pin2);
 8001040:	2102      	movs	r1, #2
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <s3+0x2c>)
 8001044:	f000 fdde 	bl	8001c04 <READ_PIN>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <s3+0x30>)
 800104e:	701a      	strb	r2, [r3, #0]
	//motor direction
	if(MOTOR_DIRECTION==0){
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <s3+0x34>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <s3+0x22>
		NextStep_NORMAL();
 8001058:	f000 f80c 	bl	8001074 <NextStep_NORMAL>
	}
	else {
		NextStep_REVERES();
	}
}
 800105c:	e001      	b.n	8001062 <s3+0x26>
		NextStep_REVERES();
 800105e:	f000 f89f 	bl	80011a0 <NextStep_REVERES>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40010800 	.word	0x40010800
 800106c:	20000001 	.word	0x20000001
 8001070:	20000242 	.word	0x20000242

08001074 <NextStep_NORMAL>:
//*******************************************************
//=============== -NextStep action- =====================
//*******************************************************
void NextStep_NORMAL() {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af02      	add	r7, sp, #8
	if ((hall1state == 1) && (hall2state == 0) && (hall3state == 1)) {
 800107a:	4b41      	ldr	r3, [pc, #260]	; (8001180 <NextStep_NORMAL+0x10c>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d10a      	bne.n	8001098 <NextStep_NORMAL+0x24>
 8001082:	4b40      	ldr	r3, [pc, #256]	; (8001184 <NextStep_NORMAL+0x110>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <NextStep_NORMAL+0x24>
 800108a:	4b3f      	ldr	r3, [pc, #252]	; (8001188 <NextStep_NORMAL+0x114>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d102      	bne.n	8001098 <NextStep_NORMAL+0x24>
		MOTOR_state = 0;
 8001092:	4b3e      	ldr	r3, [pc, #248]	; (800118c <NextStep_NORMAL+0x118>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 0) && (hall3state == 1)) {
 8001098:	4b39      	ldr	r3, [pc, #228]	; (8001180 <NextStep_NORMAL+0x10c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10a      	bne.n	80010b6 <NextStep_NORMAL+0x42>
 80010a0:	4b38      	ldr	r3, [pc, #224]	; (8001184 <NextStep_NORMAL+0x110>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d106      	bne.n	80010b6 <NextStep_NORMAL+0x42>
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <NextStep_NORMAL+0x114>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d102      	bne.n	80010b6 <NextStep_NORMAL+0x42>
		MOTOR_state = 1;
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <NextStep_NORMAL+0x118>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 1) && (hall3state == 1)) {
 80010b6:	4b32      	ldr	r3, [pc, #200]	; (8001180 <NextStep_NORMAL+0x10c>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10a      	bne.n	80010d4 <NextStep_NORMAL+0x60>
 80010be:	4b31      	ldr	r3, [pc, #196]	; (8001184 <NextStep_NORMAL+0x110>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d106      	bne.n	80010d4 <NextStep_NORMAL+0x60>
 80010c6:	4b30      	ldr	r3, [pc, #192]	; (8001188 <NextStep_NORMAL+0x114>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d102      	bne.n	80010d4 <NextStep_NORMAL+0x60>
		MOTOR_state = 2;
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <NextStep_NORMAL+0x118>)
 80010d0:	2202      	movs	r2, #2
 80010d2:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 1) && (hall3state == 0)) {
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <NextStep_NORMAL+0x10c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10a      	bne.n	80010f2 <NextStep_NORMAL+0x7e>
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <NextStep_NORMAL+0x110>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d106      	bne.n	80010f2 <NextStep_NORMAL+0x7e>
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <NextStep_NORMAL+0x114>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <NextStep_NORMAL+0x7e>
		MOTOR_state = 3;
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <NextStep_NORMAL+0x118>)
 80010ee:	2203      	movs	r2, #3
 80010f0:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 1) && (hall2state == 1) && (hall3state == 0)) {
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <NextStep_NORMAL+0x10c>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d10a      	bne.n	8001110 <NextStep_NORMAL+0x9c>
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <NextStep_NORMAL+0x110>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d106      	bne.n	8001110 <NextStep_NORMAL+0x9c>
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <NextStep_NORMAL+0x114>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <NextStep_NORMAL+0x9c>
		MOTOR_state = 4;
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <NextStep_NORMAL+0x118>)
 800110c:	2204      	movs	r2, #4
 800110e:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 1) && (hall2state == 0) && (hall3state == 0)) {
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <NextStep_NORMAL+0x10c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d10a      	bne.n	800112e <NextStep_NORMAL+0xba>
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <NextStep_NORMAL+0x110>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d106      	bne.n	800112e <NextStep_NORMAL+0xba>
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <NextStep_NORMAL+0x114>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <NextStep_NORMAL+0xba>
		MOTOR_state = 5;
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <NextStep_NORMAL+0x118>)
 800112a:	2205      	movs	r2, #5
 800112c:	701a      	strb	r2, [r3, #0]
	}
	//second problem % interrupt debouncing %
	//when the interrupt Happens the state change if we first put a rest(LOW PWM),
	//the motor will lose the torque and it return and it make another interrupt
	//and it happens again and again so we start with high side for 50 us to shore the motor pass the sensor
	TIMER_ISR(TIM3,50, U_us, clk, state);
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <NextStep_NORMAL+0x11c>)
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <NextStep_NORMAL+0x120>)
 8001134:	2201      	movs	r2, #1
 8001136:	2132      	movs	r1, #50	; 0x32
 8001138:	4817      	ldr	r0, [pc, #92]	; (8001198 <NextStep_NORMAL+0x124>)
 800113a:	f000 fe41 	bl	8001dc0 <TIMER_ISR>
	// 3 phase as a float to solve the pulse stop of motor when it run at high speed
	// when changing the step without rest the motor stuck at pulse time , make it very violent
	//A floating
	pinwrite(GPIOB, pin0,LOW);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	4816      	ldr	r0, [pc, #88]	; (800119c <NextStep_NORMAL+0x128>)
 8001144:	f000 fd3a 	bl	8001bbc <pinwrite>
	pinwrite(GPIOB, pin1,HIGH);
 8001148:	2201      	movs	r2, #1
 800114a:	2101      	movs	r1, #1
 800114c:	4813      	ldr	r0, [pc, #76]	; (800119c <NextStep_NORMAL+0x128>)
 800114e:	f000 fd35 	bl	8001bbc <pinwrite>
	//B floating
	pinwrite(GPIOB, pin10,LOW);
 8001152:	2200      	movs	r2, #0
 8001154:	210a      	movs	r1, #10
 8001156:	4811      	ldr	r0, [pc, #68]	; (800119c <NextStep_NORMAL+0x128>)
 8001158:	f000 fd30 	bl	8001bbc <pinwrite>
	pinwrite(GPIOB, pin7,HIGH);
 800115c:	2201      	movs	r2, #1
 800115e:	2107      	movs	r1, #7
 8001160:	480e      	ldr	r0, [pc, #56]	; (800119c <NextStep_NORMAL+0x128>)
 8001162:	f000 fd2b 	bl	8001bbc <pinwrite>
	//C floating
	pinwrite(GPIOB, pin8,LOW);
 8001166:	2200      	movs	r2, #0
 8001168:	2108      	movs	r1, #8
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <NextStep_NORMAL+0x128>)
 800116c:	f000 fd26 	bl	8001bbc <pinwrite>
	pinwrite(GPIOB, pin5,HIGH);
 8001170:	2201      	movs	r2, #1
 8001172:	2105      	movs	r1, #5
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <NextStep_NORMAL+0x128>)
 8001176:	f000 fd21 	bl	8001bbc <pinwrite>
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000210 	.word	0x20000210
 8001188:	20000001 	.word	0x20000001
 800118c:	20000211 	.word	0x20000211
 8001190:	08001339 	.word	0x08001339
 8001194:	02255100 	.word	0x02255100
 8001198:	40000400 	.word	0x40000400
 800119c:	40010c00 	.word	0x40010c00

080011a0 <NextStep_REVERES>:
void NextStep_REVERES() {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af02      	add	r7, sp, #8
	if ((hall2state == 1) && (hall1state == 0) && (hall3state == 1)) {
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <NextStep_REVERES+0x10c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d10a      	bne.n	80011c4 <NextStep_REVERES+0x24>
 80011ae:	4b40      	ldr	r3, [pc, #256]	; (80012b0 <NextStep_REVERES+0x110>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d106      	bne.n	80011c4 <NextStep_REVERES+0x24>
 80011b6:	4b3f      	ldr	r3, [pc, #252]	; (80012b4 <NextStep_REVERES+0x114>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d102      	bne.n	80011c4 <NextStep_REVERES+0x24>
		MOTOR_state = 5;
 80011be:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <NextStep_REVERES+0x118>)
 80011c0:	2205      	movs	r2, #5
 80011c2:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 0) && (hall1state == 0) && (hall3state == 1)) {
 80011c4:	4b39      	ldr	r3, [pc, #228]	; (80012ac <NextStep_REVERES+0x10c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10a      	bne.n	80011e2 <NextStep_REVERES+0x42>
 80011cc:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <NextStep_REVERES+0x110>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <NextStep_REVERES+0x42>
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <NextStep_REVERES+0x114>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d102      	bne.n	80011e2 <NextStep_REVERES+0x42>
		MOTOR_state = 4;
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <NextStep_REVERES+0x118>)
 80011de:	2204      	movs	r2, #4
 80011e0:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 0) && (hall1state == 1) && (hall3state == 1)) {
 80011e2:	4b32      	ldr	r3, [pc, #200]	; (80012ac <NextStep_REVERES+0x10c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10a      	bne.n	8001200 <NextStep_REVERES+0x60>
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <NextStep_REVERES+0x110>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d106      	bne.n	8001200 <NextStep_REVERES+0x60>
 80011f2:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <NextStep_REVERES+0x114>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d102      	bne.n	8001200 <NextStep_REVERES+0x60>
		MOTOR_state = 3;
 80011fa:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <NextStep_REVERES+0x118>)
 80011fc:	2203      	movs	r2, #3
 80011fe:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 0) && (hall1state == 1) && (hall3state == 0)) {
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <NextStep_REVERES+0x10c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10a      	bne.n	800121e <NextStep_REVERES+0x7e>
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <NextStep_REVERES+0x110>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d106      	bne.n	800121e <NextStep_REVERES+0x7e>
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <NextStep_REVERES+0x114>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <NextStep_REVERES+0x7e>
		MOTOR_state = 2;
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <NextStep_REVERES+0x118>)
 800121a:	2202      	movs	r2, #2
 800121c:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 1) && (hall1state == 1) && (hall3state == 0)) {
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <NextStep_REVERES+0x10c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10a      	bne.n	800123c <NextStep_REVERES+0x9c>
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <NextStep_REVERES+0x110>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d106      	bne.n	800123c <NextStep_REVERES+0x9c>
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <NextStep_REVERES+0x114>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <NextStep_REVERES+0x9c>
		MOTOR_state = 1;
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <NextStep_REVERES+0x118>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 1) && (hall1state == 0) && (hall3state == 0)) {
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <NextStep_REVERES+0x10c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d10a      	bne.n	800125a <NextStep_REVERES+0xba>
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <NextStep_REVERES+0x110>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d106      	bne.n	800125a <NextStep_REVERES+0xba>
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <NextStep_REVERES+0x114>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <NextStep_REVERES+0xba>
		MOTOR_state = 0;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <NextStep_REVERES+0x118>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
	}

	TIMER_ISR(TIM3,50, U_us, clk, state);
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <NextStep_REVERES+0x11c>)
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <NextStep_REVERES+0x120>)
 8001260:	2201      	movs	r2, #1
 8001262:	2132      	movs	r1, #50	; 0x32
 8001264:	4817      	ldr	r0, [pc, #92]	; (80012c4 <NextStep_REVERES+0x124>)
 8001266:	f000 fdab 	bl	8001dc0 <TIMER_ISR>
	// 3 phase as a float to solve the pulse stop of motor when it run at high speed
	// when changing the step without rest the motor stuck at pulse time , make it very violent
	//A floating
	pinwrite(GPIOB, pin0,LOW);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	4816      	ldr	r0, [pc, #88]	; (80012c8 <NextStep_REVERES+0x128>)
 8001270:	f000 fca4 	bl	8001bbc <pinwrite>
	pinwrite(GPIOB, pin1,HIGH);
 8001274:	2201      	movs	r2, #1
 8001276:	2101      	movs	r1, #1
 8001278:	4813      	ldr	r0, [pc, #76]	; (80012c8 <NextStep_REVERES+0x128>)
 800127a:	f000 fc9f 	bl	8001bbc <pinwrite>
	//B floating
	pinwrite(GPIOB, pin10,LOW);
 800127e:	2200      	movs	r2, #0
 8001280:	210a      	movs	r1, #10
 8001282:	4811      	ldr	r0, [pc, #68]	; (80012c8 <NextStep_REVERES+0x128>)
 8001284:	f000 fc9a 	bl	8001bbc <pinwrite>
	pinwrite(GPIOB, pin7,HIGH);
 8001288:	2201      	movs	r2, #1
 800128a:	2107      	movs	r1, #7
 800128c:	480e      	ldr	r0, [pc, #56]	; (80012c8 <NextStep_REVERES+0x128>)
 800128e:	f000 fc95 	bl	8001bbc <pinwrite>
	//C floating
	pinwrite(GPIOB, pin8,LOW);
 8001292:	2200      	movs	r2, #0
 8001294:	2108      	movs	r1, #8
 8001296:	480c      	ldr	r0, [pc, #48]	; (80012c8 <NextStep_REVERES+0x128>)
 8001298:	f000 fc90 	bl	8001bbc <pinwrite>
	pinwrite(GPIOB, pin5,HIGH);
 800129c:	2201      	movs	r2, #1
 800129e:	2105      	movs	r1, #5
 80012a0:	4809      	ldr	r0, [pc, #36]	; (80012c8 <NextStep_REVERES+0x128>)
 80012a2:	f000 fc8b 	bl	8001bbc <pinwrite>
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000210 	.word	0x20000210
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000001 	.word	0x20000001
 80012b8:	20000211 	.word	0x20000211
 80012bc:	08001339 	.word	0x08001339
 80012c0:	02255100 	.word	0x02255100
 80012c4:	40000400 	.word	0x40000400
 80012c8:	40010c00 	.word	0x40010c00

080012cc <wate>:
//*******************************************************
//==================== -LOW PWM- ========================
//*******************************************************
void wate(){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af02      	add	r7, sp, #8
	//A floating
	pinwrite(GPIOB, pin0,LOW);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	4814      	ldr	r0, [pc, #80]	; (8001328 <wate+0x5c>)
 80012d8:	f000 fc70 	bl	8001bbc <pinwrite>
	pinwrite(GPIOB, pin1,HIGH);
 80012dc:	2201      	movs	r2, #1
 80012de:	2101      	movs	r1, #1
 80012e0:	4811      	ldr	r0, [pc, #68]	; (8001328 <wate+0x5c>)
 80012e2:	f000 fc6b 	bl	8001bbc <pinwrite>
	//B floating
	pinwrite(GPIOB, pin10,LOW);
 80012e6:	2200      	movs	r2, #0
 80012e8:	210a      	movs	r1, #10
 80012ea:	480f      	ldr	r0, [pc, #60]	; (8001328 <wate+0x5c>)
 80012ec:	f000 fc66 	bl	8001bbc <pinwrite>
	pinwrite(GPIOB, pin7,HIGH);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2107      	movs	r1, #7
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <wate+0x5c>)
 80012f6:	f000 fc61 	bl	8001bbc <pinwrite>
	//C floating
	pinwrite(GPIOB, pin8,LOW);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2108      	movs	r1, #8
 80012fe:	480a      	ldr	r0, [pc, #40]	; (8001328 <wate+0x5c>)
 8001300:	f000 fc5c 	bl	8001bbc <pinwrite>
	pinwrite(GPIOB, pin5,HIGH);
 8001304:	2201      	movs	r2, #1
 8001306:	2105      	movs	r1, #5
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <wate+0x5c>)
 800130a:	f000 fc57 	bl	8001bbc <pinwrite>
	TIMER_ISR(TIM3,MOTOR_PWM_LOW, U_us, clk, state);
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <wate+0x60>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <wate+0x64>)
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 7148 	mov.w	r1, #800	; 0x320
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <wate+0x68>)
 800131c:	f000 fd50 	bl	8001dc0 <TIMER_ISR>
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40010c00 	.word	0x40010c00
 800132c:	08001339 	.word	0x08001339
 8001330:	02255100 	.word	0x02255100
 8001334:	40000400 	.word	0x40000400

08001338 <state>:
//*******************************************************
//==================== -HIGH PWM- =======================
//*******************************************************
void state(){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af02      	add	r7, sp, #8
	switch (MOTOR_state) {
 800133e:	4b6e      	ldr	r3, [pc, #440]	; (80014f8 <state+0x1c0>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b05      	cmp	r3, #5
 8001344:	f200 80ca 	bhi.w	80014dc <state+0x1a4>
 8001348:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <state+0x18>)
 800134a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134e:	bf00      	nop
 8001350:	08001369 	.word	0x08001369
 8001354:	080013a7 	.word	0x080013a7
 8001358:	080013e5 	.word	0x080013e5
 800135c:	08001423 	.word	0x08001423
 8001360:	08001461 	.word	0x08001461
 8001364:	0800149f 	.word	0x0800149f
	case 0:
		//MOTOR_state++;
		//A h
		pinwrite(GPIOB, pin0,HIGH);
 8001368:	2201      	movs	r2, #1
 800136a:	2100      	movs	r1, #0
 800136c:	4863      	ldr	r0, [pc, #396]	; (80014fc <state+0x1c4>)
 800136e:	f000 fc25 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8001372:	2201      	movs	r2, #1
 8001374:	2101      	movs	r1, #1
 8001376:	4861      	ldr	r0, [pc, #388]	; (80014fc <state+0x1c4>)
 8001378:	f000 fc20 	bl	8001bbc <pinwrite>
		//B floating
		pinwrite(GPIOB, pin10,LOW);
 800137c:	2200      	movs	r2, #0
 800137e:	210a      	movs	r1, #10
 8001380:	485e      	ldr	r0, [pc, #376]	; (80014fc <state+0x1c4>)
 8001382:	f000 fc1b 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8001386:	2201      	movs	r2, #1
 8001388:	2107      	movs	r1, #7
 800138a:	485c      	ldr	r0, [pc, #368]	; (80014fc <state+0x1c4>)
 800138c:	f000 fc16 	bl	8001bbc <pinwrite>
		//C LOW
		pinwrite(GPIOB, pin8,LOW);
 8001390:	2200      	movs	r2, #0
 8001392:	2108      	movs	r1, #8
 8001394:	4859      	ldr	r0, [pc, #356]	; (80014fc <state+0x1c4>)
 8001396:	f000 fc11 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin5,LOW);
 800139a:	2200      	movs	r2, #0
 800139c:	2105      	movs	r1, #5
 800139e:	4857      	ldr	r0, [pc, #348]	; (80014fc <state+0x1c4>)
 80013a0:	f000 fc0c 	bl	8001bbc <pinwrite>
		break;
 80013a4:	e09a      	b.n	80014dc <state+0x1a4>

	case 1:
		//MOTOR_state++;
		//A floating
		pinwrite(GPIOB, pin0,LOW);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	4854      	ldr	r0, [pc, #336]	; (80014fc <state+0x1c4>)
 80013ac:	f000 fc06 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2101      	movs	r1, #1
 80013b4:	4851      	ldr	r0, [pc, #324]	; (80014fc <state+0x1c4>)
 80013b6:	f000 fc01 	bl	8001bbc <pinwrite>
		//B h
		pinwrite(GPIOB, pin10,HIGH);
 80013ba:	2201      	movs	r2, #1
 80013bc:	210a      	movs	r1, #10
 80013be:	484f      	ldr	r0, [pc, #316]	; (80014fc <state+0x1c4>)
 80013c0:	f000 fbfc 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2107      	movs	r1, #7
 80013c8:	484c      	ldr	r0, [pc, #304]	; (80014fc <state+0x1c4>)
 80013ca:	f000 fbf7 	bl	8001bbc <pinwrite>
		//C LOW
		pinwrite(GPIOB, pin8,LOW);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2108      	movs	r1, #8
 80013d2:	484a      	ldr	r0, [pc, #296]	; (80014fc <state+0x1c4>)
 80013d4:	f000 fbf2 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin5,LOW);
 80013d8:	2200      	movs	r2, #0
 80013da:	2105      	movs	r1, #5
 80013dc:	4847      	ldr	r0, [pc, #284]	; (80014fc <state+0x1c4>)
 80013de:	f000 fbed 	bl	8001bbc <pinwrite>
		break;
 80013e2:	e07b      	b.n	80014dc <state+0x1a4>

	case 2:
		//MOTOR_state++;
		//A l
		pinwrite(GPIOB, pin0,LOW);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	4844      	ldr	r0, [pc, #272]	; (80014fc <state+0x1c4>)
 80013ea:	f000 fbe7 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin1,LOW);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2101      	movs	r1, #1
 80013f2:	4842      	ldr	r0, [pc, #264]	; (80014fc <state+0x1c4>)
 80013f4:	f000 fbe2 	bl	8001bbc <pinwrite>
		//B h
		pinwrite(GPIOB, pin10,HIGH);
 80013f8:	2201      	movs	r2, #1
 80013fa:	210a      	movs	r1, #10
 80013fc:	483f      	ldr	r0, [pc, #252]	; (80014fc <state+0x1c4>)
 80013fe:	f000 fbdd 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8001402:	2201      	movs	r2, #1
 8001404:	2107      	movs	r1, #7
 8001406:	483d      	ldr	r0, [pc, #244]	; (80014fc <state+0x1c4>)
 8001408:	f000 fbd8 	bl	8001bbc <pinwrite>
		//C floating
		pinwrite(GPIOB, pin8,LOW);
 800140c:	2200      	movs	r2, #0
 800140e:	2108      	movs	r1, #8
 8001410:	483a      	ldr	r0, [pc, #232]	; (80014fc <state+0x1c4>)
 8001412:	f000 fbd3 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8001416:	2201      	movs	r2, #1
 8001418:	2105      	movs	r1, #5
 800141a:	4838      	ldr	r0, [pc, #224]	; (80014fc <state+0x1c4>)
 800141c:	f000 fbce 	bl	8001bbc <pinwrite>
		break;
 8001420:	e05c      	b.n	80014dc <state+0x1a4>

	case 3:
		//MOTOR_state++;
		//A l
		pinwrite(GPIOB, pin0,LOW);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	4835      	ldr	r0, [pc, #212]	; (80014fc <state+0x1c4>)
 8001428:	f000 fbc8 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin1,LOW);
 800142c:	2200      	movs	r2, #0
 800142e:	2101      	movs	r1, #1
 8001430:	4832      	ldr	r0, [pc, #200]	; (80014fc <state+0x1c4>)
 8001432:	f000 fbc3 	bl	8001bbc <pinwrite>
		//B floating
		pinwrite(GPIOB, pin10,LOW);
 8001436:	2200      	movs	r2, #0
 8001438:	210a      	movs	r1, #10
 800143a:	4830      	ldr	r0, [pc, #192]	; (80014fc <state+0x1c4>)
 800143c:	f000 fbbe 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8001440:	2201      	movs	r2, #1
 8001442:	2107      	movs	r1, #7
 8001444:	482d      	ldr	r0, [pc, #180]	; (80014fc <state+0x1c4>)
 8001446:	f000 fbb9 	bl	8001bbc <pinwrite>
		//C h
		pinwrite(GPIOB, pin8,HIGH);
 800144a:	2201      	movs	r2, #1
 800144c:	2108      	movs	r1, #8
 800144e:	482b      	ldr	r0, [pc, #172]	; (80014fc <state+0x1c4>)
 8001450:	f000 fbb4 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8001454:	2201      	movs	r2, #1
 8001456:	2105      	movs	r1, #5
 8001458:	4828      	ldr	r0, [pc, #160]	; (80014fc <state+0x1c4>)
 800145a:	f000 fbaf 	bl	8001bbc <pinwrite>
		break;
 800145e:	e03d      	b.n	80014dc <state+0x1a4>

	case 4:
		//MOTOR_state++;
		//A floating
		pinwrite(GPIOB, pin0,LOW);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	4825      	ldr	r0, [pc, #148]	; (80014fc <state+0x1c4>)
 8001466:	f000 fba9 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 800146a:	2201      	movs	r2, #1
 800146c:	2101      	movs	r1, #1
 800146e:	4823      	ldr	r0, [pc, #140]	; (80014fc <state+0x1c4>)
 8001470:	f000 fba4 	bl	8001bbc <pinwrite>
		//B l
		pinwrite(GPIOB, pin10,LOW);
 8001474:	2200      	movs	r2, #0
 8001476:	210a      	movs	r1, #10
 8001478:	4820      	ldr	r0, [pc, #128]	; (80014fc <state+0x1c4>)
 800147a:	f000 fb9f 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin7,LOW);
 800147e:	2200      	movs	r2, #0
 8001480:	2107      	movs	r1, #7
 8001482:	481e      	ldr	r0, [pc, #120]	; (80014fc <state+0x1c4>)
 8001484:	f000 fb9a 	bl	8001bbc <pinwrite>
		//C h
		pinwrite(GPIOB, pin8,HIGH);
 8001488:	2201      	movs	r2, #1
 800148a:	2108      	movs	r1, #8
 800148c:	481b      	ldr	r0, [pc, #108]	; (80014fc <state+0x1c4>)
 800148e:	f000 fb95 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8001492:	2201      	movs	r2, #1
 8001494:	2105      	movs	r1, #5
 8001496:	4819      	ldr	r0, [pc, #100]	; (80014fc <state+0x1c4>)
 8001498:	f000 fb90 	bl	8001bbc <pinwrite>
		break;
 800149c:	e01e      	b.n	80014dc <state+0x1a4>

	case 5:
		//MOTOR_state=0;
		//A h
		pinwrite(GPIOB, pin0,HIGH);
 800149e:	2201      	movs	r2, #1
 80014a0:	2100      	movs	r1, #0
 80014a2:	4816      	ldr	r0, [pc, #88]	; (80014fc <state+0x1c4>)
 80014a4:	f000 fb8a 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2101      	movs	r1, #1
 80014ac:	4813      	ldr	r0, [pc, #76]	; (80014fc <state+0x1c4>)
 80014ae:	f000 fb85 	bl	8001bbc <pinwrite>
		//B l
		pinwrite(GPIOB, pin10,LOW);
 80014b2:	2200      	movs	r2, #0
 80014b4:	210a      	movs	r1, #10
 80014b6:	4811      	ldr	r0, [pc, #68]	; (80014fc <state+0x1c4>)
 80014b8:	f000 fb80 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin7,LOW);
 80014bc:	2200      	movs	r2, #0
 80014be:	2107      	movs	r1, #7
 80014c0:	480e      	ldr	r0, [pc, #56]	; (80014fc <state+0x1c4>)
 80014c2:	f000 fb7b 	bl	8001bbc <pinwrite>
		//C floating
		pinwrite(GPIOB, pin8,LOW);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2108      	movs	r1, #8
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <state+0x1c4>)
 80014cc:	f000 fb76 	bl	8001bbc <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2105      	movs	r1, #5
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <state+0x1c4>)
 80014d6:	f000 fb71 	bl	8001bbc <pinwrite>
		break;
 80014da:	bf00      	nop
	}
	TIMER_ISR(TIM3,MOTOR_PWM, U_us, clk, wate);
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <state+0x1c8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	b299      	uxth	r1, r3
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <state+0x1cc>)
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <state+0x1d0>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	4808      	ldr	r0, [pc, #32]	; (800150c <state+0x1d4>)
 80014ec:	f000 fc68 	bl	8001dc0 <TIMER_ISR>

}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000211 	.word	0x20000211
 80014fc:	40010c00 	.word	0x40010c00
 8001500:	20000230 	.word	0x20000230
 8001504:	080012cd 	.word	0x080012cd
 8001508:	02255100 	.word	0x02255100
 800150c:	40000400 	.word	0x40000400

08001510 <BLDC_init>:
	stop_flage=1;
}
//*******************************************************
//==================== -BLDC_init- ======================
//*******************************************************
void BLDC_init(){
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af04      	add	r7, sp, #16
	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 8001516:	2100      	movs	r1, #0
 8001518:	2000      	movs	r0, #0
 800151a:	f000 ff31 	bl	8002380 <MCAL_speed_init>
	pinmode(GPIOB, pin0,GPIO_MODE_OUTPUT_push_pull_Speed10);
 800151e:	2201      	movs	r2, #1
 8001520:	2100      	movs	r1, #0
 8001522:	4830      	ldr	r0, [pc, #192]	; (80015e4 <BLDC_init+0xd4>)
 8001524:	f000 fa68 	bl	80019f8 <pinmode>
	pinmode(GPIOB, pin1,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8001528:	2201      	movs	r2, #1
 800152a:	2101      	movs	r1, #1
 800152c:	482d      	ldr	r0, [pc, #180]	; (80015e4 <BLDC_init+0xd4>)
 800152e:	f000 fa63 	bl	80019f8 <pinmode>
	pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8001532:	2201      	movs	r2, #1
 8001534:	210a      	movs	r1, #10
 8001536:	482b      	ldr	r0, [pc, #172]	; (80015e4 <BLDC_init+0xd4>)
 8001538:	f000 fa5e 	bl	80019f8 <pinmode>
	pinmode(GPIOB, pin7,GPIO_MODE_OUTPUT_push_pull_Speed10);
 800153c:	2201      	movs	r2, #1
 800153e:	2107      	movs	r1, #7
 8001540:	4828      	ldr	r0, [pc, #160]	; (80015e4 <BLDC_init+0xd4>)
 8001542:	f000 fa59 	bl	80019f8 <pinmode>
	pinmode(GPIOB, pin8,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8001546:	2201      	movs	r2, #1
 8001548:	2108      	movs	r1, #8
 800154a:	4826      	ldr	r0, [pc, #152]	; (80015e4 <BLDC_init+0xd4>)
 800154c:	f000 fa54 	bl	80019f8 <pinmode>
	pinmode(GPIOB, pin5,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8001550:	2201      	movs	r2, #1
 8001552:	2105      	movs	r1, #5
 8001554:	4823      	ldr	r0, [pc, #140]	; (80015e4 <BLDC_init+0xd4>)
 8001556:	f000 fa4f 	bl	80019f8 <pinmode>
	ADC_INIT(ADC1, ADC_STATE_START);
 800155a:	2101      	movs	r1, #1
 800155c:	4822      	ldr	r0, [pc, #136]	; (80015e8 <BLDC_init+0xd8>)
 800155e:	f000 fff3 	bl	8002548 <ADC_INIT>
	EXTI(GPIOA, pin0,EXTI_Trigger_RisingAndFalling, s1);
 8001562:	4b22      	ldr	r3, [pc, #136]	; (80015ec <BLDC_init+0xdc>)
 8001564:	2202      	movs	r2, #2
 8001566:	2100      	movs	r1, #0
 8001568:	4821      	ldr	r0, [pc, #132]	; (80015f0 <BLDC_init+0xe0>)
 800156a:	f001 f8b1 	bl	80026d0 <EXTI>
	EXTI(GPIOA, pin1,EXTI_Trigger_RisingAndFalling, s2);
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <BLDC_init+0xe4>)
 8001570:	2202      	movs	r2, #2
 8001572:	2101      	movs	r1, #1
 8001574:	481e      	ldr	r0, [pc, #120]	; (80015f0 <BLDC_init+0xe0>)
 8001576:	f001 f8ab 	bl	80026d0 <EXTI>
	EXTI(GPIOA, pin2,EXTI_Trigger_RisingAndFalling, s3);
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <BLDC_init+0xe8>)
 800157c:	2202      	movs	r2, #2
 800157e:	2102      	movs	r1, #2
 8001580:	481b      	ldr	r0, [pc, #108]	; (80015f0 <BLDC_init+0xe0>)
 8001582:	f001 f8a5 	bl	80026d0 <EXTI>
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,clk);
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <BLDC_init+0xec>)
 8001588:	9302      	str	r3, [sp, #8]
 800158a:	2300      	movs	r3, #0
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	2200      	movs	r2, #0
 8001598:	210c      	movs	r1, #12
 800159a:	4819      	ldr	r0, [pc, #100]	; (8001600 <BLDC_init+0xf0>)
 800159c:	f001 fe3e 	bl	800321c <USART_INIT>

	s1();
 80015a0:	f7ff fcd0 	bl	8000f44 <s1>
	s2();
 80015a4:	f7ff fd08 	bl	8000fb8 <s2>
	s3();
 80015a8:	f7ff fd48 	bl	800103c <s3>
	//soft start
	for(int i=0;i<10;i++){
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	e00d      	b.n	80015ce <BLDC_init+0xbe>
		MOTOR_PWM+=1;
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <BLDC_init+0xf4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a12      	ldr	r2, [pc, #72]	; (8001604 <BLDC_init+0xf4>)
 80015ba:	6013      	str	r3, [r2, #0]
		delay(2, U_ms, clk);
 80015bc:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <BLDC_init+0xec>)
 80015be:	2100      	movs	r1, #0
 80015c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015c4:	f000 fb32 	bl	8001c2c <delay>
	for(int i=0;i<10;i++){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3301      	adds	r3, #1
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	ddee      	ble.n	80015b2 <BLDC_init+0xa2>
	}
	USART_READ_INTERRUPT_EN(USART1, read_string);
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <BLDC_init+0xf8>)
 80015d6:	480a      	ldr	r0, [pc, #40]	; (8001600 <BLDC_init+0xf0>)
 80015d8:	f001 ff66 	bl	80034a8 <USART_READ_INTERRUPT_EN>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40010c00 	.word	0x40010c00
 80015e8:	40012400 	.word	0x40012400
 80015ec:	08000f45 	.word	0x08000f45
 80015f0:	40010800 	.word	0x40010800
 80015f4:	08000fb9 	.word	0x08000fb9
 80015f8:	0800103d 	.word	0x0800103d
 80015fc:	02255100 	.word	0x02255100
 8001600:	40013800 	.word	0x40013800
 8001604:	20000230 	.word	0x20000230
 8001608:	0800160d 	.word	0x0800160d

0800160c <read_string>:
//*******************************************************
//==================== -READ_DATA- ======================
//*******************************************************
void read_string (){
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0

	USART_READ(USART1,&ch);
 8001610:	4919      	ldr	r1, [pc, #100]	; (8001678 <read_string+0x6c>)
 8001612:	481a      	ldr	r0, [pc, #104]	; (800167c <read_string+0x70>)
 8001614:	f001 fee6 	bl	80033e4 <USART_READ>

	if(ch=='$'){
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <read_string+0x6c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b24      	cmp	r3, #36	; 0x24
 800161e:	d105      	bne.n	800162c <read_string+0x20>
		serial_flag=1;
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <read_string+0x74>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
		index1=0;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <read_string+0x78>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
	}
	if(ch=='e'){
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <read_string+0x6c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b65      	cmp	r3, #101	; 0x65
 8001632:	d10e      	bne.n	8001652 <read_string+0x46>
		serial_flag=0;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <read_string+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
		string_data[index1]='\n';
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <read_string+0x78>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <read_string+0x7c>)
 8001642:	210a      	movs	r1, #10
 8001644:	5499      	strb	r1, [r3, r2]
		string_data[index1+1]=0;
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <read_string+0x78>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <read_string+0x7c>)
 800164e:	2100      	movs	r1, #0
 8001650:	54d1      	strb	r1, [r2, r3]

	}

	if(serial_flag==1){
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <read_string+0x74>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d10c      	bne.n	8001674 <read_string+0x68>
		string_data[index1]=ch;
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <read_string+0x78>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <read_string+0x6c>)
 8001662:	7819      	ldrb	r1, [r3, #0]
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <read_string+0x7c>)
 8001666:	5499      	strb	r1, [r3, r2]
		index1++;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <read_string+0x78>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <read_string+0x78>)
 8001672:	701a      	strb	r2, [r3, #0]
	}
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000026c 	.word	0x2000026c
 800167c:	40013800 	.word	0x40013800
 8001680:	20000212 	.word	0x20000212
 8001684:	20000248 	.word	0x20000248
 8001688:	20000238 	.word	0x20000238

0800168c <main>:
//*******************************************************
//==================== -MAIN Fun- =======================
//*******************************************************
int main (){
 800168c:	b5b0      	push	{r4, r5, r7, lr}
 800168e:	af00      	add	r7, sp, #0
	//******************************
	//======== -BLDC_init- ========
	//******************************
	BLDC_init();
 8001690:	f7ff ff3e 	bl	8001510 <BLDC_init>

	while(1){
		delay(90, U_ms, clk);
 8001694:	4a69      	ldr	r2, [pc, #420]	; (800183c <main+0x1b0>)
 8001696:	2100      	movs	r1, #0
 8001698:	4869      	ldr	r0, [pc, #420]	; (8001840 <main+0x1b4>)
 800169a:	f000 fac7 	bl	8001c2c <delay>
		system_count++;
 800169e:	4b69      	ldr	r3, [pc, #420]	; (8001844 <main+0x1b8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <main+0x1b8>)
 80016a8:	701a      	strb	r2, [r3, #0]
		//******************************
		//======== -speed- ============
		//******************************
		//read speed value
		//$.direction.speed.s
		SET_MOTOR_SPEED=atoi(string_data+3)*10;//reat user set point speed
 80016aa:	4b67      	ldr	r3, [pc, #412]	; (8001848 <main+0x1bc>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 f935 	bl	800391c <atoi>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	461a      	mov	r2, r3
 80016be:	4b63      	ldr	r3, [pc, #396]	; (800184c <main+0x1c0>)
 80016c0:	601a      	str	r2, [r3, #0]

		//(filter) if actual speed is hire than 2300/10 RPM make speed 2300
		//to remove hall effect noise
		if( (abs(MOTOR_SPEED_RPM-last_read_motor_speed))>MAX_SPEED ){
 80016c2:	4b63      	ldr	r3, [pc, #396]	; (8001850 <main+0x1c4>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4b63      	ldr	r3, [pc, #396]	; (8001854 <main+0x1c8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bfb8      	it	lt
 80016d0:	425b      	neglt	r3, r3
 80016d2:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80016d6:	4293      	cmp	r3, r2
 80016d8:	dd04      	ble.n	80016e4 <main+0x58>
			MOTOR_SPEED_RPM=last_read_motor_speed;
 80016da:	4b5e      	ldr	r3, [pc, #376]	; (8001854 <main+0x1c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a5c      	ldr	r2, [pc, #368]	; (8001850 <main+0x1c4>)
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e003      	b.n	80016ec <main+0x60>
		}
		else {
			last_read_motor_speed=MOTOR_SPEED_RPM;
 80016e4:	4b5a      	ldr	r3, [pc, #360]	; (8001850 <main+0x1c4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a5a      	ldr	r2, [pc, #360]	; (8001854 <main+0x1c8>)
 80016ea:	6013      	str	r3, [r2, #0]
		}

		//******************************
		//============ -PID- ===========
		//******************************
		error=abs(MOTOR_SPEED_RPM-SET_MOTOR_SPEED);
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <main+0x1c4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b56      	ldr	r3, [pc, #344]	; (800184c <main+0x1c0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bfb8      	it	lt
 80016fc:	425b      	neglt	r3, r3
 80016fe:	4a56      	ldr	r2, [pc, #344]	; (8001858 <main+0x1cc>)
 8001700:	6013      	str	r3, [r2, #0]

		if(MOTOR_SPEED_RPM<SET_MOTOR_SPEED){
 8001702:	4b53      	ldr	r3, [pc, #332]	; (8001850 <main+0x1c4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	4b50      	ldr	r3, [pc, #320]	; (800184c <main+0x1c0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d229      	bcs.n	8001764 <main+0xd8>
			MOTOR_PWM+=(error/Ki_INV);
 8001710:	4b52      	ldr	r3, [pc, #328]	; (800185c <main+0x1d0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fe7d 	bl	8000414 <__aeabi_i2d>
 800171a:	4604      	mov	r4, r0
 800171c:	460d      	mov	r5, r1
 800171e:	4b4e      	ldr	r3, [pc, #312]	; (8001858 <main+0x1cc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fe76 	bl	8000414 <__aeabi_i2d>
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <main+0x1d4>)
 800172e:	f7ff f805 	bl	800073c <__aeabi_ddiv>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4620      	mov	r0, r4
 8001738:	4629      	mov	r1, r5
 800173a:	f7fe fd1f 	bl	800017c <__adddf3>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	4618      	mov	r0, r3
 8001744:	4621      	mov	r1, r4
 8001746:	f7ff f8e1 	bl	800090c <__aeabi_d2iz>
 800174a:	4602      	mov	r2, r0
 800174c:	4b43      	ldr	r3, [pc, #268]	; (800185c <main+0x1d0>)
 800174e:	601a      	str	r2, [r3, #0]
			if(MOTOR_PWM>=MAX_PWM){
 8001750:	4b42      	ldr	r3, [pc, #264]	; (800185c <main+0x1d0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001758:	db3f      	blt.n	80017da <main+0x14e>
				MOTOR_PWM=MAX_PWM;
 800175a:	4b40      	ldr	r3, [pc, #256]	; (800185c <main+0x1d0>)
 800175c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e03a      	b.n	80017da <main+0x14e>
			}
		}
		else if(MOTOR_SPEED_RPM>SET_MOTOR_SPEED){
 8001764:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <main+0x1c4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <main+0x1c0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d927      	bls.n	80017c2 <main+0x136>
			MOTOR_PWM-=(error/Ki_INV);
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <main+0x1d0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe4c 	bl	8000414 <__aeabi_i2d>
 800177c:	4604      	mov	r4, r0
 800177e:	460d      	mov	r5, r1
 8001780:	4b35      	ldr	r3, [pc, #212]	; (8001858 <main+0x1cc>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fe45 	bl	8000414 <__aeabi_i2d>
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <main+0x1d4>)
 8001790:	f7fe ffd4 	bl	800073c <__aeabi_ddiv>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4620      	mov	r0, r4
 800179a:	4629      	mov	r1, r5
 800179c:	f7fe fcec 	bl	8000178 <__aeabi_dsub>
 80017a0:	4603      	mov	r3, r0
 80017a2:	460c      	mov	r4, r1
 80017a4:	4618      	mov	r0, r3
 80017a6:	4621      	mov	r1, r4
 80017a8:	f7ff f8b0 	bl	800090c <__aeabi_d2iz>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <main+0x1d0>)
 80017b0:	601a      	str	r2, [r3, #0]
			if(MOTOR_PWM<=5){
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <main+0x1d0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	dc0f      	bgt.n	80017da <main+0x14e>
				MOTOR_PWM=5;
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <main+0x1d0>)
 80017bc:	2205      	movs	r2, #5
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e00b      	b.n	80017da <main+0x14e>
			}
		}
		else{//error=0
			if(SET_MOTOR_SPEED==0){
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <main+0x1c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <main+0x146>
				MOTOR_PWM=2;
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <main+0x1d0>)
 80017cc:	2202      	movs	r2, #2
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e003      	b.n	80017da <main+0x14e>
			}
			else{
				MOTOR_PWM=MOTOR_PWM;
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <main+0x1d0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a21      	ldr	r2, [pc, #132]	; (800185c <main+0x1d0>)
 80017d8:	6013      	str	r3, [r2, #0]
		}

		//******************************
		//======== -direction- ========
		//******************************
		if(string_data[2]=='1'){//if motor 2 string_data[0]
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <main+0x1d8>)
 80017dc:	789b      	ldrb	r3, [r3, #2]
 80017de:	2b31      	cmp	r3, #49	; 0x31
 80017e0:	d103      	bne.n	80017ea <main+0x15e>
			MOTOR_DIRECTION=0;
 80017e2:	4b21      	ldr	r3, [pc, #132]	; (8001868 <main+0x1dc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
 80017e8:	e002      	b.n	80017f0 <main+0x164>
		}
		else {
			MOTOR_DIRECTION=1;
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <main+0x1dc>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
		}

		if(system_count>1){
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <main+0x1b8>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d91c      	bls.n	8001832 <main+0x1a6>
			//display
			sprintf (buf, "%d",MOTOR_SPEED_RPM/10);
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <main+0x1c4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <main+0x1e0>)
 80017fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001802:	1092      	asrs	r2, r2, #2
 8001804:	17db      	asrs	r3, r3, #31
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	461a      	mov	r2, r3
 800180a:	4919      	ldr	r1, [pc, #100]	; (8001870 <main+0x1e4>)
 800180c:	4819      	ldr	r0, [pc, #100]	; (8001874 <main+0x1e8>)
 800180e:	f002 f8b3 	bl	8003978 <siprintf>
			USART_SEND_STRING(USART1,buf);
 8001812:	4918      	ldr	r1, [pc, #96]	; (8001874 <main+0x1e8>)
 8001814:	4818      	ldr	r0, [pc, #96]	; (8001878 <main+0x1ec>)
 8001816:	f001 fe0f 	bl	8003438 <USART_SEND_STRING>
			delay(3, U_ms, clk);
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <main+0x1b0>)
 800181c:	2100      	movs	r1, #0
 800181e:	4817      	ldr	r0, [pc, #92]	; (800187c <main+0x1f0>)
 8001820:	f000 fa04 	bl	8001c2c <delay>
			USART_SEND_STRING(USART1," RPM \n");
 8001824:	4916      	ldr	r1, [pc, #88]	; (8001880 <main+0x1f4>)
 8001826:	4814      	ldr	r0, [pc, #80]	; (8001878 <main+0x1ec>)
 8001828:	f001 fe06 	bl	8003438 <USART_SEND_STRING>
			system_count=0;
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <main+0x1b8>)
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
		}
		MOTOR_SPEED_RPM=0;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <main+0x1c4>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
		delay(90, U_ms, clk);
 8001838:	e72c      	b.n	8001694 <main+0x8>
 800183a:	bf00      	nop
 800183c:	02255100 	.word	0x02255100
 8001840:	42b40000 	.word	0x42b40000
 8001844:	20000213 	.word	0x20000213
 8001848:	2000023b 	.word	0x2000023b
 800184c:	20000244 	.word	0x20000244
 8001850:	20000254 	.word	0x20000254
 8001854:	20000234 	.word	0x20000234
 8001858:	20000258 	.word	0x20000258
 800185c:	20000230 	.word	0x20000230
 8001860:	40140000 	.word	0x40140000
 8001864:	20000238 	.word	0x20000238
 8001868:	20000242 	.word	0x20000242
 800186c:	66666667 	.word	0x66666667
 8001870:	08004320 	.word	0x08004320
 8001874:	2000025c 	.word	0x2000025c
 8001878:	40013800 	.word	0x40013800
 800187c:	40400000 	.word	0x40400000
 8001880:	08004324 	.word	0x08004324

08001884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <_sbrk+0x5c>)
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <_sbrk+0x60>)
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <_sbrk+0x64>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <_sbrk+0x68>)
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d207      	bcs.n	80018c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b4:	f002 f836 	bl	8003924 <__errno>
 80018b8:	4602      	mov	r2, r0
 80018ba:	230c      	movs	r3, #12
 80018bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	e009      	b.n	80018d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <_sbrk+0x64>)
 80018d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20005000 	.word	0x20005000
 80018e4:	00000400 	.word	0x00000400
 80018e8:	20000214 	.word	0x20000214
 80018ec:	20000318 	.word	0x20000318

080018f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018f0:	480d      	ldr	r0, [pc, #52]	; (8001928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018f2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <LoopForever+0x6>)
  ldr r1, =_edata
 80018fa:	490d      	ldr	r1, [pc, #52]	; (8001930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <LoopForever+0xe>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001910:	4c0a      	ldr	r4, [pc, #40]	; (800193c <LoopForever+0x16>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800191e:	f002 f807 	bl	8003930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001922:	f7ff feb3 	bl	800168c <main>

08001926 <LoopForever>:

LoopForever:
    b LoopForever
 8001926:	e7fe      	b.n	8001926 <LoopForever>
  ldr   r0, =_estack
 8001928:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001934:	08004474 	.word	0x08004474
  ldr r2, =_sbss
 8001938:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800193c:	20000318 	.word	0x20000318

08001940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC1_2_IRQHandler>

08001942 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8001942:	b480      	push	{r7}
 8001944:	b085      	sub	sp, #20
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <getposition+0x14>
		rval =0;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <getposition+0x1e>
		rval =4;
 800195c:	2304      	movs	r3, #4
 800195e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d101      	bne.n	800196a <getposition+0x28>
		rval =8;
 8001966:	2308      	movs	r3, #8
 8001968:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d101      	bne.n	8001974 <getposition+0x32>
		rval =12;
 8001970:	230c      	movs	r3, #12
 8001972:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	2b04      	cmp	r3, #4
 8001978:	d101      	bne.n	800197e <getposition+0x3c>
		rval =16;
 800197a:	2310      	movs	r3, #16
 800197c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	2b05      	cmp	r3, #5
 8001982:	d101      	bne.n	8001988 <getposition+0x46>
		rval =20;
 8001984:	2314      	movs	r3, #20
 8001986:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	2b06      	cmp	r3, #6
 800198c:	d101      	bne.n	8001992 <getposition+0x50>
		rval =24;
 800198e:	2318      	movs	r3, #24
 8001990:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	2b07      	cmp	r3, #7
 8001996:	d101      	bne.n	800199c <getposition+0x5a>
		rval =28;
 8001998:	231c      	movs	r3, #28
 800199a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d101      	bne.n	80019a6 <getposition+0x64>
		rval =0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	2b09      	cmp	r3, #9
 80019aa:	d101      	bne.n	80019b0 <getposition+0x6e>
		rval =4;
 80019ac:	2304      	movs	r3, #4
 80019ae:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	2b0a      	cmp	r3, #10
 80019b4:	d101      	bne.n	80019ba <getposition+0x78>
		rval =8;
 80019b6:	2308      	movs	r3, #8
 80019b8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	2b0b      	cmp	r3, #11
 80019be:	d101      	bne.n	80019c4 <getposition+0x82>
		rval =12;
 80019c0:	230c      	movs	r3, #12
 80019c2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d101      	bne.n	80019ce <getposition+0x8c>
		rval =16;
 80019ca:	2310      	movs	r3, #16
 80019cc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	2b0d      	cmp	r3, #13
 80019d2:	d101      	bne.n	80019d8 <getposition+0x96>
		rval =20;
 80019d4:	2314      	movs	r3, #20
 80019d6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	2b0e      	cmp	r3, #14
 80019dc:	d101      	bne.n	80019e2 <getposition+0xa0>
		rval =24;
 80019de:	2318      	movs	r3, #24
 80019e0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d101      	bne.n	80019ec <getposition+0xaa>
		rval =28;
 80019e8:	231c      	movs	r3, #28
 80019ea:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]


}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	460b      	mov	r3, r1
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4a69      	ldr	r2, [pc, #420]	; (8001bb0 <pinmode+0x1b8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d106      	bne.n	8001a1c <pinmode+0x24>
		GPIOA_Clock_Enable();
 8001a0e:	4b69      	ldr	r3, [pc, #420]	; (8001bb4 <pinmode+0x1bc>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	4a68      	ldr	r2, [pc, #416]	; (8001bb4 <pinmode+0x1bc>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6193      	str	r3, [r2, #24]
 8001a1a:	e010      	b.n	8001a3e <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4a66      	ldr	r2, [pc, #408]	; (8001bb8 <pinmode+0x1c0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d106      	bne.n	8001a32 <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8001a24:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <pinmode+0x1bc>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a62      	ldr	r2, [pc, #392]	; (8001bb4 <pinmode+0x1bc>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	e005      	b.n	8001a3e <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 8001a32:	4b60      	ldr	r3, [pc, #384]	; (8001bb4 <pinmode+0x1bc>)
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	4a5f      	ldr	r2, [pc, #380]	; (8001bb4 <pinmode+0x1bc>)
 8001a38:	f043 0310 	orr.w	r3, r3, #16
 8001a3c:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8001a3e:	897b      	ldrh	r3, [r7, #10]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d856      	bhi.n	8001af2 <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 8001a44:	897b      	ldrh	r3, [r7, #10]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff7b 	bl	8001942 <getposition>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	230f      	movs	r3, #15
 8001a52:	4093      	lsls	r3, r2
 8001a54:	43da      	mvns	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d002      	beq.n	8001a6c <pinmode+0x74>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b18      	cmp	r3, #24
 8001a6a:	d133      	bne.n	8001ad4 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b18      	cmp	r3, #24
 8001a70:	d117      	bne.n	8001aa2 <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff64 	bl	8001942 <getposition>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2308      	movs	r3, #8
 8001a80:	fa03 f202 	lsl.w	r2, r3, r2
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	897a      	ldrh	r2, [r7, #10]
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001aa0:	e081      	b.n	8001ba6 <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8001aa2:	897b      	ldrh	r3, [r7, #10]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff4c 	bl	8001942 <getposition>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	2308      	movs	r3, #8
 8001ab0:	fa03 f202 	lsl.w	r2, r3, r2
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	897a      	ldrh	r2, [r7, #10]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aca:	43d2      	mvns	r2, r2
 8001acc:	401a      	ands	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001ad2:	e068      	b.n	8001ba6 <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 8001ad4:	897b      	ldrh	r3, [r7, #10]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff33 	bl	8001942 <getposition>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	fa03 f202 	lsl.w	r2, r3, r2
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	601a      	str	r2, [r3, #0]

	}



}
 8001af0:	e059      	b.n	8001ba6 <pinmode+0x1ae>
	else if(pin>7){
 8001af2:	897b      	ldrh	r3, [r7, #10]
 8001af4:	2b07      	cmp	r3, #7
 8001af6:	d956      	bls.n	8001ba6 <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 8001af8:	897b      	ldrh	r3, [r7, #10]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff21 	bl	8001942 <getposition>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	230f      	movs	r3, #15
 8001b06:	4093      	lsls	r3, r2
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	401a      	ands	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d002      	beq.n	8001b20 <pinmode+0x128>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b18      	cmp	r3, #24
 8001b1e:	d133      	bne.n	8001b88 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b18      	cmp	r3, #24
 8001b24:	d117      	bne.n	8001b56 <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8001b26:	897b      	ldrh	r3, [r7, #10]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff0a 	bl	8001942 <getposition>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	2308      	movs	r3, #8
 8001b34:	fa03 f202 	lsl.w	r2, r3, r2
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	897a      	ldrh	r2, [r7, #10]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001b54:	e027      	b.n	8001ba6 <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8001b56:	897b      	ldrh	r3, [r7, #10]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fef2 	bl	8001942 <getposition>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461a      	mov	r2, r3
 8001b62:	2308      	movs	r3, #8
 8001b64:	fa03 f202 	lsl.w	r2, r3, r2
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	897a      	ldrh	r2, [r7, #10]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7e:	43d2      	mvns	r2, r2
 8001b80:	401a      	ands	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001b86:	e00e      	b.n	8001ba6 <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8001b88:	897b      	ldrh	r3, [r7, #10]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fed9 	bl	8001942 <getposition>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	fa03 f202 	lsl.w	r2, r3, r2
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	605a      	str	r2, [r3, #4]
}
 8001ba4:	e7ff      	b.n	8001ba6 <pinmode+0x1ae>
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010c00 	.word	0x40010c00

08001bbc <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_typeDef* GPIOx,uint16_t pin,uint8_t status){
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <pinwrite+0x2a>
		GPIOx->GPIOx_ODR |=(1<<pin);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	fa01 f202 	lsl.w	r2, r1, r2
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->GPIOx_ODR &=~(1<<pin);

}
 8001be4:	e009      	b.n	8001bfa <pinwrite+0x3e>
	else GPIOx->GPIOx_ODR &=~(1<<pin);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	2101      	movs	r1, #1
 8001bee:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf2:	43d2      	mvns	r2, r2
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60da      	str	r2, [r3, #12]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <READ_PIN>:
 * @param [in]      - Pin: GPIOx PIN Number
 * @retval          - uint8_t
 * Note             - none
 */

uint8_t READ_PIN(GPIO_typeDef* GPIOx, uint16_t pin){
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
	return (GPIOx->GPIOx_IDR>>pin)&1;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(float time,uint8_t U,uint32_t clk){
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b08b      	sub	sp, #44	; 0x2c
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	460b      	mov	r3, r1
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	72fb      	strb	r3, [r7, #11]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 8001c3a:	4b5b      	ldr	r3, [pc, #364]	; (8001da8 <delay+0x17c>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4a5a      	ldr	r2, [pc, #360]	; (8001da8 <delay+0x17c>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001c46:	4b59      	ldr	r3, [pc, #356]	; (8001dac <delay+0x180>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b57      	ldr	r3, [pc, #348]	; (8001dac <delay+0x180>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
	uint32_t unit =1000;
 8001c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c68:	61bb      	str	r3, [r7, #24]
	uint8_t  increase=2;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	75fb      	strb	r3, [r7, #23]

	if (U == 0){
 8001c6e:	7afb      	ldrb	r3, [r7, #11]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10f      	bne.n	8001c94 <delay+0x68>
		unit = 1000;
 8001c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c78:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 100;
 8001c7a:	494d      	ldr	r1, [pc, #308]	; (8001db0 <delay+0x184>)
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7ff f937 	bl	8000ef0 <__aeabi_fcmpgt>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <delay+0x62>
 8001c88:	2364      	movs	r3, #100	; 0x64
 8001c8a:	75fb      	strb	r3, [r7, #23]
 8001c8c:	e045      	b.n	8001d1a <delay+0xee>
		else increase = 10;
 8001c8e:	230a      	movs	r3, #10
 8001c90:	75fb      	strb	r3, [r7, #23]
 8001c92:	e042      	b.n	8001d1a <delay+0xee>
	}
	else {
		unit = 1000000;
 8001c94:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <delay+0x188>)
 8001c96:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 10;
 8001c98:	4945      	ldr	r1, [pc, #276]	; (8001db0 <delay+0x184>)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f7ff f928 	bl	8000ef0 <__aeabi_fcmpgt>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <delay+0x80>
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	75fb      	strb	r3, [r7, #23]
 8001caa:	e036      	b.n	8001d1a <delay+0xee>
		else increase = 5;
 8001cac:	2305      	movs	r3, #5
 8001cae:	75fb      	strb	r3, [r7, #23]
	}

	while(user_flage==1){
 8001cb0:	e033      	b.n	8001d1a <delay+0xee>
		user_top = (clk/unit*time)/( user_pre );
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe ff04 	bl	8000ac8 <__aeabi_ui2f>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	68f9      	ldr	r1, [r7, #12]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe ff57 	bl	8000b78 <__aeabi_fmul>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461c      	mov	r4, r3
 8001cce:	69f8      	ldr	r0, [r7, #28]
 8001cd0:	f7fe fefa 	bl	8000ac8 <__aeabi_ui2f>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7ff f801 	bl	8000ce0 <__aeabi_fdiv>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f90f 	bl	8000f04 <__aeabi_f2uiz>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	623b      	str	r3, [r7, #32]
		if(user_top>=32000){
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001cf0:	d310      	bcc.n	8001d14 <delay+0xe8>

			if(user_pre>65530){
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d906      	bls.n	8001d0a <delay+0xde>
				user_pre=65530;
 8001cfc:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8001d00:	61fb      	str	r3, [r7, #28]
				user_flage=0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d08:	e007      	b.n	8001d1a <delay+0xee>
			}
			else user_pre+=increase;
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	4413      	add	r3, r2
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e002      	b.n	8001d1a <delay+0xee>

		}
		else{
			user_flage=0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(user_flage==1){
 8001d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d0c7      	beq.n	8001cb2 <delay+0x86>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <delay+0x180>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <delay+0x180>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0201 	bic.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <delay+0x180>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <delay+0x180>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0204 	orr.w	r2, r2, #4
 8001d40:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <delay+0x180>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <delay+0x180>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <delay+0x180>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6a3a      	ldr	r2, [r7, #32]
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <delay+0x180>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	3a01      	subs	r2, #1
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <delay+0x180>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <delay+0x180>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <delay+0x180>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <delay+0x180>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <delay+0x18c>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <delay+0x190>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <delay+0x190>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 8001d96:	bf00      	nop
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <delay+0x18c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1fb      	bne.n	8001d98 <delay+0x16c>

	}
}
 8001da0:	bf00      	nop
 8001da2:	372c      	adds	r7, #44	; 0x2c
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd90      	pop	{r4, r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	20000020 	.word	0x20000020
 8001db0:	453b8000 	.word	0x453b8000
 8001db4:	000f4240 	.word	0x000f4240
 8001db8:	2000001c 	.word	0x2000001c
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <TIMER_ISR>:

//==================================================================================================

void TIMER_ISR(TIMERS_typeDef* ISR_TIMER,uint16_t time_ms,uint8_t U,uint32_t clk,void (*calback) (void)){
 8001dc0:	b480      	push	{r7}
 8001dc2:	b08b      	sub	sp, #44	; 0x2c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	817b      	strh	r3, [r7, #10]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	727b      	strb	r3, [r7, #9]

	TIMER3_CLOCK_Enable();//enable timer3 clock
 8001dd2:	4b49      	ldr	r3, [pc, #292]	; (8001ef8 <TIMER_ISR+0x138>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a48      	ldr	r2, [pc, #288]	; (8001ef8 <TIMER_ISR+0x138>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	61d3      	str	r3, [r2, #28]
	ISR_TIMER->TIMx_CR1 &=~(1<<0);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 0201 	bic.w	r2, r3, #1
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]
	ISRcalback[0] = calback;
 8001dea:	4a44      	ldr	r2, [pc, #272]	; (8001efc <TIMER_ISR+0x13c>)
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	6013      	str	r3, [r2, #0]
	ISR_TIMER_COPY=ISR_TIMER;
 8001df0:	4a43      	ldr	r2, [pc, #268]	; (8001f00 <TIMER_ISR+0x140>)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6013      	str	r3, [r2, #0]

	char user_flage=1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
	uint8_t  increase=2;
 8001e04:	2302      	movs	r3, #2
 8001e06:	76fb      	strb	r3, [r7, #27]
	uint32_t unit =1000;
 8001e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0c:	617b      	str	r3, [r7, #20]
	if (U == 0){
 8001e0e:	7a7b      	ldrb	r3, [r7, #9]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10d      	bne.n	8001e30 <TIMER_ISR+0x70>
			unit = 1000;
 8001e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e18:	617b      	str	r3, [r7, #20]
			if (time_ms > 3000)increase = 100;
 8001e1a:	897b      	ldrh	r3, [r7, #10]
 8001e1c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d902      	bls.n	8001e2a <TIMER_ISR+0x6a>
 8001e24:	2364      	movs	r3, #100	; 0x64
 8001e26:	76fb      	strb	r3, [r7, #27]
 8001e28:	e032      	b.n	8001e90 <TIMER_ISR+0xd0>
			else increase = 10;
 8001e2a:	230a      	movs	r3, #10
 8001e2c:	76fb      	strb	r3, [r7, #27]
 8001e2e:	e02f      	b.n	8001e90 <TIMER_ISR+0xd0>
		}
		else {
			unit = 1000000;
 8001e30:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <TIMER_ISR+0x144>)
 8001e32:	617b      	str	r3, [r7, #20]
			if (time_ms > 3000)increase = 10;
 8001e34:	897b      	ldrh	r3, [r7, #10]
 8001e36:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d902      	bls.n	8001e44 <TIMER_ISR+0x84>
 8001e3e:	230a      	movs	r3, #10
 8001e40:	76fb      	strb	r3, [r7, #27]
 8001e42:	e025      	b.n	8001e90 <TIMER_ISR+0xd0>
			else increase = 5;
 8001e44:	2305      	movs	r3, #5
 8001e46:	76fb      	strb	r3, [r7, #27]
		}

		while(user_flage==1){
 8001e48:	e022      	b.n	8001e90 <TIMER_ISR+0xd0>
			user_top = (clk/unit*time_ms)/( user_pre );
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	897a      	ldrh	r2, [r7, #10]
 8001e54:	fb02 f203 	mul.w	r2, r2, r3
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	623b      	str	r3, [r7, #32]
			if(user_top>=32000){
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001e66:	d310      	bcc.n	8001e8a <TIMER_ISR+0xca>

				if(user_pre>65530){
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d906      	bls.n	8001e80 <TIMER_ISR+0xc0>
					user_pre=65530;
 8001e72:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8001e76:	61fb      	str	r3, [r7, #28]
					user_flage=0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e7e:	e007      	b.n	8001e90 <TIMER_ISR+0xd0>
				}
				else user_pre+=increase;
 8001e80:	7efb      	ldrb	r3, [r7, #27]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	4413      	add	r3, r2
 8001e86:	61fb      	str	r3, [r7, #28]
 8001e88:	e002      	b.n	8001e90 <TIMER_ISR+0xd0>

			}
			else{
				user_flage=0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(user_flage==1){
 8001e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d0d8      	beq.n	8001e4a <TIMER_ISR+0x8a>
			}
		}



	ISR_TIMER->TIMx_CR1 &=~(1<<0);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0201 	bic.w	r2, r3, #1
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	601a      	str	r2, [r3, #0]

	ISR_TIMER->TIMx_CR1  |=(1<<2);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f043 0204 	orr.w	r2, r3, #4
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	601a      	str	r2, [r3, #0]

	ISR_TIMER->TIMx_DIER |=(1<<0);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	60da      	str	r2, [r3, #12]

	ISR_TIMER->TIMx_ARR=user_top;//frec peak value
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a3a      	ldr	r2, [r7, #32]
 8001ec0:	62da      	str	r2, [r3, #44]	; 0x2c

	ISR_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	1e5a      	subs	r2, r3, #1
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	629a      	str	r2, [r3, #40]	; 0x28

	ISR_TIMER->TIMx_EGR |=(1<<0);//		Bit 0 UG: Update generation
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f043 0201 	orr.w	r2, r3, #1
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	615a      	str	r2, [r3, #20]

	ISR_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	601a      	str	r2, [r3, #0]

	NVIC_TIM3_global_interrupt_Enable;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <TIMER_ISR+0x148>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <TIMER_ISR+0x148>)
 8001ee8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001eec:	6013      	str	r3, [r2, #0]

}
 8001eee:	bf00      	nop
 8001ef0:	372c      	adds	r7, #44	; 0x2c
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	20000270 	.word	0x20000270
 8001f00:	2000027c 	.word	0x2000027c
 8001f04:	000f4240 	.word	0x000f4240
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <TIME_CALCULATION>:
//======================================================================================================

uint32_t TIME_CALCULATION(uint32_t clk,uint8_t TIMER_ST){
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
	if(TIMER_ST==TIMER_START){
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d132      	bne.n	8001f84 <TIME_CALCULATION+0x78>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <TIME_CALCULATION+0xd0>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4a2e      	ldr	r2, [pc, #184]	; (8001fdc <TIME_CALCULATION+0xd0>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	61d3      	str	r3, [r2, #28]
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_CR1  |=(1<<2);
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a29      	ldr	r2, [pc, #164]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_DIER |=(1<<0);//Update interrupt enable
 8001f42:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	60d3      	str	r3, [r2, #12]

		TIM4->TIMx_ARR=64000;//peak value 8ms of freq=8000000hz
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f50:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM4->TIMx_PSC=0;//prescaller
 8001f56:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28

		TIM4->TIMx_EGR |=(1<<0);//Bit 0 UG: Update generation
 8001f5c:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6153      	str	r3, [r2, #20]

		TIM4->TIMx_CR1 |=(1<<0);//enable the timer
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6013      	str	r3, [r2, #0]
		NVIC_TIM4_global_interrupt_Enable;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <TIME_CALCULATION+0xd8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1a      	ldr	r2, [pc, #104]	; (8001fe4 <TIME_CALCULATION+0xd8>)
 8001f7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f7e:	6013      	str	r3, [r2, #0]
		return 1;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e025      	b.n	8001fd0 <TIME_CALCULATION+0xc4>
	}
	else {
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	6013      	str	r3, [r2, #0]
		timer_ticks=TIM4->TIMx_CNT;
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <TIME_CALCULATION+0xd4>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <TIME_CALCULATION+0xdc>)
 8001f98:	801a      	strh	r2, [r3, #0]
		uint32_t X=((timer_ticks+(overflowtims*64000))/(clk/1000000));
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <TIME_CALCULATION+0xdc>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <TIME_CALCULATION+0xe0>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8001faa:	fb03 f301 	mul.w	r3, r3, r1
 8001fae:	4413      	add	r3, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <TIME_CALCULATION+0xe4>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0c9b      	lsrs	r3, r3, #18
 8001fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc0:	60fb      	str	r3, [r7, #12]
		overflowtims=0;
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <TIME_CALCULATION+0xe0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	801a      	strh	r2, [r3, #0]
		timer_ticks=0;
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <TIME_CALCULATION+0xdc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	801a      	strh	r2, [r3, #0]
		return X;
 8001fce:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40000800 	.word	0x40000800
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	2000021c 	.word	0x2000021c
 8001fec:	2000021a 	.word	0x2000021a
 8001ff0:	431bde83 	.word	0x431bde83

08001ff4 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <SPWM_timer_INIT+0x100>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <SPWM_timer_INIT+0x100>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d12f      	bne.n	8002078 <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <SPWM_timer_INIT+0x100>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <SPWM_timer_INIT+0x100>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002026:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 8002028:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <SPWM_timer_INIT+0x100>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <SPWM_timer_INIT+0x100>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002036:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8002038:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <SPWM_timer_INIT+0x100>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <SPWM_timer_INIT+0x100>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0208 	orr.w	r2, r2, #8
 8002046:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8002048:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <SPWM_timer_INIT+0x100>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <SPWM_timer_INIT+0x100>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002056:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8002058:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <SPWM_timer_INIT+0x100>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6a1a      	ldr	r2, [r3, #32]
 800205e:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <SPWM_timer_INIT+0x100>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0210 	orr.w	r2, r2, #16
 8002066:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <SPWM_timer_INIT+0x100>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6a1a      	ldr	r2, [r3, #32]
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <SPWM_timer_INIT+0x100>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <SPWM_timer_INIT+0x100>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <SPWM_timer_INIT+0x100>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002086:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <SPWM_timer_INIT+0x100>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <SPWM_timer_INIT+0x100>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <SPWM_timer_INIT+0x100>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <SPWM_timer_INIT+0x100>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <SPWM_timer_INIT+0x100>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <SPWM_timer_INIT+0x100>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <SPWM_timer_INIT+0x100>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <SPWM_timer_INIT+0x100>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <SPWM_timer_INIT+0x100>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <SPWM_timer_INIT+0x100>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <SPWM_timer_INIT+0x100>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <SPWM_timer_INIT+0x100>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000004 	.word	0x20000004

080020f8 <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <TIM2_IRQHandler+0x34>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <TIM2_IRQHandler+0x34>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <TIM2_IRQHandler+0x38>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <TIM2_IRQHandler+0x34>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <TIM2_IRQHandler+0x34>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]

}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000020 	.word	0x20000020
 8002130:	2000001c 	.word	0x2000001c

08002134 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <TIM3_IRQHandler+0x6c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d119      	bne.n	8002174 <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <TIM3_IRQHandler+0x70>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <TIM3_IRQHandler+0x70>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <TIM3_IRQHandler+0x74>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <TIM3_IRQHandler+0x74>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3b01      	subs	r3, #1
 800215a:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <TIM3_IRQHandler+0x74>)
 800215c:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 800215e:	e01c      	b.n	800219a <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <TIM3_IRQHandler+0x6c>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <TIM3_IRQHandler+0x70>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <TIM3_IRQHandler+0x70>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6013      	str	r3, [r2, #0]
}
 8002172:	e012      	b.n	800219a <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <TIM3_IRQHandler+0x78>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <TIM3_IRQHandler+0x78>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <TIM3_IRQHandler+0x78>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <TIM3_IRQHandler+0x78>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <TIM3_IRQHandler+0x7c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4798      	blx	r3
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000224 	.word	0x20000224
 80021a4:	40000400 	.word	0x40000400
 80021a8:	20000220 	.word	0x20000220
 80021ac:	2000027c 	.word	0x2000027c
 80021b0:	20000270 	.word	0x20000270

080021b4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <TIM4_IRQHandler+0x24>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <TIM4_IRQHandler+0x24>)
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6113      	str	r3, [r2, #16]
	overflowtims++;
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <TIM4_IRQHandler+0x28>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <TIM4_IRQHandler+0x28>)
 80021ce:	801a      	strh	r2, [r3, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	40000800 	.word	0x40000800
 80021dc:	2000021a 	.word	0x2000021a

080021e0 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 80021e4:	4b5d      	ldr	r3, [pc, #372]	; (800235c <TIM1_UP_IRQHandler+0x17c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <TIM1_UP_IRQHandler+0x180>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d911      	bls.n	8002214 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 80021f0:	4b5c      	ldr	r3, [pc, #368]	; (8002364 <TIM1_UP_IRQHandler+0x184>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
		flage1=0;
 80021f6:	4b5c      	ldr	r3, [pc, #368]	; (8002368 <TIM1_UP_IRQHandler+0x188>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 80021fc:	4b58      	ldr	r3, [pc, #352]	; (8002360 <TIM1_UP_IRQHandler+0x180>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a5a      	ldr	r2, [pc, #360]	; (800236c <TIM1_UP_IRQHandler+0x18c>)
 8002202:	7812      	ldrb	r2, [r2, #0]
 8002204:	fbb3 f2f2 	udiv	r2, r3, r2
 8002208:	4b55      	ldr	r3, [pc, #340]	; (8002360 <TIM1_UP_IRQHandler+0x180>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4413      	add	r3, r2
 800220e:	4a53      	ldr	r2, [pc, #332]	; (800235c <TIM1_UP_IRQHandler+0x17c>)
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e018      	b.n	8002246 <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 8002214:	4b51      	ldr	r3, [pc, #324]	; (800235c <TIM1_UP_IRQHandler+0x17c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b63      	cmp	r3, #99	; 0x63
 800221a:	d814      	bhi.n	8002246 <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 800221c:	4b51      	ldr	r3, [pc, #324]	; (8002364 <TIM1_UP_IRQHandler+0x184>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
		flage1=1;
 8002222:	4b51      	ldr	r3, [pc, #324]	; (8002368 <TIM1_UP_IRQHandler+0x188>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 8002228:	4b51      	ldr	r3, [pc, #324]	; (8002370 <TIM1_UP_IRQHandler+0x190>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	f083 0301 	eor.w	r3, r3, #1
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b4f      	ldr	r3, [pc, #316]	; (8002370 <TIM1_UP_IRQHandler+0x190>)
 8002234:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <TIM1_UP_IRQHandler+0x180>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a4c      	ldr	r2, [pc, #304]	; (800236c <TIM1_UP_IRQHandler+0x18c>)
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002242:	4a46      	ldr	r2, [pc, #280]	; (800235c <TIM1_UP_IRQHandler+0x17c>)
 8002244:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 8002246:	4b4a      	ldr	r3, [pc, #296]	; (8002370 <TIM1_UP_IRQHandler+0x190>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d110      	bne.n	8002270 <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 800224e:	4b49      	ldr	r3, [pc, #292]	; (8002374 <TIM1_UP_IRQHandler+0x194>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a1a      	ldr	r2, [r3, #32]
 8002254:	4b47      	ldr	r3, [pc, #284]	; (8002374 <TIM1_UP_IRQHandler+0x194>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0201 	bic.w	r2, r2, #1
 800225c:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <TIM1_UP_IRQHandler+0x194>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	4b43      	ldr	r3, [pc, #268]	; (8002374 <TIM1_UP_IRQHandler+0x194>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0210 	orr.w	r2, r2, #16
 800226c:	621a      	str	r2, [r3, #32]
 800226e:	e013      	b.n	8002298 <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 8002270:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <TIM1_UP_IRQHandler+0x190>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10f      	bne.n	8002298 <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 8002278:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <TIM1_UP_IRQHandler+0x194>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6a1a      	ldr	r2, [r3, #32]
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <TIM1_UP_IRQHandler+0x194>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0210 	bic.w	r2, r2, #16
 8002286:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 8002288:	4b3a      	ldr	r3, [pc, #232]	; (8002374 <TIM1_UP_IRQHandler+0x194>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6a1a      	ldr	r2, [r3, #32]
 800228e:	4b39      	ldr	r3, [pc, #228]	; (8002374 <TIM1_UP_IRQHandler+0x194>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 8002298:	4b33      	ldr	r3, [pc, #204]	; (8002368 <TIM1_UP_IRQHandler+0x188>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d11c      	bne.n	80022da <TIM1_UP_IRQHandler+0xfa>
 80022a0:	4b30      	ldr	r3, [pc, #192]	; (8002364 <TIM1_UP_IRQHandler+0x184>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d118      	bne.n	80022da <TIM1_UP_IRQHandler+0xfa>
		top=c;
 80022a8:	4b33      	ldr	r3, [pc, #204]	; (8002378 <TIM1_UP_IRQHandler+0x198>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2c      	ldr	r2, [pc, #176]	; (8002360 <TIM1_UP_IRQHandler+0x180>)
 80022ae:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 80022b0:	4b32      	ldr	r3, [pc, #200]	; (800237c <TIM1_UP_IRQHandler+0x19c>)
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	4b29      	ldr	r3, [pc, #164]	; (800235c <TIM1_UP_IRQHandler+0x17c>)
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	4b29      	ldr	r3, [pc, #164]	; (8002360 <TIM1_UP_IRQHandler+0x180>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2301      	movs	r3, #1
 80022be:	f7ff fe99 	bl	8001ff4 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 80022c2:	4b27      	ldr	r3, [pc, #156]	; (8002360 <TIM1_UP_IRQHandler+0x180>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a29      	ldr	r2, [pc, #164]	; (800236c <TIM1_UP_IRQHandler+0x18c>)
 80022c8:	7812      	ldrb	r2, [r2, #0]
 80022ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80022ce:	4b23      	ldr	r3, [pc, #140]	; (800235c <TIM1_UP_IRQHandler+0x17c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a21      	ldr	r2, [pc, #132]	; (800235c <TIM1_UP_IRQHandler+0x17c>)
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e035      	b.n	8002346 <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 80022da:	4b22      	ldr	r3, [pc, #136]	; (8002364 <TIM1_UP_IRQHandler+0x184>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d129      	bne.n	8002336 <TIM1_UP_IRQHandler+0x156>
 80022e2:	4b21      	ldr	r3, [pc, #132]	; (8002368 <TIM1_UP_IRQHandler+0x188>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d125      	bne.n	8002336 <TIM1_UP_IRQHandler+0x156>
		top=c;
 80022ea:	4b23      	ldr	r3, [pc, #140]	; (8002378 <TIM1_UP_IRQHandler+0x198>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <TIM1_UP_IRQHandler+0x180>)
 80022f0:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 80022f2:	4b1a      	ldr	r3, [pc, #104]	; (800235c <TIM1_UP_IRQHandler+0x17c>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <TIM1_UP_IRQHandler+0x180>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	491c      	ldr	r1, [pc, #112]	; (800236c <TIM1_UP_IRQHandler+0x18c>)
 80022fc:	7809      	ldrb	r1, [r1, #0]
 80022fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	4a15      	ldr	r2, [pc, #84]	; (800235c <TIM1_UP_IRQHandler+0x17c>)
 8002306:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8002308:	4b1c      	ldr	r3, [pc, #112]	; (800237c <TIM1_UP_IRQHandler+0x19c>)
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <TIM1_UP_IRQHandler+0x17c>)
 800230e:	6819      	ldr	r1, [r3, #0]
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <TIM1_UP_IRQHandler+0x180>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2301      	movs	r3, #1
 8002316:	f7ff fe6d 	bl	8001ff4 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <TIM1_UP_IRQHandler+0x180>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a13      	ldr	r2, [pc, #76]	; (800236c <TIM1_UP_IRQHandler+0x18c>)
 8002320:	7812      	ldrb	r2, [r2, #0]
 8002322:	fbb3 f2f2 	udiv	r2, r3, r2
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <TIM1_UP_IRQHandler+0x17c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d10b      	bne.n	8002346 <TIM1_UP_IRQHandler+0x166>
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <TIM1_UP_IRQHandler+0x17c>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e007      	b.n	8002346 <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <TIM1_UP_IRQHandler+0x194>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <TIM1_UP_IRQHandler+0x194>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <TIM1_UP_IRQHandler+0x194>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <TIM1_UP_IRQHandler+0x194>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	611a      	str	r2, [r3, #16]
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000018 	.word	0x20000018
 8002360:	2000000c 	.word	0x2000000c
 8002364:	20000218 	.word	0x20000218
 8002368:	20000008 	.word	0x20000008
 800236c:	20000278 	.word	0x20000278
 8002370:	20000009 	.word	0x20000009
 8002374:	20000004 	.word	0x20000004
 8002378:	20000014 	.word	0x20000014
 800237c:	20000010 	.word	0x20000010

08002380 <MCAL_speed_init>:
#include "stm32_speed_DRIVER.h"
#define FLASH_BASE_ADDR     0x40022000
#define FLASH_ACR_OFFSET    0x00
#define FLASH_ACR          (*(volatile unsigned int*)(FLASH_BASE_ADDR + FLASH_ACR_OFFSET))
#define FLASH_ACR_LATENCY_Pos 0
void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	460a      	mov	r2, r1
 800238a:	71fb      	strb	r3, [r7, #7]
 800238c:	4613      	mov	r3, r2
 800238e:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d13a      	bne.n	800240c <MCAL_speed_init+0x8c>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 8002396:	79bb      	ldrb	r3, [r7, #6]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 80cc 	bne.w	8002536 <MCAL_speed_init+0x1b6>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 800239e:	4b68      	ldr	r3, [pc, #416]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4a67      	ldr	r2, [pc, #412]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a8:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 80023aa:	4b65      	ldr	r3, [pc, #404]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4a64      	ldr	r2, [pc, #400]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023b0:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80023b4:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 80023b6:	4b62      	ldr	r3, [pc, #392]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a61      	ldr	r2, [pc, #388]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023bc:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80023c0:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 80023c2:	4b5f      	ldr	r3, [pc, #380]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5e      	ldr	r2, [pc, #376]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023cc:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 80023ce:	4b5c      	ldr	r3, [pc, #368]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4a5b      	ldr	r2, [pc, #364]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023d4:	f023 0303 	bic.w	r3, r3, #3
 80023d8:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 80023da:	4b59      	ldr	r3, [pc, #356]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a58      	ldr	r2, [pc, #352]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 80023e6:	4b56      	ldr	r3, [pc, #344]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a55      	ldr	r2, [pc, #340]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f0:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 80023f2:	4b53      	ldr	r3, [pc, #332]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4a52      	ldr	r2, [pc, #328]	; (8002540 <MCAL_speed_init+0x1c0>)
 80023f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80023fc:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 80023fe:	4b50      	ldr	r3, [pc, #320]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a4f      	ldr	r2, [pc, #316]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002404:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002408:	6053      	str	r3, [r2, #4]

		}
	}


}
 800240a:	e094      	b.n	8002536 <MCAL_speed_init+0x1b6>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d150      	bne.n	80024b4 <MCAL_speed_init+0x134>
			RCC->RCC_CR |= (1 << 16);
 8002412:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a4a      	ldr	r2, [pc, #296]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 800241e:	bf00      	nop
 8002420:	4b47      	ldr	r3, [pc, #284]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f9      	beq.n	8002420 <MCAL_speed_init+0xa0>
			RCC->RCC_CFGR|=(1<<16);
 800242c:	4b44      	ldr	r3, [pc, #272]	; (8002540 <MCAL_speed_init+0x1c0>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a43      	ldr	r2, [pc, #268]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002436:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8002438:	4b41      	ldr	r3, [pc, #260]	; (8002540 <MCAL_speed_init+0x1c0>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a40      	ldr	r2, [pc, #256]	; (8002540 <MCAL_speed_init+0x1c0>)
 800243e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002442:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8002444:	4b3e      	ldr	r3, [pc, #248]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a3d      	ldr	r2, [pc, #244]	; (8002540 <MCAL_speed_init+0x1c0>)
 800244a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244e:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 8002450:	bf00      	nop
 8002452:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f9      	beq.n	8002452 <MCAL_speed_init+0xd2>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 800245e:	4b39      	ldr	r3, [pc, #228]	; (8002544 <MCAL_speed_init+0x1c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a38      	ldr	r2, [pc, #224]	; (8002544 <MCAL_speed_init+0x1c4>)
 8002464:	f023 0307 	bic.w	r3, r3, #7
 8002468:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 800246a:	4b36      	ldr	r3, [pc, #216]	; (8002544 <MCAL_speed_init+0x1c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a35      	ldr	r2, [pc, #212]	; (8002544 <MCAL_speed_init+0x1c4>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8002476:	4b32      	ldr	r3, [pc, #200]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4a31      	ldr	r2, [pc, #196]	; (8002540 <MCAL_speed_init+0x1c0>)
 800247c:	f023 0303 	bic.w	r3, r3, #3
 8002480:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8002482:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4a2e      	ldr	r2, [pc, #184]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 800248e:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a2b      	ldr	r2, [pc, #172]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002498:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 800249a:	4b29      	ldr	r3, [pc, #164]	; (8002540 <MCAL_speed_init+0x1c0>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4a28      	ldr	r2, [pc, #160]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80024a4:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a25      	ldr	r2, [pc, #148]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024b0:	6053      	str	r3, [r2, #4]
}
 80024b2:	e040      	b.n	8002536 <MCAL_speed_init+0x1b6>
		else if (mood==mood_FAST_MOOD_72MHzCORE72MHzpref){
 80024b4:	79bb      	ldrb	r3, [r7, #6]
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d13d      	bne.n	8002536 <MCAL_speed_init+0x1b6>
			RCC->RCC_CR |= (1 << 16);
 80024ba:	4b21      	ldr	r3, [pc, #132]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a20      	ldr	r2, [pc, #128]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 80024c6:	bf00      	nop
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f9      	beq.n	80024c8 <MCAL_speed_init+0x148>
			RCC->RCC_CFGR|=(1<<16);
 80024d4:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a19      	ldr	r2, [pc, #100]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024de:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a16      	ldr	r2, [pc, #88]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024e6:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80024ea:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a13      	ldr	r2, [pc, #76]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f6:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 80024f8:	bf00      	nop
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <MCAL_speed_init+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f9      	beq.n	80024fa <MCAL_speed_init+0x17a>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <MCAL_speed_init+0x1c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <MCAL_speed_init+0x1c4>)
 800250c:	f023 0307 	bic.w	r3, r3, #7
 8002510:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <MCAL_speed_init+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <MCAL_speed_init+0x1c4>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4a07      	ldr	r2, [pc, #28]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002524:	f023 0303 	bic.w	r3, r3, #3
 8002528:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <MCAL_speed_init+0x1c0>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a04      	ldr	r2, [pc, #16]	; (8002540 <MCAL_speed_init+0x1c0>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	6053      	str	r3, [r2, #4]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	40021000 	.word	0x40021000
 8002544:	40022000 	.word	0x40022000

08002548 <ADC_INIT>:
#include "stm32f103c6_ADC.h"


uint8_t flag_ADC_INIT=0;

void ADC_INIT(ADC_typeDef* ADCx,uint8_t ADC_STATE_){
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]

	if(ADC_STATE_==ADC_STATE_START){
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d132      	bne.n	80025c0 <ADC_INIT+0x78>
		if(ADCx==ADC1){
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <ADC_INIT+0xac>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d106      	bne.n	8002570 <ADC_INIT+0x28>
			ADC1_Clock_Enable();
 8002562:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <ADC_INIT+0xb0>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	4a24      	ldr	r2, [pc, #144]	; (80025f8 <ADC_INIT+0xb0>)
 8002568:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800256c:	6193      	str	r3, [r2, #24]
 800256e:	e009      	b.n	8002584 <ADC_INIT+0x3c>
		}
		else if(ADCx==ADC2){
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a22      	ldr	r2, [pc, #136]	; (80025fc <ADC_INIT+0xb4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d105      	bne.n	8002584 <ADC_INIT+0x3c>
			ADC2_Clock_Enable();
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <ADC_INIT+0xb0>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <ADC_INIT+0xb0>)
 800257e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002582:	6193      	str	r3, [r2, #24]
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	609a      	str	r2, [r3, #8]
		//		Bit 1 CONT: Continuous conversion
		//		This bit is set and cleared by software. If set conversion takes place continuously till this bit is
		//		reset.
		//		0: Single conversion mode
		//		1: Continuous conversion mode
		ADCx->ADC_CR2 &=~(1<<1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 0202 	bic.w	r2, r3, #2
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	609a      	str	r2, [r3, #8]
		//		Bit 2 CAL: A/D Calibration
		//		This bit is set by software to start the calibration. It is reset by hardware after calibration is
		//		complete.
		//		0: Calibration completed
		//		1: Enable calibratio
		ADCx->ADC_CR2 |=(1<<2);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f043 0204 	orr.w	r2, r3, #4
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	609a      	str	r2, [r3, #8]
		while(((ADCx->ADC_CR2>>2)&1)){};
 80025a8:	bf00      	nop
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f8      	bne.n	80025aa <ADC_INIT+0x62>


		flag_ADC_INIT=1;
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <ADC_INIT+0xb8>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
		ADC2_Clock_DESABLE();
		flag_ADC_INIT=0;
	}


}
 80025be:	e014      	b.n	80025ea <ADC_INIT+0xa2>
		ADCx->ADC_CR2 &=~(1<<0);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 0201 	bic.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]
		ADC1_Clock_DESABLE();
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <ADC_INIT+0xb0>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <ADC_INIT+0xb0>)
 80025d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d6:	60d3      	str	r3, [r2, #12]
		ADC2_Clock_DESABLE();
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <ADC_INIT+0xb0>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4a06      	ldr	r2, [pc, #24]	; (80025f8 <ADC_INIT+0xb0>)
 80025de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e2:	60d3      	str	r3, [r2, #12]
		flag_ADC_INIT=0;
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <ADC_INIT+0xb8>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40012400 	.word	0x40012400
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40012800 	.word	0x40012800
 8002600:	20000225 	.word	0x20000225

08002604 <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	2b0f      	cmp	r3, #15
 8002612:	d854      	bhi.n	80026be <Enable_NVIC+0xba>
 8002614:	a201      	add	r2, pc, #4	; (adr r2, 800261c <Enable_NVIC+0x18>)
 8002616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261a:	bf00      	nop
 800261c:	0800265d 	.word	0x0800265d
 8002620:	0800266b 	.word	0x0800266b
 8002624:	08002679 	.word	0x08002679
 8002628:	08002687 	.word	0x08002687
 800262c:	08002695 	.word	0x08002695
 8002630:	080026a3 	.word	0x080026a3
 8002634:	080026a3 	.word	0x080026a3
 8002638:	080026a3 	.word	0x080026a3
 800263c:	080026a3 	.word	0x080026a3
 8002640:	080026a3 	.word	0x080026a3
 8002644:	080026b1 	.word	0x080026b1
 8002648:	080026b1 	.word	0x080026b1
 800264c:	080026b1 	.word	0x080026b1
 8002650:	080026b1 	.word	0x080026b1
 8002654:	080026b1 	.word	0x080026b1
 8002658:	080026b1 	.word	0x080026b1
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <Enable_NVIC+0xc4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <Enable_NVIC+0xc4>)
 8002662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002666:	6013      	str	r3, [r2, #0]
		break;
 8002668:	e029      	b.n	80026be <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <Enable_NVIC+0xc4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <Enable_NVIC+0xc4>)
 8002670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002674:	6013      	str	r3, [r2, #0]
		break;
 8002676:	e022      	b.n	80026be <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <Enable_NVIC+0xc4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <Enable_NVIC+0xc4>)
 800267e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002682:	6013      	str	r3, [r2, #0]
		break;
 8002684:	e01b      	b.n	80026be <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <Enable_NVIC+0xc4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <Enable_NVIC+0xc4>)
 800268c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002690:	6013      	str	r3, [r2, #0]
		break;
 8002692:	e014      	b.n	80026be <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <Enable_NVIC+0xc4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <Enable_NVIC+0xc4>)
 800269a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269e:	6013      	str	r3, [r2, #0]
		break;
 80026a0:	e00d      	b.n	80026be <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <Enable_NVIC+0xc4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <Enable_NVIC+0xc4>)
 80026a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026ac:	6013      	str	r3, [r2, #0]
		break;
 80026ae:	e006      	b.n	80026be <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <Enable_NVIC+0xc8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a05      	ldr	r2, [pc, #20]	; (80026cc <Enable_NVIC+0xc8>)
 80026b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ba:	6013      	str	r3, [r2, #0]
		break;
 80026bc:	bf00      	nop
	}


}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	e000e100 	.word	0xe000e100
 80026cc:	e000e104 	.word	0xe000e104

080026d0 <EXTI>:
 * @param [in]      -function_addres : app ISR function
 * @retval          - none
 * Note             -
 *================================================================ */

void EXTI(GPIO_typeDef* PORTx ,uint16_t pin,uint16_t triggercase,void (*function_addres)(interrupt_data* isr_data,uint8_t interupt_num)){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	460b      	mov	r3, r1
 80026dc:	817b      	strh	r3, [r7, #10]
 80026de:	4613      	mov	r3, r2
 80026e0:	813b      	strh	r3, [r7, #8]

	pinmode(PORTx,pin,GPIO_MODE_INTPUT_AF);//set pin to _INTPUT_AF
 80026e2:	897b      	ldrh	r3, [r7, #10]
 80026e4:	2204      	movs	r2, #4
 80026e6:	4619      	mov	r1, r3
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff f985 	bl	80019f8 <pinmode>
	AFIO_Clock_Enable();
 80026ee:	4b96      	ldr	r3, [pc, #600]	; (8002948 <EXTI+0x278>)
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	4a95      	ldr	r2, [pc, #596]	; (8002948 <EXTI+0x278>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6193      	str	r3, [r2, #24]
	//	0000: PA[x] pin
	//	0001: PB[x] pin
	//	0010: PC[x] pin
	//	0011: PD[x] pin

	switch(pin){
 80026fa:	897b      	ldrh	r3, [r7, #10]
 80026fc:	2b0f      	cmp	r3, #15
 80026fe:	f200 8392 	bhi.w	8002e26 <EXTI+0x756>
 8002702:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <EXTI+0x38>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	08002749 	.word	0x08002749
 800270c:	080027af 	.word	0x080027af
 8002710:	08002815 	.word	0x08002815
 8002714:	0800287b 	.word	0x0800287b
 8002718:	080028e1 	.word	0x080028e1
 800271c:	08002961 	.word	0x08002961
 8002720:	080029c7 	.word	0x080029c7
 8002724:	08002a2d 	.word	0x08002a2d
 8002728:	08002a93 	.word	0x08002a93
 800272c:	08002af9 	.word	0x08002af9
 8002730:	08002b5f 	.word	0x08002b5f
 8002734:	08002bd9 	.word	0x08002bd9
 8002738:	08002c3f 	.word	0x08002c3f
 800273c:	08002ca5 	.word	0x08002ca5
 8002740:	08002d0b 	.word	0x08002d0b
 8002744:	08002d6f 	.word	0x08002d6f
	case pin0:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<0);
 8002748:	4b80      	ldr	r3, [pc, #512]	; (800294c <EXTI+0x27c>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a7f      	ldr	r2, [pc, #508]	; (800294c <EXTI+0x27c>)
 800274e:	f023 030f 	bic.w	r3, r3, #15
 8002752:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<0);}
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4a7e      	ldr	r2, [pc, #504]	; (8002950 <EXTI+0x280>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d106      	bne.n	800276a <EXTI+0x9a>
 800275c:	4b7b      	ldr	r3, [pc, #492]	; (800294c <EXTI+0x27c>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a7a      	ldr	r2, [pc, #488]	; (800294c <EXTI+0x27c>)
 8002762:	f023 030f 	bic.w	r3, r3, #15
 8002766:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}

		break;
 8002768:	e333      	b.n	8002dd2 <EXTI+0x702>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4a79      	ldr	r2, [pc, #484]	; (8002954 <EXTI+0x284>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d106      	bne.n	8002780 <EXTI+0xb0>
 8002772:	4b76      	ldr	r3, [pc, #472]	; (800294c <EXTI+0x27c>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4a75      	ldr	r2, [pc, #468]	; (800294c <EXTI+0x27c>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6093      	str	r3, [r2, #8]
		break;
 800277e:	e328      	b.n	8002dd2 <EXTI+0x702>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a75      	ldr	r2, [pc, #468]	; (8002958 <EXTI+0x288>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d106      	bne.n	8002796 <EXTI+0xc6>
 8002788:	4b70      	ldr	r3, [pc, #448]	; (800294c <EXTI+0x27c>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a6f      	ldr	r2, [pc, #444]	; (800294c <EXTI+0x27c>)
 800278e:	f043 0302 	orr.w	r3, r3, #2
 8002792:	6093      	str	r3, [r2, #8]
		break;
 8002794:	e31d      	b.n	8002dd2 <EXTI+0x702>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a70      	ldr	r2, [pc, #448]	; (800295c <EXTI+0x28c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	f040 8319 	bne.w	8002dd2 <EXTI+0x702>
 80027a0:	4b6a      	ldr	r3, [pc, #424]	; (800294c <EXTI+0x27c>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a69      	ldr	r2, [pc, #420]	; (800294c <EXTI+0x27c>)
 80027a6:	f043 0303 	orr.w	r3, r3, #3
 80027aa:	6093      	str	r3, [r2, #8]
		break;
 80027ac:	e311      	b.n	8002dd2 <EXTI+0x702>
	case pin1:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<4);
 80027ae:	4b67      	ldr	r3, [pc, #412]	; (800294c <EXTI+0x27c>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	4a66      	ldr	r2, [pc, #408]	; (800294c <EXTI+0x27c>)
 80027b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027b8:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<4);}
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a64      	ldr	r2, [pc, #400]	; (8002950 <EXTI+0x280>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d106      	bne.n	80027d0 <EXTI+0x100>
 80027c2:	4b62      	ldr	r3, [pc, #392]	; (800294c <EXTI+0x27c>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4a61      	ldr	r2, [pc, #388]	; (800294c <EXTI+0x27c>)
 80027c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027cc:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}

		break;
 80027ce:	e302      	b.n	8002dd6 <EXTI+0x706>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a60      	ldr	r2, [pc, #384]	; (8002954 <EXTI+0x284>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d106      	bne.n	80027e6 <EXTI+0x116>
 80027d8:	4b5c      	ldr	r3, [pc, #368]	; (800294c <EXTI+0x27c>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4a5b      	ldr	r2, [pc, #364]	; (800294c <EXTI+0x27c>)
 80027de:	f043 0310 	orr.w	r3, r3, #16
 80027e2:	6093      	str	r3, [r2, #8]
		break;
 80027e4:	e2f7      	b.n	8002dd6 <EXTI+0x706>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4a5b      	ldr	r2, [pc, #364]	; (8002958 <EXTI+0x288>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d106      	bne.n	80027fc <EXTI+0x12c>
 80027ee:	4b57      	ldr	r3, [pc, #348]	; (800294c <EXTI+0x27c>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	4a56      	ldr	r2, [pc, #344]	; (800294c <EXTI+0x27c>)
 80027f4:	f043 0320 	orr.w	r3, r3, #32
 80027f8:	6093      	str	r3, [r2, #8]
		break;
 80027fa:	e2ec      	b.n	8002dd6 <EXTI+0x706>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a57      	ldr	r2, [pc, #348]	; (800295c <EXTI+0x28c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	f040 82e8 	bne.w	8002dd6 <EXTI+0x706>
 8002806:	4b51      	ldr	r3, [pc, #324]	; (800294c <EXTI+0x27c>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	4a50      	ldr	r2, [pc, #320]	; (800294c <EXTI+0x27c>)
 800280c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002810:	6093      	str	r3, [r2, #8]
		break;
 8002812:	e2e0      	b.n	8002dd6 <EXTI+0x706>
	case pin2:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<8);
 8002814:	4b4d      	ldr	r3, [pc, #308]	; (800294c <EXTI+0x27c>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4a4c      	ldr	r2, [pc, #304]	; (800294c <EXTI+0x27c>)
 800281a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800281e:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<8);}
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a4b      	ldr	r2, [pc, #300]	; (8002950 <EXTI+0x280>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d106      	bne.n	8002836 <EXTI+0x166>
 8002828:	4b48      	ldr	r3, [pc, #288]	; (800294c <EXTI+0x27c>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a47      	ldr	r2, [pc, #284]	; (800294c <EXTI+0x27c>)
 800282e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002832:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}

		break;
 8002834:	e2d1      	b.n	8002dda <EXTI+0x70a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a46      	ldr	r2, [pc, #280]	; (8002954 <EXTI+0x284>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d106      	bne.n	800284c <EXTI+0x17c>
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <EXTI+0x27c>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	4a42      	ldr	r2, [pc, #264]	; (800294c <EXTI+0x27c>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6093      	str	r3, [r2, #8]
		break;
 800284a:	e2c6      	b.n	8002dda <EXTI+0x70a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a42      	ldr	r2, [pc, #264]	; (8002958 <EXTI+0x288>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d106      	bne.n	8002862 <EXTI+0x192>
 8002854:	4b3d      	ldr	r3, [pc, #244]	; (800294c <EXTI+0x27c>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a3c      	ldr	r2, [pc, #240]	; (800294c <EXTI+0x27c>)
 800285a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800285e:	6093      	str	r3, [r2, #8]
		break;
 8002860:	e2bb      	b.n	8002dda <EXTI+0x70a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4a3d      	ldr	r2, [pc, #244]	; (800295c <EXTI+0x28c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	f040 82b7 	bne.w	8002dda <EXTI+0x70a>
 800286c:	4b37      	ldr	r3, [pc, #220]	; (800294c <EXTI+0x27c>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a36      	ldr	r2, [pc, #216]	; (800294c <EXTI+0x27c>)
 8002872:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002876:	6093      	str	r3, [r2, #8]
		break;
 8002878:	e2af      	b.n	8002dda <EXTI+0x70a>
	case pin3:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<12);
 800287a:	4b34      	ldr	r3, [pc, #208]	; (800294c <EXTI+0x27c>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4a33      	ldr	r2, [pc, #204]	; (800294c <EXTI+0x27c>)
 8002880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002884:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<12);}
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4a31      	ldr	r2, [pc, #196]	; (8002950 <EXTI+0x280>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d106      	bne.n	800289c <EXTI+0x1cc>
 800288e:	4b2f      	ldr	r3, [pc, #188]	; (800294c <EXTI+0x27c>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	4a2e      	ldr	r2, [pc, #184]	; (800294c <EXTI+0x27c>)
 8002894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002898:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}

		break;
 800289a:	e2a0      	b.n	8002dde <EXTI+0x70e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a2d      	ldr	r2, [pc, #180]	; (8002954 <EXTI+0x284>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d106      	bne.n	80028b2 <EXTI+0x1e2>
 80028a4:	4b29      	ldr	r3, [pc, #164]	; (800294c <EXTI+0x27c>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a28      	ldr	r2, [pc, #160]	; (800294c <EXTI+0x27c>)
 80028aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028ae:	6093      	str	r3, [r2, #8]
		break;
 80028b0:	e295      	b.n	8002dde <EXTI+0x70e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a28      	ldr	r2, [pc, #160]	; (8002958 <EXTI+0x288>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d106      	bne.n	80028c8 <EXTI+0x1f8>
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <EXTI+0x27c>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4a23      	ldr	r2, [pc, #140]	; (800294c <EXTI+0x27c>)
 80028c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028c4:	6093      	str	r3, [r2, #8]
		break;
 80028c6:	e28a      	b.n	8002dde <EXTI+0x70e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a24      	ldr	r2, [pc, #144]	; (800295c <EXTI+0x28c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	f040 8286 	bne.w	8002dde <EXTI+0x70e>
 80028d2:	4b1e      	ldr	r3, [pc, #120]	; (800294c <EXTI+0x27c>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4a1d      	ldr	r2, [pc, #116]	; (800294c <EXTI+0x27c>)
 80028d8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80028dc:	6093      	str	r3, [r2, #8]
		break;
 80028de:	e27e      	b.n	8002dde <EXTI+0x70e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin4:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<0);
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <EXTI+0x27c>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a19      	ldr	r2, [pc, #100]	; (800294c <EXTI+0x27c>)
 80028e6:	f023 030f 	bic.w	r3, r3, #15
 80028ea:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<0);}
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a18      	ldr	r2, [pc, #96]	; (8002950 <EXTI+0x280>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d106      	bne.n	8002902 <EXTI+0x232>
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <EXTI+0x27c>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <EXTI+0x27c>)
 80028fa:	f023 030f 	bic.w	r3, r3, #15
 80028fe:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}

		break;
 8002900:	e26f      	b.n	8002de2 <EXTI+0x712>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a13      	ldr	r2, [pc, #76]	; (8002954 <EXTI+0x284>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d106      	bne.n	8002918 <EXTI+0x248>
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <EXTI+0x27c>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	4a0f      	ldr	r2, [pc, #60]	; (800294c <EXTI+0x27c>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	60d3      	str	r3, [r2, #12]
		break;
 8002916:	e264      	b.n	8002de2 <EXTI+0x712>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a0f      	ldr	r2, [pc, #60]	; (8002958 <EXTI+0x288>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d106      	bne.n	800292e <EXTI+0x25e>
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <EXTI+0x27c>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a09      	ldr	r2, [pc, #36]	; (800294c <EXTI+0x27c>)
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	60d3      	str	r3, [r2, #12]
		break;
 800292c:	e259      	b.n	8002de2 <EXTI+0x712>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <EXTI+0x28c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	f040 8255 	bne.w	8002de2 <EXTI+0x712>
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <EXTI+0x27c>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a03      	ldr	r2, [pc, #12]	; (800294c <EXTI+0x27c>)
 800293e:	f043 0303 	orr.w	r3, r3, #3
 8002942:	60d3      	str	r3, [r2, #12]
		break;
 8002944:	e24d      	b.n	8002de2 <EXTI+0x712>
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	40010000 	.word	0x40010000
 8002950:	40010800 	.word	0x40010800
 8002954:	40010c00 	.word	0x40010c00
 8002958:	40011000 	.word	0x40011000
 800295c:	40011400 	.word	0x40011400
	case pin5:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<4);
 8002960:	4b92      	ldr	r3, [pc, #584]	; (8002bac <EXTI+0x4dc>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a91      	ldr	r2, [pc, #580]	; (8002bac <EXTI+0x4dc>)
 8002966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800296a:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<4);}
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a90      	ldr	r2, [pc, #576]	; (8002bb0 <EXTI+0x4e0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d106      	bne.n	8002982 <EXTI+0x2b2>
 8002974:	4b8d      	ldr	r3, [pc, #564]	; (8002bac <EXTI+0x4dc>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a8c      	ldr	r2, [pc, #560]	; (8002bac <EXTI+0x4dc>)
 800297a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800297e:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}

		break;
 8002980:	e231      	b.n	8002de6 <EXTI+0x716>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a8b      	ldr	r2, [pc, #556]	; (8002bb4 <EXTI+0x4e4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d106      	bne.n	8002998 <EXTI+0x2c8>
 800298a:	4b88      	ldr	r3, [pc, #544]	; (8002bac <EXTI+0x4dc>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a87      	ldr	r2, [pc, #540]	; (8002bac <EXTI+0x4dc>)
 8002990:	f043 0310 	orr.w	r3, r3, #16
 8002994:	60d3      	str	r3, [r2, #12]
		break;
 8002996:	e226      	b.n	8002de6 <EXTI+0x716>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a87      	ldr	r2, [pc, #540]	; (8002bb8 <EXTI+0x4e8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d106      	bne.n	80029ae <EXTI+0x2de>
 80029a0:	4b82      	ldr	r3, [pc, #520]	; (8002bac <EXTI+0x4dc>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a81      	ldr	r2, [pc, #516]	; (8002bac <EXTI+0x4dc>)
 80029a6:	f043 0320 	orr.w	r3, r3, #32
 80029aa:	60d3      	str	r3, [r2, #12]
		break;
 80029ac:	e21b      	b.n	8002de6 <EXTI+0x716>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a82      	ldr	r2, [pc, #520]	; (8002bbc <EXTI+0x4ec>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	f040 8217 	bne.w	8002de6 <EXTI+0x716>
 80029b8:	4b7c      	ldr	r3, [pc, #496]	; (8002bac <EXTI+0x4dc>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a7b      	ldr	r2, [pc, #492]	; (8002bac <EXTI+0x4dc>)
 80029be:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80029c2:	60d3      	str	r3, [r2, #12]
		break;
 80029c4:	e20f      	b.n	8002de6 <EXTI+0x716>
	case pin6:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<8);
 80029c6:	4b79      	ldr	r3, [pc, #484]	; (8002bac <EXTI+0x4dc>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	4a78      	ldr	r2, [pc, #480]	; (8002bac <EXTI+0x4dc>)
 80029cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029d0:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<8);}
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4a76      	ldr	r2, [pc, #472]	; (8002bb0 <EXTI+0x4e0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d106      	bne.n	80029e8 <EXTI+0x318>
 80029da:	4b74      	ldr	r3, [pc, #464]	; (8002bac <EXTI+0x4dc>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	4a73      	ldr	r2, [pc, #460]	; (8002bac <EXTI+0x4dc>)
 80029e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029e4:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}

		break;
 80029e6:	e200      	b.n	8002dea <EXTI+0x71a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a72      	ldr	r2, [pc, #456]	; (8002bb4 <EXTI+0x4e4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d106      	bne.n	80029fe <EXTI+0x32e>
 80029f0:	4b6e      	ldr	r3, [pc, #440]	; (8002bac <EXTI+0x4dc>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a6d      	ldr	r2, [pc, #436]	; (8002bac <EXTI+0x4dc>)
 80029f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fa:	60d3      	str	r3, [r2, #12]
		break;
 80029fc:	e1f5      	b.n	8002dea <EXTI+0x71a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4a6d      	ldr	r2, [pc, #436]	; (8002bb8 <EXTI+0x4e8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d106      	bne.n	8002a14 <EXTI+0x344>
 8002a06:	4b69      	ldr	r3, [pc, #420]	; (8002bac <EXTI+0x4dc>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	4a68      	ldr	r2, [pc, #416]	; (8002bac <EXTI+0x4dc>)
 8002a0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a10:	60d3      	str	r3, [r2, #12]
		break;
 8002a12:	e1ea      	b.n	8002dea <EXTI+0x71a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a69      	ldr	r2, [pc, #420]	; (8002bbc <EXTI+0x4ec>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	f040 81e6 	bne.w	8002dea <EXTI+0x71a>
 8002a1e:	4b63      	ldr	r3, [pc, #396]	; (8002bac <EXTI+0x4dc>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	4a62      	ldr	r2, [pc, #392]	; (8002bac <EXTI+0x4dc>)
 8002a24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a28:	60d3      	str	r3, [r2, #12]
		break;
 8002a2a:	e1de      	b.n	8002dea <EXTI+0x71a>
	case pin7:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<12);
 8002a2c:	4b5f      	ldr	r3, [pc, #380]	; (8002bac <EXTI+0x4dc>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a5e      	ldr	r2, [pc, #376]	; (8002bac <EXTI+0x4dc>)
 8002a32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a36:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<12);}
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a5d      	ldr	r2, [pc, #372]	; (8002bb0 <EXTI+0x4e0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d106      	bne.n	8002a4e <EXTI+0x37e>
 8002a40:	4b5a      	ldr	r3, [pc, #360]	; (8002bac <EXTI+0x4dc>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4a59      	ldr	r2, [pc, #356]	; (8002bac <EXTI+0x4dc>)
 8002a46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a4a:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}

		break;
 8002a4c:	e1cf      	b.n	8002dee <EXTI+0x71e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <EXTI+0x4e4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d106      	bne.n	8002a64 <EXTI+0x394>
 8002a56:	4b55      	ldr	r3, [pc, #340]	; (8002bac <EXTI+0x4dc>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	4a54      	ldr	r2, [pc, #336]	; (8002bac <EXTI+0x4dc>)
 8002a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a60:	60d3      	str	r3, [r2, #12]
		break;
 8002a62:	e1c4      	b.n	8002dee <EXTI+0x71e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4a54      	ldr	r2, [pc, #336]	; (8002bb8 <EXTI+0x4e8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d106      	bne.n	8002a7a <EXTI+0x3aa>
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <EXTI+0x4dc>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a4e      	ldr	r2, [pc, #312]	; (8002bac <EXTI+0x4dc>)
 8002a72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a76:	60d3      	str	r3, [r2, #12]
		break;
 8002a78:	e1b9      	b.n	8002dee <EXTI+0x71e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a4f      	ldr	r2, [pc, #316]	; (8002bbc <EXTI+0x4ec>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	f040 81b5 	bne.w	8002dee <EXTI+0x71e>
 8002a84:	4b49      	ldr	r3, [pc, #292]	; (8002bac <EXTI+0x4dc>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a48      	ldr	r2, [pc, #288]	; (8002bac <EXTI+0x4dc>)
 8002a8a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002a8e:	60d3      	str	r3, [r2, #12]
		break;
 8002a90:	e1ad      	b.n	8002dee <EXTI+0x71e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin8:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<0);
 8002a92:	4b46      	ldr	r3, [pc, #280]	; (8002bac <EXTI+0x4dc>)
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	4a45      	ldr	r2, [pc, #276]	; (8002bac <EXTI+0x4dc>)
 8002a98:	f023 030f 	bic.w	r3, r3, #15
 8002a9c:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<0);}
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a43      	ldr	r2, [pc, #268]	; (8002bb0 <EXTI+0x4e0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d106      	bne.n	8002ab4 <EXTI+0x3e4>
 8002aa6:	4b41      	ldr	r3, [pc, #260]	; (8002bac <EXTI+0x4dc>)
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	4a40      	ldr	r2, [pc, #256]	; (8002bac <EXTI+0x4dc>)
 8002aac:	f023 030f 	bic.w	r3, r3, #15
 8002ab0:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}

		break;
 8002ab2:	e19e      	b.n	8002df2 <EXTI+0x722>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a3f      	ldr	r2, [pc, #252]	; (8002bb4 <EXTI+0x4e4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d106      	bne.n	8002aca <EXTI+0x3fa>
 8002abc:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <EXTI+0x4dc>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	4a3a      	ldr	r2, [pc, #232]	; (8002bac <EXTI+0x4dc>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6113      	str	r3, [r2, #16]
		break;
 8002ac8:	e193      	b.n	8002df2 <EXTI+0x722>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a3a      	ldr	r2, [pc, #232]	; (8002bb8 <EXTI+0x4e8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d106      	bne.n	8002ae0 <EXTI+0x410>
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <EXTI+0x4dc>)
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	4a35      	ldr	r2, [pc, #212]	; (8002bac <EXTI+0x4dc>)
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	6113      	str	r3, [r2, #16]
		break;
 8002ade:	e188      	b.n	8002df2 <EXTI+0x722>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a36      	ldr	r2, [pc, #216]	; (8002bbc <EXTI+0x4ec>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	f040 8184 	bne.w	8002df2 <EXTI+0x722>
 8002aea:	4b30      	ldr	r3, [pc, #192]	; (8002bac <EXTI+0x4dc>)
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	4a2f      	ldr	r2, [pc, #188]	; (8002bac <EXTI+0x4dc>)
 8002af0:	f043 0303 	orr.w	r3, r3, #3
 8002af4:	6113      	str	r3, [r2, #16]
		break;
 8002af6:	e17c      	b.n	8002df2 <EXTI+0x722>
	case pin9:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<4);
 8002af8:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <EXTI+0x4dc>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	4a2b      	ldr	r2, [pc, #172]	; (8002bac <EXTI+0x4dc>)
 8002afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b02:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<4);}
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a2a      	ldr	r2, [pc, #168]	; (8002bb0 <EXTI+0x4e0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d106      	bne.n	8002b1a <EXTI+0x44a>
 8002b0c:	4b27      	ldr	r3, [pc, #156]	; (8002bac <EXTI+0x4dc>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	4a26      	ldr	r2, [pc, #152]	; (8002bac <EXTI+0x4dc>)
 8002b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b16:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}

		break;
 8002b18:	e16d      	b.n	8002df6 <EXTI+0x726>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a25      	ldr	r2, [pc, #148]	; (8002bb4 <EXTI+0x4e4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d106      	bne.n	8002b30 <EXTI+0x460>
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <EXTI+0x4dc>)
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	4a21      	ldr	r2, [pc, #132]	; (8002bac <EXTI+0x4dc>)
 8002b28:	f043 0310 	orr.w	r3, r3, #16
 8002b2c:	6113      	str	r3, [r2, #16]
		break;
 8002b2e:	e162      	b.n	8002df6 <EXTI+0x726>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <EXTI+0x4e8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d106      	bne.n	8002b46 <EXTI+0x476>
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <EXTI+0x4dc>)
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <EXTI+0x4dc>)
 8002b3e:	f043 0320 	orr.w	r3, r3, #32
 8002b42:	6113      	str	r3, [r2, #16]
		break;
 8002b44:	e157      	b.n	8002df6 <EXTI+0x726>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4a1c      	ldr	r2, [pc, #112]	; (8002bbc <EXTI+0x4ec>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	f040 8153 	bne.w	8002df6 <EXTI+0x726>
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <EXTI+0x4dc>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <EXTI+0x4dc>)
 8002b56:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002b5a:	6113      	str	r3, [r2, #16]
		break;
 8002b5c:	e14b      	b.n	8002df6 <EXTI+0x726>
	case pin10:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<8);
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <EXTI+0x4dc>)
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	4a12      	ldr	r2, [pc, #72]	; (8002bac <EXTI+0x4dc>)
 8002b64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b68:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<8);}
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <EXTI+0x4e0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d106      	bne.n	8002b80 <EXTI+0x4b0>
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <EXTI+0x4dc>)
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <EXTI+0x4dc>)
 8002b78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b7c:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}

		break;
 8002b7e:	e13c      	b.n	8002dfa <EXTI+0x72a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <EXTI+0x4e4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d106      	bne.n	8002b96 <EXTI+0x4c6>
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <EXTI+0x4dc>)
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <EXTI+0x4dc>)
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b92:	6113      	str	r3, [r2, #16]
		break;
 8002b94:	e131      	b.n	8002dfa <EXTI+0x72a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a07      	ldr	r2, [pc, #28]	; (8002bb8 <EXTI+0x4e8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d110      	bne.n	8002bc0 <EXTI+0x4f0>
 8002b9e:	4b03      	ldr	r3, [pc, #12]	; (8002bac <EXTI+0x4dc>)
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	4a02      	ldr	r2, [pc, #8]	; (8002bac <EXTI+0x4dc>)
 8002ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba8:	6113      	str	r3, [r2, #16]
		break;
 8002baa:	e126      	b.n	8002dfa <EXTI+0x72a>
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	40010800 	.word	0x40010800
 8002bb4:	40010c00 	.word	0x40010c00
 8002bb8:	40011000 	.word	0x40011000
 8002bbc:	40011400 	.word	0x40011400
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a93      	ldr	r2, [pc, #588]	; (8002e10 <EXTI+0x740>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	f040 8118 	bne.w	8002dfa <EXTI+0x72a>
 8002bca:	4b92      	ldr	r3, [pc, #584]	; (8002e14 <EXTI+0x744>)
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	4a91      	ldr	r2, [pc, #580]	; (8002e14 <EXTI+0x744>)
 8002bd0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002bd4:	6113      	str	r3, [r2, #16]
		break;
 8002bd6:	e110      	b.n	8002dfa <EXTI+0x72a>
	case pin11:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<12);
 8002bd8:	4b8e      	ldr	r3, [pc, #568]	; (8002e14 <EXTI+0x744>)
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	4a8d      	ldr	r2, [pc, #564]	; (8002e14 <EXTI+0x744>)
 8002bde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002be2:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<12);}
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a8c      	ldr	r2, [pc, #560]	; (8002e18 <EXTI+0x748>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d106      	bne.n	8002bfa <EXTI+0x52a>
 8002bec:	4b89      	ldr	r3, [pc, #548]	; (8002e14 <EXTI+0x744>)
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	4a88      	ldr	r2, [pc, #544]	; (8002e14 <EXTI+0x744>)
 8002bf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bf6:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}

		break;
 8002bf8:	e101      	b.n	8002dfe <EXTI+0x72e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a87      	ldr	r2, [pc, #540]	; (8002e1c <EXTI+0x74c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d106      	bne.n	8002c10 <EXTI+0x540>
 8002c02:	4b84      	ldr	r3, [pc, #528]	; (8002e14 <EXTI+0x744>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	4a83      	ldr	r2, [pc, #524]	; (8002e14 <EXTI+0x744>)
 8002c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c0c:	6113      	str	r3, [r2, #16]
		break;
 8002c0e:	e0f6      	b.n	8002dfe <EXTI+0x72e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a83      	ldr	r2, [pc, #524]	; (8002e20 <EXTI+0x750>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d106      	bne.n	8002c26 <EXTI+0x556>
 8002c18:	4b7e      	ldr	r3, [pc, #504]	; (8002e14 <EXTI+0x744>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	4a7d      	ldr	r2, [pc, #500]	; (8002e14 <EXTI+0x744>)
 8002c1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c22:	6113      	str	r3, [r2, #16]
		break;
 8002c24:	e0eb      	b.n	8002dfe <EXTI+0x72e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a79      	ldr	r2, [pc, #484]	; (8002e10 <EXTI+0x740>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	f040 80e7 	bne.w	8002dfe <EXTI+0x72e>
 8002c30:	4b78      	ldr	r3, [pc, #480]	; (8002e14 <EXTI+0x744>)
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	4a77      	ldr	r2, [pc, #476]	; (8002e14 <EXTI+0x744>)
 8002c36:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002c3a:	6113      	str	r3, [r2, #16]
		break;
 8002c3c:	e0df      	b.n	8002dfe <EXTI+0x72e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin12:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<0);
 8002c3e:	4b75      	ldr	r3, [pc, #468]	; (8002e14 <EXTI+0x744>)
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4a74      	ldr	r2, [pc, #464]	; (8002e14 <EXTI+0x744>)
 8002c44:	f023 030f 	bic.w	r3, r3, #15
 8002c48:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<0);}
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4a72      	ldr	r2, [pc, #456]	; (8002e18 <EXTI+0x748>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d106      	bne.n	8002c60 <EXTI+0x590>
 8002c52:	4b70      	ldr	r3, [pc, #448]	; (8002e14 <EXTI+0x744>)
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	4a6f      	ldr	r2, [pc, #444]	; (8002e14 <EXTI+0x744>)
 8002c58:	f023 030f 	bic.w	r3, r3, #15
 8002c5c:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}

		break;
 8002c5e:	e0d0      	b.n	8002e02 <EXTI+0x732>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a6e      	ldr	r2, [pc, #440]	; (8002e1c <EXTI+0x74c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d106      	bne.n	8002c76 <EXTI+0x5a6>
 8002c68:	4b6a      	ldr	r3, [pc, #424]	; (8002e14 <EXTI+0x744>)
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	4a69      	ldr	r2, [pc, #420]	; (8002e14 <EXTI+0x744>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6153      	str	r3, [r2, #20]
		break;
 8002c74:	e0c5      	b.n	8002e02 <EXTI+0x732>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a69      	ldr	r2, [pc, #420]	; (8002e20 <EXTI+0x750>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d106      	bne.n	8002c8c <EXTI+0x5bc>
 8002c7e:	4b65      	ldr	r3, [pc, #404]	; (8002e14 <EXTI+0x744>)
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	4a64      	ldr	r2, [pc, #400]	; (8002e14 <EXTI+0x744>)
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	6153      	str	r3, [r2, #20]
		break;
 8002c8a:	e0ba      	b.n	8002e02 <EXTI+0x732>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a60      	ldr	r2, [pc, #384]	; (8002e10 <EXTI+0x740>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	f040 80b6 	bne.w	8002e02 <EXTI+0x732>
 8002c96:	4b5f      	ldr	r3, [pc, #380]	; (8002e14 <EXTI+0x744>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4a5e      	ldr	r2, [pc, #376]	; (8002e14 <EXTI+0x744>)
 8002c9c:	f043 0303 	orr.w	r3, r3, #3
 8002ca0:	6153      	str	r3, [r2, #20]
		break;
 8002ca2:	e0ae      	b.n	8002e02 <EXTI+0x732>
	case pin13:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<4);
 8002ca4:	4b5b      	ldr	r3, [pc, #364]	; (8002e14 <EXTI+0x744>)
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	4a5a      	ldr	r2, [pc, #360]	; (8002e14 <EXTI+0x744>)
 8002caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cae:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<4);}
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4a59      	ldr	r2, [pc, #356]	; (8002e18 <EXTI+0x748>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d106      	bne.n	8002cc6 <EXTI+0x5f6>
 8002cb8:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <EXTI+0x744>)
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	4a55      	ldr	r2, [pc, #340]	; (8002e14 <EXTI+0x744>)
 8002cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cc2:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}

		break;
 8002cc4:	e09f      	b.n	8002e06 <EXTI+0x736>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a54      	ldr	r2, [pc, #336]	; (8002e1c <EXTI+0x74c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d106      	bne.n	8002cdc <EXTI+0x60c>
 8002cce:	4b51      	ldr	r3, [pc, #324]	; (8002e14 <EXTI+0x744>)
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	4a50      	ldr	r2, [pc, #320]	; (8002e14 <EXTI+0x744>)
 8002cd4:	f043 0310 	orr.w	r3, r3, #16
 8002cd8:	6153      	str	r3, [r2, #20]
		break;
 8002cda:	e094      	b.n	8002e06 <EXTI+0x736>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a50      	ldr	r2, [pc, #320]	; (8002e20 <EXTI+0x750>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d106      	bne.n	8002cf2 <EXTI+0x622>
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	; (8002e14 <EXTI+0x744>)
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	4a4a      	ldr	r2, [pc, #296]	; (8002e14 <EXTI+0x744>)
 8002cea:	f043 0320 	orr.w	r3, r3, #32
 8002cee:	6153      	str	r3, [r2, #20]
		break;
 8002cf0:	e089      	b.n	8002e06 <EXTI+0x736>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a46      	ldr	r2, [pc, #280]	; (8002e10 <EXTI+0x740>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	f040 8085 	bne.w	8002e06 <EXTI+0x736>
 8002cfc:	4b45      	ldr	r3, [pc, #276]	; (8002e14 <EXTI+0x744>)
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	4a44      	ldr	r2, [pc, #272]	; (8002e14 <EXTI+0x744>)
 8002d02:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002d06:	6153      	str	r3, [r2, #20]
		break;
 8002d08:	e07d      	b.n	8002e06 <EXTI+0x736>
	case pin14:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<8);
 8002d0a:	4b42      	ldr	r3, [pc, #264]	; (8002e14 <EXTI+0x744>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4a41      	ldr	r2, [pc, #260]	; (8002e14 <EXTI+0x744>)
 8002d10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d14:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<8);}
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4a3f      	ldr	r2, [pc, #252]	; (8002e18 <EXTI+0x748>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d106      	bne.n	8002d2c <EXTI+0x65c>
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <EXTI+0x744>)
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	4a3c      	ldr	r2, [pc, #240]	; (8002e14 <EXTI+0x744>)
 8002d24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d28:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}

		break;
 8002d2a:	e06e      	b.n	8002e0a <EXTI+0x73a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a3b      	ldr	r2, [pc, #236]	; (8002e1c <EXTI+0x74c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d106      	bne.n	8002d42 <EXTI+0x672>
 8002d34:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <EXTI+0x744>)
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	4a36      	ldr	r2, [pc, #216]	; (8002e14 <EXTI+0x744>)
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3e:	6153      	str	r3, [r2, #20]
		break;
 8002d40:	e063      	b.n	8002e0a <EXTI+0x73a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a36      	ldr	r2, [pc, #216]	; (8002e20 <EXTI+0x750>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d106      	bne.n	8002d58 <EXTI+0x688>
 8002d4a:	4b32      	ldr	r3, [pc, #200]	; (8002e14 <EXTI+0x744>)
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	4a31      	ldr	r2, [pc, #196]	; (8002e14 <EXTI+0x744>)
 8002d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d54:	6153      	str	r3, [r2, #20]
		break;
 8002d56:	e058      	b.n	8002e0a <EXTI+0x73a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4a2d      	ldr	r2, [pc, #180]	; (8002e10 <EXTI+0x740>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d154      	bne.n	8002e0a <EXTI+0x73a>
 8002d60:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <EXTI+0x744>)
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	4a2b      	ldr	r2, [pc, #172]	; (8002e14 <EXTI+0x744>)
 8002d66:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002d6a:	6153      	str	r3, [r2, #20]
		break;
 8002d6c:	e04d      	b.n	8002e0a <EXTI+0x73a>
	case pin15:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<12);
 8002d6e:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <EXTI+0x744>)
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4a28      	ldr	r2, [pc, #160]	; (8002e14 <EXTI+0x744>)
 8002d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d78:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<12);}
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4a26      	ldr	r2, [pc, #152]	; (8002e18 <EXTI+0x748>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d106      	bne.n	8002d90 <EXTI+0x6c0>
 8002d82:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <EXTI+0x744>)
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	4a23      	ldr	r2, [pc, #140]	; (8002e14 <EXTI+0x744>)
 8002d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d8c:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}

		break;
 8002d8e:	e049      	b.n	8002e24 <EXTI+0x754>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a22      	ldr	r2, [pc, #136]	; (8002e1c <EXTI+0x74c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d106      	bne.n	8002da6 <EXTI+0x6d6>
 8002d98:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <EXTI+0x744>)
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <EXTI+0x744>)
 8002d9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da2:	6153      	str	r3, [r2, #20]
		break;
 8002da4:	e03e      	b.n	8002e24 <EXTI+0x754>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <EXTI+0x750>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d106      	bne.n	8002dbc <EXTI+0x6ec>
 8002dae:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <EXTI+0x744>)
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	4a18      	ldr	r2, [pc, #96]	; (8002e14 <EXTI+0x744>)
 8002db4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002db8:	6153      	str	r3, [r2, #20]
		break;
 8002dba:	e033      	b.n	8002e24 <EXTI+0x754>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <EXTI+0x740>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d12f      	bne.n	8002e24 <EXTI+0x754>
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <EXTI+0x744>)
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <EXTI+0x744>)
 8002dca:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002dce:	6153      	str	r3, [r2, #20]
		break;
 8002dd0:	e028      	b.n	8002e24 <EXTI+0x754>
		break;
 8002dd2:	bf00      	nop
 8002dd4:	e027      	b.n	8002e26 <EXTI+0x756>
		break;
 8002dd6:	bf00      	nop
 8002dd8:	e025      	b.n	8002e26 <EXTI+0x756>
		break;
 8002dda:	bf00      	nop
 8002ddc:	e023      	b.n	8002e26 <EXTI+0x756>
		break;
 8002dde:	bf00      	nop
 8002de0:	e021      	b.n	8002e26 <EXTI+0x756>
		break;
 8002de2:	bf00      	nop
 8002de4:	e01f      	b.n	8002e26 <EXTI+0x756>
		break;
 8002de6:	bf00      	nop
 8002de8:	e01d      	b.n	8002e26 <EXTI+0x756>
		break;
 8002dea:	bf00      	nop
 8002dec:	e01b      	b.n	8002e26 <EXTI+0x756>
		break;
 8002dee:	bf00      	nop
 8002df0:	e019      	b.n	8002e26 <EXTI+0x756>
		break;
 8002df2:	bf00      	nop
 8002df4:	e017      	b.n	8002e26 <EXTI+0x756>
		break;
 8002df6:	bf00      	nop
 8002df8:	e015      	b.n	8002e26 <EXTI+0x756>
		break;
 8002dfa:	bf00      	nop
 8002dfc:	e013      	b.n	8002e26 <EXTI+0x756>
		break;
 8002dfe:	bf00      	nop
 8002e00:	e011      	b.n	8002e26 <EXTI+0x756>
		break;
 8002e02:	bf00      	nop
 8002e04:	e00f      	b.n	8002e26 <EXTI+0x756>
		break;
 8002e06:	bf00      	nop
 8002e08:	e00d      	b.n	8002e26 <EXTI+0x756>
		break;
 8002e0a:	bf00      	nop
 8002e0c:	e00b      	b.n	8002e26 <EXTI+0x756>
 8002e0e:	bf00      	nop
 8002e10:	40011400 	.word	0x40011400
 8002e14:	40010000 	.word	0x40010000
 8002e18:	40010800 	.word	0x40010800
 8002e1c:	40010c00 	.word	0x40010c00
 8002e20:	40011000 	.word	0x40011000
		break;
 8002e24:	bf00      	nop
	}
	//================================================
	//3- Update Rising or Falling Register
	EXIT->EXTI_RTSR &=~(1<<pin);
 8002e26:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <EXTI+0x898>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	897a      	ldrh	r2, [r7, #10]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e32:	43d2      	mvns	r2, r2
 8002e34:	4611      	mov	r1, r2
 8002e36:	4a4c      	ldr	r2, [pc, #304]	; (8002f68 <EXTI+0x898>)
 8002e38:	400b      	ands	r3, r1
 8002e3a:	6093      	str	r3, [r2, #8]
	EXIT->EXTI_FTSR &=~(1<<pin);
 8002e3c:	4b4a      	ldr	r3, [pc, #296]	; (8002f68 <EXTI+0x898>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	897a      	ldrh	r2, [r7, #10]
 8002e42:	2101      	movs	r1, #1
 8002e44:	fa01 f202 	lsl.w	r2, r1, r2
 8002e48:	43d2      	mvns	r2, r2
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4a46      	ldr	r2, [pc, #280]	; (8002f68 <EXTI+0x898>)
 8002e4e:	400b      	ands	r3, r1
 8002e50:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 8002e52:	893b      	ldrh	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <EXTI+0x79e>
		EXIT->EXTI_RTSR |= (1<<pin);
 8002e58:	4b43      	ldr	r3, [pc, #268]	; (8002f68 <EXTI+0x898>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	897a      	ldrh	r2, [r7, #10]
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	4611      	mov	r1, r2
 8002e66:	4a40      	ldr	r2, [pc, #256]	; (8002f68 <EXTI+0x898>)
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	6093      	str	r3, [r2, #8]
 8002e6c:	e021      	b.n	8002eb2 <EXTI+0x7e2>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 8002e6e:	893b      	ldrh	r3, [r7, #8]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d10a      	bne.n	8002e8a <EXTI+0x7ba>
		EXIT->EXTI_FTSR |= (1<<pin);
 8002e74:	4b3c      	ldr	r3, [pc, #240]	; (8002f68 <EXTI+0x898>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	897a      	ldrh	r2, [r7, #10]
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e80:	4611      	mov	r1, r2
 8002e82:	4a39      	ldr	r2, [pc, #228]	; (8002f68 <EXTI+0x898>)
 8002e84:	430b      	orrs	r3, r1
 8002e86:	60d3      	str	r3, [r2, #12]
 8002e88:	e013      	b.n	8002eb2 <EXTI+0x7e2>
	}
	else{
		EXIT->EXTI_RTSR |= (1<<pin);
 8002e8a:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <EXTI+0x898>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	897a      	ldrh	r2, [r7, #10]
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	4611      	mov	r1, r2
 8002e98:	4a33      	ldr	r2, [pc, #204]	; (8002f68 <EXTI+0x898>)
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	6093      	str	r3, [r2, #8]
		EXIT->EXTI_FTSR |= (1<<pin);
 8002e9e:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <EXTI+0x898>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	897a      	ldrh	r2, [r7, #10]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4a2e      	ldr	r2, [pc, #184]	; (8002f68 <EXTI+0x898>)
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	60d3      	str	r3, [r2, #12]
	}


	//4- Update IRQ Handling callback
	ARR_INTERRUPT_TRACK[interrupt_numpers].pin=pin;
 8002eb2:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <EXTI+0x89c>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	897b      	ldrh	r3, [r7, #10]
 8002eba:	b2d9      	uxtb	r1, r3
 8002ebc:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <EXTI+0x8a0>)
 8002ebe:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
	if(PORTx==GPIOA)     {ARR_INTERRUPT_TRACK[interrupt_numpers].port=1;}
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a2b      	ldr	r2, [pc, #172]	; (8002f74 <EXTI+0x8a4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d107      	bne.n	8002eda <EXTI+0x80a>
 8002eca:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <EXTI+0x89c>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <EXTI+0x8a0>)
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	705a      	strb	r2, [r3, #1]
 8002ed8:	e022      	b.n	8002f20 <EXTI+0x850>
	else if(PORTx==GPIOB){ARR_INTERRUPT_TRACK[interrupt_numpers].port=2;}
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a26      	ldr	r2, [pc, #152]	; (8002f78 <EXTI+0x8a8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d107      	bne.n	8002ef2 <EXTI+0x822>
 8002ee2:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <EXTI+0x89c>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <EXTI+0x8a0>)
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	2202      	movs	r2, #2
 8002eee:	705a      	strb	r2, [r3, #1]
 8002ef0:	e016      	b.n	8002f20 <EXTI+0x850>
	else if(PORTx==GPIOC){ARR_INTERRUPT_TRACK[interrupt_numpers].port=3;}
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a21      	ldr	r2, [pc, #132]	; (8002f7c <EXTI+0x8ac>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d107      	bne.n	8002f0a <EXTI+0x83a>
 8002efa:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <EXTI+0x89c>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <EXTI+0x8a0>)
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	2203      	movs	r2, #3
 8002f06:	705a      	strb	r2, [r3, #1]
 8002f08:	e00a      	b.n	8002f20 <EXTI+0x850>
	else if(PORTx==GPIOD){ARR_INTERRUPT_TRACK[interrupt_numpers].port=4;}
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <EXTI+0x8b0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d106      	bne.n	8002f20 <EXTI+0x850>
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <EXTI+0x89c>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <EXTI+0x8a0>)
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	705a      	strb	r2, [r3, #1]


	GP_IRQ_Callback[interrupt_numpers++] =(void(*)(interrupt_data* isr_data,uint8_t interupt_num))function_addres;
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <EXTI+0x89c>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	b2d1      	uxtb	r1, r2
 8002f28:	4a10      	ldr	r2, [pc, #64]	; (8002f6c <EXTI+0x89c>)
 8002f2a:	7011      	strb	r1, [r2, #0]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <EXTI+0x8b4>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(interrupt_numpers>=15){
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <EXTI+0x89c>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b0e      	cmp	r3, #14
 8002f3c:	d902      	bls.n	8002f44 <EXTI+0x874>
		interrupt_numpers=0;
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <EXTI+0x89c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
	}

	EXIT->EXTI_IMR |=(1<<pin);
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <EXTI+0x898>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	897a      	ldrh	r2, [r7, #10]
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f50:	4611      	mov	r1, r2
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <EXTI+0x898>)
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 8002f58:	897b      	ldrh	r3, [r7, #10]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fb52 	bl	8002604 <Enable_NVIC>
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40010400 	.word	0x40010400
 8002f6c:	20000226 	.word	0x20000226
 8002f70:	200002bc 	.word	0x200002bc
 8002f74:	40010800 	.word	0x40010800
 8002f78:	40010c00 	.word	0x40010c00
 8002f7c:	40011000 	.word	0x40011000
 8002f80:	40011400 	.word	0x40011400
 8002f84:	20000280 	.word	0x20000280

08002f88 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <EXTI0_IRQHandler+0x20>)
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <EXTI0_IRQHandler+0x20>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0](ARR_INTERRUPT_TRACK,0);
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <EXTI0_IRQHandler+0x24>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4804      	ldr	r0, [pc, #16]	; (8002fb0 <EXTI0_IRQHandler+0x28>)
 8002fa0:	4798      	blx	r3
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40010400 	.word	0x40010400
 8002fac:	20000280 	.word	0x20000280
 8002fb0:	200002bc 	.word	0x200002bc

08002fb4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <EXTI1_IRQHandler+0x20>)
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <EXTI1_IRQHandler+0x20>)
 8002fbe:	f043 0302 	orr.w	r3, r3, #2
 8002fc2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1](ARR_INTERRUPT_TRACK,1);
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <EXTI1_IRQHandler+0x24>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2101      	movs	r1, #1
 8002fca:	4804      	ldr	r0, [pc, #16]	; (8002fdc <EXTI1_IRQHandler+0x28>)
 8002fcc:	4798      	blx	r3

}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40010400 	.word	0x40010400
 8002fd8:	20000280 	.word	0x20000280
 8002fdc:	200002bc 	.word	0x200002bc

08002fe0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <EXTI2_IRQHandler+0x20>)
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	4a05      	ldr	r2, [pc, #20]	; (8003000 <EXTI2_IRQHandler+0x20>)
 8002fea:	f043 0304 	orr.w	r3, r3, #4
 8002fee:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2](ARR_INTERRUPT_TRACK,2);
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <EXTI2_IRQHandler+0x24>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	4804      	ldr	r0, [pc, #16]	; (8003008 <EXTI2_IRQHandler+0x28>)
 8002ff8:	4798      	blx	r3
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40010400 	.word	0x40010400
 8003004:	20000280 	.word	0x20000280
 8003008:	200002bc 	.word	0x200002bc

0800300c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <EXTI3_IRQHandler+0x20>)
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	4a05      	ldr	r2, [pc, #20]	; (800302c <EXTI3_IRQHandler+0x20>)
 8003016:	f043 0308 	orr.w	r3, r3, #8
 800301a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3](ARR_INTERRUPT_TRACK,3);
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <EXTI3_IRQHandler+0x24>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2103      	movs	r1, #3
 8003022:	4804      	ldr	r0, [pc, #16]	; (8003034 <EXTI3_IRQHandler+0x28>)
 8003024:	4798      	blx	r3
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40010400 	.word	0x40010400
 8003030:	20000280 	.word	0x20000280
 8003034:	200002bc 	.word	0x200002bc

08003038 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <EXTI4_IRQHandler+0x20>)
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	4a05      	ldr	r2, [pc, #20]	; (8003058 <EXTI4_IRQHandler+0x20>)
 8003042:	f043 0310 	orr.w	r3, r3, #16
 8003046:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4](ARR_INTERRUPT_TRACK,4);
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <EXTI4_IRQHandler+0x24>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2104      	movs	r1, #4
 800304e:	4804      	ldr	r0, [pc, #16]	; (8003060 <EXTI4_IRQHandler+0x28>)
 8003050:	4798      	blx	r3
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40010400 	.word	0x40010400
 800305c:	20000280 	.word	0x20000280
 8003060:	200002bc 	.word	0x200002bc

08003064 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5](ARR_INTERRUPT_TRACK,5);  }
 8003068:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <EXTI9_5_IRQHandler+0x26>
 8003074:	4b28      	ldr	r3, [pc, #160]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	4a27      	ldr	r2, [pc, #156]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 800307a:	f043 0320 	orr.w	r3, r3, #32
 800307e:	6153      	str	r3, [r2, #20]
 8003080:	4b26      	ldr	r3, [pc, #152]	; (800311c <EXTI9_5_IRQHandler+0xb8>)
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	2105      	movs	r1, #5
 8003086:	4826      	ldr	r0, [pc, #152]	; (8003120 <EXTI9_5_IRQHandler+0xbc>)
 8003088:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6](ARR_INTERRUPT_TRACK,6);  }
 800308a:	4b23      	ldr	r3, [pc, #140]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <EXTI9_5_IRQHandler+0x48>
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	4a1f      	ldr	r2, [pc, #124]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 800309c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030a0:	6153      	str	r3, [r2, #20]
 80030a2:	4b1e      	ldr	r3, [pc, #120]	; (800311c <EXTI9_5_IRQHandler+0xb8>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2106      	movs	r1, #6
 80030a8:	481d      	ldr	r0, [pc, #116]	; (8003120 <EXTI9_5_IRQHandler+0xbc>)
 80030aa:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7](ARR_INTERRUPT_TRACK,7);  }
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <EXTI9_5_IRQHandler+0x6a>
 80030b8:	4b17      	ldr	r3, [pc, #92]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	4a16      	ldr	r2, [pc, #88]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 80030be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c2:	6153      	str	r3, [r2, #20]
 80030c4:	4b15      	ldr	r3, [pc, #84]	; (800311c <EXTI9_5_IRQHandler+0xb8>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	2107      	movs	r1, #7
 80030ca:	4815      	ldr	r0, [pc, #84]	; (8003120 <EXTI9_5_IRQHandler+0xbc>)
 80030cc:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8](ARR_INTERRUPT_TRACK,8);  }
 80030ce:	4b12      	ldr	r3, [pc, #72]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <EXTI9_5_IRQHandler+0x8c>
 80030da:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	4a0e      	ldr	r2, [pc, #56]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 80030e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e4:	6153      	str	r3, [r2, #20]
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <EXTI9_5_IRQHandler+0xb8>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	2108      	movs	r1, #8
 80030ec:	480c      	ldr	r0, [pc, #48]	; (8003120 <EXTI9_5_IRQHandler+0xbc>)
 80030ee:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9](ARR_INTERRUPT_TRACK,9);  }
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <EXTI9_5_IRQHandler+0xae>
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	4a05      	ldr	r2, [pc, #20]	; (8003118 <EXTI9_5_IRQHandler+0xb4>)
 8003102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003106:	6153      	str	r3, [r2, #20]
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <EXTI9_5_IRQHandler+0xb8>)
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	2109      	movs	r1, #9
 800310e:	4804      	ldr	r0, [pc, #16]	; (8003120 <EXTI9_5_IRQHandler+0xbc>)
 8003110:	4798      	blx	r3
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40010400 	.word	0x40010400
 800311c:	20000280 	.word	0x20000280
 8003120:	200002bc 	.word	0x200002bc

08003124 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10](ARR_INTERRUPT_TRACK,10);  }
 8003128:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <EXTI15_10_IRQHandler+0x26>
 8003134:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 800313a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800313e:	6153      	str	r3, [r2, #20]
 8003140:	4b2e      	ldr	r3, [pc, #184]	; (80031fc <EXTI15_10_IRQHandler+0xd8>)
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	210a      	movs	r1, #10
 8003146:	482e      	ldr	r0, [pc, #184]	; (8003200 <EXTI15_10_IRQHandler+0xdc>)
 8003148:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11](ARR_INTERRUPT_TRACK,11);  }
 800314a:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <EXTI15_10_IRQHandler+0x48>
 8003156:	4b28      	ldr	r3, [pc, #160]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 800315c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003160:	6153      	str	r3, [r2, #20]
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <EXTI15_10_IRQHandler+0xd8>)
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	210b      	movs	r1, #11
 8003168:	4825      	ldr	r0, [pc, #148]	; (8003200 <EXTI15_10_IRQHandler+0xdc>)
 800316a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12](ARR_INTERRUPT_TRACK,12);  }
 800316c:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <EXTI15_10_IRQHandler+0x6a>
 8003178:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	4a1e      	ldr	r2, [pc, #120]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 800317e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003182:	6153      	str	r3, [r2, #20]
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <EXTI15_10_IRQHandler+0xd8>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	210c      	movs	r1, #12
 800318a:	481d      	ldr	r0, [pc, #116]	; (8003200 <EXTI15_10_IRQHandler+0xdc>)
 800318c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13](ARR_INTERRUPT_TRACK,13);  }
 800318e:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <EXTI15_10_IRQHandler+0x8c>
 800319a:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4a16      	ldr	r2, [pc, #88]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 80031a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031a4:	6153      	str	r3, [r2, #20]
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <EXTI15_10_IRQHandler+0xd8>)
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	210d      	movs	r1, #13
 80031ac:	4814      	ldr	r0, [pc, #80]	; (8003200 <EXTI15_10_IRQHandler+0xdc>)
 80031ae:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14](ARR_INTERRUPT_TRACK,14);  }
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <EXTI15_10_IRQHandler+0xae>
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	4a0d      	ldr	r2, [pc, #52]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 80031c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c6:	6153      	str	r3, [r2, #20]
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <EXTI15_10_IRQHandler+0xd8>)
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	210e      	movs	r1, #14
 80031ce:	480c      	ldr	r0, [pc, #48]	; (8003200 <EXTI15_10_IRQHandler+0xdc>)
 80031d0:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15](ARR_INTERRUPT_TRACK,15);  }
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <EXTI15_10_IRQHandler+0xd0>
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <EXTI15_10_IRQHandler+0xd4>)
 80031e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e8:	6153      	str	r3, [r2, #20]
 80031ea:	4b04      	ldr	r3, [pc, #16]	; (80031fc <EXTI15_10_IRQHandler+0xd8>)
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	210f      	movs	r1, #15
 80031f0:	4803      	ldr	r0, [pc, #12]	; (8003200 <EXTI15_10_IRQHandler+0xdc>)
 80031f2:	4798      	blx	r3

}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40010400 	.word	0x40010400
 80031fc:	20000280 	.word	0x20000280
 8003200:	200002bc 	.word	0x200002bc

08003204 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
	//slave only todo
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
	//slave only todo
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <USART_INIT>:
//===============================================================
void send_string (){

}
//===============================================================
void USART_INIT(USART_typeDef* USARTx,uint32_t mode,uint32_t word_length,uint32_t stop_bits,uint32_t baud_rate,uint32_t parity,uint32_t CLCK){
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]

	if(USARTx ==USART1){
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a55      	ldr	r2, [pc, #340]	; (8003384 <USART_INIT+0x168>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d11f      	bne.n	8003272 <USART_INIT+0x56>
		USART1_Clock_Enable();
 8003232:	4b55      	ldr	r3, [pc, #340]	; (8003388 <USART_INIT+0x16c>)
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	4a54      	ldr	r2, [pc, #336]	; (8003388 <USART_INIT+0x16c>)
 8003238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800323c:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();
 800323e:	4b52      	ldr	r3, [pc, #328]	; (8003388 <USART_INIT+0x16c>)
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	4a51      	ldr	r2, [pc, #324]	; (8003388 <USART_INIT+0x16c>)
 8003244:	f043 0304 	orr.w	r3, r3, #4
 8003248:	6193      	str	r3, [r2, #24]
		NVIC_USART1_interrupt_Enable;
 800324a:	4b50      	ldr	r3, [pc, #320]	; (800338c <USART_INIT+0x170>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a4f      	ldr	r2, [pc, #316]	; (800338c <USART_INIT+0x170>)
 8003250:	f043 0320 	orr.w	r3, r3, #32
 8003254:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin9,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8003256:	2209      	movs	r2, #9
 8003258:	2109      	movs	r1, #9
 800325a:	484d      	ldr	r0, [pc, #308]	; (8003390 <USART_INIT+0x174>)
 800325c:	f7fe fbcc 	bl	80019f8 <pinmode>
		//RX
		pinmode(GPIOA, pin10,GPIO_MODE_INTPUT_AF);
 8003260:	2204      	movs	r2, #4
 8003262:	210a      	movs	r1, #10
 8003264:	484a      	ldr	r0, [pc, #296]	; (8003390 <USART_INIT+0x174>)
 8003266:	f7fe fbc7 	bl	80019f8 <pinmode>
		arr[0]=USART1;
 800326a:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <USART_INIT+0x178>)
 800326c:	4a45      	ldr	r2, [pc, #276]	; (8003384 <USART_INIT+0x168>)
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e042      	b.n	80032f8 <USART_INIT+0xdc>
	}
	else if(USARTx ==USART2){
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a48      	ldr	r2, [pc, #288]	; (8003398 <USART_INIT+0x17c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d11f      	bne.n	80032ba <USART_INIT+0x9e>
		USART2_Clock_Enable();
 800327a:	4b43      	ldr	r3, [pc, #268]	; (8003388 <USART_INIT+0x16c>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4a42      	ldr	r2, [pc, #264]	; (8003388 <USART_INIT+0x16c>)
 8003280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003284:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();
 8003286:	4b40      	ldr	r3, [pc, #256]	; (8003388 <USART_INIT+0x16c>)
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	4a3f      	ldr	r2, [pc, #252]	; (8003388 <USART_INIT+0x16c>)
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	6193      	str	r3, [r2, #24]
		NVIC_USART2_interrupt_Enable;
 8003292:	4b3e      	ldr	r3, [pc, #248]	; (800338c <USART_INIT+0x170>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3d      	ldr	r2, [pc, #244]	; (800338c <USART_INIT+0x170>)
 8003298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800329c:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin2,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 800329e:	2209      	movs	r2, #9
 80032a0:	2102      	movs	r1, #2
 80032a2:	483b      	ldr	r0, [pc, #236]	; (8003390 <USART_INIT+0x174>)
 80032a4:	f7fe fba8 	bl	80019f8 <pinmode>
		//RX
		pinmode(GPIOA, pin3,GPIO_MODE_INTPUT_AF);
 80032a8:	2204      	movs	r2, #4
 80032aa:	2103      	movs	r1, #3
 80032ac:	4838      	ldr	r0, [pc, #224]	; (8003390 <USART_INIT+0x174>)
 80032ae:	f7fe fba3 	bl	80019f8 <pinmode>
		arr[1]=USART2;
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <USART_INIT+0x178>)
 80032b4:	4a38      	ldr	r2, [pc, #224]	; (8003398 <USART_INIT+0x17c>)
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	e01e      	b.n	80032f8 <USART_INIT+0xdc>
	}
	else{
		USART3_Clock_Enable();
 80032ba:	4b33      	ldr	r3, [pc, #204]	; (8003388 <USART_INIT+0x16c>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	4a32      	ldr	r2, [pc, #200]	; (8003388 <USART_INIT+0x16c>)
 80032c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c4:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 80032c6:	4b30      	ldr	r3, [pc, #192]	; (8003388 <USART_INIT+0x16c>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	4a2f      	ldr	r2, [pc, #188]	; (8003388 <USART_INIT+0x16c>)
 80032cc:	f043 0308 	orr.w	r3, r3, #8
 80032d0:	6193      	str	r3, [r2, #24]
		NVIC_USART3_interrupt_Enable;
 80032d2:	4b2e      	ldr	r3, [pc, #184]	; (800338c <USART_INIT+0x170>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2d      	ldr	r2, [pc, #180]	; (800338c <USART_INIT+0x170>)
 80032d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032dc:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 80032de:	2209      	movs	r2, #9
 80032e0:	210a      	movs	r1, #10
 80032e2:	482e      	ldr	r0, [pc, #184]	; (800339c <USART_INIT+0x180>)
 80032e4:	f7fe fb88 	bl	80019f8 <pinmode>
		//RX
		pinmode(GPIOB, pin11,GPIO_MODE_INTPUT_AF);
 80032e8:	2204      	movs	r2, #4
 80032ea:	210b      	movs	r1, #11
 80032ec:	482b      	ldr	r0, [pc, #172]	; (800339c <USART_INIT+0x180>)
 80032ee:	f7fe fb83 	bl	80019f8 <pinmode>
		arr[2]=USART3;
 80032f2:	4b28      	ldr	r3, [pc, #160]	; (8003394 <USART_INIT+0x178>)
 80032f4:	4a2a      	ldr	r2, [pc, #168]	; (80033a0 <USART_INIT+0x184>)
 80032f6:	609a      	str	r2, [r3, #8]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enabled
	USARTx->USART_CR1 |=(1<<13);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	60da      	str	r2, [r3, #12]
	//STEP 2
	//	Bit 12 M: Word length
	//	This bit determines the word length. It is set or cleared by software.
	//	0: 1 Start bit, 8 Data bits, n Stop bit
	//	1: 1 Start bit, 9 Data bits, n Stop bit
	USARTx->USART_CR1 |=word_length;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	431a      	orrs	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	60da      	str	r2, [r3, #12]
	//	These bits are used for programming the stop bits.
	//	00: 1 Stop bit
	//	01: 0.5 Stop bit
	//	10: 2 Stop bits
	//	11: 1.5 Stop bit
	USARTx->USART_CR2 |=stop_bits;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	431a      	orrs	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	611a      	str	r2, [r3, #16]
	//	2: When TE is set there is a 1 bit-time delay before the transmission starts.
	//	Bit 2 RE: Receiver enable
	//	This bit enables the receiver. It is set and cleared by software.
	//	0: Receiver is disabled
	//	1: Receiver is enabled and begins searching for a start bit
	USARTx->USART_CR1 |=mode;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	431a      	orrs	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	60da      	str	r2, [r3, #12]
	//	Bit 9 PS: Parity selection
	//	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	//	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	//	0: Even parity
	//	1: Odd parity
	USARTx->USART_CR1 |=parity;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	431a      	orrs	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	60da      	str	r2, [r3, #12]
	//	Bits 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV
	//	These 12 bits define the mantissa of the USART Divider (USARTDIV)
	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV
	//	These 4 bits define the fraction of the USART Divider (USARTDIV)

	uint16_t DIV_Mantissa =CLCK /(baud_rate*16);
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	82fb      	strh	r3, [r7, #22]
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <USART_INIT+0x188>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	8afa      	ldrh	r2, [r7, #22]
 8003354:	2164      	movs	r1, #100	; 0x64
 8003356:	fb01 f202 	mul.w	r2, r1, r2
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	4a11      	ldr	r2, [pc, #68]	; (80033a4 <USART_INIT+0x188>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	82bb      	strh	r3, [r7, #20]
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );
 8003368:	8afb      	ldrh	r3, [r7, #22]
 800336a:	011a      	lsls	r2, r3, #4
 800336c:	8abb      	ldrh	r3, [r7, #20]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	4313      	orrs	r3, r2
 8003374:	461a      	mov	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	609a      	str	r2, [r3, #8]


}
 800337a:	bf00      	nop
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40013800 	.word	0x40013800
 8003388:	40021000 	.word	0x40021000
 800338c:	e000e104 	.word	0xe000e104
 8003390:	40010800 	.word	0x40010800
 8003394:	200002dc 	.word	0x200002dc
 8003398:	40004400 	.word	0x40004400
 800339c:	40010c00 	.word	0x40010c00
 80033a0:	40004800 	.word	0x40004800
 80033a4:	51eb851f 	.word	0x51eb851f

080033a8 <USART_SEND>:
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	0b1b      	lsrs	r3, r3, #12
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 80033cc:	e004      	b.n	80033d8 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	605a      	str	r2, [r3, #4]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
	...

080033e4 <USART_READ>:

void USART_READ(USART_typeDef* USARTx,uint16_t* data){
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a0d      	ldr	r2, [pc, #52]	; (8003428 <USART_READ+0x44>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d103      	bne.n	80033fe <USART_READ+0x1a>
		*data=arr_data_RES[0];
 80033f6:	4b0d      	ldr	r3, [pc, #52]	; (800342c <USART_READ+0x48>)
 80033f8:	881a      	ldrh	r2, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	801a      	strh	r2, [r3, #0]
	}
	if(USARTx==USART2){
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <USART_READ+0x4c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d103      	bne.n	800340e <USART_READ+0x2a>
		*data=arr_data_RES[1];
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <USART_READ+0x48>)
 8003408:	885a      	ldrh	r2, [r3, #2]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	801a      	strh	r2, [r3, #0]
	}
	if(USARTx==USART3){
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a08      	ldr	r2, [pc, #32]	; (8003434 <USART_READ+0x50>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d103      	bne.n	800341e <USART_READ+0x3a>
		*data=arr_data_RES[2];
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <USART_READ+0x48>)
 8003418:	889a      	ldrh	r2, [r3, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	801a      	strh	r2, [r3, #0]
	}

}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	40013800 	.word	0x40013800
 800342c:	200002e8 	.word	0x200002e8
 8003430:	40004400 	.word	0x40004400
 8003434:	40004800 	.word	0x40004800

08003438 <USART_SEND_STRING>:

void USART_SEND_STRING(USART_typeDef* USARTx,uint8_t* data){
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a13      	ldr	r2, [pc, #76]	; (8003494 <USART_SEND_STRING+0x5c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d105      	bne.n	8003456 <USART_SEND_STRING+0x1e>
		arr_data[0]=data;
 800344a:	4a13      	ldr	r2, [pc, #76]	; (8003498 <USART_SEND_STRING+0x60>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6013      	str	r3, [r2, #0]
		arr[0]=USART1;
 8003450:	4b12      	ldr	r3, [pc, #72]	; (800349c <USART_SEND_STRING+0x64>)
 8003452:	4a10      	ldr	r2, [pc, #64]	; (8003494 <USART_SEND_STRING+0x5c>)
 8003454:	601a      	str	r2, [r3, #0]
	}
	if(USARTx==USART2){
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <USART_SEND_STRING+0x68>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d105      	bne.n	800346a <USART_SEND_STRING+0x32>
		arr_data[1]=data;
 800345e:	4a0e      	ldr	r2, [pc, #56]	; (8003498 <USART_SEND_STRING+0x60>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6053      	str	r3, [r2, #4]
		arr[1]=USART2;
 8003464:	4b0d      	ldr	r3, [pc, #52]	; (800349c <USART_SEND_STRING+0x64>)
 8003466:	4a0e      	ldr	r2, [pc, #56]	; (80034a0 <USART_SEND_STRING+0x68>)
 8003468:	605a      	str	r2, [r3, #4]
	}
	if(USARTx==USART3){
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <USART_SEND_STRING+0x6c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d105      	bne.n	800347e <USART_SEND_STRING+0x46>
		arr_data[2]=data;
 8003472:	4a09      	ldr	r2, [pc, #36]	; (8003498 <USART_SEND_STRING+0x60>)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	6093      	str	r3, [r2, #8]
		arr[2]=USART3;
 8003478:	4b08      	ldr	r3, [pc, #32]	; (800349c <USART_SEND_STRING+0x64>)
 800347a:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <USART_SEND_STRING+0x6c>)
 800347c:	609a      	str	r2, [r3, #8]
	}
	//Bit 7 TXEIE: TXE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
	USARTx->USART_CR1 |=Transmit_data_register_empty;//open flage of interrupt
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	60da      	str	r2, [r3, #12]
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40013800 	.word	0x40013800
 8003498:	200002f0 	.word	0x200002f0
 800349c:	200002dc 	.word	0x200002dc
 80034a0:	40004400 	.word	0x40004400
 80034a4:	40004800 	.word	0x40004800

080034a8 <USART_READ_INTERRUPT_EN>:

void USART_READ_INTERRUPT_EN(USART_typeDef* USARTx,void (*calback) (void)){
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a0e      	ldr	r2, [pc, #56]	; (80034f0 <USART_READ_INTERRUPT_EN+0x48>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d103      	bne.n	80034c2 <USART_READ_INTERRUPT_EN+0x1a>
		GP_reseve_Callback[0] = calback;
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <USART_READ_INTERRUPT_EN+0x4c>)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	e00a      	b.n	80034d8 <USART_READ_INTERRUPT_EN+0x30>
	}
	else if(USARTx==USART2){
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <USART_READ_INTERRUPT_EN+0x50>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d103      	bne.n	80034d2 <USART_READ_INTERRUPT_EN+0x2a>
		GP_reseve_Callback[1] = calback;
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <USART_READ_INTERRUPT_EN+0x4c>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6053      	str	r3, [r2, #4]
 80034d0:	e002      	b.n	80034d8 <USART_READ_INTERRUPT_EN+0x30>
	}
	else{
		GP_reseve_Callback[2] = calback;
 80034d2:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <USART_READ_INTERRUPT_EN+0x4c>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	6093      	str	r3, [r2, #8]
	//RX INTRRUPT
	//Bit 5 RXNEIE: RXNE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 |=Received_data_ready_to_be_read;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	60da      	str	r2, [r3, #12]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40013800 	.word	0x40013800
 80034f4:	200002fc 	.word	0x200002fc
 80034f8:	40004400 	.word	0x40004400

080034fc <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8003502:	4b51      	ldr	r3, [pc, #324]	; (8003648 <USART1_IRQHandler+0x14c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	09db      	lsrs	r3, r3, #7
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d122      	bne.n	8003558 <USART1_IRQHandler+0x5c>
 8003512:	4b4d      	ldr	r3, [pc, #308]	; (8003648 <USART1_IRQHandler+0x14c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	09db      	lsrs	r3, r3, #7
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d11a      	bne.n	8003558 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 8003522:	4b4a      	ldr	r3, [pc, #296]	; (800364c <USART1_IRQHandler+0x150>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 800352c:	4b46      	ldr	r3, [pc, #280]	; (8003648 <USART1_IRQHandler+0x14c>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b46      	ldr	r3, [pc, #280]	; (800364c <USART1_IRQHandler+0x150>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f7ff ff36 	bl	80033a8 <USART_SEND>
			++arr_data[0];
 800353c:	4b43      	ldr	r3, [pc, #268]	; (800364c <USART1_IRQHandler+0x150>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	4a42      	ldr	r2, [pc, #264]	; (800364c <USART1_IRQHandler+0x150>)
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e007      	b.n	8003558 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 8003548:	4b3f      	ldr	r3, [pc, #252]	; (8003648 <USART1_IRQHandler+0x14c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	4b3e      	ldr	r3, [pc, #248]	; (8003648 <USART1_IRQHandler+0x14c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003556:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 8003558:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <USART1_IRQHandler+0x14c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d15b      	bne.n	8003620 <USART1_IRQHandler+0x124>
 8003568:	4b37      	ldr	r3, [pc, #220]	; (8003648 <USART1_IRQHandler+0x14c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d153      	bne.n	8003620 <USART1_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 8003578:	4b33      	ldr	r3, [pc, #204]	; (8003648 <USART1_IRQHandler+0x14c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	0b1b      	lsrs	r3, r3, #12
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d117      	bne.n	80035b8 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8003588:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <USART1_IRQHandler+0x14c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	0a9b      	lsrs	r3, r3, #10
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d108      	bne.n	80035aa <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8003598:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <USART1_IRQHandler+0x14c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	4b2a      	ldr	r3, [pc, #168]	; (8003650 <USART1_IRQHandler+0x154>)
 80035a6:	801a      	strh	r2, [r3, #0]
 80035a8:	e020      	b.n	80035ec <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 80035aa:	4b27      	ldr	r3, [pc, #156]	; (8003648 <USART1_IRQHandler+0x14c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	4b27      	ldr	r3, [pc, #156]	; (8003650 <USART1_IRQHandler+0x154>)
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	e019      	b.n	80035ec <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 80035b8:	4b23      	ldr	r3, [pc, #140]	; (8003648 <USART1_IRQHandler+0x14c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	0a9b      	lsrs	r3, r3, #10
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d109      	bne.n	80035dc <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 80035c8:	4b1f      	ldr	r3, [pc, #124]	; (8003648 <USART1_IRQHandler+0x14c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <USART1_IRQHandler+0x154>)
 80035d8:	801a      	strh	r2, [r3, #0]
 80035da:	e007      	b.n	80035ec <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 80035dc:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <USART1_IRQHandler+0x14c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <USART1_IRQHandler+0x154>)
 80035ea:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <USART1_IRQHandler+0x158>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4798      	blx	r3

		//for(long i=0;i<(20000);i++);
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <USART1_IRQHandler+0x14c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b13      	ldr	r3, [pc, #76]	; (8003648 <USART1_IRQHandler+0x14c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0220 	bic.w	r2, r2, #32
 8003600:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <USART1_IRQHandler+0x14c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8003608:	4b13      	ldr	r3, [pc, #76]	; (8003658 <USART1_IRQHandler+0x15c>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	b29b      	uxth	r3, r3
 800360e:	80fb      	strh	r3, [r7, #6]
			arr[0]->USART_SR &=~(1<<5);
 8003610:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <USART1_IRQHandler+0x14c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <USART1_IRQHandler+0x14c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0220 	bic.w	r2, r2, #32
 800361e:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <USART1_IRQHandler+0x14c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <USART1_IRQHandler+0x15c>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	b29b      	uxth	r3, r3
 800362c:	80bb      	strh	r3, [r7, #4]
		arr[0]->USART_SR &=~(1<<5);
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <USART1_IRQHandler+0x14c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b04      	ldr	r3, [pc, #16]	; (8003648 <USART1_IRQHandler+0x14c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0220 	bic.w	r2, r2, #32
 800363c:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200002dc 	.word	0x200002dc
 800364c:	200002f0 	.word	0x200002f0
 8003650:	200002e8 	.word	0x200002e8
 8003654:	200002fc 	.word	0x200002fc
 8003658:	40013800 	.word	0x40013800

0800365c <USART2_IRQHandler>:
void USART2_IRQHandler(){
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8003662:	4b51      	ldr	r3, [pc, #324]	; (80037a8 <USART2_IRQHandler+0x14c>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	09db      	lsrs	r3, r3, #7
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d122      	bne.n	80036b8 <USART2_IRQHandler+0x5c>
 8003672:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <USART2_IRQHandler+0x14c>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	09db      	lsrs	r3, r3, #7
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d11a      	bne.n	80036b8 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 8003682:	4b4a      	ldr	r3, [pc, #296]	; (80037ac <USART2_IRQHandler+0x150>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 800368c:	4b46      	ldr	r3, [pc, #280]	; (80037a8 <USART2_IRQHandler+0x14c>)
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	4b46      	ldr	r3, [pc, #280]	; (80037ac <USART2_IRQHandler+0x150>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4619      	mov	r1, r3
 8003696:	4610      	mov	r0, r2
 8003698:	f7ff fe86 	bl	80033a8 <USART_SEND>
			++arr_data[1];
 800369c:	4b43      	ldr	r3, [pc, #268]	; (80037ac <USART2_IRQHandler+0x150>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	3301      	adds	r3, #1
 80036a2:	4a42      	ldr	r2, [pc, #264]	; (80037ac <USART2_IRQHandler+0x150>)
 80036a4:	6053      	str	r3, [r2, #4]
 80036a6:	e007      	b.n	80036b8 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 80036a8:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <USART2_IRQHandler+0x14c>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <USART2_IRQHandler+0x14c>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036b6:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 80036b8:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <USART2_IRQHandler+0x14c>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d15b      	bne.n	8003780 <USART2_IRQHandler+0x124>
 80036c8:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <USART2_IRQHandler+0x14c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d153      	bne.n	8003780 <USART2_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 80036d8:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <USART2_IRQHandler+0x14c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	0b1b      	lsrs	r3, r3, #12
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d117      	bne.n	8003718 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 80036e8:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <USART2_IRQHandler+0x14c>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	0a9b      	lsrs	r3, r3, #10
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d108      	bne.n	800370a <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <USART2_IRQHandler+0x14c>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	b2db      	uxtb	r3, r3
 8003702:	b29a      	uxth	r2, r3
 8003704:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <USART2_IRQHandler+0x154>)
 8003706:	805a      	strh	r2, [r3, #2]
 8003708:	e020      	b.n	800374c <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 800370a:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <USART2_IRQHandler+0x14c>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	b29a      	uxth	r2, r3
 8003712:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <USART2_IRQHandler+0x154>)
 8003714:	805a      	strh	r2, [r3, #2]
 8003716:	e019      	b.n	800374c <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8003718:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <USART2_IRQHandler+0x14c>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	0a9b      	lsrs	r3, r3, #10
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d109      	bne.n	800373c <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <USART2_IRQHandler+0x14c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	b29b      	uxth	r3, r3
 8003730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003734:	b29a      	uxth	r2, r3
 8003736:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <USART2_IRQHandler+0x154>)
 8003738:	805a      	strh	r2, [r3, #2]
 800373a:	e007      	b.n	800374c <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <USART2_IRQHandler+0x14c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	b29b      	uxth	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	b29a      	uxth	r2, r3
 8003748:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <USART2_IRQHandler+0x154>)
 800374a:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <USART2_IRQHandler+0x158>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4798      	blx	r3
		//for(long i=0;i<(20000);i++);
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <USART2_IRQHandler+0x14c>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <USART2_IRQHandler+0x14c>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f022 0220 	bic.w	r2, r2, #32
 8003760:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <USART2_IRQHandler+0x14c>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <USART2_IRQHandler+0x15c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	b29b      	uxth	r3, r3
 800376e:	80fb      	strh	r3, [r7, #6]
			arr[1]->USART_SR &=~(1<<5);
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <USART2_IRQHandler+0x14c>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <USART2_IRQHandler+0x14c>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f022 0220 	bic.w	r2, r2, #32
 800377e:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <USART2_IRQHandler+0x14c>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <USART2_IRQHandler+0x15c>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	b29b      	uxth	r3, r3
 800378c:	80bb      	strh	r3, [r7, #4]
		arr[1]->USART_SR &=~(1<<5);
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <USART2_IRQHandler+0x14c>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <USART2_IRQHandler+0x14c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f022 0220 	bic.w	r2, r2, #32
 800379c:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200002dc 	.word	0x200002dc
 80037ac:	200002f0 	.word	0x200002f0
 80037b0:	200002e8 	.word	0x200002e8
 80037b4:	200002fc 	.word	0x200002fc
 80037b8:	40004400 	.word	0x40004400

080037bc <USART3_IRQHandler>:
void USART3_IRQHandler(){
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80037c2:	4b51      	ldr	r3, [pc, #324]	; (8003908 <USART3_IRQHandler+0x14c>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	09db      	lsrs	r3, r3, #7
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d122      	bne.n	8003818 <USART3_IRQHandler+0x5c>
 80037d2:	4b4d      	ldr	r3, [pc, #308]	; (8003908 <USART3_IRQHandler+0x14c>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	09db      	lsrs	r3, r3, #7
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d11a      	bne.n	8003818 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 80037e2:	4b4a      	ldr	r3, [pc, #296]	; (800390c <USART3_IRQHandler+0x150>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00d      	beq.n	8003808 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 80037ec:	4b46      	ldr	r3, [pc, #280]	; (8003908 <USART3_IRQHandler+0x14c>)
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	4b46      	ldr	r3, [pc, #280]	; (800390c <USART3_IRQHandler+0x150>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4619      	mov	r1, r3
 80037f6:	4610      	mov	r0, r2
 80037f8:	f7ff fdd6 	bl	80033a8 <USART_SEND>
			++arr_data[2];
 80037fc:	4b43      	ldr	r3, [pc, #268]	; (800390c <USART3_IRQHandler+0x150>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	3301      	adds	r3, #1
 8003802:	4a42      	ldr	r2, [pc, #264]	; (800390c <USART3_IRQHandler+0x150>)
 8003804:	6093      	str	r3, [r2, #8]
 8003806:	e007      	b.n	8003818 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 8003808:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <USART3_IRQHandler+0x14c>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	4b3e      	ldr	r3, [pc, #248]	; (8003908 <USART3_IRQHandler+0x14c>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003816:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 8003818:	4b3b      	ldr	r3, [pc, #236]	; (8003908 <USART3_IRQHandler+0x14c>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d15b      	bne.n	80038e0 <USART3_IRQHandler+0x124>
 8003828:	4b37      	ldr	r3, [pc, #220]	; (8003908 <USART3_IRQHandler+0x14c>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d153      	bne.n	80038e0 <USART3_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 8003838:	4b33      	ldr	r3, [pc, #204]	; (8003908 <USART3_IRQHandler+0x14c>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	0b1b      	lsrs	r3, r3, #12
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b01      	cmp	r3, #1
 8003846:	d117      	bne.n	8003878 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8003848:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <USART3_IRQHandler+0x14c>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	0a9b      	lsrs	r3, r3, #10
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d108      	bne.n	800386a <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8003858:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <USART3_IRQHandler+0x14c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	b29b      	uxth	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	b29a      	uxth	r2, r3
 8003864:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <USART3_IRQHandler+0x154>)
 8003866:	809a      	strh	r2, [r3, #4]
 8003868:	e020      	b.n	80038ac <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 800386a:	4b27      	ldr	r3, [pc, #156]	; (8003908 <USART3_IRQHandler+0x14c>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	b29a      	uxth	r2, r3
 8003872:	4b27      	ldr	r3, [pc, #156]	; (8003910 <USART3_IRQHandler+0x154>)
 8003874:	809a      	strh	r2, [r3, #4]
 8003876:	e019      	b.n	80038ac <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8003878:	4b23      	ldr	r3, [pc, #140]	; (8003908 <USART3_IRQHandler+0x14c>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	0a9b      	lsrs	r3, r3, #10
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d109      	bne.n	800389c <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 8003888:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <USART3_IRQHandler+0x14c>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	b29b      	uxth	r3, r3
 8003890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003894:	b29a      	uxth	r2, r3
 8003896:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <USART3_IRQHandler+0x154>)
 8003898:	809a      	strh	r2, [r3, #4]
 800389a:	e007      	b.n	80038ac <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 800389c:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <USART3_IRQHandler+0x14c>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	4b19      	ldr	r3, [pc, #100]	; (8003910 <USART3_IRQHandler+0x154>)
 80038aa:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 80038ac:	4b19      	ldr	r3, [pc, #100]	; (8003914 <USART3_IRQHandler+0x158>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4798      	blx	r3
		//for(long i=0;i<(20000);i++);

		arr[2]->USART_SR &=~(1<<5);//clear
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <USART3_IRQHandler+0x14c>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b13      	ldr	r3, [pc, #76]	; (8003908 <USART3_IRQHandler+0x14c>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f022 0220 	bic.w	r2, r2, #32
 80038c0:	601a      	str	r2, [r3, #0]

		if(((arr[2]->USART_SR>>3)&1)|1){
 80038c2:	4b11      	ldr	r3, [pc, #68]	; (8003908 <USART3_IRQHandler+0x14c>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <USART3_IRQHandler+0x15c>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	80fb      	strh	r3, [r7, #6]
			arr[2]->USART_SR &=~(1<<5);
 80038d0:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <USART3_IRQHandler+0x14c>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <USART3_IRQHandler+0x14c>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f022 0220 	bic.w	r2, r2, #32
 80038de:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 80038e0:	4b09      	ldr	r3, [pc, #36]	; (8003908 <USART3_IRQHandler+0x14c>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <USART3_IRQHandler+0x15c>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	80bb      	strh	r3, [r7, #4]
		arr[2]->USART_SR &=~(1<<5);
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <USART3_IRQHandler+0x14c>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b04      	ldr	r3, [pc, #16]	; (8003908 <USART3_IRQHandler+0x14c>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f022 0220 	bic.w	r2, r2, #32
 80038fc:	601a      	str	r2, [r3, #0]
	}

}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200002dc 	.word	0x200002dc
 800390c:	200002f0 	.word	0x200002f0
 8003910:	200002e8 	.word	0x200002e8
 8003914:	200002fc 	.word	0x200002fc
 8003918:	40004800 	.word	0x40004800

0800391c <atoi>:
 800391c:	220a      	movs	r2, #10
 800391e:	2100      	movs	r1, #0
 8003920:	f000 b8c6 	b.w	8003ab0 <strtol>

08003924 <__errno>:
 8003924:	4b01      	ldr	r3, [pc, #4]	; (800392c <__errno+0x8>)
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000024 	.word	0x20000024

08003930 <__libc_init_array>:
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	2500      	movs	r5, #0
 8003934:	4e0c      	ldr	r6, [pc, #48]	; (8003968 <__libc_init_array+0x38>)
 8003936:	4c0d      	ldr	r4, [pc, #52]	; (800396c <__libc_init_array+0x3c>)
 8003938:	1ba4      	subs	r4, r4, r6
 800393a:	10a4      	asrs	r4, r4, #2
 800393c:	42a5      	cmp	r5, r4
 800393e:	d109      	bne.n	8003954 <__libc_init_array+0x24>
 8003940:	f000 fce2 	bl	8004308 <_init>
 8003944:	2500      	movs	r5, #0
 8003946:	4e0a      	ldr	r6, [pc, #40]	; (8003970 <__libc_init_array+0x40>)
 8003948:	4c0a      	ldr	r4, [pc, #40]	; (8003974 <__libc_init_array+0x44>)
 800394a:	1ba4      	subs	r4, r4, r6
 800394c:	10a4      	asrs	r4, r4, #2
 800394e:	42a5      	cmp	r5, r4
 8003950:	d105      	bne.n	800395e <__libc_init_array+0x2e>
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003958:	4798      	blx	r3
 800395a:	3501      	adds	r5, #1
 800395c:	e7ee      	b.n	800393c <__libc_init_array+0xc>
 800395e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003962:	4798      	blx	r3
 8003964:	3501      	adds	r5, #1
 8003966:	e7f2      	b.n	800394e <__libc_init_array+0x1e>
 8003968:	0800446c 	.word	0x0800446c
 800396c:	0800446c 	.word	0x0800446c
 8003970:	0800446c 	.word	0x0800446c
 8003974:	08004470 	.word	0x08004470

08003978 <siprintf>:
 8003978:	b40e      	push	{r1, r2, r3}
 800397a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800397e:	b500      	push	{lr}
 8003980:	b09c      	sub	sp, #112	; 0x70
 8003982:	ab1d      	add	r3, sp, #116	; 0x74
 8003984:	9002      	str	r0, [sp, #8]
 8003986:	9006      	str	r0, [sp, #24]
 8003988:	9107      	str	r1, [sp, #28]
 800398a:	9104      	str	r1, [sp, #16]
 800398c:	4808      	ldr	r0, [pc, #32]	; (80039b0 <siprintf+0x38>)
 800398e:	4909      	ldr	r1, [pc, #36]	; (80039b4 <siprintf+0x3c>)
 8003990:	f853 2b04 	ldr.w	r2, [r3], #4
 8003994:	9105      	str	r1, [sp, #20]
 8003996:	6800      	ldr	r0, [r0, #0]
 8003998:	a902      	add	r1, sp, #8
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	f000 f98e 	bl	8003cbc <_svfiprintf_r>
 80039a0:	2200      	movs	r2, #0
 80039a2:	9b02      	ldr	r3, [sp, #8]
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	b01c      	add	sp, #112	; 0x70
 80039a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039ac:	b003      	add	sp, #12
 80039ae:	4770      	bx	lr
 80039b0:	20000024 	.word	0x20000024
 80039b4:	ffff0208 	.word	0xffff0208

080039b8 <_strtol_l.isra.0>:
 80039b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039bc:	4680      	mov	r8, r0
 80039be:	4689      	mov	r9, r1
 80039c0:	4692      	mov	sl, r2
 80039c2:	461e      	mov	r6, r3
 80039c4:	460f      	mov	r7, r1
 80039c6:	463d      	mov	r5, r7
 80039c8:	9808      	ldr	r0, [sp, #32]
 80039ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80039ce:	f000 f885 	bl	8003adc <__locale_ctype_ptr_l>
 80039d2:	4420      	add	r0, r4
 80039d4:	7843      	ldrb	r3, [r0, #1]
 80039d6:	f013 0308 	ands.w	r3, r3, #8
 80039da:	d132      	bne.n	8003a42 <_strtol_l.isra.0+0x8a>
 80039dc:	2c2d      	cmp	r4, #45	; 0x2d
 80039de:	d132      	bne.n	8003a46 <_strtol_l.isra.0+0x8e>
 80039e0:	2201      	movs	r2, #1
 80039e2:	787c      	ldrb	r4, [r7, #1]
 80039e4:	1cbd      	adds	r5, r7, #2
 80039e6:	2e00      	cmp	r6, #0
 80039e8:	d05d      	beq.n	8003aa6 <_strtol_l.isra.0+0xee>
 80039ea:	2e10      	cmp	r6, #16
 80039ec:	d109      	bne.n	8003a02 <_strtol_l.isra.0+0x4a>
 80039ee:	2c30      	cmp	r4, #48	; 0x30
 80039f0:	d107      	bne.n	8003a02 <_strtol_l.isra.0+0x4a>
 80039f2:	782b      	ldrb	r3, [r5, #0]
 80039f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80039f8:	2b58      	cmp	r3, #88	; 0x58
 80039fa:	d14f      	bne.n	8003a9c <_strtol_l.isra.0+0xe4>
 80039fc:	2610      	movs	r6, #16
 80039fe:	786c      	ldrb	r4, [r5, #1]
 8003a00:	3502      	adds	r5, #2
 8003a02:	2a00      	cmp	r2, #0
 8003a04:	bf14      	ite	ne
 8003a06:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003a0a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003a0e:	2700      	movs	r7, #0
 8003a10:	fbb1 fcf6 	udiv	ip, r1, r6
 8003a14:	4638      	mov	r0, r7
 8003a16:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003a1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003a1e:	2b09      	cmp	r3, #9
 8003a20:	d817      	bhi.n	8003a52 <_strtol_l.isra.0+0x9a>
 8003a22:	461c      	mov	r4, r3
 8003a24:	42a6      	cmp	r6, r4
 8003a26:	dd23      	ble.n	8003a70 <_strtol_l.isra.0+0xb8>
 8003a28:	1c7b      	adds	r3, r7, #1
 8003a2a:	d007      	beq.n	8003a3c <_strtol_l.isra.0+0x84>
 8003a2c:	4584      	cmp	ip, r0
 8003a2e:	d31c      	bcc.n	8003a6a <_strtol_l.isra.0+0xb2>
 8003a30:	d101      	bne.n	8003a36 <_strtol_l.isra.0+0x7e>
 8003a32:	45a6      	cmp	lr, r4
 8003a34:	db19      	blt.n	8003a6a <_strtol_l.isra.0+0xb2>
 8003a36:	2701      	movs	r7, #1
 8003a38:	fb00 4006 	mla	r0, r0, r6, r4
 8003a3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a40:	e7eb      	b.n	8003a1a <_strtol_l.isra.0+0x62>
 8003a42:	462f      	mov	r7, r5
 8003a44:	e7bf      	b.n	80039c6 <_strtol_l.isra.0+0xe>
 8003a46:	2c2b      	cmp	r4, #43	; 0x2b
 8003a48:	bf04      	itt	eq
 8003a4a:	1cbd      	addeq	r5, r7, #2
 8003a4c:	787c      	ldrbeq	r4, [r7, #1]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	e7c9      	b.n	80039e6 <_strtol_l.isra.0+0x2e>
 8003a52:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003a56:	2b19      	cmp	r3, #25
 8003a58:	d801      	bhi.n	8003a5e <_strtol_l.isra.0+0xa6>
 8003a5a:	3c37      	subs	r4, #55	; 0x37
 8003a5c:	e7e2      	b.n	8003a24 <_strtol_l.isra.0+0x6c>
 8003a5e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003a62:	2b19      	cmp	r3, #25
 8003a64:	d804      	bhi.n	8003a70 <_strtol_l.isra.0+0xb8>
 8003a66:	3c57      	subs	r4, #87	; 0x57
 8003a68:	e7dc      	b.n	8003a24 <_strtol_l.isra.0+0x6c>
 8003a6a:	f04f 37ff 	mov.w	r7, #4294967295
 8003a6e:	e7e5      	b.n	8003a3c <_strtol_l.isra.0+0x84>
 8003a70:	1c7b      	adds	r3, r7, #1
 8003a72:	d108      	bne.n	8003a86 <_strtol_l.isra.0+0xce>
 8003a74:	2322      	movs	r3, #34	; 0x22
 8003a76:	4608      	mov	r0, r1
 8003a78:	f8c8 3000 	str.w	r3, [r8]
 8003a7c:	f1ba 0f00 	cmp.w	sl, #0
 8003a80:	d107      	bne.n	8003a92 <_strtol_l.isra.0+0xda>
 8003a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a86:	b102      	cbz	r2, 8003a8a <_strtol_l.isra.0+0xd2>
 8003a88:	4240      	negs	r0, r0
 8003a8a:	f1ba 0f00 	cmp.w	sl, #0
 8003a8e:	d0f8      	beq.n	8003a82 <_strtol_l.isra.0+0xca>
 8003a90:	b10f      	cbz	r7, 8003a96 <_strtol_l.isra.0+0xde>
 8003a92:	f105 39ff 	add.w	r9, r5, #4294967295
 8003a96:	f8ca 9000 	str.w	r9, [sl]
 8003a9a:	e7f2      	b.n	8003a82 <_strtol_l.isra.0+0xca>
 8003a9c:	2430      	movs	r4, #48	; 0x30
 8003a9e:	2e00      	cmp	r6, #0
 8003aa0:	d1af      	bne.n	8003a02 <_strtol_l.isra.0+0x4a>
 8003aa2:	2608      	movs	r6, #8
 8003aa4:	e7ad      	b.n	8003a02 <_strtol_l.isra.0+0x4a>
 8003aa6:	2c30      	cmp	r4, #48	; 0x30
 8003aa8:	d0a3      	beq.n	80039f2 <_strtol_l.isra.0+0x3a>
 8003aaa:	260a      	movs	r6, #10
 8003aac:	e7a9      	b.n	8003a02 <_strtol_l.isra.0+0x4a>
	...

08003ab0 <strtol>:
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <strtol+0x24>)
 8003ab2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ab4:	681c      	ldr	r4, [r3, #0]
 8003ab6:	4d08      	ldr	r5, [pc, #32]	; (8003ad8 <strtol+0x28>)
 8003ab8:	6a23      	ldr	r3, [r4, #32]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bf08      	it	eq
 8003abe:	462b      	moveq	r3, r5
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	460a      	mov	r2, r1
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff ff75 	bl	80039b8 <_strtol_l.isra.0>
 8003ace:	b003      	add	sp, #12
 8003ad0:	bd30      	pop	{r4, r5, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000024 	.word	0x20000024
 8003ad8:	20000088 	.word	0x20000088

08003adc <__locale_ctype_ptr_l>:
 8003adc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003ae0:	4770      	bx	lr

08003ae2 <__ascii_mbtowc>:
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	b901      	cbnz	r1, 8003ae8 <__ascii_mbtowc+0x6>
 8003ae6:	a901      	add	r1, sp, #4
 8003ae8:	b142      	cbz	r2, 8003afc <__ascii_mbtowc+0x1a>
 8003aea:	b14b      	cbz	r3, 8003b00 <__ascii_mbtowc+0x1e>
 8003aec:	7813      	ldrb	r3, [r2, #0]
 8003aee:	600b      	str	r3, [r1, #0]
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	1c10      	adds	r0, r2, #0
 8003af4:	bf18      	it	ne
 8003af6:	2001      	movne	r0, #1
 8003af8:	b002      	add	sp, #8
 8003afa:	4770      	bx	lr
 8003afc:	4610      	mov	r0, r2
 8003afe:	e7fb      	b.n	8003af8 <__ascii_mbtowc+0x16>
 8003b00:	f06f 0001 	mvn.w	r0, #1
 8003b04:	e7f8      	b.n	8003af8 <__ascii_mbtowc+0x16>
	...

08003b08 <_malloc_r>:
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	1ccd      	adds	r5, r1, #3
 8003b0c:	f025 0503 	bic.w	r5, r5, #3
 8003b10:	3508      	adds	r5, #8
 8003b12:	2d0c      	cmp	r5, #12
 8003b14:	bf38      	it	cc
 8003b16:	250c      	movcc	r5, #12
 8003b18:	2d00      	cmp	r5, #0
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	db01      	blt.n	8003b22 <_malloc_r+0x1a>
 8003b1e:	42a9      	cmp	r1, r5
 8003b20:	d903      	bls.n	8003b2a <_malloc_r+0x22>
 8003b22:	230c      	movs	r3, #12
 8003b24:	6033      	str	r3, [r6, #0]
 8003b26:	2000      	movs	r0, #0
 8003b28:	bd70      	pop	{r4, r5, r6, pc}
 8003b2a:	f000 fb96 	bl	800425a <__malloc_lock>
 8003b2e:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <_malloc_r+0xac>)
 8003b30:	6814      	ldr	r4, [r2, #0]
 8003b32:	4621      	mov	r1, r4
 8003b34:	b991      	cbnz	r1, 8003b5c <_malloc_r+0x54>
 8003b36:	4c20      	ldr	r4, [pc, #128]	; (8003bb8 <_malloc_r+0xb0>)
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	b91b      	cbnz	r3, 8003b44 <_malloc_r+0x3c>
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	f000 fb3d 	bl	80041bc <_sbrk_r>
 8003b42:	6020      	str	r0, [r4, #0]
 8003b44:	4629      	mov	r1, r5
 8003b46:	4630      	mov	r0, r6
 8003b48:	f000 fb38 	bl	80041bc <_sbrk_r>
 8003b4c:	1c43      	adds	r3, r0, #1
 8003b4e:	d124      	bne.n	8003b9a <_malloc_r+0x92>
 8003b50:	230c      	movs	r3, #12
 8003b52:	4630      	mov	r0, r6
 8003b54:	6033      	str	r3, [r6, #0]
 8003b56:	f000 fb81 	bl	800425c <__malloc_unlock>
 8003b5a:	e7e4      	b.n	8003b26 <_malloc_r+0x1e>
 8003b5c:	680b      	ldr	r3, [r1, #0]
 8003b5e:	1b5b      	subs	r3, r3, r5
 8003b60:	d418      	bmi.n	8003b94 <_malloc_r+0x8c>
 8003b62:	2b0b      	cmp	r3, #11
 8003b64:	d90f      	bls.n	8003b86 <_malloc_r+0x7e>
 8003b66:	600b      	str	r3, [r1, #0]
 8003b68:	18cc      	adds	r4, r1, r3
 8003b6a:	50cd      	str	r5, [r1, r3]
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f000 fb75 	bl	800425c <__malloc_unlock>
 8003b72:	f104 000b 	add.w	r0, r4, #11
 8003b76:	1d23      	adds	r3, r4, #4
 8003b78:	f020 0007 	bic.w	r0, r0, #7
 8003b7c:	1ac3      	subs	r3, r0, r3
 8003b7e:	d0d3      	beq.n	8003b28 <_malloc_r+0x20>
 8003b80:	425a      	negs	r2, r3
 8003b82:	50e2      	str	r2, [r4, r3]
 8003b84:	e7d0      	b.n	8003b28 <_malloc_r+0x20>
 8003b86:	684b      	ldr	r3, [r1, #4]
 8003b88:	428c      	cmp	r4, r1
 8003b8a:	bf16      	itet	ne
 8003b8c:	6063      	strne	r3, [r4, #4]
 8003b8e:	6013      	streq	r3, [r2, #0]
 8003b90:	460c      	movne	r4, r1
 8003b92:	e7eb      	b.n	8003b6c <_malloc_r+0x64>
 8003b94:	460c      	mov	r4, r1
 8003b96:	6849      	ldr	r1, [r1, #4]
 8003b98:	e7cc      	b.n	8003b34 <_malloc_r+0x2c>
 8003b9a:	1cc4      	adds	r4, r0, #3
 8003b9c:	f024 0403 	bic.w	r4, r4, #3
 8003ba0:	42a0      	cmp	r0, r4
 8003ba2:	d005      	beq.n	8003bb0 <_malloc_r+0xa8>
 8003ba4:	1a21      	subs	r1, r4, r0
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f000 fb08 	bl	80041bc <_sbrk_r>
 8003bac:	3001      	adds	r0, #1
 8003bae:	d0cf      	beq.n	8003b50 <_malloc_r+0x48>
 8003bb0:	6025      	str	r5, [r4, #0]
 8003bb2:	e7db      	b.n	8003b6c <_malloc_r+0x64>
 8003bb4:	20000228 	.word	0x20000228
 8003bb8:	2000022c 	.word	0x2000022c

08003bbc <_realloc_r>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	4607      	mov	r7, r0
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	460e      	mov	r6, r1
 8003bc4:	b921      	cbnz	r1, 8003bd0 <_realloc_r+0x14>
 8003bc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bca:	4611      	mov	r1, r2
 8003bcc:	f7ff bf9c 	b.w	8003b08 <_malloc_r>
 8003bd0:	b922      	cbnz	r2, 8003bdc <_realloc_r+0x20>
 8003bd2:	f000 fb45 	bl	8004260 <_free_r>
 8003bd6:	4625      	mov	r5, r4
 8003bd8:	4628      	mov	r0, r5
 8003bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bdc:	f000 fb8c 	bl	80042f8 <_malloc_usable_size_r>
 8003be0:	42a0      	cmp	r0, r4
 8003be2:	d20f      	bcs.n	8003c04 <_realloc_r+0x48>
 8003be4:	4621      	mov	r1, r4
 8003be6:	4638      	mov	r0, r7
 8003be8:	f7ff ff8e 	bl	8003b08 <_malloc_r>
 8003bec:	4605      	mov	r5, r0
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d0f2      	beq.n	8003bd8 <_realloc_r+0x1c>
 8003bf2:	4631      	mov	r1, r6
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	f000 fb0c 	bl	8004212 <memcpy>
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	4638      	mov	r0, r7
 8003bfe:	f000 fb2f 	bl	8004260 <_free_r>
 8003c02:	e7e9      	b.n	8003bd8 <_realloc_r+0x1c>
 8003c04:	4635      	mov	r5, r6
 8003c06:	e7e7      	b.n	8003bd8 <_realloc_r+0x1c>

08003c08 <__ssputs_r>:
 8003c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c0c:	688e      	ldr	r6, [r1, #8]
 8003c0e:	4682      	mov	sl, r0
 8003c10:	429e      	cmp	r6, r3
 8003c12:	460c      	mov	r4, r1
 8003c14:	4690      	mov	r8, r2
 8003c16:	4699      	mov	r9, r3
 8003c18:	d837      	bhi.n	8003c8a <__ssputs_r+0x82>
 8003c1a:	898a      	ldrh	r2, [r1, #12]
 8003c1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c20:	d031      	beq.n	8003c86 <__ssputs_r+0x7e>
 8003c22:	2302      	movs	r3, #2
 8003c24:	6825      	ldr	r5, [r4, #0]
 8003c26:	6909      	ldr	r1, [r1, #16]
 8003c28:	1a6f      	subs	r7, r5, r1
 8003c2a:	6965      	ldr	r5, [r4, #20]
 8003c2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c30:	fb95 f5f3 	sdiv	r5, r5, r3
 8003c34:	f109 0301 	add.w	r3, r9, #1
 8003c38:	443b      	add	r3, r7
 8003c3a:	429d      	cmp	r5, r3
 8003c3c:	bf38      	it	cc
 8003c3e:	461d      	movcc	r5, r3
 8003c40:	0553      	lsls	r3, r2, #21
 8003c42:	d530      	bpl.n	8003ca6 <__ssputs_r+0x9e>
 8003c44:	4629      	mov	r1, r5
 8003c46:	f7ff ff5f 	bl	8003b08 <_malloc_r>
 8003c4a:	4606      	mov	r6, r0
 8003c4c:	b950      	cbnz	r0, 8003c64 <__ssputs_r+0x5c>
 8003c4e:	230c      	movs	r3, #12
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	f8ca 3000 	str.w	r3, [sl]
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5e:	81a3      	strh	r3, [r4, #12]
 8003c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c64:	463a      	mov	r2, r7
 8003c66:	6921      	ldr	r1, [r4, #16]
 8003c68:	f000 fad3 	bl	8004212 <memcpy>
 8003c6c:	89a3      	ldrh	r3, [r4, #12]
 8003c6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c76:	81a3      	strh	r3, [r4, #12]
 8003c78:	6126      	str	r6, [r4, #16]
 8003c7a:	443e      	add	r6, r7
 8003c7c:	6026      	str	r6, [r4, #0]
 8003c7e:	464e      	mov	r6, r9
 8003c80:	6165      	str	r5, [r4, #20]
 8003c82:	1bed      	subs	r5, r5, r7
 8003c84:	60a5      	str	r5, [r4, #8]
 8003c86:	454e      	cmp	r6, r9
 8003c88:	d900      	bls.n	8003c8c <__ssputs_r+0x84>
 8003c8a:	464e      	mov	r6, r9
 8003c8c:	4632      	mov	r2, r6
 8003c8e:	4641      	mov	r1, r8
 8003c90:	6820      	ldr	r0, [r4, #0]
 8003c92:	f000 fac9 	bl	8004228 <memmove>
 8003c96:	68a3      	ldr	r3, [r4, #8]
 8003c98:	2000      	movs	r0, #0
 8003c9a:	1b9b      	subs	r3, r3, r6
 8003c9c:	60a3      	str	r3, [r4, #8]
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	441e      	add	r6, r3
 8003ca2:	6026      	str	r6, [r4, #0]
 8003ca4:	e7dc      	b.n	8003c60 <__ssputs_r+0x58>
 8003ca6:	462a      	mov	r2, r5
 8003ca8:	f7ff ff88 	bl	8003bbc <_realloc_r>
 8003cac:	4606      	mov	r6, r0
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d1e2      	bne.n	8003c78 <__ssputs_r+0x70>
 8003cb2:	6921      	ldr	r1, [r4, #16]
 8003cb4:	4650      	mov	r0, sl
 8003cb6:	f000 fad3 	bl	8004260 <_free_r>
 8003cba:	e7c8      	b.n	8003c4e <__ssputs_r+0x46>

08003cbc <_svfiprintf_r>:
 8003cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc0:	461d      	mov	r5, r3
 8003cc2:	898b      	ldrh	r3, [r1, #12]
 8003cc4:	b09d      	sub	sp, #116	; 0x74
 8003cc6:	061f      	lsls	r7, r3, #24
 8003cc8:	4680      	mov	r8, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	4616      	mov	r6, r2
 8003cce:	d50f      	bpl.n	8003cf0 <_svfiprintf_r+0x34>
 8003cd0:	690b      	ldr	r3, [r1, #16]
 8003cd2:	b96b      	cbnz	r3, 8003cf0 <_svfiprintf_r+0x34>
 8003cd4:	2140      	movs	r1, #64	; 0x40
 8003cd6:	f7ff ff17 	bl	8003b08 <_malloc_r>
 8003cda:	6020      	str	r0, [r4, #0]
 8003cdc:	6120      	str	r0, [r4, #16]
 8003cde:	b928      	cbnz	r0, 8003cec <_svfiprintf_r+0x30>
 8003ce0:	230c      	movs	r3, #12
 8003ce2:	f8c8 3000 	str.w	r3, [r8]
 8003ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cea:	e0c8      	b.n	8003e7e <_svfiprintf_r+0x1c2>
 8003cec:	2340      	movs	r3, #64	; 0x40
 8003cee:	6163      	str	r3, [r4, #20]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf4:	2320      	movs	r3, #32
 8003cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cfa:	2330      	movs	r3, #48	; 0x30
 8003cfc:	f04f 0b01 	mov.w	fp, #1
 8003d00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d04:	9503      	str	r5, [sp, #12]
 8003d06:	4637      	mov	r7, r6
 8003d08:	463d      	mov	r5, r7
 8003d0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d0e:	b10b      	cbz	r3, 8003d14 <_svfiprintf_r+0x58>
 8003d10:	2b25      	cmp	r3, #37	; 0x25
 8003d12:	d13e      	bne.n	8003d92 <_svfiprintf_r+0xd6>
 8003d14:	ebb7 0a06 	subs.w	sl, r7, r6
 8003d18:	d00b      	beq.n	8003d32 <_svfiprintf_r+0x76>
 8003d1a:	4653      	mov	r3, sl
 8003d1c:	4632      	mov	r2, r6
 8003d1e:	4621      	mov	r1, r4
 8003d20:	4640      	mov	r0, r8
 8003d22:	f7ff ff71 	bl	8003c08 <__ssputs_r>
 8003d26:	3001      	adds	r0, #1
 8003d28:	f000 80a4 	beq.w	8003e74 <_svfiprintf_r+0x1b8>
 8003d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d2e:	4453      	add	r3, sl
 8003d30:	9309      	str	r3, [sp, #36]	; 0x24
 8003d32:	783b      	ldrb	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 809d 	beq.w	8003e74 <_svfiprintf_r+0x1b8>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d44:	9304      	str	r3, [sp, #16]
 8003d46:	9307      	str	r3, [sp, #28]
 8003d48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d4c:	931a      	str	r3, [sp, #104]	; 0x68
 8003d4e:	462f      	mov	r7, r5
 8003d50:	2205      	movs	r2, #5
 8003d52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003d56:	4850      	ldr	r0, [pc, #320]	; (8003e98 <_svfiprintf_r+0x1dc>)
 8003d58:	f000 fa4d 	bl	80041f6 <memchr>
 8003d5c:	9b04      	ldr	r3, [sp, #16]
 8003d5e:	b9d0      	cbnz	r0, 8003d96 <_svfiprintf_r+0xda>
 8003d60:	06d9      	lsls	r1, r3, #27
 8003d62:	bf44      	itt	mi
 8003d64:	2220      	movmi	r2, #32
 8003d66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d6a:	071a      	lsls	r2, r3, #28
 8003d6c:	bf44      	itt	mi
 8003d6e:	222b      	movmi	r2, #43	; 0x2b
 8003d70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d74:	782a      	ldrb	r2, [r5, #0]
 8003d76:	2a2a      	cmp	r2, #42	; 0x2a
 8003d78:	d015      	beq.n	8003da6 <_svfiprintf_r+0xea>
 8003d7a:	462f      	mov	r7, r5
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	250a      	movs	r5, #10
 8003d80:	9a07      	ldr	r2, [sp, #28]
 8003d82:	4639      	mov	r1, r7
 8003d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d88:	3b30      	subs	r3, #48	; 0x30
 8003d8a:	2b09      	cmp	r3, #9
 8003d8c:	d94d      	bls.n	8003e2a <_svfiprintf_r+0x16e>
 8003d8e:	b1b8      	cbz	r0, 8003dc0 <_svfiprintf_r+0x104>
 8003d90:	e00f      	b.n	8003db2 <_svfiprintf_r+0xf6>
 8003d92:	462f      	mov	r7, r5
 8003d94:	e7b8      	b.n	8003d08 <_svfiprintf_r+0x4c>
 8003d96:	4a40      	ldr	r2, [pc, #256]	; (8003e98 <_svfiprintf_r+0x1dc>)
 8003d98:	463d      	mov	r5, r7
 8003d9a:	1a80      	subs	r0, r0, r2
 8003d9c:	fa0b f000 	lsl.w	r0, fp, r0
 8003da0:	4318      	orrs	r0, r3
 8003da2:	9004      	str	r0, [sp, #16]
 8003da4:	e7d3      	b.n	8003d4e <_svfiprintf_r+0x92>
 8003da6:	9a03      	ldr	r2, [sp, #12]
 8003da8:	1d11      	adds	r1, r2, #4
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	9103      	str	r1, [sp, #12]
 8003dae:	2a00      	cmp	r2, #0
 8003db0:	db01      	blt.n	8003db6 <_svfiprintf_r+0xfa>
 8003db2:	9207      	str	r2, [sp, #28]
 8003db4:	e004      	b.n	8003dc0 <_svfiprintf_r+0x104>
 8003db6:	4252      	negs	r2, r2
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	9207      	str	r2, [sp, #28]
 8003dbe:	9304      	str	r3, [sp, #16]
 8003dc0:	783b      	ldrb	r3, [r7, #0]
 8003dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8003dc4:	d10c      	bne.n	8003de0 <_svfiprintf_r+0x124>
 8003dc6:	787b      	ldrb	r3, [r7, #1]
 8003dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8003dca:	d133      	bne.n	8003e34 <_svfiprintf_r+0x178>
 8003dcc:	9b03      	ldr	r3, [sp, #12]
 8003dce:	3702      	adds	r7, #2
 8003dd0:	1d1a      	adds	r2, r3, #4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	9203      	str	r2, [sp, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bfb8      	it	lt
 8003dda:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dde:	9305      	str	r3, [sp, #20]
 8003de0:	4d2e      	ldr	r5, [pc, #184]	; (8003e9c <_svfiprintf_r+0x1e0>)
 8003de2:	2203      	movs	r2, #3
 8003de4:	7839      	ldrb	r1, [r7, #0]
 8003de6:	4628      	mov	r0, r5
 8003de8:	f000 fa05 	bl	80041f6 <memchr>
 8003dec:	b138      	cbz	r0, 8003dfe <_svfiprintf_r+0x142>
 8003dee:	2340      	movs	r3, #64	; 0x40
 8003df0:	1b40      	subs	r0, r0, r5
 8003df2:	fa03 f000 	lsl.w	r0, r3, r0
 8003df6:	9b04      	ldr	r3, [sp, #16]
 8003df8:	3701      	adds	r7, #1
 8003dfa:	4303      	orrs	r3, r0
 8003dfc:	9304      	str	r3, [sp, #16]
 8003dfe:	7839      	ldrb	r1, [r7, #0]
 8003e00:	2206      	movs	r2, #6
 8003e02:	4827      	ldr	r0, [pc, #156]	; (8003ea0 <_svfiprintf_r+0x1e4>)
 8003e04:	1c7e      	adds	r6, r7, #1
 8003e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e0a:	f000 f9f4 	bl	80041f6 <memchr>
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d038      	beq.n	8003e84 <_svfiprintf_r+0x1c8>
 8003e12:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <_svfiprintf_r+0x1e8>)
 8003e14:	bb13      	cbnz	r3, 8003e5c <_svfiprintf_r+0x1a0>
 8003e16:	9b03      	ldr	r3, [sp, #12]
 8003e18:	3307      	adds	r3, #7
 8003e1a:	f023 0307 	bic.w	r3, r3, #7
 8003e1e:	3308      	adds	r3, #8
 8003e20:	9303      	str	r3, [sp, #12]
 8003e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e24:	444b      	add	r3, r9
 8003e26:	9309      	str	r3, [sp, #36]	; 0x24
 8003e28:	e76d      	b.n	8003d06 <_svfiprintf_r+0x4a>
 8003e2a:	fb05 3202 	mla	r2, r5, r2, r3
 8003e2e:	2001      	movs	r0, #1
 8003e30:	460f      	mov	r7, r1
 8003e32:	e7a6      	b.n	8003d82 <_svfiprintf_r+0xc6>
 8003e34:	2300      	movs	r3, #0
 8003e36:	250a      	movs	r5, #10
 8003e38:	4619      	mov	r1, r3
 8003e3a:	3701      	adds	r7, #1
 8003e3c:	9305      	str	r3, [sp, #20]
 8003e3e:	4638      	mov	r0, r7
 8003e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e44:	3a30      	subs	r2, #48	; 0x30
 8003e46:	2a09      	cmp	r2, #9
 8003e48:	d903      	bls.n	8003e52 <_svfiprintf_r+0x196>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0c8      	beq.n	8003de0 <_svfiprintf_r+0x124>
 8003e4e:	9105      	str	r1, [sp, #20]
 8003e50:	e7c6      	b.n	8003de0 <_svfiprintf_r+0x124>
 8003e52:	fb05 2101 	mla	r1, r5, r1, r2
 8003e56:	2301      	movs	r3, #1
 8003e58:	4607      	mov	r7, r0
 8003e5a:	e7f0      	b.n	8003e3e <_svfiprintf_r+0x182>
 8003e5c:	ab03      	add	r3, sp, #12
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	4622      	mov	r2, r4
 8003e62:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <_svfiprintf_r+0x1ec>)
 8003e64:	a904      	add	r1, sp, #16
 8003e66:	4640      	mov	r0, r8
 8003e68:	f3af 8000 	nop.w
 8003e6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003e70:	4681      	mov	r9, r0
 8003e72:	d1d6      	bne.n	8003e22 <_svfiprintf_r+0x166>
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	065b      	lsls	r3, r3, #25
 8003e78:	f53f af35 	bmi.w	8003ce6 <_svfiprintf_r+0x2a>
 8003e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e7e:	b01d      	add	sp, #116	; 0x74
 8003e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e84:	ab03      	add	r3, sp, #12
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	4622      	mov	r2, r4
 8003e8a:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <_svfiprintf_r+0x1ec>)
 8003e8c:	a904      	add	r1, sp, #16
 8003e8e:	4640      	mov	r0, r8
 8003e90:	f000 f882 	bl	8003f98 <_printf_i>
 8003e94:	e7ea      	b.n	8003e6c <_svfiprintf_r+0x1b0>
 8003e96:	bf00      	nop
 8003e98:	08004335 	.word	0x08004335
 8003e9c:	0800433b 	.word	0x0800433b
 8003ea0:	0800433f 	.word	0x0800433f
 8003ea4:	00000000 	.word	0x00000000
 8003ea8:	08003c09 	.word	0x08003c09

08003eac <_printf_common>:
 8003eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb0:	4691      	mov	r9, r2
 8003eb2:	461f      	mov	r7, r3
 8003eb4:	688a      	ldr	r2, [r1, #8]
 8003eb6:	690b      	ldr	r3, [r1, #16]
 8003eb8:	4606      	mov	r6, r0
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	bfb8      	it	lt
 8003ebe:	4613      	movlt	r3, r2
 8003ec0:	f8c9 3000 	str.w	r3, [r9]
 8003ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ec8:	460c      	mov	r4, r1
 8003eca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ece:	b112      	cbz	r2, 8003ed6 <_printf_common+0x2a>
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f8c9 3000 	str.w	r3, [r9]
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	0699      	lsls	r1, r3, #26
 8003eda:	bf42      	ittt	mi
 8003edc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ee0:	3302      	addmi	r3, #2
 8003ee2:	f8c9 3000 	strmi.w	r3, [r9]
 8003ee6:	6825      	ldr	r5, [r4, #0]
 8003ee8:	f015 0506 	ands.w	r5, r5, #6
 8003eec:	d107      	bne.n	8003efe <_printf_common+0x52>
 8003eee:	f104 0a19 	add.w	sl, r4, #25
 8003ef2:	68e3      	ldr	r3, [r4, #12]
 8003ef4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	42ab      	cmp	r3, r5
 8003efc:	dc29      	bgt.n	8003f52 <_printf_common+0xa6>
 8003efe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f02:	6822      	ldr	r2, [r4, #0]
 8003f04:	3300      	adds	r3, #0
 8003f06:	bf18      	it	ne
 8003f08:	2301      	movne	r3, #1
 8003f0a:	0692      	lsls	r2, r2, #26
 8003f0c:	d42e      	bmi.n	8003f6c <_printf_common+0xc0>
 8003f0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f12:	4639      	mov	r1, r7
 8003f14:	4630      	mov	r0, r6
 8003f16:	47c0      	blx	r8
 8003f18:	3001      	adds	r0, #1
 8003f1a:	d021      	beq.n	8003f60 <_printf_common+0xb4>
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	68e5      	ldr	r5, [r4, #12]
 8003f20:	f003 0306 	and.w	r3, r3, #6
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	bf18      	it	ne
 8003f28:	2500      	movne	r5, #0
 8003f2a:	f8d9 2000 	ldr.w	r2, [r9]
 8003f2e:	f04f 0900 	mov.w	r9, #0
 8003f32:	bf08      	it	eq
 8003f34:	1aad      	subeq	r5, r5, r2
 8003f36:	68a3      	ldr	r3, [r4, #8]
 8003f38:	6922      	ldr	r2, [r4, #16]
 8003f3a:	bf08      	it	eq
 8003f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bfc4      	itt	gt
 8003f44:	1a9b      	subgt	r3, r3, r2
 8003f46:	18ed      	addgt	r5, r5, r3
 8003f48:	341a      	adds	r4, #26
 8003f4a:	454d      	cmp	r5, r9
 8003f4c:	d11a      	bne.n	8003f84 <_printf_common+0xd8>
 8003f4e:	2000      	movs	r0, #0
 8003f50:	e008      	b.n	8003f64 <_printf_common+0xb8>
 8003f52:	2301      	movs	r3, #1
 8003f54:	4652      	mov	r2, sl
 8003f56:	4639      	mov	r1, r7
 8003f58:	4630      	mov	r0, r6
 8003f5a:	47c0      	blx	r8
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d103      	bne.n	8003f68 <_printf_common+0xbc>
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295
 8003f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f68:	3501      	adds	r5, #1
 8003f6a:	e7c2      	b.n	8003ef2 <_printf_common+0x46>
 8003f6c:	2030      	movs	r0, #48	; 0x30
 8003f6e:	18e1      	adds	r1, r4, r3
 8003f70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f7a:	4422      	add	r2, r4
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f82:	e7c4      	b.n	8003f0e <_printf_common+0x62>
 8003f84:	2301      	movs	r3, #1
 8003f86:	4622      	mov	r2, r4
 8003f88:	4639      	mov	r1, r7
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	47c0      	blx	r8
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d0e6      	beq.n	8003f60 <_printf_common+0xb4>
 8003f92:	f109 0901 	add.w	r9, r9, #1
 8003f96:	e7d8      	b.n	8003f4a <_printf_common+0x9e>

08003f98 <_printf_i>:
 8003f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	7e09      	ldrb	r1, [r1, #24]
 8003fa4:	b085      	sub	sp, #20
 8003fa6:	296e      	cmp	r1, #110	; 0x6e
 8003fa8:	4617      	mov	r7, r2
 8003faa:	4606      	mov	r6, r0
 8003fac:	4698      	mov	r8, r3
 8003fae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003fb0:	f000 80b3 	beq.w	800411a <_printf_i+0x182>
 8003fb4:	d822      	bhi.n	8003ffc <_printf_i+0x64>
 8003fb6:	2963      	cmp	r1, #99	; 0x63
 8003fb8:	d036      	beq.n	8004028 <_printf_i+0x90>
 8003fba:	d80a      	bhi.n	8003fd2 <_printf_i+0x3a>
 8003fbc:	2900      	cmp	r1, #0
 8003fbe:	f000 80b9 	beq.w	8004134 <_printf_i+0x19c>
 8003fc2:	2958      	cmp	r1, #88	; 0x58
 8003fc4:	f000 8083 	beq.w	80040ce <_printf_i+0x136>
 8003fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003fd0:	e032      	b.n	8004038 <_printf_i+0xa0>
 8003fd2:	2964      	cmp	r1, #100	; 0x64
 8003fd4:	d001      	beq.n	8003fda <_printf_i+0x42>
 8003fd6:	2969      	cmp	r1, #105	; 0x69
 8003fd8:	d1f6      	bne.n	8003fc8 <_printf_i+0x30>
 8003fda:	6820      	ldr	r0, [r4, #0]
 8003fdc:	6813      	ldr	r3, [r2, #0]
 8003fde:	0605      	lsls	r5, r0, #24
 8003fe0:	f103 0104 	add.w	r1, r3, #4
 8003fe4:	d52a      	bpl.n	800403c <_printf_i+0xa4>
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6011      	str	r1, [r2, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	da03      	bge.n	8003ff6 <_printf_i+0x5e>
 8003fee:	222d      	movs	r2, #45	; 0x2d
 8003ff0:	425b      	negs	r3, r3
 8003ff2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ff6:	486f      	ldr	r0, [pc, #444]	; (80041b4 <_printf_i+0x21c>)
 8003ff8:	220a      	movs	r2, #10
 8003ffa:	e039      	b.n	8004070 <_printf_i+0xd8>
 8003ffc:	2973      	cmp	r1, #115	; 0x73
 8003ffe:	f000 809d 	beq.w	800413c <_printf_i+0x1a4>
 8004002:	d808      	bhi.n	8004016 <_printf_i+0x7e>
 8004004:	296f      	cmp	r1, #111	; 0x6f
 8004006:	d020      	beq.n	800404a <_printf_i+0xb2>
 8004008:	2970      	cmp	r1, #112	; 0x70
 800400a:	d1dd      	bne.n	8003fc8 <_printf_i+0x30>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	e003      	b.n	800401e <_printf_i+0x86>
 8004016:	2975      	cmp	r1, #117	; 0x75
 8004018:	d017      	beq.n	800404a <_printf_i+0xb2>
 800401a:	2978      	cmp	r1, #120	; 0x78
 800401c:	d1d4      	bne.n	8003fc8 <_printf_i+0x30>
 800401e:	2378      	movs	r3, #120	; 0x78
 8004020:	4865      	ldr	r0, [pc, #404]	; (80041b8 <_printf_i+0x220>)
 8004022:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004026:	e055      	b.n	80040d4 <_printf_i+0x13c>
 8004028:	6813      	ldr	r3, [r2, #0]
 800402a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800402e:	1d19      	adds	r1, r3, #4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6011      	str	r1, [r2, #0]
 8004034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004038:	2301      	movs	r3, #1
 800403a:	e08c      	b.n	8004156 <_printf_i+0x1be>
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004042:	6011      	str	r1, [r2, #0]
 8004044:	bf18      	it	ne
 8004046:	b21b      	sxthne	r3, r3
 8004048:	e7cf      	b.n	8003fea <_printf_i+0x52>
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	6825      	ldr	r5, [r4, #0]
 800404e:	1d18      	adds	r0, r3, #4
 8004050:	6010      	str	r0, [r2, #0]
 8004052:	0628      	lsls	r0, r5, #24
 8004054:	d501      	bpl.n	800405a <_printf_i+0xc2>
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	e002      	b.n	8004060 <_printf_i+0xc8>
 800405a:	0668      	lsls	r0, r5, #25
 800405c:	d5fb      	bpl.n	8004056 <_printf_i+0xbe>
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	296f      	cmp	r1, #111	; 0x6f
 8004062:	bf14      	ite	ne
 8004064:	220a      	movne	r2, #10
 8004066:	2208      	moveq	r2, #8
 8004068:	4852      	ldr	r0, [pc, #328]	; (80041b4 <_printf_i+0x21c>)
 800406a:	2100      	movs	r1, #0
 800406c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004070:	6865      	ldr	r5, [r4, #4]
 8004072:	2d00      	cmp	r5, #0
 8004074:	60a5      	str	r5, [r4, #8]
 8004076:	f2c0 8095 	blt.w	80041a4 <_printf_i+0x20c>
 800407a:	6821      	ldr	r1, [r4, #0]
 800407c:	f021 0104 	bic.w	r1, r1, #4
 8004080:	6021      	str	r1, [r4, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d13d      	bne.n	8004102 <_printf_i+0x16a>
 8004086:	2d00      	cmp	r5, #0
 8004088:	f040 808e 	bne.w	80041a8 <_printf_i+0x210>
 800408c:	4665      	mov	r5, ip
 800408e:	2a08      	cmp	r2, #8
 8004090:	d10b      	bne.n	80040aa <_printf_i+0x112>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	07db      	lsls	r3, r3, #31
 8004096:	d508      	bpl.n	80040aa <_printf_i+0x112>
 8004098:	6923      	ldr	r3, [r4, #16]
 800409a:	6862      	ldr	r2, [r4, #4]
 800409c:	429a      	cmp	r2, r3
 800409e:	bfde      	ittt	le
 80040a0:	2330      	movle	r3, #48	; 0x30
 80040a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040aa:	ebac 0305 	sub.w	r3, ip, r5
 80040ae:	6123      	str	r3, [r4, #16]
 80040b0:	f8cd 8000 	str.w	r8, [sp]
 80040b4:	463b      	mov	r3, r7
 80040b6:	aa03      	add	r2, sp, #12
 80040b8:	4621      	mov	r1, r4
 80040ba:	4630      	mov	r0, r6
 80040bc:	f7ff fef6 	bl	8003eac <_printf_common>
 80040c0:	3001      	adds	r0, #1
 80040c2:	d14d      	bne.n	8004160 <_printf_i+0x1c8>
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	b005      	add	sp, #20
 80040ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040ce:	4839      	ldr	r0, [pc, #228]	; (80041b4 <_printf_i+0x21c>)
 80040d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80040d4:	6813      	ldr	r3, [r2, #0]
 80040d6:	6821      	ldr	r1, [r4, #0]
 80040d8:	1d1d      	adds	r5, r3, #4
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6015      	str	r5, [r2, #0]
 80040de:	060a      	lsls	r2, r1, #24
 80040e0:	d50b      	bpl.n	80040fa <_printf_i+0x162>
 80040e2:	07ca      	lsls	r2, r1, #31
 80040e4:	bf44      	itt	mi
 80040e6:	f041 0120 	orrmi.w	r1, r1, #32
 80040ea:	6021      	strmi	r1, [r4, #0]
 80040ec:	b91b      	cbnz	r3, 80040f6 <_printf_i+0x15e>
 80040ee:	6822      	ldr	r2, [r4, #0]
 80040f0:	f022 0220 	bic.w	r2, r2, #32
 80040f4:	6022      	str	r2, [r4, #0]
 80040f6:	2210      	movs	r2, #16
 80040f8:	e7b7      	b.n	800406a <_printf_i+0xd2>
 80040fa:	064d      	lsls	r5, r1, #25
 80040fc:	bf48      	it	mi
 80040fe:	b29b      	uxthmi	r3, r3
 8004100:	e7ef      	b.n	80040e2 <_printf_i+0x14a>
 8004102:	4665      	mov	r5, ip
 8004104:	fbb3 f1f2 	udiv	r1, r3, r2
 8004108:	fb02 3311 	mls	r3, r2, r1, r3
 800410c:	5cc3      	ldrb	r3, [r0, r3]
 800410e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004112:	460b      	mov	r3, r1
 8004114:	2900      	cmp	r1, #0
 8004116:	d1f5      	bne.n	8004104 <_printf_i+0x16c>
 8004118:	e7b9      	b.n	800408e <_printf_i+0xf6>
 800411a:	6813      	ldr	r3, [r2, #0]
 800411c:	6825      	ldr	r5, [r4, #0]
 800411e:	1d18      	adds	r0, r3, #4
 8004120:	6961      	ldr	r1, [r4, #20]
 8004122:	6010      	str	r0, [r2, #0]
 8004124:	0628      	lsls	r0, r5, #24
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	d501      	bpl.n	800412e <_printf_i+0x196>
 800412a:	6019      	str	r1, [r3, #0]
 800412c:	e002      	b.n	8004134 <_printf_i+0x19c>
 800412e:	066a      	lsls	r2, r5, #25
 8004130:	d5fb      	bpl.n	800412a <_printf_i+0x192>
 8004132:	8019      	strh	r1, [r3, #0]
 8004134:	2300      	movs	r3, #0
 8004136:	4665      	mov	r5, ip
 8004138:	6123      	str	r3, [r4, #16]
 800413a:	e7b9      	b.n	80040b0 <_printf_i+0x118>
 800413c:	6813      	ldr	r3, [r2, #0]
 800413e:	1d19      	adds	r1, r3, #4
 8004140:	6011      	str	r1, [r2, #0]
 8004142:	681d      	ldr	r5, [r3, #0]
 8004144:	6862      	ldr	r2, [r4, #4]
 8004146:	2100      	movs	r1, #0
 8004148:	4628      	mov	r0, r5
 800414a:	f000 f854 	bl	80041f6 <memchr>
 800414e:	b108      	cbz	r0, 8004154 <_printf_i+0x1bc>
 8004150:	1b40      	subs	r0, r0, r5
 8004152:	6060      	str	r0, [r4, #4]
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	6123      	str	r3, [r4, #16]
 8004158:	2300      	movs	r3, #0
 800415a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800415e:	e7a7      	b.n	80040b0 <_printf_i+0x118>
 8004160:	6923      	ldr	r3, [r4, #16]
 8004162:	462a      	mov	r2, r5
 8004164:	4639      	mov	r1, r7
 8004166:	4630      	mov	r0, r6
 8004168:	47c0      	blx	r8
 800416a:	3001      	adds	r0, #1
 800416c:	d0aa      	beq.n	80040c4 <_printf_i+0x12c>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	079b      	lsls	r3, r3, #30
 8004172:	d413      	bmi.n	800419c <_printf_i+0x204>
 8004174:	68e0      	ldr	r0, [r4, #12]
 8004176:	9b03      	ldr	r3, [sp, #12]
 8004178:	4298      	cmp	r0, r3
 800417a:	bfb8      	it	lt
 800417c:	4618      	movlt	r0, r3
 800417e:	e7a3      	b.n	80040c8 <_printf_i+0x130>
 8004180:	2301      	movs	r3, #1
 8004182:	464a      	mov	r2, r9
 8004184:	4639      	mov	r1, r7
 8004186:	4630      	mov	r0, r6
 8004188:	47c0      	blx	r8
 800418a:	3001      	adds	r0, #1
 800418c:	d09a      	beq.n	80040c4 <_printf_i+0x12c>
 800418e:	3501      	adds	r5, #1
 8004190:	68e3      	ldr	r3, [r4, #12]
 8004192:	9a03      	ldr	r2, [sp, #12]
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	42ab      	cmp	r3, r5
 8004198:	dcf2      	bgt.n	8004180 <_printf_i+0x1e8>
 800419a:	e7eb      	b.n	8004174 <_printf_i+0x1dc>
 800419c:	2500      	movs	r5, #0
 800419e:	f104 0919 	add.w	r9, r4, #25
 80041a2:	e7f5      	b.n	8004190 <_printf_i+0x1f8>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ac      	bne.n	8004102 <_printf_i+0x16a>
 80041a8:	7803      	ldrb	r3, [r0, #0]
 80041aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b2:	e76c      	b.n	800408e <_printf_i+0xf6>
 80041b4:	08004346 	.word	0x08004346
 80041b8:	08004357 	.word	0x08004357

080041bc <_sbrk_r>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	2300      	movs	r3, #0
 80041c0:	4c05      	ldr	r4, [pc, #20]	; (80041d8 <_sbrk_r+0x1c>)
 80041c2:	4605      	mov	r5, r0
 80041c4:	4608      	mov	r0, r1
 80041c6:	6023      	str	r3, [r4, #0]
 80041c8:	f7fd fb5c 	bl	8001884 <_sbrk>
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	d102      	bne.n	80041d6 <_sbrk_r+0x1a>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	b103      	cbz	r3, 80041d6 <_sbrk_r+0x1a>
 80041d4:	602b      	str	r3, [r5, #0]
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	20000314 	.word	0x20000314

080041dc <__ascii_wctomb>:
 80041dc:	b149      	cbz	r1, 80041f2 <__ascii_wctomb+0x16>
 80041de:	2aff      	cmp	r2, #255	; 0xff
 80041e0:	bf8b      	itete	hi
 80041e2:	238a      	movhi	r3, #138	; 0x8a
 80041e4:	700a      	strbls	r2, [r1, #0]
 80041e6:	6003      	strhi	r3, [r0, #0]
 80041e8:	2001      	movls	r0, #1
 80041ea:	bf88      	it	hi
 80041ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80041f0:	4770      	bx	lr
 80041f2:	4608      	mov	r0, r1
 80041f4:	4770      	bx	lr

080041f6 <memchr>:
 80041f6:	b510      	push	{r4, lr}
 80041f8:	b2c9      	uxtb	r1, r1
 80041fa:	4402      	add	r2, r0
 80041fc:	4290      	cmp	r0, r2
 80041fe:	4603      	mov	r3, r0
 8004200:	d101      	bne.n	8004206 <memchr+0x10>
 8004202:	2300      	movs	r3, #0
 8004204:	e003      	b.n	800420e <memchr+0x18>
 8004206:	781c      	ldrb	r4, [r3, #0]
 8004208:	3001      	adds	r0, #1
 800420a:	428c      	cmp	r4, r1
 800420c:	d1f6      	bne.n	80041fc <memchr+0x6>
 800420e:	4618      	mov	r0, r3
 8004210:	bd10      	pop	{r4, pc}

08004212 <memcpy>:
 8004212:	b510      	push	{r4, lr}
 8004214:	1e43      	subs	r3, r0, #1
 8004216:	440a      	add	r2, r1
 8004218:	4291      	cmp	r1, r2
 800421a:	d100      	bne.n	800421e <memcpy+0xc>
 800421c:	bd10      	pop	{r4, pc}
 800421e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004226:	e7f7      	b.n	8004218 <memcpy+0x6>

08004228 <memmove>:
 8004228:	4288      	cmp	r0, r1
 800422a:	b510      	push	{r4, lr}
 800422c:	eb01 0302 	add.w	r3, r1, r2
 8004230:	d807      	bhi.n	8004242 <memmove+0x1a>
 8004232:	1e42      	subs	r2, r0, #1
 8004234:	4299      	cmp	r1, r3
 8004236:	d00a      	beq.n	800424e <memmove+0x26>
 8004238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800423c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004240:	e7f8      	b.n	8004234 <memmove+0xc>
 8004242:	4283      	cmp	r3, r0
 8004244:	d9f5      	bls.n	8004232 <memmove+0xa>
 8004246:	1881      	adds	r1, r0, r2
 8004248:	1ad2      	subs	r2, r2, r3
 800424a:	42d3      	cmn	r3, r2
 800424c:	d100      	bne.n	8004250 <memmove+0x28>
 800424e:	bd10      	pop	{r4, pc}
 8004250:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004254:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004258:	e7f7      	b.n	800424a <memmove+0x22>

0800425a <__malloc_lock>:
 800425a:	4770      	bx	lr

0800425c <__malloc_unlock>:
 800425c:	4770      	bx	lr
	...

08004260 <_free_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4605      	mov	r5, r0
 8004264:	2900      	cmp	r1, #0
 8004266:	d043      	beq.n	80042f0 <_free_r+0x90>
 8004268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800426c:	1f0c      	subs	r4, r1, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	bfb8      	it	lt
 8004272:	18e4      	addlt	r4, r4, r3
 8004274:	f7ff fff1 	bl	800425a <__malloc_lock>
 8004278:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <_free_r+0x94>)
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	4610      	mov	r0, r2
 800427e:	b933      	cbnz	r3, 800428e <_free_r+0x2e>
 8004280:	6063      	str	r3, [r4, #4]
 8004282:	6014      	str	r4, [r2, #0]
 8004284:	4628      	mov	r0, r5
 8004286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800428a:	f7ff bfe7 	b.w	800425c <__malloc_unlock>
 800428e:	42a3      	cmp	r3, r4
 8004290:	d90b      	bls.n	80042aa <_free_r+0x4a>
 8004292:	6821      	ldr	r1, [r4, #0]
 8004294:	1862      	adds	r2, r4, r1
 8004296:	4293      	cmp	r3, r2
 8004298:	bf01      	itttt	eq
 800429a:	681a      	ldreq	r2, [r3, #0]
 800429c:	685b      	ldreq	r3, [r3, #4]
 800429e:	1852      	addeq	r2, r2, r1
 80042a0:	6022      	streq	r2, [r4, #0]
 80042a2:	6063      	str	r3, [r4, #4]
 80042a4:	6004      	str	r4, [r0, #0]
 80042a6:	e7ed      	b.n	8004284 <_free_r+0x24>
 80042a8:	4613      	mov	r3, r2
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	b10a      	cbz	r2, 80042b2 <_free_r+0x52>
 80042ae:	42a2      	cmp	r2, r4
 80042b0:	d9fa      	bls.n	80042a8 <_free_r+0x48>
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	1858      	adds	r0, r3, r1
 80042b6:	42a0      	cmp	r0, r4
 80042b8:	d10b      	bne.n	80042d2 <_free_r+0x72>
 80042ba:	6820      	ldr	r0, [r4, #0]
 80042bc:	4401      	add	r1, r0
 80042be:	1858      	adds	r0, r3, r1
 80042c0:	4282      	cmp	r2, r0
 80042c2:	6019      	str	r1, [r3, #0]
 80042c4:	d1de      	bne.n	8004284 <_free_r+0x24>
 80042c6:	6810      	ldr	r0, [r2, #0]
 80042c8:	6852      	ldr	r2, [r2, #4]
 80042ca:	4401      	add	r1, r0
 80042cc:	6019      	str	r1, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	e7d8      	b.n	8004284 <_free_r+0x24>
 80042d2:	d902      	bls.n	80042da <_free_r+0x7a>
 80042d4:	230c      	movs	r3, #12
 80042d6:	602b      	str	r3, [r5, #0]
 80042d8:	e7d4      	b.n	8004284 <_free_r+0x24>
 80042da:	6820      	ldr	r0, [r4, #0]
 80042dc:	1821      	adds	r1, r4, r0
 80042de:	428a      	cmp	r2, r1
 80042e0:	bf01      	itttt	eq
 80042e2:	6811      	ldreq	r1, [r2, #0]
 80042e4:	6852      	ldreq	r2, [r2, #4]
 80042e6:	1809      	addeq	r1, r1, r0
 80042e8:	6021      	streq	r1, [r4, #0]
 80042ea:	6062      	str	r2, [r4, #4]
 80042ec:	605c      	str	r4, [r3, #4]
 80042ee:	e7c9      	b.n	8004284 <_free_r+0x24>
 80042f0:	bd38      	pop	{r3, r4, r5, pc}
 80042f2:	bf00      	nop
 80042f4:	20000228 	.word	0x20000228

080042f8 <_malloc_usable_size_r>:
 80042f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042fc:	1f18      	subs	r0, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bfbc      	itt	lt
 8004302:	580b      	ldrlt	r3, [r1, r0]
 8004304:	18c0      	addlt	r0, r0, r3
 8004306:	4770      	bx	lr

08004308 <_init>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	bf00      	nop
 800430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430e:	bc08      	pop	{r3}
 8004310:	469e      	mov	lr, r3
 8004312:	4770      	bx	lr

08004314 <_fini>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	bf00      	nop
 8004318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431a:	bc08      	pop	{r3}
 800431c:	469e      	mov	lr, r3
 800431e:	4770      	bx	lr
