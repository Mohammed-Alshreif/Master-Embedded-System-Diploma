
BLDC_MOTOR.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000427c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044fc  080044fc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  080044fc  080044fc  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044fc  080044fc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08004504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200001f8  080046f8  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080046f8  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000062d4  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001038  00000000  00000000  000264f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002d8  00000000  00000000  00027530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000250  00000000  00000000  00027808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003588  00000000  00000000  00027a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003c48  00000000  00000000  0002afe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bb6e  00000000  00000000  0002ec28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003a796  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001104  00000000  00000000  0003a814  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001f8 	.word	0x200001f8
 800014c:	00000000 	.word	0x00000000
 8000150:	08004394 	.word	0x08004394

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001fc 	.word	0x200001fc
 800016c:	08004394 	.word	0x08004394

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2iz>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000924:	d215      	bcs.n	8000952 <__aeabi_d2iz+0x36>
 8000926:	d511      	bpl.n	800094c <__aeabi_d2iz+0x30>
 8000928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d912      	bls.n	8000958 <__aeabi_d2iz+0x3c>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000942:	fa23 f002 	lsr.w	r0, r3, r2
 8000946:	bf18      	it	ne
 8000948:	4240      	negne	r0, r0
 800094a:	4770      	bx	lr
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	4770      	bx	lr
 8000952:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000956:	d105      	bne.n	8000964 <__aeabi_d2iz+0x48>
 8000958:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800095c:	bf08      	it	eq
 800095e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <__aeabi_frsub>:
 800096c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000970:	e002      	b.n	8000978 <__addsf3>
 8000972:	bf00      	nop

08000974 <__aeabi_fsub>:
 8000974:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000978 <__addsf3>:
 8000978:	0042      	lsls	r2, r0, #1
 800097a:	bf1f      	itttt	ne
 800097c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000980:	ea92 0f03 	teqne	r2, r3
 8000984:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000988:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800098c:	d06a      	beq.n	8000a64 <__addsf3+0xec>
 800098e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000992:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000996:	bfc1      	itttt	gt
 8000998:	18d2      	addgt	r2, r2, r3
 800099a:	4041      	eorgt	r1, r0
 800099c:	4048      	eorgt	r0, r1
 800099e:	4041      	eorgt	r1, r0
 80009a0:	bfb8      	it	lt
 80009a2:	425b      	neglt	r3, r3
 80009a4:	2b19      	cmp	r3, #25
 80009a6:	bf88      	it	hi
 80009a8:	4770      	bxhi	lr
 80009aa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009c6:	bf18      	it	ne
 80009c8:	4249      	negne	r1, r1
 80009ca:	ea92 0f03 	teq	r2, r3
 80009ce:	d03f      	beq.n	8000a50 <__addsf3+0xd8>
 80009d0:	f1a2 0201 	sub.w	r2, r2, #1
 80009d4:	fa41 fc03 	asr.w	ip, r1, r3
 80009d8:	eb10 000c 	adds.w	r0, r0, ip
 80009dc:	f1c3 0320 	rsb	r3, r3, #32
 80009e0:	fa01 f103 	lsl.w	r1, r1, r3
 80009e4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009e8:	d502      	bpl.n	80009f0 <__addsf3+0x78>
 80009ea:	4249      	negs	r1, r1
 80009ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009f4:	d313      	bcc.n	8000a1e <__addsf3+0xa6>
 80009f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009fa:	d306      	bcc.n	8000a0a <__addsf3+0x92>
 80009fc:	0840      	lsrs	r0, r0, #1
 80009fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a02:	f102 0201 	add.w	r2, r2, #1
 8000a06:	2afe      	cmp	r2, #254	; 0xfe
 8000a08:	d251      	bcs.n	8000aae <__addsf3+0x136>
 8000a0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a12:	bf08      	it	eq
 8000a14:	f020 0001 	biceq.w	r0, r0, #1
 8000a18:	ea40 0003 	orr.w	r0, r0, r3
 8000a1c:	4770      	bx	lr
 8000a1e:	0049      	lsls	r1, r1, #1
 8000a20:	eb40 0000 	adc.w	r0, r0, r0
 8000a24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a28:	f1a2 0201 	sub.w	r2, r2, #1
 8000a2c:	d1ed      	bne.n	8000a0a <__addsf3+0x92>
 8000a2e:	fab0 fc80 	clz	ip, r0
 8000a32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a36:	ebb2 020c 	subs.w	r2, r2, ip
 8000a3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a3e:	bfaa      	itet	ge
 8000a40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a44:	4252      	neglt	r2, r2
 8000a46:	4318      	orrge	r0, r3
 8000a48:	bfbc      	itt	lt
 8000a4a:	40d0      	lsrlt	r0, r2
 8000a4c:	4318      	orrlt	r0, r3
 8000a4e:	4770      	bx	lr
 8000a50:	f092 0f00 	teq	r2, #0
 8000a54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a58:	bf06      	itte	eq
 8000a5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a5e:	3201      	addeq	r2, #1
 8000a60:	3b01      	subne	r3, #1
 8000a62:	e7b5      	b.n	80009d0 <__addsf3+0x58>
 8000a64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a6c:	bf18      	it	ne
 8000a6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a72:	d021      	beq.n	8000ab8 <__addsf3+0x140>
 8000a74:	ea92 0f03 	teq	r2, r3
 8000a78:	d004      	beq.n	8000a84 <__addsf3+0x10c>
 8000a7a:	f092 0f00 	teq	r2, #0
 8000a7e:	bf08      	it	eq
 8000a80:	4608      	moveq	r0, r1
 8000a82:	4770      	bx	lr
 8000a84:	ea90 0f01 	teq	r0, r1
 8000a88:	bf1c      	itt	ne
 8000a8a:	2000      	movne	r0, #0
 8000a8c:	4770      	bxne	lr
 8000a8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a92:	d104      	bne.n	8000a9e <__addsf3+0x126>
 8000a94:	0040      	lsls	r0, r0, #1
 8000a96:	bf28      	it	cs
 8000a98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a9c:	4770      	bx	lr
 8000a9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aa2:	bf3c      	itt	cc
 8000aa4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bxcc	lr
 8000aaa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ab2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab6:	4770      	bx	lr
 8000ab8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000abc:	bf16      	itet	ne
 8000abe:	4608      	movne	r0, r1
 8000ac0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ac4:	4601      	movne	r1, r0
 8000ac6:	0242      	lsls	r2, r0, #9
 8000ac8:	bf06      	itte	eq
 8000aca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ace:	ea90 0f01 	teqeq	r0, r1
 8000ad2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_ui2f>:
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	e004      	b.n	8000ae8 <__aeabi_i2f+0x8>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_i2f>:
 8000ae0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ae4:	bf48      	it	mi
 8000ae6:	4240      	negmi	r0, r0
 8000ae8:	ea5f 0c00 	movs.w	ip, r0
 8000aec:	bf08      	it	eq
 8000aee:	4770      	bxeq	lr
 8000af0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000af4:	4601      	mov	r1, r0
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	e01c      	b.n	8000b36 <__aeabi_l2f+0x2a>

08000afc <__aeabi_ul2f>:
 8000afc:	ea50 0201 	orrs.w	r2, r0, r1
 8000b00:	bf08      	it	eq
 8000b02:	4770      	bxeq	lr
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	e00a      	b.n	8000b20 <__aeabi_l2f+0x14>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_l2f>:
 8000b0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b10:	bf08      	it	eq
 8000b12:	4770      	bxeq	lr
 8000b14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__aeabi_l2f+0x14>
 8000b1a:	4240      	negs	r0, r0
 8000b1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b20:	ea5f 0c01 	movs.w	ip, r1
 8000b24:	bf02      	ittt	eq
 8000b26:	4684      	moveq	ip, r0
 8000b28:	4601      	moveq	r1, r0
 8000b2a:	2000      	moveq	r0, #0
 8000b2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b30:	bf08      	it	eq
 8000b32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b3a:	fabc f28c 	clz	r2, ip
 8000b3e:	3a08      	subs	r2, #8
 8000b40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b44:	db10      	blt.n	8000b68 <__aeabi_l2f+0x5c>
 8000b46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b4a:	4463      	add	r3, ip
 8000b4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b50:	f1c2 0220 	rsb	r2, r2, #32
 8000b54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b58:	fa20 f202 	lsr.w	r2, r0, r2
 8000b5c:	eb43 0002 	adc.w	r0, r3, r2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f102 0220 	add.w	r2, r2, #32
 8000b6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b78:	fa21 f202 	lsr.w	r2, r1, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_fmul>:
 8000b88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b90:	bf1e      	ittt	ne
 8000b92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b96:	ea92 0f0c 	teqne	r2, ip
 8000b9a:	ea93 0f0c 	teqne	r3, ip
 8000b9e:	d06f      	beq.n	8000c80 <__aeabi_fmul+0xf8>
 8000ba0:	441a      	add	r2, r3
 8000ba2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ba6:	0240      	lsls	r0, r0, #9
 8000ba8:	bf18      	it	ne
 8000baa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bae:	d01e      	beq.n	8000bee <__aeabi_fmul+0x66>
 8000bb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000bc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bc8:	bf3e      	ittt	cc
 8000bca:	0049      	lslcc	r1, r1, #1
 8000bcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bd0:	005b      	lslcc	r3, r3, #1
 8000bd2:	ea40 0001 	orr.w	r0, r0, r1
 8000bd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bda:	2afd      	cmp	r2, #253	; 0xfd
 8000bdc:	d81d      	bhi.n	8000c1a <__aeabi_fmul+0x92>
 8000bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000be2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be6:	bf08      	it	eq
 8000be8:	f020 0001 	biceq.w	r0, r0, #1
 8000bec:	4770      	bx	lr
 8000bee:	f090 0f00 	teq	r0, #0
 8000bf2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bf6:	bf08      	it	eq
 8000bf8:	0249      	lsleq	r1, r1, #9
 8000bfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c02:	3a7f      	subs	r2, #127	; 0x7f
 8000c04:	bfc2      	ittt	gt
 8000c06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c0e:	4770      	bxgt	lr
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	dc5d      	bgt.n	8000cd8 <__aeabi_fmul+0x150>
 8000c1c:	f112 0f19 	cmn.w	r2, #25
 8000c20:	bfdc      	itt	le
 8000c22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c26:	4770      	bxle	lr
 8000c28:	f1c2 0200 	rsb	r2, r2, #0
 8000c2c:	0041      	lsls	r1, r0, #1
 8000c2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c32:	f1c2 0220 	rsb	r2, r2, #32
 8000c36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c3e:	f140 0000 	adc.w	r0, r0, #0
 8000c42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c46:	bf08      	it	eq
 8000c48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c4c:	4770      	bx	lr
 8000c4e:	f092 0f00 	teq	r2, #0
 8000c52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c56:	bf02      	ittt	eq
 8000c58:	0040      	lsleq	r0, r0, #1
 8000c5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c5e:	3a01      	subeq	r2, #1
 8000c60:	d0f9      	beq.n	8000c56 <__aeabi_fmul+0xce>
 8000c62:	ea40 000c 	orr.w	r0, r0, ip
 8000c66:	f093 0f00 	teq	r3, #0
 8000c6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c6e:	bf02      	ittt	eq
 8000c70:	0049      	lsleq	r1, r1, #1
 8000c72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c76:	3b01      	subeq	r3, #1
 8000c78:	d0f9      	beq.n	8000c6e <__aeabi_fmul+0xe6>
 8000c7a:	ea41 010c 	orr.w	r1, r1, ip
 8000c7e:	e78f      	b.n	8000ba0 <__aeabi_fmul+0x18>
 8000c80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c84:	ea92 0f0c 	teq	r2, ip
 8000c88:	bf18      	it	ne
 8000c8a:	ea93 0f0c 	teqne	r3, ip
 8000c8e:	d00a      	beq.n	8000ca6 <__aeabi_fmul+0x11e>
 8000c90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c94:	bf18      	it	ne
 8000c96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c9a:	d1d8      	bne.n	8000c4e <__aeabi_fmul+0xc6>
 8000c9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ca0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f090 0f00 	teq	r0, #0
 8000caa:	bf17      	itett	ne
 8000cac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cb0:	4608      	moveq	r0, r1
 8000cb2:	f091 0f00 	teqne	r1, #0
 8000cb6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cba:	d014      	beq.n	8000ce6 <__aeabi_fmul+0x15e>
 8000cbc:	ea92 0f0c 	teq	r2, ip
 8000cc0:	d101      	bne.n	8000cc6 <__aeabi_fmul+0x13e>
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	d10f      	bne.n	8000ce6 <__aeabi_fmul+0x15e>
 8000cc6:	ea93 0f0c 	teq	r3, ip
 8000cca:	d103      	bne.n	8000cd4 <__aeabi_fmul+0x14c>
 8000ccc:	024b      	lsls	r3, r1, #9
 8000cce:	bf18      	it	ne
 8000cd0:	4608      	movne	r0, r1
 8000cd2:	d108      	bne.n	8000ce6 <__aeabi_fmul+0x15e>
 8000cd4:	ea80 0001 	eor.w	r0, r0, r1
 8000cd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cee:	4770      	bx	lr

08000cf0 <__aeabi_fdiv>:
 8000cf0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cf8:	bf1e      	ittt	ne
 8000cfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cfe:	ea92 0f0c 	teqne	r2, ip
 8000d02:	ea93 0f0c 	teqne	r3, ip
 8000d06:	d069      	beq.n	8000ddc <__aeabi_fdiv+0xec>
 8000d08:	eba2 0203 	sub.w	r2, r2, r3
 8000d0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d10:	0249      	lsls	r1, r1, #9
 8000d12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d16:	d037      	beq.n	8000d88 <__aeabi_fdiv+0x98>
 8000d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	bf38      	it	cc
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d36:	428b      	cmp	r3, r1
 8000d38:	bf24      	itt	cs
 8000d3a:	1a5b      	subcs	r3, r3, r1
 8000d3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d44:	bf24      	itt	cs
 8000d46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d52:	bf24      	itt	cs
 8000d54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	bf18      	it	ne
 8000d6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d72:	d1e0      	bne.n	8000d36 <__aeabi_fdiv+0x46>
 8000d74:	2afd      	cmp	r2, #253	; 0xfd
 8000d76:	f63f af50 	bhi.w	8000c1a <__aeabi_fmul+0x92>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d80:	bf08      	it	eq
 8000d82:	f020 0001 	biceq.w	r0, r0, #1
 8000d86:	4770      	bx	lr
 8000d88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d90:	327f      	adds	r2, #127	; 0x7f
 8000d92:	bfc2      	ittt	gt
 8000d94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9c:	4770      	bxgt	lr
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da2:	f04f 0300 	mov.w	r3, #0
 8000da6:	3a01      	subs	r2, #1
 8000da8:	e737      	b.n	8000c1a <__aeabi_fmul+0x92>
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fdiv+0xc2>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fdiv+0xda>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e795      	b.n	8000d08 <__aeabi_fdiv+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	d108      	bne.n	8000df8 <__aeabi_fdiv+0x108>
 8000de6:	0242      	lsls	r2, r0, #9
 8000de8:	f47f af7d 	bne.w	8000ce6 <__aeabi_fmul+0x15e>
 8000dec:	ea93 0f0c 	teq	r3, ip
 8000df0:	f47f af70 	bne.w	8000cd4 <__aeabi_fmul+0x14c>
 8000df4:	4608      	mov	r0, r1
 8000df6:	e776      	b.n	8000ce6 <__aeabi_fmul+0x15e>
 8000df8:	ea93 0f0c 	teq	r3, ip
 8000dfc:	d104      	bne.n	8000e08 <__aeabi_fdiv+0x118>
 8000dfe:	024b      	lsls	r3, r1, #9
 8000e00:	f43f af4c 	beq.w	8000c9c <__aeabi_fmul+0x114>
 8000e04:	4608      	mov	r0, r1
 8000e06:	e76e      	b.n	8000ce6 <__aeabi_fmul+0x15e>
 8000e08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e0c:	bf18      	it	ne
 8000e0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e12:	d1ca      	bne.n	8000daa <__aeabi_fdiv+0xba>
 8000e14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e18:	f47f af5c 	bne.w	8000cd4 <__aeabi_fmul+0x14c>
 8000e1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e20:	f47f af3c 	bne.w	8000c9c <__aeabi_fmul+0x114>
 8000e24:	e75f      	b.n	8000ce6 <__aeabi_fmul+0x15e>
 8000e26:	bf00      	nop

08000e28 <__gesf2>:
 8000e28:	f04f 3cff 	mov.w	ip, #4294967295
 8000e2c:	e006      	b.n	8000e3c <__cmpsf2+0x4>
 8000e2e:	bf00      	nop

08000e30 <__lesf2>:
 8000e30:	f04f 0c01 	mov.w	ip, #1
 8000e34:	e002      	b.n	8000e3c <__cmpsf2+0x4>
 8000e36:	bf00      	nop

08000e38 <__cmpsf2>:
 8000e38:	f04f 0c01 	mov.w	ip, #1
 8000e3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e4c:	bf18      	it	ne
 8000e4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e52:	d011      	beq.n	8000e78 <__cmpsf2+0x40>
 8000e54:	b001      	add	sp, #4
 8000e56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e5a:	bf18      	it	ne
 8000e5c:	ea90 0f01 	teqne	r0, r1
 8000e60:	bf58      	it	pl
 8000e62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e66:	bf88      	it	hi
 8000e68:	17c8      	asrhi	r0, r1, #31
 8000e6a:	bf38      	it	cc
 8000e6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e70:	bf18      	it	ne
 8000e72:	f040 0001 	orrne.w	r0, r0, #1
 8000e76:	4770      	bx	lr
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	d102      	bne.n	8000e84 <__cmpsf2+0x4c>
 8000e7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e82:	d105      	bne.n	8000e90 <__cmpsf2+0x58>
 8000e84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e88:	d1e4      	bne.n	8000e54 <__cmpsf2+0x1c>
 8000e8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e8e:	d0e1      	beq.n	8000e54 <__cmpsf2+0x1c>
 8000e90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <__aeabi_cfrcmple>:
 8000e98:	4684      	mov	ip, r0
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	4661      	mov	r1, ip
 8000e9e:	e7ff      	b.n	8000ea0 <__aeabi_cfcmpeq>

08000ea0 <__aeabi_cfcmpeq>:
 8000ea0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ea2:	f7ff ffc9 	bl	8000e38 <__cmpsf2>
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	bf48      	it	mi
 8000eaa:	f110 0f00 	cmnmi.w	r0, #0
 8000eae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000eb0 <__aeabi_fcmpeq>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff fff4 	bl	8000ea0 <__aeabi_cfcmpeq>
 8000eb8:	bf0c      	ite	eq
 8000eba:	2001      	moveq	r0, #1
 8000ebc:	2000      	movne	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_fcmplt>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffea 	bl	8000ea0 <__aeabi_cfcmpeq>
 8000ecc:	bf34      	ite	cc
 8000ece:	2001      	movcc	r0, #1
 8000ed0:	2000      	movcs	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_fcmple>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffe0 	bl	8000ea0 <__aeabi_cfcmpeq>
 8000ee0:	bf94      	ite	ls
 8000ee2:	2001      	movls	r0, #1
 8000ee4:	2000      	movhi	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_fcmpge>:
 8000eec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef0:	f7ff ffd2 	bl	8000e98 <__aeabi_cfrcmple>
 8000ef4:	bf94      	ite	ls
 8000ef6:	2001      	movls	r0, #1
 8000ef8:	2000      	movhi	r0, #0
 8000efa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efe:	bf00      	nop

08000f00 <__aeabi_fcmpgt>:
 8000f00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f04:	f7ff ffc8 	bl	8000e98 <__aeabi_cfrcmple>
 8000f08:	bf34      	ite	cc
 8000f0a:	2001      	movcc	r0, #1
 8000f0c:	2000      	movcs	r0, #0
 8000f0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f12:	bf00      	nop

08000f14 <__aeabi_f2uiz>:
 8000f14:	0042      	lsls	r2, r0, #1
 8000f16:	d20e      	bcs.n	8000f36 <__aeabi_f2uiz+0x22>
 8000f18:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f1c:	d30b      	bcc.n	8000f36 <__aeabi_f2uiz+0x22>
 8000f1e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f22:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f26:	d409      	bmi.n	8000f3c <__aeabi_f2uiz+0x28>
 8000f28:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f30:	fa23 f002 	lsr.w	r0, r3, r2
 8000f34:	4770      	bx	lr
 8000f36:	f04f 0000 	mov.w	r0, #0
 8000f3a:	4770      	bx	lr
 8000f3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f40:	d101      	bne.n	8000f46 <__aeabi_f2uiz+0x32>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	d102      	bne.n	8000f4c <__aeabi_f2uiz+0x38>
 8000f46:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4a:	4770      	bx	lr
 8000f4c:	f04f 0000 	mov.w	r0, #0
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <s1>:
//=================
uint8_t system_count =0;
//*******************************************************
//===================== -INTERRUPT- =====================
//*******************************************************
void s1(){
 8000f54:	b598      	push	{r3, r4, r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	hall1state=READ_PIN(GPIOA, pin0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <s1+0x74>)
 8000f5c:	f000 fee8 	bl	8001d30 <READ_PIN>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <s1+0x78>)
 8000f66:	701a      	strb	r2, [r3, #0]

	//calculate the distance
	HALL2READ = READ_PIN(GPIOA, pin1);
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4817      	ldr	r0, [pc, #92]	; (8000fc8 <s1+0x74>)
 8000f6c:	f000 fee0 	bl	8001d30 <READ_PIN>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <s1+0x7c>)
 8000f76:	701a      	strb	r2, [r3, #0]
	if(hall1state==1){
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <s1+0x78>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d117      	bne.n	8000fb0 <s1+0x5c>
		if(HALL2READ > 0){
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <s1+0x7c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d009      	beq.n	8000f9c <s1+0x48>
			encoder_pulses++;
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <s1+0x80>)
 8000f8a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000f8e:	1c4b      	adds	r3, r1, #1
 8000f90:	f142 0400 	adc.w	r4, r2, #0
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <s1+0x80>)
 8000f96:	e9c2 3400 	strd	r3, r4, [r2]
 8000f9a:	e009      	b.n	8000fb0 <s1+0x5c>
		}
		else{
			encoder_pulses--;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <s1+0x80>)
 8000f9e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000fa2:	f111 33ff 	adds.w	r3, r1, #4294967295
 8000fa6:	f142 34ff 	adc.w	r4, r2, #4294967295
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <s1+0x80>)
 8000fac:	e9c2 3400 	strd	r3, r4, [r2]
		}
	}

	//motor direction
	if(MOTOR_DIRECTION==0){
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <s1+0x84>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <s1+0x6a>
		NextStep_NORMAL();
 8000fb8:	f000 f896 	bl	80010e8 <NextStep_NORMAL>
	}
	else {
		NextStep_REVERES();
	}

}
 8000fbc:	e001      	b.n	8000fc2 <s1+0x6e>
		NextStep_REVERES();
 8000fbe:	f000 f929 	bl	8001214 <NextStep_REVERES>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd98      	pop	{r3, r4, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000288 	.word	0x20000288
 8000fd4:	20000280 	.word	0x20000280
 8000fd8:	20000273 	.word	0x20000273

08000fdc <s2>:
void s2(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	//calculate the speed
	if(flag_SPEED==0){
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <s2+0x68>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d107      	bne.n	8000ff8 <s2+0x1c>
		TIME_CALCULATION(clk, TIMER_START);
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4817      	ldr	r0, [pc, #92]	; (8001048 <s2+0x6c>)
 8000fec:	f001 f824 	bl	8002038 <TIME_CALCULATION>
		flag_SPEED=1;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <s2+0x68>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e012      	b.n	800101e <s2+0x42>
	}
	else{
		MOTOR_SPEED_RPM=600000000/(TIME_CALCULATION(clk, TIMER_STOP)*NUM_OF_HALLSENSOR_PULS);//read the actual speed //60second *(1000000 micro seconds)*(10 increase the scale)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4813      	ldr	r0, [pc, #76]	; (8001048 <s2+0x6c>)
 8000ffc:	f001 f81c 	bl	8002038 <TIME_CALCULATION>
 8001000:	4602      	mov	r2, r0
 8001002:	4613      	mov	r3, r2
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	1a9b      	subs	r3, r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	461a      	mov	r2, r3
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <s2+0x70>)
 800100e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001012:	461a      	mov	r2, r3
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <s2+0x74>)
 8001016:	601a      	str	r2, [r3, #0]
		flag_SPEED=0;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <s2+0x68>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
	}

	//hall read
	hall2state=READ_PIN(GPIOA, pin1);
 800101e:	2101      	movs	r1, #1
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <s2+0x78>)
 8001022:	f000 fe85 	bl	8001d30 <READ_PIN>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <s2+0x7c>)
 800102c:	701a      	strb	r2, [r3, #0]
	//motor direction
	if(MOTOR_DIRECTION==0){
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <s2+0x80>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d102      	bne.n	800103c <s2+0x60>
		NextStep_NORMAL();
 8001036:	f000 f857 	bl	80010e8 <NextStep_NORMAL>
	}
	else {
		NextStep_REVERES();
	}
}
 800103a:	e001      	b.n	8001040 <s2+0x64>
		NextStep_REVERES();
 800103c:	f000 f8ea 	bl	8001214 <NextStep_REVERES>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200002c7 	.word	0x200002c7
 8001048:	02255100 	.word	0x02255100
 800104c:	23c34600 	.word	0x23c34600
 8001050:	2000028c 	.word	0x2000028c
 8001054:	40010800 	.word	0x40010800
 8001058:	20000214 	.word	0x20000214
 800105c:	20000273 	.word	0x20000273

08001060 <s3>:
void s3(){
 8001060:	b598      	push	{r3, r4, r7, lr}
 8001062:	af00      	add	r7, sp, #0
	//hall read
	hall3state=READ_PIN(GPIOA, pin2);
 8001064:	2102      	movs	r1, #2
 8001066:	481b      	ldr	r0, [pc, #108]	; (80010d4 <s3+0x74>)
 8001068:	f000 fe62 	bl	8001d30 <READ_PIN>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <s3+0x78>)
 8001072:	701a      	strb	r2, [r3, #0]

#ifndef Encoder_16_P
	//calculate the distance
	HALL2READ = READ_PIN(GPIOA, pin1);
 8001074:	2101      	movs	r1, #1
 8001076:	4817      	ldr	r0, [pc, #92]	; (80010d4 <s3+0x74>)
 8001078:	f000 fe5a 	bl	8001d30 <READ_PIN>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <s3+0x7c>)
 8001082:	701a      	strb	r2, [r3, #0]
	if(hall3state==1){
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <s3+0x78>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d117      	bne.n	80010bc <s3+0x5c>
		if(HALL2READ > 0){
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <s3+0x7c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00a      	beq.n	80010aa <s3+0x4a>
			encoder_pulses--;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <s3+0x80>)
 8001096:	e9d3 1200 	ldrd	r1, r2, [r3]
 800109a:	f111 33ff 	adds.w	r3, r1, #4294967295
 800109e:	f142 34ff 	adc.w	r4, r2, #4294967295
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <s3+0x80>)
 80010a4:	e9c2 3400 	strd	r3, r4, [r2]
 80010a8:	e008      	b.n	80010bc <s3+0x5c>
		}
		else{
			encoder_pulses++;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <s3+0x80>)
 80010ac:	e9d3 1200 	ldrd	r1, r2, [r3]
 80010b0:	1c4b      	adds	r3, r1, #1
 80010b2:	f142 0400 	adc.w	r4, r2, #0
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <s3+0x80>)
 80010b8:	e9c2 3400 	strd	r3, r4, [r2]
		}
	}
#endif
	//motor direction
	if(MOTOR_DIRECTION==0){
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <s3+0x84>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <s3+0x6a>
		NextStep_NORMAL();
 80010c4:	f000 f810 	bl	80010e8 <NextStep_NORMAL>
	}
	else {
		NextStep_REVERES();
	}
}
 80010c8:	e001      	b.n	80010ce <s3+0x6e>
		NextStep_REVERES();
 80010ca:	f000 f8a3 	bl	8001214 <NextStep_REVERES>
}
 80010ce:	bf00      	nop
 80010d0:	bd98      	pop	{r3, r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40010800 	.word	0x40010800
 80010d8:	20000001 	.word	0x20000001
 80010dc:	20000288 	.word	0x20000288
 80010e0:	20000280 	.word	0x20000280
 80010e4:	20000273 	.word	0x20000273

080010e8 <NextStep_NORMAL>:
//*******************************************************
//=============== -NextStep action- =====================
//*******************************************************
void NextStep_NORMAL() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af02      	add	r7, sp, #8
	if ((hall1state == 1) && (hall2state == 0) && (hall3state == 1)) {
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <NextStep_NORMAL+0x10c>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10a      	bne.n	800110c <NextStep_NORMAL+0x24>
 80010f6:	4b40      	ldr	r3, [pc, #256]	; (80011f8 <NextStep_NORMAL+0x110>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <NextStep_NORMAL+0x24>
 80010fe:	4b3f      	ldr	r3, [pc, #252]	; (80011fc <NextStep_NORMAL+0x114>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d102      	bne.n	800110c <NextStep_NORMAL+0x24>
		MOTOR_state = 0;
 8001106:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <NextStep_NORMAL+0x118>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 0) && (hall3state == 1)) {
 800110c:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <NextStep_NORMAL+0x10c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10a      	bne.n	800112a <NextStep_NORMAL+0x42>
 8001114:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <NextStep_NORMAL+0x110>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d106      	bne.n	800112a <NextStep_NORMAL+0x42>
 800111c:	4b37      	ldr	r3, [pc, #220]	; (80011fc <NextStep_NORMAL+0x114>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d102      	bne.n	800112a <NextStep_NORMAL+0x42>
		MOTOR_state = 1;
 8001124:	4b36      	ldr	r3, [pc, #216]	; (8001200 <NextStep_NORMAL+0x118>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 1) && (hall3state == 1)) {
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <NextStep_NORMAL+0x10c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10a      	bne.n	8001148 <NextStep_NORMAL+0x60>
 8001132:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <NextStep_NORMAL+0x110>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d106      	bne.n	8001148 <NextStep_NORMAL+0x60>
 800113a:	4b30      	ldr	r3, [pc, #192]	; (80011fc <NextStep_NORMAL+0x114>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d102      	bne.n	8001148 <NextStep_NORMAL+0x60>
		MOTOR_state = 2;
 8001142:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <NextStep_NORMAL+0x118>)
 8001144:	2202      	movs	r2, #2
 8001146:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 1) && (hall3state == 0)) {
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <NextStep_NORMAL+0x10c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10a      	bne.n	8001166 <NextStep_NORMAL+0x7e>
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <NextStep_NORMAL+0x110>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d106      	bne.n	8001166 <NextStep_NORMAL+0x7e>
 8001158:	4b28      	ldr	r3, [pc, #160]	; (80011fc <NextStep_NORMAL+0x114>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <NextStep_NORMAL+0x7e>
		MOTOR_state = 3;
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <NextStep_NORMAL+0x118>)
 8001162:	2203      	movs	r2, #3
 8001164:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 1) && (hall2state == 1) && (hall3state == 0)) {
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <NextStep_NORMAL+0x10c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d10a      	bne.n	8001184 <NextStep_NORMAL+0x9c>
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <NextStep_NORMAL+0x110>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d106      	bne.n	8001184 <NextStep_NORMAL+0x9c>
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <NextStep_NORMAL+0x114>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <NextStep_NORMAL+0x9c>
		MOTOR_state = 4;
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <NextStep_NORMAL+0x118>)
 8001180:	2204      	movs	r2, #4
 8001182:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 1) && (hall2state == 0) && (hall3state == 0)) {
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <NextStep_NORMAL+0x10c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d10a      	bne.n	80011a2 <NextStep_NORMAL+0xba>
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <NextStep_NORMAL+0x110>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d106      	bne.n	80011a2 <NextStep_NORMAL+0xba>
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <NextStep_NORMAL+0x114>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <NextStep_NORMAL+0xba>
		MOTOR_state = 5;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <NextStep_NORMAL+0x118>)
 800119e:	2205      	movs	r2, #5
 80011a0:	701a      	strb	r2, [r3, #0]
	}
	//second problem % interrupt debouncing %
	//when the interrupt Happens the state change if we first put a rest(LOW PWM),
	//the motor will lose the torque and it return and it make another interrupt
	//and it happens again and again so we start with high side for 50 us to shore the motor pass the sensor
	TIMER_ISR(TIM3,50, U_us, clk, state);
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <NextStep_NORMAL+0x11c>)
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <NextStep_NORMAL+0x120>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	2132      	movs	r1, #50	; 0x32
 80011ac:	4817      	ldr	r0, [pc, #92]	; (800120c <NextStep_NORMAL+0x124>)
 80011ae:	f000 fe9d 	bl	8001eec <TIMER_ISR>
	// 3 phase as a float to solve the pulse stop of motor when it run at high speed
	// when changing the step without rest the motor stuck at pulse time , make it very violent
	//A floating
	pinwrite(GPIOB, pin0,LOW);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	4816      	ldr	r0, [pc, #88]	; (8001210 <NextStep_NORMAL+0x128>)
 80011b8:	f000 fd96 	bl	8001ce8 <pinwrite>
	pinwrite(GPIOB, pin1,HIGH);
 80011bc:	2201      	movs	r2, #1
 80011be:	2101      	movs	r1, #1
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <NextStep_NORMAL+0x128>)
 80011c2:	f000 fd91 	bl	8001ce8 <pinwrite>
	//B floating
	pinwrite(GPIOB, pin10,LOW);
 80011c6:	2200      	movs	r2, #0
 80011c8:	210a      	movs	r1, #10
 80011ca:	4811      	ldr	r0, [pc, #68]	; (8001210 <NextStep_NORMAL+0x128>)
 80011cc:	f000 fd8c 	bl	8001ce8 <pinwrite>
	pinwrite(GPIOB, pin7,HIGH);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2107      	movs	r1, #7
 80011d4:	480e      	ldr	r0, [pc, #56]	; (8001210 <NextStep_NORMAL+0x128>)
 80011d6:	f000 fd87 	bl	8001ce8 <pinwrite>
	//C floating
	pinwrite(GPIOB, pin8,LOW);
 80011da:	2200      	movs	r2, #0
 80011dc:	2108      	movs	r1, #8
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <NextStep_NORMAL+0x128>)
 80011e0:	f000 fd82 	bl	8001ce8 <pinwrite>
	pinwrite(GPIOB, pin5,HIGH);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2105      	movs	r1, #5
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <NextStep_NORMAL+0x128>)
 80011ea:	f000 fd7d 	bl	8001ce8 <pinwrite>
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000214 	.word	0x20000214
 80011fc:	20000001 	.word	0x20000001
 8001200:	20000215 	.word	0x20000215
 8001204:	080013ad 	.word	0x080013ad
 8001208:	02255100 	.word	0x02255100
 800120c:	40000400 	.word	0x40000400
 8001210:	40010c00 	.word	0x40010c00

08001214 <NextStep_REVERES>:
void NextStep_REVERES() {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af02      	add	r7, sp, #8
	if ((hall2state == 1) && (hall1state == 0) && (hall3state == 1)) {
 800121a:	4b41      	ldr	r3, [pc, #260]	; (8001320 <NextStep_REVERES+0x10c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d10a      	bne.n	8001238 <NextStep_REVERES+0x24>
 8001222:	4b40      	ldr	r3, [pc, #256]	; (8001324 <NextStep_REVERES+0x110>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d106      	bne.n	8001238 <NextStep_REVERES+0x24>
 800122a:	4b3f      	ldr	r3, [pc, #252]	; (8001328 <NextStep_REVERES+0x114>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d102      	bne.n	8001238 <NextStep_REVERES+0x24>
		MOTOR_state = 5;
 8001232:	4b3e      	ldr	r3, [pc, #248]	; (800132c <NextStep_REVERES+0x118>)
 8001234:	2205      	movs	r2, #5
 8001236:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 0) && (hall1state == 0) && (hall3state == 1)) {
 8001238:	4b39      	ldr	r3, [pc, #228]	; (8001320 <NextStep_REVERES+0x10c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10a      	bne.n	8001256 <NextStep_REVERES+0x42>
 8001240:	4b38      	ldr	r3, [pc, #224]	; (8001324 <NextStep_REVERES+0x110>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d106      	bne.n	8001256 <NextStep_REVERES+0x42>
 8001248:	4b37      	ldr	r3, [pc, #220]	; (8001328 <NextStep_REVERES+0x114>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d102      	bne.n	8001256 <NextStep_REVERES+0x42>
		MOTOR_state = 4;
 8001250:	4b36      	ldr	r3, [pc, #216]	; (800132c <NextStep_REVERES+0x118>)
 8001252:	2204      	movs	r2, #4
 8001254:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 0) && (hall1state == 1) && (hall3state == 1)) {
 8001256:	4b32      	ldr	r3, [pc, #200]	; (8001320 <NextStep_REVERES+0x10c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10a      	bne.n	8001274 <NextStep_REVERES+0x60>
 800125e:	4b31      	ldr	r3, [pc, #196]	; (8001324 <NextStep_REVERES+0x110>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d106      	bne.n	8001274 <NextStep_REVERES+0x60>
 8001266:	4b30      	ldr	r3, [pc, #192]	; (8001328 <NextStep_REVERES+0x114>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d102      	bne.n	8001274 <NextStep_REVERES+0x60>
		MOTOR_state = 3;
 800126e:	4b2f      	ldr	r3, [pc, #188]	; (800132c <NextStep_REVERES+0x118>)
 8001270:	2203      	movs	r2, #3
 8001272:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 0) && (hall1state == 1) && (hall3state == 0)) {
 8001274:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <NextStep_REVERES+0x10c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10a      	bne.n	8001292 <NextStep_REVERES+0x7e>
 800127c:	4b29      	ldr	r3, [pc, #164]	; (8001324 <NextStep_REVERES+0x110>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d106      	bne.n	8001292 <NextStep_REVERES+0x7e>
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <NextStep_REVERES+0x114>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <NextStep_REVERES+0x7e>
		MOTOR_state = 2;
 800128c:	4b27      	ldr	r3, [pc, #156]	; (800132c <NextStep_REVERES+0x118>)
 800128e:	2202      	movs	r2, #2
 8001290:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 1) && (hall1state == 1) && (hall3state == 0)) {
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <NextStep_REVERES+0x10c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d10a      	bne.n	80012b0 <NextStep_REVERES+0x9c>
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <NextStep_REVERES+0x110>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d106      	bne.n	80012b0 <NextStep_REVERES+0x9c>
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <NextStep_REVERES+0x114>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <NextStep_REVERES+0x9c>
		MOTOR_state = 1;
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <NextStep_REVERES+0x118>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 1) && (hall1state == 0) && (hall3state == 0)) {
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <NextStep_REVERES+0x10c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d10a      	bne.n	80012ce <NextStep_REVERES+0xba>
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <NextStep_REVERES+0x110>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <NextStep_REVERES+0xba>
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <NextStep_REVERES+0x114>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <NextStep_REVERES+0xba>
		MOTOR_state = 0;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <NextStep_REVERES+0x118>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
	}

	TIMER_ISR(TIM3,50, U_us, clk, state);
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <NextStep_REVERES+0x11c>)
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <NextStep_REVERES+0x120>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	2132      	movs	r1, #50	; 0x32
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <NextStep_REVERES+0x124>)
 80012da:	f000 fe07 	bl	8001eec <TIMER_ISR>
	// 3 phase as a float to solve the pulse stop of motor when it run at high speed
	// when changing the step without rest the motor stuck at pulse time , make it very violent
	//A floating
	pinwrite(GPIOB, pin0,LOW);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	4816      	ldr	r0, [pc, #88]	; (800133c <NextStep_REVERES+0x128>)
 80012e4:	f000 fd00 	bl	8001ce8 <pinwrite>
	pinwrite(GPIOB, pin1,HIGH);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2101      	movs	r1, #1
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <NextStep_REVERES+0x128>)
 80012ee:	f000 fcfb 	bl	8001ce8 <pinwrite>
	//B floating
	pinwrite(GPIOB, pin10,LOW);
 80012f2:	2200      	movs	r2, #0
 80012f4:	210a      	movs	r1, #10
 80012f6:	4811      	ldr	r0, [pc, #68]	; (800133c <NextStep_REVERES+0x128>)
 80012f8:	f000 fcf6 	bl	8001ce8 <pinwrite>
	pinwrite(GPIOB, pin7,HIGH);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2107      	movs	r1, #7
 8001300:	480e      	ldr	r0, [pc, #56]	; (800133c <NextStep_REVERES+0x128>)
 8001302:	f000 fcf1 	bl	8001ce8 <pinwrite>
	//C floating
	pinwrite(GPIOB, pin8,LOW);
 8001306:	2200      	movs	r2, #0
 8001308:	2108      	movs	r1, #8
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <NextStep_REVERES+0x128>)
 800130c:	f000 fcec 	bl	8001ce8 <pinwrite>
	pinwrite(GPIOB, pin5,HIGH);
 8001310:	2201      	movs	r2, #1
 8001312:	2105      	movs	r1, #5
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <NextStep_REVERES+0x128>)
 8001316:	f000 fce7 	bl	8001ce8 <pinwrite>
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000214 	.word	0x20000214
 8001324:	20000000 	.word	0x20000000
 8001328:	20000001 	.word	0x20000001
 800132c:	20000215 	.word	0x20000215
 8001330:	080013ad 	.word	0x080013ad
 8001334:	02255100 	.word	0x02255100
 8001338:	40000400 	.word	0x40000400
 800133c:	40010c00 	.word	0x40010c00

08001340 <wate>:
//*******************************************************
//==================== -LOW PWM- ========================
//*******************************************************
void wate(){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af02      	add	r7, sp, #8
	//A floating
	pinwrite(GPIOB, pin0,LOW);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	4814      	ldr	r0, [pc, #80]	; (800139c <wate+0x5c>)
 800134c:	f000 fccc 	bl	8001ce8 <pinwrite>
	pinwrite(GPIOB, pin1,HIGH);
 8001350:	2201      	movs	r2, #1
 8001352:	2101      	movs	r1, #1
 8001354:	4811      	ldr	r0, [pc, #68]	; (800139c <wate+0x5c>)
 8001356:	f000 fcc7 	bl	8001ce8 <pinwrite>
	//B floating
	pinwrite(GPIOB, pin10,LOW);
 800135a:	2200      	movs	r2, #0
 800135c:	210a      	movs	r1, #10
 800135e:	480f      	ldr	r0, [pc, #60]	; (800139c <wate+0x5c>)
 8001360:	f000 fcc2 	bl	8001ce8 <pinwrite>
	pinwrite(GPIOB, pin7,HIGH);
 8001364:	2201      	movs	r2, #1
 8001366:	2107      	movs	r1, #7
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <wate+0x5c>)
 800136a:	f000 fcbd 	bl	8001ce8 <pinwrite>
	//C floating
	pinwrite(GPIOB, pin8,LOW);
 800136e:	2200      	movs	r2, #0
 8001370:	2108      	movs	r1, #8
 8001372:	480a      	ldr	r0, [pc, #40]	; (800139c <wate+0x5c>)
 8001374:	f000 fcb8 	bl	8001ce8 <pinwrite>
	pinwrite(GPIOB, pin5,HIGH);
 8001378:	2201      	movs	r2, #1
 800137a:	2105      	movs	r1, #5
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <wate+0x5c>)
 800137e:	f000 fcb3 	bl	8001ce8 <pinwrite>
	TIMER_ISR(TIM3,MOTOR_PWM_LOW, U_us, clk, state);
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <wate+0x60>)
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <wate+0x64>)
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <wate+0x68>)
 8001390:	f000 fdac 	bl	8001eec <TIMER_ISR>
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	080013ad 	.word	0x080013ad
 80013a4:	02255100 	.word	0x02255100
 80013a8:	40000400 	.word	0x40000400

080013ac <state>:
//*******************************************************
//==================== -HIGH PWM- =======================
//*******************************************************
void state(){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af02      	add	r7, sp, #8
	switch (MOTOR_state) {
 80013b2:	4b6e      	ldr	r3, [pc, #440]	; (800156c <state+0x1c0>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	f200 80ca 	bhi.w	8001550 <state+0x1a4>
 80013bc:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <state+0x18>)
 80013be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c2:	bf00      	nop
 80013c4:	080013dd 	.word	0x080013dd
 80013c8:	0800141b 	.word	0x0800141b
 80013cc:	08001459 	.word	0x08001459
 80013d0:	08001497 	.word	0x08001497
 80013d4:	080014d5 	.word	0x080014d5
 80013d8:	08001513 	.word	0x08001513
	case 0:
		//MOTOR_state++;
		//A h
		pinwrite(GPIOB, pin0,HIGH);
 80013dc:	2201      	movs	r2, #1
 80013de:	2100      	movs	r1, #0
 80013e0:	4863      	ldr	r0, [pc, #396]	; (8001570 <state+0x1c4>)
 80013e2:	f000 fc81 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2101      	movs	r1, #1
 80013ea:	4861      	ldr	r0, [pc, #388]	; (8001570 <state+0x1c4>)
 80013ec:	f000 fc7c 	bl	8001ce8 <pinwrite>
		//B floating
		pinwrite(GPIOB, pin10,LOW);
 80013f0:	2200      	movs	r2, #0
 80013f2:	210a      	movs	r1, #10
 80013f4:	485e      	ldr	r0, [pc, #376]	; (8001570 <state+0x1c4>)
 80013f6:	f000 fc77 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2107      	movs	r1, #7
 80013fe:	485c      	ldr	r0, [pc, #368]	; (8001570 <state+0x1c4>)
 8001400:	f000 fc72 	bl	8001ce8 <pinwrite>
		//C LOW
		pinwrite(GPIOB, pin8,LOW);
 8001404:	2200      	movs	r2, #0
 8001406:	2108      	movs	r1, #8
 8001408:	4859      	ldr	r0, [pc, #356]	; (8001570 <state+0x1c4>)
 800140a:	f000 fc6d 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin5,LOW);
 800140e:	2200      	movs	r2, #0
 8001410:	2105      	movs	r1, #5
 8001412:	4857      	ldr	r0, [pc, #348]	; (8001570 <state+0x1c4>)
 8001414:	f000 fc68 	bl	8001ce8 <pinwrite>
		break;
 8001418:	e09a      	b.n	8001550 <state+0x1a4>

	case 1:
		//MOTOR_state++;
		//A floating
		pinwrite(GPIOB, pin0,LOW);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	4854      	ldr	r0, [pc, #336]	; (8001570 <state+0x1c4>)
 8001420:	f000 fc62 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8001424:	2201      	movs	r2, #1
 8001426:	2101      	movs	r1, #1
 8001428:	4851      	ldr	r0, [pc, #324]	; (8001570 <state+0x1c4>)
 800142a:	f000 fc5d 	bl	8001ce8 <pinwrite>
		//B h
		pinwrite(GPIOB, pin10,HIGH);
 800142e:	2201      	movs	r2, #1
 8001430:	210a      	movs	r1, #10
 8001432:	484f      	ldr	r0, [pc, #316]	; (8001570 <state+0x1c4>)
 8001434:	f000 fc58 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8001438:	2201      	movs	r2, #1
 800143a:	2107      	movs	r1, #7
 800143c:	484c      	ldr	r0, [pc, #304]	; (8001570 <state+0x1c4>)
 800143e:	f000 fc53 	bl	8001ce8 <pinwrite>
		//C LOW
		pinwrite(GPIOB, pin8,LOW);
 8001442:	2200      	movs	r2, #0
 8001444:	2108      	movs	r1, #8
 8001446:	484a      	ldr	r0, [pc, #296]	; (8001570 <state+0x1c4>)
 8001448:	f000 fc4e 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin5,LOW);
 800144c:	2200      	movs	r2, #0
 800144e:	2105      	movs	r1, #5
 8001450:	4847      	ldr	r0, [pc, #284]	; (8001570 <state+0x1c4>)
 8001452:	f000 fc49 	bl	8001ce8 <pinwrite>
		break;
 8001456:	e07b      	b.n	8001550 <state+0x1a4>

	case 2:
		//MOTOR_state++;
		//A l
		pinwrite(GPIOB, pin0,LOW);
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	4844      	ldr	r0, [pc, #272]	; (8001570 <state+0x1c4>)
 800145e:	f000 fc43 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin1,LOW);
 8001462:	2200      	movs	r2, #0
 8001464:	2101      	movs	r1, #1
 8001466:	4842      	ldr	r0, [pc, #264]	; (8001570 <state+0x1c4>)
 8001468:	f000 fc3e 	bl	8001ce8 <pinwrite>
		//B h
		pinwrite(GPIOB, pin10,HIGH);
 800146c:	2201      	movs	r2, #1
 800146e:	210a      	movs	r1, #10
 8001470:	483f      	ldr	r0, [pc, #252]	; (8001570 <state+0x1c4>)
 8001472:	f000 fc39 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8001476:	2201      	movs	r2, #1
 8001478:	2107      	movs	r1, #7
 800147a:	483d      	ldr	r0, [pc, #244]	; (8001570 <state+0x1c4>)
 800147c:	f000 fc34 	bl	8001ce8 <pinwrite>
		//C floating
		pinwrite(GPIOB, pin8,LOW);
 8001480:	2200      	movs	r2, #0
 8001482:	2108      	movs	r1, #8
 8001484:	483a      	ldr	r0, [pc, #232]	; (8001570 <state+0x1c4>)
 8001486:	f000 fc2f 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 800148a:	2201      	movs	r2, #1
 800148c:	2105      	movs	r1, #5
 800148e:	4838      	ldr	r0, [pc, #224]	; (8001570 <state+0x1c4>)
 8001490:	f000 fc2a 	bl	8001ce8 <pinwrite>
		break;
 8001494:	e05c      	b.n	8001550 <state+0x1a4>

	case 3:
		//MOTOR_state++;
		//A l
		pinwrite(GPIOB, pin0,LOW);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	4835      	ldr	r0, [pc, #212]	; (8001570 <state+0x1c4>)
 800149c:	f000 fc24 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin1,LOW);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2101      	movs	r1, #1
 80014a4:	4832      	ldr	r0, [pc, #200]	; (8001570 <state+0x1c4>)
 80014a6:	f000 fc1f 	bl	8001ce8 <pinwrite>
		//B floating
		pinwrite(GPIOB, pin10,LOW);
 80014aa:	2200      	movs	r2, #0
 80014ac:	210a      	movs	r1, #10
 80014ae:	4830      	ldr	r0, [pc, #192]	; (8001570 <state+0x1c4>)
 80014b0:	f000 fc1a 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2107      	movs	r1, #7
 80014b8:	482d      	ldr	r0, [pc, #180]	; (8001570 <state+0x1c4>)
 80014ba:	f000 fc15 	bl	8001ce8 <pinwrite>
		//C h
		pinwrite(GPIOB, pin8,HIGH);
 80014be:	2201      	movs	r2, #1
 80014c0:	2108      	movs	r1, #8
 80014c2:	482b      	ldr	r0, [pc, #172]	; (8001570 <state+0x1c4>)
 80014c4:	f000 fc10 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2105      	movs	r1, #5
 80014cc:	4828      	ldr	r0, [pc, #160]	; (8001570 <state+0x1c4>)
 80014ce:	f000 fc0b 	bl	8001ce8 <pinwrite>
		break;
 80014d2:	e03d      	b.n	8001550 <state+0x1a4>

	case 4:
		//MOTOR_state++;
		//A floating
		pinwrite(GPIOB, pin0,LOW);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	4825      	ldr	r0, [pc, #148]	; (8001570 <state+0x1c4>)
 80014da:	f000 fc05 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 80014de:	2201      	movs	r2, #1
 80014e0:	2101      	movs	r1, #1
 80014e2:	4823      	ldr	r0, [pc, #140]	; (8001570 <state+0x1c4>)
 80014e4:	f000 fc00 	bl	8001ce8 <pinwrite>
		//B l
		pinwrite(GPIOB, pin10,LOW);
 80014e8:	2200      	movs	r2, #0
 80014ea:	210a      	movs	r1, #10
 80014ec:	4820      	ldr	r0, [pc, #128]	; (8001570 <state+0x1c4>)
 80014ee:	f000 fbfb 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin7,LOW);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2107      	movs	r1, #7
 80014f6:	481e      	ldr	r0, [pc, #120]	; (8001570 <state+0x1c4>)
 80014f8:	f000 fbf6 	bl	8001ce8 <pinwrite>
		//C h
		pinwrite(GPIOB, pin8,HIGH);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2108      	movs	r1, #8
 8001500:	481b      	ldr	r0, [pc, #108]	; (8001570 <state+0x1c4>)
 8001502:	f000 fbf1 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8001506:	2201      	movs	r2, #1
 8001508:	2105      	movs	r1, #5
 800150a:	4819      	ldr	r0, [pc, #100]	; (8001570 <state+0x1c4>)
 800150c:	f000 fbec 	bl	8001ce8 <pinwrite>
		break;
 8001510:	e01e      	b.n	8001550 <state+0x1a4>

	case 5:
		//MOTOR_state=0;
		//A h
		pinwrite(GPIOB, pin0,HIGH);
 8001512:	2201      	movs	r2, #1
 8001514:	2100      	movs	r1, #0
 8001516:	4816      	ldr	r0, [pc, #88]	; (8001570 <state+0x1c4>)
 8001518:	f000 fbe6 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 800151c:	2201      	movs	r2, #1
 800151e:	2101      	movs	r1, #1
 8001520:	4813      	ldr	r0, [pc, #76]	; (8001570 <state+0x1c4>)
 8001522:	f000 fbe1 	bl	8001ce8 <pinwrite>
		//B l
		pinwrite(GPIOB, pin10,LOW);
 8001526:	2200      	movs	r2, #0
 8001528:	210a      	movs	r1, #10
 800152a:	4811      	ldr	r0, [pc, #68]	; (8001570 <state+0x1c4>)
 800152c:	f000 fbdc 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin7,LOW);
 8001530:	2200      	movs	r2, #0
 8001532:	2107      	movs	r1, #7
 8001534:	480e      	ldr	r0, [pc, #56]	; (8001570 <state+0x1c4>)
 8001536:	f000 fbd7 	bl	8001ce8 <pinwrite>
		//C floating
		pinwrite(GPIOB, pin8,LOW);
 800153a:	2200      	movs	r2, #0
 800153c:	2108      	movs	r1, #8
 800153e:	480c      	ldr	r0, [pc, #48]	; (8001570 <state+0x1c4>)
 8001540:	f000 fbd2 	bl	8001ce8 <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8001544:	2201      	movs	r2, #1
 8001546:	2105      	movs	r1, #5
 8001548:	4809      	ldr	r0, [pc, #36]	; (8001570 <state+0x1c4>)
 800154a:	f000 fbcd 	bl	8001ce8 <pinwrite>
		break;
 800154e:	bf00      	nop
	}
	TIMER_ISR(TIM3,MOTOR_PWM, U_us, clk, wate);
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <state+0x1c8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b299      	uxth	r1, r3
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <state+0x1cc>)
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <state+0x1d0>)
 800155c:	2201      	movs	r2, #1
 800155e:	4808      	ldr	r0, [pc, #32]	; (8001580 <state+0x1d4>)
 8001560:	f000 fcc4 	bl	8001eec <TIMER_ISR>

}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000215 	.word	0x20000215
 8001570:	40010c00 	.word	0x40010c00
 8001574:	20000238 	.word	0x20000238
 8001578:	08001341 	.word	0x08001341
 800157c:	02255100 	.word	0x02255100
 8001580:	40000400 	.word	0x40000400

08001584 <BLDC_init>:
	stop_flage=1;
}
//*******************************************************
//==================== -BLDC_init- ======================
//*******************************************************
void BLDC_init(){
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af04      	add	r7, sp, #16
	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 800158a:	2100      	movs	r1, #0
 800158c:	2000      	movs	r0, #0
 800158e:	f000 ff8d 	bl	80024ac <MCAL_speed_init>
#ifdef MOTOR_MASTER
	USART_INIT(USART2, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,clk);
 8001592:	4b38      	ldr	r3, [pc, #224]	; (8001674 <BLDC_init+0xf0>)
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	2300      	movs	r3, #0
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	2200      	movs	r2, #0
 80015a4:	210c      	movs	r1, #12
 80015a6:	4834      	ldr	r0, [pc, #208]	; (8001678 <BLDC_init+0xf4>)
 80015a8:	f001 fe70 	bl	800328c <USART_INIT>
	//to receive the data from slave motor control
#endif
	//motor control pins
	pinmode(GPIOB, pin0,GPIO_MODE_OUTPUT_push_pull_Speed10);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2100      	movs	r1, #0
 80015b0:	4832      	ldr	r0, [pc, #200]	; (800167c <BLDC_init+0xf8>)
 80015b2:	f000 fab7 	bl	8001b24 <pinmode>
	pinmode(GPIOB, pin1,GPIO_MODE_OUTPUT_push_pull_Speed10);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2101      	movs	r1, #1
 80015ba:	4830      	ldr	r0, [pc, #192]	; (800167c <BLDC_init+0xf8>)
 80015bc:	f000 fab2 	bl	8001b24 <pinmode>
	pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_push_pull_Speed10);
 80015c0:	2201      	movs	r2, #1
 80015c2:	210a      	movs	r1, #10
 80015c4:	482d      	ldr	r0, [pc, #180]	; (800167c <BLDC_init+0xf8>)
 80015c6:	f000 faad 	bl	8001b24 <pinmode>
	pinmode(GPIOB, pin7,GPIO_MODE_OUTPUT_push_pull_Speed10);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2107      	movs	r1, #7
 80015ce:	482b      	ldr	r0, [pc, #172]	; (800167c <BLDC_init+0xf8>)
 80015d0:	f000 faa8 	bl	8001b24 <pinmode>
	pinmode(GPIOB, pin8,GPIO_MODE_OUTPUT_push_pull_Speed10);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2108      	movs	r1, #8
 80015d8:	4828      	ldr	r0, [pc, #160]	; (800167c <BLDC_init+0xf8>)
 80015da:	f000 faa3 	bl	8001b24 <pinmode>
	pinmode(GPIOB, pin5,GPIO_MODE_OUTPUT_push_pull_Speed10);
 80015de:	2201      	movs	r2, #1
 80015e0:	2105      	movs	r1, #5
 80015e2:	4826      	ldr	r0, [pc, #152]	; (800167c <BLDC_init+0xf8>)
 80015e4:	f000 fa9e 	bl	8001b24 <pinmode>
	//encoder interrupt pins
	EXTI(GPIOA, pin0,EXTI_Trigger_RisingAndFalling, s1);
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <BLDC_init+0xfc>)
 80015ea:	2202      	movs	r2, #2
 80015ec:	2100      	movs	r1, #0
 80015ee:	4825      	ldr	r0, [pc, #148]	; (8001684 <BLDC_init+0x100>)
 80015f0:	f001 f8a6 	bl	8002740 <EXTI>
	EXTI(GPIOA, pin1,EXTI_Trigger_RisingAndFalling, s2);
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <BLDC_init+0x104>)
 80015f6:	2202      	movs	r2, #2
 80015f8:	2101      	movs	r1, #1
 80015fa:	4822      	ldr	r0, [pc, #136]	; (8001684 <BLDC_init+0x100>)
 80015fc:	f001 f8a0 	bl	8002740 <EXTI>
	EXTI(GPIOA, pin2,EXTI_Trigger_RisingAndFalling, s3);
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <BLDC_init+0x108>)
 8001602:	2202      	movs	r2, #2
 8001604:	2102      	movs	r1, #2
 8001606:	481f      	ldr	r0, [pc, #124]	; (8001684 <BLDC_init+0x100>)
 8001608:	f001 f89a 	bl	8002740 <EXTI>
	//send data to ttl on master , send encoder and velocity data on slave
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,clk);
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <BLDC_init+0xf0>)
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	2300      	movs	r3, #0
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	2200      	movs	r2, #0
 800161e:	210c      	movs	r1, #12
 8001620:	481b      	ldr	r0, [pc, #108]	; (8001690 <BLDC_init+0x10c>)
 8001622:	f001 fe33 	bl	800328c <USART_INIT>
	//start motor sequence
	s1();
 8001626:	f7ff fc95 	bl	8000f54 <s1>
	s2();
 800162a:	f7ff fcd7 	bl	8000fdc <s2>
	s3();
 800162e:	f7ff fd17 	bl	8001060 <s3>
	//soft start
	for(int i=0;i<10;i++){
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	e00d      	b.n	8001654 <BLDC_init+0xd0>
		MOTOR_PWM+=1;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <BLDC_init+0x110>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	4a15      	ldr	r2, [pc, #84]	; (8001694 <BLDC_init+0x110>)
 8001640:	6013      	str	r3, [r2, #0]
		delay(2, U_ms, clk);
 8001642:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <BLDC_init+0xf0>)
 8001644:	2100      	movs	r1, #0
 8001646:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800164a:	f000 fb85 	bl	8001d58 <delay>
	for(int i=0;i<10;i++){
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3301      	adds	r3, #1
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b09      	cmp	r3, #9
 8001658:	ddee      	ble.n	8001638 <BLDC_init+0xb4>
	}
	//Receive the velocity & direction command
	USART_READ_INTERRUPT_EN(USART1, read_string);
 800165a:	490f      	ldr	r1, [pc, #60]	; (8001698 <BLDC_init+0x114>)
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <BLDC_init+0x10c>)
 800165e:	f001 ff5b 	bl	8003518 <USART_READ_INTERRUPT_EN>
#ifdef MOTOR_MASTER
	USART_READ_INTERRUPT_EN(USART2, read_string_MOTOR2ENCODER);
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <BLDC_init+0x118>)
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <BLDC_init+0xf4>)
 8001666:	f001 ff57 	bl	8003518 <USART_READ_INTERRUPT_EN>
#endif
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	02255100 	.word	0x02255100
 8001678:	40004400 	.word	0x40004400
 800167c:	40010c00 	.word	0x40010c00
 8001680:	08000f55 	.word	0x08000f55
 8001684:	40010800 	.word	0x40010800
 8001688:	08000fdd 	.word	0x08000fdd
 800168c:	08001061 	.word	0x08001061
 8001690:	40013800 	.word	0x40013800
 8001694:	20000238 	.word	0x20000238
 8001698:	080016a1 	.word	0x080016a1
 800169c:	08001721 	.word	0x08001721

080016a0 <read_string>:
//*******************************************************
//==================== -READ_DATA- ======================
//*******************************************************
void read_string (){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0

	USART_READ(USART1,&ch);
 80016a4:	4919      	ldr	r1, [pc, #100]	; (800170c <read_string+0x6c>)
 80016a6:	481a      	ldr	r0, [pc, #104]	; (8001710 <read_string+0x70>)
 80016a8:	f001 fed4 	bl	8003454 <USART_READ>

	if(ch=='$'){
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <read_string+0x6c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b24      	cmp	r3, #36	; 0x24
 80016b2:	d105      	bne.n	80016c0 <read_string+0x20>
		serial_flag=1;
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <read_string+0x74>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
		index1=0;
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <read_string+0x78>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
	}
	if(ch=='e'){
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <read_string+0x6c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b65      	cmp	r3, #101	; 0x65
 80016c6:	d10e      	bne.n	80016e6 <read_string+0x46>
		serial_flag=0;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <read_string+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
		string_data[index1]='\n';
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <read_string+0x78>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <read_string+0x7c>)
 80016d6:	210a      	movs	r1, #10
 80016d8:	5499      	strb	r1, [r3, r2]
		string_data[index1+1]=0;
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <read_string+0x78>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <read_string+0x7c>)
 80016e2:	2100      	movs	r1, #0
 80016e4:	54d1      	strb	r1, [r2, r3]

	}

	if(serial_flag==1){
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <read_string+0x74>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d10c      	bne.n	8001708 <read_string+0x68>
		string_data[index1]=ch;
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <read_string+0x78>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <read_string+0x6c>)
 80016f6:	7819      	ldrb	r1, [r3, #0]
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <read_string+0x7c>)
 80016fa:	5499      	strb	r1, [r3, r2]
		index1++;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <read_string+0x78>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <read_string+0x78>)
 8001706:	701a      	strb	r2, [r3, #0]
	}
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200002cc 	.word	0x200002cc
 8001710:	40013800 	.word	0x40013800
 8001714:	20000216 	.word	0x20000216
 8001718:	2000027c 	.word	0x2000027c
 800171c:	20000240 	.word	0x20000240

08001720 <read_string_MOTOR2ENCODER>:
#ifdef MOTOR_MASTER
//##COMENT it in motor 2
//*******************************************************
//==================== -READ_MOTOR(2)ENCODER_DATA- ======================
//*******************************************************
void read_string_MOTOR2ENCODER (){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

	USART_READ(USART2,&ch2);
 8001724:	4919      	ldr	r1, [pc, #100]	; (800178c <read_string_MOTOR2ENCODER+0x6c>)
 8001726:	481a      	ldr	r0, [pc, #104]	; (8001790 <read_string_MOTOR2ENCODER+0x70>)
 8001728:	f001 fe94 	bl	8003454 <USART_READ>

	if(ch2=='C'){
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <read_string_MOTOR2ENCODER+0x6c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b43      	cmp	r3, #67	; 0x43
 8001732:	d105      	bne.n	8001740 <read_string_MOTOR2ENCODER+0x20>
		serial_flag2=1;
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <read_string_MOTOR2ENCODER+0x74>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
		index2=0;
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <read_string_MOTOR2ENCODER+0x78>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
	}
	if(ch2=='*'){
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <read_string_MOTOR2ENCODER+0x6c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b2a      	cmp	r3, #42	; 0x2a
 8001746:	d10e      	bne.n	8001766 <read_string_MOTOR2ENCODER+0x46>
		serial_flag2=0;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <read_string_MOTOR2ENCODER+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
		string_data2[index2]='\n';
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <read_string_MOTOR2ENCODER+0x78>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <read_string_MOTOR2ENCODER+0x7c>)
 8001756:	210a      	movs	r1, #10
 8001758:	5499      	strb	r1, [r3, r2]
		string_data2[index2+1]=0;
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <read_string_MOTOR2ENCODER+0x78>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a0e      	ldr	r2, [pc, #56]	; (800179c <read_string_MOTOR2ENCODER+0x7c>)
 8001762:	2100      	movs	r1, #0
 8001764:	54d1      	strb	r1, [r2, r3]

	}

	if(serial_flag2==1){
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <read_string_MOTOR2ENCODER+0x74>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d10c      	bne.n	8001788 <read_string_MOTOR2ENCODER+0x68>
		string_data2[index2]=ch2;
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <read_string_MOTOR2ENCODER+0x78>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <read_string_MOTOR2ENCODER+0x6c>)
 8001776:	7819      	ldrb	r1, [r3, #0]
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <read_string_MOTOR2ENCODER+0x7c>)
 800177a:	5499      	strb	r1, [r3, r2]
		index2++;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <read_string_MOTOR2ENCODER+0x78>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <read_string_MOTOR2ENCODER+0x78>)
 8001786:	701a      	strb	r2, [r3, #0]
	}
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000274 	.word	0x20000274
 8001790:	40004400 	.word	0x40004400
 8001794:	20000217 	.word	0x20000217
 8001798:	20000289 	.word	0x20000289
 800179c:	20000250 	.word	0x20000250

080017a0 <main>:
//###
#endif
//*******************************************************
//==================== -MAIN Fun- =======================
//*******************************************************
int main (){
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af02      	add	r7, sp, #8
	//******************************
	//======== -BLDC_init- ========
	//******************************
	BLDC_init();
 80017a6:	f7ff feed 	bl	8001584 <BLDC_init>

	while(1){
		delay(SYSTEM_DELAY, U_ms, clk);
 80017aa:	4a6e      	ldr	r2, [pc, #440]	; (8001964 <main+0x1c4>)
 80017ac:	2100      	movs	r1, #0
 80017ae:	486e      	ldr	r0, [pc, #440]	; (8001968 <main+0x1c8>)
 80017b0:	f000 fad2 	bl	8001d58 <delay>
		system_count++;
 80017b4:	4b6d      	ldr	r3, [pc, #436]	; (800196c <main+0x1cc>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b6b      	ldr	r3, [pc, #428]	; (800196c <main+0x1cc>)
 80017be:	701a      	strb	r2, [r3, #0]
		//******************************
		//======== -speed- ============
		//******************************
		//read speed value
		//$.direction.speed.s
		SET_MOTOR_SPEED=atoi(string_data+3)*10;//reat user set point speed
 80017c0:	4b6b      	ldr	r3, [pc, #428]	; (8001970 <main+0x1d0>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 f8e2 	bl	800398c <atoi>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b67      	ldr	r3, [pc, #412]	; (8001974 <main+0x1d4>)
 80017d6:	601a      	str	r2, [r3, #0]

		//(filter) if actual speed is hire than 2300/10 RPM make speed 2300
		//to remove hall effect noise
		if( (abs(MOTOR_SPEED_RPM-last_read_motor_speed))>MAX_SPEED ){
 80017d8:	4b67      	ldr	r3, [pc, #412]	; (8001978 <main+0x1d8>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b67      	ldr	r3, [pc, #412]	; (800197c <main+0x1dc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bfb8      	it	lt
 80017e6:	425b      	neglt	r3, r3
 80017e8:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80017ec:	4293      	cmp	r3, r2
 80017ee:	dd04      	ble.n	80017fa <main+0x5a>
			MOTOR_SPEED_RPM=last_read_motor_speed;
 80017f0:	4b62      	ldr	r3, [pc, #392]	; (800197c <main+0x1dc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a60      	ldr	r2, [pc, #384]	; (8001978 <main+0x1d8>)
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e003      	b.n	8001802 <main+0x62>
		}
		else {
			last_read_motor_speed=MOTOR_SPEED_RPM;
 80017fa:	4b5f      	ldr	r3, [pc, #380]	; (8001978 <main+0x1d8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a5f      	ldr	r2, [pc, #380]	; (800197c <main+0x1dc>)
 8001800:	6013      	str	r3, [r2, #0]
		}

		//******************************
		//============ -PID- ===========
		//******************************
		error=abs(MOTOR_SPEED_RPM-SET_MOTOR_SPEED);
 8001802:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <main+0x1d8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b5a      	ldr	r3, [pc, #360]	; (8001974 <main+0x1d4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	bfb8      	it	lt
 8001812:	425b      	neglt	r3, r3
 8001814:	4a5a      	ldr	r2, [pc, #360]	; (8001980 <main+0x1e0>)
 8001816:	6013      	str	r3, [r2, #0]

		if(MOTOR_SPEED_RPM<SET_MOTOR_SPEED){
 8001818:	4b57      	ldr	r3, [pc, #348]	; (8001978 <main+0x1d8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b55      	ldr	r3, [pc, #340]	; (8001974 <main+0x1d4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d229      	bcs.n	800187a <main+0xda>
			MOTOR_PWM+=(error/Ki_INV);
 8001826:	4b57      	ldr	r3, [pc, #348]	; (8001984 <main+0x1e4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fdfa 	bl	8000424 <__aeabi_i2d>
 8001830:	4604      	mov	r4, r0
 8001832:	460d      	mov	r5, r1
 8001834:	4b52      	ldr	r3, [pc, #328]	; (8001980 <main+0x1e0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fdf3 	bl	8000424 <__aeabi_i2d>
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b51      	ldr	r3, [pc, #324]	; (8001988 <main+0x1e8>)
 8001844:	f7fe ff82 	bl	800074c <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4620      	mov	r0, r4
 800184e:	4629      	mov	r1, r5
 8001850:	f7fe fc9c 	bl	800018c <__adddf3>
 8001854:	4603      	mov	r3, r0
 8001856:	460c      	mov	r4, r1
 8001858:	4618      	mov	r0, r3
 800185a:	4621      	mov	r1, r4
 800185c:	f7ff f85e 	bl	800091c <__aeabi_d2iz>
 8001860:	4602      	mov	r2, r0
 8001862:	4b48      	ldr	r3, [pc, #288]	; (8001984 <main+0x1e4>)
 8001864:	601a      	str	r2, [r3, #0]
			if(MOTOR_PWM>=MAX_PWM){
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <main+0x1e4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800186e:	db3f      	blt.n	80018f0 <main+0x150>
				MOTOR_PWM=MAX_PWM;
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <main+0x1e4>)
 8001872:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e03a      	b.n	80018f0 <main+0x150>
			}
		}
		else if(MOTOR_SPEED_RPM>SET_MOTOR_SPEED){
 800187a:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <main+0x1d8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <main+0x1d4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d927      	bls.n	80018d8 <main+0x138>
			MOTOR_PWM-=(error/Ki_INV);
 8001888:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <main+0x1e4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fdc9 	bl	8000424 <__aeabi_i2d>
 8001892:	4604      	mov	r4, r0
 8001894:	460d      	mov	r5, r1
 8001896:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <main+0x1e0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fdc2 	bl	8000424 <__aeabi_i2d>
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b38      	ldr	r3, [pc, #224]	; (8001988 <main+0x1e8>)
 80018a6:	f7fe ff51 	bl	800074c <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4620      	mov	r0, r4
 80018b0:	4629      	mov	r1, r5
 80018b2:	f7fe fc69 	bl	8000188 <__aeabi_dsub>
 80018b6:	4603      	mov	r3, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	4618      	mov	r0, r3
 80018bc:	4621      	mov	r1, r4
 80018be:	f7ff f82d 	bl	800091c <__aeabi_d2iz>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <main+0x1e4>)
 80018c6:	601a      	str	r2, [r3, #0]
			if(MOTOR_PWM<=5){
 80018c8:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <main+0x1e4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	dc0f      	bgt.n	80018f0 <main+0x150>
				MOTOR_PWM=5;
 80018d0:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <main+0x1e4>)
 80018d2:	2205      	movs	r2, #5
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	e00b      	b.n	80018f0 <main+0x150>
			}
		}
		else{//error=0
			if(SET_MOTOR_SPEED==0){
 80018d8:	4b26      	ldr	r3, [pc, #152]	; (8001974 <main+0x1d4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d103      	bne.n	80018e8 <main+0x148>
				MOTOR_PWM=2;
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <main+0x1e4>)
 80018e2:	2202      	movs	r2, #2
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e003      	b.n	80018f0 <main+0x150>
			}
			else{
				MOTOR_PWM=MOTOR_PWM;
 80018e8:	4b26      	ldr	r3, [pc, #152]	; (8001984 <main+0x1e4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a25      	ldr	r2, [pc, #148]	; (8001984 <main+0x1e4>)
 80018ee:	6013      	str	r3, [r2, #0]

		//******************************
		//======== -direction- ========
		//******************************
#ifdef MOTOR_MASTER
		if(string_data[2]=='1'){//if motor 2 string_data[1]
 80018f0:	4b26      	ldr	r3, [pc, #152]	; (800198c <main+0x1ec>)
 80018f2:	789b      	ldrb	r3, [r3, #2]
 80018f4:	2b31      	cmp	r3, #49	; 0x31
 80018f6:	d103      	bne.n	8001900 <main+0x160>
			MOTOR_DIRECTION=0;
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <main+0x1f0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e002      	b.n	8001906 <main+0x166>
		}
		else {
			MOTOR_DIRECTION=1;
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <main+0x1f0>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
#endif

		//******************************
		//======== -display- ========
		//******************************
		if(system_count>1){
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <main+0x1cc>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d926      	bls.n	800195c <main+0x1bc>
#ifdef MOTOR_MASTER
			//master
			sprintf (buf, "R=%d,C1=%ld,",MOTOR_SPEED_RPM/10,encoder_pulses);
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <main+0x1d8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a20      	ldr	r2, [pc, #128]	; (8001994 <main+0x1f4>)
 8001914:	fb82 1203 	smull	r1, r2, r2, r3
 8001918:	1092      	asrs	r2, r2, #2
 800191a:	17db      	asrs	r3, r3, #31
 800191c:	1ad2      	subs	r2, r2, r3
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <main+0x1f8>)
 8001920:	cb18      	ldmia	r3, {r3, r4}
 8001922:	e9cd 3400 	strd	r3, r4, [sp]
 8001926:	491d      	ldr	r1, [pc, #116]	; (800199c <main+0x1fc>)
 8001928:	481d      	ldr	r0, [pc, #116]	; (80019a0 <main+0x200>)
 800192a:	f002 f85d 	bl	80039e8 <siprintf>
			strcat(buf, string_data2);
 800192e:	491d      	ldr	r1, [pc, #116]	; (80019a4 <main+0x204>)
 8001930:	481b      	ldr	r0, [pc, #108]	; (80019a0 <main+0x200>)
 8001932:	f002 f879 	bl	8003a28 <strcat>
			strcat(buf, "\n");
 8001936:	481a      	ldr	r0, [pc, #104]	; (80019a0 <main+0x200>)
 8001938:	f7fe fc1a 	bl	8000170 <strlen>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <main+0x200>)
 8001942:	4413      	add	r3, r2
 8001944:	4918      	ldr	r1, [pc, #96]	; (80019a8 <main+0x208>)
 8001946:	461a      	mov	r2, r3
 8001948:	460b      	mov	r3, r1
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	8013      	strh	r3, [r2, #0]
			USART_SEND_STRING(USART1,buf);
 800194e:	4914      	ldr	r1, [pc, #80]	; (80019a0 <main+0x200>)
 8001950:	4816      	ldr	r0, [pc, #88]	; (80019ac <main+0x20c>)
 8001952:	f001 fda9 	bl	80034a8 <USART_SEND_STRING>
#ifndef MOTOR_MASTER
			sprintf (buf, "C2=%ld*",encoder_pulses);
			USART_SEND_STRING(USART1,buf);
#endif

			system_count=0;
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <main+0x1cc>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
		}
		MOTOR_SPEED_RPM=0;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <main+0x1d8>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
		delay(SYSTEM_DELAY, U_ms, clk);
 8001962:	e722      	b.n	80017aa <main+0xa>
 8001964:	02255100 	.word	0x02255100
 8001968:	42b40000 	.word	0x42b40000
 800196c:	20000218 	.word	0x20000218
 8001970:	20000243 	.word	0x20000243
 8001974:	20000278 	.word	0x20000278
 8001978:	2000028c 	.word	0x2000028c
 800197c:	2000023c 	.word	0x2000023c
 8001980:	20000290 	.word	0x20000290
 8001984:	20000238 	.word	0x20000238
 8001988:	40140000 	.word	0x40140000
 800198c:	20000240 	.word	0x20000240
 8001990:	20000273 	.word	0x20000273
 8001994:	66666667 	.word	0x66666667
 8001998:	20000280 	.word	0x20000280
 800199c:	080043ac 	.word	0x080043ac
 80019a0:	20000294 	.word	0x20000294
 80019a4:	20000250 	.word	0x20000250
 80019a8:	080043bc 	.word	0x080043bc
 80019ac:	40013800 	.word	0x40013800

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f001 ffd8 	bl	8003994 <__errno>
 80019e4:	4602      	mov	r2, r0
 80019e6:	230c      	movs	r3, #12
 80019e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20005000 	.word	0x20005000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	2000021c 	.word	0x2000021c
 8001a18:	20000378 	.word	0x20000378

08001a1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a1e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a24:	480c      	ldr	r0, [pc, #48]	; (8001a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a26:	490d      	ldr	r1, [pc, #52]	; (8001a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <LoopForever+0xe>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a3c:	4c0a      	ldr	r4, [pc, #40]	; (8001a68 <LoopForever+0x16>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a4a:	f001 ffa9 	bl	80039a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a4e:	f7ff fea7 	bl	80017a0 <main>

08001a52 <LoopForever>:

LoopForever:
    b LoopForever
 8001a52:	e7fe      	b.n	8001a52 <LoopForever>
  ldr   r0, =_estack
 8001a54:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001a60:	08004504 	.word	0x08004504
  ldr r2, =_sbss
 8001a64:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001a68:	20000378 	.word	0x20000378

08001a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <ADC1_2_IRQHandler>

08001a6e <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <getposition+0x14>
		rval =0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <getposition+0x1e>
		rval =4;
 8001a88:	2304      	movs	r3, #4
 8001a8a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d101      	bne.n	8001a96 <getposition+0x28>
		rval =8;
 8001a92:	2308      	movs	r3, #8
 8001a94:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d101      	bne.n	8001aa0 <getposition+0x32>
		rval =12;
 8001a9c:	230c      	movs	r3, #12
 8001a9e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d101      	bne.n	8001aaa <getposition+0x3c>
		rval =16;
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d101      	bne.n	8001ab4 <getposition+0x46>
		rval =20;
 8001ab0:	2314      	movs	r3, #20
 8001ab2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d101      	bne.n	8001abe <getposition+0x50>
		rval =24;
 8001aba:	2318      	movs	r3, #24
 8001abc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	2b07      	cmp	r3, #7
 8001ac2:	d101      	bne.n	8001ac8 <getposition+0x5a>
		rval =28;
 8001ac4:	231c      	movs	r3, #28
 8001ac6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d101      	bne.n	8001ad2 <getposition+0x64>
		rval =0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d101      	bne.n	8001adc <getposition+0x6e>
		rval =4;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	2b0a      	cmp	r3, #10
 8001ae0:	d101      	bne.n	8001ae6 <getposition+0x78>
		rval =8;
 8001ae2:	2308      	movs	r3, #8
 8001ae4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	2b0b      	cmp	r3, #11
 8001aea:	d101      	bne.n	8001af0 <getposition+0x82>
		rval =12;
 8001aec:	230c      	movs	r3, #12
 8001aee:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d101      	bne.n	8001afa <getposition+0x8c>
		rval =16;
 8001af6:	2310      	movs	r3, #16
 8001af8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	2b0d      	cmp	r3, #13
 8001afe:	d101      	bne.n	8001b04 <getposition+0x96>
		rval =20;
 8001b00:	2314      	movs	r3, #20
 8001b02:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	2b0e      	cmp	r3, #14
 8001b08:	d101      	bne.n	8001b0e <getposition+0xa0>
		rval =24;
 8001b0a:	2318      	movs	r3, #24
 8001b0c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	2b0f      	cmp	r3, #15
 8001b12:	d101      	bne.n	8001b18 <getposition+0xaa>
		rval =28;
 8001b14:	231c      	movs	r3, #28
 8001b16:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8001b18:	7bfb      	ldrb	r3, [r7, #15]


}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4a69      	ldr	r2, [pc, #420]	; (8001cdc <pinmode+0x1b8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d106      	bne.n	8001b48 <pinmode+0x24>
		GPIOA_Clock_Enable();
 8001b3a:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <pinmode+0x1bc>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	4a68      	ldr	r2, [pc, #416]	; (8001ce0 <pinmode+0x1bc>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6193      	str	r3, [r2, #24]
 8001b46:	e010      	b.n	8001b6a <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4a66      	ldr	r2, [pc, #408]	; (8001ce4 <pinmode+0x1c0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d106      	bne.n	8001b5e <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8001b50:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <pinmode+0x1bc>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a62      	ldr	r2, [pc, #392]	; (8001ce0 <pinmode+0x1bc>)
 8001b56:	f043 0308 	orr.w	r3, r3, #8
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	e005      	b.n	8001b6a <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 8001b5e:	4b60      	ldr	r3, [pc, #384]	; (8001ce0 <pinmode+0x1bc>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	4a5f      	ldr	r2, [pc, #380]	; (8001ce0 <pinmode+0x1bc>)
 8001b64:	f043 0310 	orr.w	r3, r3, #16
 8001b68:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8001b6a:	897b      	ldrh	r3, [r7, #10]
 8001b6c:	2b07      	cmp	r3, #7
 8001b6e:	d856      	bhi.n	8001c1e <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 8001b70:	897b      	ldrh	r3, [r7, #10]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff7b 	bl	8001a6e <getposition>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4093      	lsls	r3, r2
 8001b80:	43da      	mvns	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	401a      	ands	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d002      	beq.n	8001b98 <pinmode+0x74>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b18      	cmp	r3, #24
 8001b96:	d133      	bne.n	8001c00 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b18      	cmp	r3, #24
 8001b9c:	d117      	bne.n	8001bce <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8001b9e:	897b      	ldrh	r3, [r7, #10]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff64 	bl	8001a6e <getposition>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2308      	movs	r3, #8
 8001bac:	fa03 f202 	lsl.w	r2, r3, r2
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	897a      	ldrh	r2, [r7, #10]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001bcc:	e081      	b.n	8001cd2 <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8001bce:	897b      	ldrh	r3, [r7, #10]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff4c 	bl	8001a6e <getposition>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2308      	movs	r3, #8
 8001bdc:	fa03 f202 	lsl.w	r2, r3, r2
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	431a      	orrs	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	897a      	ldrh	r2, [r7, #10]
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	43d2      	mvns	r2, r2
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001bfe:	e068      	b.n	8001cd2 <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 8001c00:	897b      	ldrh	r3, [r7, #10]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff33 	bl	8001a6e <getposition>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	fa03 f202 	lsl.w	r2, r3, r2
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	601a      	str	r2, [r3, #0]

	}



}
 8001c1c:	e059      	b.n	8001cd2 <pinmode+0x1ae>
	else if(pin>7){
 8001c1e:	897b      	ldrh	r3, [r7, #10]
 8001c20:	2b07      	cmp	r3, #7
 8001c22:	d956      	bls.n	8001cd2 <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 8001c24:	897b      	ldrh	r3, [r7, #10]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff21 	bl	8001a6e <getposition>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	230f      	movs	r3, #15
 8001c32:	4093      	lsls	r3, r2
 8001c34:	43da      	mvns	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d002      	beq.n	8001c4c <pinmode+0x128>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b18      	cmp	r3, #24
 8001c4a:	d133      	bne.n	8001cb4 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b18      	cmp	r3, #24
 8001c50:	d117      	bne.n	8001c82 <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8001c52:	897b      	ldrh	r3, [r7, #10]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff0a 	bl	8001a6e <getposition>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2308      	movs	r3, #8
 8001c60:	fa03 f202 	lsl.w	r2, r3, r2
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	897a      	ldrh	r2, [r7, #10]
 8001c74:	2101      	movs	r1, #1
 8001c76:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001c80:	e027      	b.n	8001cd2 <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8001c82:	897b      	ldrh	r3, [r7, #10]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fef2 	bl	8001a6e <getposition>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	2308      	movs	r3, #8
 8001c90:	fa03 f202 	lsl.w	r2, r3, r2
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	897a      	ldrh	r2, [r7, #10]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8001caa:	43d2      	mvns	r2, r2
 8001cac:	401a      	ands	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001cb2:	e00e      	b.n	8001cd2 <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8001cb4:	897b      	ldrh	r3, [r7, #10]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fed9 	bl	8001a6e <getposition>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	fa03 f202 	lsl.w	r2, r3, r2
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
}
 8001cd0:	e7ff      	b.n	8001cd2 <pinmode+0x1ae>
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40010800 	.word	0x40010800
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40010c00 	.word	0x40010c00

08001ce8 <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_typeDef* GPIOx,uint16_t pin,uint8_t status){
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <pinwrite+0x2a>
		GPIOx->GPIOx_ODR |=(1<<pin);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->GPIOx_ODR &=~(1<<pin);

}
 8001d10:	e009      	b.n	8001d26 <pinwrite+0x3e>
	else GPIOx->GPIOx_ODR &=~(1<<pin);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1e:	43d2      	mvns	r2, r2
 8001d20:	401a      	ands	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60da      	str	r2, [r3, #12]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <READ_PIN>:
 * @param [in]      - Pin: GPIOx PIN Number
 * @retval          - uint8_t
 * Note             - none
 */

uint8_t READ_PIN(GPIO_typeDef* GPIOx, uint16_t pin){
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
	return (GPIOx->GPIOx_IDR>>pin)&1;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	fa22 f303 	lsr.w	r3, r2, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(float time,uint8_t U,uint32_t clk){
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b08b      	sub	sp, #44	; 0x2c
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	460b      	mov	r3, r1
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	72fb      	strb	r3, [r7, #11]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 8001d66:	4b5b      	ldr	r3, [pc, #364]	; (8001ed4 <delay+0x17c>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a5a      	ldr	r2, [pc, #360]	; (8001ed4 <delay+0x17c>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001d72:	4b59      	ldr	r3, [pc, #356]	; (8001ed8 <delay+0x180>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b57      	ldr	r3, [pc, #348]	; (8001ed8 <delay+0x180>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
	uint32_t unit =1000;
 8001d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d94:	61bb      	str	r3, [r7, #24]
	uint8_t  increase=2;
 8001d96:	2302      	movs	r3, #2
 8001d98:	75fb      	strb	r3, [r7, #23]

	if (U == 0){
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10f      	bne.n	8001dc0 <delay+0x68>
		unit = 1000;
 8001da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da4:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 100;
 8001da6:	494d      	ldr	r1, [pc, #308]	; (8001edc <delay+0x184>)
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff f8a9 	bl	8000f00 <__aeabi_fcmpgt>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <delay+0x62>
 8001db4:	2364      	movs	r3, #100	; 0x64
 8001db6:	75fb      	strb	r3, [r7, #23]
 8001db8:	e045      	b.n	8001e46 <delay+0xee>
		else increase = 10;
 8001dba:	230a      	movs	r3, #10
 8001dbc:	75fb      	strb	r3, [r7, #23]
 8001dbe:	e042      	b.n	8001e46 <delay+0xee>
	}
	else {
		unit = 1000000;
 8001dc0:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <delay+0x188>)
 8001dc2:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 10;
 8001dc4:	4945      	ldr	r1, [pc, #276]	; (8001edc <delay+0x184>)
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7ff f89a 	bl	8000f00 <__aeabi_fcmpgt>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <delay+0x80>
 8001dd2:	230a      	movs	r3, #10
 8001dd4:	75fb      	strb	r3, [r7, #23]
 8001dd6:	e036      	b.n	8001e46 <delay+0xee>
		else increase = 5;
 8001dd8:	2305      	movs	r3, #5
 8001dda:	75fb      	strb	r3, [r7, #23]
	}

	while(user_flage==1){
 8001ddc:	e033      	b.n	8001e46 <delay+0xee>
		user_top = (clk/unit*time)/( user_pre );
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fe76 	bl	8000ad8 <__aeabi_ui2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	68f9      	ldr	r1, [r7, #12]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fec9 	bl	8000b88 <__aeabi_fmul>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461c      	mov	r4, r3
 8001dfa:	69f8      	ldr	r0, [r7, #28]
 8001dfc:	f7fe fe6c 	bl	8000ad8 <__aeabi_ui2f>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4619      	mov	r1, r3
 8001e04:	4620      	mov	r0, r4
 8001e06:	f7fe ff73 	bl	8000cf0 <__aeabi_fdiv>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff f881 	bl	8000f14 <__aeabi_f2uiz>
 8001e12:	4603      	mov	r3, r0
 8001e14:	623b      	str	r3, [r7, #32]
		if(user_top>=32000){
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001e1c:	d310      	bcc.n	8001e40 <delay+0xe8>

			if(user_pre>65530){
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d906      	bls.n	8001e36 <delay+0xde>
				user_pre=65530;
 8001e28:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8001e2c:	61fb      	str	r3, [r7, #28]
				user_flage=0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e34:	e007      	b.n	8001e46 <delay+0xee>
			}
			else user_pre+=increase;
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e002      	b.n	8001e46 <delay+0xee>

		}
		else{
			user_flage=0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(user_flage==1){
 8001e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d0c7      	beq.n	8001dde <delay+0x86>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001e4e:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <delay+0x180>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <delay+0x180>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0201 	bic.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <delay+0x180>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <delay+0x180>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0204 	orr.w	r2, r2, #4
 8001e6c:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <delay+0x180>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <delay+0x180>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0201 	orr.w	r2, r2, #1
 8001e7c:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <delay+0x180>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a3a      	ldr	r2, [r7, #32]
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <delay+0x180>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	3a01      	subs	r2, #1
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <delay+0x180>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <delay+0x180>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <delay+0x180>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <delay+0x180>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <delay+0x18c>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <delay+0x190>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <delay+0x190>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 8001ec2:	bf00      	nop
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <delay+0x18c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1fb      	bne.n	8001ec4 <delay+0x16c>

	}
}
 8001ecc:	bf00      	nop
 8001ece:	372c      	adds	r7, #44	; 0x2c
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	20000020 	.word	0x20000020
 8001edc:	453b8000 	.word	0x453b8000
 8001ee0:	000f4240 	.word	0x000f4240
 8001ee4:	2000001c 	.word	0x2000001c
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <TIMER_ISR>:

//==================================================================================================

void TIMER_ISR(TIMERS_typeDef* ISR_TIMER,uint16_t time_ms,uint8_t U,uint32_t clk,void (*calback) (void)){
 8001eec:	b480      	push	{r7}
 8001eee:	b08b      	sub	sp, #44	; 0x2c
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	817b      	strh	r3, [r7, #10]
 8001efa:	4613      	mov	r3, r2
 8001efc:	727b      	strb	r3, [r7, #9]

	TIMER3_CLOCK_Enable();//enable timer3 clock
 8001efe:	4b49      	ldr	r3, [pc, #292]	; (8002024 <TIMER_ISR+0x138>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a48      	ldr	r2, [pc, #288]	; (8002024 <TIMER_ISR+0x138>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	61d3      	str	r3, [r2, #28]
	ISR_TIMER->TIMx_CR1 &=~(1<<0);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0201 	bic.w	r2, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	601a      	str	r2, [r3, #0]
	ISRcalback[0] = calback;
 8001f16:	4a44      	ldr	r2, [pc, #272]	; (8002028 <TIMER_ISR+0x13c>)
 8001f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1a:	6013      	str	r3, [r2, #0]
	ISR_TIMER_COPY=ISR_TIMER;
 8001f1c:	4a43      	ldr	r2, [pc, #268]	; (800202c <TIMER_ISR+0x140>)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6013      	str	r3, [r2, #0]

	char user_flage=1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
	uint8_t  increase=2;
 8001f30:	2302      	movs	r3, #2
 8001f32:	76fb      	strb	r3, [r7, #27]
	uint32_t unit =1000;
 8001f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f38:	617b      	str	r3, [r7, #20]
	if (U == 0){
 8001f3a:	7a7b      	ldrb	r3, [r7, #9]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10d      	bne.n	8001f5c <TIMER_ISR+0x70>
			unit = 1000;
 8001f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f44:	617b      	str	r3, [r7, #20]
			if (time_ms > 3000)increase = 100;
 8001f46:	897b      	ldrh	r3, [r7, #10]
 8001f48:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d902      	bls.n	8001f56 <TIMER_ISR+0x6a>
 8001f50:	2364      	movs	r3, #100	; 0x64
 8001f52:	76fb      	strb	r3, [r7, #27]
 8001f54:	e032      	b.n	8001fbc <TIMER_ISR+0xd0>
			else increase = 10;
 8001f56:	230a      	movs	r3, #10
 8001f58:	76fb      	strb	r3, [r7, #27]
 8001f5a:	e02f      	b.n	8001fbc <TIMER_ISR+0xd0>
		}
		else {
			unit = 1000000;
 8001f5c:	4b34      	ldr	r3, [pc, #208]	; (8002030 <TIMER_ISR+0x144>)
 8001f5e:	617b      	str	r3, [r7, #20]
			if (time_ms > 3000)increase = 10;
 8001f60:	897b      	ldrh	r3, [r7, #10]
 8001f62:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d902      	bls.n	8001f70 <TIMER_ISR+0x84>
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	76fb      	strb	r3, [r7, #27]
 8001f6e:	e025      	b.n	8001fbc <TIMER_ISR+0xd0>
			else increase = 5;
 8001f70:	2305      	movs	r3, #5
 8001f72:	76fb      	strb	r3, [r7, #27]
		}

		while(user_flage==1){
 8001f74:	e022      	b.n	8001fbc <TIMER_ISR+0xd0>
			user_top = (clk/unit*time_ms)/( user_pre );
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	897a      	ldrh	r2, [r7, #10]
 8001f80:	fb02 f203 	mul.w	r2, r2, r3
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	623b      	str	r3, [r7, #32]
			if(user_top>=32000){
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001f92:	d310      	bcc.n	8001fb6 <TIMER_ISR+0xca>

				if(user_pre>65530){
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d906      	bls.n	8001fac <TIMER_ISR+0xc0>
					user_pre=65530;
 8001f9e:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8001fa2:	61fb      	str	r3, [r7, #28]
					user_flage=0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001faa:	e007      	b.n	8001fbc <TIMER_ISR+0xd0>
				}
				else user_pre+=increase;
 8001fac:	7efb      	ldrb	r3, [r7, #27]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	e002      	b.n	8001fbc <TIMER_ISR+0xd0>

			}
			else{
				user_flage=0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(user_flage==1){
 8001fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d0d8      	beq.n	8001f76 <TIMER_ISR+0x8a>
			}
		}



	ISR_TIMER->TIMx_CR1 &=~(1<<0);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 0201 	bic.w	r2, r3, #1
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	601a      	str	r2, [r3, #0]

	ISR_TIMER->TIMx_CR1  |=(1<<2);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f043 0204 	orr.w	r2, r3, #4
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

	ISR_TIMER->TIMx_DIER |=(1<<0);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	60da      	str	r2, [r3, #12]

	ISR_TIMER->TIMx_ARR=user_top;//frec peak value
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a3a      	ldr	r2, [r7, #32]
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c

	ISR_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28

	ISR_TIMER->TIMx_EGR |=(1<<0);//		Bit 0 UG: Update generation
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f043 0201 	orr.w	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	615a      	str	r2, [r3, #20]

	ISR_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	601a      	str	r2, [r3, #0]

	NVIC_TIM3_global_interrupt_Enable;
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <TIMER_ISR+0x148>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a08      	ldr	r2, [pc, #32]	; (8002034 <TIMER_ISR+0x148>)
 8002014:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002018:	6013      	str	r3, [r2, #0]

}
 800201a:	bf00      	nop
 800201c:	372c      	adds	r7, #44	; 0x2c
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40021000 	.word	0x40021000
 8002028:	200002d0 	.word	0x200002d0
 800202c:	200002dc 	.word	0x200002dc
 8002030:	000f4240 	.word	0x000f4240
 8002034:	e000e100 	.word	0xe000e100

08002038 <TIME_CALCULATION>:
//======================================================================================================

uint32_t TIME_CALCULATION(uint32_t clk,uint8_t TIMER_ST){
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
	if(TIMER_ST==TIMER_START){
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d132      	bne.n	80020b0 <TIME_CALCULATION+0x78>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 800204a:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <TIME_CALCULATION+0xd0>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4a2e      	ldr	r2, [pc, #184]	; (8002108 <TIME_CALCULATION+0xd0>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	61d3      	str	r3, [r2, #28]
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 8002056:	4b2d      	ldr	r3, [pc, #180]	; (800210c <TIME_CALCULATION+0xd4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a2c      	ldr	r2, [pc, #176]	; (800210c <TIME_CALCULATION+0xd4>)
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_CR1  |=(1<<2);
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <TIME_CALCULATION+0xd4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a29      	ldr	r2, [pc, #164]	; (800210c <TIME_CALCULATION+0xd4>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_DIER |=(1<<0);//Update interrupt enable
 800206e:	4b27      	ldr	r3, [pc, #156]	; (800210c <TIME_CALCULATION+0xd4>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	4a26      	ldr	r2, [pc, #152]	; (800210c <TIME_CALCULATION+0xd4>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	60d3      	str	r3, [r2, #12]

		TIM4->TIMx_ARR=64000;//peak value 8ms of freq=8000000hz
 800207a:	4b24      	ldr	r3, [pc, #144]	; (800210c <TIME_CALCULATION+0xd4>)
 800207c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002080:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM4->TIMx_PSC=0;//prescaller
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <TIME_CALCULATION+0xd4>)
 8002084:	2200      	movs	r2, #0
 8002086:	629a      	str	r2, [r3, #40]	; 0x28

		TIM4->TIMx_EGR |=(1<<0);//Bit 0 UG: Update generation
 8002088:	4b20      	ldr	r3, [pc, #128]	; (800210c <TIME_CALCULATION+0xd4>)
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	4a1f      	ldr	r2, [pc, #124]	; (800210c <TIME_CALCULATION+0xd4>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6153      	str	r3, [r2, #20]

		TIM4->TIMx_CR1 |=(1<<0);//enable the timer
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <TIME_CALCULATION+0xd4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1c      	ldr	r2, [pc, #112]	; (800210c <TIME_CALCULATION+0xd4>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6013      	str	r3, [r2, #0]
		NVIC_TIM4_global_interrupt_Enable;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <TIME_CALCULATION+0xd8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1a      	ldr	r2, [pc, #104]	; (8002110 <TIME_CALCULATION+0xd8>)
 80020a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020aa:	6013      	str	r3, [r2, #0]
		return 1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e025      	b.n	80020fc <TIME_CALCULATION+0xc4>
	}
	else {
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <TIME_CALCULATION+0xd4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a15      	ldr	r2, [pc, #84]	; (800210c <TIME_CALCULATION+0xd4>)
 80020b6:	f023 0301 	bic.w	r3, r3, #1
 80020ba:	6013      	str	r3, [r2, #0]
		timer_ticks=TIM4->TIMx_CNT;
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <TIME_CALCULATION+0xd4>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <TIME_CALCULATION+0xdc>)
 80020c4:	801a      	strh	r2, [r3, #0]
		uint32_t X=((timer_ticks+(overflowtims*64000))/(clk/1000000));
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <TIME_CALCULATION+0xdc>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <TIME_CALCULATION+0xe0>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 80020d6:	fb03 f301 	mul.w	r3, r3, r1
 80020da:	4413      	add	r3, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <TIME_CALCULATION+0xe4>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0c9b      	lsrs	r3, r3, #18
 80020e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ec:	60fb      	str	r3, [r7, #12]
		overflowtims=0;
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <TIME_CALCULATION+0xe0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	801a      	strh	r2, [r3, #0]
		timer_ticks=0;
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <TIME_CALCULATION+0xdc>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	801a      	strh	r2, [r3, #0]
		return X;
 80020fa:	68fb      	ldr	r3, [r7, #12]
	}
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	40000800 	.word	0x40000800
 8002110:	e000e100 	.word	0xe000e100
 8002114:	20000224 	.word	0x20000224
 8002118:	20000222 	.word	0x20000222
 800211c:	431bde83 	.word	0x431bde83

08002120 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 800212e:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <SPWM_timer_INIT+0x100>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <SPWM_timer_INIT+0x100>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d12f      	bne.n	80021a4 <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 8002144:	4b36      	ldr	r3, [pc, #216]	; (8002220 <SPWM_timer_INIT+0x100>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	4b35      	ldr	r3, [pc, #212]	; (8002220 <SPWM_timer_INIT+0x100>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002152:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 8002154:	4b32      	ldr	r3, [pc, #200]	; (8002220 <SPWM_timer_INIT+0x100>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <SPWM_timer_INIT+0x100>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002162:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8002164:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <SPWM_timer_INIT+0x100>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <SPWM_timer_INIT+0x100>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0208 	orr.w	r2, r2, #8
 8002172:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8002174:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <SPWM_timer_INIT+0x100>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <SPWM_timer_INIT+0x100>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002182:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8002184:	4b26      	ldr	r3, [pc, #152]	; (8002220 <SPWM_timer_INIT+0x100>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <SPWM_timer_INIT+0x100>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0210 	orr.w	r2, r2, #16
 8002192:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <SPWM_timer_INIT+0x100>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6a1a      	ldr	r2, [r3, #32]
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <SPWM_timer_INIT+0x100>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <SPWM_timer_INIT+0x100>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <SPWM_timer_INIT+0x100>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021b2:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <SPWM_timer_INIT+0x100>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <SPWM_timer_INIT+0x100>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <SPWM_timer_INIT+0x100>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <SPWM_timer_INIT+0x100>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <SPWM_timer_INIT+0x100>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <SPWM_timer_INIT+0x100>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e2:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <SPWM_timer_INIT+0x100>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <SPWM_timer_INIT+0x100>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <SPWM_timer_INIT+0x100>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <SPWM_timer_INIT+0x100>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <SPWM_timer_INIT+0x100>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <SPWM_timer_INIT+0x100>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000004 	.word	0x20000004

08002224 <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <TIM2_IRQHandler+0x34>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <TIM2_IRQHandler+0x34>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <TIM2_IRQHandler+0x38>)
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <TIM2_IRQHandler+0x34>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <TIM2_IRQHandler+0x34>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0201 	bic.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]

}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000020 	.word	0x20000020
 800225c:	2000001c 	.word	0x2000001c

08002260 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <TIM3_IRQHandler+0x6c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d119      	bne.n	80022a0 <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <TIM3_IRQHandler+0x70>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <TIM3_IRQHandler+0x70>)
 8002272:	f023 0301 	bic.w	r3, r3, #1
 8002276:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <TIM3_IRQHandler+0x74>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <TIM3_IRQHandler+0x74>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3b01      	subs	r3, #1
 8002286:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <TIM3_IRQHandler+0x74>)
 8002288:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 800228a:	e01c      	b.n	80022c6 <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <TIM3_IRQHandler+0x6c>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <TIM3_IRQHandler+0x70>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <TIM3_IRQHandler+0x70>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6013      	str	r3, [r2, #0]
}
 800229e:	e012      	b.n	80022c6 <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <TIM3_IRQHandler+0x78>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <TIM3_IRQHandler+0x78>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <TIM3_IRQHandler+0x78>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <TIM3_IRQHandler+0x78>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <TIM3_IRQHandler+0x7c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4798      	blx	r3
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000022c 	.word	0x2000022c
 80022d0:	40000400 	.word	0x40000400
 80022d4:	20000228 	.word	0x20000228
 80022d8:	200002dc 	.word	0x200002dc
 80022dc:	200002d0 	.word	0x200002d0

080022e0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <TIM4_IRQHandler+0x24>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <TIM4_IRQHandler+0x24>)
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	6113      	str	r3, [r2, #16]
	overflowtims++;
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <TIM4_IRQHandler+0x28>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <TIM4_IRQHandler+0x28>)
 80022fa:	801a      	strh	r2, [r3, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40000800 	.word	0x40000800
 8002308:	20000222 	.word	0x20000222

0800230c <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 8002310:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <TIM1_UP_IRQHandler+0x17c>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b5d      	ldr	r3, [pc, #372]	; (800248c <TIM1_UP_IRQHandler+0x180>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d911      	bls.n	8002340 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 800231c:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <TIM1_UP_IRQHandler+0x184>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
		flage1=0;
 8002322:	4b5c      	ldr	r3, [pc, #368]	; (8002494 <TIM1_UP_IRQHandler+0x188>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 8002328:	4b58      	ldr	r3, [pc, #352]	; (800248c <TIM1_UP_IRQHandler+0x180>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a5a      	ldr	r2, [pc, #360]	; (8002498 <TIM1_UP_IRQHandler+0x18c>)
 800232e:	7812      	ldrb	r2, [r2, #0]
 8002330:	fbb3 f2f2 	udiv	r2, r3, r2
 8002334:	4b55      	ldr	r3, [pc, #340]	; (800248c <TIM1_UP_IRQHandler+0x180>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4413      	add	r3, r2
 800233a:	4a53      	ldr	r2, [pc, #332]	; (8002488 <TIM1_UP_IRQHandler+0x17c>)
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e018      	b.n	8002372 <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 8002340:	4b51      	ldr	r3, [pc, #324]	; (8002488 <TIM1_UP_IRQHandler+0x17c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b63      	cmp	r3, #99	; 0x63
 8002346:	d814      	bhi.n	8002372 <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 8002348:	4b51      	ldr	r3, [pc, #324]	; (8002490 <TIM1_UP_IRQHandler+0x184>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
		flage1=1;
 800234e:	4b51      	ldr	r3, [pc, #324]	; (8002494 <TIM1_UP_IRQHandler+0x188>)
 8002350:	2201      	movs	r2, #1
 8002352:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 8002354:	4b51      	ldr	r3, [pc, #324]	; (800249c <TIM1_UP_IRQHandler+0x190>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4b4f      	ldr	r3, [pc, #316]	; (800249c <TIM1_UP_IRQHandler+0x190>)
 8002360:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 8002362:	4b4a      	ldr	r3, [pc, #296]	; (800248c <TIM1_UP_IRQHandler+0x180>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <TIM1_UP_IRQHandler+0x18c>)
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	fbb3 f3f2 	udiv	r3, r3, r2
 800236e:	4a46      	ldr	r2, [pc, #280]	; (8002488 <TIM1_UP_IRQHandler+0x17c>)
 8002370:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <TIM1_UP_IRQHandler+0x190>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d110      	bne.n	800239c <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <TIM1_UP_IRQHandler+0x194>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a1a      	ldr	r2, [r3, #32]
 8002380:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <TIM1_UP_IRQHandler+0x194>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 800238a:	4b45      	ldr	r3, [pc, #276]	; (80024a0 <TIM1_UP_IRQHandler+0x194>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <TIM1_UP_IRQHandler+0x194>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0210 	orr.w	r2, r2, #16
 8002398:	621a      	str	r2, [r3, #32]
 800239a:	e013      	b.n	80023c4 <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 800239c:	4b3f      	ldr	r3, [pc, #252]	; (800249c <TIM1_UP_IRQHandler+0x190>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10f      	bne.n	80023c4 <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 80023a4:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <TIM1_UP_IRQHandler+0x194>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a1a      	ldr	r2, [r3, #32]
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <TIM1_UP_IRQHandler+0x194>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0210 	bic.w	r2, r2, #16
 80023b2:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 80023b4:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <TIM1_UP_IRQHandler+0x194>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6a1a      	ldr	r2, [r3, #32]
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <TIM1_UP_IRQHandler+0x194>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 80023c4:	4b33      	ldr	r3, [pc, #204]	; (8002494 <TIM1_UP_IRQHandler+0x188>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d11c      	bne.n	8002406 <TIM1_UP_IRQHandler+0xfa>
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <TIM1_UP_IRQHandler+0x184>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d118      	bne.n	8002406 <TIM1_UP_IRQHandler+0xfa>
		top=c;
 80023d4:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <TIM1_UP_IRQHandler+0x198>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2c      	ldr	r2, [pc, #176]	; (800248c <TIM1_UP_IRQHandler+0x180>)
 80023da:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 80023dc:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <TIM1_UP_IRQHandler+0x19c>)
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <TIM1_UP_IRQHandler+0x17c>)
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	4b29      	ldr	r3, [pc, #164]	; (800248c <TIM1_UP_IRQHandler+0x180>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2301      	movs	r3, #1
 80023ea:	f7ff fe99 	bl	8002120 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 80023ee:	4b27      	ldr	r3, [pc, #156]	; (800248c <TIM1_UP_IRQHandler+0x180>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a29      	ldr	r2, [pc, #164]	; (8002498 <TIM1_UP_IRQHandler+0x18c>)
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80023fa:	4b23      	ldr	r3, [pc, #140]	; (8002488 <TIM1_UP_IRQHandler+0x17c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a21      	ldr	r2, [pc, #132]	; (8002488 <TIM1_UP_IRQHandler+0x17c>)
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e035      	b.n	8002472 <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <TIM1_UP_IRQHandler+0x184>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d129      	bne.n	8002462 <TIM1_UP_IRQHandler+0x156>
 800240e:	4b21      	ldr	r3, [pc, #132]	; (8002494 <TIM1_UP_IRQHandler+0x188>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d125      	bne.n	8002462 <TIM1_UP_IRQHandler+0x156>
		top=c;
 8002416:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <TIM1_UP_IRQHandler+0x198>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1c      	ldr	r2, [pc, #112]	; (800248c <TIM1_UP_IRQHandler+0x180>)
 800241c:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 800241e:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <TIM1_UP_IRQHandler+0x17c>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b1a      	ldr	r3, [pc, #104]	; (800248c <TIM1_UP_IRQHandler+0x180>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	491c      	ldr	r1, [pc, #112]	; (8002498 <TIM1_UP_IRQHandler+0x18c>)
 8002428:	7809      	ldrb	r1, [r1, #0]
 800242a:	fbb3 f3f1 	udiv	r3, r3, r1
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	4a15      	ldr	r2, [pc, #84]	; (8002488 <TIM1_UP_IRQHandler+0x17c>)
 8002432:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8002434:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <TIM1_UP_IRQHandler+0x19c>)
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <TIM1_UP_IRQHandler+0x17c>)
 800243a:	6819      	ldr	r1, [r3, #0]
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <TIM1_UP_IRQHandler+0x180>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2301      	movs	r3, #1
 8002442:	f7ff fe6d 	bl	8002120 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <TIM1_UP_IRQHandler+0x180>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <TIM1_UP_IRQHandler+0x18c>)
 800244c:	7812      	ldrb	r2, [r2, #0]
 800244e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <TIM1_UP_IRQHandler+0x17c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d10b      	bne.n	8002472 <TIM1_UP_IRQHandler+0x166>
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <TIM1_UP_IRQHandler+0x17c>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	e007      	b.n	8002472 <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <TIM1_UP_IRQHandler+0x194>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <TIM1_UP_IRQHandler+0x194>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <TIM1_UP_IRQHandler+0x194>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <TIM1_UP_IRQHandler+0x194>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	611a      	str	r2, [r3, #16]
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000018 	.word	0x20000018
 800248c:	2000000c 	.word	0x2000000c
 8002490:	20000220 	.word	0x20000220
 8002494:	20000008 	.word	0x20000008
 8002498:	200002d8 	.word	0x200002d8
 800249c:	20000009 	.word	0x20000009
 80024a0:	20000004 	.word	0x20000004
 80024a4:	20000014 	.word	0x20000014
 80024a8:	20000010 	.word	0x20000010

080024ac <MCAL_speed_init>:
#include "stm32_speed_DRIVER.h"
#define FLASH_BASE_ADDR     0x40022000
#define FLASH_ACR_OFFSET    0x00
#define FLASH_ACR          (*(volatile unsigned int*)(FLASH_BASE_ADDR + FLASH_ACR_OFFSET))
#define FLASH_ACR_LATENCY_Pos 0
void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	460a      	mov	r2, r1
 80024b6:	71fb      	strb	r3, [r7, #7]
 80024b8:	4613      	mov	r3, r2
 80024ba:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d13a      	bne.n	8002538 <MCAL_speed_init+0x8c>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 80024c2:	79bb      	ldrb	r3, [r7, #6]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f040 80cc 	bne.w	8002662 <MCAL_speed_init+0x1b6>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 80024ca:	4b68      	ldr	r3, [pc, #416]	; (800266c <MCAL_speed_init+0x1c0>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a67      	ldr	r2, [pc, #412]	; (800266c <MCAL_speed_init+0x1c0>)
 80024d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d4:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 80024d6:	4b65      	ldr	r3, [pc, #404]	; (800266c <MCAL_speed_init+0x1c0>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a64      	ldr	r2, [pc, #400]	; (800266c <MCAL_speed_init+0x1c0>)
 80024dc:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80024e0:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 80024e2:	4b62      	ldr	r3, [pc, #392]	; (800266c <MCAL_speed_init+0x1c0>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4a61      	ldr	r2, [pc, #388]	; (800266c <MCAL_speed_init+0x1c0>)
 80024e8:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80024ec:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 80024ee:	4b5f      	ldr	r3, [pc, #380]	; (800266c <MCAL_speed_init+0x1c0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5e      	ldr	r2, [pc, #376]	; (800266c <MCAL_speed_init+0x1c0>)
 80024f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f8:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 80024fa:	4b5c      	ldr	r3, [pc, #368]	; (800266c <MCAL_speed_init+0x1c0>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4a5b      	ldr	r2, [pc, #364]	; (800266c <MCAL_speed_init+0x1c0>)
 8002500:	f023 0303 	bic.w	r3, r3, #3
 8002504:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8002506:	4b59      	ldr	r3, [pc, #356]	; (800266c <MCAL_speed_init+0x1c0>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4a58      	ldr	r2, [pc, #352]	; (800266c <MCAL_speed_init+0x1c0>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 8002512:	4b56      	ldr	r3, [pc, #344]	; (800266c <MCAL_speed_init+0x1c0>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4a55      	ldr	r2, [pc, #340]	; (800266c <MCAL_speed_init+0x1c0>)
 8002518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800251c:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 800251e:	4b53      	ldr	r3, [pc, #332]	; (800266c <MCAL_speed_init+0x1c0>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4a52      	ldr	r2, [pc, #328]	; (800266c <MCAL_speed_init+0x1c0>)
 8002524:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002528:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 800252a:	4b50      	ldr	r3, [pc, #320]	; (800266c <MCAL_speed_init+0x1c0>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a4f      	ldr	r2, [pc, #316]	; (800266c <MCAL_speed_init+0x1c0>)
 8002530:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002534:	6053      	str	r3, [r2, #4]

		}
	}


}
 8002536:	e094      	b.n	8002662 <MCAL_speed_init+0x1b6>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 8002538:	79bb      	ldrb	r3, [r7, #6]
 800253a:	2b03      	cmp	r3, #3
 800253c:	d150      	bne.n	80025e0 <MCAL_speed_init+0x134>
			RCC->RCC_CR |= (1 << 16);
 800253e:	4b4b      	ldr	r3, [pc, #300]	; (800266c <MCAL_speed_init+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a4a      	ldr	r2, [pc, #296]	; (800266c <MCAL_speed_init+0x1c0>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 800254a:	bf00      	nop
 800254c:	4b47      	ldr	r3, [pc, #284]	; (800266c <MCAL_speed_init+0x1c0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f9      	beq.n	800254c <MCAL_speed_init+0xa0>
			RCC->RCC_CFGR|=(1<<16);
 8002558:	4b44      	ldr	r3, [pc, #272]	; (800266c <MCAL_speed_init+0x1c0>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4a43      	ldr	r2, [pc, #268]	; (800266c <MCAL_speed_init+0x1c0>)
 800255e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002562:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8002564:	4b41      	ldr	r3, [pc, #260]	; (800266c <MCAL_speed_init+0x1c0>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a40      	ldr	r2, [pc, #256]	; (800266c <MCAL_speed_init+0x1c0>)
 800256a:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800256e:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8002570:	4b3e      	ldr	r3, [pc, #248]	; (800266c <MCAL_speed_init+0x1c0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a3d      	ldr	r2, [pc, #244]	; (800266c <MCAL_speed_init+0x1c0>)
 8002576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257a:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 800257c:	bf00      	nop
 800257e:	4b3b      	ldr	r3, [pc, #236]	; (800266c <MCAL_speed_init+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f9      	beq.n	800257e <MCAL_speed_init+0xd2>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 800258a:	4b39      	ldr	r3, [pc, #228]	; (8002670 <MCAL_speed_init+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a38      	ldr	r2, [pc, #224]	; (8002670 <MCAL_speed_init+0x1c4>)
 8002590:	f023 0307 	bic.w	r3, r3, #7
 8002594:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 8002596:	4b36      	ldr	r3, [pc, #216]	; (8002670 <MCAL_speed_init+0x1c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a35      	ldr	r2, [pc, #212]	; (8002670 <MCAL_speed_init+0x1c4>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 80025a2:	4b32      	ldr	r3, [pc, #200]	; (800266c <MCAL_speed_init+0x1c0>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4a31      	ldr	r2, [pc, #196]	; (800266c <MCAL_speed_init+0x1c0>)
 80025a8:	f023 0303 	bic.w	r3, r3, #3
 80025ac:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 80025ae:	4b2f      	ldr	r3, [pc, #188]	; (800266c <MCAL_speed_init+0x1c0>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a2e      	ldr	r2, [pc, #184]	; (800266c <MCAL_speed_init+0x1c0>)
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 80025ba:	4b2c      	ldr	r3, [pc, #176]	; (800266c <MCAL_speed_init+0x1c0>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4a2b      	ldr	r2, [pc, #172]	; (800266c <MCAL_speed_init+0x1c0>)
 80025c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c4:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 80025c6:	4b29      	ldr	r3, [pc, #164]	; (800266c <MCAL_speed_init+0x1c0>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a28      	ldr	r2, [pc, #160]	; (800266c <MCAL_speed_init+0x1c0>)
 80025cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80025d0:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <MCAL_speed_init+0x1c0>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a25      	ldr	r2, [pc, #148]	; (800266c <MCAL_speed_init+0x1c0>)
 80025d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025dc:	6053      	str	r3, [r2, #4]
}
 80025de:	e040      	b.n	8002662 <MCAL_speed_init+0x1b6>
		else if (mood==mood_FAST_MOOD_72MHzCORE72MHzpref){
 80025e0:	79bb      	ldrb	r3, [r7, #6]
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d13d      	bne.n	8002662 <MCAL_speed_init+0x1b6>
			RCC->RCC_CR |= (1 << 16);
 80025e6:	4b21      	ldr	r3, [pc, #132]	; (800266c <MCAL_speed_init+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a20      	ldr	r2, [pc, #128]	; (800266c <MCAL_speed_init+0x1c0>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 80025f2:	bf00      	nop
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <MCAL_speed_init+0x1c0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f9      	beq.n	80025f4 <MCAL_speed_init+0x148>
			RCC->RCC_CFGR|=(1<<16);
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <MCAL_speed_init+0x1c0>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a19      	ldr	r2, [pc, #100]	; (800266c <MCAL_speed_init+0x1c0>)
 8002606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260a:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 800260c:	4b17      	ldr	r3, [pc, #92]	; (800266c <MCAL_speed_init+0x1c0>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a16      	ldr	r2, [pc, #88]	; (800266c <MCAL_speed_init+0x1c0>)
 8002612:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002616:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <MCAL_speed_init+0x1c0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a13      	ldr	r2, [pc, #76]	; (800266c <MCAL_speed_init+0x1c0>)
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002622:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 8002624:	bf00      	nop
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <MCAL_speed_init+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f9      	beq.n	8002626 <MCAL_speed_init+0x17a>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <MCAL_speed_init+0x1c4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <MCAL_speed_init+0x1c4>)
 8002638:	f023 0307 	bic.w	r3, r3, #7
 800263c:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <MCAL_speed_init+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <MCAL_speed_init+0x1c4>)
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <MCAL_speed_init+0x1c0>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4a07      	ldr	r2, [pc, #28]	; (800266c <MCAL_speed_init+0x1c0>)
 8002650:	f023 0303 	bic.w	r3, r3, #3
 8002654:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <MCAL_speed_init+0x1c0>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4a04      	ldr	r2, [pc, #16]	; (800266c <MCAL_speed_init+0x1c0>)
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	6053      	str	r3, [r2, #4]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	40021000 	.word	0x40021000
 8002670:	40022000 	.word	0x40022000

08002674 <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	2b0f      	cmp	r3, #15
 8002682:	d854      	bhi.n	800272e <Enable_NVIC+0xba>
 8002684:	a201      	add	r2, pc, #4	; (adr r2, 800268c <Enable_NVIC+0x18>)
 8002686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268a:	bf00      	nop
 800268c:	080026cd 	.word	0x080026cd
 8002690:	080026db 	.word	0x080026db
 8002694:	080026e9 	.word	0x080026e9
 8002698:	080026f7 	.word	0x080026f7
 800269c:	08002705 	.word	0x08002705
 80026a0:	08002713 	.word	0x08002713
 80026a4:	08002713 	.word	0x08002713
 80026a8:	08002713 	.word	0x08002713
 80026ac:	08002713 	.word	0x08002713
 80026b0:	08002713 	.word	0x08002713
 80026b4:	08002721 	.word	0x08002721
 80026b8:	08002721 	.word	0x08002721
 80026bc:	08002721 	.word	0x08002721
 80026c0:	08002721 	.word	0x08002721
 80026c4:	08002721 	.word	0x08002721
 80026c8:	08002721 	.word	0x08002721
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <Enable_NVIC+0xc4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a19      	ldr	r2, [pc, #100]	; (8002738 <Enable_NVIC+0xc4>)
 80026d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d6:	6013      	str	r3, [r2, #0]
		break;
 80026d8:	e029      	b.n	800272e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80026da:	4b17      	ldr	r3, [pc, #92]	; (8002738 <Enable_NVIC+0xc4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a16      	ldr	r2, [pc, #88]	; (8002738 <Enable_NVIC+0xc4>)
 80026e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e4:	6013      	str	r3, [r2, #0]
		break;
 80026e6:	e022      	b.n	800272e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <Enable_NVIC+0xc4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a12      	ldr	r2, [pc, #72]	; (8002738 <Enable_NVIC+0xc4>)
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f2:	6013      	str	r3, [r2, #0]
		break;
 80026f4:	e01b      	b.n	800272e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <Enable_NVIC+0xc4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <Enable_NVIC+0xc4>)
 80026fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002700:	6013      	str	r3, [r2, #0]
		break;
 8002702:	e014      	b.n	800272e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <Enable_NVIC+0xc4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <Enable_NVIC+0xc4>)
 800270a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800270e:	6013      	str	r3, [r2, #0]
		break;
 8002710:	e00d      	b.n	800272e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <Enable_NVIC+0xc4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <Enable_NVIC+0xc4>)
 8002718:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800271c:	6013      	str	r3, [r2, #0]
		break;
 800271e:	e006      	b.n	800272e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <Enable_NVIC+0xc8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a05      	ldr	r2, [pc, #20]	; (800273c <Enable_NVIC+0xc8>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272a:	6013      	str	r3, [r2, #0]
		break;
 800272c:	bf00      	nop
	}


}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000e104 	.word	0xe000e104

08002740 <EXTI>:
 * @param [in]      -function_addres : app ISR function
 * @retval          - none
 * Note             -
 *================================================================ */

void EXTI(GPIO_typeDef* PORTx ,uint16_t pin,uint16_t triggercase,void (*function_addres)(interrupt_data* isr_data,uint8_t interupt_num)){
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	817b      	strh	r3, [r7, #10]
 800274e:	4613      	mov	r3, r2
 8002750:	813b      	strh	r3, [r7, #8]

	pinmode(PORTx,pin,GPIO_MODE_INTPUT_AF);//set pin to _INTPUT_AF
 8002752:	897b      	ldrh	r3, [r7, #10]
 8002754:	2204      	movs	r2, #4
 8002756:	4619      	mov	r1, r3
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f7ff f9e3 	bl	8001b24 <pinmode>
	AFIO_Clock_Enable();
 800275e:	4b96      	ldr	r3, [pc, #600]	; (80029b8 <EXTI+0x278>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	4a95      	ldr	r2, [pc, #596]	; (80029b8 <EXTI+0x278>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6193      	str	r3, [r2, #24]
	//	0000: PA[x] pin
	//	0001: PB[x] pin
	//	0010: PC[x] pin
	//	0011: PD[x] pin

	switch(pin){
 800276a:	897b      	ldrh	r3, [r7, #10]
 800276c:	2b0f      	cmp	r3, #15
 800276e:	f200 8392 	bhi.w	8002e96 <EXTI+0x756>
 8002772:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <EXTI+0x38>)
 8002774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002778:	080027b9 	.word	0x080027b9
 800277c:	0800281f 	.word	0x0800281f
 8002780:	08002885 	.word	0x08002885
 8002784:	080028eb 	.word	0x080028eb
 8002788:	08002951 	.word	0x08002951
 800278c:	080029d1 	.word	0x080029d1
 8002790:	08002a37 	.word	0x08002a37
 8002794:	08002a9d 	.word	0x08002a9d
 8002798:	08002b03 	.word	0x08002b03
 800279c:	08002b69 	.word	0x08002b69
 80027a0:	08002bcf 	.word	0x08002bcf
 80027a4:	08002c49 	.word	0x08002c49
 80027a8:	08002caf 	.word	0x08002caf
 80027ac:	08002d15 	.word	0x08002d15
 80027b0:	08002d7b 	.word	0x08002d7b
 80027b4:	08002ddf 	.word	0x08002ddf
	case pin0:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<0);
 80027b8:	4b80      	ldr	r3, [pc, #512]	; (80029bc <EXTI+0x27c>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a7f      	ldr	r2, [pc, #508]	; (80029bc <EXTI+0x27c>)
 80027be:	f023 030f 	bic.w	r3, r3, #15
 80027c2:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<0);}
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a7e      	ldr	r2, [pc, #504]	; (80029c0 <EXTI+0x280>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d106      	bne.n	80027da <EXTI+0x9a>
 80027cc:	4b7b      	ldr	r3, [pc, #492]	; (80029bc <EXTI+0x27c>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a7a      	ldr	r2, [pc, #488]	; (80029bc <EXTI+0x27c>)
 80027d2:	f023 030f 	bic.w	r3, r3, #15
 80027d6:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}

		break;
 80027d8:	e333      	b.n	8002e42 <EXTI+0x702>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a79      	ldr	r2, [pc, #484]	; (80029c4 <EXTI+0x284>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d106      	bne.n	80027f0 <EXTI+0xb0>
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <EXTI+0x27c>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	4a75      	ldr	r2, [pc, #468]	; (80029bc <EXTI+0x27c>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6093      	str	r3, [r2, #8]
		break;
 80027ee:	e328      	b.n	8002e42 <EXTI+0x702>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4a75      	ldr	r2, [pc, #468]	; (80029c8 <EXTI+0x288>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d106      	bne.n	8002806 <EXTI+0xc6>
 80027f8:	4b70      	ldr	r3, [pc, #448]	; (80029bc <EXTI+0x27c>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a6f      	ldr	r2, [pc, #444]	; (80029bc <EXTI+0x27c>)
 80027fe:	f043 0302 	orr.w	r3, r3, #2
 8002802:	6093      	str	r3, [r2, #8]
		break;
 8002804:	e31d      	b.n	8002e42 <EXTI+0x702>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4a70      	ldr	r2, [pc, #448]	; (80029cc <EXTI+0x28c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	f040 8319 	bne.w	8002e42 <EXTI+0x702>
 8002810:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <EXTI+0x27c>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a69      	ldr	r2, [pc, #420]	; (80029bc <EXTI+0x27c>)
 8002816:	f043 0303 	orr.w	r3, r3, #3
 800281a:	6093      	str	r3, [r2, #8]
		break;
 800281c:	e311      	b.n	8002e42 <EXTI+0x702>
	case pin1:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<4);
 800281e:	4b67      	ldr	r3, [pc, #412]	; (80029bc <EXTI+0x27c>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	4a66      	ldr	r2, [pc, #408]	; (80029bc <EXTI+0x27c>)
 8002824:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002828:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<4);}
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4a64      	ldr	r2, [pc, #400]	; (80029c0 <EXTI+0x280>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d106      	bne.n	8002840 <EXTI+0x100>
 8002832:	4b62      	ldr	r3, [pc, #392]	; (80029bc <EXTI+0x27c>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	4a61      	ldr	r2, [pc, #388]	; (80029bc <EXTI+0x27c>)
 8002838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800283c:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}

		break;
 800283e:	e302      	b.n	8002e46 <EXTI+0x706>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a60      	ldr	r2, [pc, #384]	; (80029c4 <EXTI+0x284>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d106      	bne.n	8002856 <EXTI+0x116>
 8002848:	4b5c      	ldr	r3, [pc, #368]	; (80029bc <EXTI+0x27c>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a5b      	ldr	r2, [pc, #364]	; (80029bc <EXTI+0x27c>)
 800284e:	f043 0310 	orr.w	r3, r3, #16
 8002852:	6093      	str	r3, [r2, #8]
		break;
 8002854:	e2f7      	b.n	8002e46 <EXTI+0x706>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4a5b      	ldr	r2, [pc, #364]	; (80029c8 <EXTI+0x288>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d106      	bne.n	800286c <EXTI+0x12c>
 800285e:	4b57      	ldr	r3, [pc, #348]	; (80029bc <EXTI+0x27c>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	4a56      	ldr	r2, [pc, #344]	; (80029bc <EXTI+0x27c>)
 8002864:	f043 0320 	orr.w	r3, r3, #32
 8002868:	6093      	str	r3, [r2, #8]
		break;
 800286a:	e2ec      	b.n	8002e46 <EXTI+0x706>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a57      	ldr	r2, [pc, #348]	; (80029cc <EXTI+0x28c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	f040 82e8 	bne.w	8002e46 <EXTI+0x706>
 8002876:	4b51      	ldr	r3, [pc, #324]	; (80029bc <EXTI+0x27c>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	4a50      	ldr	r2, [pc, #320]	; (80029bc <EXTI+0x27c>)
 800287c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002880:	6093      	str	r3, [r2, #8]
		break;
 8002882:	e2e0      	b.n	8002e46 <EXTI+0x706>
	case pin2:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<8);
 8002884:	4b4d      	ldr	r3, [pc, #308]	; (80029bc <EXTI+0x27c>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a4c      	ldr	r2, [pc, #304]	; (80029bc <EXTI+0x27c>)
 800288a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800288e:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<8);}
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a4b      	ldr	r2, [pc, #300]	; (80029c0 <EXTI+0x280>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d106      	bne.n	80028a6 <EXTI+0x166>
 8002898:	4b48      	ldr	r3, [pc, #288]	; (80029bc <EXTI+0x27c>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a47      	ldr	r2, [pc, #284]	; (80029bc <EXTI+0x27c>)
 800289e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028a2:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}

		break;
 80028a4:	e2d1      	b.n	8002e4a <EXTI+0x70a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a46      	ldr	r2, [pc, #280]	; (80029c4 <EXTI+0x284>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d106      	bne.n	80028bc <EXTI+0x17c>
 80028ae:	4b43      	ldr	r3, [pc, #268]	; (80029bc <EXTI+0x27c>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4a42      	ldr	r2, [pc, #264]	; (80029bc <EXTI+0x27c>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	6093      	str	r3, [r2, #8]
		break;
 80028ba:	e2c6      	b.n	8002e4a <EXTI+0x70a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a42      	ldr	r2, [pc, #264]	; (80029c8 <EXTI+0x288>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d106      	bne.n	80028d2 <EXTI+0x192>
 80028c4:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <EXTI+0x27c>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a3c      	ldr	r2, [pc, #240]	; (80029bc <EXTI+0x27c>)
 80028ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ce:	6093      	str	r3, [r2, #8]
		break;
 80028d0:	e2bb      	b.n	8002e4a <EXTI+0x70a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4a3d      	ldr	r2, [pc, #244]	; (80029cc <EXTI+0x28c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f040 82b7 	bne.w	8002e4a <EXTI+0x70a>
 80028dc:	4b37      	ldr	r3, [pc, #220]	; (80029bc <EXTI+0x27c>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a36      	ldr	r2, [pc, #216]	; (80029bc <EXTI+0x27c>)
 80028e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80028e6:	6093      	str	r3, [r2, #8]
		break;
 80028e8:	e2af      	b.n	8002e4a <EXTI+0x70a>
	case pin3:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<12);
 80028ea:	4b34      	ldr	r3, [pc, #208]	; (80029bc <EXTI+0x27c>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	4a33      	ldr	r2, [pc, #204]	; (80029bc <EXTI+0x27c>)
 80028f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028f4:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<12);}
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <EXTI+0x280>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d106      	bne.n	800290c <EXTI+0x1cc>
 80028fe:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <EXTI+0x27c>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	4a2e      	ldr	r2, [pc, #184]	; (80029bc <EXTI+0x27c>)
 8002904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002908:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}

		break;
 800290a:	e2a0      	b.n	8002e4e <EXTI+0x70e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a2d      	ldr	r2, [pc, #180]	; (80029c4 <EXTI+0x284>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d106      	bne.n	8002922 <EXTI+0x1e2>
 8002914:	4b29      	ldr	r3, [pc, #164]	; (80029bc <EXTI+0x27c>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a28      	ldr	r2, [pc, #160]	; (80029bc <EXTI+0x27c>)
 800291a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800291e:	6093      	str	r3, [r2, #8]
		break;
 8002920:	e295      	b.n	8002e4e <EXTI+0x70e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <EXTI+0x288>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d106      	bne.n	8002938 <EXTI+0x1f8>
 800292a:	4b24      	ldr	r3, [pc, #144]	; (80029bc <EXTI+0x27c>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4a23      	ldr	r2, [pc, #140]	; (80029bc <EXTI+0x27c>)
 8002930:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002934:	6093      	str	r3, [r2, #8]
		break;
 8002936:	e28a      	b.n	8002e4e <EXTI+0x70e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a24      	ldr	r2, [pc, #144]	; (80029cc <EXTI+0x28c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	f040 8286 	bne.w	8002e4e <EXTI+0x70e>
 8002942:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <EXTI+0x27c>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <EXTI+0x27c>)
 8002948:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800294c:	6093      	str	r3, [r2, #8]
		break;
 800294e:	e27e      	b.n	8002e4e <EXTI+0x70e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin4:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<0);
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <EXTI+0x27c>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <EXTI+0x27c>)
 8002956:	f023 030f 	bic.w	r3, r3, #15
 800295a:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<0);}
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <EXTI+0x280>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d106      	bne.n	8002972 <EXTI+0x232>
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <EXTI+0x27c>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <EXTI+0x27c>)
 800296a:	f023 030f 	bic.w	r3, r3, #15
 800296e:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}

		break;
 8002970:	e26f      	b.n	8002e52 <EXTI+0x712>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <EXTI+0x284>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d106      	bne.n	8002988 <EXTI+0x248>
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <EXTI+0x27c>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <EXTI+0x27c>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	60d3      	str	r3, [r2, #12]
		break;
 8002986:	e264      	b.n	8002e52 <EXTI+0x712>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a0f      	ldr	r2, [pc, #60]	; (80029c8 <EXTI+0x288>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d106      	bne.n	800299e <EXTI+0x25e>
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <EXTI+0x27c>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a09      	ldr	r2, [pc, #36]	; (80029bc <EXTI+0x27c>)
 8002996:	f043 0302 	orr.w	r3, r3, #2
 800299a:	60d3      	str	r3, [r2, #12]
		break;
 800299c:	e259      	b.n	8002e52 <EXTI+0x712>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <EXTI+0x28c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	f040 8255 	bne.w	8002e52 <EXTI+0x712>
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <EXTI+0x27c>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a03      	ldr	r2, [pc, #12]	; (80029bc <EXTI+0x27c>)
 80029ae:	f043 0303 	orr.w	r3, r3, #3
 80029b2:	60d3      	str	r3, [r2, #12]
		break;
 80029b4:	e24d      	b.n	8002e52 <EXTI+0x712>
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40010000 	.word	0x40010000
 80029c0:	40010800 	.word	0x40010800
 80029c4:	40010c00 	.word	0x40010c00
 80029c8:	40011000 	.word	0x40011000
 80029cc:	40011400 	.word	0x40011400
	case pin5:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<4);
 80029d0:	4b92      	ldr	r3, [pc, #584]	; (8002c1c <EXTI+0x4dc>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a91      	ldr	r2, [pc, #580]	; (8002c1c <EXTI+0x4dc>)
 80029d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029da:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<4);}
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a90      	ldr	r2, [pc, #576]	; (8002c20 <EXTI+0x4e0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d106      	bne.n	80029f2 <EXTI+0x2b2>
 80029e4:	4b8d      	ldr	r3, [pc, #564]	; (8002c1c <EXTI+0x4dc>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a8c      	ldr	r2, [pc, #560]	; (8002c1c <EXTI+0x4dc>)
 80029ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ee:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}

		break;
 80029f0:	e231      	b.n	8002e56 <EXTI+0x716>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4a8b      	ldr	r2, [pc, #556]	; (8002c24 <EXTI+0x4e4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d106      	bne.n	8002a08 <EXTI+0x2c8>
 80029fa:	4b88      	ldr	r3, [pc, #544]	; (8002c1c <EXTI+0x4dc>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4a87      	ldr	r2, [pc, #540]	; (8002c1c <EXTI+0x4dc>)
 8002a00:	f043 0310 	orr.w	r3, r3, #16
 8002a04:	60d3      	str	r3, [r2, #12]
		break;
 8002a06:	e226      	b.n	8002e56 <EXTI+0x716>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a87      	ldr	r2, [pc, #540]	; (8002c28 <EXTI+0x4e8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d106      	bne.n	8002a1e <EXTI+0x2de>
 8002a10:	4b82      	ldr	r3, [pc, #520]	; (8002c1c <EXTI+0x4dc>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a81      	ldr	r2, [pc, #516]	; (8002c1c <EXTI+0x4dc>)
 8002a16:	f043 0320 	orr.w	r3, r3, #32
 8002a1a:	60d3      	str	r3, [r2, #12]
		break;
 8002a1c:	e21b      	b.n	8002e56 <EXTI+0x716>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a82      	ldr	r2, [pc, #520]	; (8002c2c <EXTI+0x4ec>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	f040 8217 	bne.w	8002e56 <EXTI+0x716>
 8002a28:	4b7c      	ldr	r3, [pc, #496]	; (8002c1c <EXTI+0x4dc>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a7b      	ldr	r2, [pc, #492]	; (8002c1c <EXTI+0x4dc>)
 8002a2e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002a32:	60d3      	str	r3, [r2, #12]
		break;
 8002a34:	e20f      	b.n	8002e56 <EXTI+0x716>
	case pin6:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<8);
 8002a36:	4b79      	ldr	r3, [pc, #484]	; (8002c1c <EXTI+0x4dc>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4a78      	ldr	r2, [pc, #480]	; (8002c1c <EXTI+0x4dc>)
 8002a3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a40:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<8);}
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a76      	ldr	r2, [pc, #472]	; (8002c20 <EXTI+0x4e0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d106      	bne.n	8002a58 <EXTI+0x318>
 8002a4a:	4b74      	ldr	r3, [pc, #464]	; (8002c1c <EXTI+0x4dc>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	4a73      	ldr	r2, [pc, #460]	; (8002c1c <EXTI+0x4dc>)
 8002a50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a54:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}

		break;
 8002a56:	e200      	b.n	8002e5a <EXTI+0x71a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a72      	ldr	r2, [pc, #456]	; (8002c24 <EXTI+0x4e4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d106      	bne.n	8002a6e <EXTI+0x32e>
 8002a60:	4b6e      	ldr	r3, [pc, #440]	; (8002c1c <EXTI+0x4dc>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a6d      	ldr	r2, [pc, #436]	; (8002c1c <EXTI+0x4dc>)
 8002a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6a:	60d3      	str	r3, [r2, #12]
		break;
 8002a6c:	e1f5      	b.n	8002e5a <EXTI+0x71a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a6d      	ldr	r2, [pc, #436]	; (8002c28 <EXTI+0x4e8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d106      	bne.n	8002a84 <EXTI+0x344>
 8002a76:	4b69      	ldr	r3, [pc, #420]	; (8002c1c <EXTI+0x4dc>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4a68      	ldr	r2, [pc, #416]	; (8002c1c <EXTI+0x4dc>)
 8002a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a80:	60d3      	str	r3, [r2, #12]
		break;
 8002a82:	e1ea      	b.n	8002e5a <EXTI+0x71a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a69      	ldr	r2, [pc, #420]	; (8002c2c <EXTI+0x4ec>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	f040 81e6 	bne.w	8002e5a <EXTI+0x71a>
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <EXTI+0x4dc>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4a62      	ldr	r2, [pc, #392]	; (8002c1c <EXTI+0x4dc>)
 8002a94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a98:	60d3      	str	r3, [r2, #12]
		break;
 8002a9a:	e1de      	b.n	8002e5a <EXTI+0x71a>
	case pin7:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<12);
 8002a9c:	4b5f      	ldr	r3, [pc, #380]	; (8002c1c <EXTI+0x4dc>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a5e      	ldr	r2, [pc, #376]	; (8002c1c <EXTI+0x4dc>)
 8002aa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aa6:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<12);}
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a5d      	ldr	r2, [pc, #372]	; (8002c20 <EXTI+0x4e0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d106      	bne.n	8002abe <EXTI+0x37e>
 8002ab0:	4b5a      	ldr	r3, [pc, #360]	; (8002c1c <EXTI+0x4dc>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a59      	ldr	r2, [pc, #356]	; (8002c1c <EXTI+0x4dc>)
 8002ab6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aba:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}

		break;
 8002abc:	e1cf      	b.n	8002e5e <EXTI+0x71e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <EXTI+0x4e4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d106      	bne.n	8002ad4 <EXTI+0x394>
 8002ac6:	4b55      	ldr	r3, [pc, #340]	; (8002c1c <EXTI+0x4dc>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4a54      	ldr	r2, [pc, #336]	; (8002c1c <EXTI+0x4dc>)
 8002acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ad0:	60d3      	str	r3, [r2, #12]
		break;
 8002ad2:	e1c4      	b.n	8002e5e <EXTI+0x71e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a54      	ldr	r2, [pc, #336]	; (8002c28 <EXTI+0x4e8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d106      	bne.n	8002aea <EXTI+0x3aa>
 8002adc:	4b4f      	ldr	r3, [pc, #316]	; (8002c1c <EXTI+0x4dc>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a4e      	ldr	r2, [pc, #312]	; (8002c1c <EXTI+0x4dc>)
 8002ae2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ae6:	60d3      	str	r3, [r2, #12]
		break;
 8002ae8:	e1b9      	b.n	8002e5e <EXTI+0x71e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a4f      	ldr	r2, [pc, #316]	; (8002c2c <EXTI+0x4ec>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	f040 81b5 	bne.w	8002e5e <EXTI+0x71e>
 8002af4:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <EXTI+0x4dc>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4a48      	ldr	r2, [pc, #288]	; (8002c1c <EXTI+0x4dc>)
 8002afa:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002afe:	60d3      	str	r3, [r2, #12]
		break;
 8002b00:	e1ad      	b.n	8002e5e <EXTI+0x71e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin8:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<0);
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <EXTI+0x4dc>)
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	4a45      	ldr	r2, [pc, #276]	; (8002c1c <EXTI+0x4dc>)
 8002b08:	f023 030f 	bic.w	r3, r3, #15
 8002b0c:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<0);}
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a43      	ldr	r2, [pc, #268]	; (8002c20 <EXTI+0x4e0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d106      	bne.n	8002b24 <EXTI+0x3e4>
 8002b16:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <EXTI+0x4dc>)
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	4a40      	ldr	r2, [pc, #256]	; (8002c1c <EXTI+0x4dc>)
 8002b1c:	f023 030f 	bic.w	r3, r3, #15
 8002b20:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}

		break;
 8002b22:	e19e      	b.n	8002e62 <EXTI+0x722>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <EXTI+0x4e4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d106      	bne.n	8002b3a <EXTI+0x3fa>
 8002b2c:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <EXTI+0x4dc>)
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	4a3a      	ldr	r2, [pc, #232]	; (8002c1c <EXTI+0x4dc>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6113      	str	r3, [r2, #16]
		break;
 8002b38:	e193      	b.n	8002e62 <EXTI+0x722>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a3a      	ldr	r2, [pc, #232]	; (8002c28 <EXTI+0x4e8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d106      	bne.n	8002b50 <EXTI+0x410>
 8002b42:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <EXTI+0x4dc>)
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	4a35      	ldr	r2, [pc, #212]	; (8002c1c <EXTI+0x4dc>)
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	6113      	str	r3, [r2, #16]
		break;
 8002b4e:	e188      	b.n	8002e62 <EXTI+0x722>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a36      	ldr	r2, [pc, #216]	; (8002c2c <EXTI+0x4ec>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	f040 8184 	bne.w	8002e62 <EXTI+0x722>
 8002b5a:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <EXTI+0x4dc>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	4a2f      	ldr	r2, [pc, #188]	; (8002c1c <EXTI+0x4dc>)
 8002b60:	f043 0303 	orr.w	r3, r3, #3
 8002b64:	6113      	str	r3, [r2, #16]
		break;
 8002b66:	e17c      	b.n	8002e62 <EXTI+0x722>
	case pin9:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<4);
 8002b68:	4b2c      	ldr	r3, [pc, #176]	; (8002c1c <EXTI+0x4dc>)
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	4a2b      	ldr	r2, [pc, #172]	; (8002c1c <EXTI+0x4dc>)
 8002b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b72:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<4);}
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a2a      	ldr	r2, [pc, #168]	; (8002c20 <EXTI+0x4e0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d106      	bne.n	8002b8a <EXTI+0x44a>
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <EXTI+0x4dc>)
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <EXTI+0x4dc>)
 8002b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b86:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}

		break;
 8002b88:	e16d      	b.n	8002e66 <EXTI+0x726>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4a25      	ldr	r2, [pc, #148]	; (8002c24 <EXTI+0x4e4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d106      	bne.n	8002ba0 <EXTI+0x460>
 8002b92:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <EXTI+0x4dc>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	4a21      	ldr	r2, [pc, #132]	; (8002c1c <EXTI+0x4dc>)
 8002b98:	f043 0310 	orr.w	r3, r3, #16
 8002b9c:	6113      	str	r3, [r2, #16]
		break;
 8002b9e:	e162      	b.n	8002e66 <EXTI+0x726>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4a21      	ldr	r2, [pc, #132]	; (8002c28 <EXTI+0x4e8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d106      	bne.n	8002bb6 <EXTI+0x476>
 8002ba8:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <EXTI+0x4dc>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <EXTI+0x4dc>)
 8002bae:	f043 0320 	orr.w	r3, r3, #32
 8002bb2:	6113      	str	r3, [r2, #16]
		break;
 8002bb4:	e157      	b.n	8002e66 <EXTI+0x726>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <EXTI+0x4ec>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	f040 8153 	bne.w	8002e66 <EXTI+0x726>
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <EXTI+0x4dc>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <EXTI+0x4dc>)
 8002bc6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002bca:	6113      	str	r3, [r2, #16]
		break;
 8002bcc:	e14b      	b.n	8002e66 <EXTI+0x726>
	case pin10:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<8);
 8002bce:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <EXTI+0x4dc>)
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <EXTI+0x4dc>)
 8002bd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bd8:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<8);}
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a10      	ldr	r2, [pc, #64]	; (8002c20 <EXTI+0x4e0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d106      	bne.n	8002bf0 <EXTI+0x4b0>
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <EXTI+0x4dc>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	4a0d      	ldr	r2, [pc, #52]	; (8002c1c <EXTI+0x4dc>)
 8002be8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bec:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}

		break;
 8002bee:	e13c      	b.n	8002e6a <EXTI+0x72a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <EXTI+0x4e4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d106      	bne.n	8002c06 <EXTI+0x4c6>
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <EXTI+0x4dc>)
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <EXTI+0x4dc>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6113      	str	r3, [r2, #16]
		break;
 8002c04:	e131      	b.n	8002e6a <EXTI+0x72a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <EXTI+0x4e8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d110      	bne.n	8002c30 <EXTI+0x4f0>
 8002c0e:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <EXTI+0x4dc>)
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	4a02      	ldr	r2, [pc, #8]	; (8002c1c <EXTI+0x4dc>)
 8002c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c18:	6113      	str	r3, [r2, #16]
		break;
 8002c1a:	e126      	b.n	8002e6a <EXTI+0x72a>
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	40010800 	.word	0x40010800
 8002c24:	40010c00 	.word	0x40010c00
 8002c28:	40011000 	.word	0x40011000
 8002c2c:	40011400 	.word	0x40011400
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a93      	ldr	r2, [pc, #588]	; (8002e80 <EXTI+0x740>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	f040 8118 	bne.w	8002e6a <EXTI+0x72a>
 8002c3a:	4b92      	ldr	r3, [pc, #584]	; (8002e84 <EXTI+0x744>)
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	4a91      	ldr	r2, [pc, #580]	; (8002e84 <EXTI+0x744>)
 8002c40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c44:	6113      	str	r3, [r2, #16]
		break;
 8002c46:	e110      	b.n	8002e6a <EXTI+0x72a>
	case pin11:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<12);
 8002c48:	4b8e      	ldr	r3, [pc, #568]	; (8002e84 <EXTI+0x744>)
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	4a8d      	ldr	r2, [pc, #564]	; (8002e84 <EXTI+0x744>)
 8002c4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c52:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<12);}
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a8c      	ldr	r2, [pc, #560]	; (8002e88 <EXTI+0x748>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d106      	bne.n	8002c6a <EXTI+0x52a>
 8002c5c:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <EXTI+0x744>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	4a88      	ldr	r2, [pc, #544]	; (8002e84 <EXTI+0x744>)
 8002c62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c66:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}

		break;
 8002c68:	e101      	b.n	8002e6e <EXTI+0x72e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4a87      	ldr	r2, [pc, #540]	; (8002e8c <EXTI+0x74c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d106      	bne.n	8002c80 <EXTI+0x540>
 8002c72:	4b84      	ldr	r3, [pc, #528]	; (8002e84 <EXTI+0x744>)
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	4a83      	ldr	r2, [pc, #524]	; (8002e84 <EXTI+0x744>)
 8002c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c7c:	6113      	str	r3, [r2, #16]
		break;
 8002c7e:	e0f6      	b.n	8002e6e <EXTI+0x72e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a83      	ldr	r2, [pc, #524]	; (8002e90 <EXTI+0x750>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d106      	bne.n	8002c96 <EXTI+0x556>
 8002c88:	4b7e      	ldr	r3, [pc, #504]	; (8002e84 <EXTI+0x744>)
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	4a7d      	ldr	r2, [pc, #500]	; (8002e84 <EXTI+0x744>)
 8002c8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c92:	6113      	str	r3, [r2, #16]
		break;
 8002c94:	e0eb      	b.n	8002e6e <EXTI+0x72e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a79      	ldr	r2, [pc, #484]	; (8002e80 <EXTI+0x740>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	f040 80e7 	bne.w	8002e6e <EXTI+0x72e>
 8002ca0:	4b78      	ldr	r3, [pc, #480]	; (8002e84 <EXTI+0x744>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	4a77      	ldr	r2, [pc, #476]	; (8002e84 <EXTI+0x744>)
 8002ca6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002caa:	6113      	str	r3, [r2, #16]
		break;
 8002cac:	e0df      	b.n	8002e6e <EXTI+0x72e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin12:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<0);
 8002cae:	4b75      	ldr	r3, [pc, #468]	; (8002e84 <EXTI+0x744>)
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	4a74      	ldr	r2, [pc, #464]	; (8002e84 <EXTI+0x744>)
 8002cb4:	f023 030f 	bic.w	r3, r3, #15
 8002cb8:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<0);}
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4a72      	ldr	r2, [pc, #456]	; (8002e88 <EXTI+0x748>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d106      	bne.n	8002cd0 <EXTI+0x590>
 8002cc2:	4b70      	ldr	r3, [pc, #448]	; (8002e84 <EXTI+0x744>)
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	4a6f      	ldr	r2, [pc, #444]	; (8002e84 <EXTI+0x744>)
 8002cc8:	f023 030f 	bic.w	r3, r3, #15
 8002ccc:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}

		break;
 8002cce:	e0d0      	b.n	8002e72 <EXTI+0x732>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a6e      	ldr	r2, [pc, #440]	; (8002e8c <EXTI+0x74c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d106      	bne.n	8002ce6 <EXTI+0x5a6>
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <EXTI+0x744>)
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	4a69      	ldr	r2, [pc, #420]	; (8002e84 <EXTI+0x744>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6153      	str	r3, [r2, #20]
		break;
 8002ce4:	e0c5      	b.n	8002e72 <EXTI+0x732>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a69      	ldr	r2, [pc, #420]	; (8002e90 <EXTI+0x750>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d106      	bne.n	8002cfc <EXTI+0x5bc>
 8002cee:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <EXTI+0x744>)
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4a64      	ldr	r2, [pc, #400]	; (8002e84 <EXTI+0x744>)
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	6153      	str	r3, [r2, #20]
		break;
 8002cfa:	e0ba      	b.n	8002e72 <EXTI+0x732>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a60      	ldr	r2, [pc, #384]	; (8002e80 <EXTI+0x740>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	f040 80b6 	bne.w	8002e72 <EXTI+0x732>
 8002d06:	4b5f      	ldr	r3, [pc, #380]	; (8002e84 <EXTI+0x744>)
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	4a5e      	ldr	r2, [pc, #376]	; (8002e84 <EXTI+0x744>)
 8002d0c:	f043 0303 	orr.w	r3, r3, #3
 8002d10:	6153      	str	r3, [r2, #20]
		break;
 8002d12:	e0ae      	b.n	8002e72 <EXTI+0x732>
	case pin13:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<4);
 8002d14:	4b5b      	ldr	r3, [pc, #364]	; (8002e84 <EXTI+0x744>)
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	4a5a      	ldr	r2, [pc, #360]	; (8002e84 <EXTI+0x744>)
 8002d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d1e:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<4);}
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4a59      	ldr	r2, [pc, #356]	; (8002e88 <EXTI+0x748>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d106      	bne.n	8002d36 <EXTI+0x5f6>
 8002d28:	4b56      	ldr	r3, [pc, #344]	; (8002e84 <EXTI+0x744>)
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	4a55      	ldr	r2, [pc, #340]	; (8002e84 <EXTI+0x744>)
 8002d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d32:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}

		break;
 8002d34:	e09f      	b.n	8002e76 <EXTI+0x736>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a54      	ldr	r2, [pc, #336]	; (8002e8c <EXTI+0x74c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d106      	bne.n	8002d4c <EXTI+0x60c>
 8002d3e:	4b51      	ldr	r3, [pc, #324]	; (8002e84 <EXTI+0x744>)
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4a50      	ldr	r2, [pc, #320]	; (8002e84 <EXTI+0x744>)
 8002d44:	f043 0310 	orr.w	r3, r3, #16
 8002d48:	6153      	str	r3, [r2, #20]
		break;
 8002d4a:	e094      	b.n	8002e76 <EXTI+0x736>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a50      	ldr	r2, [pc, #320]	; (8002e90 <EXTI+0x750>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d106      	bne.n	8002d62 <EXTI+0x622>
 8002d54:	4b4b      	ldr	r3, [pc, #300]	; (8002e84 <EXTI+0x744>)
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	4a4a      	ldr	r2, [pc, #296]	; (8002e84 <EXTI+0x744>)
 8002d5a:	f043 0320 	orr.w	r3, r3, #32
 8002d5e:	6153      	str	r3, [r2, #20]
		break;
 8002d60:	e089      	b.n	8002e76 <EXTI+0x736>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a46      	ldr	r2, [pc, #280]	; (8002e80 <EXTI+0x740>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	f040 8085 	bne.w	8002e76 <EXTI+0x736>
 8002d6c:	4b45      	ldr	r3, [pc, #276]	; (8002e84 <EXTI+0x744>)
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	4a44      	ldr	r2, [pc, #272]	; (8002e84 <EXTI+0x744>)
 8002d72:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002d76:	6153      	str	r3, [r2, #20]
		break;
 8002d78:	e07d      	b.n	8002e76 <EXTI+0x736>
	case pin14:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<8);
 8002d7a:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <EXTI+0x744>)
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	4a41      	ldr	r2, [pc, #260]	; (8002e84 <EXTI+0x744>)
 8002d80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d84:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<8);}
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a3f      	ldr	r2, [pc, #252]	; (8002e88 <EXTI+0x748>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d106      	bne.n	8002d9c <EXTI+0x65c>
 8002d8e:	4b3d      	ldr	r3, [pc, #244]	; (8002e84 <EXTI+0x744>)
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4a3c      	ldr	r2, [pc, #240]	; (8002e84 <EXTI+0x744>)
 8002d94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d98:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}

		break;
 8002d9a:	e06e      	b.n	8002e7a <EXTI+0x73a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4a3b      	ldr	r2, [pc, #236]	; (8002e8c <EXTI+0x74c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d106      	bne.n	8002db2 <EXTI+0x672>
 8002da4:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <EXTI+0x744>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	4a36      	ldr	r2, [pc, #216]	; (8002e84 <EXTI+0x744>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	6153      	str	r3, [r2, #20]
		break;
 8002db0:	e063      	b.n	8002e7a <EXTI+0x73a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4a36      	ldr	r2, [pc, #216]	; (8002e90 <EXTI+0x750>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d106      	bne.n	8002dc8 <EXTI+0x688>
 8002dba:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <EXTI+0x744>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4a31      	ldr	r2, [pc, #196]	; (8002e84 <EXTI+0x744>)
 8002dc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dc4:	6153      	str	r3, [r2, #20]
		break;
 8002dc6:	e058      	b.n	8002e7a <EXTI+0x73a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a2d      	ldr	r2, [pc, #180]	; (8002e80 <EXTI+0x740>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d154      	bne.n	8002e7a <EXTI+0x73a>
 8002dd0:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <EXTI+0x744>)
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	4a2b      	ldr	r2, [pc, #172]	; (8002e84 <EXTI+0x744>)
 8002dd6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002dda:	6153      	str	r3, [r2, #20]
		break;
 8002ddc:	e04d      	b.n	8002e7a <EXTI+0x73a>
	case pin15:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<12);
 8002dde:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <EXTI+0x744>)
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <EXTI+0x744>)
 8002de4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002de8:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<12);}
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4a26      	ldr	r2, [pc, #152]	; (8002e88 <EXTI+0x748>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d106      	bne.n	8002e00 <EXTI+0x6c0>
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <EXTI+0x744>)
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4a23      	ldr	r2, [pc, #140]	; (8002e84 <EXTI+0x744>)
 8002df8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dfc:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}

		break;
 8002dfe:	e049      	b.n	8002e94 <EXTI+0x754>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <EXTI+0x74c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d106      	bne.n	8002e16 <EXTI+0x6d6>
 8002e08:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <EXTI+0x744>)
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <EXTI+0x744>)
 8002e0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e12:	6153      	str	r3, [r2, #20]
		break;
 8002e14:	e03e      	b.n	8002e94 <EXTI+0x754>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <EXTI+0x750>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d106      	bne.n	8002e2c <EXTI+0x6ec>
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <EXTI+0x744>)
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <EXTI+0x744>)
 8002e24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e28:	6153      	str	r3, [r2, #20]
		break;
 8002e2a:	e033      	b.n	8002e94 <EXTI+0x754>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <EXTI+0x740>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d12f      	bne.n	8002e94 <EXTI+0x754>
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <EXTI+0x744>)
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <EXTI+0x744>)
 8002e3a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002e3e:	6153      	str	r3, [r2, #20]
		break;
 8002e40:	e028      	b.n	8002e94 <EXTI+0x754>
		break;
 8002e42:	bf00      	nop
 8002e44:	e027      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e46:	bf00      	nop
 8002e48:	e025      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e4a:	bf00      	nop
 8002e4c:	e023      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e4e:	bf00      	nop
 8002e50:	e021      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e52:	bf00      	nop
 8002e54:	e01f      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e56:	bf00      	nop
 8002e58:	e01d      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e5a:	bf00      	nop
 8002e5c:	e01b      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e5e:	bf00      	nop
 8002e60:	e019      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e62:	bf00      	nop
 8002e64:	e017      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e66:	bf00      	nop
 8002e68:	e015      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e6a:	bf00      	nop
 8002e6c:	e013      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e6e:	bf00      	nop
 8002e70:	e011      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e72:	bf00      	nop
 8002e74:	e00f      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e76:	bf00      	nop
 8002e78:	e00d      	b.n	8002e96 <EXTI+0x756>
		break;
 8002e7a:	bf00      	nop
 8002e7c:	e00b      	b.n	8002e96 <EXTI+0x756>
 8002e7e:	bf00      	nop
 8002e80:	40011400 	.word	0x40011400
 8002e84:	40010000 	.word	0x40010000
 8002e88:	40010800 	.word	0x40010800
 8002e8c:	40010c00 	.word	0x40010c00
 8002e90:	40011000 	.word	0x40011000
		break;
 8002e94:	bf00      	nop
	}
	//================================================
	//3- Update Rising or Falling Register
	EXIT->EXTI_RTSR &=~(1<<pin);
 8002e96:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <EXTI+0x898>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	897a      	ldrh	r2, [r7, #10]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea2:	43d2      	mvns	r2, r2
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4a4c      	ldr	r2, [pc, #304]	; (8002fd8 <EXTI+0x898>)
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	6093      	str	r3, [r2, #8]
	EXIT->EXTI_FTSR &=~(1<<pin);
 8002eac:	4b4a      	ldr	r3, [pc, #296]	; (8002fd8 <EXTI+0x898>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	897a      	ldrh	r2, [r7, #10]
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb8:	43d2      	mvns	r2, r2
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4a46      	ldr	r2, [pc, #280]	; (8002fd8 <EXTI+0x898>)
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 8002ec2:	893b      	ldrh	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <EXTI+0x79e>
		EXIT->EXTI_RTSR |= (1<<pin);
 8002ec8:	4b43      	ldr	r3, [pc, #268]	; (8002fd8 <EXTI+0x898>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	897a      	ldrh	r2, [r7, #10]
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4a40      	ldr	r2, [pc, #256]	; (8002fd8 <EXTI+0x898>)
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6093      	str	r3, [r2, #8]
 8002edc:	e021      	b.n	8002f22 <EXTI+0x7e2>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 8002ede:	893b      	ldrh	r3, [r7, #8]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10a      	bne.n	8002efa <EXTI+0x7ba>
		EXIT->EXTI_FTSR |= (1<<pin);
 8002ee4:	4b3c      	ldr	r3, [pc, #240]	; (8002fd8 <EXTI+0x898>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	897a      	ldrh	r2, [r7, #10]
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4a39      	ldr	r2, [pc, #228]	; (8002fd8 <EXTI+0x898>)
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	60d3      	str	r3, [r2, #12]
 8002ef8:	e013      	b.n	8002f22 <EXTI+0x7e2>
	}
	else{
		EXIT->EXTI_RTSR |= (1<<pin);
 8002efa:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <EXTI+0x898>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	897a      	ldrh	r2, [r7, #10]
 8002f00:	2101      	movs	r1, #1
 8002f02:	fa01 f202 	lsl.w	r2, r1, r2
 8002f06:	4611      	mov	r1, r2
 8002f08:	4a33      	ldr	r2, [pc, #204]	; (8002fd8 <EXTI+0x898>)
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	6093      	str	r3, [r2, #8]
		EXIT->EXTI_FTSR |= (1<<pin);
 8002f0e:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <EXTI+0x898>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	897a      	ldrh	r2, [r7, #10]
 8002f14:	2101      	movs	r1, #1
 8002f16:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4a2e      	ldr	r2, [pc, #184]	; (8002fd8 <EXTI+0x898>)
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	60d3      	str	r3, [r2, #12]
	}


	//4- Update IRQ Handling callback
	ARR_INTERRUPT_TRACK[interrupt_numpers].pin=pin;
 8002f22:	4b2e      	ldr	r3, [pc, #184]	; (8002fdc <EXTI+0x89c>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	897b      	ldrh	r3, [r7, #10]
 8002f2a:	b2d9      	uxtb	r1, r3
 8002f2c:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <EXTI+0x8a0>)
 8002f2e:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
	if(PORTx==GPIOA)     {ARR_INTERRUPT_TRACK[interrupt_numpers].port=1;}
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a2b      	ldr	r2, [pc, #172]	; (8002fe4 <EXTI+0x8a4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d107      	bne.n	8002f4a <EXTI+0x80a>
 8002f3a:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <EXTI+0x89c>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	4a28      	ldr	r2, [pc, #160]	; (8002fe0 <EXTI+0x8a0>)
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	2201      	movs	r2, #1
 8002f46:	705a      	strb	r2, [r3, #1]
 8002f48:	e022      	b.n	8002f90 <EXTI+0x850>
	else if(PORTx==GPIOB){ARR_INTERRUPT_TRACK[interrupt_numpers].port=2;}
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <EXTI+0x8a8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d107      	bne.n	8002f62 <EXTI+0x822>
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <EXTI+0x89c>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <EXTI+0x8a0>)
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	705a      	strb	r2, [r3, #1]
 8002f60:	e016      	b.n	8002f90 <EXTI+0x850>
	else if(PORTx==GPIOC){ARR_INTERRUPT_TRACK[interrupt_numpers].port=3;}
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a21      	ldr	r2, [pc, #132]	; (8002fec <EXTI+0x8ac>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d107      	bne.n	8002f7a <EXTI+0x83a>
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <EXTI+0x89c>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <EXTI+0x8a0>)
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	2203      	movs	r2, #3
 8002f76:	705a      	strb	r2, [r3, #1]
 8002f78:	e00a      	b.n	8002f90 <EXTI+0x850>
	else if(PORTx==GPIOD){ARR_INTERRUPT_TRACK[interrupt_numpers].port=4;}
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <EXTI+0x8b0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d106      	bne.n	8002f90 <EXTI+0x850>
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <EXTI+0x89c>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <EXTI+0x8a0>)
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	705a      	strb	r2, [r3, #1]


	GP_IRQ_Callback[interrupt_numpers++] =(void(*)(interrupt_data* isr_data,uint8_t interupt_num))function_addres;
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <EXTI+0x89c>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	b2d1      	uxtb	r1, r2
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <EXTI+0x89c>)
 8002f9a:	7011      	strb	r1, [r2, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <EXTI+0x8b4>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(interrupt_numpers>=15){
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <EXTI+0x89c>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b0e      	cmp	r3, #14
 8002fac:	d902      	bls.n	8002fb4 <EXTI+0x874>
		interrupt_numpers=0;
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <EXTI+0x89c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
	}

	EXIT->EXTI_IMR |=(1<<pin);
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <EXTI+0x898>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	897a      	ldrh	r2, [r7, #10]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <EXTI+0x898>)
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 8002fc8:	897b      	ldrh	r3, [r7, #10]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fb52 	bl	8002674 <Enable_NVIC>
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40010400 	.word	0x40010400
 8002fdc:	2000022d 	.word	0x2000022d
 8002fe0:	2000031c 	.word	0x2000031c
 8002fe4:	40010800 	.word	0x40010800
 8002fe8:	40010c00 	.word	0x40010c00
 8002fec:	40011000 	.word	0x40011000
 8002ff0:	40011400 	.word	0x40011400
 8002ff4:	200002e0 	.word	0x200002e0

08002ff8 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <EXTI0_IRQHandler+0x20>)
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	4a05      	ldr	r2, [pc, #20]	; (8003018 <EXTI0_IRQHandler+0x20>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0](ARR_INTERRUPT_TRACK,0);
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <EXTI0_IRQHandler+0x24>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2100      	movs	r1, #0
 800300e:	4804      	ldr	r0, [pc, #16]	; (8003020 <EXTI0_IRQHandler+0x28>)
 8003010:	4798      	blx	r3
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40010400 	.word	0x40010400
 800301c:	200002e0 	.word	0x200002e0
 8003020:	2000031c 	.word	0x2000031c

08003024 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <EXTI1_IRQHandler+0x20>)
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	4a05      	ldr	r2, [pc, #20]	; (8003044 <EXTI1_IRQHandler+0x20>)
 800302e:	f043 0302 	orr.w	r3, r3, #2
 8003032:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1](ARR_INTERRUPT_TRACK,1);
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <EXTI1_IRQHandler+0x24>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2101      	movs	r1, #1
 800303a:	4804      	ldr	r0, [pc, #16]	; (800304c <EXTI1_IRQHandler+0x28>)
 800303c:	4798      	blx	r3

}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40010400 	.word	0x40010400
 8003048:	200002e0 	.word	0x200002e0
 800304c:	2000031c 	.word	0x2000031c

08003050 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <EXTI2_IRQHandler+0x20>)
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	4a05      	ldr	r2, [pc, #20]	; (8003070 <EXTI2_IRQHandler+0x20>)
 800305a:	f043 0304 	orr.w	r3, r3, #4
 800305e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2](ARR_INTERRUPT_TRACK,2);
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <EXTI2_IRQHandler+0x24>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2102      	movs	r1, #2
 8003066:	4804      	ldr	r0, [pc, #16]	; (8003078 <EXTI2_IRQHandler+0x28>)
 8003068:	4798      	blx	r3
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40010400 	.word	0x40010400
 8003074:	200002e0 	.word	0x200002e0
 8003078:	2000031c 	.word	0x2000031c

0800307c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <EXTI3_IRQHandler+0x20>)
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	4a05      	ldr	r2, [pc, #20]	; (800309c <EXTI3_IRQHandler+0x20>)
 8003086:	f043 0308 	orr.w	r3, r3, #8
 800308a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3](ARR_INTERRUPT_TRACK,3);
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <EXTI3_IRQHandler+0x24>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2103      	movs	r1, #3
 8003092:	4804      	ldr	r0, [pc, #16]	; (80030a4 <EXTI3_IRQHandler+0x28>)
 8003094:	4798      	blx	r3
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40010400 	.word	0x40010400
 80030a0:	200002e0 	.word	0x200002e0
 80030a4:	2000031c 	.word	0x2000031c

080030a8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <EXTI4_IRQHandler+0x20>)
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	4a05      	ldr	r2, [pc, #20]	; (80030c8 <EXTI4_IRQHandler+0x20>)
 80030b2:	f043 0310 	orr.w	r3, r3, #16
 80030b6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4](ARR_INTERRUPT_TRACK,4);
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <EXTI4_IRQHandler+0x24>)
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2104      	movs	r1, #4
 80030be:	4804      	ldr	r0, [pc, #16]	; (80030d0 <EXTI4_IRQHandler+0x28>)
 80030c0:	4798      	blx	r3
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40010400 	.word	0x40010400
 80030cc:	200002e0 	.word	0x200002e0
 80030d0:	2000031c 	.word	0x2000031c

080030d4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5](ARR_INTERRUPT_TRACK,5);  }
 80030d8:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <EXTI9_5_IRQHandler+0x26>
 80030e4:	4b28      	ldr	r3, [pc, #160]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	4a27      	ldr	r2, [pc, #156]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 80030ea:	f043 0320 	orr.w	r3, r3, #32
 80030ee:	6153      	str	r3, [r2, #20]
 80030f0:	4b26      	ldr	r3, [pc, #152]	; (800318c <EXTI9_5_IRQHandler+0xb8>)
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	2105      	movs	r1, #5
 80030f6:	4826      	ldr	r0, [pc, #152]	; (8003190 <EXTI9_5_IRQHandler+0xbc>)
 80030f8:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6](ARR_INTERRUPT_TRACK,6);  }
 80030fa:	4b23      	ldr	r3, [pc, #140]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <EXTI9_5_IRQHandler+0x48>
 8003106:	4b20      	ldr	r3, [pc, #128]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	4a1f      	ldr	r2, [pc, #124]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 800310c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003110:	6153      	str	r3, [r2, #20]
 8003112:	4b1e      	ldr	r3, [pc, #120]	; (800318c <EXTI9_5_IRQHandler+0xb8>)
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2106      	movs	r1, #6
 8003118:	481d      	ldr	r0, [pc, #116]	; (8003190 <EXTI9_5_IRQHandler+0xbc>)
 800311a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7](ARR_INTERRUPT_TRACK,7);  }
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <EXTI9_5_IRQHandler+0x6a>
 8003128:	4b17      	ldr	r3, [pc, #92]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	4a16      	ldr	r2, [pc, #88]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 800312e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003132:	6153      	str	r3, [r2, #20]
 8003134:	4b15      	ldr	r3, [pc, #84]	; (800318c <EXTI9_5_IRQHandler+0xb8>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2107      	movs	r1, #7
 800313a:	4815      	ldr	r0, [pc, #84]	; (8003190 <EXTI9_5_IRQHandler+0xbc>)
 800313c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8](ARR_INTERRUPT_TRACK,8);  }
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <EXTI9_5_IRQHandler+0x8c>
 800314a:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	4a0e      	ldr	r2, [pc, #56]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003154:	6153      	str	r3, [r2, #20]
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <EXTI9_5_IRQHandler+0xb8>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	2108      	movs	r1, #8
 800315c:	480c      	ldr	r0, [pc, #48]	; (8003190 <EXTI9_5_IRQHandler+0xbc>)
 800315e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9](ARR_INTERRUPT_TRACK,9);  }
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <EXTI9_5_IRQHandler+0xae>
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	4a05      	ldr	r2, [pc, #20]	; (8003188 <EXTI9_5_IRQHandler+0xb4>)
 8003172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003176:	6153      	str	r3, [r2, #20]
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <EXTI9_5_IRQHandler+0xb8>)
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	2109      	movs	r1, #9
 800317e:	4804      	ldr	r0, [pc, #16]	; (8003190 <EXTI9_5_IRQHandler+0xbc>)
 8003180:	4798      	blx	r3
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40010400 	.word	0x40010400
 800318c:	200002e0 	.word	0x200002e0
 8003190:	2000031c 	.word	0x2000031c

08003194 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10](ARR_INTERRUPT_TRACK,10);  }
 8003198:	4b33      	ldr	r3, [pc, #204]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <EXTI15_10_IRQHandler+0x26>
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4a2f      	ldr	r2, [pc, #188]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 80031aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ae:	6153      	str	r3, [r2, #20]
 80031b0:	4b2e      	ldr	r3, [pc, #184]	; (800326c <EXTI15_10_IRQHandler+0xd8>)
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	210a      	movs	r1, #10
 80031b6:	482e      	ldr	r0, [pc, #184]	; (8003270 <EXTI15_10_IRQHandler+0xdc>)
 80031b8:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11](ARR_INTERRUPT_TRACK,11);  }
 80031ba:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <EXTI15_10_IRQHandler+0x48>
 80031c6:	4b28      	ldr	r3, [pc, #160]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4a27      	ldr	r2, [pc, #156]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 80031cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031d0:	6153      	str	r3, [r2, #20]
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <EXTI15_10_IRQHandler+0xd8>)
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	210b      	movs	r1, #11
 80031d8:	4825      	ldr	r0, [pc, #148]	; (8003270 <EXTI15_10_IRQHandler+0xdc>)
 80031da:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12](ARR_INTERRUPT_TRACK,12);  }
 80031dc:	4b22      	ldr	r3, [pc, #136]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <EXTI15_10_IRQHandler+0x6a>
 80031e8:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	4a1e      	ldr	r2, [pc, #120]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 80031ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031f2:	6153      	str	r3, [r2, #20]
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <EXTI15_10_IRQHandler+0xd8>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	210c      	movs	r1, #12
 80031fa:	481d      	ldr	r0, [pc, #116]	; (8003270 <EXTI15_10_IRQHandler+0xdc>)
 80031fc:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13](ARR_INTERRUPT_TRACK,13);  }
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <EXTI15_10_IRQHandler+0x8c>
 800320a:	4b17      	ldr	r3, [pc, #92]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	4a16      	ldr	r2, [pc, #88]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 8003210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003214:	6153      	str	r3, [r2, #20]
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <EXTI15_10_IRQHandler+0xd8>)
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	210d      	movs	r1, #13
 800321c:	4814      	ldr	r0, [pc, #80]	; (8003270 <EXTI15_10_IRQHandler+0xdc>)
 800321e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14](ARR_INTERRUPT_TRACK,14);  }
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <EXTI15_10_IRQHandler+0xae>
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	4a0d      	ldr	r2, [pc, #52]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 8003232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003236:	6153      	str	r3, [r2, #20]
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <EXTI15_10_IRQHandler+0xd8>)
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	210e      	movs	r1, #14
 800323e:	480c      	ldr	r0, [pc, #48]	; (8003270 <EXTI15_10_IRQHandler+0xdc>)
 8003240:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15](ARR_INTERRUPT_TRACK,15);  }
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <EXTI15_10_IRQHandler+0xd0>
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	4a05      	ldr	r2, [pc, #20]	; (8003268 <EXTI15_10_IRQHandler+0xd4>)
 8003254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003258:	6153      	str	r3, [r2, #20]
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <EXTI15_10_IRQHandler+0xd8>)
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	210f      	movs	r1, #15
 8003260:	4803      	ldr	r0, [pc, #12]	; (8003270 <EXTI15_10_IRQHandler+0xdc>)
 8003262:	4798      	blx	r3

}
 8003264:	bf00      	nop
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40010400 	.word	0x40010400
 800326c:	200002e0 	.word	0x200002e0
 8003270:	2000031c 	.word	0x2000031c

08003274 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
	//slave only todo
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
	//slave only todo
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <USART_INIT>:
//===============================================================
void send_string (){

}
//===============================================================
void USART_INIT(USART_typeDef* USARTx,uint32_t mode,uint32_t word_length,uint32_t stop_bits,uint32_t baud_rate,uint32_t parity,uint32_t CLCK){
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]

	if(USARTx ==USART1){
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a55      	ldr	r2, [pc, #340]	; (80033f4 <USART_INIT+0x168>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d11f      	bne.n	80032e2 <USART_INIT+0x56>
		USART1_Clock_Enable();
 80032a2:	4b55      	ldr	r3, [pc, #340]	; (80033f8 <USART_INIT+0x16c>)
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	4a54      	ldr	r2, [pc, #336]	; (80033f8 <USART_INIT+0x16c>)
 80032a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ac:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();
 80032ae:	4b52      	ldr	r3, [pc, #328]	; (80033f8 <USART_INIT+0x16c>)
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	4a51      	ldr	r2, [pc, #324]	; (80033f8 <USART_INIT+0x16c>)
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	6193      	str	r3, [r2, #24]
		NVIC_USART1_interrupt_Enable;
 80032ba:	4b50      	ldr	r3, [pc, #320]	; (80033fc <USART_INIT+0x170>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a4f      	ldr	r2, [pc, #316]	; (80033fc <USART_INIT+0x170>)
 80032c0:	f043 0320 	orr.w	r3, r3, #32
 80032c4:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin9,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 80032c6:	2209      	movs	r2, #9
 80032c8:	2109      	movs	r1, #9
 80032ca:	484d      	ldr	r0, [pc, #308]	; (8003400 <USART_INIT+0x174>)
 80032cc:	f7fe fc2a 	bl	8001b24 <pinmode>
		//RX
		pinmode(GPIOA, pin10,GPIO_MODE_INTPUT_AF);
 80032d0:	2204      	movs	r2, #4
 80032d2:	210a      	movs	r1, #10
 80032d4:	484a      	ldr	r0, [pc, #296]	; (8003400 <USART_INIT+0x174>)
 80032d6:	f7fe fc25 	bl	8001b24 <pinmode>
		arr[0]=USART1;
 80032da:	4b4a      	ldr	r3, [pc, #296]	; (8003404 <USART_INIT+0x178>)
 80032dc:	4a45      	ldr	r2, [pc, #276]	; (80033f4 <USART_INIT+0x168>)
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e042      	b.n	8003368 <USART_INIT+0xdc>
	}
	else if(USARTx ==USART2){
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a48      	ldr	r2, [pc, #288]	; (8003408 <USART_INIT+0x17c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d11f      	bne.n	800332a <USART_INIT+0x9e>
		USART2_Clock_Enable();
 80032ea:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <USART_INIT+0x16c>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4a42      	ldr	r2, [pc, #264]	; (80033f8 <USART_INIT+0x16c>)
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f4:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();
 80032f6:	4b40      	ldr	r3, [pc, #256]	; (80033f8 <USART_INIT+0x16c>)
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	4a3f      	ldr	r2, [pc, #252]	; (80033f8 <USART_INIT+0x16c>)
 80032fc:	f043 0304 	orr.w	r3, r3, #4
 8003300:	6193      	str	r3, [r2, #24]
		NVIC_USART2_interrupt_Enable;
 8003302:	4b3e      	ldr	r3, [pc, #248]	; (80033fc <USART_INIT+0x170>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a3d      	ldr	r2, [pc, #244]	; (80033fc <USART_INIT+0x170>)
 8003308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800330c:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin2,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 800330e:	2209      	movs	r2, #9
 8003310:	2102      	movs	r1, #2
 8003312:	483b      	ldr	r0, [pc, #236]	; (8003400 <USART_INIT+0x174>)
 8003314:	f7fe fc06 	bl	8001b24 <pinmode>
		//RX
		pinmode(GPIOA, pin3,GPIO_MODE_INTPUT_AF);
 8003318:	2204      	movs	r2, #4
 800331a:	2103      	movs	r1, #3
 800331c:	4838      	ldr	r0, [pc, #224]	; (8003400 <USART_INIT+0x174>)
 800331e:	f7fe fc01 	bl	8001b24 <pinmode>
		arr[1]=USART2;
 8003322:	4b38      	ldr	r3, [pc, #224]	; (8003404 <USART_INIT+0x178>)
 8003324:	4a38      	ldr	r2, [pc, #224]	; (8003408 <USART_INIT+0x17c>)
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	e01e      	b.n	8003368 <USART_INIT+0xdc>
	}
	else{
		USART3_Clock_Enable();
 800332a:	4b33      	ldr	r3, [pc, #204]	; (80033f8 <USART_INIT+0x16c>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4a32      	ldr	r2, [pc, #200]	; (80033f8 <USART_INIT+0x16c>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003334:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 8003336:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <USART_INIT+0x16c>)
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	4a2f      	ldr	r2, [pc, #188]	; (80033f8 <USART_INIT+0x16c>)
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	6193      	str	r3, [r2, #24]
		NVIC_USART3_interrupt_Enable;
 8003342:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <USART_INIT+0x170>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2d      	ldr	r2, [pc, #180]	; (80033fc <USART_INIT+0x170>)
 8003348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334c:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 800334e:	2209      	movs	r2, #9
 8003350:	210a      	movs	r1, #10
 8003352:	482e      	ldr	r0, [pc, #184]	; (800340c <USART_INIT+0x180>)
 8003354:	f7fe fbe6 	bl	8001b24 <pinmode>
		//RX
		pinmode(GPIOB, pin11,GPIO_MODE_INTPUT_AF);
 8003358:	2204      	movs	r2, #4
 800335a:	210b      	movs	r1, #11
 800335c:	482b      	ldr	r0, [pc, #172]	; (800340c <USART_INIT+0x180>)
 800335e:	f7fe fbe1 	bl	8001b24 <pinmode>
		arr[2]=USART3;
 8003362:	4b28      	ldr	r3, [pc, #160]	; (8003404 <USART_INIT+0x178>)
 8003364:	4a2a      	ldr	r2, [pc, #168]	; (8003410 <USART_INIT+0x184>)
 8003366:	609a      	str	r2, [r3, #8]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enabled
	USARTx->USART_CR1 |=(1<<13);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	60da      	str	r2, [r3, #12]
	//STEP 2
	//	Bit 12 M: Word length
	//	This bit determines the word length. It is set or cleared by software.
	//	0: 1 Start bit, 8 Data bits, n Stop bit
	//	1: 1 Start bit, 9 Data bits, n Stop bit
	USARTx->USART_CR1 |=word_length;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	431a      	orrs	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	60da      	str	r2, [r3, #12]
	//	These bits are used for programming the stop bits.
	//	00: 1 Stop bit
	//	01: 0.5 Stop bit
	//	10: 2 Stop bits
	//	11: 1.5 Stop bit
	USARTx->USART_CR2 |=stop_bits;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	431a      	orrs	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	611a      	str	r2, [r3, #16]
	//	2: When TE is set there is a 1 bit-time delay before the transmission starts.
	//	Bit 2 RE: Receiver enable
	//	This bit enables the receiver. It is set and cleared by software.
	//	0: Receiver is disabled
	//	1: Receiver is enabled and begins searching for a start bit
	USARTx->USART_CR1 |=mode;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	431a      	orrs	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	60da      	str	r2, [r3, #12]
	//	Bit 9 PS: Parity selection
	//	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	//	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	//	0: Even parity
	//	1: Odd parity
	USARTx->USART_CR1 |=parity;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	431a      	orrs	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	60da      	str	r2, [r3, #12]
	//	Bits 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV
	//	These 12 bits define the mantissa of the USART Divider (USARTDIV)
	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV
	//	These 4 bits define the fraction of the USART Divider (USARTDIV)

	uint16_t DIV_Mantissa =CLCK /(baud_rate*16);
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	82fb      	strh	r3, [r7, #22]
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	4a17      	ldr	r2, [pc, #92]	; (8003414 <USART_INIT+0x188>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033be:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c2:	8afa      	ldrh	r2, [r7, #22]
 80033c4:	2164      	movs	r1, #100	; 0x64
 80033c6:	fb01 f202 	mul.w	r2, r1, r2
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	4a11      	ldr	r2, [pc, #68]	; (8003414 <USART_INIT+0x188>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	82bb      	strh	r3, [r7, #20]
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );
 80033d8:	8afb      	ldrh	r3, [r7, #22]
 80033da:	011a      	lsls	r2, r3, #4
 80033dc:	8abb      	ldrh	r3, [r7, #20]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	4313      	orrs	r3, r2
 80033e4:	461a      	mov	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	609a      	str	r2, [r3, #8]


}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40013800 	.word	0x40013800
 80033f8:	40021000 	.word	0x40021000
 80033fc:	e000e104 	.word	0xe000e104
 8003400:	40010800 	.word	0x40010800
 8003404:	2000033c 	.word	0x2000033c
 8003408:	40004400 	.word	0x40004400
 800340c:	40010c00 	.word	0x40010c00
 8003410:	40004800 	.word	0x40004800
 8003414:	51eb851f 	.word	0x51eb851f

08003418 <USART_SEND>:
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	0b1b      	lsrs	r3, r3, #12
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d106      	bne.n	800343e <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 800343c:	e004      	b.n	8003448 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	605a      	str	r2, [r3, #4]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
	...

08003454 <USART_READ>:

void USART_READ(USART_typeDef* USARTx,uint16_t* data){
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <USART_READ+0x44>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d103      	bne.n	800346e <USART_READ+0x1a>
		*data=arr_data_RES[0];
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <USART_READ+0x48>)
 8003468:	881a      	ldrh	r2, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	801a      	strh	r2, [r3, #0]
	}
	if(USARTx==USART2){
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <USART_READ+0x4c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d103      	bne.n	800347e <USART_READ+0x2a>
		*data=arr_data_RES[1];
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <USART_READ+0x48>)
 8003478:	885a      	ldrh	r2, [r3, #2]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	801a      	strh	r2, [r3, #0]
	}
	if(USARTx==USART3){
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <USART_READ+0x50>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d103      	bne.n	800348e <USART_READ+0x3a>
		*data=arr_data_RES[2];
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <USART_READ+0x48>)
 8003488:	889a      	ldrh	r2, [r3, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	801a      	strh	r2, [r3, #0]
	}

}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	40013800 	.word	0x40013800
 800349c:	20000348 	.word	0x20000348
 80034a0:	40004400 	.word	0x40004400
 80034a4:	40004800 	.word	0x40004800

080034a8 <USART_SEND_STRING>:

void USART_SEND_STRING(USART_typeDef* USARTx,uint8_t* data){
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a13      	ldr	r2, [pc, #76]	; (8003504 <USART_SEND_STRING+0x5c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d105      	bne.n	80034c6 <USART_SEND_STRING+0x1e>
		arr_data[0]=data;
 80034ba:	4a13      	ldr	r2, [pc, #76]	; (8003508 <USART_SEND_STRING+0x60>)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6013      	str	r3, [r2, #0]
		arr[0]=USART1;
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <USART_SEND_STRING+0x64>)
 80034c2:	4a10      	ldr	r2, [pc, #64]	; (8003504 <USART_SEND_STRING+0x5c>)
 80034c4:	601a      	str	r2, [r3, #0]
	}
	if(USARTx==USART2){
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a11      	ldr	r2, [pc, #68]	; (8003510 <USART_SEND_STRING+0x68>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d105      	bne.n	80034da <USART_SEND_STRING+0x32>
		arr_data[1]=data;
 80034ce:	4a0e      	ldr	r2, [pc, #56]	; (8003508 <USART_SEND_STRING+0x60>)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	6053      	str	r3, [r2, #4]
		arr[1]=USART2;
 80034d4:	4b0d      	ldr	r3, [pc, #52]	; (800350c <USART_SEND_STRING+0x64>)
 80034d6:	4a0e      	ldr	r2, [pc, #56]	; (8003510 <USART_SEND_STRING+0x68>)
 80034d8:	605a      	str	r2, [r3, #4]
	}
	if(USARTx==USART3){
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <USART_SEND_STRING+0x6c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d105      	bne.n	80034ee <USART_SEND_STRING+0x46>
		arr_data[2]=data;
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <USART_SEND_STRING+0x60>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6093      	str	r3, [r2, #8]
		arr[2]=USART3;
 80034e8:	4b08      	ldr	r3, [pc, #32]	; (800350c <USART_SEND_STRING+0x64>)
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <USART_SEND_STRING+0x6c>)
 80034ec:	609a      	str	r2, [r3, #8]
	}
	//Bit 7 TXEIE: TXE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
	USARTx->USART_CR1 |=Transmit_data_register_empty;//open flage of interrupt
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60da      	str	r2, [r3, #12]
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	40013800 	.word	0x40013800
 8003508:	20000350 	.word	0x20000350
 800350c:	2000033c 	.word	0x2000033c
 8003510:	40004400 	.word	0x40004400
 8003514:	40004800 	.word	0x40004800

08003518 <USART_READ_INTERRUPT_EN>:

void USART_READ_INTERRUPT_EN(USART_typeDef* USARTx,void (*calback) (void)){
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a0e      	ldr	r2, [pc, #56]	; (8003560 <USART_READ_INTERRUPT_EN+0x48>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d103      	bne.n	8003532 <USART_READ_INTERRUPT_EN+0x1a>
		GP_reseve_Callback[0] = calback;
 800352a:	4a0e      	ldr	r2, [pc, #56]	; (8003564 <USART_READ_INTERRUPT_EN+0x4c>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	e00a      	b.n	8003548 <USART_READ_INTERRUPT_EN+0x30>
	}
	else if(USARTx==USART2){
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a0c      	ldr	r2, [pc, #48]	; (8003568 <USART_READ_INTERRUPT_EN+0x50>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d103      	bne.n	8003542 <USART_READ_INTERRUPT_EN+0x2a>
		GP_reseve_Callback[1] = calback;
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <USART_READ_INTERRUPT_EN+0x4c>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	6053      	str	r3, [r2, #4]
 8003540:	e002      	b.n	8003548 <USART_READ_INTERRUPT_EN+0x30>
	}
	else{
		GP_reseve_Callback[2] = calback;
 8003542:	4a08      	ldr	r2, [pc, #32]	; (8003564 <USART_READ_INTERRUPT_EN+0x4c>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6093      	str	r3, [r2, #8]
	//RX INTRRUPT
	//Bit 5 RXNEIE: RXNE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 |=Received_data_ready_to_be_read;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f043 0220 	orr.w	r2, r3, #32
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	60da      	str	r2, [r3, #12]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40013800 	.word	0x40013800
 8003564:	2000035c 	.word	0x2000035c
 8003568:	40004400 	.word	0x40004400

0800356c <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8003572:	4b51      	ldr	r3, [pc, #324]	; (80036b8 <USART1_IRQHandler+0x14c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	09db      	lsrs	r3, r3, #7
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d122      	bne.n	80035c8 <USART1_IRQHandler+0x5c>
 8003582:	4b4d      	ldr	r3, [pc, #308]	; (80036b8 <USART1_IRQHandler+0x14c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	09db      	lsrs	r3, r3, #7
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d11a      	bne.n	80035c8 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 8003592:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <USART1_IRQHandler+0x150>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00d      	beq.n	80035b8 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 800359c:	4b46      	ldr	r3, [pc, #280]	; (80036b8 <USART1_IRQHandler+0x14c>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b46      	ldr	r3, [pc, #280]	; (80036bc <USART1_IRQHandler+0x150>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	4610      	mov	r0, r2
 80035a8:	f7ff ff36 	bl	8003418 <USART_SEND>
			++arr_data[0];
 80035ac:	4b43      	ldr	r3, [pc, #268]	; (80036bc <USART1_IRQHandler+0x150>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	4a42      	ldr	r2, [pc, #264]	; (80036bc <USART1_IRQHandler+0x150>)
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e007      	b.n	80035c8 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 80035b8:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <USART1_IRQHandler+0x14c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	4b3e      	ldr	r3, [pc, #248]	; (80036b8 <USART1_IRQHandler+0x14c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c6:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 80035c8:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <USART1_IRQHandler+0x14c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d15b      	bne.n	8003690 <USART1_IRQHandler+0x124>
 80035d8:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <USART1_IRQHandler+0x14c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d153      	bne.n	8003690 <USART1_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 80035e8:	4b33      	ldr	r3, [pc, #204]	; (80036b8 <USART1_IRQHandler+0x14c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	0b1b      	lsrs	r3, r3, #12
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d117      	bne.n	8003628 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 80035f8:	4b2f      	ldr	r3, [pc, #188]	; (80036b8 <USART1_IRQHandler+0x14c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	0a9b      	lsrs	r3, r3, #10
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d108      	bne.n	800361a <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8003608:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <USART1_IRQHandler+0x14c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	b29b      	uxth	r3, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b2a      	ldr	r3, [pc, #168]	; (80036c0 <USART1_IRQHandler+0x154>)
 8003616:	801a      	strh	r2, [r3, #0]
 8003618:	e020      	b.n	800365c <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 800361a:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <USART1_IRQHandler+0x14c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	b29a      	uxth	r2, r3
 8003622:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <USART1_IRQHandler+0x154>)
 8003624:	801a      	strh	r2, [r3, #0]
 8003626:	e019      	b.n	800365c <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8003628:	4b23      	ldr	r3, [pc, #140]	; (80036b8 <USART1_IRQHandler+0x14c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	0a9b      	lsrs	r3, r3, #10
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d109      	bne.n	800364c <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 8003638:	4b1f      	ldr	r3, [pc, #124]	; (80036b8 <USART1_IRQHandler+0x14c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003644:	b29a      	uxth	r2, r3
 8003646:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <USART1_IRQHandler+0x154>)
 8003648:	801a      	strh	r2, [r3, #0]
 800364a:	e007      	b.n	800365c <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <USART1_IRQHandler+0x14c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	b29b      	uxth	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	b29a      	uxth	r2, r3
 8003658:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <USART1_IRQHandler+0x154>)
 800365a:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <USART1_IRQHandler+0x158>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4798      	blx	r3

		//for(long i=0;i<(20000);i++);
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <USART1_IRQHandler+0x14c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <USART1_IRQHandler+0x14c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0220 	bic.w	r2, r2, #32
 8003670:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 8003672:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <USART1_IRQHandler+0x14c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8003678:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <USART1_IRQHandler+0x15c>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	b29b      	uxth	r3, r3
 800367e:	80fb      	strh	r3, [r7, #6]
			arr[0]->USART_SR &=~(1<<5);
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <USART1_IRQHandler+0x14c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <USART1_IRQHandler+0x14c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0220 	bic.w	r2, r2, #32
 800368e:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <USART1_IRQHandler+0x14c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8003696:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <USART1_IRQHandler+0x15c>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	b29b      	uxth	r3, r3
 800369c:	80bb      	strh	r3, [r7, #4]
		arr[0]->USART_SR &=~(1<<5);
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <USART1_IRQHandler+0x14c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <USART1_IRQHandler+0x14c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0220 	bic.w	r2, r2, #32
 80036ac:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	2000033c 	.word	0x2000033c
 80036bc:	20000350 	.word	0x20000350
 80036c0:	20000348 	.word	0x20000348
 80036c4:	2000035c 	.word	0x2000035c
 80036c8:	40013800 	.word	0x40013800

080036cc <USART2_IRQHandler>:
void USART2_IRQHandler(){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80036d2:	4b51      	ldr	r3, [pc, #324]	; (8003818 <USART2_IRQHandler+0x14c>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	09db      	lsrs	r3, r3, #7
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d122      	bne.n	8003728 <USART2_IRQHandler+0x5c>
 80036e2:	4b4d      	ldr	r3, [pc, #308]	; (8003818 <USART2_IRQHandler+0x14c>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	09db      	lsrs	r3, r3, #7
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d11a      	bne.n	8003728 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 80036f2:	4b4a      	ldr	r3, [pc, #296]	; (800381c <USART2_IRQHandler+0x150>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 80036fc:	4b46      	ldr	r3, [pc, #280]	; (8003818 <USART2_IRQHandler+0x14c>)
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	4b46      	ldr	r3, [pc, #280]	; (800381c <USART2_IRQHandler+0x150>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f7ff fe86 	bl	8003418 <USART_SEND>
			++arr_data[1];
 800370c:	4b43      	ldr	r3, [pc, #268]	; (800381c <USART2_IRQHandler+0x150>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	3301      	adds	r3, #1
 8003712:	4a42      	ldr	r2, [pc, #264]	; (800381c <USART2_IRQHandler+0x150>)
 8003714:	6053      	str	r3, [r2, #4]
 8003716:	e007      	b.n	8003728 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8003718:	4b3f      	ldr	r3, [pc, #252]	; (8003818 <USART2_IRQHandler+0x14c>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <USART2_IRQHandler+0x14c>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003726:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8003728:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <USART2_IRQHandler+0x14c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d15b      	bne.n	80037f0 <USART2_IRQHandler+0x124>
 8003738:	4b37      	ldr	r3, [pc, #220]	; (8003818 <USART2_IRQHandler+0x14c>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b01      	cmp	r3, #1
 8003746:	d153      	bne.n	80037f0 <USART2_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 8003748:	4b33      	ldr	r3, [pc, #204]	; (8003818 <USART2_IRQHandler+0x14c>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	0b1b      	lsrs	r3, r3, #12
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d117      	bne.n	8003788 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8003758:	4b2f      	ldr	r3, [pc, #188]	; (8003818 <USART2_IRQHandler+0x14c>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	0a9b      	lsrs	r3, r3, #10
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b01      	cmp	r3, #1
 8003766:	d108      	bne.n	800377a <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8003768:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <USART2_IRQHandler+0x14c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	b29b      	uxth	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	b29a      	uxth	r2, r3
 8003774:	4b2a      	ldr	r3, [pc, #168]	; (8003820 <USART2_IRQHandler+0x154>)
 8003776:	805a      	strh	r2, [r3, #2]
 8003778:	e020      	b.n	80037bc <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 800377a:	4b27      	ldr	r3, [pc, #156]	; (8003818 <USART2_IRQHandler+0x14c>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	b29a      	uxth	r2, r3
 8003782:	4b27      	ldr	r3, [pc, #156]	; (8003820 <USART2_IRQHandler+0x154>)
 8003784:	805a      	strh	r2, [r3, #2]
 8003786:	e019      	b.n	80037bc <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8003788:	4b23      	ldr	r3, [pc, #140]	; (8003818 <USART2_IRQHandler+0x14c>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	0a9b      	lsrs	r3, r3, #10
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d109      	bne.n	80037ac <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8003798:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <USART2_IRQHandler+0x14c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <USART2_IRQHandler+0x154>)
 80037a8:	805a      	strh	r2, [r3, #2]
 80037aa:	e007      	b.n	80037bc <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 80037ac:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <USART2_IRQHandler+0x14c>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <USART2_IRQHandler+0x154>)
 80037ba:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <USART2_IRQHandler+0x158>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4798      	blx	r3
		//for(long i=0;i<(20000);i++);
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <USART2_IRQHandler+0x14c>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <USART2_IRQHandler+0x14c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f022 0220 	bic.w	r2, r2, #32
 80037d0:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <USART2_IRQHandler+0x14c>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 80037d8:	4b13      	ldr	r3, [pc, #76]	; (8003828 <USART2_IRQHandler+0x15c>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	80fb      	strh	r3, [r7, #6]
			arr[1]->USART_SR &=~(1<<5);
 80037e0:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <USART2_IRQHandler+0x14c>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <USART2_IRQHandler+0x14c>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f022 0220 	bic.w	r2, r2, #32
 80037ee:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <USART2_IRQHandler+0x14c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 80037f6:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <USART2_IRQHandler+0x15c>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	80bb      	strh	r3, [r7, #4]
		arr[1]->USART_SR &=~(1<<5);
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <USART2_IRQHandler+0x14c>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <USART2_IRQHandler+0x14c>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f022 0220 	bic.w	r2, r2, #32
 800380c:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	2000033c 	.word	0x2000033c
 800381c:	20000350 	.word	0x20000350
 8003820:	20000348 	.word	0x20000348
 8003824:	2000035c 	.word	0x2000035c
 8003828:	40004400 	.word	0x40004400

0800382c <USART3_IRQHandler>:
void USART3_IRQHandler(){
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8003832:	4b51      	ldr	r3, [pc, #324]	; (8003978 <USART3_IRQHandler+0x14c>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	09db      	lsrs	r3, r3, #7
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b01      	cmp	r3, #1
 8003840:	d122      	bne.n	8003888 <USART3_IRQHandler+0x5c>
 8003842:	4b4d      	ldr	r3, [pc, #308]	; (8003978 <USART3_IRQHandler+0x14c>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	09db      	lsrs	r3, r3, #7
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b01      	cmp	r3, #1
 8003850:	d11a      	bne.n	8003888 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 8003852:	4b4a      	ldr	r3, [pc, #296]	; (800397c <USART3_IRQHandler+0x150>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00d      	beq.n	8003878 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 800385c:	4b46      	ldr	r3, [pc, #280]	; (8003978 <USART3_IRQHandler+0x14c>)
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	4b46      	ldr	r3, [pc, #280]	; (800397c <USART3_IRQHandler+0x150>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f7ff fdd6 	bl	8003418 <USART_SEND>
			++arr_data[2];
 800386c:	4b43      	ldr	r3, [pc, #268]	; (800397c <USART3_IRQHandler+0x150>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	3301      	adds	r3, #1
 8003872:	4a42      	ldr	r2, [pc, #264]	; (800397c <USART3_IRQHandler+0x150>)
 8003874:	6093      	str	r3, [r2, #8]
 8003876:	e007      	b.n	8003888 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <USART3_IRQHandler+0x14c>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <USART3_IRQHandler+0x14c>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003886:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 8003888:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <USART3_IRQHandler+0x14c>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d15b      	bne.n	8003950 <USART3_IRQHandler+0x124>
 8003898:	4b37      	ldr	r3, [pc, #220]	; (8003978 <USART3_IRQHandler+0x14c>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d153      	bne.n	8003950 <USART3_IRQHandler+0x124>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 80038a8:	4b33      	ldr	r3, [pc, #204]	; (8003978 <USART3_IRQHandler+0x14c>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	0b1b      	lsrs	r3, r3, #12
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d117      	bne.n	80038e8 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 80038b8:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <USART3_IRQHandler+0x14c>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	0a9b      	lsrs	r3, r3, #10
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d108      	bne.n	80038da <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <USART3_IRQHandler+0x14c>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <USART3_IRQHandler+0x154>)
 80038d6:	809a      	strh	r2, [r3, #4]
 80038d8:	e020      	b.n	800391c <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 80038da:	4b27      	ldr	r3, [pc, #156]	; (8003978 <USART3_IRQHandler+0x14c>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	4b27      	ldr	r3, [pc, #156]	; (8003980 <USART3_IRQHandler+0x154>)
 80038e4:	809a      	strh	r2, [r3, #4]
 80038e6:	e019      	b.n	800391c <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 80038e8:	4b23      	ldr	r3, [pc, #140]	; (8003978 <USART3_IRQHandler+0x14c>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	0a9b      	lsrs	r3, r3, #10
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d109      	bne.n	800390c <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 80038f8:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <USART3_IRQHandler+0x14c>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003904:	b29a      	uxth	r2, r3
 8003906:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <USART3_IRQHandler+0x154>)
 8003908:	809a      	strh	r2, [r3, #4]
 800390a:	e007      	b.n	800391c <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 800390c:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <USART3_IRQHandler+0x14c>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	b29b      	uxth	r3, r3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	b29a      	uxth	r2, r3
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <USART3_IRQHandler+0x154>)
 800391a:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <USART3_IRQHandler+0x158>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4798      	blx	r3
		//for(long i=0;i<(20000);i++);

		arr[2]->USART_SR &=~(1<<5);//clear
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <USART3_IRQHandler+0x14c>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <USART3_IRQHandler+0x14c>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f022 0220 	bic.w	r2, r2, #32
 8003930:	601a      	str	r2, [r3, #0]

		if(((arr[2]->USART_SR>>3)&1)|1){
 8003932:	4b11      	ldr	r3, [pc, #68]	; (8003978 <USART3_IRQHandler+0x14c>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 8003938:	4b13      	ldr	r3, [pc, #76]	; (8003988 <USART3_IRQHandler+0x15c>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	b29b      	uxth	r3, r3
 800393e:	80fb      	strh	r3, [r7, #6]
			arr[2]->USART_SR &=~(1<<5);
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <USART3_IRQHandler+0x14c>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <USART3_IRQHandler+0x14c>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f022 0220 	bic.w	r2, r2, #32
 800394e:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 8003950:	4b09      	ldr	r3, [pc, #36]	; (8003978 <USART3_IRQHandler+0x14c>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <USART3_IRQHandler+0x15c>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	b29b      	uxth	r3, r3
 800395c:	80bb      	strh	r3, [r7, #4]
		arr[2]->USART_SR &=~(1<<5);
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <USART3_IRQHandler+0x14c>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <USART3_IRQHandler+0x14c>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f022 0220 	bic.w	r2, r2, #32
 800396c:	601a      	str	r2, [r3, #0]
	}

}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	2000033c 	.word	0x2000033c
 800397c:	20000350 	.word	0x20000350
 8003980:	20000348 	.word	0x20000348
 8003984:	2000035c 	.word	0x2000035c
 8003988:	40004800 	.word	0x40004800

0800398c <atoi>:
 800398c:	220a      	movs	r2, #10
 800398e:	2100      	movs	r1, #0
 8003990:	f000 b8d4 	b.w	8003b3c <strtol>

08003994 <__errno>:
 8003994:	4b01      	ldr	r3, [pc, #4]	; (800399c <__errno+0x8>)
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000024 	.word	0x20000024

080039a0 <__libc_init_array>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	2500      	movs	r5, #0
 80039a4:	4e0c      	ldr	r6, [pc, #48]	; (80039d8 <__libc_init_array+0x38>)
 80039a6:	4c0d      	ldr	r4, [pc, #52]	; (80039dc <__libc_init_array+0x3c>)
 80039a8:	1ba4      	subs	r4, r4, r6
 80039aa:	10a4      	asrs	r4, r4, #2
 80039ac:	42a5      	cmp	r5, r4
 80039ae:	d109      	bne.n	80039c4 <__libc_init_array+0x24>
 80039b0:	f000 fcf0 	bl	8004394 <_init>
 80039b4:	2500      	movs	r5, #0
 80039b6:	4e0a      	ldr	r6, [pc, #40]	; (80039e0 <__libc_init_array+0x40>)
 80039b8:	4c0a      	ldr	r4, [pc, #40]	; (80039e4 <__libc_init_array+0x44>)
 80039ba:	1ba4      	subs	r4, r4, r6
 80039bc:	10a4      	asrs	r4, r4, #2
 80039be:	42a5      	cmp	r5, r4
 80039c0:	d105      	bne.n	80039ce <__libc_init_array+0x2e>
 80039c2:	bd70      	pop	{r4, r5, r6, pc}
 80039c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039c8:	4798      	blx	r3
 80039ca:	3501      	adds	r5, #1
 80039cc:	e7ee      	b.n	80039ac <__libc_init_array+0xc>
 80039ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039d2:	4798      	blx	r3
 80039d4:	3501      	adds	r5, #1
 80039d6:	e7f2      	b.n	80039be <__libc_init_array+0x1e>
 80039d8:	080044fc 	.word	0x080044fc
 80039dc:	080044fc 	.word	0x080044fc
 80039e0:	080044fc 	.word	0x080044fc
 80039e4:	08004500 	.word	0x08004500

080039e8 <siprintf>:
 80039e8:	b40e      	push	{r1, r2, r3}
 80039ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039ee:	b500      	push	{lr}
 80039f0:	b09c      	sub	sp, #112	; 0x70
 80039f2:	ab1d      	add	r3, sp, #116	; 0x74
 80039f4:	9002      	str	r0, [sp, #8]
 80039f6:	9006      	str	r0, [sp, #24]
 80039f8:	9107      	str	r1, [sp, #28]
 80039fa:	9104      	str	r1, [sp, #16]
 80039fc:	4808      	ldr	r0, [pc, #32]	; (8003a20 <siprintf+0x38>)
 80039fe:	4909      	ldr	r1, [pc, #36]	; (8003a24 <siprintf+0x3c>)
 8003a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a04:	9105      	str	r1, [sp, #20]
 8003a06:	6800      	ldr	r0, [r0, #0]
 8003a08:	a902      	add	r1, sp, #8
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	f000 f99c 	bl	8003d48 <_svfiprintf_r>
 8003a10:	2200      	movs	r2, #0
 8003a12:	9b02      	ldr	r3, [sp, #8]
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	b01c      	add	sp, #112	; 0x70
 8003a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a1c:	b003      	add	sp, #12
 8003a1e:	4770      	bx	lr
 8003a20:	20000024 	.word	0x20000024
 8003a24:	ffff0208 	.word	0xffff0208

08003a28 <strcat>:
 8003a28:	4603      	mov	r3, r0
 8003a2a:	b510      	push	{r4, lr}
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	1c5c      	adds	r4, r3, #1
 8003a30:	b93a      	cbnz	r2, 8003a42 <strcat+0x1a>
 8003a32:	3b01      	subs	r3, #1
 8003a34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a38:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a3c:	2a00      	cmp	r2, #0
 8003a3e:	d1f9      	bne.n	8003a34 <strcat+0xc>
 8003a40:	bd10      	pop	{r4, pc}
 8003a42:	4623      	mov	r3, r4
 8003a44:	e7f2      	b.n	8003a2c <strcat+0x4>

08003a46 <_strtol_l.isra.0>:
 8003a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a4a:	4680      	mov	r8, r0
 8003a4c:	4689      	mov	r9, r1
 8003a4e:	4692      	mov	sl, r2
 8003a50:	461e      	mov	r6, r3
 8003a52:	460f      	mov	r7, r1
 8003a54:	463d      	mov	r5, r7
 8003a56:	9808      	ldr	r0, [sp, #32]
 8003a58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a5c:	f000 f884 	bl	8003b68 <__locale_ctype_ptr_l>
 8003a60:	4420      	add	r0, r4
 8003a62:	7843      	ldrb	r3, [r0, #1]
 8003a64:	f013 0308 	ands.w	r3, r3, #8
 8003a68:	d132      	bne.n	8003ad0 <_strtol_l.isra.0+0x8a>
 8003a6a:	2c2d      	cmp	r4, #45	; 0x2d
 8003a6c:	d132      	bne.n	8003ad4 <_strtol_l.isra.0+0x8e>
 8003a6e:	2201      	movs	r2, #1
 8003a70:	787c      	ldrb	r4, [r7, #1]
 8003a72:	1cbd      	adds	r5, r7, #2
 8003a74:	2e00      	cmp	r6, #0
 8003a76:	d05d      	beq.n	8003b34 <_strtol_l.isra.0+0xee>
 8003a78:	2e10      	cmp	r6, #16
 8003a7a:	d109      	bne.n	8003a90 <_strtol_l.isra.0+0x4a>
 8003a7c:	2c30      	cmp	r4, #48	; 0x30
 8003a7e:	d107      	bne.n	8003a90 <_strtol_l.isra.0+0x4a>
 8003a80:	782b      	ldrb	r3, [r5, #0]
 8003a82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003a86:	2b58      	cmp	r3, #88	; 0x58
 8003a88:	d14f      	bne.n	8003b2a <_strtol_l.isra.0+0xe4>
 8003a8a:	2610      	movs	r6, #16
 8003a8c:	786c      	ldrb	r4, [r5, #1]
 8003a8e:	3502      	adds	r5, #2
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	bf14      	ite	ne
 8003a94:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003a98:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003a9c:	2700      	movs	r7, #0
 8003a9e:	fbb1 fcf6 	udiv	ip, r1, r6
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003aa8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003aac:	2b09      	cmp	r3, #9
 8003aae:	d817      	bhi.n	8003ae0 <_strtol_l.isra.0+0x9a>
 8003ab0:	461c      	mov	r4, r3
 8003ab2:	42a6      	cmp	r6, r4
 8003ab4:	dd23      	ble.n	8003afe <_strtol_l.isra.0+0xb8>
 8003ab6:	1c7b      	adds	r3, r7, #1
 8003ab8:	d007      	beq.n	8003aca <_strtol_l.isra.0+0x84>
 8003aba:	4584      	cmp	ip, r0
 8003abc:	d31c      	bcc.n	8003af8 <_strtol_l.isra.0+0xb2>
 8003abe:	d101      	bne.n	8003ac4 <_strtol_l.isra.0+0x7e>
 8003ac0:	45a6      	cmp	lr, r4
 8003ac2:	db19      	blt.n	8003af8 <_strtol_l.isra.0+0xb2>
 8003ac4:	2701      	movs	r7, #1
 8003ac6:	fb00 4006 	mla	r0, r0, r6, r4
 8003aca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ace:	e7eb      	b.n	8003aa8 <_strtol_l.isra.0+0x62>
 8003ad0:	462f      	mov	r7, r5
 8003ad2:	e7bf      	b.n	8003a54 <_strtol_l.isra.0+0xe>
 8003ad4:	2c2b      	cmp	r4, #43	; 0x2b
 8003ad6:	bf04      	itt	eq
 8003ad8:	1cbd      	addeq	r5, r7, #2
 8003ada:	787c      	ldrbeq	r4, [r7, #1]
 8003adc:	461a      	mov	r2, r3
 8003ade:	e7c9      	b.n	8003a74 <_strtol_l.isra.0+0x2e>
 8003ae0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003ae4:	2b19      	cmp	r3, #25
 8003ae6:	d801      	bhi.n	8003aec <_strtol_l.isra.0+0xa6>
 8003ae8:	3c37      	subs	r4, #55	; 0x37
 8003aea:	e7e2      	b.n	8003ab2 <_strtol_l.isra.0+0x6c>
 8003aec:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003af0:	2b19      	cmp	r3, #25
 8003af2:	d804      	bhi.n	8003afe <_strtol_l.isra.0+0xb8>
 8003af4:	3c57      	subs	r4, #87	; 0x57
 8003af6:	e7dc      	b.n	8003ab2 <_strtol_l.isra.0+0x6c>
 8003af8:	f04f 37ff 	mov.w	r7, #4294967295
 8003afc:	e7e5      	b.n	8003aca <_strtol_l.isra.0+0x84>
 8003afe:	1c7b      	adds	r3, r7, #1
 8003b00:	d108      	bne.n	8003b14 <_strtol_l.isra.0+0xce>
 8003b02:	2322      	movs	r3, #34	; 0x22
 8003b04:	4608      	mov	r0, r1
 8003b06:	f8c8 3000 	str.w	r3, [r8]
 8003b0a:	f1ba 0f00 	cmp.w	sl, #0
 8003b0e:	d107      	bne.n	8003b20 <_strtol_l.isra.0+0xda>
 8003b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b14:	b102      	cbz	r2, 8003b18 <_strtol_l.isra.0+0xd2>
 8003b16:	4240      	negs	r0, r0
 8003b18:	f1ba 0f00 	cmp.w	sl, #0
 8003b1c:	d0f8      	beq.n	8003b10 <_strtol_l.isra.0+0xca>
 8003b1e:	b10f      	cbz	r7, 8003b24 <_strtol_l.isra.0+0xde>
 8003b20:	f105 39ff 	add.w	r9, r5, #4294967295
 8003b24:	f8ca 9000 	str.w	r9, [sl]
 8003b28:	e7f2      	b.n	8003b10 <_strtol_l.isra.0+0xca>
 8003b2a:	2430      	movs	r4, #48	; 0x30
 8003b2c:	2e00      	cmp	r6, #0
 8003b2e:	d1af      	bne.n	8003a90 <_strtol_l.isra.0+0x4a>
 8003b30:	2608      	movs	r6, #8
 8003b32:	e7ad      	b.n	8003a90 <_strtol_l.isra.0+0x4a>
 8003b34:	2c30      	cmp	r4, #48	; 0x30
 8003b36:	d0a3      	beq.n	8003a80 <_strtol_l.isra.0+0x3a>
 8003b38:	260a      	movs	r6, #10
 8003b3a:	e7a9      	b.n	8003a90 <_strtol_l.isra.0+0x4a>

08003b3c <strtol>:
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <strtol+0x24>)
 8003b3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b40:	681c      	ldr	r4, [r3, #0]
 8003b42:	4d08      	ldr	r5, [pc, #32]	; (8003b64 <strtol+0x28>)
 8003b44:	6a23      	ldr	r3, [r4, #32]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bf08      	it	eq
 8003b4a:	462b      	moveq	r3, r5
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	460a      	mov	r2, r1
 8003b52:	4601      	mov	r1, r0
 8003b54:	4620      	mov	r0, r4
 8003b56:	f7ff ff76 	bl	8003a46 <_strtol_l.isra.0>
 8003b5a:	b003      	add	sp, #12
 8003b5c:	bd30      	pop	{r4, r5, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000024 	.word	0x20000024
 8003b64:	20000088 	.word	0x20000088

08003b68 <__locale_ctype_ptr_l>:
 8003b68:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003b6c:	4770      	bx	lr

08003b6e <__ascii_mbtowc>:
 8003b6e:	b082      	sub	sp, #8
 8003b70:	b901      	cbnz	r1, 8003b74 <__ascii_mbtowc+0x6>
 8003b72:	a901      	add	r1, sp, #4
 8003b74:	b142      	cbz	r2, 8003b88 <__ascii_mbtowc+0x1a>
 8003b76:	b14b      	cbz	r3, 8003b8c <__ascii_mbtowc+0x1e>
 8003b78:	7813      	ldrb	r3, [r2, #0]
 8003b7a:	600b      	str	r3, [r1, #0]
 8003b7c:	7812      	ldrb	r2, [r2, #0]
 8003b7e:	1c10      	adds	r0, r2, #0
 8003b80:	bf18      	it	ne
 8003b82:	2001      	movne	r0, #1
 8003b84:	b002      	add	sp, #8
 8003b86:	4770      	bx	lr
 8003b88:	4610      	mov	r0, r2
 8003b8a:	e7fb      	b.n	8003b84 <__ascii_mbtowc+0x16>
 8003b8c:	f06f 0001 	mvn.w	r0, #1
 8003b90:	e7f8      	b.n	8003b84 <__ascii_mbtowc+0x16>
	...

08003b94 <_malloc_r>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	1ccd      	adds	r5, r1, #3
 8003b98:	f025 0503 	bic.w	r5, r5, #3
 8003b9c:	3508      	adds	r5, #8
 8003b9e:	2d0c      	cmp	r5, #12
 8003ba0:	bf38      	it	cc
 8003ba2:	250c      	movcc	r5, #12
 8003ba4:	2d00      	cmp	r5, #0
 8003ba6:	4606      	mov	r6, r0
 8003ba8:	db01      	blt.n	8003bae <_malloc_r+0x1a>
 8003baa:	42a9      	cmp	r1, r5
 8003bac:	d903      	bls.n	8003bb6 <_malloc_r+0x22>
 8003bae:	230c      	movs	r3, #12
 8003bb0:	6033      	str	r3, [r6, #0]
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	bd70      	pop	{r4, r5, r6, pc}
 8003bb6:	f000 fb96 	bl	80042e6 <__malloc_lock>
 8003bba:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <_malloc_r+0xac>)
 8003bbc:	6814      	ldr	r4, [r2, #0]
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	b991      	cbnz	r1, 8003be8 <_malloc_r+0x54>
 8003bc2:	4c20      	ldr	r4, [pc, #128]	; (8003c44 <_malloc_r+0xb0>)
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	b91b      	cbnz	r3, 8003bd0 <_malloc_r+0x3c>
 8003bc8:	4630      	mov	r0, r6
 8003bca:	f000 fb3d 	bl	8004248 <_sbrk_r>
 8003bce:	6020      	str	r0, [r4, #0]
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	f000 fb38 	bl	8004248 <_sbrk_r>
 8003bd8:	1c43      	adds	r3, r0, #1
 8003bda:	d124      	bne.n	8003c26 <_malloc_r+0x92>
 8003bdc:	230c      	movs	r3, #12
 8003bde:	4630      	mov	r0, r6
 8003be0:	6033      	str	r3, [r6, #0]
 8003be2:	f000 fb81 	bl	80042e8 <__malloc_unlock>
 8003be6:	e7e4      	b.n	8003bb2 <_malloc_r+0x1e>
 8003be8:	680b      	ldr	r3, [r1, #0]
 8003bea:	1b5b      	subs	r3, r3, r5
 8003bec:	d418      	bmi.n	8003c20 <_malloc_r+0x8c>
 8003bee:	2b0b      	cmp	r3, #11
 8003bf0:	d90f      	bls.n	8003c12 <_malloc_r+0x7e>
 8003bf2:	600b      	str	r3, [r1, #0]
 8003bf4:	18cc      	adds	r4, r1, r3
 8003bf6:	50cd      	str	r5, [r1, r3]
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	f000 fb75 	bl	80042e8 <__malloc_unlock>
 8003bfe:	f104 000b 	add.w	r0, r4, #11
 8003c02:	1d23      	adds	r3, r4, #4
 8003c04:	f020 0007 	bic.w	r0, r0, #7
 8003c08:	1ac3      	subs	r3, r0, r3
 8003c0a:	d0d3      	beq.n	8003bb4 <_malloc_r+0x20>
 8003c0c:	425a      	negs	r2, r3
 8003c0e:	50e2      	str	r2, [r4, r3]
 8003c10:	e7d0      	b.n	8003bb4 <_malloc_r+0x20>
 8003c12:	684b      	ldr	r3, [r1, #4]
 8003c14:	428c      	cmp	r4, r1
 8003c16:	bf16      	itet	ne
 8003c18:	6063      	strne	r3, [r4, #4]
 8003c1a:	6013      	streq	r3, [r2, #0]
 8003c1c:	460c      	movne	r4, r1
 8003c1e:	e7eb      	b.n	8003bf8 <_malloc_r+0x64>
 8003c20:	460c      	mov	r4, r1
 8003c22:	6849      	ldr	r1, [r1, #4]
 8003c24:	e7cc      	b.n	8003bc0 <_malloc_r+0x2c>
 8003c26:	1cc4      	adds	r4, r0, #3
 8003c28:	f024 0403 	bic.w	r4, r4, #3
 8003c2c:	42a0      	cmp	r0, r4
 8003c2e:	d005      	beq.n	8003c3c <_malloc_r+0xa8>
 8003c30:	1a21      	subs	r1, r4, r0
 8003c32:	4630      	mov	r0, r6
 8003c34:	f000 fb08 	bl	8004248 <_sbrk_r>
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d0cf      	beq.n	8003bdc <_malloc_r+0x48>
 8003c3c:	6025      	str	r5, [r4, #0]
 8003c3e:	e7db      	b.n	8003bf8 <_malloc_r+0x64>
 8003c40:	20000230 	.word	0x20000230
 8003c44:	20000234 	.word	0x20000234

08003c48 <_realloc_r>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	4607      	mov	r7, r0
 8003c4c:	4614      	mov	r4, r2
 8003c4e:	460e      	mov	r6, r1
 8003c50:	b921      	cbnz	r1, 8003c5c <_realloc_r+0x14>
 8003c52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c56:	4611      	mov	r1, r2
 8003c58:	f7ff bf9c 	b.w	8003b94 <_malloc_r>
 8003c5c:	b922      	cbnz	r2, 8003c68 <_realloc_r+0x20>
 8003c5e:	f000 fb45 	bl	80042ec <_free_r>
 8003c62:	4625      	mov	r5, r4
 8003c64:	4628      	mov	r0, r5
 8003c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c68:	f000 fb8c 	bl	8004384 <_malloc_usable_size_r>
 8003c6c:	42a0      	cmp	r0, r4
 8003c6e:	d20f      	bcs.n	8003c90 <_realloc_r+0x48>
 8003c70:	4621      	mov	r1, r4
 8003c72:	4638      	mov	r0, r7
 8003c74:	f7ff ff8e 	bl	8003b94 <_malloc_r>
 8003c78:	4605      	mov	r5, r0
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d0f2      	beq.n	8003c64 <_realloc_r+0x1c>
 8003c7e:	4631      	mov	r1, r6
 8003c80:	4622      	mov	r2, r4
 8003c82:	f000 fb0c 	bl	800429e <memcpy>
 8003c86:	4631      	mov	r1, r6
 8003c88:	4638      	mov	r0, r7
 8003c8a:	f000 fb2f 	bl	80042ec <_free_r>
 8003c8e:	e7e9      	b.n	8003c64 <_realloc_r+0x1c>
 8003c90:	4635      	mov	r5, r6
 8003c92:	e7e7      	b.n	8003c64 <_realloc_r+0x1c>

08003c94 <__ssputs_r>:
 8003c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c98:	688e      	ldr	r6, [r1, #8]
 8003c9a:	4682      	mov	sl, r0
 8003c9c:	429e      	cmp	r6, r3
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	4690      	mov	r8, r2
 8003ca2:	4699      	mov	r9, r3
 8003ca4:	d837      	bhi.n	8003d16 <__ssputs_r+0x82>
 8003ca6:	898a      	ldrh	r2, [r1, #12]
 8003ca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cac:	d031      	beq.n	8003d12 <__ssputs_r+0x7e>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	6825      	ldr	r5, [r4, #0]
 8003cb2:	6909      	ldr	r1, [r1, #16]
 8003cb4:	1a6f      	subs	r7, r5, r1
 8003cb6:	6965      	ldr	r5, [r4, #20]
 8003cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cbc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003cc0:	f109 0301 	add.w	r3, r9, #1
 8003cc4:	443b      	add	r3, r7
 8003cc6:	429d      	cmp	r5, r3
 8003cc8:	bf38      	it	cc
 8003cca:	461d      	movcc	r5, r3
 8003ccc:	0553      	lsls	r3, r2, #21
 8003cce:	d530      	bpl.n	8003d32 <__ssputs_r+0x9e>
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	f7ff ff5f 	bl	8003b94 <_malloc_r>
 8003cd6:	4606      	mov	r6, r0
 8003cd8:	b950      	cbnz	r0, 8003cf0 <__ssputs_r+0x5c>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	f8ca 3000 	str.w	r3, [sl]
 8003ce4:	89a3      	ldrh	r3, [r4, #12]
 8003ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cea:	81a3      	strh	r3, [r4, #12]
 8003cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf0:	463a      	mov	r2, r7
 8003cf2:	6921      	ldr	r1, [r4, #16]
 8003cf4:	f000 fad3 	bl	800429e <memcpy>
 8003cf8:	89a3      	ldrh	r3, [r4, #12]
 8003cfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	6126      	str	r6, [r4, #16]
 8003d06:	443e      	add	r6, r7
 8003d08:	6026      	str	r6, [r4, #0]
 8003d0a:	464e      	mov	r6, r9
 8003d0c:	6165      	str	r5, [r4, #20]
 8003d0e:	1bed      	subs	r5, r5, r7
 8003d10:	60a5      	str	r5, [r4, #8]
 8003d12:	454e      	cmp	r6, r9
 8003d14:	d900      	bls.n	8003d18 <__ssputs_r+0x84>
 8003d16:	464e      	mov	r6, r9
 8003d18:	4632      	mov	r2, r6
 8003d1a:	4641      	mov	r1, r8
 8003d1c:	6820      	ldr	r0, [r4, #0]
 8003d1e:	f000 fac9 	bl	80042b4 <memmove>
 8003d22:	68a3      	ldr	r3, [r4, #8]
 8003d24:	2000      	movs	r0, #0
 8003d26:	1b9b      	subs	r3, r3, r6
 8003d28:	60a3      	str	r3, [r4, #8]
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	441e      	add	r6, r3
 8003d2e:	6026      	str	r6, [r4, #0]
 8003d30:	e7dc      	b.n	8003cec <__ssputs_r+0x58>
 8003d32:	462a      	mov	r2, r5
 8003d34:	f7ff ff88 	bl	8003c48 <_realloc_r>
 8003d38:	4606      	mov	r6, r0
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d1e2      	bne.n	8003d04 <__ssputs_r+0x70>
 8003d3e:	6921      	ldr	r1, [r4, #16]
 8003d40:	4650      	mov	r0, sl
 8003d42:	f000 fad3 	bl	80042ec <_free_r>
 8003d46:	e7c8      	b.n	8003cda <__ssputs_r+0x46>

08003d48 <_svfiprintf_r>:
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	461d      	mov	r5, r3
 8003d4e:	898b      	ldrh	r3, [r1, #12]
 8003d50:	b09d      	sub	sp, #116	; 0x74
 8003d52:	061f      	lsls	r7, r3, #24
 8003d54:	4680      	mov	r8, r0
 8003d56:	460c      	mov	r4, r1
 8003d58:	4616      	mov	r6, r2
 8003d5a:	d50f      	bpl.n	8003d7c <_svfiprintf_r+0x34>
 8003d5c:	690b      	ldr	r3, [r1, #16]
 8003d5e:	b96b      	cbnz	r3, 8003d7c <_svfiprintf_r+0x34>
 8003d60:	2140      	movs	r1, #64	; 0x40
 8003d62:	f7ff ff17 	bl	8003b94 <_malloc_r>
 8003d66:	6020      	str	r0, [r4, #0]
 8003d68:	6120      	str	r0, [r4, #16]
 8003d6a:	b928      	cbnz	r0, 8003d78 <_svfiprintf_r+0x30>
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	f8c8 3000 	str.w	r3, [r8]
 8003d72:	f04f 30ff 	mov.w	r0, #4294967295
 8003d76:	e0c8      	b.n	8003f0a <_svfiprintf_r+0x1c2>
 8003d78:	2340      	movs	r3, #64	; 0x40
 8003d7a:	6163      	str	r3, [r4, #20]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d80:	2320      	movs	r3, #32
 8003d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d86:	2330      	movs	r3, #48	; 0x30
 8003d88:	f04f 0b01 	mov.w	fp, #1
 8003d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d90:	9503      	str	r5, [sp, #12]
 8003d92:	4637      	mov	r7, r6
 8003d94:	463d      	mov	r5, r7
 8003d96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d9a:	b10b      	cbz	r3, 8003da0 <_svfiprintf_r+0x58>
 8003d9c:	2b25      	cmp	r3, #37	; 0x25
 8003d9e:	d13e      	bne.n	8003e1e <_svfiprintf_r+0xd6>
 8003da0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003da4:	d00b      	beq.n	8003dbe <_svfiprintf_r+0x76>
 8003da6:	4653      	mov	r3, sl
 8003da8:	4632      	mov	r2, r6
 8003daa:	4621      	mov	r1, r4
 8003dac:	4640      	mov	r0, r8
 8003dae:	f7ff ff71 	bl	8003c94 <__ssputs_r>
 8003db2:	3001      	adds	r0, #1
 8003db4:	f000 80a4 	beq.w	8003f00 <_svfiprintf_r+0x1b8>
 8003db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dba:	4453      	add	r3, sl
 8003dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dbe:	783b      	ldrb	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 809d 	beq.w	8003f00 <_svfiprintf_r+0x1b8>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dd0:	9304      	str	r3, [sp, #16]
 8003dd2:	9307      	str	r3, [sp, #28]
 8003dd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dd8:	931a      	str	r3, [sp, #104]	; 0x68
 8003dda:	462f      	mov	r7, r5
 8003ddc:	2205      	movs	r2, #5
 8003dde:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003de2:	4850      	ldr	r0, [pc, #320]	; (8003f24 <_svfiprintf_r+0x1dc>)
 8003de4:	f000 fa4d 	bl	8004282 <memchr>
 8003de8:	9b04      	ldr	r3, [sp, #16]
 8003dea:	b9d0      	cbnz	r0, 8003e22 <_svfiprintf_r+0xda>
 8003dec:	06d9      	lsls	r1, r3, #27
 8003dee:	bf44      	itt	mi
 8003df0:	2220      	movmi	r2, #32
 8003df2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003df6:	071a      	lsls	r2, r3, #28
 8003df8:	bf44      	itt	mi
 8003dfa:	222b      	movmi	r2, #43	; 0x2b
 8003dfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e00:	782a      	ldrb	r2, [r5, #0]
 8003e02:	2a2a      	cmp	r2, #42	; 0x2a
 8003e04:	d015      	beq.n	8003e32 <_svfiprintf_r+0xea>
 8003e06:	462f      	mov	r7, r5
 8003e08:	2000      	movs	r0, #0
 8003e0a:	250a      	movs	r5, #10
 8003e0c:	9a07      	ldr	r2, [sp, #28]
 8003e0e:	4639      	mov	r1, r7
 8003e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e14:	3b30      	subs	r3, #48	; 0x30
 8003e16:	2b09      	cmp	r3, #9
 8003e18:	d94d      	bls.n	8003eb6 <_svfiprintf_r+0x16e>
 8003e1a:	b1b8      	cbz	r0, 8003e4c <_svfiprintf_r+0x104>
 8003e1c:	e00f      	b.n	8003e3e <_svfiprintf_r+0xf6>
 8003e1e:	462f      	mov	r7, r5
 8003e20:	e7b8      	b.n	8003d94 <_svfiprintf_r+0x4c>
 8003e22:	4a40      	ldr	r2, [pc, #256]	; (8003f24 <_svfiprintf_r+0x1dc>)
 8003e24:	463d      	mov	r5, r7
 8003e26:	1a80      	subs	r0, r0, r2
 8003e28:	fa0b f000 	lsl.w	r0, fp, r0
 8003e2c:	4318      	orrs	r0, r3
 8003e2e:	9004      	str	r0, [sp, #16]
 8003e30:	e7d3      	b.n	8003dda <_svfiprintf_r+0x92>
 8003e32:	9a03      	ldr	r2, [sp, #12]
 8003e34:	1d11      	adds	r1, r2, #4
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	9103      	str	r1, [sp, #12]
 8003e3a:	2a00      	cmp	r2, #0
 8003e3c:	db01      	blt.n	8003e42 <_svfiprintf_r+0xfa>
 8003e3e:	9207      	str	r2, [sp, #28]
 8003e40:	e004      	b.n	8003e4c <_svfiprintf_r+0x104>
 8003e42:	4252      	negs	r2, r2
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	9207      	str	r2, [sp, #28]
 8003e4a:	9304      	str	r3, [sp, #16]
 8003e4c:	783b      	ldrb	r3, [r7, #0]
 8003e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e50:	d10c      	bne.n	8003e6c <_svfiprintf_r+0x124>
 8003e52:	787b      	ldrb	r3, [r7, #1]
 8003e54:	2b2a      	cmp	r3, #42	; 0x2a
 8003e56:	d133      	bne.n	8003ec0 <_svfiprintf_r+0x178>
 8003e58:	9b03      	ldr	r3, [sp, #12]
 8003e5a:	3702      	adds	r7, #2
 8003e5c:	1d1a      	adds	r2, r3, #4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	9203      	str	r2, [sp, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bfb8      	it	lt
 8003e66:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e6a:	9305      	str	r3, [sp, #20]
 8003e6c:	4d2e      	ldr	r5, [pc, #184]	; (8003f28 <_svfiprintf_r+0x1e0>)
 8003e6e:	2203      	movs	r2, #3
 8003e70:	7839      	ldrb	r1, [r7, #0]
 8003e72:	4628      	mov	r0, r5
 8003e74:	f000 fa05 	bl	8004282 <memchr>
 8003e78:	b138      	cbz	r0, 8003e8a <_svfiprintf_r+0x142>
 8003e7a:	2340      	movs	r3, #64	; 0x40
 8003e7c:	1b40      	subs	r0, r0, r5
 8003e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8003e82:	9b04      	ldr	r3, [sp, #16]
 8003e84:	3701      	adds	r7, #1
 8003e86:	4303      	orrs	r3, r0
 8003e88:	9304      	str	r3, [sp, #16]
 8003e8a:	7839      	ldrb	r1, [r7, #0]
 8003e8c:	2206      	movs	r2, #6
 8003e8e:	4827      	ldr	r0, [pc, #156]	; (8003f2c <_svfiprintf_r+0x1e4>)
 8003e90:	1c7e      	adds	r6, r7, #1
 8003e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e96:	f000 f9f4 	bl	8004282 <memchr>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d038      	beq.n	8003f10 <_svfiprintf_r+0x1c8>
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <_svfiprintf_r+0x1e8>)
 8003ea0:	bb13      	cbnz	r3, 8003ee8 <_svfiprintf_r+0x1a0>
 8003ea2:	9b03      	ldr	r3, [sp, #12]
 8003ea4:	3307      	adds	r3, #7
 8003ea6:	f023 0307 	bic.w	r3, r3, #7
 8003eaa:	3308      	adds	r3, #8
 8003eac:	9303      	str	r3, [sp, #12]
 8003eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb0:	444b      	add	r3, r9
 8003eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb4:	e76d      	b.n	8003d92 <_svfiprintf_r+0x4a>
 8003eb6:	fb05 3202 	mla	r2, r5, r2, r3
 8003eba:	2001      	movs	r0, #1
 8003ebc:	460f      	mov	r7, r1
 8003ebe:	e7a6      	b.n	8003e0e <_svfiprintf_r+0xc6>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	250a      	movs	r5, #10
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	3701      	adds	r7, #1
 8003ec8:	9305      	str	r3, [sp, #20]
 8003eca:	4638      	mov	r0, r7
 8003ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ed0:	3a30      	subs	r2, #48	; 0x30
 8003ed2:	2a09      	cmp	r2, #9
 8003ed4:	d903      	bls.n	8003ede <_svfiprintf_r+0x196>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0c8      	beq.n	8003e6c <_svfiprintf_r+0x124>
 8003eda:	9105      	str	r1, [sp, #20]
 8003edc:	e7c6      	b.n	8003e6c <_svfiprintf_r+0x124>
 8003ede:	fb05 2101 	mla	r1, r5, r1, r2
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	e7f0      	b.n	8003eca <_svfiprintf_r+0x182>
 8003ee8:	ab03      	add	r3, sp, #12
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	4622      	mov	r2, r4
 8003eee:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <_svfiprintf_r+0x1ec>)
 8003ef0:	a904      	add	r1, sp, #16
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	f3af 8000 	nop.w
 8003ef8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003efc:	4681      	mov	r9, r0
 8003efe:	d1d6      	bne.n	8003eae <_svfiprintf_r+0x166>
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	065b      	lsls	r3, r3, #25
 8003f04:	f53f af35 	bmi.w	8003d72 <_svfiprintf_r+0x2a>
 8003f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f0a:	b01d      	add	sp, #116	; 0x74
 8003f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f10:	ab03      	add	r3, sp, #12
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	4622      	mov	r2, r4
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <_svfiprintf_r+0x1ec>)
 8003f18:	a904      	add	r1, sp, #16
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	f000 f882 	bl	8004024 <_printf_i>
 8003f20:	e7ea      	b.n	8003ef8 <_svfiprintf_r+0x1b0>
 8003f22:	bf00      	nop
 8003f24:	080043c8 	.word	0x080043c8
 8003f28:	080043ce 	.word	0x080043ce
 8003f2c:	080043d2 	.word	0x080043d2
 8003f30:	00000000 	.word	0x00000000
 8003f34:	08003c95 	.word	0x08003c95

08003f38 <_printf_common>:
 8003f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3c:	4691      	mov	r9, r2
 8003f3e:	461f      	mov	r7, r3
 8003f40:	688a      	ldr	r2, [r1, #8]
 8003f42:	690b      	ldr	r3, [r1, #16]
 8003f44:	4606      	mov	r6, r0
 8003f46:	4293      	cmp	r3, r2
 8003f48:	bfb8      	it	lt
 8003f4a:	4613      	movlt	r3, r2
 8003f4c:	f8c9 3000 	str.w	r3, [r9]
 8003f50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f54:	460c      	mov	r4, r1
 8003f56:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f5a:	b112      	cbz	r2, 8003f62 <_printf_common+0x2a>
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f8c9 3000 	str.w	r3, [r9]
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	0699      	lsls	r1, r3, #26
 8003f66:	bf42      	ittt	mi
 8003f68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f6c:	3302      	addmi	r3, #2
 8003f6e:	f8c9 3000 	strmi.w	r3, [r9]
 8003f72:	6825      	ldr	r5, [r4, #0]
 8003f74:	f015 0506 	ands.w	r5, r5, #6
 8003f78:	d107      	bne.n	8003f8a <_printf_common+0x52>
 8003f7a:	f104 0a19 	add.w	sl, r4, #25
 8003f7e:	68e3      	ldr	r3, [r4, #12]
 8003f80:	f8d9 2000 	ldr.w	r2, [r9]
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	42ab      	cmp	r3, r5
 8003f88:	dc29      	bgt.n	8003fde <_printf_common+0xa6>
 8003f8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	3300      	adds	r3, #0
 8003f92:	bf18      	it	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	0692      	lsls	r2, r2, #26
 8003f98:	d42e      	bmi.n	8003ff8 <_printf_common+0xc0>
 8003f9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	47c0      	blx	r8
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d021      	beq.n	8003fec <_printf_common+0xb4>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	68e5      	ldr	r5, [r4, #12]
 8003fac:	f003 0306 	and.w	r3, r3, #6
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	bf18      	it	ne
 8003fb4:	2500      	movne	r5, #0
 8003fb6:	f8d9 2000 	ldr.w	r2, [r9]
 8003fba:	f04f 0900 	mov.w	r9, #0
 8003fbe:	bf08      	it	eq
 8003fc0:	1aad      	subeq	r5, r5, r2
 8003fc2:	68a3      	ldr	r3, [r4, #8]
 8003fc4:	6922      	ldr	r2, [r4, #16]
 8003fc6:	bf08      	it	eq
 8003fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	bfc4      	itt	gt
 8003fd0:	1a9b      	subgt	r3, r3, r2
 8003fd2:	18ed      	addgt	r5, r5, r3
 8003fd4:	341a      	adds	r4, #26
 8003fd6:	454d      	cmp	r5, r9
 8003fd8:	d11a      	bne.n	8004010 <_printf_common+0xd8>
 8003fda:	2000      	movs	r0, #0
 8003fdc:	e008      	b.n	8003ff0 <_printf_common+0xb8>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4652      	mov	r2, sl
 8003fe2:	4639      	mov	r1, r7
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	47c0      	blx	r8
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d103      	bne.n	8003ff4 <_printf_common+0xbc>
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff4:	3501      	adds	r5, #1
 8003ff6:	e7c2      	b.n	8003f7e <_printf_common+0x46>
 8003ff8:	2030      	movs	r0, #48	; 0x30
 8003ffa:	18e1      	adds	r1, r4, r3
 8003ffc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004006:	4422      	add	r2, r4
 8004008:	3302      	adds	r3, #2
 800400a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800400e:	e7c4      	b.n	8003f9a <_printf_common+0x62>
 8004010:	2301      	movs	r3, #1
 8004012:	4622      	mov	r2, r4
 8004014:	4639      	mov	r1, r7
 8004016:	4630      	mov	r0, r6
 8004018:	47c0      	blx	r8
 800401a:	3001      	adds	r0, #1
 800401c:	d0e6      	beq.n	8003fec <_printf_common+0xb4>
 800401e:	f109 0901 	add.w	r9, r9, #1
 8004022:	e7d8      	b.n	8003fd6 <_printf_common+0x9e>

08004024 <_printf_i>:
 8004024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004028:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800402c:	460c      	mov	r4, r1
 800402e:	7e09      	ldrb	r1, [r1, #24]
 8004030:	b085      	sub	sp, #20
 8004032:	296e      	cmp	r1, #110	; 0x6e
 8004034:	4617      	mov	r7, r2
 8004036:	4606      	mov	r6, r0
 8004038:	4698      	mov	r8, r3
 800403a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800403c:	f000 80b3 	beq.w	80041a6 <_printf_i+0x182>
 8004040:	d822      	bhi.n	8004088 <_printf_i+0x64>
 8004042:	2963      	cmp	r1, #99	; 0x63
 8004044:	d036      	beq.n	80040b4 <_printf_i+0x90>
 8004046:	d80a      	bhi.n	800405e <_printf_i+0x3a>
 8004048:	2900      	cmp	r1, #0
 800404a:	f000 80b9 	beq.w	80041c0 <_printf_i+0x19c>
 800404e:	2958      	cmp	r1, #88	; 0x58
 8004050:	f000 8083 	beq.w	800415a <_printf_i+0x136>
 8004054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004058:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800405c:	e032      	b.n	80040c4 <_printf_i+0xa0>
 800405e:	2964      	cmp	r1, #100	; 0x64
 8004060:	d001      	beq.n	8004066 <_printf_i+0x42>
 8004062:	2969      	cmp	r1, #105	; 0x69
 8004064:	d1f6      	bne.n	8004054 <_printf_i+0x30>
 8004066:	6820      	ldr	r0, [r4, #0]
 8004068:	6813      	ldr	r3, [r2, #0]
 800406a:	0605      	lsls	r5, r0, #24
 800406c:	f103 0104 	add.w	r1, r3, #4
 8004070:	d52a      	bpl.n	80040c8 <_printf_i+0xa4>
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6011      	str	r1, [r2, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	da03      	bge.n	8004082 <_printf_i+0x5e>
 800407a:	222d      	movs	r2, #45	; 0x2d
 800407c:	425b      	negs	r3, r3
 800407e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004082:	486f      	ldr	r0, [pc, #444]	; (8004240 <_printf_i+0x21c>)
 8004084:	220a      	movs	r2, #10
 8004086:	e039      	b.n	80040fc <_printf_i+0xd8>
 8004088:	2973      	cmp	r1, #115	; 0x73
 800408a:	f000 809d 	beq.w	80041c8 <_printf_i+0x1a4>
 800408e:	d808      	bhi.n	80040a2 <_printf_i+0x7e>
 8004090:	296f      	cmp	r1, #111	; 0x6f
 8004092:	d020      	beq.n	80040d6 <_printf_i+0xb2>
 8004094:	2970      	cmp	r1, #112	; 0x70
 8004096:	d1dd      	bne.n	8004054 <_printf_i+0x30>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	f043 0320 	orr.w	r3, r3, #32
 800409e:	6023      	str	r3, [r4, #0]
 80040a0:	e003      	b.n	80040aa <_printf_i+0x86>
 80040a2:	2975      	cmp	r1, #117	; 0x75
 80040a4:	d017      	beq.n	80040d6 <_printf_i+0xb2>
 80040a6:	2978      	cmp	r1, #120	; 0x78
 80040a8:	d1d4      	bne.n	8004054 <_printf_i+0x30>
 80040aa:	2378      	movs	r3, #120	; 0x78
 80040ac:	4865      	ldr	r0, [pc, #404]	; (8004244 <_printf_i+0x220>)
 80040ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040b2:	e055      	b.n	8004160 <_printf_i+0x13c>
 80040b4:	6813      	ldr	r3, [r2, #0]
 80040b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ba:	1d19      	adds	r1, r3, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6011      	str	r1, [r2, #0]
 80040c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c4:	2301      	movs	r3, #1
 80040c6:	e08c      	b.n	80041e2 <_printf_i+0x1be>
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040ce:	6011      	str	r1, [r2, #0]
 80040d0:	bf18      	it	ne
 80040d2:	b21b      	sxthne	r3, r3
 80040d4:	e7cf      	b.n	8004076 <_printf_i+0x52>
 80040d6:	6813      	ldr	r3, [r2, #0]
 80040d8:	6825      	ldr	r5, [r4, #0]
 80040da:	1d18      	adds	r0, r3, #4
 80040dc:	6010      	str	r0, [r2, #0]
 80040de:	0628      	lsls	r0, r5, #24
 80040e0:	d501      	bpl.n	80040e6 <_printf_i+0xc2>
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	e002      	b.n	80040ec <_printf_i+0xc8>
 80040e6:	0668      	lsls	r0, r5, #25
 80040e8:	d5fb      	bpl.n	80040e2 <_printf_i+0xbe>
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	296f      	cmp	r1, #111	; 0x6f
 80040ee:	bf14      	ite	ne
 80040f0:	220a      	movne	r2, #10
 80040f2:	2208      	moveq	r2, #8
 80040f4:	4852      	ldr	r0, [pc, #328]	; (8004240 <_printf_i+0x21c>)
 80040f6:	2100      	movs	r1, #0
 80040f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040fc:	6865      	ldr	r5, [r4, #4]
 80040fe:	2d00      	cmp	r5, #0
 8004100:	60a5      	str	r5, [r4, #8]
 8004102:	f2c0 8095 	blt.w	8004230 <_printf_i+0x20c>
 8004106:	6821      	ldr	r1, [r4, #0]
 8004108:	f021 0104 	bic.w	r1, r1, #4
 800410c:	6021      	str	r1, [r4, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d13d      	bne.n	800418e <_printf_i+0x16a>
 8004112:	2d00      	cmp	r5, #0
 8004114:	f040 808e 	bne.w	8004234 <_printf_i+0x210>
 8004118:	4665      	mov	r5, ip
 800411a:	2a08      	cmp	r2, #8
 800411c:	d10b      	bne.n	8004136 <_printf_i+0x112>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	07db      	lsls	r3, r3, #31
 8004122:	d508      	bpl.n	8004136 <_printf_i+0x112>
 8004124:	6923      	ldr	r3, [r4, #16]
 8004126:	6862      	ldr	r2, [r4, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	bfde      	ittt	le
 800412c:	2330      	movle	r3, #48	; 0x30
 800412e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004132:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004136:	ebac 0305 	sub.w	r3, ip, r5
 800413a:	6123      	str	r3, [r4, #16]
 800413c:	f8cd 8000 	str.w	r8, [sp]
 8004140:	463b      	mov	r3, r7
 8004142:	aa03      	add	r2, sp, #12
 8004144:	4621      	mov	r1, r4
 8004146:	4630      	mov	r0, r6
 8004148:	f7ff fef6 	bl	8003f38 <_printf_common>
 800414c:	3001      	adds	r0, #1
 800414e:	d14d      	bne.n	80041ec <_printf_i+0x1c8>
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	b005      	add	sp, #20
 8004156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800415a:	4839      	ldr	r0, [pc, #228]	; (8004240 <_printf_i+0x21c>)
 800415c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004160:	6813      	ldr	r3, [r2, #0]
 8004162:	6821      	ldr	r1, [r4, #0]
 8004164:	1d1d      	adds	r5, r3, #4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6015      	str	r5, [r2, #0]
 800416a:	060a      	lsls	r2, r1, #24
 800416c:	d50b      	bpl.n	8004186 <_printf_i+0x162>
 800416e:	07ca      	lsls	r2, r1, #31
 8004170:	bf44      	itt	mi
 8004172:	f041 0120 	orrmi.w	r1, r1, #32
 8004176:	6021      	strmi	r1, [r4, #0]
 8004178:	b91b      	cbnz	r3, 8004182 <_printf_i+0x15e>
 800417a:	6822      	ldr	r2, [r4, #0]
 800417c:	f022 0220 	bic.w	r2, r2, #32
 8004180:	6022      	str	r2, [r4, #0]
 8004182:	2210      	movs	r2, #16
 8004184:	e7b7      	b.n	80040f6 <_printf_i+0xd2>
 8004186:	064d      	lsls	r5, r1, #25
 8004188:	bf48      	it	mi
 800418a:	b29b      	uxthmi	r3, r3
 800418c:	e7ef      	b.n	800416e <_printf_i+0x14a>
 800418e:	4665      	mov	r5, ip
 8004190:	fbb3 f1f2 	udiv	r1, r3, r2
 8004194:	fb02 3311 	mls	r3, r2, r1, r3
 8004198:	5cc3      	ldrb	r3, [r0, r3]
 800419a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800419e:	460b      	mov	r3, r1
 80041a0:	2900      	cmp	r1, #0
 80041a2:	d1f5      	bne.n	8004190 <_printf_i+0x16c>
 80041a4:	e7b9      	b.n	800411a <_printf_i+0xf6>
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	6825      	ldr	r5, [r4, #0]
 80041aa:	1d18      	adds	r0, r3, #4
 80041ac:	6961      	ldr	r1, [r4, #20]
 80041ae:	6010      	str	r0, [r2, #0]
 80041b0:	0628      	lsls	r0, r5, #24
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	d501      	bpl.n	80041ba <_printf_i+0x196>
 80041b6:	6019      	str	r1, [r3, #0]
 80041b8:	e002      	b.n	80041c0 <_printf_i+0x19c>
 80041ba:	066a      	lsls	r2, r5, #25
 80041bc:	d5fb      	bpl.n	80041b6 <_printf_i+0x192>
 80041be:	8019      	strh	r1, [r3, #0]
 80041c0:	2300      	movs	r3, #0
 80041c2:	4665      	mov	r5, ip
 80041c4:	6123      	str	r3, [r4, #16]
 80041c6:	e7b9      	b.n	800413c <_printf_i+0x118>
 80041c8:	6813      	ldr	r3, [r2, #0]
 80041ca:	1d19      	adds	r1, r3, #4
 80041cc:	6011      	str	r1, [r2, #0]
 80041ce:	681d      	ldr	r5, [r3, #0]
 80041d0:	6862      	ldr	r2, [r4, #4]
 80041d2:	2100      	movs	r1, #0
 80041d4:	4628      	mov	r0, r5
 80041d6:	f000 f854 	bl	8004282 <memchr>
 80041da:	b108      	cbz	r0, 80041e0 <_printf_i+0x1bc>
 80041dc:	1b40      	subs	r0, r0, r5
 80041de:	6060      	str	r0, [r4, #4]
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	6123      	str	r3, [r4, #16]
 80041e4:	2300      	movs	r3, #0
 80041e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ea:	e7a7      	b.n	800413c <_printf_i+0x118>
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	462a      	mov	r2, r5
 80041f0:	4639      	mov	r1, r7
 80041f2:	4630      	mov	r0, r6
 80041f4:	47c0      	blx	r8
 80041f6:	3001      	adds	r0, #1
 80041f8:	d0aa      	beq.n	8004150 <_printf_i+0x12c>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	079b      	lsls	r3, r3, #30
 80041fe:	d413      	bmi.n	8004228 <_printf_i+0x204>
 8004200:	68e0      	ldr	r0, [r4, #12]
 8004202:	9b03      	ldr	r3, [sp, #12]
 8004204:	4298      	cmp	r0, r3
 8004206:	bfb8      	it	lt
 8004208:	4618      	movlt	r0, r3
 800420a:	e7a3      	b.n	8004154 <_printf_i+0x130>
 800420c:	2301      	movs	r3, #1
 800420e:	464a      	mov	r2, r9
 8004210:	4639      	mov	r1, r7
 8004212:	4630      	mov	r0, r6
 8004214:	47c0      	blx	r8
 8004216:	3001      	adds	r0, #1
 8004218:	d09a      	beq.n	8004150 <_printf_i+0x12c>
 800421a:	3501      	adds	r5, #1
 800421c:	68e3      	ldr	r3, [r4, #12]
 800421e:	9a03      	ldr	r2, [sp, #12]
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	42ab      	cmp	r3, r5
 8004224:	dcf2      	bgt.n	800420c <_printf_i+0x1e8>
 8004226:	e7eb      	b.n	8004200 <_printf_i+0x1dc>
 8004228:	2500      	movs	r5, #0
 800422a:	f104 0919 	add.w	r9, r4, #25
 800422e:	e7f5      	b.n	800421c <_printf_i+0x1f8>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ac      	bne.n	800418e <_printf_i+0x16a>
 8004234:	7803      	ldrb	r3, [r0, #0]
 8004236:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800423a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423e:	e76c      	b.n	800411a <_printf_i+0xf6>
 8004240:	080043d9 	.word	0x080043d9
 8004244:	080043ea 	.word	0x080043ea

08004248 <_sbrk_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	2300      	movs	r3, #0
 800424c:	4c05      	ldr	r4, [pc, #20]	; (8004264 <_sbrk_r+0x1c>)
 800424e:	4605      	mov	r5, r0
 8004250:	4608      	mov	r0, r1
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	f7fd fbac 	bl	80019b0 <_sbrk>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_sbrk_r+0x1a>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	b103      	cbz	r3, 8004262 <_sbrk_r+0x1a>
 8004260:	602b      	str	r3, [r5, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	20000374 	.word	0x20000374

08004268 <__ascii_wctomb>:
 8004268:	b149      	cbz	r1, 800427e <__ascii_wctomb+0x16>
 800426a:	2aff      	cmp	r2, #255	; 0xff
 800426c:	bf8b      	itete	hi
 800426e:	238a      	movhi	r3, #138	; 0x8a
 8004270:	700a      	strbls	r2, [r1, #0]
 8004272:	6003      	strhi	r3, [r0, #0]
 8004274:	2001      	movls	r0, #1
 8004276:	bf88      	it	hi
 8004278:	f04f 30ff 	movhi.w	r0, #4294967295
 800427c:	4770      	bx	lr
 800427e:	4608      	mov	r0, r1
 8004280:	4770      	bx	lr

08004282 <memchr>:
 8004282:	b510      	push	{r4, lr}
 8004284:	b2c9      	uxtb	r1, r1
 8004286:	4402      	add	r2, r0
 8004288:	4290      	cmp	r0, r2
 800428a:	4603      	mov	r3, r0
 800428c:	d101      	bne.n	8004292 <memchr+0x10>
 800428e:	2300      	movs	r3, #0
 8004290:	e003      	b.n	800429a <memchr+0x18>
 8004292:	781c      	ldrb	r4, [r3, #0]
 8004294:	3001      	adds	r0, #1
 8004296:	428c      	cmp	r4, r1
 8004298:	d1f6      	bne.n	8004288 <memchr+0x6>
 800429a:	4618      	mov	r0, r3
 800429c:	bd10      	pop	{r4, pc}

0800429e <memcpy>:
 800429e:	b510      	push	{r4, lr}
 80042a0:	1e43      	subs	r3, r0, #1
 80042a2:	440a      	add	r2, r1
 80042a4:	4291      	cmp	r1, r2
 80042a6:	d100      	bne.n	80042aa <memcpy+0xc>
 80042a8:	bd10      	pop	{r4, pc}
 80042aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042b2:	e7f7      	b.n	80042a4 <memcpy+0x6>

080042b4 <memmove>:
 80042b4:	4288      	cmp	r0, r1
 80042b6:	b510      	push	{r4, lr}
 80042b8:	eb01 0302 	add.w	r3, r1, r2
 80042bc:	d807      	bhi.n	80042ce <memmove+0x1a>
 80042be:	1e42      	subs	r2, r0, #1
 80042c0:	4299      	cmp	r1, r3
 80042c2:	d00a      	beq.n	80042da <memmove+0x26>
 80042c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80042cc:	e7f8      	b.n	80042c0 <memmove+0xc>
 80042ce:	4283      	cmp	r3, r0
 80042d0:	d9f5      	bls.n	80042be <memmove+0xa>
 80042d2:	1881      	adds	r1, r0, r2
 80042d4:	1ad2      	subs	r2, r2, r3
 80042d6:	42d3      	cmn	r3, r2
 80042d8:	d100      	bne.n	80042dc <memmove+0x28>
 80042da:	bd10      	pop	{r4, pc}
 80042dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80042e4:	e7f7      	b.n	80042d6 <memmove+0x22>

080042e6 <__malloc_lock>:
 80042e6:	4770      	bx	lr

080042e8 <__malloc_unlock>:
 80042e8:	4770      	bx	lr
	...

080042ec <_free_r>:
 80042ec:	b538      	push	{r3, r4, r5, lr}
 80042ee:	4605      	mov	r5, r0
 80042f0:	2900      	cmp	r1, #0
 80042f2:	d043      	beq.n	800437c <_free_r+0x90>
 80042f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042f8:	1f0c      	subs	r4, r1, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bfb8      	it	lt
 80042fe:	18e4      	addlt	r4, r4, r3
 8004300:	f7ff fff1 	bl	80042e6 <__malloc_lock>
 8004304:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <_free_r+0x94>)
 8004306:	6813      	ldr	r3, [r2, #0]
 8004308:	4610      	mov	r0, r2
 800430a:	b933      	cbnz	r3, 800431a <_free_r+0x2e>
 800430c:	6063      	str	r3, [r4, #4]
 800430e:	6014      	str	r4, [r2, #0]
 8004310:	4628      	mov	r0, r5
 8004312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004316:	f7ff bfe7 	b.w	80042e8 <__malloc_unlock>
 800431a:	42a3      	cmp	r3, r4
 800431c:	d90b      	bls.n	8004336 <_free_r+0x4a>
 800431e:	6821      	ldr	r1, [r4, #0]
 8004320:	1862      	adds	r2, r4, r1
 8004322:	4293      	cmp	r3, r2
 8004324:	bf01      	itttt	eq
 8004326:	681a      	ldreq	r2, [r3, #0]
 8004328:	685b      	ldreq	r3, [r3, #4]
 800432a:	1852      	addeq	r2, r2, r1
 800432c:	6022      	streq	r2, [r4, #0]
 800432e:	6063      	str	r3, [r4, #4]
 8004330:	6004      	str	r4, [r0, #0]
 8004332:	e7ed      	b.n	8004310 <_free_r+0x24>
 8004334:	4613      	mov	r3, r2
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	b10a      	cbz	r2, 800433e <_free_r+0x52>
 800433a:	42a2      	cmp	r2, r4
 800433c:	d9fa      	bls.n	8004334 <_free_r+0x48>
 800433e:	6819      	ldr	r1, [r3, #0]
 8004340:	1858      	adds	r0, r3, r1
 8004342:	42a0      	cmp	r0, r4
 8004344:	d10b      	bne.n	800435e <_free_r+0x72>
 8004346:	6820      	ldr	r0, [r4, #0]
 8004348:	4401      	add	r1, r0
 800434a:	1858      	adds	r0, r3, r1
 800434c:	4282      	cmp	r2, r0
 800434e:	6019      	str	r1, [r3, #0]
 8004350:	d1de      	bne.n	8004310 <_free_r+0x24>
 8004352:	6810      	ldr	r0, [r2, #0]
 8004354:	6852      	ldr	r2, [r2, #4]
 8004356:	4401      	add	r1, r0
 8004358:	6019      	str	r1, [r3, #0]
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	e7d8      	b.n	8004310 <_free_r+0x24>
 800435e:	d902      	bls.n	8004366 <_free_r+0x7a>
 8004360:	230c      	movs	r3, #12
 8004362:	602b      	str	r3, [r5, #0]
 8004364:	e7d4      	b.n	8004310 <_free_r+0x24>
 8004366:	6820      	ldr	r0, [r4, #0]
 8004368:	1821      	adds	r1, r4, r0
 800436a:	428a      	cmp	r2, r1
 800436c:	bf01      	itttt	eq
 800436e:	6811      	ldreq	r1, [r2, #0]
 8004370:	6852      	ldreq	r2, [r2, #4]
 8004372:	1809      	addeq	r1, r1, r0
 8004374:	6021      	streq	r1, [r4, #0]
 8004376:	6062      	str	r2, [r4, #4]
 8004378:	605c      	str	r4, [r3, #4]
 800437a:	e7c9      	b.n	8004310 <_free_r+0x24>
 800437c:	bd38      	pop	{r3, r4, r5, pc}
 800437e:	bf00      	nop
 8004380:	20000230 	.word	0x20000230

08004384 <_malloc_usable_size_r>:
 8004384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004388:	1f18      	subs	r0, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	bfbc      	itt	lt
 800438e:	580b      	ldrlt	r3, [r1, r0]
 8004390:	18c0      	addlt	r0, r0, r3
 8004392:	4770      	bx	lr

08004394 <_init>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	bf00      	nop
 8004398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439a:	bc08      	pop	{r3}
 800439c:	469e      	mov	lr, r3
 800439e:	4770      	bx	lr

080043a0 <_fini>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	bf00      	nop
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr
