
BLDC_MOTOR.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002840  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002970  08002970  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002970  08002970  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002970  08002970  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002970  08002970  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000020  08002998  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002998  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000634c  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fd8  00000000  00000000  00026395  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002b8  00000000  00000000  00027370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000230  00000000  00000000  00027628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000030c6  00000000  00000000  00027858  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003c60  00000000  00000000  0002a91e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000acf3  00000000  00000000  0002e57e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00039271  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a20  00000000  00000000  000392ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08002958 	.word	0x08002958

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08002958 	.word	0x08002958

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	d1ed      	bne.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <s1>:
uint8_t hall1state;
uint8_t hall2state;
uint8_t hall3state;

uint32_t adcread;
void s1(){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	hall1state=READ_PIN(GPIOA, pin0);
 800075c:	2100      	movs	r1, #0
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <s1+0x1c>)
 8000760:	f000 fba0 	bl	8000ea4 <READ_PIN>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <s1+0x20>)
 800076a:	701a      	strb	r2, [r3, #0]
	NextStep();
 800076c:	f000 f82a 	bl	80007c4 <NextStep>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40010800 	.word	0x40010800
 8000778:	20000048 	.word	0x20000048

0800077c <s2>:
void s2(){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	hall2state=READ_PIN(GPIOA, pin1);
 8000780:	2101      	movs	r1, #1
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <s2+0x1c>)
 8000784:	f000 fb8e 	bl	8000ea4 <READ_PIN>
 8000788:	4603      	mov	r3, r0
 800078a:	461a      	mov	r2, r3
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <s2+0x20>)
 800078e:	701a      	strb	r2, [r3, #0]
	NextStep();
 8000790:	f000 f818 	bl	80007c4 <NextStep>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40010800 	.word	0x40010800
 800079c:	20000050 	.word	0x20000050

080007a0 <s3>:
void s3(){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	hall3state=READ_PIN(GPIOA, pin2);
 80007a4:	2102      	movs	r1, #2
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <s3+0x1c>)
 80007a8:	f000 fb7c 	bl	8000ea4 <READ_PIN>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <s3+0x20>)
 80007b2:	701a      	strb	r2, [r3, #0]
	NextStep();
 80007b4:	f000 f806 	bl	80007c4 <NextStep>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40010800 	.word	0x40010800
 80007c0:	20000049 	.word	0x20000049

080007c4 <NextStep>:

void NextStep() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	if ((hall1state == 1) && (hall2state == 0) && (hall3state == 1)) {
 80007c8:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <NextStep+0xc0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10a      	bne.n	80007e6 <NextStep+0x22>
 80007d0:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <NextStep+0xc4>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d106      	bne.n	80007e6 <NextStep+0x22>
 80007d8:	4b2c      	ldr	r3, [pc, #176]	; (800088c <NextStep+0xc8>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d102      	bne.n	80007e6 <NextStep+0x22>
		MOTOR_state = 0;
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <NextStep+0xcc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 0) && (hall3state == 1)) {
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <NextStep+0xc0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10a      	bne.n	8000804 <NextStep+0x40>
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <NextStep+0xc4>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d106      	bne.n	8000804 <NextStep+0x40>
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <NextStep+0xc8>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d102      	bne.n	8000804 <NextStep+0x40>
		MOTOR_state = 1;
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <NextStep+0xcc>)
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 1) && (hall3state == 1)) {
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <NextStep+0xc0>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d10a      	bne.n	8000822 <NextStep+0x5e>
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <NextStep+0xc4>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d106      	bne.n	8000822 <NextStep+0x5e>
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <NextStep+0xc8>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d102      	bne.n	8000822 <NextStep+0x5e>
		MOTOR_state = 2;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <NextStep+0xcc>)
 800081e:	2202      	movs	r2, #2
 8000820:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 1) && (hall3state == 0)) {
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <NextStep+0xc0>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10a      	bne.n	8000840 <NextStep+0x7c>
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <NextStep+0xc4>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d106      	bne.n	8000840 <NextStep+0x7c>
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <NextStep+0xc8>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d102      	bne.n	8000840 <NextStep+0x7c>
		MOTOR_state = 3;
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <NextStep+0xcc>)
 800083c:	2203      	movs	r2, #3
 800083e:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 1) && (hall2state == 1) && (hall3state == 0)) {
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <NextStep+0xc0>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d10a      	bne.n	800085e <NextStep+0x9a>
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <NextStep+0xc4>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d106      	bne.n	800085e <NextStep+0x9a>
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <NextStep+0xc8>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d102      	bne.n	800085e <NextStep+0x9a>
		MOTOR_state = 4;
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <NextStep+0xcc>)
 800085a:	2204      	movs	r2, #4
 800085c:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 1) && (hall2state == 0) && (hall3state == 0)) {
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <NextStep+0xc0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d10a      	bne.n	800087c <NextStep+0xb8>
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <NextStep+0xc4>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d106      	bne.n	800087c <NextStep+0xb8>
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <NextStep+0xc8>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d102      	bne.n	800087c <NextStep+0xb8>
		MOTOR_state = 5;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <NextStep+0xcc>)
 8000878:	2205      	movs	r2, #5
 800087a:	701a      	strb	r2, [r3, #0]
	}

	state();
 800087c:	f000 f840 	bl	8000900 <state>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000048 	.word	0x20000048
 8000888:	20000050 	.word	0x20000050
 800088c:	20000049 	.word	0x20000049
 8000890:	2000003c 	.word	0x2000003c

08000894 <wate>:


void wate(){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af02      	add	r7, sp, #8
	//A floating
	pinwrite(GPIOB, pin0,LOW);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <wate+0x5c>)
 80008a0:	f000 fadc 	bl	8000e5c <pinwrite>
	pinwrite(GPIOB, pin1,HIGH);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2101      	movs	r1, #1
 80008a8:	4811      	ldr	r0, [pc, #68]	; (80008f0 <wate+0x5c>)
 80008aa:	f000 fad7 	bl	8000e5c <pinwrite>
	//B floating
	pinwrite(GPIOB, pin10,LOW);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210a      	movs	r1, #10
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <wate+0x5c>)
 80008b4:	f000 fad2 	bl	8000e5c <pinwrite>
	pinwrite(GPIOB, pin7,HIGH);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2107      	movs	r1, #7
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <wate+0x5c>)
 80008be:	f000 facd 	bl	8000e5c <pinwrite>
	//C floating
	pinwrite(GPIOB, pin8,LOW);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2108      	movs	r1, #8
 80008c6:	480a      	ldr	r0, [pc, #40]	; (80008f0 <wate+0x5c>)
 80008c8:	f000 fac8 	bl	8000e5c <pinwrite>
	pinwrite(GPIOB, pin5,HIGH);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2105      	movs	r1, #5
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <wate+0x5c>)
 80008d2:	f000 fac3 	bl	8000e5c <pinwrite>
	TIMER_ISR(TIM3,2000, U_us, clk, state);
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <wate+0x60>)
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <wate+0x64>)
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <wate+0x68>)
 80008e4:	f000 fbbc 	bl	8001060 <TIMER_ISR>
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40010c00 	.word	0x40010c00
 80008f4:	08000901 	.word	0x08000901
 80008f8:	02255100 	.word	0x02255100
 80008fc:	40000400 	.word	0x40000400

08000900 <state>:
void state(){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af02      	add	r7, sp, #8
	switch (MOTOR_state) {
 8000906:	4b6e      	ldr	r3, [pc, #440]	; (8000ac0 <state+0x1c0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b05      	cmp	r3, #5
 800090c:	f200 80ca 	bhi.w	8000aa4 <state+0x1a4>
 8000910:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <state+0x18>)
 8000912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000916:	bf00      	nop
 8000918:	08000931 	.word	0x08000931
 800091c:	0800096f 	.word	0x0800096f
 8000920:	080009ad 	.word	0x080009ad
 8000924:	080009eb 	.word	0x080009eb
 8000928:	08000a29 	.word	0x08000a29
 800092c:	08000a67 	.word	0x08000a67
	case 0:
		//MOTOR_state++;
		//A h
		pinwrite(GPIOB, pin0,HIGH);
 8000930:	2201      	movs	r2, #1
 8000932:	2100      	movs	r1, #0
 8000934:	4863      	ldr	r0, [pc, #396]	; (8000ac4 <state+0x1c4>)
 8000936:	f000 fa91 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 800093a:	2201      	movs	r2, #1
 800093c:	2101      	movs	r1, #1
 800093e:	4861      	ldr	r0, [pc, #388]	; (8000ac4 <state+0x1c4>)
 8000940:	f000 fa8c 	bl	8000e5c <pinwrite>
		//B floating
		pinwrite(GPIOB, pin10,LOW);
 8000944:	2200      	movs	r2, #0
 8000946:	210a      	movs	r1, #10
 8000948:	485e      	ldr	r0, [pc, #376]	; (8000ac4 <state+0x1c4>)
 800094a:	f000 fa87 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 800094e:	2201      	movs	r2, #1
 8000950:	2107      	movs	r1, #7
 8000952:	485c      	ldr	r0, [pc, #368]	; (8000ac4 <state+0x1c4>)
 8000954:	f000 fa82 	bl	8000e5c <pinwrite>
		//C LOW
		pinwrite(GPIOB, pin8,LOW);
 8000958:	2200      	movs	r2, #0
 800095a:	2108      	movs	r1, #8
 800095c:	4859      	ldr	r0, [pc, #356]	; (8000ac4 <state+0x1c4>)
 800095e:	f000 fa7d 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin5,LOW);
 8000962:	2200      	movs	r2, #0
 8000964:	2105      	movs	r1, #5
 8000966:	4857      	ldr	r0, [pc, #348]	; (8000ac4 <state+0x1c4>)
 8000968:	f000 fa78 	bl	8000e5c <pinwrite>
		break;
 800096c:	e09a      	b.n	8000aa4 <state+0x1a4>

	case 1:
		//MOTOR_state++;
		//A floating
		pinwrite(GPIOB, pin0,LOW);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	4854      	ldr	r0, [pc, #336]	; (8000ac4 <state+0x1c4>)
 8000974:	f000 fa72 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8000978:	2201      	movs	r2, #1
 800097a:	2101      	movs	r1, #1
 800097c:	4851      	ldr	r0, [pc, #324]	; (8000ac4 <state+0x1c4>)
 800097e:	f000 fa6d 	bl	8000e5c <pinwrite>
		//B h
		pinwrite(GPIOB, pin10,HIGH);
 8000982:	2201      	movs	r2, #1
 8000984:	210a      	movs	r1, #10
 8000986:	484f      	ldr	r0, [pc, #316]	; (8000ac4 <state+0x1c4>)
 8000988:	f000 fa68 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 800098c:	2201      	movs	r2, #1
 800098e:	2107      	movs	r1, #7
 8000990:	484c      	ldr	r0, [pc, #304]	; (8000ac4 <state+0x1c4>)
 8000992:	f000 fa63 	bl	8000e5c <pinwrite>
		//C LOW
		pinwrite(GPIOB, pin8,LOW);
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	484a      	ldr	r0, [pc, #296]	; (8000ac4 <state+0x1c4>)
 800099c:	f000 fa5e 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin5,LOW);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2105      	movs	r1, #5
 80009a4:	4847      	ldr	r0, [pc, #284]	; (8000ac4 <state+0x1c4>)
 80009a6:	f000 fa59 	bl	8000e5c <pinwrite>
		break;
 80009aa:	e07b      	b.n	8000aa4 <state+0x1a4>

	case 2:
		//MOTOR_state++;
		//A l
		pinwrite(GPIOB, pin0,LOW);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	4844      	ldr	r0, [pc, #272]	; (8000ac4 <state+0x1c4>)
 80009b2:	f000 fa53 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin1,LOW);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2101      	movs	r1, #1
 80009ba:	4842      	ldr	r0, [pc, #264]	; (8000ac4 <state+0x1c4>)
 80009bc:	f000 fa4e 	bl	8000e5c <pinwrite>
		//B h
		pinwrite(GPIOB, pin10,HIGH);
 80009c0:	2201      	movs	r2, #1
 80009c2:	210a      	movs	r1, #10
 80009c4:	483f      	ldr	r0, [pc, #252]	; (8000ac4 <state+0x1c4>)
 80009c6:	f000 fa49 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2107      	movs	r1, #7
 80009ce:	483d      	ldr	r0, [pc, #244]	; (8000ac4 <state+0x1c4>)
 80009d0:	f000 fa44 	bl	8000e5c <pinwrite>
		//C floating
		pinwrite(GPIOB, pin8,LOW);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2108      	movs	r1, #8
 80009d8:	483a      	ldr	r0, [pc, #232]	; (8000ac4 <state+0x1c4>)
 80009da:	f000 fa3f 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 80009de:	2201      	movs	r2, #1
 80009e0:	2105      	movs	r1, #5
 80009e2:	4838      	ldr	r0, [pc, #224]	; (8000ac4 <state+0x1c4>)
 80009e4:	f000 fa3a 	bl	8000e5c <pinwrite>
		break;
 80009e8:	e05c      	b.n	8000aa4 <state+0x1a4>

	case 3:
		//MOTOR_state++;
		//A l
		pinwrite(GPIOB, pin0,LOW);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	4835      	ldr	r0, [pc, #212]	; (8000ac4 <state+0x1c4>)
 80009f0:	f000 fa34 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin1,LOW);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2101      	movs	r1, #1
 80009f8:	4832      	ldr	r0, [pc, #200]	; (8000ac4 <state+0x1c4>)
 80009fa:	f000 fa2f 	bl	8000e5c <pinwrite>
		//B floating
		pinwrite(GPIOB, pin10,LOW);
 80009fe:	2200      	movs	r2, #0
 8000a00:	210a      	movs	r1, #10
 8000a02:	4830      	ldr	r0, [pc, #192]	; (8000ac4 <state+0x1c4>)
 8000a04:	f000 fa2a 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2107      	movs	r1, #7
 8000a0c:	482d      	ldr	r0, [pc, #180]	; (8000ac4 <state+0x1c4>)
 8000a0e:	f000 fa25 	bl	8000e5c <pinwrite>
		//C h
		pinwrite(GPIOB, pin8,HIGH);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2108      	movs	r1, #8
 8000a16:	482b      	ldr	r0, [pc, #172]	; (8000ac4 <state+0x1c4>)
 8000a18:	f000 fa20 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2105      	movs	r1, #5
 8000a20:	4828      	ldr	r0, [pc, #160]	; (8000ac4 <state+0x1c4>)
 8000a22:	f000 fa1b 	bl	8000e5c <pinwrite>
		break;
 8000a26:	e03d      	b.n	8000aa4 <state+0x1a4>

	case 4:
		//MOTOR_state++;
		//A floating
		pinwrite(GPIOB, pin0,LOW);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4825      	ldr	r0, [pc, #148]	; (8000ac4 <state+0x1c4>)
 8000a2e:	f000 fa15 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2101      	movs	r1, #1
 8000a36:	4823      	ldr	r0, [pc, #140]	; (8000ac4 <state+0x1c4>)
 8000a38:	f000 fa10 	bl	8000e5c <pinwrite>
		//B l
		pinwrite(GPIOB, pin10,LOW);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	210a      	movs	r1, #10
 8000a40:	4820      	ldr	r0, [pc, #128]	; (8000ac4 <state+0x1c4>)
 8000a42:	f000 fa0b 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin7,LOW);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2107      	movs	r1, #7
 8000a4a:	481e      	ldr	r0, [pc, #120]	; (8000ac4 <state+0x1c4>)
 8000a4c:	f000 fa06 	bl	8000e5c <pinwrite>
		//C h
		pinwrite(GPIOB, pin8,HIGH);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2108      	movs	r1, #8
 8000a54:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <state+0x1c4>)
 8000a56:	f000 fa01 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	4819      	ldr	r0, [pc, #100]	; (8000ac4 <state+0x1c4>)
 8000a60:	f000 f9fc 	bl	8000e5c <pinwrite>
		break;
 8000a64:	e01e      	b.n	8000aa4 <state+0x1a4>

	case 5:
		//MOTOR_state=0;
		//A h
		pinwrite(GPIOB, pin0,HIGH);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <state+0x1c4>)
 8000a6c:	f000 f9f6 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2101      	movs	r1, #1
 8000a74:	4813      	ldr	r0, [pc, #76]	; (8000ac4 <state+0x1c4>)
 8000a76:	f000 f9f1 	bl	8000e5c <pinwrite>
		//B l
		pinwrite(GPIOB, pin10,LOW);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	210a      	movs	r1, #10
 8000a7e:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <state+0x1c4>)
 8000a80:	f000 f9ec 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin7,LOW);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2107      	movs	r1, #7
 8000a88:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <state+0x1c4>)
 8000a8a:	f000 f9e7 	bl	8000e5c <pinwrite>
		//C floating
		pinwrite(GPIOB, pin8,LOW);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2108      	movs	r1, #8
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <state+0x1c4>)
 8000a94:	f000 f9e2 	bl	8000e5c <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2105      	movs	r1, #5
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <state+0x1c4>)
 8000a9e:	f000 f9dd 	bl	8000e5c <pinwrite>
		break;
 8000aa2:	bf00      	nop
	}
	TIMER_ISR(TIM3,adcread, U_us, clk, wate);
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <state+0x1c8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	b299      	uxth	r1, r3
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <state+0x1cc>)
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <state+0x1d0>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <state+0x1d4>)
 8000ab4:	f000 fad4 	bl	8001060 <TIMER_ISR>

}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000003c 	.word	0x2000003c
 8000ac4:	40010c00 	.word	0x40010c00
 8000ac8:	2000004c 	.word	0x2000004c
 8000acc:	08000895 	.word	0x08000895
 8000ad0:	02255100 	.word	0x02255100
 8000ad4:	40000400 	.word	0x40000400

08000ad8 <main>:

int main (){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 fd2a 	bl	8001538 <MCAL_speed_init>
	pinmode(GPIOB, pin0,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4820      	ldr	r0, [pc, #128]	; (8000b6c <main+0x94>)
 8000aea:	f000 f8d5 	bl	8000c98 <pinmode>
	pinmode(GPIOB, pin1,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2101      	movs	r1, #1
 8000af2:	481e      	ldr	r0, [pc, #120]	; (8000b6c <main+0x94>)
 8000af4:	f000 f8d0 	bl	8000c98 <pinmode>
	pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000af8:	2201      	movs	r2, #1
 8000afa:	210a      	movs	r1, #10
 8000afc:	481b      	ldr	r0, [pc, #108]	; (8000b6c <main+0x94>)
 8000afe:	f000 f8cb 	bl	8000c98 <pinmode>
	pinmode(GPIOB, pin7,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2107      	movs	r1, #7
 8000b06:	4819      	ldr	r0, [pc, #100]	; (8000b6c <main+0x94>)
 8000b08:	f000 f8c6 	bl	8000c98 <pinmode>
	pinmode(GPIOB, pin8,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2108      	movs	r1, #8
 8000b10:	4816      	ldr	r0, [pc, #88]	; (8000b6c <main+0x94>)
 8000b12:	f000 f8c1 	bl	8000c98 <pinmode>
	pinmode(GPIOB, pin5,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2105      	movs	r1, #5
 8000b1a:	4814      	ldr	r0, [pc, #80]	; (8000b6c <main+0x94>)
 8000b1c:	f000 f8bc 	bl	8000c98 <pinmode>
	ADC_INIT(ADC1, ADC_STATE_START);
 8000b20:	2101      	movs	r1, #1
 8000b22:	4813      	ldr	r0, [pc, #76]	; (8000b70 <main+0x98>)
 8000b24:	f000 fdec 	bl	8001700 <ADC_INIT>
	EXTI(GPIOA, pin0,EXTI_Trigger_RisingAndFalling, s1);
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <main+0x9c>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4812      	ldr	r0, [pc, #72]	; (8000b78 <main+0xa0>)
 8000b30:	f000 fefc 	bl	800192c <EXTI>
	EXTI(GPIOA, pin1,EXTI_Trigger_RisingAndFalling, s2);
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <main+0xa4>)
 8000b36:	2202      	movs	r2, #2
 8000b38:	2101      	movs	r1, #1
 8000b3a:	480f      	ldr	r0, [pc, #60]	; (8000b78 <main+0xa0>)
 8000b3c:	f000 fef6 	bl	800192c <EXTI>
	EXTI(GPIOA, pin2,EXTI_Trigger_RisingAndFalling, s3);
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <main+0xa8>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	2102      	movs	r1, #2
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <main+0xa0>)
 8000b48:	f000 fef0 	bl	800192c <EXTI>
	NextStep();
 8000b4c:	f7ff fe3a 	bl	80007c4 <NextStep>
	//TIMER_ISR(TIM3,1, U_ms, clk, state);

	while(1){
		adcread=ADC_READ(ADC1, ADC_pin_PA5);
 8000b50:	2105      	movs	r1, #5
 8000b52:	4807      	ldr	r0, [pc, #28]	; (8000b70 <main+0x98>)
 8000b54:	f000 fe32 	bl	80017bc <ADC_READ>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <main+0xac>)
 8000b5e:	601a      	str	r2, [r3, #0]
		delay(200, U_ms, clk);
 8000b60:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <main+0xb0>)
 8000b62:	2100      	movs	r1, #0
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <main+0xb4>)
 8000b66:	f000 f9b1 	bl	8000ecc <delay>
		adcread=ADC_READ(ADC1, ADC_pin_PA5);
 8000b6a:	e7f1      	b.n	8000b50 <main+0x78>
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	40012400 	.word	0x40012400
 8000b74:	08000759 	.word	0x08000759
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	0800077d 	.word	0x0800077d
 8000b80:	080007a1 	.word	0x080007a1
 8000b84:	2000004c 	.word	0x2000004c
 8000b88:	02255100 	.word	0x02255100
 8000b8c:	43480000 	.word	0x43480000

08000b90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b92:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	; (8000bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <LoopForever+0xe>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	; (8000bdc <LoopForever+0x16>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bbe:	f001 fea7 	bl	8002910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff ff89 	bl	8000ad8 <main>

08000bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc6:	e7fe      	b.n	8000bc6 <LoopForever>
  ldr   r0, =_estack
 8000bc8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000bd4:	08002978 	.word	0x08002978
  ldr r2, =_sbss
 8000bd8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000bdc:	200000f8 	.word	0x200000f8

08000be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC1_2_IRQHandler>

08000be2 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000be2:	b480      	push	{r7}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <getposition+0x14>
		rval =0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d101      	bne.n	8000c00 <getposition+0x1e>
		rval =4;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d101      	bne.n	8000c0a <getposition+0x28>
		rval =8;
 8000c06:	2308      	movs	r3, #8
 8000c08:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d101      	bne.n	8000c14 <getposition+0x32>
		rval =12;
 8000c10:	230c      	movs	r3, #12
 8000c12:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	d101      	bne.n	8000c1e <getposition+0x3c>
		rval =16;
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	2b05      	cmp	r3, #5
 8000c22:	d101      	bne.n	8000c28 <getposition+0x46>
		rval =20;
 8000c24:	2314      	movs	r3, #20
 8000c26:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d101      	bne.n	8000c32 <getposition+0x50>
		rval =24;
 8000c2e:	2318      	movs	r3, #24
 8000c30:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	d101      	bne.n	8000c3c <getposition+0x5a>
		rval =28;
 8000c38:	231c      	movs	r3, #28
 8000c3a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d101      	bne.n	8000c46 <getposition+0x64>
		rval =0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	2b09      	cmp	r3, #9
 8000c4a:	d101      	bne.n	8000c50 <getposition+0x6e>
		rval =4;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	2b0a      	cmp	r3, #10
 8000c54:	d101      	bne.n	8000c5a <getposition+0x78>
		rval =8;
 8000c56:	2308      	movs	r3, #8
 8000c58:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	2b0b      	cmp	r3, #11
 8000c5e:	d101      	bne.n	8000c64 <getposition+0x82>
		rval =12;
 8000c60:	230c      	movs	r3, #12
 8000c62:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	2b0c      	cmp	r3, #12
 8000c68:	d101      	bne.n	8000c6e <getposition+0x8c>
		rval =16;
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	2b0d      	cmp	r3, #13
 8000c72:	d101      	bne.n	8000c78 <getposition+0x96>
		rval =20;
 8000c74:	2314      	movs	r3, #20
 8000c76:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	2b0e      	cmp	r3, #14
 8000c7c:	d101      	bne.n	8000c82 <getposition+0xa0>
		rval =24;
 8000c7e:	2318      	movs	r3, #24
 8000c80:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d101      	bne.n	8000c8c <getposition+0xaa>
		rval =28;
 8000c88:	231c      	movs	r3, #28
 8000c8a:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]


}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4a69      	ldr	r2, [pc, #420]	; (8000e50 <pinmode+0x1b8>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d106      	bne.n	8000cbc <pinmode+0x24>
		GPIOA_Clock_Enable();
 8000cae:	4b69      	ldr	r3, [pc, #420]	; (8000e54 <pinmode+0x1bc>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a68      	ldr	r2, [pc, #416]	; (8000e54 <pinmode+0x1bc>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	e010      	b.n	8000cde <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4a66      	ldr	r2, [pc, #408]	; (8000e58 <pinmode+0x1c0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d106      	bne.n	8000cd2 <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8000cc4:	4b63      	ldr	r3, [pc, #396]	; (8000e54 <pinmode+0x1bc>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a62      	ldr	r2, [pc, #392]	; (8000e54 <pinmode+0x1bc>)
 8000cca:	f043 0308 	orr.w	r3, r3, #8
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	e005      	b.n	8000cde <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 8000cd2:	4b60      	ldr	r3, [pc, #384]	; (8000e54 <pinmode+0x1bc>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	4a5f      	ldr	r2, [pc, #380]	; (8000e54 <pinmode+0x1bc>)
 8000cd8:	f043 0310 	orr.w	r3, r3, #16
 8000cdc:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8000cde:	897b      	ldrh	r3, [r7, #10]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	d856      	bhi.n	8000d92 <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 8000ce4:	897b      	ldrh	r3, [r7, #10]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff7b 	bl	8000be2 <getposition>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	4093      	lsls	r3, r2
 8000cf4:	43da      	mvns	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	d002      	beq.n	8000d0c <pinmode+0x74>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b18      	cmp	r3, #24
 8000d0a:	d133      	bne.n	8000d74 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b18      	cmp	r3, #24
 8000d10:	d117      	bne.n	8000d42 <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000d12:	897b      	ldrh	r3, [r7, #10]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff64 	bl	8000be2 <getposition>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2308      	movs	r3, #8
 8000d20:	fa03 f202 	lsl.w	r2, r3, r2
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	897a      	ldrh	r2, [r7, #10]
 8000d34:	2101      	movs	r1, #1
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000d40:	e081      	b.n	8000e46 <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000d42:	897b      	ldrh	r3, [r7, #10]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff4c 	bl	8000be2 <getposition>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	2308      	movs	r3, #8
 8000d50:	fa03 f202 	lsl.w	r2, r3, r2
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	897a      	ldrh	r2, [r7, #10]
 8000d64:	2101      	movs	r1, #1
 8000d66:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6a:	43d2      	mvns	r2, r2
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000d72:	e068      	b.n	8000e46 <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 8000d74:	897b      	ldrh	r3, [r7, #10]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff33 	bl	8000be2 <getposition>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	fa03 f202 	lsl.w	r2, r3, r2
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	601a      	str	r2, [r3, #0]

	}



}
 8000d90:	e059      	b.n	8000e46 <pinmode+0x1ae>
	else if(pin>7){
 8000d92:	897b      	ldrh	r3, [r7, #10]
 8000d94:	2b07      	cmp	r3, #7
 8000d96:	d956      	bls.n	8000e46 <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 8000d98:	897b      	ldrh	r3, [r7, #10]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff21 	bl	8000be2 <getposition>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	230f      	movs	r3, #15
 8000da6:	4093      	lsls	r3, r2
 8000da8:	43da      	mvns	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	401a      	ands	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b08      	cmp	r3, #8
 8000db8:	d002      	beq.n	8000dc0 <pinmode+0x128>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b18      	cmp	r3, #24
 8000dbe:	d133      	bne.n	8000e28 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b18      	cmp	r3, #24
 8000dc4:	d117      	bne.n	8000df6 <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000dc6:	897b      	ldrh	r3, [r7, #10]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff0a 	bl	8000be2 <getposition>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	fa03 f202 	lsl.w	r2, r3, r2
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	897a      	ldrh	r2, [r7, #10]
 8000de8:	2101      	movs	r1, #1
 8000dea:	fa01 f202 	lsl.w	r2, r1, r2
 8000dee:	431a      	orrs	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000df4:	e027      	b.n	8000e46 <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8000df6:	897b      	ldrh	r3, [r7, #10]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fef2 	bl	8000be2 <getposition>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	2308      	movs	r3, #8
 8000e04:	fa03 f202 	lsl.w	r2, r3, r2
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	897a      	ldrh	r2, [r7, #10]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	43d2      	mvns	r2, r2
 8000e20:	401a      	ands	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000e26:	e00e      	b.n	8000e46 <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8000e28:	897b      	ldrh	r3, [r7, #10]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fed9 	bl	8000be2 <getposition>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	fa03 f202 	lsl.w	r2, r3, r2
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	605a      	str	r2, [r3, #4]
}
 8000e44:	e7ff      	b.n	8000e46 <pinmode+0x1ae>
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010800 	.word	0x40010800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010c00 	.word	0x40010c00

08000e5c <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_typeDef* GPIOx,uint16_t pin,uint8_t status){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 8000e6c:	787b      	ldrb	r3, [r7, #1]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d009      	beq.n	8000e86 <pinwrite+0x2a>
		GPIOx->GPIOx_ODR |=(1<<pin);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	2101      	movs	r1, #1
 8000e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->GPIOx_ODR &=~(1<<pin);

}
 8000e84:	e009      	b.n	8000e9a <pinwrite+0x3e>
	else GPIOx->GPIOx_ODR &=~(1<<pin);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	43d2      	mvns	r2, r2
 8000e94:	401a      	ands	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60da      	str	r2, [r3, #12]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <READ_PIN>:
 * @param [in]      - Pin: GPIOx PIN Number
 * @retval          - uint8_t
 * Note             - none
 */

uint8_t READ_PIN(GPIO_typeDef* GPIOx, uint16_t pin){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
	return (GPIOx->GPIOx_IDR>>pin)&1;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(float time,uint8_t U,uint32_t clk){
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b08b      	sub	sp, #44	; 0x2c
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	72fb      	strb	r3, [r7, #11]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 8000eda:	4b5b      	ldr	r3, [pc, #364]	; (8001048 <delay+0x17c>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a5a      	ldr	r2, [pc, #360]	; (8001048 <delay+0x17c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8000ee6:	4b59      	ldr	r3, [pc, #356]	; (800104c <delay+0x180>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b57      	ldr	r3, [pc, #348]	; (800104c <delay+0x180>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 0201 	bic.w	r2, r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
	uint32_t unit =1000;
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	61bb      	str	r3, [r7, #24]
	uint8_t  increase=2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	75fb      	strb	r3, [r7, #23]

	if (U == 0){
 8000f0e:	7afb      	ldrb	r3, [r7, #11]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10f      	bne.n	8000f34 <delay+0x68>
		unit = 1000;
 8000f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f18:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 100;
 8000f1a:	494d      	ldr	r1, [pc, #308]	; (8001050 <delay+0x184>)
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f7ff fbf1 	bl	8000704 <__aeabi_fcmpgt>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <delay+0x62>
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	75fb      	strb	r3, [r7, #23]
 8000f2c:	e045      	b.n	8000fba <delay+0xee>
		else increase = 10;
 8000f2e:	230a      	movs	r3, #10
 8000f30:	75fb      	strb	r3, [r7, #23]
 8000f32:	e042      	b.n	8000fba <delay+0xee>
	}
	else {
		unit = 1000000;
 8000f34:	4b47      	ldr	r3, [pc, #284]	; (8001054 <delay+0x188>)
 8000f36:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 10;
 8000f38:	4945      	ldr	r1, [pc, #276]	; (8001050 <delay+0x184>)
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f7ff fbe2 	bl	8000704 <__aeabi_fcmpgt>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <delay+0x80>
 8000f46:	230a      	movs	r3, #10
 8000f48:	75fb      	strb	r3, [r7, #23]
 8000f4a:	e036      	b.n	8000fba <delay+0xee>
		else increase = 5;
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	75fb      	strb	r3, [r7, #23]
	}

	while(user_flage==1){
 8000f50:	e033      	b.n	8000fba <delay+0xee>
		user_top = (clk/unit*time)/( user_pre );
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff f9be 	bl	80002dc <__aeabi_ui2f>
 8000f60:	4603      	mov	r3, r0
 8000f62:	68f9      	ldr	r1, [r7, #12]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fa11 	bl	800038c <__aeabi_fmul>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461c      	mov	r4, r3
 8000f6e:	69f8      	ldr	r0, [r7, #28]
 8000f70:	f7ff f9b4 	bl	80002dc <__aeabi_ui2f>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4619      	mov	r1, r3
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f7ff fabb 	bl	80004f4 <__aeabi_fdiv>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fbc9 	bl	8000718 <__aeabi_f2uiz>
 8000f86:	4603      	mov	r3, r0
 8000f88:	623b      	str	r3, [r7, #32]
		if(user_top>=32000){
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000f90:	d310      	bcc.n	8000fb4 <delay+0xe8>

			if(user_pre>65530){
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d906      	bls.n	8000faa <delay+0xde>
				user_pre=65530;
 8000f9c:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8000fa0:	61fb      	str	r3, [r7, #28]
				user_flage=0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fa8:	e007      	b.n	8000fba <delay+0xee>
			}
			else user_pre+=increase;
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	4413      	add	r3, r2
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e002      	b.n	8000fba <delay+0xee>

		}
		else{
			user_flage=0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(user_flage==1){
 8000fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d0c7      	beq.n	8000f52 <delay+0x86>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <delay+0x180>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <delay+0x180>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0201 	bic.w	r2, r2, #1
 8000fd0:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <delay+0x180>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <delay+0x180>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 0204 	orr.w	r2, r2, #4
 8000fe0:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <delay+0x180>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <delay+0x180>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f042 0201 	orr.w	r2, r2, #1
 8000ff0:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <delay+0x180>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6a3a      	ldr	r2, [r7, #32]
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <delay+0x180>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	3a01      	subs	r2, #1
 8001002:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <delay+0x180>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <delay+0x180>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <delay+0x180>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <delay+0x180>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0201 	orr.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <delay+0x18c>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <delay+0x190>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <delay+0x190>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 8001036:	bf00      	nop
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <delay+0x18c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1fb      	bne.n	8001038 <delay+0x16c>

	}
}
 8001040:	bf00      	nop
 8001042:	372c      	adds	r7, #44	; 0x2c
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	40021000 	.word	0x40021000
 800104c:	2000001c 	.word	0x2000001c
 8001050:	453b8000 	.word	0x453b8000
 8001054:	000f4240 	.word	0x000f4240
 8001058:	20000018 	.word	0x20000018
 800105c:	e000e100 	.word	0xe000e100

08001060 <TIMER_ISR>:

//==================================================================================================

void TIMER_ISR(TIMERS_typeDef* ISR_TIMER,uint16_t time_ms,uint8_t U,uint32_t clk,void (*calback) (void)){
 8001060:	b480      	push	{r7}
 8001062:	b08b      	sub	sp, #44	; 0x2c
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	817b      	strh	r3, [r7, #10]
 800106e:	4613      	mov	r3, r2
 8001070:	727b      	strb	r3, [r7, #9]

	TIMER3_CLOCK_Enable();//enable timer3 clock
 8001072:	4b49      	ldr	r3, [pc, #292]	; (8001198 <TIMER_ISR+0x138>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a48      	ldr	r2, [pc, #288]	; (8001198 <TIMER_ISR+0x138>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	61d3      	str	r3, [r2, #28]
	ISR_TIMER->TIMx_CR1 &=~(1<<0);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 0201 	bic.w	r2, r3, #1
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	601a      	str	r2, [r3, #0]
	ISRcalback[0] = calback;
 800108a:	4a44      	ldr	r2, [pc, #272]	; (800119c <TIMER_ISR+0x13c>)
 800108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108e:	6013      	str	r3, [r2, #0]
	ISR_TIMER_COPY=ISR_TIMER;
 8001090:	4a43      	ldr	r2, [pc, #268]	; (80011a0 <TIMER_ISR+0x140>)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6013      	str	r3, [r2, #0]

	char user_flage=1;
 8001096:	2301      	movs	r3, #1
 8001098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
	uint8_t  increase=2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	76fb      	strb	r3, [r7, #27]
	uint32_t unit =1000;
 80010a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ac:	617b      	str	r3, [r7, #20]
	if (U == 0){
 80010ae:	7a7b      	ldrb	r3, [r7, #9]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10d      	bne.n	80010d0 <TIMER_ISR+0x70>
			unit = 1000;
 80010b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b8:	617b      	str	r3, [r7, #20]
			if (time_ms > 3000)increase = 100;
 80010ba:	897b      	ldrh	r3, [r7, #10]
 80010bc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d902      	bls.n	80010ca <TIMER_ISR+0x6a>
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	76fb      	strb	r3, [r7, #27]
 80010c8:	e032      	b.n	8001130 <TIMER_ISR+0xd0>
			else increase = 10;
 80010ca:	230a      	movs	r3, #10
 80010cc:	76fb      	strb	r3, [r7, #27]
 80010ce:	e02f      	b.n	8001130 <TIMER_ISR+0xd0>
		}
		else {
			unit = 1000000;
 80010d0:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <TIMER_ISR+0x144>)
 80010d2:	617b      	str	r3, [r7, #20]
			if (time_ms > 3000)increase = 10;
 80010d4:	897b      	ldrh	r3, [r7, #10]
 80010d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010da:	4293      	cmp	r3, r2
 80010dc:	d902      	bls.n	80010e4 <TIMER_ISR+0x84>
 80010de:	230a      	movs	r3, #10
 80010e0:	76fb      	strb	r3, [r7, #27]
 80010e2:	e025      	b.n	8001130 <TIMER_ISR+0xd0>
			else increase = 5;
 80010e4:	2305      	movs	r3, #5
 80010e6:	76fb      	strb	r3, [r7, #27]
		}

		while(user_flage==1){
 80010e8:	e022      	b.n	8001130 <TIMER_ISR+0xd0>
			user_top = (clk/unit*time_ms)/( user_pre );
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	897a      	ldrh	r2, [r7, #10]
 80010f4:	fb02 f203 	mul.w	r2, r2, r3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	623b      	str	r3, [r7, #32]
			if(user_top>=32000){
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001106:	d310      	bcc.n	800112a <TIMER_ISR+0xca>

				if(user_pre>65530){
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800110e:	4293      	cmp	r3, r2
 8001110:	d906      	bls.n	8001120 <TIMER_ISR+0xc0>
					user_pre=65530;
 8001112:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8001116:	61fb      	str	r3, [r7, #28]
					user_flage=0;
 8001118:	2300      	movs	r3, #0
 800111a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800111e:	e007      	b.n	8001130 <TIMER_ISR+0xd0>
				}
				else user_pre+=increase;
 8001120:	7efb      	ldrb	r3, [r7, #27]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	4413      	add	r3, r2
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	e002      	b.n	8001130 <TIMER_ISR+0xd0>

			}
			else{
				user_flage=0;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(user_flage==1){
 8001130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001134:	2b01      	cmp	r3, #1
 8001136:	d0d8      	beq.n	80010ea <TIMER_ISR+0x8a>
			}
		}



	ISR_TIMER->TIMx_CR1 &=~(1<<0);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 0201 	bic.w	r2, r3, #1
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	601a      	str	r2, [r3, #0]

	ISR_TIMER->TIMx_CR1  |=(1<<2);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f043 0204 	orr.w	r2, r3, #4
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	601a      	str	r2, [r3, #0]

	ISR_TIMER->TIMx_DIER |=(1<<0);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	f043 0201 	orr.w	r2, r3, #1
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	60da      	str	r2, [r3, #12]

	ISR_TIMER->TIMx_ARR=user_top;//frec peak value
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6a3a      	ldr	r2, [r7, #32]
 8001160:	62da      	str	r2, [r3, #44]	; 0x2c

	ISR_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	629a      	str	r2, [r3, #40]	; 0x28

	ISR_TIMER->TIMx_EGR |=(1<<0);//		Bit 0 UG: Update generation
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f043 0201 	orr.w	r2, r3, #1
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	615a      	str	r2, [r3, #20]

	ISR_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	601a      	str	r2, [r3, #0]

	NVIC_TIM3_global_interrupt_Enable;
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <TIMER_ISR+0x148>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <TIMER_ISR+0x148>)
 8001188:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800118c:	6013      	str	r3, [r2, #0]

}
 800118e:	bf00      	nop
 8001190:	372c      	adds	r7, #44	; 0x2c
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000
 800119c:	20000054 	.word	0x20000054
 80011a0:	20000060 	.word	0x20000060
 80011a4:	000f4240 	.word	0x000f4240
 80011a8:	e000e100 	.word	0xe000e100

080011ac <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 80011ba:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <SPWM_timer_INIT+0x100>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b3a      	ldr	r3, [pc, #232]	; (80012ac <SPWM_timer_INIT+0x100>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0201 	bic.w	r2, r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d12f      	bne.n	8001230 <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 80011d0:	4b36      	ldr	r3, [pc, #216]	; (80012ac <SPWM_timer_INIT+0x100>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	699a      	ldr	r2, [r3, #24]
 80011d6:	4b35      	ldr	r3, [pc, #212]	; (80012ac <SPWM_timer_INIT+0x100>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011de:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 80011e0:	4b32      	ldr	r3, [pc, #200]	; (80012ac <SPWM_timer_INIT+0x100>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699a      	ldr	r2, [r3, #24]
 80011e6:	4b31      	ldr	r3, [pc, #196]	; (80012ac <SPWM_timer_INIT+0x100>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80011ee:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 80011f0:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <SPWM_timer_INIT+0x100>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	699a      	ldr	r2, [r3, #24]
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <SPWM_timer_INIT+0x100>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0208 	orr.w	r2, r2, #8
 80011fe:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	699a      	ldr	r2, [r3, #24]
 8001206:	4b29      	ldr	r3, [pc, #164]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800120e:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6a1a      	ldr	r2, [r3, #32]
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0210 	orr.w	r2, r2, #16
 800121e:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6a1a      	ldr	r2, [r3, #32]
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0201 	orr.w	r2, r2, #1
 800122e:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800123e:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <SPWM_timer_INIT+0x100>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <SPWM_timer_INIT+0x100>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800126e:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0201 	orr.w	r2, r2, #1
 800127e:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	695a      	ldr	r2, [r3, #20]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0201 	orr.w	r2, r2, #1
 800128e:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SPWM_timer_INIT+0x100>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0201 	orr.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000000 	.word	0x20000000

080012b0 <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <TIM2_IRQHandler+0x34>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <TIM2_IRQHandler+0x34>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <TIM2_IRQHandler+0x38>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <TIM2_IRQHandler+0x34>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <TIM2_IRQHandler+0x34>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0201 	bic.w	r2, r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	2000001c 	.word	0x2000001c
 80012e8:	20000018 	.word	0x20000018

080012ec <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <TIM3_IRQHandler+0x6c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d119      	bne.n	800132c <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <TIM3_IRQHandler+0x70>)
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <TIM3_IRQHandler+0x70>)
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <TIM3_IRQHandler+0x74>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <TIM3_IRQHandler+0x74>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3b01      	subs	r3, #1
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <TIM3_IRQHandler+0x74>)
 8001314:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 8001316:	e01c      	b.n	8001352 <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <TIM3_IRQHandler+0x6c>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <TIM3_IRQHandler+0x70>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <TIM3_IRQHandler+0x70>)
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	6013      	str	r3, [r2, #0]
}
 800132a:	e012      	b.n	8001352 <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <TIM3_IRQHandler+0x78>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <TIM3_IRQHandler+0x78>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <TIM3_IRQHandler+0x78>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <TIM3_IRQHandler+0x78>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <TIM3_IRQHandler+0x7c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4798      	blx	r3
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000044 	.word	0x20000044
 800135c:	40000400 	.word	0x40000400
 8001360:	20000040 	.word	0x20000040
 8001364:	20000060 	.word	0x20000060
 8001368:	20000054 	.word	0x20000054

0800136c <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <TIM4_IRQHandler+0x24>)
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <TIM4_IRQHandler+0x24>)
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	6113      	str	r3, [r2, #16]
	overflowtims++;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <TIM4_IRQHandler+0x28>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <TIM4_IRQHandler+0x28>)
 8001386:	801a      	strh	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40000800 	.word	0x40000800
 8001394:	2000003e 	.word	0x2000003e

08001398 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 800139c:	4b5d      	ldr	r3, [pc, #372]	; (8001514 <TIM1_UP_IRQHandler+0x17c>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b5d      	ldr	r3, [pc, #372]	; (8001518 <TIM1_UP_IRQHandler+0x180>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d911      	bls.n	80013cc <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 80013a8:	4b5c      	ldr	r3, [pc, #368]	; (800151c <TIM1_UP_IRQHandler+0x184>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
		flage1=0;
 80013ae:	4b5c      	ldr	r3, [pc, #368]	; (8001520 <TIM1_UP_IRQHandler+0x188>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 80013b4:	4b58      	ldr	r3, [pc, #352]	; (8001518 <TIM1_UP_IRQHandler+0x180>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a5a      	ldr	r2, [pc, #360]	; (8001524 <TIM1_UP_IRQHandler+0x18c>)
 80013ba:	7812      	ldrb	r2, [r2, #0]
 80013bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80013c0:	4b55      	ldr	r3, [pc, #340]	; (8001518 <TIM1_UP_IRQHandler+0x180>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a53      	ldr	r2, [pc, #332]	; (8001514 <TIM1_UP_IRQHandler+0x17c>)
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e018      	b.n	80013fe <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 80013cc:	4b51      	ldr	r3, [pc, #324]	; (8001514 <TIM1_UP_IRQHandler+0x17c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b63      	cmp	r3, #99	; 0x63
 80013d2:	d814      	bhi.n	80013fe <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 80013d4:	4b51      	ldr	r3, [pc, #324]	; (800151c <TIM1_UP_IRQHandler+0x184>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
		flage1=1;
 80013da:	4b51      	ldr	r3, [pc, #324]	; (8001520 <TIM1_UP_IRQHandler+0x188>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 80013e0:	4b51      	ldr	r3, [pc, #324]	; (8001528 <TIM1_UP_IRQHandler+0x190>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	f083 0301 	eor.w	r3, r3, #1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b4f      	ldr	r3, [pc, #316]	; (8001528 <TIM1_UP_IRQHandler+0x190>)
 80013ec:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 80013ee:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <TIM1_UP_IRQHandler+0x180>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <TIM1_UP_IRQHandler+0x18c>)
 80013f4:	7812      	ldrb	r2, [r2, #0]
 80013f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80013fa:	4a46      	ldr	r2, [pc, #280]	; (8001514 <TIM1_UP_IRQHandler+0x17c>)
 80013fc:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 80013fe:	4b4a      	ldr	r3, [pc, #296]	; (8001528 <TIM1_UP_IRQHandler+0x190>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d110      	bne.n	8001428 <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 8001406:	4b49      	ldr	r3, [pc, #292]	; (800152c <TIM1_UP_IRQHandler+0x194>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6a1a      	ldr	r2, [r3, #32]
 800140c:	4b47      	ldr	r3, [pc, #284]	; (800152c <TIM1_UP_IRQHandler+0x194>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0201 	bic.w	r2, r2, #1
 8001414:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 8001416:	4b45      	ldr	r3, [pc, #276]	; (800152c <TIM1_UP_IRQHandler+0x194>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6a1a      	ldr	r2, [r3, #32]
 800141c:	4b43      	ldr	r3, [pc, #268]	; (800152c <TIM1_UP_IRQHandler+0x194>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0210 	orr.w	r2, r2, #16
 8001424:	621a      	str	r2, [r3, #32]
 8001426:	e013      	b.n	8001450 <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 8001428:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <TIM1_UP_IRQHandler+0x190>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10f      	bne.n	8001450 <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 8001430:	4b3e      	ldr	r3, [pc, #248]	; (800152c <TIM1_UP_IRQHandler+0x194>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a1a      	ldr	r2, [r3, #32]
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <TIM1_UP_IRQHandler+0x194>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0210 	bic.w	r2, r2, #16
 800143e:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 8001440:	4b3a      	ldr	r3, [pc, #232]	; (800152c <TIM1_UP_IRQHandler+0x194>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <TIM1_UP_IRQHandler+0x194>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <TIM1_UP_IRQHandler+0x188>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d11c      	bne.n	8001492 <TIM1_UP_IRQHandler+0xfa>
 8001458:	4b30      	ldr	r3, [pc, #192]	; (800151c <TIM1_UP_IRQHandler+0x184>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d118      	bne.n	8001492 <TIM1_UP_IRQHandler+0xfa>
		top=c;
 8001460:	4b33      	ldr	r3, [pc, #204]	; (8001530 <TIM1_UP_IRQHandler+0x198>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a2c      	ldr	r2, [pc, #176]	; (8001518 <TIM1_UP_IRQHandler+0x180>)
 8001466:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8001468:	4b32      	ldr	r3, [pc, #200]	; (8001534 <TIM1_UP_IRQHandler+0x19c>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	4b29      	ldr	r3, [pc, #164]	; (8001514 <TIM1_UP_IRQHandler+0x17c>)
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <TIM1_UP_IRQHandler+0x180>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	f7ff fe99 	bl	80011ac <SPWM_timer_INIT>
		x+=(top/numper_waves);
 800147a:	4b27      	ldr	r3, [pc, #156]	; (8001518 <TIM1_UP_IRQHandler+0x180>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a29      	ldr	r2, [pc, #164]	; (8001524 <TIM1_UP_IRQHandler+0x18c>)
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	fbb3 f2f2 	udiv	r2, r3, r2
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <TIM1_UP_IRQHandler+0x17c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a21      	ldr	r2, [pc, #132]	; (8001514 <TIM1_UP_IRQHandler+0x17c>)
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e035      	b.n	80014fe <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <TIM1_UP_IRQHandler+0x184>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d129      	bne.n	80014ee <TIM1_UP_IRQHandler+0x156>
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <TIM1_UP_IRQHandler+0x188>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d125      	bne.n	80014ee <TIM1_UP_IRQHandler+0x156>
		top=c;
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <TIM1_UP_IRQHandler+0x198>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <TIM1_UP_IRQHandler+0x180>)
 80014a8:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <TIM1_UP_IRQHandler+0x17c>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <TIM1_UP_IRQHandler+0x180>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	491c      	ldr	r1, [pc, #112]	; (8001524 <TIM1_UP_IRQHandler+0x18c>)
 80014b4:	7809      	ldrb	r1, [r1, #0]
 80014b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a15      	ldr	r2, [pc, #84]	; (8001514 <TIM1_UP_IRQHandler+0x17c>)
 80014be:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <TIM1_UP_IRQHandler+0x19c>)
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <TIM1_UP_IRQHandler+0x17c>)
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <TIM1_UP_IRQHandler+0x180>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2301      	movs	r3, #1
 80014ce:	f7ff fe6d 	bl	80011ac <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <TIM1_UP_IRQHandler+0x180>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a13      	ldr	r2, [pc, #76]	; (8001524 <TIM1_UP_IRQHandler+0x18c>)
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	fbb3 f2f2 	udiv	r2, r3, r2
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <TIM1_UP_IRQHandler+0x17c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d10b      	bne.n	80014fe <TIM1_UP_IRQHandler+0x166>
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <TIM1_UP_IRQHandler+0x17c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e007      	b.n	80014fe <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <TIM1_UP_IRQHandler+0x194>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <TIM1_UP_IRQHandler+0x194>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0201 	bic.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <TIM1_UP_IRQHandler+0x194>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <TIM1_UP_IRQHandler+0x194>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	611a      	str	r2, [r3, #16]
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000014 	.word	0x20000014
 8001518:	20000008 	.word	0x20000008
 800151c:	2000003d 	.word	0x2000003d
 8001520:	20000004 	.word	0x20000004
 8001524:	2000005c 	.word	0x2000005c
 8001528:	20000005 	.word	0x20000005
 800152c:	20000000 	.word	0x20000000
 8001530:	20000010 	.word	0x20000010
 8001534:	2000000c 	.word	0x2000000c

08001538 <MCAL_speed_init>:
#include "stm32_speed_DRIVER.h"
#define FLASH_BASE_ADDR     0x40022000
#define FLASH_ACR_OFFSET    0x00
#define FLASH_ACR          (*(volatile unsigned int*)(FLASH_BASE_ADDR + FLASH_ACR_OFFSET))
#define FLASH_ACR_LATENCY_Pos 0
void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	460a      	mov	r2, r1
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	4613      	mov	r3, r2
 8001546:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d13a      	bne.n	80015c4 <MCAL_speed_init+0x8c>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	2b00      	cmp	r3, #0
 8001552:	f040 80cc 	bne.w	80016ee <MCAL_speed_init+0x1b6>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 8001556:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a67      	ldr	r2, [pc, #412]	; (80016f8 <MCAL_speed_init+0x1c0>)
 800155c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001560:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 8001562:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4a64      	ldr	r2, [pc, #400]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001568:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800156c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 800156e:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4a61      	ldr	r2, [pc, #388]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001574:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001578:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 800157a:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <MCAL_speed_init+0x1c0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a5e      	ldr	r2, [pc, #376]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001584:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 8001586:	4b5c      	ldr	r3, [pc, #368]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4a5b      	ldr	r2, [pc, #364]	; (80016f8 <MCAL_speed_init+0x1c0>)
 800158c:	f023 0303 	bic.w	r3, r3, #3
 8001590:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8001592:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4a58      	ldr	r2, [pc, #352]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 800159e:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a55      	ldr	r2, [pc, #340]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015a8:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4a52      	ldr	r2, [pc, #328]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80015b4:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 80015b6:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a4f      	ldr	r2, [pc, #316]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015c0:	6053      	str	r3, [r2, #4]

		}
	}


}
 80015c2:	e094      	b.n	80016ee <MCAL_speed_init+0x1b6>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d150      	bne.n	800166c <MCAL_speed_init+0x134>
			RCC->RCC_CR |= (1 << 16);
 80015ca:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a4a      	ldr	r2, [pc, #296]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 80015d6:	bf00      	nop
 80015d8:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f9      	beq.n	80015d8 <MCAL_speed_init+0xa0>
			RCC->RCC_CFGR|=(1<<16);
 80015e4:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a43      	ldr	r2, [pc, #268]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ee:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a40      	ldr	r2, [pc, #256]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015f6:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80015fa:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 80015fc:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001606:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 8001608:	bf00      	nop
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <MCAL_speed_init+0x1c0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f9      	beq.n	800160a <MCAL_speed_init+0xd2>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 8001616:	4b39      	ldr	r3, [pc, #228]	; (80016fc <MCAL_speed_init+0x1c4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a38      	ldr	r2, [pc, #224]	; (80016fc <MCAL_speed_init+0x1c4>)
 800161c:	f023 0307 	bic.w	r3, r3, #7
 8001620:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 8001622:	4b36      	ldr	r3, [pc, #216]	; (80016fc <MCAL_speed_init+0x1c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a35      	ldr	r2, [pc, #212]	; (80016fc <MCAL_speed_init+0x1c4>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 800162e:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	4a31      	ldr	r2, [pc, #196]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001634:	f023 0303 	bic.w	r3, r3, #3
 8001638:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 800163a:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <MCAL_speed_init+0x1c0>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4a2e      	ldr	r2, [pc, #184]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 8001646:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4a2b      	ldr	r2, [pc, #172]	; (80016f8 <MCAL_speed_init+0x1c0>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a28      	ldr	r2, [pc, #160]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001658:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800165c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a25      	ldr	r2, [pc, #148]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001664:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001668:	6053      	str	r3, [r2, #4]
}
 800166a:	e040      	b.n	80016ee <MCAL_speed_init+0x1b6>
		else if (mood==mood_FAST_MOOD_72MHzCORE72MHzpref){
 800166c:	79bb      	ldrb	r3, [r7, #6]
 800166e:	2b04      	cmp	r3, #4
 8001670:	d13d      	bne.n	80016ee <MCAL_speed_init+0x1b6>
			RCC->RCC_CR |= (1 << 16);
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 800167e:	bf00      	nop
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f9      	beq.n	8001680 <MCAL_speed_init+0x148>
			RCC->RCC_CFGR|=(1<<16);
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MCAL_speed_init+0x1c0>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <MCAL_speed_init+0x1c0>)
 8001692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001696:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MCAL_speed_init+0x1c0>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <MCAL_speed_init+0x1c0>)
 800169e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80016a2:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80016aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ae:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 80016b0:	bf00      	nop
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f9      	beq.n	80016b2 <MCAL_speed_init+0x17a>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MCAL_speed_init+0x1c4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <MCAL_speed_init+0x1c4>)
 80016c4:	f023 0307 	bic.w	r3, r3, #7
 80016c8:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MCAL_speed_init+0x1c4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <MCAL_speed_init+0x1c4>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80016dc:	f023 0303 	bic.w	r3, r3, #3
 80016e0:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <MCAL_speed_init+0x1c0>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6053      	str	r3, [r2, #4]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40022000 	.word	0x40022000

08001700 <ADC_INIT>:
#include "stm32f103c6_ADC.h"


uint8_t flag_ADC_INIT=0;

void ADC_INIT(ADC_typeDef* ADCx,uint8_t ADC_STATE_){
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]

	if(ADC_STATE_==ADC_STATE_START){
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d132      	bne.n	8001778 <ADC_INIT+0x78>
		if(ADCx==ADC1){
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a25      	ldr	r2, [pc, #148]	; (80017ac <ADC_INIT+0xac>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d106      	bne.n	8001728 <ADC_INIT+0x28>
			ADC1_Clock_Enable();
 800171a:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <ADC_INIT+0xb0>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	4a24      	ldr	r2, [pc, #144]	; (80017b0 <ADC_INIT+0xb0>)
 8001720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001724:	6193      	str	r3, [r2, #24]
 8001726:	e009      	b.n	800173c <ADC_INIT+0x3c>
		}
		else if(ADCx==ADC2){
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <ADC_INIT+0xb4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d105      	bne.n	800173c <ADC_INIT+0x3c>
			ADC2_Clock_Enable();
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <ADC_INIT+0xb0>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <ADC_INIT+0xb0>)
 8001736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173a:	6193      	str	r3, [r2, #24]
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]
		//		Bit 1 CONT: Continuous conversion
		//		This bit is set and cleared by software. If set conversion takes place continuously till this bit is
		//		reset.
		//		0: Single conversion mode
		//		1: Continuous conversion mode
		ADCx->ADC_CR2 &=~(1<<1);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 0202 	bic.w	r2, r3, #2
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	609a      	str	r2, [r3, #8]
		//		Bit 2 CAL: A/D Calibration
		//		This bit is set by software to start the calibration. It is reset by hardware after calibration is
		//		complete.
		//		0: Calibration completed
		//		1: Enable calibratio
		ADCx->ADC_CR2 |=(1<<2);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f043 0204 	orr.w	r2, r3, #4
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	609a      	str	r2, [r3, #8]
		while(((ADCx->ADC_CR2>>2)&1)){};
 8001760:	bf00      	nop
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f8      	bne.n	8001762 <ADC_INIT+0x62>


		flag_ADC_INIT=1;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <ADC_INIT+0xb8>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
		ADC2_Clock_DESABLE();
		flag_ADC_INIT=0;
	}


}
 8001776:	e014      	b.n	80017a2 <ADC_INIT+0xa2>
		ADCx->ADC_CR2 &=~(1<<0);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 0201 	bic.w	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]
		ADC1_Clock_DESABLE();
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <ADC_INIT+0xb0>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <ADC_INIT+0xb0>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	60d3      	str	r3, [r2, #12]
		ADC2_Clock_DESABLE();
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <ADC_INIT+0xb0>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <ADC_INIT+0xb0>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	60d3      	str	r3, [r2, #12]
		flag_ADC_INIT=0;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <ADC_INIT+0xb8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40012400 	.word	0x40012400
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40012800 	.word	0x40012800
 80017b8:	20000045 	.word	0x20000045

080017bc <ADC_READ>:





uint16_t ADC_READ(ADC_typeDef* ADCx,uint8_t ADC_pin){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
	if(flag_ADC_INIT){
 80017c8:	4b22      	ldr	r3, [pc, #136]	; (8001854 <ADC_READ+0x98>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d03b      	beq.n	8001848 <ADC_READ+0x8c>

		if(ADC_pin<0b0111)
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d807      	bhi.n	80017e6 <ADC_READ+0x2a>
			pinmode(GPIOA, ADC_pin, GPIO_MODE_ANALOG);
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	481e      	ldr	r0, [pc, #120]	; (8001858 <ADC_READ+0x9c>)
 80017e0:	f7ff fa5a 	bl	8000c98 <pinmode>
 80017e4:	e006      	b.n	80017f4 <ADC_READ+0x38>
		else
			pinmode(GPIOB, ADC_pin, GPIO_MODE_ANALOG);
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	2200      	movs	r2, #0
 80017ec:	4619      	mov	r1, r3
 80017ee:	481b      	ldr	r0, [pc, #108]	; (800185c <ADC_READ+0xa0>)
 80017f0:	f7ff fa52 	bl	8000c98 <pinmode>

		ADCx->ADC_CR2=0;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
		ADCx->ADC_SQR3 =0;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34

		//Bits 4:0 SQ1[4:0]: first conversion in regular sequence
		ADCx->ADC_SQR3 |=(ADC_pin << 0);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	635a      	str	r2, [r3, #52]	; 0x34
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	609a      	str	r2, [r3, #8]
		ADCx->ADC_CR2 |=(1<<0);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
		//		This bit is set by software to start conversion and cleared by hardware as soon as
		//		conversion starts. It starts a conversion of a group of regular channels if SWSTART is
		//		selected as trigger event by the EXTSEL[2:0] bits.
		//		0: Reset state
		//		1: Starts conversion of regular channels
		ADCx->ADC_CR2 |=(1<<22);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	609a      	str	r2, [r3, #8]
		//		Bit 1 EOC: End of conversion
		//		This bit is set by hardware at the end of a group channel conversion (regular or injected). It is
		//		cleared by software or by reading the ADC_DR.
		//		0: Conversion is not complete
		//		1: Conversion complete
		while(! ((ADCx->ADC_SR>>1)&1) ){};
 8001830:	bf00      	nop
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	085b      	lsrs	r3, r3, #1
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f8      	beq.n	8001832 <ADC_READ+0x76>

		return((uint16_t)ADCx->ADC_DR);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001844:	b29b      	uxth	r3, r3
 8001846:	e000      	b.n	800184a <ADC_READ+0x8e>

	}
	else{
		return 0;
 8001848:	2300      	movs	r3, #0
	}


}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000045 	.word	0x20000045
 8001858:	40010800 	.word	0x40010800
 800185c:	40010c00 	.word	0x40010c00

08001860 <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d854      	bhi.n	800191a <Enable_NVIC+0xba>
 8001870:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <Enable_NVIC+0x18>)
 8001872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001876:	bf00      	nop
 8001878:	080018b9 	.word	0x080018b9
 800187c:	080018c7 	.word	0x080018c7
 8001880:	080018d5 	.word	0x080018d5
 8001884:	080018e3 	.word	0x080018e3
 8001888:	080018f1 	.word	0x080018f1
 800188c:	080018ff 	.word	0x080018ff
 8001890:	080018ff 	.word	0x080018ff
 8001894:	080018ff 	.word	0x080018ff
 8001898:	080018ff 	.word	0x080018ff
 800189c:	080018ff 	.word	0x080018ff
 80018a0:	0800190d 	.word	0x0800190d
 80018a4:	0800190d 	.word	0x0800190d
 80018a8:	0800190d 	.word	0x0800190d
 80018ac:	0800190d 	.word	0x0800190d
 80018b0:	0800190d 	.word	0x0800190d
 80018b4:	0800190d 	.word	0x0800190d
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <Enable_NVIC+0xc4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a19      	ldr	r2, [pc, #100]	; (8001924 <Enable_NVIC+0xc4>)
 80018be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c2:	6013      	str	r3, [r2, #0]
		break;
 80018c4:	e029      	b.n	800191a <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <Enable_NVIC+0xc4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a16      	ldr	r2, [pc, #88]	; (8001924 <Enable_NVIC+0xc4>)
 80018cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d0:	6013      	str	r3, [r2, #0]
		break;
 80018d2:	e022      	b.n	800191a <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <Enable_NVIC+0xc4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a12      	ldr	r2, [pc, #72]	; (8001924 <Enable_NVIC+0xc4>)
 80018da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018de:	6013      	str	r3, [r2, #0]
		break;
 80018e0:	e01b      	b.n	800191a <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <Enable_NVIC+0xc4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <Enable_NVIC+0xc4>)
 80018e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ec:	6013      	str	r3, [r2, #0]
		break;
 80018ee:	e014      	b.n	800191a <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <Enable_NVIC+0xc4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <Enable_NVIC+0xc4>)
 80018f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018fa:	6013      	str	r3, [r2, #0]
		break;
 80018fc:	e00d      	b.n	800191a <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <Enable_NVIC+0xc4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <Enable_NVIC+0xc4>)
 8001904:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001908:	6013      	str	r3, [r2, #0]
		break;
 800190a:	e006      	b.n	800191a <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <Enable_NVIC+0xc8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a05      	ldr	r2, [pc, #20]	; (8001928 <Enable_NVIC+0xc8>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001916:	6013      	str	r3, [r2, #0]
		break;
 8001918:	bf00      	nop
	}


}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000e104 	.word	0xe000e104

0800192c <EXTI>:
 * @param [in]      -function_addres : app ISR function
 * @retval          - none
 * Note             -
 *================================================================ */

void EXTI(GPIO_typeDef* PORTx ,uint16_t pin,uint16_t triggercase,void (*function_addres)(interrupt_data* isr_data,uint8_t interupt_num)){
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	817b      	strh	r3, [r7, #10]
 800193a:	4613      	mov	r3, r2
 800193c:	813b      	strh	r3, [r7, #8]

	pinmode(PORTx,pin,GPIO_MODE_INTPUT_AF);//set pin to _INTPUT_AF
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	2204      	movs	r2, #4
 8001942:	4619      	mov	r1, r3
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f7ff f9a7 	bl	8000c98 <pinmode>
	AFIO_Clock_Enable();
 800194a:	4b96      	ldr	r3, [pc, #600]	; (8001ba4 <EXTI+0x278>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	4a95      	ldr	r2, [pc, #596]	; (8001ba4 <EXTI+0x278>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6193      	str	r3, [r2, #24]
	//	0000: PA[x] pin
	//	0001: PB[x] pin
	//	0010: PC[x] pin
	//	0011: PD[x] pin

	switch(pin){
 8001956:	897b      	ldrh	r3, [r7, #10]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	f200 8392 	bhi.w	8002082 <EXTI+0x756>
 800195e:	a201      	add	r2, pc, #4	; (adr r2, 8001964 <EXTI+0x38>)
 8001960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001964:	080019a5 	.word	0x080019a5
 8001968:	08001a0b 	.word	0x08001a0b
 800196c:	08001a71 	.word	0x08001a71
 8001970:	08001ad7 	.word	0x08001ad7
 8001974:	08001b3d 	.word	0x08001b3d
 8001978:	08001bbd 	.word	0x08001bbd
 800197c:	08001c23 	.word	0x08001c23
 8001980:	08001c89 	.word	0x08001c89
 8001984:	08001cef 	.word	0x08001cef
 8001988:	08001d55 	.word	0x08001d55
 800198c:	08001dbb 	.word	0x08001dbb
 8001990:	08001e35 	.word	0x08001e35
 8001994:	08001e9b 	.word	0x08001e9b
 8001998:	08001f01 	.word	0x08001f01
 800199c:	08001f67 	.word	0x08001f67
 80019a0:	08001fcb 	.word	0x08001fcb
	case pin0:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<0);
 80019a4:	4b80      	ldr	r3, [pc, #512]	; (8001ba8 <EXTI+0x27c>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a7f      	ldr	r2, [pc, #508]	; (8001ba8 <EXTI+0x27c>)
 80019aa:	f023 030f 	bic.w	r3, r3, #15
 80019ae:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<0);}
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a7e      	ldr	r2, [pc, #504]	; (8001bac <EXTI+0x280>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d106      	bne.n	80019c6 <EXTI+0x9a>
 80019b8:	4b7b      	ldr	r3, [pc, #492]	; (8001ba8 <EXTI+0x27c>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a7a      	ldr	r2, [pc, #488]	; (8001ba8 <EXTI+0x27c>)
 80019be:	f023 030f 	bic.w	r3, r3, #15
 80019c2:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}

		break;
 80019c4:	e333      	b.n	800202e <EXTI+0x702>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4a79      	ldr	r2, [pc, #484]	; (8001bb0 <EXTI+0x284>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d106      	bne.n	80019dc <EXTI+0xb0>
 80019ce:	4b76      	ldr	r3, [pc, #472]	; (8001ba8 <EXTI+0x27c>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	4a75      	ldr	r2, [pc, #468]	; (8001ba8 <EXTI+0x27c>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6093      	str	r3, [r2, #8]
		break;
 80019da:	e328      	b.n	800202e <EXTI+0x702>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4a75      	ldr	r2, [pc, #468]	; (8001bb4 <EXTI+0x288>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d106      	bne.n	80019f2 <EXTI+0xc6>
 80019e4:	4b70      	ldr	r3, [pc, #448]	; (8001ba8 <EXTI+0x27c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a6f      	ldr	r2, [pc, #444]	; (8001ba8 <EXTI+0x27c>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	6093      	str	r3, [r2, #8]
		break;
 80019f0:	e31d      	b.n	800202e <EXTI+0x702>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4a70      	ldr	r2, [pc, #448]	; (8001bb8 <EXTI+0x28c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	f040 8319 	bne.w	800202e <EXTI+0x702>
 80019fc:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <EXTI+0x27c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a69      	ldr	r2, [pc, #420]	; (8001ba8 <EXTI+0x27c>)
 8001a02:	f043 0303 	orr.w	r3, r3, #3
 8001a06:	6093      	str	r3, [r2, #8]
		break;
 8001a08:	e311      	b.n	800202e <EXTI+0x702>
	case pin1:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<4);
 8001a0a:	4b67      	ldr	r3, [pc, #412]	; (8001ba8 <EXTI+0x27c>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	4a66      	ldr	r2, [pc, #408]	; (8001ba8 <EXTI+0x27c>)
 8001a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a14:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<4);}
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4a64      	ldr	r2, [pc, #400]	; (8001bac <EXTI+0x280>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d106      	bne.n	8001a2c <EXTI+0x100>
 8001a1e:	4b62      	ldr	r3, [pc, #392]	; (8001ba8 <EXTI+0x27c>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4a61      	ldr	r2, [pc, #388]	; (8001ba8 <EXTI+0x27c>)
 8001a24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a28:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}

		break;
 8001a2a:	e302      	b.n	8002032 <EXTI+0x706>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4a60      	ldr	r2, [pc, #384]	; (8001bb0 <EXTI+0x284>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d106      	bne.n	8001a42 <EXTI+0x116>
 8001a34:	4b5c      	ldr	r3, [pc, #368]	; (8001ba8 <EXTI+0x27c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	4a5b      	ldr	r2, [pc, #364]	; (8001ba8 <EXTI+0x27c>)
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	6093      	str	r3, [r2, #8]
		break;
 8001a40:	e2f7      	b.n	8002032 <EXTI+0x706>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4a5b      	ldr	r2, [pc, #364]	; (8001bb4 <EXTI+0x288>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d106      	bne.n	8001a58 <EXTI+0x12c>
 8001a4a:	4b57      	ldr	r3, [pc, #348]	; (8001ba8 <EXTI+0x27c>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	4a56      	ldr	r2, [pc, #344]	; (8001ba8 <EXTI+0x27c>)
 8001a50:	f043 0320 	orr.w	r3, r3, #32
 8001a54:	6093      	str	r3, [r2, #8]
		break;
 8001a56:	e2ec      	b.n	8002032 <EXTI+0x706>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4a57      	ldr	r2, [pc, #348]	; (8001bb8 <EXTI+0x28c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	f040 82e8 	bne.w	8002032 <EXTI+0x706>
 8001a62:	4b51      	ldr	r3, [pc, #324]	; (8001ba8 <EXTI+0x27c>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	4a50      	ldr	r2, [pc, #320]	; (8001ba8 <EXTI+0x27c>)
 8001a68:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001a6c:	6093      	str	r3, [r2, #8]
		break;
 8001a6e:	e2e0      	b.n	8002032 <EXTI+0x706>
	case pin2:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<8);
 8001a70:	4b4d      	ldr	r3, [pc, #308]	; (8001ba8 <EXTI+0x27c>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4a4c      	ldr	r2, [pc, #304]	; (8001ba8 <EXTI+0x27c>)
 8001a76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a7a:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<8);}
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4a4b      	ldr	r2, [pc, #300]	; (8001bac <EXTI+0x280>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d106      	bne.n	8001a92 <EXTI+0x166>
 8001a84:	4b48      	ldr	r3, [pc, #288]	; (8001ba8 <EXTI+0x27c>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4a47      	ldr	r2, [pc, #284]	; (8001ba8 <EXTI+0x27c>)
 8001a8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a8e:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}

		break;
 8001a90:	e2d1      	b.n	8002036 <EXTI+0x70a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4a46      	ldr	r2, [pc, #280]	; (8001bb0 <EXTI+0x284>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d106      	bne.n	8001aa8 <EXTI+0x17c>
 8001a9a:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <EXTI+0x27c>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	4a42      	ldr	r2, [pc, #264]	; (8001ba8 <EXTI+0x27c>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6093      	str	r3, [r2, #8]
		break;
 8001aa6:	e2c6      	b.n	8002036 <EXTI+0x70a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4a42      	ldr	r2, [pc, #264]	; (8001bb4 <EXTI+0x288>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d106      	bne.n	8001abe <EXTI+0x192>
 8001ab0:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <EXTI+0x27c>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <EXTI+0x27c>)
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aba:	6093      	str	r3, [r2, #8]
		break;
 8001abc:	e2bb      	b.n	8002036 <EXTI+0x70a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4a3d      	ldr	r2, [pc, #244]	; (8001bb8 <EXTI+0x28c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	f040 82b7 	bne.w	8002036 <EXTI+0x70a>
 8001ac8:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <EXTI+0x27c>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a36      	ldr	r2, [pc, #216]	; (8001ba8 <EXTI+0x27c>)
 8001ace:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ad2:	6093      	str	r3, [r2, #8]
		break;
 8001ad4:	e2af      	b.n	8002036 <EXTI+0x70a>
	case pin3:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<12);
 8001ad6:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <EXTI+0x27c>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	4a33      	ldr	r2, [pc, #204]	; (8001ba8 <EXTI+0x27c>)
 8001adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ae0:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<12);}
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4a31      	ldr	r2, [pc, #196]	; (8001bac <EXTI+0x280>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d106      	bne.n	8001af8 <EXTI+0x1cc>
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <EXTI+0x27c>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	4a2e      	ldr	r2, [pc, #184]	; (8001ba8 <EXTI+0x27c>)
 8001af0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001af4:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}

		break;
 8001af6:	e2a0      	b.n	800203a <EXTI+0x70e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a2d      	ldr	r2, [pc, #180]	; (8001bb0 <EXTI+0x284>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d106      	bne.n	8001b0e <EXTI+0x1e2>
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <EXTI+0x27c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <EXTI+0x27c>)
 8001b06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b0a:	6093      	str	r3, [r2, #8]
		break;
 8001b0c:	e295      	b.n	800203a <EXTI+0x70e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <EXTI+0x288>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d106      	bne.n	8001b24 <EXTI+0x1f8>
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <EXTI+0x27c>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <EXTI+0x27c>)
 8001b1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b20:	6093      	str	r3, [r2, #8]
		break;
 8001b22:	e28a      	b.n	800203a <EXTI+0x70e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4a24      	ldr	r2, [pc, #144]	; (8001bb8 <EXTI+0x28c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	f040 8286 	bne.w	800203a <EXTI+0x70e>
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <EXTI+0x27c>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <EXTI+0x27c>)
 8001b34:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001b38:	6093      	str	r3, [r2, #8]
		break;
 8001b3a:	e27e      	b.n	800203a <EXTI+0x70e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin4:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<0);
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <EXTI+0x27c>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <EXTI+0x27c>)
 8001b42:	f023 030f 	bic.w	r3, r3, #15
 8001b46:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<0);}
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4a18      	ldr	r2, [pc, #96]	; (8001bac <EXTI+0x280>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d106      	bne.n	8001b5e <EXTI+0x232>
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <EXTI+0x27c>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <EXTI+0x27c>)
 8001b56:	f023 030f 	bic.w	r3, r3, #15
 8001b5a:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}

		break;
 8001b5c:	e26f      	b.n	800203e <EXTI+0x712>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <EXTI+0x284>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d106      	bne.n	8001b74 <EXTI+0x248>
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <EXTI+0x27c>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <EXTI+0x27c>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	60d3      	str	r3, [r2, #12]
		break;
 8001b72:	e264      	b.n	800203e <EXTI+0x712>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <EXTI+0x288>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d106      	bne.n	8001b8a <EXTI+0x25e>
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <EXTI+0x27c>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <EXTI+0x27c>)
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	60d3      	str	r3, [r2, #12]
		break;
 8001b88:	e259      	b.n	800203e <EXTI+0x712>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <EXTI+0x28c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	f040 8255 	bne.w	800203e <EXTI+0x712>
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <EXTI+0x27c>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4a03      	ldr	r2, [pc, #12]	; (8001ba8 <EXTI+0x27c>)
 8001b9a:	f043 0303 	orr.w	r3, r3, #3
 8001b9e:	60d3      	str	r3, [r2, #12]
		break;
 8001ba0:	e24d      	b.n	800203e <EXTI+0x712>
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	40010800 	.word	0x40010800
 8001bb0:	40010c00 	.word	0x40010c00
 8001bb4:	40011000 	.word	0x40011000
 8001bb8:	40011400 	.word	0x40011400
	case pin5:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<4);
 8001bbc:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <EXTI+0x4dc>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4a91      	ldr	r2, [pc, #580]	; (8001e08 <EXTI+0x4dc>)
 8001bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bc6:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<4);}
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a90      	ldr	r2, [pc, #576]	; (8001e0c <EXTI+0x4e0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d106      	bne.n	8001bde <EXTI+0x2b2>
 8001bd0:	4b8d      	ldr	r3, [pc, #564]	; (8001e08 <EXTI+0x4dc>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a8c      	ldr	r2, [pc, #560]	; (8001e08 <EXTI+0x4dc>)
 8001bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bda:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}

		break;
 8001bdc:	e231      	b.n	8002042 <EXTI+0x716>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4a8b      	ldr	r2, [pc, #556]	; (8001e10 <EXTI+0x4e4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d106      	bne.n	8001bf4 <EXTI+0x2c8>
 8001be6:	4b88      	ldr	r3, [pc, #544]	; (8001e08 <EXTI+0x4dc>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	4a87      	ldr	r2, [pc, #540]	; (8001e08 <EXTI+0x4dc>)
 8001bec:	f043 0310 	orr.w	r3, r3, #16
 8001bf0:	60d3      	str	r3, [r2, #12]
		break;
 8001bf2:	e226      	b.n	8002042 <EXTI+0x716>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4a87      	ldr	r2, [pc, #540]	; (8001e14 <EXTI+0x4e8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d106      	bne.n	8001c0a <EXTI+0x2de>
 8001bfc:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <EXTI+0x4dc>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4a81      	ldr	r2, [pc, #516]	; (8001e08 <EXTI+0x4dc>)
 8001c02:	f043 0320 	orr.w	r3, r3, #32
 8001c06:	60d3      	str	r3, [r2, #12]
		break;
 8001c08:	e21b      	b.n	8002042 <EXTI+0x716>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a82      	ldr	r2, [pc, #520]	; (8001e18 <EXTI+0x4ec>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	f040 8217 	bne.w	8002042 <EXTI+0x716>
 8001c14:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <EXTI+0x4dc>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4a7b      	ldr	r2, [pc, #492]	; (8001e08 <EXTI+0x4dc>)
 8001c1a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001c1e:	60d3      	str	r3, [r2, #12]
		break;
 8001c20:	e20f      	b.n	8002042 <EXTI+0x716>
	case pin6:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<8);
 8001c22:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <EXTI+0x4dc>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	4a78      	ldr	r2, [pc, #480]	; (8001e08 <EXTI+0x4dc>)
 8001c28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c2c:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<8);}
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4a76      	ldr	r2, [pc, #472]	; (8001e0c <EXTI+0x4e0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d106      	bne.n	8001c44 <EXTI+0x318>
 8001c36:	4b74      	ldr	r3, [pc, #464]	; (8001e08 <EXTI+0x4dc>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	4a73      	ldr	r2, [pc, #460]	; (8001e08 <EXTI+0x4dc>)
 8001c3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c40:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}

		break;
 8001c42:	e200      	b.n	8002046 <EXTI+0x71a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a72      	ldr	r2, [pc, #456]	; (8001e10 <EXTI+0x4e4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d106      	bne.n	8001c5a <EXTI+0x32e>
 8001c4c:	4b6e      	ldr	r3, [pc, #440]	; (8001e08 <EXTI+0x4dc>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4a6d      	ldr	r2, [pc, #436]	; (8001e08 <EXTI+0x4dc>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c56:	60d3      	str	r3, [r2, #12]
		break;
 8001c58:	e1f5      	b.n	8002046 <EXTI+0x71a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4a6d      	ldr	r2, [pc, #436]	; (8001e14 <EXTI+0x4e8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d106      	bne.n	8001c70 <EXTI+0x344>
 8001c62:	4b69      	ldr	r3, [pc, #420]	; (8001e08 <EXTI+0x4dc>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	4a68      	ldr	r2, [pc, #416]	; (8001e08 <EXTI+0x4dc>)
 8001c68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6c:	60d3      	str	r3, [r2, #12]
		break;
 8001c6e:	e1ea      	b.n	8002046 <EXTI+0x71a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4a69      	ldr	r2, [pc, #420]	; (8001e18 <EXTI+0x4ec>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	f040 81e6 	bne.w	8002046 <EXTI+0x71a>
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <EXTI+0x4dc>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4a62      	ldr	r2, [pc, #392]	; (8001e08 <EXTI+0x4dc>)
 8001c80:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001c84:	60d3      	str	r3, [r2, #12]
		break;
 8001c86:	e1de      	b.n	8002046 <EXTI+0x71a>
	case pin7:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<12);
 8001c88:	4b5f      	ldr	r3, [pc, #380]	; (8001e08 <EXTI+0x4dc>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4a5e      	ldr	r2, [pc, #376]	; (8001e08 <EXTI+0x4dc>)
 8001c8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c92:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<12);}
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a5d      	ldr	r2, [pc, #372]	; (8001e0c <EXTI+0x4e0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d106      	bne.n	8001caa <EXTI+0x37e>
 8001c9c:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <EXTI+0x4dc>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4a59      	ldr	r2, [pc, #356]	; (8001e08 <EXTI+0x4dc>)
 8001ca2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ca6:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}

		break;
 8001ca8:	e1cf      	b.n	800204a <EXTI+0x71e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <EXTI+0x4e4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d106      	bne.n	8001cc0 <EXTI+0x394>
 8001cb2:	4b55      	ldr	r3, [pc, #340]	; (8001e08 <EXTI+0x4dc>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	4a54      	ldr	r2, [pc, #336]	; (8001e08 <EXTI+0x4dc>)
 8001cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cbc:	60d3      	str	r3, [r2, #12]
		break;
 8001cbe:	e1c4      	b.n	800204a <EXTI+0x71e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a54      	ldr	r2, [pc, #336]	; (8001e14 <EXTI+0x4e8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d106      	bne.n	8001cd6 <EXTI+0x3aa>
 8001cc8:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <EXTI+0x4dc>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4a4e      	ldr	r2, [pc, #312]	; (8001e08 <EXTI+0x4dc>)
 8001cce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cd2:	60d3      	str	r3, [r2, #12]
		break;
 8001cd4:	e1b9      	b.n	800204a <EXTI+0x71e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4a4f      	ldr	r2, [pc, #316]	; (8001e18 <EXTI+0x4ec>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	f040 81b5 	bne.w	800204a <EXTI+0x71e>
 8001ce0:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <EXTI+0x4dc>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4a48      	ldr	r2, [pc, #288]	; (8001e08 <EXTI+0x4dc>)
 8001ce6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001cea:	60d3      	str	r3, [r2, #12]
		break;
 8001cec:	e1ad      	b.n	800204a <EXTI+0x71e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin8:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<0);
 8001cee:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <EXTI+0x4dc>)
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <EXTI+0x4dc>)
 8001cf4:	f023 030f 	bic.w	r3, r3, #15
 8001cf8:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<0);}
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4a43      	ldr	r2, [pc, #268]	; (8001e0c <EXTI+0x4e0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d106      	bne.n	8001d10 <EXTI+0x3e4>
 8001d02:	4b41      	ldr	r3, [pc, #260]	; (8001e08 <EXTI+0x4dc>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	4a40      	ldr	r2, [pc, #256]	; (8001e08 <EXTI+0x4dc>)
 8001d08:	f023 030f 	bic.w	r3, r3, #15
 8001d0c:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}

		break;
 8001d0e:	e19e      	b.n	800204e <EXTI+0x722>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4a3f      	ldr	r2, [pc, #252]	; (8001e10 <EXTI+0x4e4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d106      	bne.n	8001d26 <EXTI+0x3fa>
 8001d18:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <EXTI+0x4dc>)
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	4a3a      	ldr	r2, [pc, #232]	; (8001e08 <EXTI+0x4dc>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6113      	str	r3, [r2, #16]
		break;
 8001d24:	e193      	b.n	800204e <EXTI+0x722>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4a3a      	ldr	r2, [pc, #232]	; (8001e14 <EXTI+0x4e8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d106      	bne.n	8001d3c <EXTI+0x410>
 8001d2e:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <EXTI+0x4dc>)
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	4a35      	ldr	r2, [pc, #212]	; (8001e08 <EXTI+0x4dc>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6113      	str	r3, [r2, #16]
		break;
 8001d3a:	e188      	b.n	800204e <EXTI+0x722>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4a36      	ldr	r2, [pc, #216]	; (8001e18 <EXTI+0x4ec>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	f040 8184 	bne.w	800204e <EXTI+0x722>
 8001d46:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <EXTI+0x4dc>)
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	4a2f      	ldr	r2, [pc, #188]	; (8001e08 <EXTI+0x4dc>)
 8001d4c:	f043 0303 	orr.w	r3, r3, #3
 8001d50:	6113      	str	r3, [r2, #16]
		break;
 8001d52:	e17c      	b.n	800204e <EXTI+0x722>
	case pin9:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<4);
 8001d54:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <EXTI+0x4dc>)
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	4a2b      	ldr	r2, [pc, #172]	; (8001e08 <EXTI+0x4dc>)
 8001d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d5e:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<4);}
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a2a      	ldr	r2, [pc, #168]	; (8001e0c <EXTI+0x4e0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d106      	bne.n	8001d76 <EXTI+0x44a>
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <EXTI+0x4dc>)
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	4a26      	ldr	r2, [pc, #152]	; (8001e08 <EXTI+0x4dc>)
 8001d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d72:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}

		break;
 8001d74:	e16d      	b.n	8002052 <EXTI+0x726>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <EXTI+0x4e4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d106      	bne.n	8001d8c <EXTI+0x460>
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <EXTI+0x4dc>)
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <EXTI+0x4dc>)
 8001d84:	f043 0310 	orr.w	r3, r3, #16
 8001d88:	6113      	str	r3, [r2, #16]
		break;
 8001d8a:	e162      	b.n	8002052 <EXTI+0x726>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <EXTI+0x4e8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d106      	bne.n	8001da2 <EXTI+0x476>
 8001d94:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <EXTI+0x4dc>)
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <EXTI+0x4dc>)
 8001d9a:	f043 0320 	orr.w	r3, r3, #32
 8001d9e:	6113      	str	r3, [r2, #16]
		break;
 8001da0:	e157      	b.n	8002052 <EXTI+0x726>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <EXTI+0x4ec>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f040 8153 	bne.w	8002052 <EXTI+0x726>
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <EXTI+0x4dc>)
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	4a15      	ldr	r2, [pc, #84]	; (8001e08 <EXTI+0x4dc>)
 8001db2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001db6:	6113      	str	r3, [r2, #16]
		break;
 8001db8:	e14b      	b.n	8002052 <EXTI+0x726>
	case pin10:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<8);
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <EXTI+0x4dc>)
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <EXTI+0x4dc>)
 8001dc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dc4:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<8);}
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <EXTI+0x4e0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d106      	bne.n	8001ddc <EXTI+0x4b0>
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <EXTI+0x4dc>)
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <EXTI+0x4dc>)
 8001dd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dd8:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}

		break;
 8001dda:	e13c      	b.n	8002056 <EXTI+0x72a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <EXTI+0x4e4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d106      	bne.n	8001df2 <EXTI+0x4c6>
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <EXTI+0x4dc>)
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <EXTI+0x4dc>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6113      	str	r3, [r2, #16]
		break;
 8001df0:	e131      	b.n	8002056 <EXTI+0x72a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <EXTI+0x4e8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d110      	bne.n	8001e1c <EXTI+0x4f0>
 8001dfa:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <EXTI+0x4dc>)
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	4a02      	ldr	r2, [pc, #8]	; (8001e08 <EXTI+0x4dc>)
 8001e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e04:	6113      	str	r3, [r2, #16]
		break;
 8001e06:	e126      	b.n	8002056 <EXTI+0x72a>
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	40010800 	.word	0x40010800
 8001e10:	40010c00 	.word	0x40010c00
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40011400 	.word	0x40011400
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a93      	ldr	r2, [pc, #588]	; (800206c <EXTI+0x740>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	f040 8118 	bne.w	8002056 <EXTI+0x72a>
 8001e26:	4b92      	ldr	r3, [pc, #584]	; (8002070 <EXTI+0x744>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	4a91      	ldr	r2, [pc, #580]	; (8002070 <EXTI+0x744>)
 8001e2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e30:	6113      	str	r3, [r2, #16]
		break;
 8001e32:	e110      	b.n	8002056 <EXTI+0x72a>
	case pin11:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<12);
 8001e34:	4b8e      	ldr	r3, [pc, #568]	; (8002070 <EXTI+0x744>)
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	4a8d      	ldr	r2, [pc, #564]	; (8002070 <EXTI+0x744>)
 8001e3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e3e:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<12);}
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4a8c      	ldr	r2, [pc, #560]	; (8002074 <EXTI+0x748>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d106      	bne.n	8001e56 <EXTI+0x52a>
 8001e48:	4b89      	ldr	r3, [pc, #548]	; (8002070 <EXTI+0x744>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a88      	ldr	r2, [pc, #544]	; (8002070 <EXTI+0x744>)
 8001e4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e52:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}

		break;
 8001e54:	e101      	b.n	800205a <EXTI+0x72e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4a87      	ldr	r2, [pc, #540]	; (8002078 <EXTI+0x74c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d106      	bne.n	8001e6c <EXTI+0x540>
 8001e5e:	4b84      	ldr	r3, [pc, #528]	; (8002070 <EXTI+0x744>)
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	4a83      	ldr	r2, [pc, #524]	; (8002070 <EXTI+0x744>)
 8001e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e68:	6113      	str	r3, [r2, #16]
		break;
 8001e6a:	e0f6      	b.n	800205a <EXTI+0x72e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4a83      	ldr	r2, [pc, #524]	; (800207c <EXTI+0x750>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d106      	bne.n	8001e82 <EXTI+0x556>
 8001e74:	4b7e      	ldr	r3, [pc, #504]	; (8002070 <EXTI+0x744>)
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	4a7d      	ldr	r2, [pc, #500]	; (8002070 <EXTI+0x744>)
 8001e7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e7e:	6113      	str	r3, [r2, #16]
		break;
 8001e80:	e0eb      	b.n	800205a <EXTI+0x72e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4a79      	ldr	r2, [pc, #484]	; (800206c <EXTI+0x740>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	f040 80e7 	bne.w	800205a <EXTI+0x72e>
 8001e8c:	4b78      	ldr	r3, [pc, #480]	; (8002070 <EXTI+0x744>)
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	4a77      	ldr	r2, [pc, #476]	; (8002070 <EXTI+0x744>)
 8001e92:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001e96:	6113      	str	r3, [r2, #16]
		break;
 8001e98:	e0df      	b.n	800205a <EXTI+0x72e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin12:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<0);
 8001e9a:	4b75      	ldr	r3, [pc, #468]	; (8002070 <EXTI+0x744>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4a74      	ldr	r2, [pc, #464]	; (8002070 <EXTI+0x744>)
 8001ea0:	f023 030f 	bic.w	r3, r3, #15
 8001ea4:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<0);}
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4a72      	ldr	r2, [pc, #456]	; (8002074 <EXTI+0x748>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d106      	bne.n	8001ebc <EXTI+0x590>
 8001eae:	4b70      	ldr	r3, [pc, #448]	; (8002070 <EXTI+0x744>)
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	4a6f      	ldr	r2, [pc, #444]	; (8002070 <EXTI+0x744>)
 8001eb4:	f023 030f 	bic.w	r3, r3, #15
 8001eb8:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}

		break;
 8001eba:	e0d0      	b.n	800205e <EXTI+0x732>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a6e      	ldr	r2, [pc, #440]	; (8002078 <EXTI+0x74c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d106      	bne.n	8001ed2 <EXTI+0x5a6>
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <EXTI+0x744>)
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	4a69      	ldr	r2, [pc, #420]	; (8002070 <EXTI+0x744>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6153      	str	r3, [r2, #20]
		break;
 8001ed0:	e0c5      	b.n	800205e <EXTI+0x732>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4a69      	ldr	r2, [pc, #420]	; (800207c <EXTI+0x750>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d106      	bne.n	8001ee8 <EXTI+0x5bc>
 8001eda:	4b65      	ldr	r3, [pc, #404]	; (8002070 <EXTI+0x744>)
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	4a64      	ldr	r2, [pc, #400]	; (8002070 <EXTI+0x744>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6153      	str	r3, [r2, #20]
		break;
 8001ee6:	e0ba      	b.n	800205e <EXTI+0x732>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4a60      	ldr	r2, [pc, #384]	; (800206c <EXTI+0x740>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	f040 80b6 	bne.w	800205e <EXTI+0x732>
 8001ef2:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <EXTI+0x744>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	4a5e      	ldr	r2, [pc, #376]	; (8002070 <EXTI+0x744>)
 8001ef8:	f043 0303 	orr.w	r3, r3, #3
 8001efc:	6153      	str	r3, [r2, #20]
		break;
 8001efe:	e0ae      	b.n	800205e <EXTI+0x732>
	case pin13:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<4);
 8001f00:	4b5b      	ldr	r3, [pc, #364]	; (8002070 <EXTI+0x744>)
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	4a5a      	ldr	r2, [pc, #360]	; (8002070 <EXTI+0x744>)
 8001f06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f0a:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<4);}
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a59      	ldr	r2, [pc, #356]	; (8002074 <EXTI+0x748>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d106      	bne.n	8001f22 <EXTI+0x5f6>
 8001f14:	4b56      	ldr	r3, [pc, #344]	; (8002070 <EXTI+0x744>)
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	4a55      	ldr	r2, [pc, #340]	; (8002070 <EXTI+0x744>)
 8001f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f1e:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}

		break;
 8001f20:	e09f      	b.n	8002062 <EXTI+0x736>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4a54      	ldr	r2, [pc, #336]	; (8002078 <EXTI+0x74c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d106      	bne.n	8001f38 <EXTI+0x60c>
 8001f2a:	4b51      	ldr	r3, [pc, #324]	; (8002070 <EXTI+0x744>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	4a50      	ldr	r2, [pc, #320]	; (8002070 <EXTI+0x744>)
 8001f30:	f043 0310 	orr.w	r3, r3, #16
 8001f34:	6153      	str	r3, [r2, #20]
		break;
 8001f36:	e094      	b.n	8002062 <EXTI+0x736>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4a50      	ldr	r2, [pc, #320]	; (800207c <EXTI+0x750>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d106      	bne.n	8001f4e <EXTI+0x622>
 8001f40:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <EXTI+0x744>)
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	4a4a      	ldr	r2, [pc, #296]	; (8002070 <EXTI+0x744>)
 8001f46:	f043 0320 	orr.w	r3, r3, #32
 8001f4a:	6153      	str	r3, [r2, #20]
		break;
 8001f4c:	e089      	b.n	8002062 <EXTI+0x736>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4a46      	ldr	r2, [pc, #280]	; (800206c <EXTI+0x740>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	f040 8085 	bne.w	8002062 <EXTI+0x736>
 8001f58:	4b45      	ldr	r3, [pc, #276]	; (8002070 <EXTI+0x744>)
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	4a44      	ldr	r2, [pc, #272]	; (8002070 <EXTI+0x744>)
 8001f5e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001f62:	6153      	str	r3, [r2, #20]
		break;
 8001f64:	e07d      	b.n	8002062 <EXTI+0x736>
	case pin14:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<8);
 8001f66:	4b42      	ldr	r3, [pc, #264]	; (8002070 <EXTI+0x744>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	4a41      	ldr	r2, [pc, #260]	; (8002070 <EXTI+0x744>)
 8001f6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f70:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<8);}
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4a3f      	ldr	r2, [pc, #252]	; (8002074 <EXTI+0x748>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d106      	bne.n	8001f88 <EXTI+0x65c>
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <EXTI+0x744>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	4a3c      	ldr	r2, [pc, #240]	; (8002070 <EXTI+0x744>)
 8001f80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f84:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}

		break;
 8001f86:	e06e      	b.n	8002066 <EXTI+0x73a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <EXTI+0x74c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d106      	bne.n	8001f9e <EXTI+0x672>
 8001f90:	4b37      	ldr	r3, [pc, #220]	; (8002070 <EXTI+0x744>)
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	4a36      	ldr	r2, [pc, #216]	; (8002070 <EXTI+0x744>)
 8001f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9a:	6153      	str	r3, [r2, #20]
		break;
 8001f9c:	e063      	b.n	8002066 <EXTI+0x73a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4a36      	ldr	r2, [pc, #216]	; (800207c <EXTI+0x750>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d106      	bne.n	8001fb4 <EXTI+0x688>
 8001fa6:	4b32      	ldr	r3, [pc, #200]	; (8002070 <EXTI+0x744>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	4a31      	ldr	r2, [pc, #196]	; (8002070 <EXTI+0x744>)
 8001fac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb0:	6153      	str	r3, [r2, #20]
		break;
 8001fb2:	e058      	b.n	8002066 <EXTI+0x73a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4a2d      	ldr	r2, [pc, #180]	; (800206c <EXTI+0x740>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d154      	bne.n	8002066 <EXTI+0x73a>
 8001fbc:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <EXTI+0x744>)
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <EXTI+0x744>)
 8001fc2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001fc6:	6153      	str	r3, [r2, #20]
		break;
 8001fc8:	e04d      	b.n	8002066 <EXTI+0x73a>
	case pin15:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<12);
 8001fca:	4b29      	ldr	r3, [pc, #164]	; (8002070 <EXTI+0x744>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	4a28      	ldr	r2, [pc, #160]	; (8002070 <EXTI+0x744>)
 8001fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fd4:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<12);}
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4a26      	ldr	r2, [pc, #152]	; (8002074 <EXTI+0x748>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d106      	bne.n	8001fec <EXTI+0x6c0>
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <EXTI+0x744>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4a23      	ldr	r2, [pc, #140]	; (8002070 <EXTI+0x744>)
 8001fe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fe8:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}

		break;
 8001fea:	e049      	b.n	8002080 <EXTI+0x754>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a22      	ldr	r2, [pc, #136]	; (8002078 <EXTI+0x74c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d106      	bne.n	8002002 <EXTI+0x6d6>
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <EXTI+0x744>)
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <EXTI+0x744>)
 8001ffa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ffe:	6153      	str	r3, [r2, #20]
		break;
 8002000:	e03e      	b.n	8002080 <EXTI+0x754>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a1d      	ldr	r2, [pc, #116]	; (800207c <EXTI+0x750>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d106      	bne.n	8002018 <EXTI+0x6ec>
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <EXTI+0x744>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	4a18      	ldr	r2, [pc, #96]	; (8002070 <EXTI+0x744>)
 8002010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002014:	6153      	str	r3, [r2, #20]
		break;
 8002016:	e033      	b.n	8002080 <EXTI+0x754>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a14      	ldr	r2, [pc, #80]	; (800206c <EXTI+0x740>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d12f      	bne.n	8002080 <EXTI+0x754>
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <EXTI+0x744>)
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	4a12      	ldr	r2, [pc, #72]	; (8002070 <EXTI+0x744>)
 8002026:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800202a:	6153      	str	r3, [r2, #20]
		break;
 800202c:	e028      	b.n	8002080 <EXTI+0x754>
		break;
 800202e:	bf00      	nop
 8002030:	e027      	b.n	8002082 <EXTI+0x756>
		break;
 8002032:	bf00      	nop
 8002034:	e025      	b.n	8002082 <EXTI+0x756>
		break;
 8002036:	bf00      	nop
 8002038:	e023      	b.n	8002082 <EXTI+0x756>
		break;
 800203a:	bf00      	nop
 800203c:	e021      	b.n	8002082 <EXTI+0x756>
		break;
 800203e:	bf00      	nop
 8002040:	e01f      	b.n	8002082 <EXTI+0x756>
		break;
 8002042:	bf00      	nop
 8002044:	e01d      	b.n	8002082 <EXTI+0x756>
		break;
 8002046:	bf00      	nop
 8002048:	e01b      	b.n	8002082 <EXTI+0x756>
		break;
 800204a:	bf00      	nop
 800204c:	e019      	b.n	8002082 <EXTI+0x756>
		break;
 800204e:	bf00      	nop
 8002050:	e017      	b.n	8002082 <EXTI+0x756>
		break;
 8002052:	bf00      	nop
 8002054:	e015      	b.n	8002082 <EXTI+0x756>
		break;
 8002056:	bf00      	nop
 8002058:	e013      	b.n	8002082 <EXTI+0x756>
		break;
 800205a:	bf00      	nop
 800205c:	e011      	b.n	8002082 <EXTI+0x756>
		break;
 800205e:	bf00      	nop
 8002060:	e00f      	b.n	8002082 <EXTI+0x756>
		break;
 8002062:	bf00      	nop
 8002064:	e00d      	b.n	8002082 <EXTI+0x756>
		break;
 8002066:	bf00      	nop
 8002068:	e00b      	b.n	8002082 <EXTI+0x756>
 800206a:	bf00      	nop
 800206c:	40011400 	.word	0x40011400
 8002070:	40010000 	.word	0x40010000
 8002074:	40010800 	.word	0x40010800
 8002078:	40010c00 	.word	0x40010c00
 800207c:	40011000 	.word	0x40011000
		break;
 8002080:	bf00      	nop
	}
	//================================================
	//3- Update Rising or Falling Register
	EXIT->EXTI_RTSR &=~(1<<pin);
 8002082:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <EXTI+0x898>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	897a      	ldrh	r2, [r7, #10]
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f202 	lsl.w	r2, r1, r2
 800208e:	43d2      	mvns	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4a4c      	ldr	r2, [pc, #304]	; (80021c4 <EXTI+0x898>)
 8002094:	400b      	ands	r3, r1
 8002096:	6093      	str	r3, [r2, #8]
	EXIT->EXTI_FTSR &=~(1<<pin);
 8002098:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <EXTI+0x898>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	897a      	ldrh	r2, [r7, #10]
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	43d2      	mvns	r2, r2
 80020a6:	4611      	mov	r1, r2
 80020a8:	4a46      	ldr	r2, [pc, #280]	; (80021c4 <EXTI+0x898>)
 80020aa:	400b      	ands	r3, r1
 80020ac:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 80020ae:	893b      	ldrh	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10a      	bne.n	80020ca <EXTI+0x79e>
		EXIT->EXTI_RTSR |= (1<<pin);
 80020b4:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <EXTI+0x898>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	897a      	ldrh	r2, [r7, #10]
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	4611      	mov	r1, r2
 80020c2:	4a40      	ldr	r2, [pc, #256]	; (80021c4 <EXTI+0x898>)
 80020c4:	430b      	orrs	r3, r1
 80020c6:	6093      	str	r3, [r2, #8]
 80020c8:	e021      	b.n	800210e <EXTI+0x7e2>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 80020ca:	893b      	ldrh	r3, [r7, #8]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d10a      	bne.n	80020e6 <EXTI+0x7ba>
		EXIT->EXTI_FTSR |= (1<<pin);
 80020d0:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <EXTI+0x898>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	897a      	ldrh	r2, [r7, #10]
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	4611      	mov	r1, r2
 80020de:	4a39      	ldr	r2, [pc, #228]	; (80021c4 <EXTI+0x898>)
 80020e0:	430b      	orrs	r3, r1
 80020e2:	60d3      	str	r3, [r2, #12]
 80020e4:	e013      	b.n	800210e <EXTI+0x7e2>
	}
	else{
		EXIT->EXTI_RTSR |= (1<<pin);
 80020e6:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <EXTI+0x898>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	897a      	ldrh	r2, [r7, #10]
 80020ec:	2101      	movs	r1, #1
 80020ee:	fa01 f202 	lsl.w	r2, r1, r2
 80020f2:	4611      	mov	r1, r2
 80020f4:	4a33      	ldr	r2, [pc, #204]	; (80021c4 <EXTI+0x898>)
 80020f6:	430b      	orrs	r3, r1
 80020f8:	6093      	str	r3, [r2, #8]
		EXIT->EXTI_FTSR |= (1<<pin);
 80020fa:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <EXTI+0x898>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	897a      	ldrh	r2, [r7, #10]
 8002100:	2101      	movs	r1, #1
 8002102:	fa01 f202 	lsl.w	r2, r1, r2
 8002106:	4611      	mov	r1, r2
 8002108:	4a2e      	ldr	r2, [pc, #184]	; (80021c4 <EXTI+0x898>)
 800210a:	430b      	orrs	r3, r1
 800210c:	60d3      	str	r3, [r2, #12]
	}


	//4- Update IRQ Handling callback
	ARR_INTERRUPT_TRACK[interrupt_numpers].pin=pin;
 800210e:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <EXTI+0x89c>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	897b      	ldrh	r3, [r7, #10]
 8002116:	b2d9      	uxtb	r1, r3
 8002118:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <EXTI+0x8a0>)
 800211a:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
	if(PORTx==GPIOA)     {ARR_INTERRUPT_TRACK[interrupt_numpers].port=1;}
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <EXTI+0x8a4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d107      	bne.n	8002136 <EXTI+0x80a>
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <EXTI+0x89c>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4a28      	ldr	r2, [pc, #160]	; (80021cc <EXTI+0x8a0>)
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	2201      	movs	r2, #1
 8002132:	705a      	strb	r2, [r3, #1]
 8002134:	e022      	b.n	800217c <EXTI+0x850>
	else if(PORTx==GPIOB){ARR_INTERRUPT_TRACK[interrupt_numpers].port=2;}
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4a26      	ldr	r2, [pc, #152]	; (80021d4 <EXTI+0x8a8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d107      	bne.n	800214e <EXTI+0x822>
 800213e:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <EXTI+0x89c>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4a22      	ldr	r2, [pc, #136]	; (80021cc <EXTI+0x8a0>)
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	2202      	movs	r2, #2
 800214a:	705a      	strb	r2, [r3, #1]
 800214c:	e016      	b.n	800217c <EXTI+0x850>
	else if(PORTx==GPIOC){ARR_INTERRUPT_TRACK[interrupt_numpers].port=3;}
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4a21      	ldr	r2, [pc, #132]	; (80021d8 <EXTI+0x8ac>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d107      	bne.n	8002166 <EXTI+0x83a>
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <EXTI+0x89c>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <EXTI+0x8a0>)
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	2203      	movs	r2, #3
 8002162:	705a      	strb	r2, [r3, #1]
 8002164:	e00a      	b.n	800217c <EXTI+0x850>
	else if(PORTx==GPIOD){ARR_INTERRUPT_TRACK[interrupt_numpers].port=4;}
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <EXTI+0x8b0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d106      	bne.n	800217c <EXTI+0x850>
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <EXTI+0x89c>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	4a16      	ldr	r2, [pc, #88]	; (80021cc <EXTI+0x8a0>)
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	2204      	movs	r2, #4
 800217a:	705a      	strb	r2, [r3, #1]


	GP_IRQ_Callback[interrupt_numpers++] =(void(*)(interrupt_data* isr_data,uint8_t interupt_num))function_addres;
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <EXTI+0x89c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	b2d1      	uxtb	r1, r2
 8002184:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <EXTI+0x89c>)
 8002186:	7011      	strb	r1, [r2, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <EXTI+0x8b4>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(interrupt_numpers>=15){
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <EXTI+0x89c>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b0e      	cmp	r3, #14
 8002198:	d902      	bls.n	80021a0 <EXTI+0x874>
		interrupt_numpers=0;
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <EXTI+0x89c>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
	}

	EXIT->EXTI_IMR |=(1<<pin);
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <EXTI+0x898>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	897a      	ldrh	r2, [r7, #10]
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	4611      	mov	r1, r2
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <EXTI+0x898>)
 80021b0:	430b      	orrs	r3, r1
 80021b2:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 80021b4:	897b      	ldrh	r3, [r7, #10]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fb52 	bl	8001860 <Enable_NVIC>
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40010400 	.word	0x40010400
 80021c8:	20000046 	.word	0x20000046
 80021cc:	200000a0 	.word	0x200000a0
 80021d0:	40010800 	.word	0x40010800
 80021d4:	40010c00 	.word	0x40010c00
 80021d8:	40011000 	.word	0x40011000
 80021dc:	40011400 	.word	0x40011400
 80021e0:	20000064 	.word	0x20000064

080021e4 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <EXTI0_IRQHandler+0x20>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	4a05      	ldr	r2, [pc, #20]	; (8002204 <EXTI0_IRQHandler+0x20>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0](ARR_INTERRUPT_TRACK,0);
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <EXTI0_IRQHandler+0x24>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2100      	movs	r1, #0
 80021fa:	4804      	ldr	r0, [pc, #16]	; (800220c <EXTI0_IRQHandler+0x28>)
 80021fc:	4798      	blx	r3
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40010400 	.word	0x40010400
 8002208:	20000064 	.word	0x20000064
 800220c:	200000a0 	.word	0x200000a0

08002210 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <EXTI1_IRQHandler+0x20>)
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	4a05      	ldr	r2, [pc, #20]	; (8002230 <EXTI1_IRQHandler+0x20>)
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1](ARR_INTERRUPT_TRACK,1);
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <EXTI1_IRQHandler+0x24>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2101      	movs	r1, #1
 8002226:	4804      	ldr	r0, [pc, #16]	; (8002238 <EXTI1_IRQHandler+0x28>)
 8002228:	4798      	blx	r3

}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40010400 	.word	0x40010400
 8002234:	20000064 	.word	0x20000064
 8002238:	200000a0 	.word	0x200000a0

0800223c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <EXTI2_IRQHandler+0x20>)
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	4a05      	ldr	r2, [pc, #20]	; (800225c <EXTI2_IRQHandler+0x20>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2](ARR_INTERRUPT_TRACK,2);
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <EXTI2_IRQHandler+0x24>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2102      	movs	r1, #2
 8002252:	4804      	ldr	r0, [pc, #16]	; (8002264 <EXTI2_IRQHandler+0x28>)
 8002254:	4798      	blx	r3
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40010400 	.word	0x40010400
 8002260:	20000064 	.word	0x20000064
 8002264:	200000a0 	.word	0x200000a0

08002268 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <EXTI3_IRQHandler+0x20>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	4a05      	ldr	r2, [pc, #20]	; (8002288 <EXTI3_IRQHandler+0x20>)
 8002272:	f043 0308 	orr.w	r3, r3, #8
 8002276:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3](ARR_INTERRUPT_TRACK,3);
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <EXTI3_IRQHandler+0x24>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2103      	movs	r1, #3
 800227e:	4804      	ldr	r0, [pc, #16]	; (8002290 <EXTI3_IRQHandler+0x28>)
 8002280:	4798      	blx	r3
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40010400 	.word	0x40010400
 800228c:	20000064 	.word	0x20000064
 8002290:	200000a0 	.word	0x200000a0

08002294 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <EXTI4_IRQHandler+0x20>)
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <EXTI4_IRQHandler+0x20>)
 800229e:	f043 0310 	orr.w	r3, r3, #16
 80022a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4](ARR_INTERRUPT_TRACK,4);
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <EXTI4_IRQHandler+0x24>)
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2104      	movs	r1, #4
 80022aa:	4804      	ldr	r0, [pc, #16]	; (80022bc <EXTI4_IRQHandler+0x28>)
 80022ac:	4798      	blx	r3
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40010400 	.word	0x40010400
 80022b8:	20000064 	.word	0x20000064
 80022bc:	200000a0 	.word	0x200000a0

080022c0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5](ARR_INTERRUPT_TRACK,5);  }
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <EXTI9_5_IRQHandler+0x26>
 80022d0:	4b28      	ldr	r3, [pc, #160]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	4a27      	ldr	r2, [pc, #156]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 80022d6:	f043 0320 	orr.w	r3, r3, #32
 80022da:	6153      	str	r3, [r2, #20]
 80022dc:	4b26      	ldr	r3, [pc, #152]	; (8002378 <EXTI9_5_IRQHandler+0xb8>)
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	2105      	movs	r1, #5
 80022e2:	4826      	ldr	r0, [pc, #152]	; (800237c <EXTI9_5_IRQHandler+0xbc>)
 80022e4:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6](ARR_INTERRUPT_TRACK,6);  }
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <EXTI9_5_IRQHandler+0x48>
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 80022f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022fc:	6153      	str	r3, [r2, #20]
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <EXTI9_5_IRQHandler+0xb8>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2106      	movs	r1, #6
 8002304:	481d      	ldr	r0, [pc, #116]	; (800237c <EXTI9_5_IRQHandler+0xbc>)
 8002306:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7](ARR_INTERRUPT_TRACK,7);  }
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <EXTI9_5_IRQHandler+0x6a>
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	4a16      	ldr	r2, [pc, #88]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 800231a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231e:	6153      	str	r3, [r2, #20]
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <EXTI9_5_IRQHandler+0xb8>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2107      	movs	r1, #7
 8002326:	4815      	ldr	r0, [pc, #84]	; (800237c <EXTI9_5_IRQHandler+0xbc>)
 8002328:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8](ARR_INTERRUPT_TRACK,8);  }
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <EXTI9_5_IRQHandler+0x8c>
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	6153      	str	r3, [r2, #20]
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <EXTI9_5_IRQHandler+0xb8>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	2108      	movs	r1, #8
 8002348:	480c      	ldr	r0, [pc, #48]	; (800237c <EXTI9_5_IRQHandler+0xbc>)
 800234a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9](ARR_INTERRUPT_TRACK,9);  }
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <EXTI9_5_IRQHandler+0xae>
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	4a05      	ldr	r2, [pc, #20]	; (8002374 <EXTI9_5_IRQHandler+0xb4>)
 800235e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002362:	6153      	str	r3, [r2, #20]
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <EXTI9_5_IRQHandler+0xb8>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	2109      	movs	r1, #9
 800236a:	4804      	ldr	r0, [pc, #16]	; (800237c <EXTI9_5_IRQHandler+0xbc>)
 800236c:	4798      	blx	r3
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40010400 	.word	0x40010400
 8002378:	20000064 	.word	0x20000064
 800237c:	200000a0 	.word	0x200000a0

08002380 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10](ARR_INTERRUPT_TRACK,10);  }
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <EXTI15_10_IRQHandler+0x26>
 8002390:	4b30      	ldr	r3, [pc, #192]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	4a2f      	ldr	r2, [pc, #188]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 8002396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239a:	6153      	str	r3, [r2, #20]
 800239c:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <EXTI15_10_IRQHandler+0xd8>)
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	210a      	movs	r1, #10
 80023a2:	482e      	ldr	r0, [pc, #184]	; (800245c <EXTI15_10_IRQHandler+0xdc>)
 80023a4:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11](ARR_INTERRUPT_TRACK,11);  }
 80023a6:	4b2b      	ldr	r3, [pc, #172]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <EXTI15_10_IRQHandler+0x48>
 80023b2:	4b28      	ldr	r3, [pc, #160]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	4a27      	ldr	r2, [pc, #156]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 80023b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023bc:	6153      	str	r3, [r2, #20]
 80023be:	4b26      	ldr	r3, [pc, #152]	; (8002458 <EXTI15_10_IRQHandler+0xd8>)
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	210b      	movs	r1, #11
 80023c4:	4825      	ldr	r0, [pc, #148]	; (800245c <EXTI15_10_IRQHandler+0xdc>)
 80023c6:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12](ARR_INTERRUPT_TRACK,12);  }
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <EXTI15_10_IRQHandler+0x6a>
 80023d4:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 80023da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023de:	6153      	str	r3, [r2, #20]
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <EXTI15_10_IRQHandler+0xd8>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	210c      	movs	r1, #12
 80023e6:	481d      	ldr	r0, [pc, #116]	; (800245c <EXTI15_10_IRQHandler+0xdc>)
 80023e8:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13](ARR_INTERRUPT_TRACK,13);  }
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <EXTI15_10_IRQHandler+0x8c>
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	4a16      	ldr	r2, [pc, #88]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 80023fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002400:	6153      	str	r3, [r2, #20]
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <EXTI15_10_IRQHandler+0xd8>)
 8002404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002406:	210d      	movs	r1, #13
 8002408:	4814      	ldr	r0, [pc, #80]	; (800245c <EXTI15_10_IRQHandler+0xdc>)
 800240a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14](ARR_INTERRUPT_TRACK,14);  }
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <EXTI15_10_IRQHandler+0xae>
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 800241e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002422:	6153      	str	r3, [r2, #20]
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <EXTI15_10_IRQHandler+0xd8>)
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	210e      	movs	r1, #14
 800242a:	480c      	ldr	r0, [pc, #48]	; (800245c <EXTI15_10_IRQHandler+0xdc>)
 800242c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15](ARR_INTERRUPT_TRACK,15);  }
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <EXTI15_10_IRQHandler+0xd0>
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <EXTI15_10_IRQHandler+0xd4>)
 8002440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002444:	6153      	str	r3, [r2, #20]
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <EXTI15_10_IRQHandler+0xd8>)
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	210f      	movs	r1, #15
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <EXTI15_10_IRQHandler+0xdc>)
 800244e:	4798      	blx	r3

}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40010400 	.word	0x40010400
 8002458:	20000064 	.word	0x20000064
 800245c:	200000a0 	.word	0x200000a0

08002460 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
	//slave only todo
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
	//slave only todo
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <USART_SEND>:
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );


}
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	0b1b      	lsrs	r3, r3, #12
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d106      	bne.n	800249e <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 800249c:	e004      	b.n	80024a8 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	605a      	str	r2, [r3, #4]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
	...

080024b4 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80024ba:	4b56      	ldr	r3, [pc, #344]	; (8002614 <USART1_IRQHandler+0x160>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	09db      	lsrs	r3, r3, #7
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d122      	bne.n	8002510 <USART1_IRQHandler+0x5c>
 80024ca:	4b52      	ldr	r3, [pc, #328]	; (8002614 <USART1_IRQHandler+0x160>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	09db      	lsrs	r3, r3, #7
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d11a      	bne.n	8002510 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 80024da:	4b4f      	ldr	r3, [pc, #316]	; (8002618 <USART1_IRQHandler+0x164>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00d      	beq.n	8002500 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 80024e4:	4b4b      	ldr	r3, [pc, #300]	; (8002614 <USART1_IRQHandler+0x160>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <USART1_IRQHandler+0x164>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	4610      	mov	r0, r2
 80024f0:	f7ff ffc2 	bl	8002478 <USART_SEND>
			++arr_data[0];
 80024f4:	4b48      	ldr	r3, [pc, #288]	; (8002618 <USART1_IRQHandler+0x164>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	4a47      	ldr	r2, [pc, #284]	; (8002618 <USART1_IRQHandler+0x164>)
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e007      	b.n	8002510 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 8002500:	4b44      	ldr	r3, [pc, #272]	; (8002614 <USART1_IRQHandler+0x160>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <USART1_IRQHandler+0x160>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800250e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 8002510:	4b40      	ldr	r3, [pc, #256]	; (8002614 <USART1_IRQHandler+0x160>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d166      	bne.n	80025ee <USART1_IRQHandler+0x13a>
 8002520:	4b3c      	ldr	r3, [pc, #240]	; (8002614 <USART1_IRQHandler+0x160>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d15e      	bne.n	80025ee <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 8002530:	4b38      	ldr	r3, [pc, #224]	; (8002614 <USART1_IRQHandler+0x160>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	0b1b      	lsrs	r3, r3, #12
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d117      	bne.n	8002570 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8002540:	4b34      	ldr	r3, [pc, #208]	; (8002614 <USART1_IRQHandler+0x160>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	0a9b      	lsrs	r3, r3, #10
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d108      	bne.n	8002562 <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8002550:	4b30      	ldr	r3, [pc, #192]	; (8002614 <USART1_IRQHandler+0x160>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	b29b      	uxth	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	b29a      	uxth	r2, r3
 800255c:	4b2f      	ldr	r3, [pc, #188]	; (800261c <USART1_IRQHandler+0x168>)
 800255e:	801a      	strh	r2, [r3, #0]
 8002560:	e020      	b.n	80025a4 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 8002562:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <USART1_IRQHandler+0x160>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b2c      	ldr	r3, [pc, #176]	; (800261c <USART1_IRQHandler+0x168>)
 800256c:	801a      	strh	r2, [r3, #0]
 800256e:	e019      	b.n	80025a4 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8002570:	4b28      	ldr	r3, [pc, #160]	; (8002614 <USART1_IRQHandler+0x160>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	0a9b      	lsrs	r3, r3, #10
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d109      	bne.n	8002594 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 8002580:	4b24      	ldr	r3, [pc, #144]	; (8002614 <USART1_IRQHandler+0x160>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	b29b      	uxth	r3, r3
 8002588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800258c:	b29a      	uxth	r2, r3
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <USART1_IRQHandler+0x168>)
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	e007      	b.n	80025a4 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8002594:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <USART1_IRQHandler+0x160>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	b29b      	uxth	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	b29a      	uxth	r2, r3
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <USART1_IRQHandler+0x168>)
 80025a2:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 80025a4:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <USART1_IRQHandler+0x16c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	e002      	b.n	80025b6 <USART1_IRQHandler+0x102>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3301      	adds	r3, #1
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80025bc:	4293      	cmp	r3, r2
 80025be:	ddf7      	ble.n	80025b0 <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <USART1_IRQHandler+0x160>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <USART1_IRQHandler+0x160>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0220 	bic.w	r2, r2, #32
 80025ce:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 80025d0:	4b10      	ldr	r3, [pc, #64]	; (8002614 <USART1_IRQHandler+0x160>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <USART1_IRQHandler+0x170>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <USART1_IRQHandler+0x160>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <USART1_IRQHandler+0x160>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0220 	bic.w	r2, r2, #32
 80025ec:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <USART1_IRQHandler+0x160>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <USART1_IRQHandler+0x170>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <USART1_IRQHandler+0x160>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <USART1_IRQHandler+0x160>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0220 	bic.w	r2, r2, #32
 800260a:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200000c0 	.word	0x200000c0
 8002618:	200000d4 	.word	0x200000d4
 800261c:	200000cc 	.word	0x200000cc
 8002620:	200000e0 	.word	0x200000e0
 8002624:	40013800 	.word	0x40013800

08002628 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800262e:	4b56      	ldr	r3, [pc, #344]	; (8002788 <USART2_IRQHandler+0x160>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	09db      	lsrs	r3, r3, #7
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d122      	bne.n	8002684 <USART2_IRQHandler+0x5c>
 800263e:	4b52      	ldr	r3, [pc, #328]	; (8002788 <USART2_IRQHandler+0x160>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	09db      	lsrs	r3, r3, #7
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d11a      	bne.n	8002684 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 800264e:	4b4f      	ldr	r3, [pc, #316]	; (800278c <USART2_IRQHandler+0x164>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00d      	beq.n	8002674 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 8002658:	4b4b      	ldr	r3, [pc, #300]	; (8002788 <USART2_IRQHandler+0x160>)
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4b4b      	ldr	r3, [pc, #300]	; (800278c <USART2_IRQHandler+0x164>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4619      	mov	r1, r3
 8002662:	4610      	mov	r0, r2
 8002664:	f7ff ff08 	bl	8002478 <USART_SEND>
			++arr_data[1];
 8002668:	4b48      	ldr	r3, [pc, #288]	; (800278c <USART2_IRQHandler+0x164>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	3301      	adds	r3, #1
 800266e:	4a47      	ldr	r2, [pc, #284]	; (800278c <USART2_IRQHandler+0x164>)
 8002670:	6053      	str	r3, [r2, #4]
 8002672:	e007      	b.n	8002684 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8002674:	4b44      	ldr	r3, [pc, #272]	; (8002788 <USART2_IRQHandler+0x160>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	4b43      	ldr	r3, [pc, #268]	; (8002788 <USART2_IRQHandler+0x160>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002682:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8002684:	4b40      	ldr	r3, [pc, #256]	; (8002788 <USART2_IRQHandler+0x160>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b01      	cmp	r3, #1
 8002692:	d166      	bne.n	8002762 <USART2_IRQHandler+0x13a>
 8002694:	4b3c      	ldr	r3, [pc, #240]	; (8002788 <USART2_IRQHandler+0x160>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d15e      	bne.n	8002762 <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 80026a4:	4b38      	ldr	r3, [pc, #224]	; (8002788 <USART2_IRQHandler+0x160>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	0b1b      	lsrs	r3, r3, #12
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d117      	bne.n	80026e4 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 80026b4:	4b34      	ldr	r3, [pc, #208]	; (8002788 <USART2_IRQHandler+0x160>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d108      	bne.n	80026d6 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 80026c4:	4b30      	ldr	r3, [pc, #192]	; (8002788 <USART2_IRQHandler+0x160>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <USART2_IRQHandler+0x168>)
 80026d2:	805a      	strh	r2, [r3, #2]
 80026d4:	e020      	b.n	8002718 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 80026d6:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <USART2_IRQHandler+0x160>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <USART2_IRQHandler+0x168>)
 80026e0:	805a      	strh	r2, [r3, #2]
 80026e2:	e019      	b.n	8002718 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 80026e4:	4b28      	ldr	r3, [pc, #160]	; (8002788 <USART2_IRQHandler+0x160>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d109      	bne.n	8002708 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 80026f4:	4b24      	ldr	r3, [pc, #144]	; (8002788 <USART2_IRQHandler+0x160>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002700:	b29a      	uxth	r2, r3
 8002702:	4b23      	ldr	r3, [pc, #140]	; (8002790 <USART2_IRQHandler+0x168>)
 8002704:	805a      	strh	r2, [r3, #2]
 8002706:	e007      	b.n	8002718 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8002708:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <USART2_IRQHandler+0x160>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	b29b      	uxth	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	b29a      	uxth	r2, r3
 8002714:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <USART2_IRQHandler+0x168>)
 8002716:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <USART2_IRQHandler+0x16c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	e002      	b.n	800272a <USART2_IRQHandler+0x102>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3301      	adds	r3, #1
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002730:	4293      	cmp	r3, r2
 8002732:	ddf7      	ble.n	8002724 <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <USART2_IRQHandler+0x160>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <USART2_IRQHandler+0x160>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f022 0220 	bic.w	r2, r2, #32
 8002742:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 8002744:	4b10      	ldr	r3, [pc, #64]	; (8002788 <USART2_IRQHandler+0x160>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <USART2_IRQHandler+0x170>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	b29b      	uxth	r3, r3
 8002750:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <USART2_IRQHandler+0x160>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <USART2_IRQHandler+0x160>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f022 0220 	bic.w	r2, r2, #32
 8002760:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <USART2_IRQHandler+0x160>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <USART2_IRQHandler+0x170>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	b29b      	uxth	r3, r3
 800276e:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <USART2_IRQHandler+0x160>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <USART2_IRQHandler+0x160>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f022 0220 	bic.w	r2, r2, #32
 800277e:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200000c0 	.word	0x200000c0
 800278c:	200000d4 	.word	0x200000d4
 8002790:	200000cc 	.word	0x200000cc
 8002794:	200000e0 	.word	0x200000e0
 8002798:	40004400 	.word	0x40004400

0800279c <USART3_IRQHandler>:
void USART3_IRQHandler(){
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80027a2:	4b56      	ldr	r3, [pc, #344]	; (80028fc <USART3_IRQHandler+0x160>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	09db      	lsrs	r3, r3, #7
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d122      	bne.n	80027f8 <USART3_IRQHandler+0x5c>
 80027b2:	4b52      	ldr	r3, [pc, #328]	; (80028fc <USART3_IRQHandler+0x160>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	09db      	lsrs	r3, r3, #7
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d11a      	bne.n	80027f8 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 80027c2:	4b4f      	ldr	r3, [pc, #316]	; (8002900 <USART3_IRQHandler+0x164>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 80027cc:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <USART3_IRQHandler+0x160>)
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	4b4b      	ldr	r3, [pc, #300]	; (8002900 <USART3_IRQHandler+0x164>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f7ff fe4e 	bl	8002478 <USART_SEND>
			++arr_data[2];
 80027dc:	4b48      	ldr	r3, [pc, #288]	; (8002900 <USART3_IRQHandler+0x164>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	3301      	adds	r3, #1
 80027e2:	4a47      	ldr	r2, [pc, #284]	; (8002900 <USART3_IRQHandler+0x164>)
 80027e4:	6093      	str	r3, [r2, #8]
 80027e6:	e007      	b.n	80027f8 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 80027e8:	4b44      	ldr	r3, [pc, #272]	; (80028fc <USART3_IRQHandler+0x160>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	4b43      	ldr	r3, [pc, #268]	; (80028fc <USART3_IRQHandler+0x160>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027f6:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 80027f8:	4b40      	ldr	r3, [pc, #256]	; (80028fc <USART3_IRQHandler+0x160>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d166      	bne.n	80028d6 <USART3_IRQHandler+0x13a>
 8002808:	4b3c      	ldr	r3, [pc, #240]	; (80028fc <USART3_IRQHandler+0x160>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	d15e      	bne.n	80028d6 <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 8002818:	4b38      	ldr	r3, [pc, #224]	; (80028fc <USART3_IRQHandler+0x160>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	0b1b      	lsrs	r3, r3, #12
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d117      	bne.n	8002858 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8002828:	4b34      	ldr	r3, [pc, #208]	; (80028fc <USART3_IRQHandler+0x160>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	0a9b      	lsrs	r3, r3, #10
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	d108      	bne.n	800284a <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8002838:	4b30      	ldr	r3, [pc, #192]	; (80028fc <USART3_IRQHandler+0x160>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	b29b      	uxth	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <USART3_IRQHandler+0x168>)
 8002846:	809a      	strh	r2, [r3, #4]
 8002848:	e020      	b.n	800288c <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <USART3_IRQHandler+0x160>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	b29a      	uxth	r2, r3
 8002852:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <USART3_IRQHandler+0x168>)
 8002854:	809a      	strh	r2, [r3, #4]
 8002856:	e019      	b.n	800288c <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8002858:	4b28      	ldr	r3, [pc, #160]	; (80028fc <USART3_IRQHandler+0x160>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	0a9b      	lsrs	r3, r3, #10
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d109      	bne.n	800287c <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <USART3_IRQHandler+0x160>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	b29b      	uxth	r3, r3
 8002870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002874:	b29a      	uxth	r2, r3
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <USART3_IRQHandler+0x168>)
 8002878:	809a      	strh	r2, [r3, #4]
 800287a:	e007      	b.n	800288c <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <USART3_IRQHandler+0x160>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	b29b      	uxth	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <USART3_IRQHandler+0x168>)
 800288a:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <USART3_IRQHandler+0x16c>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	e002      	b.n	800289e <USART3_IRQHandler+0x102>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3301      	adds	r3, #1
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80028a4:	4293      	cmp	r3, r2
 80028a6:	ddf7      	ble.n	8002898 <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <USART3_IRQHandler+0x160>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <USART3_IRQHandler+0x160>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f022 0220 	bic.w	r2, r2, #32
 80028b6:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <USART3_IRQHandler+0x160>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <USART3_IRQHandler+0x170>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <USART3_IRQHandler+0x160>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <USART3_IRQHandler+0x160>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f022 0220 	bic.w	r2, r2, #32
 80028d4:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <USART3_IRQHandler+0x160>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <USART3_IRQHandler+0x170>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <USART3_IRQHandler+0x160>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b04      	ldr	r3, [pc, #16]	; (80028fc <USART3_IRQHandler+0x160>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f022 0220 	bic.w	r2, r2, #32
 80028f2:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	200000c0 	.word	0x200000c0
 8002900:	200000d4 	.word	0x200000d4
 8002904:	200000cc 	.word	0x200000cc
 8002908:	200000e0 	.word	0x200000e0
 800290c:	40004800 	.word	0x40004800

08002910 <__libc_init_array>:
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	2500      	movs	r5, #0
 8002914:	4e0c      	ldr	r6, [pc, #48]	; (8002948 <__libc_init_array+0x38>)
 8002916:	4c0d      	ldr	r4, [pc, #52]	; (800294c <__libc_init_array+0x3c>)
 8002918:	1ba4      	subs	r4, r4, r6
 800291a:	10a4      	asrs	r4, r4, #2
 800291c:	42a5      	cmp	r5, r4
 800291e:	d109      	bne.n	8002934 <__libc_init_array+0x24>
 8002920:	f000 f81a 	bl	8002958 <_init>
 8002924:	2500      	movs	r5, #0
 8002926:	4e0a      	ldr	r6, [pc, #40]	; (8002950 <__libc_init_array+0x40>)
 8002928:	4c0a      	ldr	r4, [pc, #40]	; (8002954 <__libc_init_array+0x44>)
 800292a:	1ba4      	subs	r4, r4, r6
 800292c:	10a4      	asrs	r4, r4, #2
 800292e:	42a5      	cmp	r5, r4
 8002930:	d105      	bne.n	800293e <__libc_init_array+0x2e>
 8002932:	bd70      	pop	{r4, r5, r6, pc}
 8002934:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002938:	4798      	blx	r3
 800293a:	3501      	adds	r5, #1
 800293c:	e7ee      	b.n	800291c <__libc_init_array+0xc>
 800293e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002942:	4798      	blx	r3
 8002944:	3501      	adds	r5, #1
 8002946:	e7f2      	b.n	800292e <__libc_init_array+0x1e>
 8002948:	08002970 	.word	0x08002970
 800294c:	08002970 	.word	0x08002970
 8002950:	08002970 	.word	0x08002970
 8002954:	08002974 	.word	0x08002974

08002958 <_init>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr

08002964 <_fini>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr
