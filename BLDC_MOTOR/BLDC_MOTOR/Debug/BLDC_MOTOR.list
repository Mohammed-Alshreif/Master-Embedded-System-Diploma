
BLDC_MOTOR.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003690  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037fc  080037fc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080037fc  080037fc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037fc  080037fc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000088  0800388c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  0800388c  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e26  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011e2  00000000  00000000  00026ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002e8  00000000  00000000  000280c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000250  00000000  00000000  000283a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000349e  00000000  00000000  000285f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000041fd  00000000  00000000  0002ba96  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b25b  00000000  00000000  0002fc93  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003aeee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e1c  00000000  00000000  0003af6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000088 	.word	0x20000088
 800014c:	00000000 	.word	0x00000000
 8000150:	080037a8 	.word	0x080037a8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000008c 	.word	0x2000008c
 800016c:	080037a8 	.word	0x080037a8

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	d1ed      	bne.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <s1>:
uint32_t TIME_CALC;
uint8_t buf[7];

int encoder_pulses,MOTOR_SPEED_RPM;
uint8_t stop_flage,flag_SPEED;
void s1(){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	hall1state=READ_PIN(GPIOA, pin0);
 800075e:	2100      	movs	r1, #0
 8000760:	4815      	ldr	r0, [pc, #84]	; (80007b8 <s1+0x60>)
 8000762:	f000 fd3d 	bl	80011e0 <READ_PIN>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <s1+0x64>)
 800076c:	701a      	strb	r2, [r3, #0]

	int X = READ_PIN(GPIOA, pin1);
 800076e:	2101      	movs	r1, #1
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <s1+0x60>)
 8000772:	f000 fd35 	bl	80011e0 <READ_PIN>
 8000776:	4603      	mov	r3, r0
 8000778:	607b      	str	r3, [r7, #4]
	if(hall1state==1){
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <s1+0x64>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d10d      	bne.n	800079e <s1+0x46>
		if(X > 0){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dd05      	ble.n	8000794 <s1+0x3c>
			encoder_pulses++;
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <s1+0x68>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <s1+0x68>)
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	e004      	b.n	800079e <s1+0x46>
		}
		else{
			encoder_pulses--;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <s1+0x68>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3b01      	subs	r3, #1
 800079a:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <s1+0x68>)
 800079c:	6013      	str	r3, [r2, #0]
		}
	}

	if(MOTOR_DIRECTION==0){
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <s1+0x6c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d102      	bne.n	80007ac <s1+0x54>
		NextStep();
 80007a6:	f000 f86f 	bl	8000888 <NextStep>
	}
	else {
		NextStep_REVERS();
	}

}
 80007aa:	e001      	b.n	80007b0 <s1+0x58>
		NextStep_REVERS();
 80007ac:	f000 f8e2 	bl	8000974 <NextStep_REVERS>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40010800 	.word	0x40010800
 80007bc:	20000000 	.word	0x20000000
 80007c0:	200000c8 	.word	0x200000c8
 80007c4:	200000c4 	.word	0x200000c4

080007c8 <s2>:
void s2(){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

	if(flag_SPEED==0){
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <s2+0x58>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d107      	bne.n	80007e4 <s2+0x1c>
		TIME_CALCULATION(clk, TIMER_START);
 80007d4:	2101      	movs	r1, #1
 80007d6:	4813      	ldr	r0, [pc, #76]	; (8000824 <s2+0x5c>)
 80007d8:	f000 fe86 	bl	80014e8 <TIME_CALCULATION>
		flag_SPEED=1;
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <s2+0x58>)
 80007de:	2201      	movs	r2, #1
 80007e0:	701a      	strb	r2, [r3, #0]
 80007e2:	e009      	b.n	80007f8 <s2+0x30>
	}
	else{
		TIME_CALC=TIME_CALCULATION(clk, TIMER_STOP);
 80007e4:	2100      	movs	r1, #0
 80007e6:	480f      	ldr	r0, [pc, #60]	; (8000824 <s2+0x5c>)
 80007e8:	f000 fe7e 	bl	80014e8 <TIME_CALCULATION>
 80007ec:	4602      	mov	r2, r0
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <s2+0x60>)
 80007f0:	601a      	str	r2, [r3, #0]
		flag_SPEED=0;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <s2+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
	}

	hall2state=READ_PIN(GPIOA, pin1);
 80007f8:	2101      	movs	r1, #1
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <s2+0x64>)
 80007fc:	f000 fcf0 	bl	80011e0 <READ_PIN>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <s2+0x68>)
 8000806:	701a      	strb	r2, [r3, #0]

	if(MOTOR_DIRECTION==0){
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <s2+0x6c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <s2+0x4e>
		NextStep();
 8000810:	f000 f83a 	bl	8000888 <NextStep>
	}
	else {
		NextStep_REVERS();
	}
}
 8000814:	e001      	b.n	800081a <s2+0x52>
		NextStep_REVERS();
 8000816:	f000 f8ad 	bl	8000974 <NextStep_REVERS>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000dc 	.word	0x200000dc
 8000824:	02255100 	.word	0x02255100
 8000828:	200000e0 	.word	0x200000e0
 800082c:	40010800 	.word	0x40010800
 8000830:	200000a5 	.word	0x200000a5
 8000834:	200000c4 	.word	0x200000c4

08000838 <s3>:
void s3(){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	for(int i=0;i<500;i++);
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	e002      	b.n	800084a <s3+0x12>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3301      	adds	r3, #1
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000850:	dbf8      	blt.n	8000844 <s3+0xc>
	hall3state=READ_PIN(GPIOA, pin2);
 8000852:	2102      	movs	r1, #2
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <s3+0x44>)
 8000856:	f000 fcc3 	bl	80011e0 <READ_PIN>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <s3+0x48>)
 8000860:	701a      	strb	r2, [r3, #0]
	if(MOTOR_DIRECTION==0){
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <s3+0x4c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d102      	bne.n	8000870 <s3+0x38>
		NextStep();
 800086a:	f000 f80d 	bl	8000888 <NextStep>
	}
	else {
		NextStep_REVERS();
	}
}
 800086e:	e001      	b.n	8000874 <s3+0x3c>
		NextStep_REVERS();
 8000870:	f000 f880 	bl	8000974 <NextStep_REVERS>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40010800 	.word	0x40010800
 8000880:	20000001 	.word	0x20000001
 8000884:	200000c4 	.word	0x200000c4

08000888 <NextStep>:

void NextStep() {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af02      	add	r7, sp, #8
	if ((hall1state == 1) && (hall2state == 0) && (hall3state == 1)) {
 800088e:	4b32      	ldr	r3, [pc, #200]	; (8000958 <NextStep+0xd0>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d10a      	bne.n	80008ac <NextStep+0x24>
 8000896:	4b31      	ldr	r3, [pc, #196]	; (800095c <NextStep+0xd4>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d106      	bne.n	80008ac <NextStep+0x24>
 800089e:	4b30      	ldr	r3, [pc, #192]	; (8000960 <NextStep+0xd8>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d102      	bne.n	80008ac <NextStep+0x24>
		MOTOR_state = 0;
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <NextStep+0xdc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 0) && (hall3state == 1)) {
 80008ac:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <NextStep+0xd0>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d10a      	bne.n	80008ca <NextStep+0x42>
 80008b4:	4b29      	ldr	r3, [pc, #164]	; (800095c <NextStep+0xd4>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d106      	bne.n	80008ca <NextStep+0x42>
 80008bc:	4b28      	ldr	r3, [pc, #160]	; (8000960 <NextStep+0xd8>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d102      	bne.n	80008ca <NextStep+0x42>
		MOTOR_state = 1;
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <NextStep+0xdc>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 1) && (hall3state == 1)) {
 80008ca:	4b23      	ldr	r3, [pc, #140]	; (8000958 <NextStep+0xd0>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d10a      	bne.n	80008e8 <NextStep+0x60>
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <NextStep+0xd4>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d106      	bne.n	80008e8 <NextStep+0x60>
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <NextStep+0xd8>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d102      	bne.n	80008e8 <NextStep+0x60>
		MOTOR_state = 2;
 80008e2:	4b20      	ldr	r3, [pc, #128]	; (8000964 <NextStep+0xdc>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 0) && (hall2state == 1) && (hall3state == 0)) {
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <NextStep+0xd0>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d10a      	bne.n	8000906 <NextStep+0x7e>
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <NextStep+0xd4>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d106      	bne.n	8000906 <NextStep+0x7e>
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <NextStep+0xd8>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <NextStep+0x7e>
		MOTOR_state = 3;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <NextStep+0xdc>)
 8000902:	2203      	movs	r2, #3
 8000904:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 1) && (hall2state == 1) && (hall3state == 0)) {
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <NextStep+0xd0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d10a      	bne.n	8000924 <NextStep+0x9c>
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <NextStep+0xd4>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d106      	bne.n	8000924 <NextStep+0x9c>
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <NextStep+0xd8>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d102      	bne.n	8000924 <NextStep+0x9c>
		MOTOR_state = 4;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <NextStep+0xdc>)
 8000920:	2204      	movs	r2, #4
 8000922:	701a      	strb	r2, [r3, #0]
	}
	if ((hall1state == 1) && (hall2state == 0) && (hall3state == 0)) {
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <NextStep+0xd0>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d10a      	bne.n	8000942 <NextStep+0xba>
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <NextStep+0xd4>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d106      	bne.n	8000942 <NextStep+0xba>
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <NextStep+0xd8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d102      	bne.n	8000942 <NextStep+0xba>
		MOTOR_state = 5;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <NextStep+0xdc>)
 800093e:	2205      	movs	r2, #5
 8000940:	701a      	strb	r2, [r3, #0]
	}

	TIMER_ISR(TIM3,50, U_us, clk, wate);
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <NextStep+0xe0>)
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <NextStep+0xe4>)
 8000948:	2201      	movs	r2, #1
 800094a:	2132      	movs	r1, #50	; 0x32
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <NextStep+0xe8>)
 800094e:	f000 fd25 	bl	800139c <TIMER_ISR>
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	200000a5 	.word	0x200000a5
 8000960:	20000001 	.word	0x20000001
 8000964:	200000a4 	.word	0x200000a4
 8000968:	08000a61 	.word	0x08000a61
 800096c:	02255100 	.word	0x02255100
 8000970:	40000400 	.word	0x40000400

08000974 <NextStep_REVERS>:
void NextStep_REVERS() {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af02      	add	r7, sp, #8
	if ((hall2state == 1) && (hall1state == 0) && (hall3state == 1)) {
 800097a:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <NextStep_REVERS+0xd0>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d10a      	bne.n	8000998 <NextStep_REVERS+0x24>
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <NextStep_REVERS+0xd4>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d106      	bne.n	8000998 <NextStep_REVERS+0x24>
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <NextStep_REVERS+0xd8>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d102      	bne.n	8000998 <NextStep_REVERS+0x24>
		MOTOR_state = 5;
 8000992:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <NextStep_REVERS+0xdc>)
 8000994:	2205      	movs	r2, #5
 8000996:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 0) && (hall1state == 0) && (hall3state == 1)) {
 8000998:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <NextStep_REVERS+0xd0>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10a      	bne.n	80009b6 <NextStep_REVERS+0x42>
 80009a0:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <NextStep_REVERS+0xd4>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d106      	bne.n	80009b6 <NextStep_REVERS+0x42>
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <NextStep_REVERS+0xd8>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d102      	bne.n	80009b6 <NextStep_REVERS+0x42>
		MOTOR_state = 4;
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <NextStep_REVERS+0xdc>)
 80009b2:	2204      	movs	r2, #4
 80009b4:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 0) && (hall1state == 1) && (hall3state == 1)) {
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <NextStep_REVERS+0xd0>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d10a      	bne.n	80009d4 <NextStep_REVERS+0x60>
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <NextStep_REVERS+0xd4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d106      	bne.n	80009d4 <NextStep_REVERS+0x60>
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <NextStep_REVERS+0xd8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d102      	bne.n	80009d4 <NextStep_REVERS+0x60>
		MOTOR_state = 3;
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <NextStep_REVERS+0xdc>)
 80009d0:	2203      	movs	r2, #3
 80009d2:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 0) && (hall1state == 1) && (hall3state == 0)) {
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <NextStep_REVERS+0xd0>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10a      	bne.n	80009f2 <NextStep_REVERS+0x7e>
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <NextStep_REVERS+0xd4>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d106      	bne.n	80009f2 <NextStep_REVERS+0x7e>
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <NextStep_REVERS+0xd8>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <NextStep_REVERS+0x7e>
		MOTOR_state = 2;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <NextStep_REVERS+0xdc>)
 80009ee:	2202      	movs	r2, #2
 80009f0:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 1) && (hall1state == 1) && (hall3state == 0)) {
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <NextStep_REVERS+0xd0>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d10a      	bne.n	8000a10 <NextStep_REVERS+0x9c>
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <NextStep_REVERS+0xd4>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d106      	bne.n	8000a10 <NextStep_REVERS+0x9c>
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <NextStep_REVERS+0xd8>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <NextStep_REVERS+0x9c>
		MOTOR_state = 1;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <NextStep_REVERS+0xdc>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
	}
	if ((hall2state == 1) && (hall1state == 0) && (hall3state == 0)) {
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <NextStep_REVERS+0xd0>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d10a      	bne.n	8000a2e <NextStep_REVERS+0xba>
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <NextStep_REVERS+0xd4>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d106      	bne.n	8000a2e <NextStep_REVERS+0xba>
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <NextStep_REVERS+0xd8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <NextStep_REVERS+0xba>
		MOTOR_state = 0;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <NextStep_REVERS+0xdc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
	}

	TIMER_ISR(TIM3,50, U_us, clk, wate);
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <NextStep_REVERS+0xe0>)
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <NextStep_REVERS+0xe4>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	2132      	movs	r1, #50	; 0x32
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <NextStep_REVERS+0xe8>)
 8000a3a:	f000 fcaf 	bl	800139c <TIMER_ISR>
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000a5 	.word	0x200000a5
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000001 	.word	0x20000001
 8000a50:	200000a4 	.word	0x200000a4
 8000a54:	08000a61 	.word	0x08000a61
 8000a58:	02255100 	.word	0x02255100
 8000a5c:	40000400 	.word	0x40000400

08000a60 <wate>:

void wate(){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af02      	add	r7, sp, #8
	//A floating
	pinwrite(GPIOB, pin0,LOW);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4814      	ldr	r0, [pc, #80]	; (8000abc <wate+0x5c>)
 8000a6c:	f000 fb94 	bl	8001198 <pinwrite>
	pinwrite(GPIOB, pin1,HIGH);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2101      	movs	r1, #1
 8000a74:	4811      	ldr	r0, [pc, #68]	; (8000abc <wate+0x5c>)
 8000a76:	f000 fb8f 	bl	8001198 <pinwrite>
	//B floating
	pinwrite(GPIOB, pin10,LOW);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	210a      	movs	r1, #10
 8000a7e:	480f      	ldr	r0, [pc, #60]	; (8000abc <wate+0x5c>)
 8000a80:	f000 fb8a 	bl	8001198 <pinwrite>
	pinwrite(GPIOB, pin7,HIGH);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2107      	movs	r1, #7
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <wate+0x5c>)
 8000a8a:	f000 fb85 	bl	8001198 <pinwrite>
	//C floating
	pinwrite(GPIOB, pin8,LOW);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2108      	movs	r1, #8
 8000a92:	480a      	ldr	r0, [pc, #40]	; (8000abc <wate+0x5c>)
 8000a94:	f000 fb80 	bl	8001198 <pinwrite>
	pinwrite(GPIOB, pin5,HIGH);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2105      	movs	r1, #5
 8000a9c:	4807      	ldr	r0, [pc, #28]	; (8000abc <wate+0x5c>)
 8000a9e:	f000 fb7b 	bl	8001198 <pinwrite>
	TIMER_ISR(TIM3,500, U_us, clk, state);
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <wate+0x60>)
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <wate+0x64>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <wate+0x68>)
 8000ab0:	f000 fc74 	bl	800139c <TIMER_ISR>
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	08000acd 	.word	0x08000acd
 8000ac4:	02255100 	.word	0x02255100
 8000ac8:	40000400 	.word	0x40000400

08000acc <state>:
void state(){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af02      	add	r7, sp, #8
	switch (MOTOR_state) {
 8000ad2:	4b6e      	ldr	r3, [pc, #440]	; (8000c8c <state+0x1c0>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b05      	cmp	r3, #5
 8000ad8:	f200 80ca 	bhi.w	8000c70 <state+0x1a4>
 8000adc:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <state+0x18>)
 8000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae2:	bf00      	nop
 8000ae4:	08000afd 	.word	0x08000afd
 8000ae8:	08000b3b 	.word	0x08000b3b
 8000aec:	08000b79 	.word	0x08000b79
 8000af0:	08000bb7 	.word	0x08000bb7
 8000af4:	08000bf5 	.word	0x08000bf5
 8000af8:	08000c33 	.word	0x08000c33
	case 0:
		//MOTOR_state++;
		//A h
		pinwrite(GPIOB, pin0,HIGH);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2100      	movs	r1, #0
 8000b00:	4863      	ldr	r0, [pc, #396]	; (8000c90 <state+0x1c4>)
 8000b02:	f000 fb49 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8000b06:	2201      	movs	r2, #1
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4861      	ldr	r0, [pc, #388]	; (8000c90 <state+0x1c4>)
 8000b0c:	f000 fb44 	bl	8001198 <pinwrite>
		//B floating
		pinwrite(GPIOB, pin10,LOW);
 8000b10:	2200      	movs	r2, #0
 8000b12:	210a      	movs	r1, #10
 8000b14:	485e      	ldr	r0, [pc, #376]	; (8000c90 <state+0x1c4>)
 8000b16:	f000 fb3f 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2107      	movs	r1, #7
 8000b1e:	485c      	ldr	r0, [pc, #368]	; (8000c90 <state+0x1c4>)
 8000b20:	f000 fb3a 	bl	8001198 <pinwrite>
		//C LOW
		pinwrite(GPIOB, pin8,LOW);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2108      	movs	r1, #8
 8000b28:	4859      	ldr	r0, [pc, #356]	; (8000c90 <state+0x1c4>)
 8000b2a:	f000 fb35 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin5,LOW);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2105      	movs	r1, #5
 8000b32:	4857      	ldr	r0, [pc, #348]	; (8000c90 <state+0x1c4>)
 8000b34:	f000 fb30 	bl	8001198 <pinwrite>
		break;
 8000b38:	e09a      	b.n	8000c70 <state+0x1a4>

	case 1:
		//MOTOR_state++;
		//A floating
		pinwrite(GPIOB, pin0,LOW);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4854      	ldr	r0, [pc, #336]	; (8000c90 <state+0x1c4>)
 8000b40:	f000 fb2a 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2101      	movs	r1, #1
 8000b48:	4851      	ldr	r0, [pc, #324]	; (8000c90 <state+0x1c4>)
 8000b4a:	f000 fb25 	bl	8001198 <pinwrite>
		//B h
		pinwrite(GPIOB, pin10,HIGH);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	210a      	movs	r1, #10
 8000b52:	484f      	ldr	r0, [pc, #316]	; (8000c90 <state+0x1c4>)
 8000b54:	f000 fb20 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2107      	movs	r1, #7
 8000b5c:	484c      	ldr	r0, [pc, #304]	; (8000c90 <state+0x1c4>)
 8000b5e:	f000 fb1b 	bl	8001198 <pinwrite>
		//C LOW
		pinwrite(GPIOB, pin8,LOW);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2108      	movs	r1, #8
 8000b66:	484a      	ldr	r0, [pc, #296]	; (8000c90 <state+0x1c4>)
 8000b68:	f000 fb16 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin5,LOW);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2105      	movs	r1, #5
 8000b70:	4847      	ldr	r0, [pc, #284]	; (8000c90 <state+0x1c4>)
 8000b72:	f000 fb11 	bl	8001198 <pinwrite>
		break;
 8000b76:	e07b      	b.n	8000c70 <state+0x1a4>

	case 2:
		//MOTOR_state++;
		//A l
		pinwrite(GPIOB, pin0,LOW);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4844      	ldr	r0, [pc, #272]	; (8000c90 <state+0x1c4>)
 8000b7e:	f000 fb0b 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin1,LOW);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2101      	movs	r1, #1
 8000b86:	4842      	ldr	r0, [pc, #264]	; (8000c90 <state+0x1c4>)
 8000b88:	f000 fb06 	bl	8001198 <pinwrite>
		//B h
		pinwrite(GPIOB, pin10,HIGH);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	210a      	movs	r1, #10
 8000b90:	483f      	ldr	r0, [pc, #252]	; (8000c90 <state+0x1c4>)
 8000b92:	f000 fb01 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2107      	movs	r1, #7
 8000b9a:	483d      	ldr	r0, [pc, #244]	; (8000c90 <state+0x1c4>)
 8000b9c:	f000 fafc 	bl	8001198 <pinwrite>
		//C floating
		pinwrite(GPIOB, pin8,LOW);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2108      	movs	r1, #8
 8000ba4:	483a      	ldr	r0, [pc, #232]	; (8000c90 <state+0x1c4>)
 8000ba6:	f000 faf7 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2105      	movs	r1, #5
 8000bae:	4838      	ldr	r0, [pc, #224]	; (8000c90 <state+0x1c4>)
 8000bb0:	f000 faf2 	bl	8001198 <pinwrite>
		break;
 8000bb4:	e05c      	b.n	8000c70 <state+0x1a4>

	case 3:
		//MOTOR_state++;
		//A l
		pinwrite(GPIOB, pin0,LOW);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4835      	ldr	r0, [pc, #212]	; (8000c90 <state+0x1c4>)
 8000bbc:	f000 faec 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin1,LOW);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4832      	ldr	r0, [pc, #200]	; (8000c90 <state+0x1c4>)
 8000bc6:	f000 fae7 	bl	8001198 <pinwrite>
		//B floating
		pinwrite(GPIOB, pin10,LOW);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	210a      	movs	r1, #10
 8000bce:	4830      	ldr	r0, [pc, #192]	; (8000c90 <state+0x1c4>)
 8000bd0:	f000 fae2 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin7,HIGH);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2107      	movs	r1, #7
 8000bd8:	482d      	ldr	r0, [pc, #180]	; (8000c90 <state+0x1c4>)
 8000bda:	f000 fadd 	bl	8001198 <pinwrite>
		//C h
		pinwrite(GPIOB, pin8,HIGH);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2108      	movs	r1, #8
 8000be2:	482b      	ldr	r0, [pc, #172]	; (8000c90 <state+0x1c4>)
 8000be4:	f000 fad8 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2105      	movs	r1, #5
 8000bec:	4828      	ldr	r0, [pc, #160]	; (8000c90 <state+0x1c4>)
 8000bee:	f000 fad3 	bl	8001198 <pinwrite>
		break;
 8000bf2:	e03d      	b.n	8000c70 <state+0x1a4>

	case 4:
		//MOTOR_state++;
		//A floating
		pinwrite(GPIOB, pin0,LOW);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4825      	ldr	r0, [pc, #148]	; (8000c90 <state+0x1c4>)
 8000bfa:	f000 facd 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2101      	movs	r1, #1
 8000c02:	4823      	ldr	r0, [pc, #140]	; (8000c90 <state+0x1c4>)
 8000c04:	f000 fac8 	bl	8001198 <pinwrite>
		//B l
		pinwrite(GPIOB, pin10,LOW);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	210a      	movs	r1, #10
 8000c0c:	4820      	ldr	r0, [pc, #128]	; (8000c90 <state+0x1c4>)
 8000c0e:	f000 fac3 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin7,LOW);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2107      	movs	r1, #7
 8000c16:	481e      	ldr	r0, [pc, #120]	; (8000c90 <state+0x1c4>)
 8000c18:	f000 fabe 	bl	8001198 <pinwrite>
		//C h
		pinwrite(GPIOB, pin8,HIGH);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2108      	movs	r1, #8
 8000c20:	481b      	ldr	r0, [pc, #108]	; (8000c90 <state+0x1c4>)
 8000c22:	f000 fab9 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2105      	movs	r1, #5
 8000c2a:	4819      	ldr	r0, [pc, #100]	; (8000c90 <state+0x1c4>)
 8000c2c:	f000 fab4 	bl	8001198 <pinwrite>
		break;
 8000c30:	e01e      	b.n	8000c70 <state+0x1a4>

	case 5:
		//MOTOR_state=0;
		//A h
		pinwrite(GPIOB, pin0,HIGH);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2100      	movs	r1, #0
 8000c36:	4816      	ldr	r0, [pc, #88]	; (8000c90 <state+0x1c4>)
 8000c38:	f000 faae 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin1,HIGH);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4813      	ldr	r0, [pc, #76]	; (8000c90 <state+0x1c4>)
 8000c42:	f000 faa9 	bl	8001198 <pinwrite>
		//B l
		pinwrite(GPIOB, pin10,LOW);
 8000c46:	2200      	movs	r2, #0
 8000c48:	210a      	movs	r1, #10
 8000c4a:	4811      	ldr	r0, [pc, #68]	; (8000c90 <state+0x1c4>)
 8000c4c:	f000 faa4 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin7,LOW);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2107      	movs	r1, #7
 8000c54:	480e      	ldr	r0, [pc, #56]	; (8000c90 <state+0x1c4>)
 8000c56:	f000 fa9f 	bl	8001198 <pinwrite>
		//C floating
		pinwrite(GPIOB, pin8,LOW);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	480c      	ldr	r0, [pc, #48]	; (8000c90 <state+0x1c4>)
 8000c60:	f000 fa9a 	bl	8001198 <pinwrite>
		pinwrite(GPIOB, pin5,HIGH);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2105      	movs	r1, #5
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <state+0x1c4>)
 8000c6a:	f000 fa95 	bl	8001198 <pinwrite>
		break;
 8000c6e:	bf00      	nop
	}
	TIMER_ISR(TIM3,adcread, U_us, clk, wate);
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <state+0x1c8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	b299      	uxth	r1, r3
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <state+0x1cc>)
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <state+0x1d0>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <state+0x1d4>)
 8000c80:	f000 fb8c 	bl	800139c <TIMER_ISR>

}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000a4 	.word	0x200000a4
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	200000cc 	.word	0x200000cc
 8000c98:	08000a61 	.word	0x08000a61
 8000c9c:	02255100 	.word	0x02255100
 8000ca0:	40000400 	.word	0x40000400

08000ca4 <main>:

int main (){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af04      	add	r7, sp, #16
	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 8000caa:	2100      	movs	r1, #0
 8000cac:	2000      	movs	r0, #0
 8000cae:	f000 fe55 	bl	800195c <MCAL_speed_init>
	pinmode(GPIOB, pin0,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4858      	ldr	r0, [pc, #352]	; (8000e18 <main+0x174>)
 8000cb8:	f000 f98c 	bl	8000fd4 <pinmode>
	pinmode(GPIOB, pin1,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4855      	ldr	r0, [pc, #340]	; (8000e18 <main+0x174>)
 8000cc2:	f000 f987 	bl	8000fd4 <pinmode>
	pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	210a      	movs	r1, #10
 8000cca:	4853      	ldr	r0, [pc, #332]	; (8000e18 <main+0x174>)
 8000ccc:	f000 f982 	bl	8000fd4 <pinmode>
	pinmode(GPIOB, pin7,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2107      	movs	r1, #7
 8000cd4:	4850      	ldr	r0, [pc, #320]	; (8000e18 <main+0x174>)
 8000cd6:	f000 f97d 	bl	8000fd4 <pinmode>
	pinmode(GPIOB, pin8,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2108      	movs	r1, #8
 8000cde:	484e      	ldr	r0, [pc, #312]	; (8000e18 <main+0x174>)
 8000ce0:	f000 f978 	bl	8000fd4 <pinmode>
	pinmode(GPIOB, pin5,GPIO_MODE_OUTPUT_push_pull_Speed10);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2105      	movs	r1, #5
 8000ce8:	484b      	ldr	r0, [pc, #300]	; (8000e18 <main+0x174>)
 8000cea:	f000 f973 	bl	8000fd4 <pinmode>
	ADC_INIT(ADC1, ADC_STATE_START);
 8000cee:	2101      	movs	r1, #1
 8000cf0:	484a      	ldr	r0, [pc, #296]	; (8000e1c <main+0x178>)
 8000cf2:	f000 ff17 	bl	8001b24 <ADC_INIT>
	EXTI(GPIOA, pin0,EXTI_Trigger_RisingAndFalling, s1);
 8000cf6:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <main+0x17c>)
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4849      	ldr	r0, [pc, #292]	; (8000e24 <main+0x180>)
 8000cfe:	f001 f827 	bl	8001d50 <EXTI>
	EXTI(GPIOA, pin1,EXTI_Trigger_RisingAndFalling, s2);
 8000d02:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <main+0x184>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	2101      	movs	r1, #1
 8000d08:	4846      	ldr	r0, [pc, #280]	; (8000e24 <main+0x180>)
 8000d0a:	f001 f821 	bl	8001d50 <EXTI>
	EXTI(GPIOA, pin2,EXTI_Trigger_RisingAndFalling, s3);
 8000d0e:	4b47      	ldr	r3, [pc, #284]	; (8000e2c <main+0x188>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	2102      	movs	r1, #2
 8000d14:	4843      	ldr	r0, [pc, #268]	; (8000e24 <main+0x180>)
 8000d16:	f001 f81b 	bl	8001d50 <EXTI>
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_9, stop_bits_2, baud_rate_9600, parity_even,clk);
 8000d1a:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <main+0x18c>)
 8000d1c:	9302      	str	r3, [sp, #8]
 8000d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d32:	210c      	movs	r1, #12
 8000d34:	483f      	ldr	r0, [pc, #252]	; (8000e34 <main+0x190>)
 8000d36:	f001 fdb1 	bl	800289c <USART_INIT>
	pinmode(GPIOA, pin8,GPIO_MODE_INPUT_PU);
 8000d3a:	2218      	movs	r2, #24
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	4839      	ldr	r0, [pc, #228]	; (8000e24 <main+0x180>)
 8000d40:	f000 f948 	bl	8000fd4 <pinmode>

	if(READ_PIN(GPIOA, pin8)==0){
 8000d44:	2108      	movs	r1, #8
 8000d46:	4837      	ldr	r0, [pc, #220]	; (8000e24 <main+0x180>)
 8000d48:	f000 fa4a 	bl	80011e0 <READ_PIN>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <main+0xb6>
		MOTOR_DIRECTION=1;
 8000d52:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <main+0x194>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	e002      	b.n	8000d60 <main+0xbc>
	}
	else {
		MOTOR_DIRECTION=0;
 8000d5a:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <main+0x194>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
	}

	s1();
 8000d60:	f7ff fcfa 	bl	8000758 <s1>
	s2();
 8000d64:	f7ff fd30 	bl	80007c8 <s2>
	s3();
 8000d68:	f7ff fd66 	bl	8000838 <s3>
	//soft start
	for(int i=0;i<100;i++){
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	e00d      	b.n	8000d8e <main+0xea>
		adcread+=2;
 8000d72:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <main+0x198>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3302      	adds	r3, #2
 8000d78:	4a30      	ldr	r2, [pc, #192]	; (8000e3c <main+0x198>)
 8000d7a:	6013      	str	r3, [r2, #0]
		delay(2, U_ms, clk);
 8000d7c:	4a2c      	ldr	r2, [pc, #176]	; (8000e30 <main+0x18c>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d84:	f000 fa40 	bl	8001208 <delay>
	for(int i=0;i<100;i++){
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b63      	cmp	r3, #99	; 0x63
 8000d92:	ddee      	ble.n	8000d72 <main+0xce>
	}

	while(1){
		adcread=ADC_READ(ADC1, ADC_pin_PA5)/2;
 8000d94:	2105      	movs	r1, #5
 8000d96:	4821      	ldr	r0, [pc, #132]	; (8000e1c <main+0x178>)
 8000d98:	f000 ff22 	bl	8001be0 <ADC_READ>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	085b      	lsrs	r3, r3, #1
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <main+0x198>)
 8000da6:	601a      	str	r2, [r3, #0]
		delay(190, U_ms, clk);
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <main+0x18c>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4824      	ldr	r0, [pc, #144]	; (8000e40 <main+0x19c>)
 8000dae:	f000 fa2b 	bl	8001208 <delay>
		MOTOR_SPEED_RPM=60000000/(TIME_CALC*NUM_OF_HALLSENSOR_PULS);
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <main+0x1a0>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4613      	mov	r3, r2
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	1a9b      	subs	r3, r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <main+0x1a4>)
 8000dc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <main+0x1a8>)
 8000dca:	601a      	str	r2, [r3, #0]
		TIME_CALC=0;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <main+0x1a0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
		sprintf (buf, "%d",MOTOR_SPEED_RPM);
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <main+0x1a8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	491d      	ldr	r1, [pc, #116]	; (8000e50 <main+0x1ac>)
 8000dda:	481e      	ldr	r0, [pc, #120]	; (8000e54 <main+0x1b0>)
 8000ddc:	f002 f8d2 	bl	8002f84 <siprintf>
		USART_SEND_STRING(USART1,buf);
 8000de0:	491c      	ldr	r1, [pc, #112]	; (8000e54 <main+0x1b0>)
 8000de2:	4814      	ldr	r0, [pc, #80]	; (8000e34 <main+0x190>)
 8000de4:	f001 fe3e 	bl	8002a64 <USART_SEND_STRING>
		delay(3, U_ms, clk);
 8000de8:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <main+0x18c>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	481a      	ldr	r0, [pc, #104]	; (8000e58 <main+0x1b4>)
 8000dee:	f000 fa0b 	bl	8001208 <delay>
		USART_SEND_STRING(USART1," \n");
 8000df2:	491a      	ldr	r1, [pc, #104]	; (8000e5c <main+0x1b8>)
 8000df4:	480f      	ldr	r0, [pc, #60]	; (8000e34 <main+0x190>)
 8000df6:	f001 fe35 	bl	8002a64 <USART_SEND_STRING>
		if(READ_PIN(GPIOA, pin8)==0){
 8000dfa:	2108      	movs	r1, #8
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <main+0x180>)
 8000dfe:	f000 f9ef 	bl	80011e0 <READ_PIN>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d103      	bne.n	8000e10 <main+0x16c>
			MOTOR_DIRECTION=1;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <main+0x194>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	e7c1      	b.n	8000d94 <main+0xf0>
		}
		else {
			MOTOR_DIRECTION=0;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <main+0x194>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
		adcread=ADC_READ(ADC1, ADC_pin_PA5)/2;
 8000e16:	e7bd      	b.n	8000d94 <main+0xf0>
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	40012400 	.word	0x40012400
 8000e20:	08000759 	.word	0x08000759
 8000e24:	40010800 	.word	0x40010800
 8000e28:	080007c9 	.word	0x080007c9
 8000e2c:	08000839 	.word	0x08000839
 8000e30:	02255100 	.word	0x02255100
 8000e34:	40013800 	.word	0x40013800
 8000e38:	200000c4 	.word	0x200000c4
 8000e3c:	200000cc 	.word	0x200000cc
 8000e40:	433e0000 	.word	0x433e0000
 8000e44:	200000e0 	.word	0x200000e0
 8000e48:	03938700 	.word	0x03938700
 8000e4c:	200000d0 	.word	0x200000d0
 8000e50:	080037c0 	.word	0x080037c0
 8000e54:	200000d4 	.word	0x200000d4
 8000e58:	40400000 	.word	0x40400000
 8000e5c:	080037c4 	.word	0x080037c4

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f002 f84e 	bl	8002f30 <__errno>
 8000e94:	4602      	mov	r2, r0
 8000e96:	230c      	movs	r3, #12
 8000e98:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20005000 	.word	0x20005000
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	200000a8 	.word	0x200000a8
 8000ec8:	20000190 	.word	0x20000190

08000ecc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ece:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ed0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed6:	490d      	ldr	r1, [pc, #52]	; (8000f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <LoopForever+0xe>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eec:	4c0a      	ldr	r4, [pc, #40]	; (8000f18 <LoopForever+0x16>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000efa:	f002 f81f 	bl	8002f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efe:	f7ff fed1 	bl	8000ca4 <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   r0, =_estack
 8000f04:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000f10:	08003804 	.word	0x08003804
  ldr r2, =_sbss
 8000f14:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000f18:	2000018c 	.word	0x2000018c

08000f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_2_IRQHandler>

08000f1e <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000f1e:	b480      	push	{r7}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <getposition+0x14>
		rval =0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d101      	bne.n	8000f3c <getposition+0x1e>
		rval =4;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d101      	bne.n	8000f46 <getposition+0x28>
		rval =8;
 8000f42:	2308      	movs	r3, #8
 8000f44:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d101      	bne.n	8000f50 <getposition+0x32>
		rval =12;
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d101      	bne.n	8000f5a <getposition+0x3c>
		rval =16;
 8000f56:	2310      	movs	r3, #16
 8000f58:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	2b05      	cmp	r3, #5
 8000f5e:	d101      	bne.n	8000f64 <getposition+0x46>
		rval =20;
 8000f60:	2314      	movs	r3, #20
 8000f62:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d101      	bne.n	8000f6e <getposition+0x50>
		rval =24;
 8000f6a:	2318      	movs	r3, #24
 8000f6c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	2b07      	cmp	r3, #7
 8000f72:	d101      	bne.n	8000f78 <getposition+0x5a>
		rval =28;
 8000f74:	231c      	movs	r3, #28
 8000f76:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d101      	bne.n	8000f82 <getposition+0x64>
		rval =0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	2b09      	cmp	r3, #9
 8000f86:	d101      	bne.n	8000f8c <getposition+0x6e>
		rval =4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	2b0a      	cmp	r3, #10
 8000f90:	d101      	bne.n	8000f96 <getposition+0x78>
		rval =8;
 8000f92:	2308      	movs	r3, #8
 8000f94:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b0b      	cmp	r3, #11
 8000f9a:	d101      	bne.n	8000fa0 <getposition+0x82>
		rval =12;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	2b0c      	cmp	r3, #12
 8000fa4:	d101      	bne.n	8000faa <getposition+0x8c>
		rval =16;
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	2b0d      	cmp	r3, #13
 8000fae:	d101      	bne.n	8000fb4 <getposition+0x96>
		rval =20;
 8000fb0:	2314      	movs	r3, #20
 8000fb2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	2b0e      	cmp	r3, #14
 8000fb8:	d101      	bne.n	8000fbe <getposition+0xa0>
		rval =24;
 8000fba:	2318      	movs	r3, #24
 8000fbc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d101      	bne.n	8000fc8 <getposition+0xaa>
		rval =28;
 8000fc4:	231c      	movs	r3, #28
 8000fc6:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]


}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4a69      	ldr	r2, [pc, #420]	; (800118c <pinmode+0x1b8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d106      	bne.n	8000ff8 <pinmode+0x24>
		GPIOA_Clock_Enable();
 8000fea:	4b69      	ldr	r3, [pc, #420]	; (8001190 <pinmode+0x1bc>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	4a68      	ldr	r2, [pc, #416]	; (8001190 <pinmode+0x1bc>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6193      	str	r3, [r2, #24]
 8000ff6:	e010      	b.n	800101a <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4a66      	ldr	r2, [pc, #408]	; (8001194 <pinmode+0x1c0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d106      	bne.n	800100e <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8001000:	4b63      	ldr	r3, [pc, #396]	; (8001190 <pinmode+0x1bc>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a62      	ldr	r2, [pc, #392]	; (8001190 <pinmode+0x1bc>)
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	e005      	b.n	800101a <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 800100e:	4b60      	ldr	r3, [pc, #384]	; (8001190 <pinmode+0x1bc>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a5f      	ldr	r2, [pc, #380]	; (8001190 <pinmode+0x1bc>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 800101a:	897b      	ldrh	r3, [r7, #10]
 800101c:	2b07      	cmp	r3, #7
 800101e:	d856      	bhi.n	80010ce <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 8001020:	897b      	ldrh	r3, [r7, #10]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff7b 	bl	8000f1e <getposition>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	230f      	movs	r3, #15
 800102e:	4093      	lsls	r3, r2
 8001030:	43da      	mvns	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	401a      	ands	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b08      	cmp	r3, #8
 8001040:	d002      	beq.n	8001048 <pinmode+0x74>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b18      	cmp	r3, #24
 8001046:	d133      	bne.n	80010b0 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b18      	cmp	r3, #24
 800104c:	d117      	bne.n	800107e <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 800104e:	897b      	ldrh	r3, [r7, #10]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff64 	bl	8000f1e <getposition>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	2308      	movs	r3, #8
 800105c:	fa03 f202 	lsl.w	r2, r3, r2
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	431a      	orrs	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	897a      	ldrh	r2, [r7, #10]
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	431a      	orrs	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800107c:	e081      	b.n	8001182 <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 800107e:	897b      	ldrh	r3, [r7, #10]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff4c 	bl	8000f1e <getposition>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	2308      	movs	r3, #8
 800108c:	fa03 f202 	lsl.w	r2, r3, r2
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	431a      	orrs	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	897a      	ldrh	r2, [r7, #10]
 80010a0:	2101      	movs	r1, #1
 80010a2:	fa01 f202 	lsl.w	r2, r1, r2
 80010a6:	43d2      	mvns	r2, r2
 80010a8:	401a      	ands	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80010ae:	e068      	b.n	8001182 <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 80010b0:	897b      	ldrh	r3, [r7, #10]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff33 	bl	8000f1e <getposition>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	fa03 f202 	lsl.w	r2, r3, r2
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	431a      	orrs	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	601a      	str	r2, [r3, #0]

	}



}
 80010cc:	e059      	b.n	8001182 <pinmode+0x1ae>
	else if(pin>7){
 80010ce:	897b      	ldrh	r3, [r7, #10]
 80010d0:	2b07      	cmp	r3, #7
 80010d2:	d956      	bls.n	8001182 <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 80010d4:	897b      	ldrh	r3, [r7, #10]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff21 	bl	8000f1e <getposition>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	230f      	movs	r3, #15
 80010e2:	4093      	lsls	r3, r2
 80010e4:	43da      	mvns	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	401a      	ands	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d002      	beq.n	80010fc <pinmode+0x128>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b18      	cmp	r3, #24
 80010fa:	d133      	bne.n	8001164 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b18      	cmp	r3, #24
 8001100:	d117      	bne.n	8001132 <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8001102:	897b      	ldrh	r3, [r7, #10]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff0a 	bl	8000f1e <getposition>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	2308      	movs	r3, #8
 8001110:	fa03 f202 	lsl.w	r2, r3, r2
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	431a      	orrs	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	897a      	ldrh	r2, [r7, #10]
 8001124:	2101      	movs	r1, #1
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	431a      	orrs	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001130:	e027      	b.n	8001182 <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 8001132:	897b      	ldrh	r3, [r7, #10]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fef2 	bl	8000f1e <getposition>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	2308      	movs	r3, #8
 8001140:	fa03 f202 	lsl.w	r2, r3, r2
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	431a      	orrs	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	897a      	ldrh	r2, [r7, #10]
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	43d2      	mvns	r2, r2
 800115c:	401a      	ands	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8001162:	e00e      	b.n	8001182 <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 8001164:	897b      	ldrh	r3, [r7, #10]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fed9 	bl	8000f1e <getposition>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	fa03 f202 	lsl.w	r2, r3, r2
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	431a      	orrs	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
}
 8001180:	e7ff      	b.n	8001182 <pinmode+0x1ae>
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010800 	.word	0x40010800
 8001190:	40021000 	.word	0x40021000
 8001194:	40010c00 	.word	0x40010c00

08001198 <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_typeDef* GPIOx,uint16_t pin,uint8_t status){
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <pinwrite+0x2a>
		GPIOx->GPIOx_ODR |=(1<<pin);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->GPIOx_ODR &=~(1<<pin);

}
 80011c0:	e009      	b.n	80011d6 <pinwrite+0x3e>
	else GPIOx->GPIOx_ODR &=~(1<<pin);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	2101      	movs	r1, #1
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	43d2      	mvns	r2, r2
 80011d0:	401a      	ands	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60da      	str	r2, [r3, #12]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <READ_PIN>:
 * @param [in]      - Pin: GPIOx PIN Number
 * @retval          - uint8_t
 * Note             - none
 */

uint8_t READ_PIN(GPIO_typeDef* GPIOx, uint16_t pin){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
	return (GPIOx->GPIOx_IDR>>pin)&1;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(float time,uint8_t U,uint32_t clk){
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b08b      	sub	sp, #44	; 0x2c
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	460b      	mov	r3, r1
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	72fb      	strb	r3, [r7, #11]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 8001216:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <delay+0x17c>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	4a5a      	ldr	r2, [pc, #360]	; (8001384 <delay+0x17c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001222:	4b59      	ldr	r3, [pc, #356]	; (8001388 <delay+0x180>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b57      	ldr	r3, [pc, #348]	; (8001388 <delay+0x180>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0201 	bic.w	r2, r2, #1
 8001230:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8001232:	2301      	movs	r3, #1
 8001234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 800123c:	2301      	movs	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
	uint32_t unit =1000;
 8001240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001244:	61bb      	str	r3, [r7, #24]
	uint8_t  increase=2;
 8001246:	2302      	movs	r3, #2
 8001248:	75fb      	strb	r3, [r7, #23]

	if (U == 0){
 800124a:	7afb      	ldrb	r3, [r7, #11]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10f      	bne.n	8001270 <delay+0x68>
		unit = 1000;
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 100;
 8001256:	494d      	ldr	r1, [pc, #308]	; (800138c <delay+0x184>)
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f7ff fa53 	bl	8000704 <__aeabi_fcmpgt>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <delay+0x62>
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	75fb      	strb	r3, [r7, #23]
 8001268:	e045      	b.n	80012f6 <delay+0xee>
		else increase = 10;
 800126a:	230a      	movs	r3, #10
 800126c:	75fb      	strb	r3, [r7, #23]
 800126e:	e042      	b.n	80012f6 <delay+0xee>
	}
	else {
		unit = 1000000;
 8001270:	4b47      	ldr	r3, [pc, #284]	; (8001390 <delay+0x188>)
 8001272:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 10;
 8001274:	4945      	ldr	r1, [pc, #276]	; (800138c <delay+0x184>)
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f7ff fa44 	bl	8000704 <__aeabi_fcmpgt>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <delay+0x80>
 8001282:	230a      	movs	r3, #10
 8001284:	75fb      	strb	r3, [r7, #23]
 8001286:	e036      	b.n	80012f6 <delay+0xee>
		else increase = 5;
 8001288:	2305      	movs	r3, #5
 800128a:	75fb      	strb	r3, [r7, #23]
	}

	while(user_flage==1){
 800128c:	e033      	b.n	80012f6 <delay+0xee>
		user_top = (clk/unit*time)/( user_pre );
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f820 	bl	80002dc <__aeabi_ui2f>
 800129c:	4603      	mov	r3, r0
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f873 	bl	800038c <__aeabi_fmul>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461c      	mov	r4, r3
 80012aa:	69f8      	ldr	r0, [r7, #28]
 80012ac:	f7ff f816 	bl	80002dc <__aeabi_ui2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4619      	mov	r1, r3
 80012b4:	4620      	mov	r0, r4
 80012b6:	f7ff f91d 	bl	80004f4 <__aeabi_fdiv>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fa2b 	bl	8000718 <__aeabi_f2uiz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	623b      	str	r3, [r7, #32]
		if(user_top>=32000){
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80012cc:	d310      	bcc.n	80012f0 <delay+0xe8>

			if(user_pre>65530){
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d906      	bls.n	80012e6 <delay+0xde>
				user_pre=65530;
 80012d8:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 80012dc:	61fb      	str	r3, [r7, #28]
				user_flage=0;
 80012de:	2300      	movs	r3, #0
 80012e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012e4:	e007      	b.n	80012f6 <delay+0xee>
			}
			else user_pre+=increase;
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	4413      	add	r3, r2
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e002      	b.n	80012f6 <delay+0xee>

		}
		else{
			user_flage=0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(user_flage==1){
 80012f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d0c7      	beq.n	800128e <delay+0x86>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <delay+0x180>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b20      	ldr	r3, [pc, #128]	; (8001388 <delay+0x180>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0201 	bic.w	r2, r2, #1
 800130c:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <delay+0x180>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <delay+0x180>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0204 	orr.w	r2, r2, #4
 800131c:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <delay+0x180>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <delay+0x180>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0201 	orr.w	r2, r2, #1
 800132c:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <delay+0x180>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a3a      	ldr	r2, [r7, #32]
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <delay+0x180>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	3a01      	subs	r2, #1
 800133e:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <delay+0x180>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <delay+0x180>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <delay+0x180>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <delay+0x180>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <delay+0x18c>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <delay+0x190>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <delay+0x190>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 8001372:	bf00      	nop
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <delay+0x18c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1fb      	bne.n	8001374 <delay+0x16c>

	}
}
 800137c:	bf00      	nop
 800137e:	372c      	adds	r7, #44	; 0x2c
 8001380:	46bd      	mov	sp, r7
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	40021000 	.word	0x40021000
 8001388:	20000020 	.word	0x20000020
 800138c:	453b8000 	.word	0x453b8000
 8001390:	000f4240 	.word	0x000f4240
 8001394:	2000001c 	.word	0x2000001c
 8001398:	e000e100 	.word	0xe000e100

0800139c <TIMER_ISR>:

//==================================================================================================

void TIMER_ISR(TIMERS_typeDef* ISR_TIMER,uint16_t time_ms,uint8_t U,uint32_t clk,void (*calback) (void)){
 800139c:	b480      	push	{r7}
 800139e:	b08b      	sub	sp, #44	; 0x2c
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	460b      	mov	r3, r1
 80013a8:	817b      	strh	r3, [r7, #10]
 80013aa:	4613      	mov	r3, r2
 80013ac:	727b      	strb	r3, [r7, #9]

	TIMER3_CLOCK_Enable();//enable timer3 clock
 80013ae:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <TIMER_ISR+0x138>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <TIMER_ISR+0x138>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	61d3      	str	r3, [r2, #28]
	ISR_TIMER->TIMx_CR1 &=~(1<<0);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 0201 	bic.w	r2, r3, #1
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	601a      	str	r2, [r3, #0]
	ISRcalback[0] = calback;
 80013c6:	4a44      	ldr	r2, [pc, #272]	; (80014d8 <TIMER_ISR+0x13c>)
 80013c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ca:	6013      	str	r3, [r2, #0]
	ISR_TIMER_COPY=ISR_TIMER;
 80013cc:	4a43      	ldr	r2, [pc, #268]	; (80014dc <TIMER_ISR+0x140>)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6013      	str	r3, [r2, #0]

	char user_flage=1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 80013dc:	2301      	movs	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
	uint8_t  increase=2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	76fb      	strb	r3, [r7, #27]
	uint32_t unit =1000;
 80013e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e8:	617b      	str	r3, [r7, #20]
	if (U == 0){
 80013ea:	7a7b      	ldrb	r3, [r7, #9]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10d      	bne.n	800140c <TIMER_ISR+0x70>
			unit = 1000;
 80013f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f4:	617b      	str	r3, [r7, #20]
			if (time_ms > 3000)increase = 100;
 80013f6:	897b      	ldrh	r3, [r7, #10]
 80013f8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d902      	bls.n	8001406 <TIMER_ISR+0x6a>
 8001400:	2364      	movs	r3, #100	; 0x64
 8001402:	76fb      	strb	r3, [r7, #27]
 8001404:	e032      	b.n	800146c <TIMER_ISR+0xd0>
			else increase = 10;
 8001406:	230a      	movs	r3, #10
 8001408:	76fb      	strb	r3, [r7, #27]
 800140a:	e02f      	b.n	800146c <TIMER_ISR+0xd0>
		}
		else {
			unit = 1000000;
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <TIMER_ISR+0x144>)
 800140e:	617b      	str	r3, [r7, #20]
			if (time_ms > 3000)increase = 10;
 8001410:	897b      	ldrh	r3, [r7, #10]
 8001412:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001416:	4293      	cmp	r3, r2
 8001418:	d902      	bls.n	8001420 <TIMER_ISR+0x84>
 800141a:	230a      	movs	r3, #10
 800141c:	76fb      	strb	r3, [r7, #27]
 800141e:	e025      	b.n	800146c <TIMER_ISR+0xd0>
			else increase = 5;
 8001420:	2305      	movs	r3, #5
 8001422:	76fb      	strb	r3, [r7, #27]
		}

		while(user_flage==1){
 8001424:	e022      	b.n	800146c <TIMER_ISR+0xd0>
			user_top = (clk/unit*time_ms)/( user_pre );
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	897a      	ldrh	r2, [r7, #10]
 8001430:	fb02 f203 	mul.w	r2, r2, r3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	623b      	str	r3, [r7, #32]
			if(user_top>=32000){
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001442:	d310      	bcc.n	8001466 <TIMER_ISR+0xca>

				if(user_pre>65530){
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800144a:	4293      	cmp	r3, r2
 800144c:	d906      	bls.n	800145c <TIMER_ISR+0xc0>
					user_pre=65530;
 800144e:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8001452:	61fb      	str	r3, [r7, #28]
					user_flage=0;
 8001454:	2300      	movs	r3, #0
 8001456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800145a:	e007      	b.n	800146c <TIMER_ISR+0xd0>
				}
				else user_pre+=increase;
 800145c:	7efb      	ldrb	r3, [r7, #27]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	4413      	add	r3, r2
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	e002      	b.n	800146c <TIMER_ISR+0xd0>

			}
			else{
				user_flage=0;
 8001466:	2300      	movs	r3, #0
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(user_flage==1){
 800146c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001470:	2b01      	cmp	r3, #1
 8001472:	d0d8      	beq.n	8001426 <TIMER_ISR+0x8a>
			}
		}



	ISR_TIMER->TIMx_CR1 &=~(1<<0);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 0201 	bic.w	r2, r3, #1
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	601a      	str	r2, [r3, #0]

	ISR_TIMER->TIMx_CR1  |=(1<<2);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f043 0204 	orr.w	r2, r3, #4
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	601a      	str	r2, [r3, #0]

	ISR_TIMER->TIMx_DIER |=(1<<0);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f043 0201 	orr.w	r2, r3, #1
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	60da      	str	r2, [r3, #12]

	ISR_TIMER->TIMx_ARR=user_top;//frec peak value
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6a3a      	ldr	r2, [r7, #32]
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c

	ISR_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28

	ISR_TIMER->TIMx_EGR |=(1<<0);//		Bit 0 UG: Update generation
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	615a      	str	r2, [r3, #20]

	ISR_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]

	NVIC_TIM3_global_interrupt_Enable;
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <TIMER_ISR+0x148>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <TIMER_ISR+0x148>)
 80014c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014c8:	6013      	str	r3, [r2, #0]

}
 80014ca:	bf00      	nop
 80014cc:	372c      	adds	r7, #44	; 0x2c
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	40021000 	.word	0x40021000
 80014d8:	200000e4 	.word	0x200000e4
 80014dc:	200000f0 	.word	0x200000f0
 80014e0:	000f4240 	.word	0x000f4240
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <TIME_CALCULATION>:
//======================================================================================================

uint32_t TIME_CALCULATION(uint32_t clk,uint8_t TIMER_ST){
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
	if(TIMER_ST==TIMER_START){
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d132      	bne.n	8001560 <TIME_CALCULATION+0x78>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <TIME_CALCULATION+0xd0>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a2e      	ldr	r2, [pc, #184]	; (80015b8 <TIME_CALCULATION+0xd0>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	61d3      	str	r3, [r2, #28]
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <TIME_CALCULATION+0xd4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a2c      	ldr	r2, [pc, #176]	; (80015bc <TIME_CALCULATION+0xd4>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_CR1  |=(1<<2);
 8001512:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <TIME_CALCULATION+0xd4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a29      	ldr	r2, [pc, #164]	; (80015bc <TIME_CALCULATION+0xd4>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_DIER |=(1<<0);//Update interrupt enable
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <TIME_CALCULATION+0xd4>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	4a26      	ldr	r2, [pc, #152]	; (80015bc <TIME_CALCULATION+0xd4>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	60d3      	str	r3, [r2, #12]

		TIM4->TIMx_ARR=64000;//peak value 8ms of freq=8000000hz
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <TIME_CALCULATION+0xd4>)
 800152c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM4->TIMx_PSC=0;//prescaller
 8001532:	4b22      	ldr	r3, [pc, #136]	; (80015bc <TIME_CALCULATION+0xd4>)
 8001534:	2200      	movs	r2, #0
 8001536:	629a      	str	r2, [r3, #40]	; 0x28

		TIM4->TIMx_EGR |=(1<<0);//Bit 0 UG: Update generation
 8001538:	4b20      	ldr	r3, [pc, #128]	; (80015bc <TIME_CALCULATION+0xd4>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <TIME_CALCULATION+0xd4>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6153      	str	r3, [r2, #20]

		TIM4->TIMx_CR1 |=(1<<0);//enable the timer
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <TIME_CALCULATION+0xd4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <TIME_CALCULATION+0xd4>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6013      	str	r3, [r2, #0]
		NVIC_TIM4_global_interrupt_Enable;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <TIME_CALCULATION+0xd8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1a      	ldr	r2, [pc, #104]	; (80015c0 <TIME_CALCULATION+0xd8>)
 8001556:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800155a:	6013      	str	r3, [r2, #0]
		return 1;
 800155c:	2301      	movs	r3, #1
 800155e:	e025      	b.n	80015ac <TIME_CALCULATION+0xc4>
	}
	else {
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <TIME_CALCULATION+0xd4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a15      	ldr	r2, [pc, #84]	; (80015bc <TIME_CALCULATION+0xd4>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6013      	str	r3, [r2, #0]
		timer_ticks=TIM4->TIMx_CNT;
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <TIME_CALCULATION+0xd4>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	b29a      	uxth	r2, r3
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <TIME_CALCULATION+0xdc>)
 8001574:	801a      	strh	r2, [r3, #0]
		uint32_t X=((timer_ticks+(overflowtims*64000))/(clk/1000000));
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <TIME_CALCULATION+0xdc>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <TIME_CALCULATION+0xe0>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8001586:	fb03 f301 	mul.w	r3, r3, r1
 800158a:	4413      	add	r3, r2
 800158c:	4619      	mov	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <TIME_CALCULATION+0xe4>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	0c9b      	lsrs	r3, r3, #18
 8001598:	fbb1 f3f3 	udiv	r3, r1, r3
 800159c:	60fb      	str	r3, [r7, #12]
		overflowtims=0;
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <TIME_CALCULATION+0xe0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	801a      	strh	r2, [r3, #0]
		timer_ticks=0;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <TIME_CALCULATION+0xdc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	801a      	strh	r2, [r3, #0]
		return X;
 80015aa:	68fb      	ldr	r3, [r7, #12]
	}
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40000800 	.word	0x40000800
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	200000b0 	.word	0x200000b0
 80015c8:	200000ae 	.word	0x200000ae
 80015cc:	431bde83 	.word	0x431bde83

080015d0 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 80015de:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <SPWM_timer_INIT+0x100>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <SPWM_timer_INIT+0x100>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0201 	bic.w	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d12f      	bne.n	8001654 <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <SPWM_timer_INIT+0x100>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699a      	ldr	r2, [r3, #24]
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <SPWM_timer_INIT+0x100>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001602:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <SPWM_timer_INIT+0x100>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <SPWM_timer_INIT+0x100>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001612:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <SPWM_timer_INIT+0x100>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699a      	ldr	r2, [r3, #24]
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <SPWM_timer_INIT+0x100>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0208 	orr.w	r2, r2, #8
 8001622:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <SPWM_timer_INIT+0x100>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699a      	ldr	r2, [r3, #24]
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <SPWM_timer_INIT+0x100>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001632:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <SPWM_timer_INIT+0x100>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6a1a      	ldr	r2, [r3, #32]
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <SPWM_timer_INIT+0x100>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0210 	orr.w	r2, r2, #16
 8001642:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <SPWM_timer_INIT+0x100>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6a1a      	ldr	r2, [r3, #32]
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <SPWM_timer_INIT+0x100>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <SPWM_timer_INIT+0x100>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <SPWM_timer_INIT+0x100>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001662:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <SPWM_timer_INIT+0x100>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <SPWM_timer_INIT+0x100>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <SPWM_timer_INIT+0x100>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <SPWM_timer_INIT+0x100>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <SPWM_timer_INIT+0x100>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <SPWM_timer_INIT+0x100>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001692:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <SPWM_timer_INIT+0x100>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <SPWM_timer_INIT+0x100>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <SPWM_timer_INIT+0x100>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <SPWM_timer_INIT+0x100>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <SPWM_timer_INIT+0x100>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SPWM_timer_INIT+0x100>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000004 	.word	0x20000004

080016d4 <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <TIM2_IRQHandler+0x34>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <TIM2_IRQHandler+0x34>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <TIM2_IRQHandler+0x38>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <TIM2_IRQHandler+0x34>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <TIM2_IRQHandler+0x34>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000020 	.word	0x20000020
 800170c:	2000001c 	.word	0x2000001c

08001710 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <TIM3_IRQHandler+0x6c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d119      	bne.n	8001750 <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <TIM3_IRQHandler+0x70>)
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	4a17      	ldr	r2, [pc, #92]	; (8001780 <TIM3_IRQHandler+0x70>)
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <TIM3_IRQHandler+0x74>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <TIM3_IRQHandler+0x74>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3b01      	subs	r3, #1
 8001736:	4a13      	ldr	r2, [pc, #76]	; (8001784 <TIM3_IRQHandler+0x74>)
 8001738:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 800173a:	e01c      	b.n	8001776 <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <TIM3_IRQHandler+0x6c>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <TIM3_IRQHandler+0x70>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <TIM3_IRQHandler+0x70>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6013      	str	r3, [r2, #0]
}
 800174e:	e012      	b.n	8001776 <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <TIM3_IRQHandler+0x78>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <TIM3_IRQHandler+0x78>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0201 	bic.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <TIM3_IRQHandler+0x78>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <TIM3_IRQHandler+0x78>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <TIM3_IRQHandler+0x7c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4798      	blx	r3
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200000b8 	.word	0x200000b8
 8001780:	40000400 	.word	0x40000400
 8001784:	200000b4 	.word	0x200000b4
 8001788:	200000f0 	.word	0x200000f0
 800178c:	200000e4 	.word	0x200000e4

08001790 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <TIM4_IRQHandler+0x24>)
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <TIM4_IRQHandler+0x24>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6113      	str	r3, [r2, #16]
	overflowtims++;
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <TIM4_IRQHandler+0x28>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <TIM4_IRQHandler+0x28>)
 80017aa:	801a      	strh	r2, [r3, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40000800 	.word	0x40000800
 80017b8:	200000ae 	.word	0x200000ae

080017bc <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 80017c0:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <TIM1_UP_IRQHandler+0x17c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b5d      	ldr	r3, [pc, #372]	; (800193c <TIM1_UP_IRQHandler+0x180>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d911      	bls.n	80017f0 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 80017cc:	4b5c      	ldr	r3, [pc, #368]	; (8001940 <TIM1_UP_IRQHandler+0x184>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
		flage1=0;
 80017d2:	4b5c      	ldr	r3, [pc, #368]	; (8001944 <TIM1_UP_IRQHandler+0x188>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 80017d8:	4b58      	ldr	r3, [pc, #352]	; (800193c <TIM1_UP_IRQHandler+0x180>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a5a      	ldr	r2, [pc, #360]	; (8001948 <TIM1_UP_IRQHandler+0x18c>)
 80017de:	7812      	ldrb	r2, [r2, #0]
 80017e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80017e4:	4b55      	ldr	r3, [pc, #340]	; (800193c <TIM1_UP_IRQHandler+0x180>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a53      	ldr	r2, [pc, #332]	; (8001938 <TIM1_UP_IRQHandler+0x17c>)
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e018      	b.n	8001822 <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 80017f0:	4b51      	ldr	r3, [pc, #324]	; (8001938 <TIM1_UP_IRQHandler+0x17c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b63      	cmp	r3, #99	; 0x63
 80017f6:	d814      	bhi.n	8001822 <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 80017f8:	4b51      	ldr	r3, [pc, #324]	; (8001940 <TIM1_UP_IRQHandler+0x184>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
		flage1=1;
 80017fe:	4b51      	ldr	r3, [pc, #324]	; (8001944 <TIM1_UP_IRQHandler+0x188>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 8001804:	4b51      	ldr	r3, [pc, #324]	; (800194c <TIM1_UP_IRQHandler+0x190>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	f083 0301 	eor.w	r3, r3, #1
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b4f      	ldr	r3, [pc, #316]	; (800194c <TIM1_UP_IRQHandler+0x190>)
 8001810:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 8001812:	4b4a      	ldr	r3, [pc, #296]	; (800193c <TIM1_UP_IRQHandler+0x180>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a4c      	ldr	r2, [pc, #304]	; (8001948 <TIM1_UP_IRQHandler+0x18c>)
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	fbb3 f3f2 	udiv	r3, r3, r2
 800181e:	4a46      	ldr	r2, [pc, #280]	; (8001938 <TIM1_UP_IRQHandler+0x17c>)
 8001820:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 8001822:	4b4a      	ldr	r3, [pc, #296]	; (800194c <TIM1_UP_IRQHandler+0x190>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d110      	bne.n	800184c <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 800182a:	4b49      	ldr	r3, [pc, #292]	; (8001950 <TIM1_UP_IRQHandler+0x194>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6a1a      	ldr	r2, [r3, #32]
 8001830:	4b47      	ldr	r3, [pc, #284]	; (8001950 <TIM1_UP_IRQHandler+0x194>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 800183a:	4b45      	ldr	r3, [pc, #276]	; (8001950 <TIM1_UP_IRQHandler+0x194>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6a1a      	ldr	r2, [r3, #32]
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <TIM1_UP_IRQHandler+0x194>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0210 	orr.w	r2, r2, #16
 8001848:	621a      	str	r2, [r3, #32]
 800184a:	e013      	b.n	8001874 <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 800184c:	4b3f      	ldr	r3, [pc, #252]	; (800194c <TIM1_UP_IRQHandler+0x190>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10f      	bne.n	8001874 <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 8001854:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <TIM1_UP_IRQHandler+0x194>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6a1a      	ldr	r2, [r3, #32]
 800185a:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <TIM1_UP_IRQHandler+0x194>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0210 	bic.w	r2, r2, #16
 8001862:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 8001864:	4b3a      	ldr	r3, [pc, #232]	; (8001950 <TIM1_UP_IRQHandler+0x194>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a1a      	ldr	r2, [r3, #32]
 800186a:	4b39      	ldr	r3, [pc, #228]	; (8001950 <TIM1_UP_IRQHandler+0x194>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 8001874:	4b33      	ldr	r3, [pc, #204]	; (8001944 <TIM1_UP_IRQHandler+0x188>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d11c      	bne.n	80018b6 <TIM1_UP_IRQHandler+0xfa>
 800187c:	4b30      	ldr	r3, [pc, #192]	; (8001940 <TIM1_UP_IRQHandler+0x184>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d118      	bne.n	80018b6 <TIM1_UP_IRQHandler+0xfa>
		top=c;
 8001884:	4b33      	ldr	r3, [pc, #204]	; (8001954 <TIM1_UP_IRQHandler+0x198>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a2c      	ldr	r2, [pc, #176]	; (800193c <TIM1_UP_IRQHandler+0x180>)
 800188a:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 800188c:	4b32      	ldr	r3, [pc, #200]	; (8001958 <TIM1_UP_IRQHandler+0x19c>)
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	4b29      	ldr	r3, [pc, #164]	; (8001938 <TIM1_UP_IRQHandler+0x17c>)
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <TIM1_UP_IRQHandler+0x180>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2301      	movs	r3, #1
 800189a:	f7ff fe99 	bl	80015d0 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 800189e:	4b27      	ldr	r3, [pc, #156]	; (800193c <TIM1_UP_IRQHandler+0x180>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a29      	ldr	r2, [pc, #164]	; (8001948 <TIM1_UP_IRQHandler+0x18c>)
 80018a4:	7812      	ldrb	r2, [r2, #0]
 80018a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <TIM1_UP_IRQHandler+0x17c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a21      	ldr	r2, [pc, #132]	; (8001938 <TIM1_UP_IRQHandler+0x17c>)
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e035      	b.n	8001922 <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <TIM1_UP_IRQHandler+0x184>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d129      	bne.n	8001912 <TIM1_UP_IRQHandler+0x156>
 80018be:	4b21      	ldr	r3, [pc, #132]	; (8001944 <TIM1_UP_IRQHandler+0x188>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d125      	bne.n	8001912 <TIM1_UP_IRQHandler+0x156>
		top=c;
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <TIM1_UP_IRQHandler+0x198>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1c      	ldr	r2, [pc, #112]	; (800193c <TIM1_UP_IRQHandler+0x180>)
 80018cc:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <TIM1_UP_IRQHandler+0x17c>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <TIM1_UP_IRQHandler+0x180>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	491c      	ldr	r1, [pc, #112]	; (8001948 <TIM1_UP_IRQHandler+0x18c>)
 80018d8:	7809      	ldrb	r1, [r1, #0]
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	4a15      	ldr	r2, [pc, #84]	; (8001938 <TIM1_UP_IRQHandler+0x17c>)
 80018e2:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <TIM1_UP_IRQHandler+0x19c>)
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <TIM1_UP_IRQHandler+0x17c>)
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <TIM1_UP_IRQHandler+0x180>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2301      	movs	r3, #1
 80018f2:	f7ff fe6d 	bl	80015d0 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <TIM1_UP_IRQHandler+0x180>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <TIM1_UP_IRQHandler+0x18c>)
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <TIM1_UP_IRQHandler+0x17c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d10b      	bne.n	8001922 <TIM1_UP_IRQHandler+0x166>
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <TIM1_UP_IRQHandler+0x17c>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e007      	b.n	8001922 <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <TIM1_UP_IRQHandler+0x194>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <TIM1_UP_IRQHandler+0x194>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0201 	bic.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <TIM1_UP_IRQHandler+0x194>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <TIM1_UP_IRQHandler+0x194>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0201 	bic.w	r2, r2, #1
 8001930:	611a      	str	r2, [r3, #16]
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000018 	.word	0x20000018
 800193c:	2000000c 	.word	0x2000000c
 8001940:	200000ac 	.word	0x200000ac
 8001944:	20000008 	.word	0x20000008
 8001948:	200000ec 	.word	0x200000ec
 800194c:	20000009 	.word	0x20000009
 8001950:	20000004 	.word	0x20000004
 8001954:	20000014 	.word	0x20000014
 8001958:	20000010 	.word	0x20000010

0800195c <MCAL_speed_init>:
#include "stm32_speed_DRIVER.h"
#define FLASH_BASE_ADDR     0x40022000
#define FLASH_ACR_OFFSET    0x00
#define FLASH_ACR          (*(volatile unsigned int*)(FLASH_BASE_ADDR + FLASH_ACR_OFFSET))
#define FLASH_ACR_LATENCY_Pos 0
void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	460a      	mov	r2, r1
 8001966:	71fb      	strb	r3, [r7, #7]
 8001968:	4613      	mov	r3, r2
 800196a:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d13a      	bne.n	80019e8 <MCAL_speed_init+0x8c>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 8001972:	79bb      	ldrb	r3, [r7, #6]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 80cc 	bne.w	8001b12 <MCAL_speed_init+0x1b6>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 800197a:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <MCAL_speed_init+0x1c0>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4a67      	ldr	r2, [pc, #412]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001984:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 8001986:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4a64      	ldr	r2, [pc, #400]	; (8001b1c <MCAL_speed_init+0x1c0>)
 800198c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001990:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 8001992:	4b62      	ldr	r3, [pc, #392]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4a61      	ldr	r2, [pc, #388]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001998:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800199c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 800199e:	4b5f      	ldr	r3, [pc, #380]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a5e      	ldr	r2, [pc, #376]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a8:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 80019aa:	4b5c      	ldr	r3, [pc, #368]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4a5b      	ldr	r2, [pc, #364]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019b0:	f023 0303 	bic.w	r3, r3, #3
 80019b4:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 80019b6:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 80019c2:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a55      	ldr	r2, [pc, #340]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019cc:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 80019ce:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019d4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019d8:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 80019da:	4b50      	ldr	r3, [pc, #320]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a4f      	ldr	r2, [pc, #316]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019e4:	6053      	str	r3, [r2, #4]

		}
	}


}
 80019e6:	e094      	b.n	8001b12 <MCAL_speed_init+0x1b6>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d150      	bne.n	8001a90 <MCAL_speed_init+0x134>
			RCC->RCC_CR |= (1 << 16);
 80019ee:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a4a      	ldr	r2, [pc, #296]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 80019fa:	bf00      	nop
 80019fc:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <MCAL_speed_init+0x1c0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f9      	beq.n	80019fc <MCAL_speed_init+0xa0>
			RCC->RCC_CFGR|=(1<<16);
 8001a08:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a43      	ldr	r2, [pc, #268]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a12:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8001a14:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4a40      	ldr	r2, [pc, #256]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a1a:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001a1e:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001a20:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a3d      	ldr	r2, [pc, #244]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2a:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 8001a2c:	bf00      	nop
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f9      	beq.n	8001a2e <MCAL_speed_init+0xd2>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 8001a3a:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <MCAL_speed_init+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a38      	ldr	r2, [pc, #224]	; (8001b20 <MCAL_speed_init+0x1c4>)
 8001a40:	f023 0307 	bic.w	r3, r3, #7
 8001a44:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 8001a46:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <MCAL_speed_init+0x1c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a35      	ldr	r2, [pc, #212]	; (8001b20 <MCAL_speed_init+0x1c4>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8001a52:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a31      	ldr	r2, [pc, #196]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a58:	f023 0303 	bic.w	r3, r3, #3
 8001a5c:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4a2e      	ldr	r2, [pc, #184]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 8001a6a:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4a2b      	ldr	r2, [pc, #172]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a74:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8001a76:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4a28      	ldr	r2, [pc, #160]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a7c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a80:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a25      	ldr	r2, [pc, #148]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a8c:	6053      	str	r3, [r2, #4]
}
 8001a8e:	e040      	b.n	8001b12 <MCAL_speed_init+0x1b6>
		else if (mood==mood_FAST_MOOD_72MHzCORE72MHzpref){
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d13d      	bne.n	8001b12 <MCAL_speed_init+0x1b6>
			RCC->RCC_CR |= (1 << 16);
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 17)));
 8001aa2:	bf00      	nop
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f9      	beq.n	8001aa4 <MCAL_speed_init+0x148>
			RCC->RCC_CFGR|=(1<<16);
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4a19      	ldr	r2, [pc, #100]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aba:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a16      	ldr	r2, [pc, #88]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001ac2:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001ac6:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]
			while (!(RCC->RCC_CR & (1 << 25)));
 8001ad4:	bf00      	nop
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f9      	beq.n	8001ad6 <MCAL_speed_init+0x17a>
			FLASH_ACR &= ~(0x7 << FLASH_ACR_LATENCY_Pos); // Clear LATENCY bits
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MCAL_speed_init+0x1c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <MCAL_speed_init+0x1c4>)
 8001ae8:	f023 0307 	bic.w	r3, r3, #7
 8001aec:	6013      	str	r3, [r2, #0]
			FLASH_ACR |= (2 << FLASH_ACR_LATENCY_Pos); // Set latency to 2 wait states for 72 MHz
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MCAL_speed_init+0x1c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <MCAL_speed_init+0x1c4>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001b00:	f023 0303 	bic.w	r3, r3, #3
 8001b04:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <MCAL_speed_init+0x1c0>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6053      	str	r3, [r2, #4]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40022000 	.word	0x40022000

08001b24 <ADC_INIT>:
#include "stm32f103c6_ADC.h"


uint8_t flag_ADC_INIT=0;

void ADC_INIT(ADC_typeDef* ADCx,uint8_t ADC_STATE_){
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]

	if(ADC_STATE_==ADC_STATE_START){
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d132      	bne.n	8001b9c <ADC_INIT+0x78>
		if(ADCx==ADC1){
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a25      	ldr	r2, [pc, #148]	; (8001bd0 <ADC_INIT+0xac>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d106      	bne.n	8001b4c <ADC_INIT+0x28>
			ADC1_Clock_Enable();
 8001b3e:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <ADC_INIT+0xb0>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <ADC_INIT+0xb0>)
 8001b44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b48:	6193      	str	r3, [r2, #24]
 8001b4a:	e009      	b.n	8001b60 <ADC_INIT+0x3c>
		}
		else if(ADCx==ADC2){
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a22      	ldr	r2, [pc, #136]	; (8001bd8 <ADC_INIT+0xb4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d105      	bne.n	8001b60 <ADC_INIT+0x3c>
			ADC2_Clock_Enable();
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <ADC_INIT+0xb0>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <ADC_INIT+0xb0>)
 8001b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5e:	6193      	str	r3, [r2, #24]
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
		//		Bit 1 CONT: Continuous conversion
		//		This bit is set and cleared by software. If set conversion takes place continuously till this bit is
		//		reset.
		//		0: Single conversion mode
		//		1: Continuous conversion mode
		ADCx->ADC_CR2 &=~(1<<1);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 0202 	bic.w	r2, r3, #2
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	609a      	str	r2, [r3, #8]
		//		Bit 2 CAL: A/D Calibration
		//		This bit is set by software to start the calibration. It is reset by hardware after calibration is
		//		complete.
		//		0: Calibration completed
		//		1: Enable calibratio
		ADCx->ADC_CR2 |=(1<<2);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f043 0204 	orr.w	r2, r3, #4
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	609a      	str	r2, [r3, #8]
		while(((ADCx->ADC_CR2>>2)&1)){};
 8001b84:	bf00      	nop
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f8      	bne.n	8001b86 <ADC_INIT+0x62>


		flag_ADC_INIT=1;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <ADC_INIT+0xb8>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
		ADC2_Clock_DESABLE();
		flag_ADC_INIT=0;
	}


}
 8001b9a:	e014      	b.n	8001bc6 <ADC_INIT+0xa2>
		ADCx->ADC_CR2 &=~(1<<0);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f023 0201 	bic.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
		ADC1_Clock_DESABLE();
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <ADC_INIT+0xb0>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <ADC_INIT+0xb0>)
 8001bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb2:	60d3      	str	r3, [r2, #12]
		ADC2_Clock_DESABLE();
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <ADC_INIT+0xb0>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <ADC_INIT+0xb0>)
 8001bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bbe:	60d3      	str	r3, [r2, #12]
		flag_ADC_INIT=0;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <ADC_INIT+0xb8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40012400 	.word	0x40012400
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40012800 	.word	0x40012800
 8001bdc:	200000b9 	.word	0x200000b9

08001be0 <ADC_READ>:





uint16_t ADC_READ(ADC_typeDef* ADCx,uint8_t ADC_pin){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
	if(flag_ADC_INIT){
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <ADC_READ+0x98>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d03b      	beq.n	8001c6c <ADC_READ+0x8c>

		if(ADC_pin<0b0111)
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d807      	bhi.n	8001c0a <ADC_READ+0x2a>
			pinmode(GPIOA, ADC_pin, GPIO_MODE_ANALOG);
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4619      	mov	r1, r3
 8001c02:	481e      	ldr	r0, [pc, #120]	; (8001c7c <ADC_READ+0x9c>)
 8001c04:	f7ff f9e6 	bl	8000fd4 <pinmode>
 8001c08:	e006      	b.n	8001c18 <ADC_READ+0x38>
		else
			pinmode(GPIOB, ADC_pin, GPIO_MODE_ANALOG);
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2200      	movs	r2, #0
 8001c10:	4619      	mov	r1, r3
 8001c12:	481b      	ldr	r0, [pc, #108]	; (8001c80 <ADC_READ+0xa0>)
 8001c14:	f7ff f9de 	bl	8000fd4 <pinmode>

		ADCx->ADC_CR2=0;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
		ADCx->ADC_SQR3 =0;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34

		//Bits 4:0 SQ1[4:0]: first conversion in regular sequence
		ADCx->ADC_SQR3 |=(ADC_pin << 0);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	635a      	str	r2, [r3, #52]	; 0x34
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
		ADCx->ADC_CR2 |=(1<<0);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]
		//		This bit is set by software to start conversion and cleared by hardware as soon as
		//		conversion starts. It starts a conversion of a group of regular channels if SWSTART is
		//		selected as trigger event by the EXTSEL[2:0] bits.
		//		0: Reset state
		//		1: Starts conversion of regular channels
		ADCx->ADC_CR2 |=(1<<22);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]
		//		Bit 1 EOC: End of conversion
		//		This bit is set by hardware at the end of a group channel conversion (regular or injected). It is
		//		cleared by software or by reading the ADC_DR.
		//		0: Conversion is not complete
		//		1: Conversion complete
		while(! ((ADCx->ADC_SR>>1)&1) ){};
 8001c54:	bf00      	nop
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f8      	beq.n	8001c56 <ADC_READ+0x76>

		return((uint16_t)ADCx->ADC_DR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	e000      	b.n	8001c6e <ADC_READ+0x8e>

	}
	else{
		return 0;
 8001c6c:	2300      	movs	r3, #0
	}


}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200000b9 	.word	0x200000b9
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	40010c00 	.word	0x40010c00

08001c84 <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d854      	bhi.n	8001d3e <Enable_NVIC+0xba>
 8001c94:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <Enable_NVIC+0x18>)
 8001c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9a:	bf00      	nop
 8001c9c:	08001cdd 	.word	0x08001cdd
 8001ca0:	08001ceb 	.word	0x08001ceb
 8001ca4:	08001cf9 	.word	0x08001cf9
 8001ca8:	08001d07 	.word	0x08001d07
 8001cac:	08001d15 	.word	0x08001d15
 8001cb0:	08001d23 	.word	0x08001d23
 8001cb4:	08001d23 	.word	0x08001d23
 8001cb8:	08001d23 	.word	0x08001d23
 8001cbc:	08001d23 	.word	0x08001d23
 8001cc0:	08001d23 	.word	0x08001d23
 8001cc4:	08001d31 	.word	0x08001d31
 8001cc8:	08001d31 	.word	0x08001d31
 8001ccc:	08001d31 	.word	0x08001d31
 8001cd0:	08001d31 	.word	0x08001d31
 8001cd4:	08001d31 	.word	0x08001d31
 8001cd8:	08001d31 	.word	0x08001d31
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <Enable_NVIC+0xc4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <Enable_NVIC+0xc4>)
 8001ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ce6:	6013      	str	r3, [r2, #0]
		break;
 8001ce8:	e029      	b.n	8001d3e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <Enable_NVIC+0xc4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <Enable_NVIC+0xc4>)
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf4:	6013      	str	r3, [r2, #0]
		break;
 8001cf6:	e022      	b.n	8001d3e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <Enable_NVIC+0xc4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <Enable_NVIC+0xc4>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	6013      	str	r3, [r2, #0]
		break;
 8001d04:	e01b      	b.n	8001d3e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <Enable_NVIC+0xc4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <Enable_NVIC+0xc4>)
 8001d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d10:	6013      	str	r3, [r2, #0]
		break;
 8001d12:	e014      	b.n	8001d3e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <Enable_NVIC+0xc4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <Enable_NVIC+0xc4>)
 8001d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1e:	6013      	str	r3, [r2, #0]
		break;
 8001d20:	e00d      	b.n	8001d3e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <Enable_NVIC+0xc4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <Enable_NVIC+0xc4>)
 8001d28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d2c:	6013      	str	r3, [r2, #0]
		break;
 8001d2e:	e006      	b.n	8001d3e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <Enable_NVIC+0xc8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <Enable_NVIC+0xc8>)
 8001d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3a:	6013      	str	r3, [r2, #0]
		break;
 8001d3c:	bf00      	nop
	}


}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000e104 	.word	0xe000e104

08001d50 <EXTI>:
 * @param [in]      -function_addres : app ISR function
 * @retval          - none
 * Note             -
 *================================================================ */

void EXTI(GPIO_typeDef* PORTx ,uint16_t pin,uint16_t triggercase,void (*function_addres)(interrupt_data* isr_data,uint8_t interupt_num)){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	817b      	strh	r3, [r7, #10]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	813b      	strh	r3, [r7, #8]

	pinmode(PORTx,pin,GPIO_MODE_INTPUT_AF);//set pin to _INTPUT_AF
 8001d62:	897b      	ldrh	r3, [r7, #10]
 8001d64:	2204      	movs	r2, #4
 8001d66:	4619      	mov	r1, r3
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f7ff f933 	bl	8000fd4 <pinmode>
	AFIO_Clock_Enable();
 8001d6e:	4b96      	ldr	r3, [pc, #600]	; (8001fc8 <EXTI+0x278>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	4a95      	ldr	r2, [pc, #596]	; (8001fc8 <EXTI+0x278>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6193      	str	r3, [r2, #24]
	//	0000: PA[x] pin
	//	0001: PB[x] pin
	//	0010: PC[x] pin
	//	0011: PD[x] pin

	switch(pin){
 8001d7a:	897b      	ldrh	r3, [r7, #10]
 8001d7c:	2b0f      	cmp	r3, #15
 8001d7e:	f200 8392 	bhi.w	80024a6 <EXTI+0x756>
 8001d82:	a201      	add	r2, pc, #4	; (adr r2, 8001d88 <EXTI+0x38>)
 8001d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d88:	08001dc9 	.word	0x08001dc9
 8001d8c:	08001e2f 	.word	0x08001e2f
 8001d90:	08001e95 	.word	0x08001e95
 8001d94:	08001efb 	.word	0x08001efb
 8001d98:	08001f61 	.word	0x08001f61
 8001d9c:	08001fe1 	.word	0x08001fe1
 8001da0:	08002047 	.word	0x08002047
 8001da4:	080020ad 	.word	0x080020ad
 8001da8:	08002113 	.word	0x08002113
 8001dac:	08002179 	.word	0x08002179
 8001db0:	080021df 	.word	0x080021df
 8001db4:	08002259 	.word	0x08002259
 8001db8:	080022bf 	.word	0x080022bf
 8001dbc:	08002325 	.word	0x08002325
 8001dc0:	0800238b 	.word	0x0800238b
 8001dc4:	080023ef 	.word	0x080023ef
	case pin0:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<0);
 8001dc8:	4b80      	ldr	r3, [pc, #512]	; (8001fcc <EXTI+0x27c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4a7f      	ldr	r2, [pc, #508]	; (8001fcc <EXTI+0x27c>)
 8001dce:	f023 030f 	bic.w	r3, r3, #15
 8001dd2:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<0);}
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4a7e      	ldr	r2, [pc, #504]	; (8001fd0 <EXTI+0x280>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d106      	bne.n	8001dea <EXTI+0x9a>
 8001ddc:	4b7b      	ldr	r3, [pc, #492]	; (8001fcc <EXTI+0x27c>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4a7a      	ldr	r2, [pc, #488]	; (8001fcc <EXTI+0x27c>)
 8001de2:	f023 030f 	bic.w	r3, r3, #15
 8001de6:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}

		break;
 8001de8:	e333      	b.n	8002452 <EXTI+0x702>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4a79      	ldr	r2, [pc, #484]	; (8001fd4 <EXTI+0x284>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d106      	bne.n	8001e00 <EXTI+0xb0>
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <EXTI+0x27c>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <EXTI+0x27c>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6093      	str	r3, [r2, #8]
		break;
 8001dfe:	e328      	b.n	8002452 <EXTI+0x702>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4a75      	ldr	r2, [pc, #468]	; (8001fd8 <EXTI+0x288>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d106      	bne.n	8001e16 <EXTI+0xc6>
 8001e08:	4b70      	ldr	r3, [pc, #448]	; (8001fcc <EXTI+0x27c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4a6f      	ldr	r2, [pc, #444]	; (8001fcc <EXTI+0x27c>)
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	6093      	str	r3, [r2, #8]
		break;
 8001e14:	e31d      	b.n	8002452 <EXTI+0x702>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4a70      	ldr	r2, [pc, #448]	; (8001fdc <EXTI+0x28c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	f040 8319 	bne.w	8002452 <EXTI+0x702>
 8001e20:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <EXTI+0x27c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a69      	ldr	r2, [pc, #420]	; (8001fcc <EXTI+0x27c>)
 8001e26:	f043 0303 	orr.w	r3, r3, #3
 8001e2a:	6093      	str	r3, [r2, #8]
		break;
 8001e2c:	e311      	b.n	8002452 <EXTI+0x702>
	case pin1:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<4);
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <EXTI+0x27c>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4a66      	ldr	r2, [pc, #408]	; (8001fcc <EXTI+0x27c>)
 8001e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e38:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<4);}
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4a64      	ldr	r2, [pc, #400]	; (8001fd0 <EXTI+0x280>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d106      	bne.n	8001e50 <EXTI+0x100>
 8001e42:	4b62      	ldr	r3, [pc, #392]	; (8001fcc <EXTI+0x27c>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4a61      	ldr	r2, [pc, #388]	; (8001fcc <EXTI+0x27c>)
 8001e48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e4c:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}

		break;
 8001e4e:	e302      	b.n	8002456 <EXTI+0x706>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4a60      	ldr	r2, [pc, #384]	; (8001fd4 <EXTI+0x284>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d106      	bne.n	8001e66 <EXTI+0x116>
 8001e58:	4b5c      	ldr	r3, [pc, #368]	; (8001fcc <EXTI+0x27c>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a5b      	ldr	r2, [pc, #364]	; (8001fcc <EXTI+0x27c>)
 8001e5e:	f043 0310 	orr.w	r3, r3, #16
 8001e62:	6093      	str	r3, [r2, #8]
		break;
 8001e64:	e2f7      	b.n	8002456 <EXTI+0x706>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4a5b      	ldr	r2, [pc, #364]	; (8001fd8 <EXTI+0x288>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d106      	bne.n	8001e7c <EXTI+0x12c>
 8001e6e:	4b57      	ldr	r3, [pc, #348]	; (8001fcc <EXTI+0x27c>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4a56      	ldr	r2, [pc, #344]	; (8001fcc <EXTI+0x27c>)
 8001e74:	f043 0320 	orr.w	r3, r3, #32
 8001e78:	6093      	str	r3, [r2, #8]
		break;
 8001e7a:	e2ec      	b.n	8002456 <EXTI+0x706>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a57      	ldr	r2, [pc, #348]	; (8001fdc <EXTI+0x28c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	f040 82e8 	bne.w	8002456 <EXTI+0x706>
 8001e86:	4b51      	ldr	r3, [pc, #324]	; (8001fcc <EXTI+0x27c>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	4a50      	ldr	r2, [pc, #320]	; (8001fcc <EXTI+0x27c>)
 8001e8c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001e90:	6093      	str	r3, [r2, #8]
		break;
 8001e92:	e2e0      	b.n	8002456 <EXTI+0x706>
	case pin2:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<8);
 8001e94:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <EXTI+0x27c>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4a4c      	ldr	r2, [pc, #304]	; (8001fcc <EXTI+0x27c>)
 8001e9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e9e:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<8);}
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a4b      	ldr	r2, [pc, #300]	; (8001fd0 <EXTI+0x280>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d106      	bne.n	8001eb6 <EXTI+0x166>
 8001ea8:	4b48      	ldr	r3, [pc, #288]	; (8001fcc <EXTI+0x27c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4a47      	ldr	r2, [pc, #284]	; (8001fcc <EXTI+0x27c>)
 8001eae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001eb2:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}

		break;
 8001eb4:	e2d1      	b.n	800245a <EXTI+0x70a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4a46      	ldr	r2, [pc, #280]	; (8001fd4 <EXTI+0x284>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d106      	bne.n	8001ecc <EXTI+0x17c>
 8001ebe:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <EXTI+0x27c>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4a42      	ldr	r2, [pc, #264]	; (8001fcc <EXTI+0x27c>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6093      	str	r3, [r2, #8]
		break;
 8001eca:	e2c6      	b.n	800245a <EXTI+0x70a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a42      	ldr	r2, [pc, #264]	; (8001fd8 <EXTI+0x288>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d106      	bne.n	8001ee2 <EXTI+0x192>
 8001ed4:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <EXTI+0x27c>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a3c      	ldr	r2, [pc, #240]	; (8001fcc <EXTI+0x27c>)
 8001eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ede:	6093      	str	r3, [r2, #8]
		break;
 8001ee0:	e2bb      	b.n	800245a <EXTI+0x70a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <EXTI+0x28c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	f040 82b7 	bne.w	800245a <EXTI+0x70a>
 8001eec:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <EXTI+0x27c>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a36      	ldr	r2, [pc, #216]	; (8001fcc <EXTI+0x27c>)
 8001ef2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ef6:	6093      	str	r3, [r2, #8]
		break;
 8001ef8:	e2af      	b.n	800245a <EXTI+0x70a>
	case pin3:
		AFIO->AFIO_EXTICR1 &=~(0b1111<<12);
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <EXTI+0x27c>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	4a33      	ldr	r2, [pc, #204]	; (8001fcc <EXTI+0x27c>)
 8001f00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f04:	6093      	str	r3, [r2, #8]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<12);}
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4a31      	ldr	r2, [pc, #196]	; (8001fd0 <EXTI+0x280>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d106      	bne.n	8001f1c <EXTI+0x1cc>
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <EXTI+0x27c>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4a2e      	ldr	r2, [pc, #184]	; (8001fcc <EXTI+0x27c>)
 8001f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f18:	6093      	str	r3, [r2, #8]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}

		break;
 8001f1a:	e2a0      	b.n	800245e <EXTI+0x70e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a2d      	ldr	r2, [pc, #180]	; (8001fd4 <EXTI+0x284>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d106      	bne.n	8001f32 <EXTI+0x1e2>
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <EXTI+0x27c>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a28      	ldr	r2, [pc, #160]	; (8001fcc <EXTI+0x27c>)
 8001f2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f2e:	6093      	str	r3, [r2, #8]
		break;
 8001f30:	e295      	b.n	800245e <EXTI+0x70e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4a28      	ldr	r2, [pc, #160]	; (8001fd8 <EXTI+0x288>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d106      	bne.n	8001f48 <EXTI+0x1f8>
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <EXTI+0x27c>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <EXTI+0x27c>)
 8001f40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f44:	6093      	str	r3, [r2, #8]
		break;
 8001f46:	e28a      	b.n	800245e <EXTI+0x70e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <EXTI+0x28c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	f040 8286 	bne.w	800245e <EXTI+0x70e>
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <EXTI+0x27c>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <EXTI+0x27c>)
 8001f58:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001f5c:	6093      	str	r3, [r2, #8]
		break;
 8001f5e:	e27e      	b.n	800245e <EXTI+0x70e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin4:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<0);
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <EXTI+0x27c>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <EXTI+0x27c>)
 8001f66:	f023 030f 	bic.w	r3, r3, #15
 8001f6a:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<0);}
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a18      	ldr	r2, [pc, #96]	; (8001fd0 <EXTI+0x280>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d106      	bne.n	8001f82 <EXTI+0x232>
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <EXTI+0x27c>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <EXTI+0x27c>)
 8001f7a:	f023 030f 	bic.w	r3, r3, #15
 8001f7e:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}

		break;
 8001f80:	e26f      	b.n	8002462 <EXTI+0x712>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <EXTI+0x284>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d106      	bne.n	8001f98 <EXTI+0x248>
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <EXTI+0x27c>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <EXTI+0x27c>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	60d3      	str	r3, [r2, #12]
		break;
 8001f96:	e264      	b.n	8002462 <EXTI+0x712>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <EXTI+0x288>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d106      	bne.n	8001fae <EXTI+0x25e>
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <EXTI+0x27c>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <EXTI+0x27c>)
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	60d3      	str	r3, [r2, #12]
		break;
 8001fac:	e259      	b.n	8002462 <EXTI+0x712>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <EXTI+0x28c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	f040 8255 	bne.w	8002462 <EXTI+0x712>
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <EXTI+0x27c>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a03      	ldr	r2, [pc, #12]	; (8001fcc <EXTI+0x27c>)
 8001fbe:	f043 0303 	orr.w	r3, r3, #3
 8001fc2:	60d3      	str	r3, [r2, #12]
		break;
 8001fc4:	e24d      	b.n	8002462 <EXTI+0x712>
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	40011400 	.word	0x40011400
	case pin5:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<4);
 8001fe0:	4b92      	ldr	r3, [pc, #584]	; (800222c <EXTI+0x4dc>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4a91      	ldr	r2, [pc, #580]	; (800222c <EXTI+0x4dc>)
 8001fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fea:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<4);}
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a90      	ldr	r2, [pc, #576]	; (8002230 <EXTI+0x4e0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d106      	bne.n	8002002 <EXTI+0x2b2>
 8001ff4:	4b8d      	ldr	r3, [pc, #564]	; (800222c <EXTI+0x4dc>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a8c      	ldr	r2, [pc, #560]	; (800222c <EXTI+0x4dc>)
 8001ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ffe:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}

		break;
 8002000:	e231      	b.n	8002466 <EXTI+0x716>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a8b      	ldr	r2, [pc, #556]	; (8002234 <EXTI+0x4e4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d106      	bne.n	8002018 <EXTI+0x2c8>
 800200a:	4b88      	ldr	r3, [pc, #544]	; (800222c <EXTI+0x4dc>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	4a87      	ldr	r2, [pc, #540]	; (800222c <EXTI+0x4dc>)
 8002010:	f043 0310 	orr.w	r3, r3, #16
 8002014:	60d3      	str	r3, [r2, #12]
		break;
 8002016:	e226      	b.n	8002466 <EXTI+0x716>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a87      	ldr	r2, [pc, #540]	; (8002238 <EXTI+0x4e8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d106      	bne.n	800202e <EXTI+0x2de>
 8002020:	4b82      	ldr	r3, [pc, #520]	; (800222c <EXTI+0x4dc>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a81      	ldr	r2, [pc, #516]	; (800222c <EXTI+0x4dc>)
 8002026:	f043 0320 	orr.w	r3, r3, #32
 800202a:	60d3      	str	r3, [r2, #12]
		break;
 800202c:	e21b      	b.n	8002466 <EXTI+0x716>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4a82      	ldr	r2, [pc, #520]	; (800223c <EXTI+0x4ec>)
 8002032:	4293      	cmp	r3, r2
 8002034:	f040 8217 	bne.w	8002466 <EXTI+0x716>
 8002038:	4b7c      	ldr	r3, [pc, #496]	; (800222c <EXTI+0x4dc>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a7b      	ldr	r2, [pc, #492]	; (800222c <EXTI+0x4dc>)
 800203e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002042:	60d3      	str	r3, [r2, #12]
		break;
 8002044:	e20f      	b.n	8002466 <EXTI+0x716>
	case pin6:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<8);
 8002046:	4b79      	ldr	r3, [pc, #484]	; (800222c <EXTI+0x4dc>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4a78      	ldr	r2, [pc, #480]	; (800222c <EXTI+0x4dc>)
 800204c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002050:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<8);}
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4a76      	ldr	r2, [pc, #472]	; (8002230 <EXTI+0x4e0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d106      	bne.n	8002068 <EXTI+0x318>
 800205a:	4b74      	ldr	r3, [pc, #464]	; (800222c <EXTI+0x4dc>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4a73      	ldr	r2, [pc, #460]	; (800222c <EXTI+0x4dc>)
 8002060:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002064:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}

		break;
 8002066:	e200      	b.n	800246a <EXTI+0x71a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4a72      	ldr	r2, [pc, #456]	; (8002234 <EXTI+0x4e4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d106      	bne.n	800207e <EXTI+0x32e>
 8002070:	4b6e      	ldr	r3, [pc, #440]	; (800222c <EXTI+0x4dc>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a6d      	ldr	r2, [pc, #436]	; (800222c <EXTI+0x4dc>)
 8002076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207a:	60d3      	str	r3, [r2, #12]
		break;
 800207c:	e1f5      	b.n	800246a <EXTI+0x71a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4a6d      	ldr	r2, [pc, #436]	; (8002238 <EXTI+0x4e8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d106      	bne.n	8002094 <EXTI+0x344>
 8002086:	4b69      	ldr	r3, [pc, #420]	; (800222c <EXTI+0x4dc>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	4a68      	ldr	r2, [pc, #416]	; (800222c <EXTI+0x4dc>)
 800208c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002090:	60d3      	str	r3, [r2, #12]
		break;
 8002092:	e1ea      	b.n	800246a <EXTI+0x71a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4a69      	ldr	r2, [pc, #420]	; (800223c <EXTI+0x4ec>)
 8002098:	4293      	cmp	r3, r2
 800209a:	f040 81e6 	bne.w	800246a <EXTI+0x71a>
 800209e:	4b63      	ldr	r3, [pc, #396]	; (800222c <EXTI+0x4dc>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4a62      	ldr	r2, [pc, #392]	; (800222c <EXTI+0x4dc>)
 80020a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80020a8:	60d3      	str	r3, [r2, #12]
		break;
 80020aa:	e1de      	b.n	800246a <EXTI+0x71a>
	case pin7:
		AFIO->AFIO_EXTICR2 &=~(0b1111<<12);
 80020ac:	4b5f      	ldr	r3, [pc, #380]	; (800222c <EXTI+0x4dc>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a5e      	ldr	r2, [pc, #376]	; (800222c <EXTI+0x4dc>)
 80020b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020b6:	60d3      	str	r3, [r2, #12]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<12);}
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a5d      	ldr	r2, [pc, #372]	; (8002230 <EXTI+0x4e0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d106      	bne.n	80020ce <EXTI+0x37e>
 80020c0:	4b5a      	ldr	r3, [pc, #360]	; (800222c <EXTI+0x4dc>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a59      	ldr	r2, [pc, #356]	; (800222c <EXTI+0x4dc>)
 80020c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020ca:	60d3      	str	r3, [r2, #12]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}

		break;
 80020cc:	e1cf      	b.n	800246e <EXTI+0x71e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a58      	ldr	r2, [pc, #352]	; (8002234 <EXTI+0x4e4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d106      	bne.n	80020e4 <EXTI+0x394>
 80020d6:	4b55      	ldr	r3, [pc, #340]	; (800222c <EXTI+0x4dc>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4a54      	ldr	r2, [pc, #336]	; (800222c <EXTI+0x4dc>)
 80020dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e0:	60d3      	str	r3, [r2, #12]
		break;
 80020e2:	e1c4      	b.n	800246e <EXTI+0x71e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4a54      	ldr	r2, [pc, #336]	; (8002238 <EXTI+0x4e8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d106      	bne.n	80020fa <EXTI+0x3aa>
 80020ec:	4b4f      	ldr	r3, [pc, #316]	; (800222c <EXTI+0x4dc>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a4e      	ldr	r2, [pc, #312]	; (800222c <EXTI+0x4dc>)
 80020f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020f6:	60d3      	str	r3, [r2, #12]
		break;
 80020f8:	e1b9      	b.n	800246e <EXTI+0x71e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4a4f      	ldr	r2, [pc, #316]	; (800223c <EXTI+0x4ec>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	f040 81b5 	bne.w	800246e <EXTI+0x71e>
 8002104:	4b49      	ldr	r3, [pc, #292]	; (800222c <EXTI+0x4dc>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a48      	ldr	r2, [pc, #288]	; (800222c <EXTI+0x4dc>)
 800210a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800210e:	60d3      	str	r3, [r2, #12]
		break;
 8002110:	e1ad      	b.n	800246e <EXTI+0x71e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin8:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<0);
 8002112:	4b46      	ldr	r3, [pc, #280]	; (800222c <EXTI+0x4dc>)
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	4a45      	ldr	r2, [pc, #276]	; (800222c <EXTI+0x4dc>)
 8002118:	f023 030f 	bic.w	r3, r3, #15
 800211c:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<0);}
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4a43      	ldr	r2, [pc, #268]	; (8002230 <EXTI+0x4e0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d106      	bne.n	8002134 <EXTI+0x3e4>
 8002126:	4b41      	ldr	r3, [pc, #260]	; (800222c <EXTI+0x4dc>)
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	4a40      	ldr	r2, [pc, #256]	; (800222c <EXTI+0x4dc>)
 800212c:	f023 030f 	bic.w	r3, r3, #15
 8002130:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}

		break;
 8002132:	e19e      	b.n	8002472 <EXTI+0x722>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4a3f      	ldr	r2, [pc, #252]	; (8002234 <EXTI+0x4e4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d106      	bne.n	800214a <EXTI+0x3fa>
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <EXTI+0x4dc>)
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	4a3a      	ldr	r2, [pc, #232]	; (800222c <EXTI+0x4dc>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6113      	str	r3, [r2, #16]
		break;
 8002148:	e193      	b.n	8002472 <EXTI+0x722>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4a3a      	ldr	r2, [pc, #232]	; (8002238 <EXTI+0x4e8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d106      	bne.n	8002160 <EXTI+0x410>
 8002152:	4b36      	ldr	r3, [pc, #216]	; (800222c <EXTI+0x4dc>)
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	4a35      	ldr	r2, [pc, #212]	; (800222c <EXTI+0x4dc>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	6113      	str	r3, [r2, #16]
		break;
 800215e:	e188      	b.n	8002472 <EXTI+0x722>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a36      	ldr	r2, [pc, #216]	; (800223c <EXTI+0x4ec>)
 8002164:	4293      	cmp	r3, r2
 8002166:	f040 8184 	bne.w	8002472 <EXTI+0x722>
 800216a:	4b30      	ldr	r3, [pc, #192]	; (800222c <EXTI+0x4dc>)
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	4a2f      	ldr	r2, [pc, #188]	; (800222c <EXTI+0x4dc>)
 8002170:	f043 0303 	orr.w	r3, r3, #3
 8002174:	6113      	str	r3, [r2, #16]
		break;
 8002176:	e17c      	b.n	8002472 <EXTI+0x722>
	case pin9:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<4);
 8002178:	4b2c      	ldr	r3, [pc, #176]	; (800222c <EXTI+0x4dc>)
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	4a2b      	ldr	r2, [pc, #172]	; (800222c <EXTI+0x4dc>)
 800217e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002182:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<4);}
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4a2a      	ldr	r2, [pc, #168]	; (8002230 <EXTI+0x4e0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d106      	bne.n	800219a <EXTI+0x44a>
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <EXTI+0x4dc>)
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	4a26      	ldr	r2, [pc, #152]	; (800222c <EXTI+0x4dc>)
 8002192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002196:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}

		break;
 8002198:	e16d      	b.n	8002476 <EXTI+0x726>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4a25      	ldr	r2, [pc, #148]	; (8002234 <EXTI+0x4e4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d106      	bne.n	80021b0 <EXTI+0x460>
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <EXTI+0x4dc>)
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	4a21      	ldr	r2, [pc, #132]	; (800222c <EXTI+0x4dc>)
 80021a8:	f043 0310 	orr.w	r3, r3, #16
 80021ac:	6113      	str	r3, [r2, #16]
		break;
 80021ae:	e162      	b.n	8002476 <EXTI+0x726>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a21      	ldr	r2, [pc, #132]	; (8002238 <EXTI+0x4e8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d106      	bne.n	80021c6 <EXTI+0x476>
 80021b8:	4b1c      	ldr	r3, [pc, #112]	; (800222c <EXTI+0x4dc>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	4a1b      	ldr	r2, [pc, #108]	; (800222c <EXTI+0x4dc>)
 80021be:	f043 0320 	orr.w	r3, r3, #32
 80021c2:	6113      	str	r3, [r2, #16]
		break;
 80021c4:	e157      	b.n	8002476 <EXTI+0x726>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4a1c      	ldr	r2, [pc, #112]	; (800223c <EXTI+0x4ec>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	f040 8153 	bne.w	8002476 <EXTI+0x726>
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <EXTI+0x4dc>)
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	4a15      	ldr	r2, [pc, #84]	; (800222c <EXTI+0x4dc>)
 80021d6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80021da:	6113      	str	r3, [r2, #16]
		break;
 80021dc:	e14b      	b.n	8002476 <EXTI+0x726>
	case pin10:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<8);
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <EXTI+0x4dc>)
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <EXTI+0x4dc>)
 80021e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021e8:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<8);}
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4a10      	ldr	r2, [pc, #64]	; (8002230 <EXTI+0x4e0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d106      	bne.n	8002200 <EXTI+0x4b0>
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <EXTI+0x4dc>)
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	4a0d      	ldr	r2, [pc, #52]	; (800222c <EXTI+0x4dc>)
 80021f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021fc:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}

		break;
 80021fe:	e13c      	b.n	800247a <EXTI+0x72a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <EXTI+0x4e4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d106      	bne.n	8002216 <EXTI+0x4c6>
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <EXTI+0x4dc>)
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <EXTI+0x4dc>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002212:	6113      	str	r3, [r2, #16]
		break;
 8002214:	e131      	b.n	800247a <EXTI+0x72a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4a07      	ldr	r2, [pc, #28]	; (8002238 <EXTI+0x4e8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d110      	bne.n	8002240 <EXTI+0x4f0>
 800221e:	4b03      	ldr	r3, [pc, #12]	; (800222c <EXTI+0x4dc>)
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	4a02      	ldr	r2, [pc, #8]	; (800222c <EXTI+0x4dc>)
 8002224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002228:	6113      	str	r3, [r2, #16]
		break;
 800222a:	e126      	b.n	800247a <EXTI+0x72a>
 800222c:	40010000 	.word	0x40010000
 8002230:	40010800 	.word	0x40010800
 8002234:	40010c00 	.word	0x40010c00
 8002238:	40011000 	.word	0x40011000
 800223c:	40011400 	.word	0x40011400
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a93      	ldr	r2, [pc, #588]	; (8002490 <EXTI+0x740>)
 8002244:	4293      	cmp	r3, r2
 8002246:	f040 8118 	bne.w	800247a <EXTI+0x72a>
 800224a:	4b92      	ldr	r3, [pc, #584]	; (8002494 <EXTI+0x744>)
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	4a91      	ldr	r2, [pc, #580]	; (8002494 <EXTI+0x744>)
 8002250:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002254:	6113      	str	r3, [r2, #16]
		break;
 8002256:	e110      	b.n	800247a <EXTI+0x72a>
	case pin11:
		AFIO->AFIO_EXTICR3 &=~(0b1111<<12);
 8002258:	4b8e      	ldr	r3, [pc, #568]	; (8002494 <EXTI+0x744>)
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	4a8d      	ldr	r2, [pc, #564]	; (8002494 <EXTI+0x744>)
 800225e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002262:	6113      	str	r3, [r2, #16]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<12);}
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a8c      	ldr	r2, [pc, #560]	; (8002498 <EXTI+0x748>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d106      	bne.n	800227a <EXTI+0x52a>
 800226c:	4b89      	ldr	r3, [pc, #548]	; (8002494 <EXTI+0x744>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	4a88      	ldr	r2, [pc, #544]	; (8002494 <EXTI+0x744>)
 8002272:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002276:	6113      	str	r3, [r2, #16]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}

		break;
 8002278:	e101      	b.n	800247e <EXTI+0x72e>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a87      	ldr	r2, [pc, #540]	; (800249c <EXTI+0x74c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d106      	bne.n	8002290 <EXTI+0x540>
 8002282:	4b84      	ldr	r3, [pc, #528]	; (8002494 <EXTI+0x744>)
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	4a83      	ldr	r2, [pc, #524]	; (8002494 <EXTI+0x744>)
 8002288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800228c:	6113      	str	r3, [r2, #16]
		break;
 800228e:	e0f6      	b.n	800247e <EXTI+0x72e>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a83      	ldr	r2, [pc, #524]	; (80024a0 <EXTI+0x750>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d106      	bne.n	80022a6 <EXTI+0x556>
 8002298:	4b7e      	ldr	r3, [pc, #504]	; (8002494 <EXTI+0x744>)
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	4a7d      	ldr	r2, [pc, #500]	; (8002494 <EXTI+0x744>)
 800229e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022a2:	6113      	str	r3, [r2, #16]
		break;
 80022a4:	e0eb      	b.n	800247e <EXTI+0x72e>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4a79      	ldr	r2, [pc, #484]	; (8002490 <EXTI+0x740>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	f040 80e7 	bne.w	800247e <EXTI+0x72e>
 80022b0:	4b78      	ldr	r3, [pc, #480]	; (8002494 <EXTI+0x744>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	4a77      	ldr	r2, [pc, #476]	; (8002494 <EXTI+0x744>)
 80022b6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80022ba:	6113      	str	r3, [r2, #16]
		break;
 80022bc:	e0df      	b.n	800247e <EXTI+0x72e>
		//			0000: PA[x] pin
		//			0001: PB[x] pin
		//			0010: PC[x] pin
		//			0011: PD[x] pin
	case pin12:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<0);
 80022be:	4b75      	ldr	r3, [pc, #468]	; (8002494 <EXTI+0x744>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	4a74      	ldr	r2, [pc, #464]	; (8002494 <EXTI+0x744>)
 80022c4:	f023 030f 	bic.w	r3, r3, #15
 80022c8:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<0);}
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4a72      	ldr	r2, [pc, #456]	; (8002498 <EXTI+0x748>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d106      	bne.n	80022e0 <EXTI+0x590>
 80022d2:	4b70      	ldr	r3, [pc, #448]	; (8002494 <EXTI+0x744>)
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	4a6f      	ldr	r2, [pc, #444]	; (8002494 <EXTI+0x744>)
 80022d8:	f023 030f 	bic.w	r3, r3, #15
 80022dc:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}

		break;
 80022de:	e0d0      	b.n	8002482 <EXTI+0x732>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a6e      	ldr	r2, [pc, #440]	; (800249c <EXTI+0x74c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d106      	bne.n	80022f6 <EXTI+0x5a6>
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <EXTI+0x744>)
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	4a69      	ldr	r2, [pc, #420]	; (8002494 <EXTI+0x744>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6153      	str	r3, [r2, #20]
		break;
 80022f4:	e0c5      	b.n	8002482 <EXTI+0x732>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a69      	ldr	r2, [pc, #420]	; (80024a0 <EXTI+0x750>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d106      	bne.n	800230c <EXTI+0x5bc>
 80022fe:	4b65      	ldr	r3, [pc, #404]	; (8002494 <EXTI+0x744>)
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	4a64      	ldr	r2, [pc, #400]	; (8002494 <EXTI+0x744>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	6153      	str	r3, [r2, #20]
		break;
 800230a:	e0ba      	b.n	8002482 <EXTI+0x732>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a60      	ldr	r2, [pc, #384]	; (8002490 <EXTI+0x740>)
 8002310:	4293      	cmp	r3, r2
 8002312:	f040 80b6 	bne.w	8002482 <EXTI+0x732>
 8002316:	4b5f      	ldr	r3, [pc, #380]	; (8002494 <EXTI+0x744>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	4a5e      	ldr	r2, [pc, #376]	; (8002494 <EXTI+0x744>)
 800231c:	f043 0303 	orr.w	r3, r3, #3
 8002320:	6153      	str	r3, [r2, #20]
		break;
 8002322:	e0ae      	b.n	8002482 <EXTI+0x732>
	case pin13:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<4);
 8002324:	4b5b      	ldr	r3, [pc, #364]	; (8002494 <EXTI+0x744>)
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	4a5a      	ldr	r2, [pc, #360]	; (8002494 <EXTI+0x744>)
 800232a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800232e:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<4);}
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4a59      	ldr	r2, [pc, #356]	; (8002498 <EXTI+0x748>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d106      	bne.n	8002346 <EXTI+0x5f6>
 8002338:	4b56      	ldr	r3, [pc, #344]	; (8002494 <EXTI+0x744>)
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	4a55      	ldr	r2, [pc, #340]	; (8002494 <EXTI+0x744>)
 800233e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002342:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}

		break;
 8002344:	e09f      	b.n	8002486 <EXTI+0x736>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a54      	ldr	r2, [pc, #336]	; (800249c <EXTI+0x74c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d106      	bne.n	800235c <EXTI+0x60c>
 800234e:	4b51      	ldr	r3, [pc, #324]	; (8002494 <EXTI+0x744>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	4a50      	ldr	r2, [pc, #320]	; (8002494 <EXTI+0x744>)
 8002354:	f043 0310 	orr.w	r3, r3, #16
 8002358:	6153      	str	r3, [r2, #20]
		break;
 800235a:	e094      	b.n	8002486 <EXTI+0x736>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a50      	ldr	r2, [pc, #320]	; (80024a0 <EXTI+0x750>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d106      	bne.n	8002372 <EXTI+0x622>
 8002364:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <EXTI+0x744>)
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	4a4a      	ldr	r2, [pc, #296]	; (8002494 <EXTI+0x744>)
 800236a:	f043 0320 	orr.w	r3, r3, #32
 800236e:	6153      	str	r3, [r2, #20]
		break;
 8002370:	e089      	b.n	8002486 <EXTI+0x736>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4a46      	ldr	r2, [pc, #280]	; (8002490 <EXTI+0x740>)
 8002376:	4293      	cmp	r3, r2
 8002378:	f040 8085 	bne.w	8002486 <EXTI+0x736>
 800237c:	4b45      	ldr	r3, [pc, #276]	; (8002494 <EXTI+0x744>)
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	4a44      	ldr	r2, [pc, #272]	; (8002494 <EXTI+0x744>)
 8002382:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002386:	6153      	str	r3, [r2, #20]
		break;
 8002388:	e07d      	b.n	8002486 <EXTI+0x736>
	case pin14:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<8);
 800238a:	4b42      	ldr	r3, [pc, #264]	; (8002494 <EXTI+0x744>)
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	4a41      	ldr	r2, [pc, #260]	; (8002494 <EXTI+0x744>)
 8002390:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002394:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<8);}
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4a3f      	ldr	r2, [pc, #252]	; (8002498 <EXTI+0x748>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d106      	bne.n	80023ac <EXTI+0x65c>
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <EXTI+0x744>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	4a3c      	ldr	r2, [pc, #240]	; (8002494 <EXTI+0x744>)
 80023a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023a8:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}

		break;
 80023aa:	e06e      	b.n	800248a <EXTI+0x73a>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a3b      	ldr	r2, [pc, #236]	; (800249c <EXTI+0x74c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d106      	bne.n	80023c2 <EXTI+0x672>
 80023b4:	4b37      	ldr	r3, [pc, #220]	; (8002494 <EXTI+0x744>)
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	4a36      	ldr	r2, [pc, #216]	; (8002494 <EXTI+0x744>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	6153      	str	r3, [r2, #20]
		break;
 80023c0:	e063      	b.n	800248a <EXTI+0x73a>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a36      	ldr	r2, [pc, #216]	; (80024a0 <EXTI+0x750>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d106      	bne.n	80023d8 <EXTI+0x688>
 80023ca:	4b32      	ldr	r3, [pc, #200]	; (8002494 <EXTI+0x744>)
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	4a31      	ldr	r2, [pc, #196]	; (8002494 <EXTI+0x744>)
 80023d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d4:	6153      	str	r3, [r2, #20]
		break;
 80023d6:	e058      	b.n	800248a <EXTI+0x73a>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <EXTI+0x740>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d154      	bne.n	800248a <EXTI+0x73a>
 80023e0:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <EXTI+0x744>)
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	4a2b      	ldr	r2, [pc, #172]	; (8002494 <EXTI+0x744>)
 80023e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80023ea:	6153      	str	r3, [r2, #20]
		break;
 80023ec:	e04d      	b.n	800248a <EXTI+0x73a>
	case pin15:
		AFIO->AFIO_EXTICR4 &=~(0b1111<<12);
 80023ee:	4b29      	ldr	r3, [pc, #164]	; (8002494 <EXTI+0x744>)
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	4a28      	ldr	r2, [pc, #160]	; (8002494 <EXTI+0x744>)
 80023f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023f8:	6153      	str	r3, [r2, #20]
		if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<12);}
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4a26      	ldr	r2, [pc, #152]	; (8002498 <EXTI+0x748>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d106      	bne.n	8002410 <EXTI+0x6c0>
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <EXTI+0x744>)
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	4a23      	ldr	r2, [pc, #140]	; (8002494 <EXTI+0x744>)
 8002408:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800240c:	6153      	str	r3, [r2, #20]
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}

		break;
 800240e:	e049      	b.n	80024a4 <EXTI+0x754>
		else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a22      	ldr	r2, [pc, #136]	; (800249c <EXTI+0x74c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d106      	bne.n	8002426 <EXTI+0x6d6>
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <EXTI+0x744>)
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <EXTI+0x744>)
 800241e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002422:	6153      	str	r3, [r2, #20]
		break;
 8002424:	e03e      	b.n	80024a4 <EXTI+0x754>
		else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <EXTI+0x750>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d106      	bne.n	800243c <EXTI+0x6ec>
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <EXTI+0x744>)
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	4a18      	ldr	r2, [pc, #96]	; (8002494 <EXTI+0x744>)
 8002434:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002438:	6153      	str	r3, [r2, #20]
		break;
 800243a:	e033      	b.n	80024a4 <EXTI+0x754>
		else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4a14      	ldr	r2, [pc, #80]	; (8002490 <EXTI+0x740>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d12f      	bne.n	80024a4 <EXTI+0x754>
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <EXTI+0x744>)
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	4a12      	ldr	r2, [pc, #72]	; (8002494 <EXTI+0x744>)
 800244a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800244e:	6153      	str	r3, [r2, #20]
		break;
 8002450:	e028      	b.n	80024a4 <EXTI+0x754>
		break;
 8002452:	bf00      	nop
 8002454:	e027      	b.n	80024a6 <EXTI+0x756>
		break;
 8002456:	bf00      	nop
 8002458:	e025      	b.n	80024a6 <EXTI+0x756>
		break;
 800245a:	bf00      	nop
 800245c:	e023      	b.n	80024a6 <EXTI+0x756>
		break;
 800245e:	bf00      	nop
 8002460:	e021      	b.n	80024a6 <EXTI+0x756>
		break;
 8002462:	bf00      	nop
 8002464:	e01f      	b.n	80024a6 <EXTI+0x756>
		break;
 8002466:	bf00      	nop
 8002468:	e01d      	b.n	80024a6 <EXTI+0x756>
		break;
 800246a:	bf00      	nop
 800246c:	e01b      	b.n	80024a6 <EXTI+0x756>
		break;
 800246e:	bf00      	nop
 8002470:	e019      	b.n	80024a6 <EXTI+0x756>
		break;
 8002472:	bf00      	nop
 8002474:	e017      	b.n	80024a6 <EXTI+0x756>
		break;
 8002476:	bf00      	nop
 8002478:	e015      	b.n	80024a6 <EXTI+0x756>
		break;
 800247a:	bf00      	nop
 800247c:	e013      	b.n	80024a6 <EXTI+0x756>
		break;
 800247e:	bf00      	nop
 8002480:	e011      	b.n	80024a6 <EXTI+0x756>
		break;
 8002482:	bf00      	nop
 8002484:	e00f      	b.n	80024a6 <EXTI+0x756>
		break;
 8002486:	bf00      	nop
 8002488:	e00d      	b.n	80024a6 <EXTI+0x756>
		break;
 800248a:	bf00      	nop
 800248c:	e00b      	b.n	80024a6 <EXTI+0x756>
 800248e:	bf00      	nop
 8002490:	40011400 	.word	0x40011400
 8002494:	40010000 	.word	0x40010000
 8002498:	40010800 	.word	0x40010800
 800249c:	40010c00 	.word	0x40010c00
 80024a0:	40011000 	.word	0x40011000
		break;
 80024a4:	bf00      	nop
	}
	//================================================
	//3- Update Rising or Falling Register
	EXIT->EXTI_RTSR &=~(1<<pin);
 80024a6:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <EXTI+0x898>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	897a      	ldrh	r2, [r7, #10]
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f202 	lsl.w	r2, r1, r2
 80024b2:	43d2      	mvns	r2, r2
 80024b4:	4611      	mov	r1, r2
 80024b6:	4a4c      	ldr	r2, [pc, #304]	; (80025e8 <EXTI+0x898>)
 80024b8:	400b      	ands	r3, r1
 80024ba:	6093      	str	r3, [r2, #8]
	EXIT->EXTI_FTSR &=~(1<<pin);
 80024bc:	4b4a      	ldr	r3, [pc, #296]	; (80025e8 <EXTI+0x898>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	897a      	ldrh	r2, [r7, #10]
 80024c2:	2101      	movs	r1, #1
 80024c4:	fa01 f202 	lsl.w	r2, r1, r2
 80024c8:	43d2      	mvns	r2, r2
 80024ca:	4611      	mov	r1, r2
 80024cc:	4a46      	ldr	r2, [pc, #280]	; (80025e8 <EXTI+0x898>)
 80024ce:	400b      	ands	r3, r1
 80024d0:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 80024d2:	893b      	ldrh	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <EXTI+0x79e>
		EXIT->EXTI_RTSR |= (1<<pin);
 80024d8:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <EXTI+0x898>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	897a      	ldrh	r2, [r7, #10]
 80024de:	2101      	movs	r1, #1
 80024e0:	fa01 f202 	lsl.w	r2, r1, r2
 80024e4:	4611      	mov	r1, r2
 80024e6:	4a40      	ldr	r2, [pc, #256]	; (80025e8 <EXTI+0x898>)
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6093      	str	r3, [r2, #8]
 80024ec:	e021      	b.n	8002532 <EXTI+0x7e2>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 80024ee:	893b      	ldrh	r3, [r7, #8]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10a      	bne.n	800250a <EXTI+0x7ba>
		EXIT->EXTI_FTSR |= (1<<pin);
 80024f4:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <EXTI+0x898>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	897a      	ldrh	r2, [r7, #10]
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	4611      	mov	r1, r2
 8002502:	4a39      	ldr	r2, [pc, #228]	; (80025e8 <EXTI+0x898>)
 8002504:	430b      	orrs	r3, r1
 8002506:	60d3      	str	r3, [r2, #12]
 8002508:	e013      	b.n	8002532 <EXTI+0x7e2>
	}
	else{
		EXIT->EXTI_RTSR |= (1<<pin);
 800250a:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <EXTI+0x898>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	897a      	ldrh	r2, [r7, #10]
 8002510:	2101      	movs	r1, #1
 8002512:	fa01 f202 	lsl.w	r2, r1, r2
 8002516:	4611      	mov	r1, r2
 8002518:	4a33      	ldr	r2, [pc, #204]	; (80025e8 <EXTI+0x898>)
 800251a:	430b      	orrs	r3, r1
 800251c:	6093      	str	r3, [r2, #8]
		EXIT->EXTI_FTSR |= (1<<pin);
 800251e:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <EXTI+0x898>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	897a      	ldrh	r2, [r7, #10]
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	4611      	mov	r1, r2
 800252c:	4a2e      	ldr	r2, [pc, #184]	; (80025e8 <EXTI+0x898>)
 800252e:	430b      	orrs	r3, r1
 8002530:	60d3      	str	r3, [r2, #12]
	}


	//4- Update IRQ Handling callback
	ARR_INTERRUPT_TRACK[interrupt_numpers].pin=pin;
 8002532:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <EXTI+0x89c>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	897b      	ldrh	r3, [r7, #10]
 800253a:	b2d9      	uxtb	r1, r3
 800253c:	4b2c      	ldr	r3, [pc, #176]	; (80025f0 <EXTI+0x8a0>)
 800253e:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
	if(PORTx==GPIOA)     {ARR_INTERRUPT_TRACK[interrupt_numpers].port=1;}
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a2b      	ldr	r2, [pc, #172]	; (80025f4 <EXTI+0x8a4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d107      	bne.n	800255a <EXTI+0x80a>
 800254a:	4b28      	ldr	r3, [pc, #160]	; (80025ec <EXTI+0x89c>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <EXTI+0x8a0>)
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	2201      	movs	r2, #1
 8002556:	705a      	strb	r2, [r3, #1]
 8002558:	e022      	b.n	80025a0 <EXTI+0x850>
	else if(PORTx==GPIOB){ARR_INTERRUPT_TRACK[interrupt_numpers].port=2;}
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <EXTI+0x8a8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d107      	bne.n	8002572 <EXTI+0x822>
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <EXTI+0x89c>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <EXTI+0x8a0>)
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	2202      	movs	r2, #2
 800256e:	705a      	strb	r2, [r3, #1]
 8002570:	e016      	b.n	80025a0 <EXTI+0x850>
	else if(PORTx==GPIOC){ARR_INTERRUPT_TRACK[interrupt_numpers].port=3;}
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4a21      	ldr	r2, [pc, #132]	; (80025fc <EXTI+0x8ac>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d107      	bne.n	800258a <EXTI+0x83a>
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <EXTI+0x89c>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <EXTI+0x8a0>)
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	2203      	movs	r2, #3
 8002586:	705a      	strb	r2, [r3, #1]
 8002588:	e00a      	b.n	80025a0 <EXTI+0x850>
	else if(PORTx==GPIOD){ARR_INTERRUPT_TRACK[interrupt_numpers].port=4;}
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <EXTI+0x8b0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d106      	bne.n	80025a0 <EXTI+0x850>
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <EXTI+0x89c>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4a16      	ldr	r2, [pc, #88]	; (80025f0 <EXTI+0x8a0>)
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	2204      	movs	r2, #4
 800259e:	705a      	strb	r2, [r3, #1]


	GP_IRQ_Callback[interrupt_numpers++] =(void(*)(interrupt_data* isr_data,uint8_t interupt_num))function_addres;
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <EXTI+0x89c>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	b2d1      	uxtb	r1, r2
 80025a8:	4a10      	ldr	r2, [pc, #64]	; (80025ec <EXTI+0x89c>)
 80025aa:	7011      	strb	r1, [r2, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4a15      	ldr	r2, [pc, #84]	; (8002604 <EXTI+0x8b4>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(interrupt_numpers>=15){
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <EXTI+0x89c>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b0e      	cmp	r3, #14
 80025bc:	d902      	bls.n	80025c4 <EXTI+0x874>
		interrupt_numpers=0;
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <EXTI+0x89c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
	}

	EXIT->EXTI_IMR |=(1<<pin);
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <EXTI+0x898>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	897a      	ldrh	r2, [r7, #10]
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f202 	lsl.w	r2, r1, r2
 80025d0:	4611      	mov	r1, r2
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <EXTI+0x898>)
 80025d4:	430b      	orrs	r3, r1
 80025d6:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 80025d8:	897b      	ldrh	r3, [r7, #10]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fb52 	bl	8001c84 <Enable_NVIC>
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40010400 	.word	0x40010400
 80025ec:	200000ba 	.word	0x200000ba
 80025f0:	20000130 	.word	0x20000130
 80025f4:	40010800 	.word	0x40010800
 80025f8:	40010c00 	.word	0x40010c00
 80025fc:	40011000 	.word	0x40011000
 8002600:	40011400 	.word	0x40011400
 8002604:	200000f4 	.word	0x200000f4

08002608 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <EXTI0_IRQHandler+0x20>)
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	4a05      	ldr	r2, [pc, #20]	; (8002628 <EXTI0_IRQHandler+0x20>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0](ARR_INTERRUPT_TRACK,0);
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <EXTI0_IRQHandler+0x24>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2100      	movs	r1, #0
 800261e:	4804      	ldr	r0, [pc, #16]	; (8002630 <EXTI0_IRQHandler+0x28>)
 8002620:	4798      	blx	r3
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40010400 	.word	0x40010400
 800262c:	200000f4 	.word	0x200000f4
 8002630:	20000130 	.word	0x20000130

08002634 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <EXTI1_IRQHandler+0x20>)
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	4a05      	ldr	r2, [pc, #20]	; (8002654 <EXTI1_IRQHandler+0x20>)
 800263e:	f043 0302 	orr.w	r3, r3, #2
 8002642:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1](ARR_INTERRUPT_TRACK,1);
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <EXTI1_IRQHandler+0x24>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2101      	movs	r1, #1
 800264a:	4804      	ldr	r0, [pc, #16]	; (800265c <EXTI1_IRQHandler+0x28>)
 800264c:	4798      	blx	r3

}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40010400 	.word	0x40010400
 8002658:	200000f4 	.word	0x200000f4
 800265c:	20000130 	.word	0x20000130

08002660 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <EXTI2_IRQHandler+0x20>)
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	4a05      	ldr	r2, [pc, #20]	; (8002680 <EXTI2_IRQHandler+0x20>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2](ARR_INTERRUPT_TRACK,2);
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <EXTI2_IRQHandler+0x24>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2102      	movs	r1, #2
 8002676:	4804      	ldr	r0, [pc, #16]	; (8002688 <EXTI2_IRQHandler+0x28>)
 8002678:	4798      	blx	r3
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40010400 	.word	0x40010400
 8002684:	200000f4 	.word	0x200000f4
 8002688:	20000130 	.word	0x20000130

0800268c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <EXTI3_IRQHandler+0x20>)
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	4a05      	ldr	r2, [pc, #20]	; (80026ac <EXTI3_IRQHandler+0x20>)
 8002696:	f043 0308 	orr.w	r3, r3, #8
 800269a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3](ARR_INTERRUPT_TRACK,3);
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <EXTI3_IRQHandler+0x24>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2103      	movs	r1, #3
 80026a2:	4804      	ldr	r0, [pc, #16]	; (80026b4 <EXTI3_IRQHandler+0x28>)
 80026a4:	4798      	blx	r3
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40010400 	.word	0x40010400
 80026b0:	200000f4 	.word	0x200000f4
 80026b4:	20000130 	.word	0x20000130

080026b8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <EXTI4_IRQHandler+0x20>)
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <EXTI4_IRQHandler+0x20>)
 80026c2:	f043 0310 	orr.w	r3, r3, #16
 80026c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4](ARR_INTERRUPT_TRACK,4);
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <EXTI4_IRQHandler+0x24>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2104      	movs	r1, #4
 80026ce:	4804      	ldr	r0, [pc, #16]	; (80026e0 <EXTI4_IRQHandler+0x28>)
 80026d0:	4798      	blx	r3
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40010400 	.word	0x40010400
 80026dc:	200000f4 	.word	0x200000f4
 80026e0:	20000130 	.word	0x20000130

080026e4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5](ARR_INTERRUPT_TRACK,5);  }
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <EXTI9_5_IRQHandler+0x26>
 80026f4:	4b28      	ldr	r3, [pc, #160]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	4a27      	ldr	r2, [pc, #156]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 80026fa:	f043 0320 	orr.w	r3, r3, #32
 80026fe:	6153      	str	r3, [r2, #20]
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <EXTI9_5_IRQHandler+0xb8>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	2105      	movs	r1, #5
 8002706:	4826      	ldr	r0, [pc, #152]	; (80027a0 <EXTI9_5_IRQHandler+0xbc>)
 8002708:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6](ARR_INTERRUPT_TRACK,6);  }
 800270a:	4b23      	ldr	r3, [pc, #140]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <EXTI9_5_IRQHandler+0x48>
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 800271c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002720:	6153      	str	r3, [r2, #20]
 8002722:	4b1e      	ldr	r3, [pc, #120]	; (800279c <EXTI9_5_IRQHandler+0xb8>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2106      	movs	r1, #6
 8002728:	481d      	ldr	r0, [pc, #116]	; (80027a0 <EXTI9_5_IRQHandler+0xbc>)
 800272a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7](ARR_INTERRUPT_TRACK,7);  }
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <EXTI9_5_IRQHandler+0x6a>
 8002738:	4b17      	ldr	r3, [pc, #92]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	4a16      	ldr	r2, [pc, #88]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 800273e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002742:	6153      	str	r3, [r2, #20]
 8002744:	4b15      	ldr	r3, [pc, #84]	; (800279c <EXTI9_5_IRQHandler+0xb8>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2107      	movs	r1, #7
 800274a:	4815      	ldr	r0, [pc, #84]	; (80027a0 <EXTI9_5_IRQHandler+0xbc>)
 800274c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8](ARR_INTERRUPT_TRACK,8);  }
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <EXTI9_5_IRQHandler+0x8c>
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6153      	str	r3, [r2, #20]
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <EXTI9_5_IRQHandler+0xb8>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	2108      	movs	r1, #8
 800276c:	480c      	ldr	r0, [pc, #48]	; (80027a0 <EXTI9_5_IRQHandler+0xbc>)
 800276e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9](ARR_INTERRUPT_TRACK,9);  }
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <EXTI9_5_IRQHandler+0xae>
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	4a05      	ldr	r2, [pc, #20]	; (8002798 <EXTI9_5_IRQHandler+0xb4>)
 8002782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002786:	6153      	str	r3, [r2, #20]
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <EXTI9_5_IRQHandler+0xb8>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2109      	movs	r1, #9
 800278e:	4804      	ldr	r0, [pc, #16]	; (80027a0 <EXTI9_5_IRQHandler+0xbc>)
 8002790:	4798      	blx	r3
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40010400 	.word	0x40010400
 800279c:	200000f4 	.word	0x200000f4
 80027a0:	20000130 	.word	0x20000130

080027a4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10](ARR_INTERRUPT_TRACK,10);  }
 80027a8:	4b33      	ldr	r3, [pc, #204]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <EXTI15_10_IRQHandler+0x26>
 80027b4:	4b30      	ldr	r3, [pc, #192]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	4a2f      	ldr	r2, [pc, #188]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 80027ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027be:	6153      	str	r3, [r2, #20]
 80027c0:	4b2e      	ldr	r3, [pc, #184]	; (800287c <EXTI15_10_IRQHandler+0xd8>)
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	210a      	movs	r1, #10
 80027c6:	482e      	ldr	r0, [pc, #184]	; (8002880 <EXTI15_10_IRQHandler+0xdc>)
 80027c8:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11](ARR_INTERRUPT_TRACK,11);  }
 80027ca:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <EXTI15_10_IRQHandler+0x48>
 80027d6:	4b28      	ldr	r3, [pc, #160]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	4a27      	ldr	r2, [pc, #156]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 80027dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027e0:	6153      	str	r3, [r2, #20]
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <EXTI15_10_IRQHandler+0xd8>)
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	210b      	movs	r1, #11
 80027e8:	4825      	ldr	r0, [pc, #148]	; (8002880 <EXTI15_10_IRQHandler+0xdc>)
 80027ea:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12](ARR_INTERRUPT_TRACK,12);  }
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <EXTI15_10_IRQHandler+0x6a>
 80027f8:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	4a1e      	ldr	r2, [pc, #120]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 80027fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002802:	6153      	str	r3, [r2, #20]
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <EXTI15_10_IRQHandler+0xd8>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	210c      	movs	r1, #12
 800280a:	481d      	ldr	r0, [pc, #116]	; (8002880 <EXTI15_10_IRQHandler+0xdc>)
 800280c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13](ARR_INTERRUPT_TRACK,13);  }
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <EXTI15_10_IRQHandler+0x8c>
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	4a16      	ldr	r2, [pc, #88]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 8002820:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002824:	6153      	str	r3, [r2, #20]
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <EXTI15_10_IRQHandler+0xd8>)
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	210d      	movs	r1, #13
 800282c:	4814      	ldr	r0, [pc, #80]	; (8002880 <EXTI15_10_IRQHandler+0xdc>)
 800282e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14](ARR_INTERRUPT_TRACK,14);  }
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <EXTI15_10_IRQHandler+0xae>
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	4a0d      	ldr	r2, [pc, #52]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 8002842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002846:	6153      	str	r3, [r2, #20]
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <EXTI15_10_IRQHandler+0xd8>)
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	210e      	movs	r1, #14
 800284e:	480c      	ldr	r0, [pc, #48]	; (8002880 <EXTI15_10_IRQHandler+0xdc>)
 8002850:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15](ARR_INTERRUPT_TRACK,15);  }
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <EXTI15_10_IRQHandler+0xd0>
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	4a05      	ldr	r2, [pc, #20]	; (8002878 <EXTI15_10_IRQHandler+0xd4>)
 8002864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002868:	6153      	str	r3, [r2, #20]
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <EXTI15_10_IRQHandler+0xd8>)
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	210f      	movs	r1, #15
 8002870:	4803      	ldr	r0, [pc, #12]	; (8002880 <EXTI15_10_IRQHandler+0xdc>)
 8002872:	4798      	blx	r3

}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40010400 	.word	0x40010400
 800287c:	200000f4 	.word	0x200000f4
 8002880:	20000130 	.word	0x20000130

08002884 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
	//slave only todo
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
	//slave only todo
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <USART_INIT>:
//===============================================================
void send_string (){

}
//===============================================================
void USART_INIT(USART_typeDef* USARTx,uint32_t mode,uint32_t word_length,uint32_t stop_bits,uint32_t baud_rate,uint32_t parity,uint32_t CLCK){
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]

	if(USARTx ==USART1){
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4a55      	ldr	r2, [pc, #340]	; (8002a04 <USART_INIT+0x168>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d11f      	bne.n	80028f2 <USART_INIT+0x56>
		USART1_Clock_Enable();
 80028b2:	4b55      	ldr	r3, [pc, #340]	; (8002a08 <USART_INIT+0x16c>)
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	4a54      	ldr	r2, [pc, #336]	; (8002a08 <USART_INIT+0x16c>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028bc:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();
 80028be:	4b52      	ldr	r3, [pc, #328]	; (8002a08 <USART_INIT+0x16c>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	4a51      	ldr	r2, [pc, #324]	; (8002a08 <USART_INIT+0x16c>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	6193      	str	r3, [r2, #24]
		NVIC_USART1_interrupt_Enable;
 80028ca:	4b50      	ldr	r3, [pc, #320]	; (8002a0c <USART_INIT+0x170>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a4f      	ldr	r2, [pc, #316]	; (8002a0c <USART_INIT+0x170>)
 80028d0:	f043 0320 	orr.w	r3, r3, #32
 80028d4:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin9,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 80028d6:	2209      	movs	r2, #9
 80028d8:	2109      	movs	r1, #9
 80028da:	484d      	ldr	r0, [pc, #308]	; (8002a10 <USART_INIT+0x174>)
 80028dc:	f7fe fb7a 	bl	8000fd4 <pinmode>
		//RX
		pinmode(GPIOA, pin10,GPIO_MODE_INTPUT_AF);
 80028e0:	2204      	movs	r2, #4
 80028e2:	210a      	movs	r1, #10
 80028e4:	484a      	ldr	r0, [pc, #296]	; (8002a10 <USART_INIT+0x174>)
 80028e6:	f7fe fb75 	bl	8000fd4 <pinmode>
		arr[0]=USART1;
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <USART_INIT+0x178>)
 80028ec:	4a45      	ldr	r2, [pc, #276]	; (8002a04 <USART_INIT+0x168>)
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	e042      	b.n	8002978 <USART_INIT+0xdc>
	}
	else if(USARTx ==USART2){
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4a48      	ldr	r2, [pc, #288]	; (8002a18 <USART_INIT+0x17c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d11f      	bne.n	800293a <USART_INIT+0x9e>
		USART2_Clock_Enable();
 80028fa:	4b43      	ldr	r3, [pc, #268]	; (8002a08 <USART_INIT+0x16c>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4a42      	ldr	r2, [pc, #264]	; (8002a08 <USART_INIT+0x16c>)
 8002900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002904:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();
 8002906:	4b40      	ldr	r3, [pc, #256]	; (8002a08 <USART_INIT+0x16c>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	4a3f      	ldr	r2, [pc, #252]	; (8002a08 <USART_INIT+0x16c>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	6193      	str	r3, [r2, #24]
		NVIC_USART2_interrupt_Enable;
 8002912:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <USART_INIT+0x170>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a3d      	ldr	r2, [pc, #244]	; (8002a0c <USART_INIT+0x170>)
 8002918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800291c:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin2,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 800291e:	2209      	movs	r2, #9
 8002920:	2102      	movs	r1, #2
 8002922:	483b      	ldr	r0, [pc, #236]	; (8002a10 <USART_INIT+0x174>)
 8002924:	f7fe fb56 	bl	8000fd4 <pinmode>
		//RX
		pinmode(GPIOA, pin3,GPIO_MODE_INTPUT_AF);
 8002928:	2204      	movs	r2, #4
 800292a:	2103      	movs	r1, #3
 800292c:	4838      	ldr	r0, [pc, #224]	; (8002a10 <USART_INIT+0x174>)
 800292e:	f7fe fb51 	bl	8000fd4 <pinmode>
		arr[1]=USART2;
 8002932:	4b38      	ldr	r3, [pc, #224]	; (8002a14 <USART_INIT+0x178>)
 8002934:	4a38      	ldr	r2, [pc, #224]	; (8002a18 <USART_INIT+0x17c>)
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	e01e      	b.n	8002978 <USART_INIT+0xdc>
	}
	else{
		USART3_Clock_Enable();
 800293a:	4b33      	ldr	r3, [pc, #204]	; (8002a08 <USART_INIT+0x16c>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4a32      	ldr	r2, [pc, #200]	; (8002a08 <USART_INIT+0x16c>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 8002946:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <USART_INIT+0x16c>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4a2f      	ldr	r2, [pc, #188]	; (8002a08 <USART_INIT+0x16c>)
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	6193      	str	r3, [r2, #24]
		NVIC_USART3_interrupt_Enable;
 8002952:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <USART_INIT+0x170>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2d      	ldr	r2, [pc, #180]	; (8002a0c <USART_INIT+0x170>)
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 800295e:	2209      	movs	r2, #9
 8002960:	210a      	movs	r1, #10
 8002962:	482e      	ldr	r0, [pc, #184]	; (8002a1c <USART_INIT+0x180>)
 8002964:	f7fe fb36 	bl	8000fd4 <pinmode>
		//RX
		pinmode(GPIOB, pin11,GPIO_MODE_INTPUT_AF);
 8002968:	2204      	movs	r2, #4
 800296a:	210b      	movs	r1, #11
 800296c:	482b      	ldr	r0, [pc, #172]	; (8002a1c <USART_INIT+0x180>)
 800296e:	f7fe fb31 	bl	8000fd4 <pinmode>
		arr[2]=USART3;
 8002972:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <USART_INIT+0x178>)
 8002974:	4a2a      	ldr	r2, [pc, #168]	; (8002a20 <USART_INIT+0x184>)
 8002976:	609a      	str	r2, [r3, #8]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enabled
	USARTx->USART_CR1 |=(1<<13);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	60da      	str	r2, [r3, #12]
	//STEP 2
	//	Bit 12 M: Word length
	//	This bit determines the word length. It is set or cleared by software.
	//	0: 1 Start bit, 8 Data bits, n Stop bit
	//	1: 1 Start bit, 9 Data bits, n Stop bit
	USARTx->USART_CR1 |=word_length;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	431a      	orrs	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	60da      	str	r2, [r3, #12]
	//	These bits are used for programming the stop bits.
	//	00: 1 Stop bit
	//	01: 0.5 Stop bit
	//	10: 2 Stop bits
	//	11: 1.5 Stop bit
	USARTx->USART_CR2 |=stop_bits;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	431a      	orrs	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	611a      	str	r2, [r3, #16]
	//	2: When TE is set there is a 1 bit-time delay before the transmission starts.
	//	Bit 2 RE: Receiver enable
	//	This bit enables the receiver. It is set and cleared by software.
	//	0: Receiver is disabled
	//	1: Receiver is enabled and begins searching for a start bit
	USARTx->USART_CR1 |=mode;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	60da      	str	r2, [r3, #12]
	//	Bit 9 PS: Parity selection
	//	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	//	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	//	0: Even parity
	//	1: Odd parity
	USARTx->USART_CR1 |=parity;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	431a      	orrs	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	60da      	str	r2, [r3, #12]
	//	Bits 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV
	//	These 12 bits define the mantissa of the USART Divider (USARTDIV)
	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV
	//	These 4 bits define the fraction of the USART Divider (USARTDIV)

	uint16_t DIV_Mantissa =CLCK /(baud_rate*16);
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	82fb      	strh	r3, [r7, #22]
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <USART_INIT+0x188>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	8afa      	ldrh	r2, [r7, #22]
 80029d4:	2164      	movs	r1, #100	; 0x64
 80029d6:	fb01 f202 	mul.w	r2, r1, r2
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <USART_INIT+0x188>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	82bb      	strh	r3, [r7, #20]
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );
 80029e8:	8afb      	ldrh	r3, [r7, #22]
 80029ea:	011a      	lsls	r2, r3, #4
 80029ec:	8abb      	ldrh	r3, [r7, #20]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	4313      	orrs	r3, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	609a      	str	r2, [r3, #8]


}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	e000e104 	.word	0xe000e104
 8002a10:	40010800 	.word	0x40010800
 8002a14:	20000150 	.word	0x20000150
 8002a18:	40004400 	.word	0x40004400
 8002a1c:	40010c00 	.word	0x40010c00
 8002a20:	40004800 	.word	0x40004800
 8002a24:	51eb851f 	.word	0x51eb851f

08002a28 <USART_SEND>:
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	0b1b      	lsrs	r3, r3, #12
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d106      	bne.n	8002a4e <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 8002a4c:	e004      	b.n	8002a58 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	605a      	str	r2, [r3, #4]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
	...

08002a64 <USART_SEND_STRING>:
		*data=arr_data_RES[2];
	}

}

void USART_SEND_STRING(USART_typeDef* USARTx,uint8_t* data){
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <USART_SEND_STRING+0x5c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d105      	bne.n	8002a82 <USART_SEND_STRING+0x1e>
		arr_data[0]=data;
 8002a76:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <USART_SEND_STRING+0x60>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6013      	str	r3, [r2, #0]
		arr[0]=USART1;
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <USART_SEND_STRING+0x64>)
 8002a7e:	4a10      	ldr	r2, [pc, #64]	; (8002ac0 <USART_SEND_STRING+0x5c>)
 8002a80:	601a      	str	r2, [r3, #0]
	}
	if(USARTx==USART2){
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a11      	ldr	r2, [pc, #68]	; (8002acc <USART_SEND_STRING+0x68>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d105      	bne.n	8002a96 <USART_SEND_STRING+0x32>
		arr_data[1]=data;
 8002a8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <USART_SEND_STRING+0x60>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6053      	str	r3, [r2, #4]
		arr[1]=USART2;
 8002a90:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <USART_SEND_STRING+0x64>)
 8002a92:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <USART_SEND_STRING+0x68>)
 8002a94:	605a      	str	r2, [r3, #4]
	}
	if(USARTx==USART3){
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a0d      	ldr	r2, [pc, #52]	; (8002ad0 <USART_SEND_STRING+0x6c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d105      	bne.n	8002aaa <USART_SEND_STRING+0x46>
		arr_data[2]=data;
 8002a9e:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <USART_SEND_STRING+0x60>)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6093      	str	r3, [r2, #8]
		arr[2]=USART3;
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <USART_SEND_STRING+0x64>)
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <USART_SEND_STRING+0x6c>)
 8002aa8:	609a      	str	r2, [r3, #8]
	}
	//Bit 7 TXEIE: TXE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
	USARTx->USART_CR1 |=Transmit_data_register_empty;//open flage of interrupt
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60da      	str	r2, [r3, #12]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	20000164 	.word	0x20000164
 8002ac8:	20000150 	.word	0x20000150
 8002acc:	40004400 	.word	0x40004400
 8002ad0:	40004800 	.word	0x40004800

08002ad4 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8002ada:	4b56      	ldr	r3, [pc, #344]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	09db      	lsrs	r3, r3, #7
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d122      	bne.n	8002b30 <USART1_IRQHandler+0x5c>
 8002aea:	4b52      	ldr	r3, [pc, #328]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	09db      	lsrs	r3, r3, #7
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d11a      	bne.n	8002b30 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 8002afa:	4b4f      	ldr	r3, [pc, #316]	; (8002c38 <USART1_IRQHandler+0x164>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 8002b04:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <USART1_IRQHandler+0x164>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f7ff ff8a 	bl	8002a28 <USART_SEND>
			++arr_data[0];
 8002b14:	4b48      	ldr	r3, [pc, #288]	; (8002c38 <USART1_IRQHandler+0x164>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	4a47      	ldr	r2, [pc, #284]	; (8002c38 <USART1_IRQHandler+0x164>)
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e007      	b.n	8002b30 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 8002b20:	4b44      	ldr	r3, [pc, #272]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b2e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 8002b30:	4b40      	ldr	r3, [pc, #256]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d166      	bne.n	8002c0e <USART1_IRQHandler+0x13a>
 8002b40:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d15e      	bne.n	8002c0e <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 8002b50:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	0b1b      	lsrs	r3, r3, #12
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d117      	bne.n	8002b90 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8002b60:	4b34      	ldr	r3, [pc, #208]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	0a9b      	lsrs	r3, r3, #10
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d108      	bne.n	8002b82 <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <USART1_IRQHandler+0x168>)
 8002b7e:	801a      	strh	r2, [r3, #0]
 8002b80:	e020      	b.n	8002bc4 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	4b2c      	ldr	r3, [pc, #176]	; (8002c3c <USART1_IRQHandler+0x168>)
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	e019      	b.n	8002bc4 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8002b90:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	0a9b      	lsrs	r3, r3, #10
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d109      	bne.n	8002bb4 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 8002ba0:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <USART1_IRQHandler+0x168>)
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	e007      	b.n	8002bc4 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8002bb4:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <USART1_IRQHandler+0x168>)
 8002bc2:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 8002bc4:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <USART1_IRQHandler+0x16c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	e002      	b.n	8002bd6 <USART1_IRQHandler+0x102>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	ddf7      	ble.n	8002bd0 <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0220 	bic.w	r2, r2, #32
 8002bee:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <USART1_IRQHandler+0x170>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0220 	bic.w	r2, r2, #32
 8002c0c:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <USART1_IRQHandler+0x170>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <USART1_IRQHandler+0x160>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0220 	bic.w	r2, r2, #32
 8002c2a:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000150 	.word	0x20000150
 8002c38:	20000164 	.word	0x20000164
 8002c3c:	2000015c 	.word	0x2000015c
 8002c40:	20000170 	.word	0x20000170
 8002c44:	40013800 	.word	0x40013800

08002c48 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8002c4e:	4b56      	ldr	r3, [pc, #344]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	09db      	lsrs	r3, r3, #7
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d122      	bne.n	8002ca4 <USART2_IRQHandler+0x5c>
 8002c5e:	4b52      	ldr	r3, [pc, #328]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	09db      	lsrs	r3, r3, #7
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d11a      	bne.n	8002ca4 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 8002c6e:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <USART2_IRQHandler+0x164>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00d      	beq.n	8002c94 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 8002c78:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <USART2_IRQHandler+0x164>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4619      	mov	r1, r3
 8002c82:	4610      	mov	r0, r2
 8002c84:	f7ff fed0 	bl	8002a28 <USART_SEND>
			++arr_data[1];
 8002c88:	4b48      	ldr	r3, [pc, #288]	; (8002dac <USART2_IRQHandler+0x164>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	4a47      	ldr	r2, [pc, #284]	; (8002dac <USART2_IRQHandler+0x164>)
 8002c90:	6053      	str	r3, [r2, #4]
 8002c92:	e007      	b.n	8002ca4 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8002c94:	4b44      	ldr	r3, [pc, #272]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ca2:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8002ca4:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d166      	bne.n	8002d82 <USART2_IRQHandler+0x13a>
 8002cb4:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d15e      	bne.n	8002d82 <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 8002cc4:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	0b1b      	lsrs	r3, r3, #12
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d117      	bne.n	8002d04 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8002cd4:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d108      	bne.n	8002cf6 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8002ce4:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <USART2_IRQHandler+0x168>)
 8002cf2:	805a      	strh	r2, [r3, #2]
 8002cf4:	e020      	b.n	8002d38 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 8002cf6:	4b2c      	ldr	r3, [pc, #176]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	4b2c      	ldr	r3, [pc, #176]	; (8002db0 <USART2_IRQHandler+0x168>)
 8002d00:	805a      	strh	r2, [r3, #2]
 8002d02:	e019      	b.n	8002d38 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8002d04:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	0a9b      	lsrs	r3, r3, #10
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d109      	bne.n	8002d28 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 8002d14:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <USART2_IRQHandler+0x168>)
 8002d24:	805a      	strh	r2, [r3, #2]
 8002d26:	e007      	b.n	8002d38 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8002d28:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <USART2_IRQHandler+0x168>)
 8002d36:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 8002d38:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <USART2_IRQHandler+0x16c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	e002      	b.n	8002d4a <USART2_IRQHandler+0x102>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3301      	adds	r3, #1
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002d50:	4293      	cmp	r3, r2
 8002d52:	ddf7      	ble.n	8002d44 <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 8002d54:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f022 0220 	bic.w	r2, r2, #32
 8002d62:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 8002d64:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8002d6a:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <USART2_IRQHandler+0x170>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f022 0220 	bic.w	r2, r2, #32
 8002d80:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <USART2_IRQHandler+0x170>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <USART2_IRQHandler+0x160>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f022 0220 	bic.w	r2, r2, #32
 8002d9e:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000150 	.word	0x20000150
 8002dac:	20000164 	.word	0x20000164
 8002db0:	2000015c 	.word	0x2000015c
 8002db4:	20000170 	.word	0x20000170
 8002db8:	40004400 	.word	0x40004400

08002dbc <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8002dc2:	4b56      	ldr	r3, [pc, #344]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	09db      	lsrs	r3, r3, #7
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d122      	bne.n	8002e18 <USART3_IRQHandler+0x5c>
 8002dd2:	4b52      	ldr	r3, [pc, #328]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	09db      	lsrs	r3, r3, #7
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d11a      	bne.n	8002e18 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 8002de2:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <USART3_IRQHandler+0x164>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00d      	beq.n	8002e08 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 8002dec:	4b4b      	ldr	r3, [pc, #300]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <USART3_IRQHandler+0x164>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7ff fe16 	bl	8002a28 <USART_SEND>
			++arr_data[2];
 8002dfc:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <USART3_IRQHandler+0x164>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	3301      	adds	r3, #1
 8002e02:	4a47      	ldr	r2, [pc, #284]	; (8002f20 <USART3_IRQHandler+0x164>)
 8002e04:	6093      	str	r3, [r2, #8]
 8002e06:	e007      	b.n	8002e18 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 8002e08:	4b44      	ldr	r3, [pc, #272]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e16:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 8002e18:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d166      	bne.n	8002ef6 <USART3_IRQHandler+0x13a>
 8002e28:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d15e      	bne.n	8002ef6 <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 8002e38:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	0b1b      	lsrs	r3, r3, #12
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d117      	bne.n	8002e78 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8002e48:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	0a9b      	lsrs	r3, r3, #10
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d108      	bne.n	8002e6a <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8002e58:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	4b2f      	ldr	r3, [pc, #188]	; (8002f24 <USART3_IRQHandler+0x168>)
 8002e66:	809a      	strh	r2, [r3, #4]
 8002e68:	e020      	b.n	8002eac <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 8002e6a:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b2c      	ldr	r3, [pc, #176]	; (8002f24 <USART3_IRQHandler+0x168>)
 8002e74:	809a      	strh	r2, [r3, #4]
 8002e76:	e019      	b.n	8002eac <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8002e78:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	0a9b      	lsrs	r3, r3, #10
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d109      	bne.n	8002e9c <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 8002e88:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <USART3_IRQHandler+0x168>)
 8002e98:	809a      	strh	r2, [r3, #4]
 8002e9a:	e007      	b.n	8002eac <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <USART3_IRQHandler+0x168>)
 8002eaa:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 8002eac:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <USART3_IRQHandler+0x16c>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	e002      	b.n	8002ebe <USART3_IRQHandler+0x102>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	ddf7      	ble.n	8002eb8 <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f022 0220 	bic.w	r2, r2, #32
 8002ed6:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <USART3_IRQHandler+0x170>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f022 0220 	bic.w	r2, r2, #32
 8002ef4:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <USART3_IRQHandler+0x170>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <USART3_IRQHandler+0x160>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f022 0220 	bic.w	r2, r2, #32
 8002f12:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000150 	.word	0x20000150
 8002f20:	20000164 	.word	0x20000164
 8002f24:	2000015c 	.word	0x2000015c
 8002f28:	20000170 	.word	0x20000170
 8002f2c:	40004800 	.word	0x40004800

08002f30 <__errno>:
 8002f30:	4b01      	ldr	r3, [pc, #4]	; (8002f38 <__errno+0x8>)
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000024 	.word	0x20000024

08002f3c <__libc_init_array>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	2500      	movs	r5, #0
 8002f40:	4e0c      	ldr	r6, [pc, #48]	; (8002f74 <__libc_init_array+0x38>)
 8002f42:	4c0d      	ldr	r4, [pc, #52]	; (8002f78 <__libc_init_array+0x3c>)
 8002f44:	1ba4      	subs	r4, r4, r6
 8002f46:	10a4      	asrs	r4, r4, #2
 8002f48:	42a5      	cmp	r5, r4
 8002f4a:	d109      	bne.n	8002f60 <__libc_init_array+0x24>
 8002f4c:	f000 fc2c 	bl	80037a8 <_init>
 8002f50:	2500      	movs	r5, #0
 8002f52:	4e0a      	ldr	r6, [pc, #40]	; (8002f7c <__libc_init_array+0x40>)
 8002f54:	4c0a      	ldr	r4, [pc, #40]	; (8002f80 <__libc_init_array+0x44>)
 8002f56:	1ba4      	subs	r4, r4, r6
 8002f58:	10a4      	asrs	r4, r4, #2
 8002f5a:	42a5      	cmp	r5, r4
 8002f5c:	d105      	bne.n	8002f6a <__libc_init_array+0x2e>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f64:	4798      	blx	r3
 8002f66:	3501      	adds	r5, #1
 8002f68:	e7ee      	b.n	8002f48 <__libc_init_array+0xc>
 8002f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f6e:	4798      	blx	r3
 8002f70:	3501      	adds	r5, #1
 8002f72:	e7f2      	b.n	8002f5a <__libc_init_array+0x1e>
 8002f74:	080037fc 	.word	0x080037fc
 8002f78:	080037fc 	.word	0x080037fc
 8002f7c:	080037fc 	.word	0x080037fc
 8002f80:	08003800 	.word	0x08003800

08002f84 <siprintf>:
 8002f84:	b40e      	push	{r1, r2, r3}
 8002f86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f8a:	b500      	push	{lr}
 8002f8c:	b09c      	sub	sp, #112	; 0x70
 8002f8e:	ab1d      	add	r3, sp, #116	; 0x74
 8002f90:	9002      	str	r0, [sp, #8]
 8002f92:	9006      	str	r0, [sp, #24]
 8002f94:	9107      	str	r1, [sp, #28]
 8002f96:	9104      	str	r1, [sp, #16]
 8002f98:	4808      	ldr	r0, [pc, #32]	; (8002fbc <siprintf+0x38>)
 8002f9a:	4909      	ldr	r1, [pc, #36]	; (8002fc0 <siprintf+0x3c>)
 8002f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fa0:	9105      	str	r1, [sp, #20]
 8002fa2:	6800      	ldr	r0, [r0, #0]
 8002fa4:	a902      	add	r1, sp, #8
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	f000 f8e6 	bl	8003178 <_svfiprintf_r>
 8002fac:	2200      	movs	r2, #0
 8002fae:	9b02      	ldr	r3, [sp, #8]
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	b01c      	add	sp, #112	; 0x70
 8002fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fb8:	b003      	add	sp, #12
 8002fba:	4770      	bx	lr
 8002fbc:	20000024 	.word	0x20000024
 8002fc0:	ffff0208 	.word	0xffff0208

08002fc4 <_malloc_r>:
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	1ccd      	adds	r5, r1, #3
 8002fc8:	f025 0503 	bic.w	r5, r5, #3
 8002fcc:	3508      	adds	r5, #8
 8002fce:	2d0c      	cmp	r5, #12
 8002fd0:	bf38      	it	cc
 8002fd2:	250c      	movcc	r5, #12
 8002fd4:	2d00      	cmp	r5, #0
 8002fd6:	4606      	mov	r6, r0
 8002fd8:	db01      	blt.n	8002fde <_malloc_r+0x1a>
 8002fda:	42a9      	cmp	r1, r5
 8002fdc:	d903      	bls.n	8002fe6 <_malloc_r+0x22>
 8002fde:	230c      	movs	r3, #12
 8002fe0:	6033      	str	r3, [r6, #0]
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	bd70      	pop	{r4, r5, r6, pc}
 8002fe6:	f000 fb89 	bl	80036fc <__malloc_lock>
 8002fea:	4a21      	ldr	r2, [pc, #132]	; (8003070 <_malloc_r+0xac>)
 8002fec:	6814      	ldr	r4, [r2, #0]
 8002fee:	4621      	mov	r1, r4
 8002ff0:	b991      	cbnz	r1, 8003018 <_malloc_r+0x54>
 8002ff2:	4c20      	ldr	r4, [pc, #128]	; (8003074 <_malloc_r+0xb0>)
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	b91b      	cbnz	r3, 8003000 <_malloc_r+0x3c>
 8002ff8:	4630      	mov	r0, r6
 8002ffa:	f000 fb3d 	bl	8003678 <_sbrk_r>
 8002ffe:	6020      	str	r0, [r4, #0]
 8003000:	4629      	mov	r1, r5
 8003002:	4630      	mov	r0, r6
 8003004:	f000 fb38 	bl	8003678 <_sbrk_r>
 8003008:	1c43      	adds	r3, r0, #1
 800300a:	d124      	bne.n	8003056 <_malloc_r+0x92>
 800300c:	230c      	movs	r3, #12
 800300e:	4630      	mov	r0, r6
 8003010:	6033      	str	r3, [r6, #0]
 8003012:	f000 fb74 	bl	80036fe <__malloc_unlock>
 8003016:	e7e4      	b.n	8002fe2 <_malloc_r+0x1e>
 8003018:	680b      	ldr	r3, [r1, #0]
 800301a:	1b5b      	subs	r3, r3, r5
 800301c:	d418      	bmi.n	8003050 <_malloc_r+0x8c>
 800301e:	2b0b      	cmp	r3, #11
 8003020:	d90f      	bls.n	8003042 <_malloc_r+0x7e>
 8003022:	600b      	str	r3, [r1, #0]
 8003024:	18cc      	adds	r4, r1, r3
 8003026:	50cd      	str	r5, [r1, r3]
 8003028:	4630      	mov	r0, r6
 800302a:	f000 fb68 	bl	80036fe <__malloc_unlock>
 800302e:	f104 000b 	add.w	r0, r4, #11
 8003032:	1d23      	adds	r3, r4, #4
 8003034:	f020 0007 	bic.w	r0, r0, #7
 8003038:	1ac3      	subs	r3, r0, r3
 800303a:	d0d3      	beq.n	8002fe4 <_malloc_r+0x20>
 800303c:	425a      	negs	r2, r3
 800303e:	50e2      	str	r2, [r4, r3]
 8003040:	e7d0      	b.n	8002fe4 <_malloc_r+0x20>
 8003042:	684b      	ldr	r3, [r1, #4]
 8003044:	428c      	cmp	r4, r1
 8003046:	bf16      	itet	ne
 8003048:	6063      	strne	r3, [r4, #4]
 800304a:	6013      	streq	r3, [r2, #0]
 800304c:	460c      	movne	r4, r1
 800304e:	e7eb      	b.n	8003028 <_malloc_r+0x64>
 8003050:	460c      	mov	r4, r1
 8003052:	6849      	ldr	r1, [r1, #4]
 8003054:	e7cc      	b.n	8002ff0 <_malloc_r+0x2c>
 8003056:	1cc4      	adds	r4, r0, #3
 8003058:	f024 0403 	bic.w	r4, r4, #3
 800305c:	42a0      	cmp	r0, r4
 800305e:	d005      	beq.n	800306c <_malloc_r+0xa8>
 8003060:	1a21      	subs	r1, r4, r0
 8003062:	4630      	mov	r0, r6
 8003064:	f000 fb08 	bl	8003678 <_sbrk_r>
 8003068:	3001      	adds	r0, #1
 800306a:	d0cf      	beq.n	800300c <_malloc_r+0x48>
 800306c:	6025      	str	r5, [r4, #0]
 800306e:	e7db      	b.n	8003028 <_malloc_r+0x64>
 8003070:	200000bc 	.word	0x200000bc
 8003074:	200000c0 	.word	0x200000c0

08003078 <_realloc_r>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	4607      	mov	r7, r0
 800307c:	4614      	mov	r4, r2
 800307e:	460e      	mov	r6, r1
 8003080:	b921      	cbnz	r1, 800308c <_realloc_r+0x14>
 8003082:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003086:	4611      	mov	r1, r2
 8003088:	f7ff bf9c 	b.w	8002fc4 <_malloc_r>
 800308c:	b922      	cbnz	r2, 8003098 <_realloc_r+0x20>
 800308e:	f000 fb37 	bl	8003700 <_free_r>
 8003092:	4625      	mov	r5, r4
 8003094:	4628      	mov	r0, r5
 8003096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003098:	f000 fb7e 	bl	8003798 <_malloc_usable_size_r>
 800309c:	42a0      	cmp	r0, r4
 800309e:	d20f      	bcs.n	80030c0 <_realloc_r+0x48>
 80030a0:	4621      	mov	r1, r4
 80030a2:	4638      	mov	r0, r7
 80030a4:	f7ff ff8e 	bl	8002fc4 <_malloc_r>
 80030a8:	4605      	mov	r5, r0
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d0f2      	beq.n	8003094 <_realloc_r+0x1c>
 80030ae:	4631      	mov	r1, r6
 80030b0:	4622      	mov	r2, r4
 80030b2:	f000 faff 	bl	80036b4 <memcpy>
 80030b6:	4631      	mov	r1, r6
 80030b8:	4638      	mov	r0, r7
 80030ba:	f000 fb21 	bl	8003700 <_free_r>
 80030be:	e7e9      	b.n	8003094 <_realloc_r+0x1c>
 80030c0:	4635      	mov	r5, r6
 80030c2:	e7e7      	b.n	8003094 <_realloc_r+0x1c>

080030c4 <__ssputs_r>:
 80030c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030c8:	688e      	ldr	r6, [r1, #8]
 80030ca:	4682      	mov	sl, r0
 80030cc:	429e      	cmp	r6, r3
 80030ce:	460c      	mov	r4, r1
 80030d0:	4690      	mov	r8, r2
 80030d2:	4699      	mov	r9, r3
 80030d4:	d837      	bhi.n	8003146 <__ssputs_r+0x82>
 80030d6:	898a      	ldrh	r2, [r1, #12]
 80030d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030dc:	d031      	beq.n	8003142 <__ssputs_r+0x7e>
 80030de:	2302      	movs	r3, #2
 80030e0:	6825      	ldr	r5, [r4, #0]
 80030e2:	6909      	ldr	r1, [r1, #16]
 80030e4:	1a6f      	subs	r7, r5, r1
 80030e6:	6965      	ldr	r5, [r4, #20]
 80030e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80030f0:	f109 0301 	add.w	r3, r9, #1
 80030f4:	443b      	add	r3, r7
 80030f6:	429d      	cmp	r5, r3
 80030f8:	bf38      	it	cc
 80030fa:	461d      	movcc	r5, r3
 80030fc:	0553      	lsls	r3, r2, #21
 80030fe:	d530      	bpl.n	8003162 <__ssputs_r+0x9e>
 8003100:	4629      	mov	r1, r5
 8003102:	f7ff ff5f 	bl	8002fc4 <_malloc_r>
 8003106:	4606      	mov	r6, r0
 8003108:	b950      	cbnz	r0, 8003120 <__ssputs_r+0x5c>
 800310a:	230c      	movs	r3, #12
 800310c:	f04f 30ff 	mov.w	r0, #4294967295
 8003110:	f8ca 3000 	str.w	r3, [sl]
 8003114:	89a3      	ldrh	r3, [r4, #12]
 8003116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800311a:	81a3      	strh	r3, [r4, #12]
 800311c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003120:	463a      	mov	r2, r7
 8003122:	6921      	ldr	r1, [r4, #16]
 8003124:	f000 fac6 	bl	80036b4 <memcpy>
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800312e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003132:	81a3      	strh	r3, [r4, #12]
 8003134:	6126      	str	r6, [r4, #16]
 8003136:	443e      	add	r6, r7
 8003138:	6026      	str	r6, [r4, #0]
 800313a:	464e      	mov	r6, r9
 800313c:	6165      	str	r5, [r4, #20]
 800313e:	1bed      	subs	r5, r5, r7
 8003140:	60a5      	str	r5, [r4, #8]
 8003142:	454e      	cmp	r6, r9
 8003144:	d900      	bls.n	8003148 <__ssputs_r+0x84>
 8003146:	464e      	mov	r6, r9
 8003148:	4632      	mov	r2, r6
 800314a:	4641      	mov	r1, r8
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	f000 fabc 	bl	80036ca <memmove>
 8003152:	68a3      	ldr	r3, [r4, #8]
 8003154:	2000      	movs	r0, #0
 8003156:	1b9b      	subs	r3, r3, r6
 8003158:	60a3      	str	r3, [r4, #8]
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	441e      	add	r6, r3
 800315e:	6026      	str	r6, [r4, #0]
 8003160:	e7dc      	b.n	800311c <__ssputs_r+0x58>
 8003162:	462a      	mov	r2, r5
 8003164:	f7ff ff88 	bl	8003078 <_realloc_r>
 8003168:	4606      	mov	r6, r0
 800316a:	2800      	cmp	r0, #0
 800316c:	d1e2      	bne.n	8003134 <__ssputs_r+0x70>
 800316e:	6921      	ldr	r1, [r4, #16]
 8003170:	4650      	mov	r0, sl
 8003172:	f000 fac5 	bl	8003700 <_free_r>
 8003176:	e7c8      	b.n	800310a <__ssputs_r+0x46>

08003178 <_svfiprintf_r>:
 8003178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800317c:	461d      	mov	r5, r3
 800317e:	898b      	ldrh	r3, [r1, #12]
 8003180:	b09d      	sub	sp, #116	; 0x74
 8003182:	061f      	lsls	r7, r3, #24
 8003184:	4680      	mov	r8, r0
 8003186:	460c      	mov	r4, r1
 8003188:	4616      	mov	r6, r2
 800318a:	d50f      	bpl.n	80031ac <_svfiprintf_r+0x34>
 800318c:	690b      	ldr	r3, [r1, #16]
 800318e:	b96b      	cbnz	r3, 80031ac <_svfiprintf_r+0x34>
 8003190:	2140      	movs	r1, #64	; 0x40
 8003192:	f7ff ff17 	bl	8002fc4 <_malloc_r>
 8003196:	6020      	str	r0, [r4, #0]
 8003198:	6120      	str	r0, [r4, #16]
 800319a:	b928      	cbnz	r0, 80031a8 <_svfiprintf_r+0x30>
 800319c:	230c      	movs	r3, #12
 800319e:	f8c8 3000 	str.w	r3, [r8]
 80031a2:	f04f 30ff 	mov.w	r0, #4294967295
 80031a6:	e0c8      	b.n	800333a <_svfiprintf_r+0x1c2>
 80031a8:	2340      	movs	r3, #64	; 0x40
 80031aa:	6163      	str	r3, [r4, #20]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9309      	str	r3, [sp, #36]	; 0x24
 80031b0:	2320      	movs	r3, #32
 80031b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031b6:	2330      	movs	r3, #48	; 0x30
 80031b8:	f04f 0b01 	mov.w	fp, #1
 80031bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031c0:	9503      	str	r5, [sp, #12]
 80031c2:	4637      	mov	r7, r6
 80031c4:	463d      	mov	r5, r7
 80031c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80031ca:	b10b      	cbz	r3, 80031d0 <_svfiprintf_r+0x58>
 80031cc:	2b25      	cmp	r3, #37	; 0x25
 80031ce:	d13e      	bne.n	800324e <_svfiprintf_r+0xd6>
 80031d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80031d4:	d00b      	beq.n	80031ee <_svfiprintf_r+0x76>
 80031d6:	4653      	mov	r3, sl
 80031d8:	4632      	mov	r2, r6
 80031da:	4621      	mov	r1, r4
 80031dc:	4640      	mov	r0, r8
 80031de:	f7ff ff71 	bl	80030c4 <__ssputs_r>
 80031e2:	3001      	adds	r0, #1
 80031e4:	f000 80a4 	beq.w	8003330 <_svfiprintf_r+0x1b8>
 80031e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031ea:	4453      	add	r3, sl
 80031ec:	9309      	str	r3, [sp, #36]	; 0x24
 80031ee:	783b      	ldrb	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 809d 	beq.w	8003330 <_svfiprintf_r+0x1b8>
 80031f6:	2300      	movs	r3, #0
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003200:	9304      	str	r3, [sp, #16]
 8003202:	9307      	str	r3, [sp, #28]
 8003204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003208:	931a      	str	r3, [sp, #104]	; 0x68
 800320a:	462f      	mov	r7, r5
 800320c:	2205      	movs	r2, #5
 800320e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003212:	4850      	ldr	r0, [pc, #320]	; (8003354 <_svfiprintf_r+0x1dc>)
 8003214:	f000 fa40 	bl	8003698 <memchr>
 8003218:	9b04      	ldr	r3, [sp, #16]
 800321a:	b9d0      	cbnz	r0, 8003252 <_svfiprintf_r+0xda>
 800321c:	06d9      	lsls	r1, r3, #27
 800321e:	bf44      	itt	mi
 8003220:	2220      	movmi	r2, #32
 8003222:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003226:	071a      	lsls	r2, r3, #28
 8003228:	bf44      	itt	mi
 800322a:	222b      	movmi	r2, #43	; 0x2b
 800322c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003230:	782a      	ldrb	r2, [r5, #0]
 8003232:	2a2a      	cmp	r2, #42	; 0x2a
 8003234:	d015      	beq.n	8003262 <_svfiprintf_r+0xea>
 8003236:	462f      	mov	r7, r5
 8003238:	2000      	movs	r0, #0
 800323a:	250a      	movs	r5, #10
 800323c:	9a07      	ldr	r2, [sp, #28]
 800323e:	4639      	mov	r1, r7
 8003240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003244:	3b30      	subs	r3, #48	; 0x30
 8003246:	2b09      	cmp	r3, #9
 8003248:	d94d      	bls.n	80032e6 <_svfiprintf_r+0x16e>
 800324a:	b1b8      	cbz	r0, 800327c <_svfiprintf_r+0x104>
 800324c:	e00f      	b.n	800326e <_svfiprintf_r+0xf6>
 800324e:	462f      	mov	r7, r5
 8003250:	e7b8      	b.n	80031c4 <_svfiprintf_r+0x4c>
 8003252:	4a40      	ldr	r2, [pc, #256]	; (8003354 <_svfiprintf_r+0x1dc>)
 8003254:	463d      	mov	r5, r7
 8003256:	1a80      	subs	r0, r0, r2
 8003258:	fa0b f000 	lsl.w	r0, fp, r0
 800325c:	4318      	orrs	r0, r3
 800325e:	9004      	str	r0, [sp, #16]
 8003260:	e7d3      	b.n	800320a <_svfiprintf_r+0x92>
 8003262:	9a03      	ldr	r2, [sp, #12]
 8003264:	1d11      	adds	r1, r2, #4
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	9103      	str	r1, [sp, #12]
 800326a:	2a00      	cmp	r2, #0
 800326c:	db01      	blt.n	8003272 <_svfiprintf_r+0xfa>
 800326e:	9207      	str	r2, [sp, #28]
 8003270:	e004      	b.n	800327c <_svfiprintf_r+0x104>
 8003272:	4252      	negs	r2, r2
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	9207      	str	r2, [sp, #28]
 800327a:	9304      	str	r3, [sp, #16]
 800327c:	783b      	ldrb	r3, [r7, #0]
 800327e:	2b2e      	cmp	r3, #46	; 0x2e
 8003280:	d10c      	bne.n	800329c <_svfiprintf_r+0x124>
 8003282:	787b      	ldrb	r3, [r7, #1]
 8003284:	2b2a      	cmp	r3, #42	; 0x2a
 8003286:	d133      	bne.n	80032f0 <_svfiprintf_r+0x178>
 8003288:	9b03      	ldr	r3, [sp, #12]
 800328a:	3702      	adds	r7, #2
 800328c:	1d1a      	adds	r2, r3, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	9203      	str	r2, [sp, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bfb8      	it	lt
 8003296:	f04f 33ff 	movlt.w	r3, #4294967295
 800329a:	9305      	str	r3, [sp, #20]
 800329c:	4d2e      	ldr	r5, [pc, #184]	; (8003358 <_svfiprintf_r+0x1e0>)
 800329e:	2203      	movs	r2, #3
 80032a0:	7839      	ldrb	r1, [r7, #0]
 80032a2:	4628      	mov	r0, r5
 80032a4:	f000 f9f8 	bl	8003698 <memchr>
 80032a8:	b138      	cbz	r0, 80032ba <_svfiprintf_r+0x142>
 80032aa:	2340      	movs	r3, #64	; 0x40
 80032ac:	1b40      	subs	r0, r0, r5
 80032ae:	fa03 f000 	lsl.w	r0, r3, r0
 80032b2:	9b04      	ldr	r3, [sp, #16]
 80032b4:	3701      	adds	r7, #1
 80032b6:	4303      	orrs	r3, r0
 80032b8:	9304      	str	r3, [sp, #16]
 80032ba:	7839      	ldrb	r1, [r7, #0]
 80032bc:	2206      	movs	r2, #6
 80032be:	4827      	ldr	r0, [pc, #156]	; (800335c <_svfiprintf_r+0x1e4>)
 80032c0:	1c7e      	adds	r6, r7, #1
 80032c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032c6:	f000 f9e7 	bl	8003698 <memchr>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d038      	beq.n	8003340 <_svfiprintf_r+0x1c8>
 80032ce:	4b24      	ldr	r3, [pc, #144]	; (8003360 <_svfiprintf_r+0x1e8>)
 80032d0:	bb13      	cbnz	r3, 8003318 <_svfiprintf_r+0x1a0>
 80032d2:	9b03      	ldr	r3, [sp, #12]
 80032d4:	3307      	adds	r3, #7
 80032d6:	f023 0307 	bic.w	r3, r3, #7
 80032da:	3308      	adds	r3, #8
 80032dc:	9303      	str	r3, [sp, #12]
 80032de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032e0:	444b      	add	r3, r9
 80032e2:	9309      	str	r3, [sp, #36]	; 0x24
 80032e4:	e76d      	b.n	80031c2 <_svfiprintf_r+0x4a>
 80032e6:	fb05 3202 	mla	r2, r5, r2, r3
 80032ea:	2001      	movs	r0, #1
 80032ec:	460f      	mov	r7, r1
 80032ee:	e7a6      	b.n	800323e <_svfiprintf_r+0xc6>
 80032f0:	2300      	movs	r3, #0
 80032f2:	250a      	movs	r5, #10
 80032f4:	4619      	mov	r1, r3
 80032f6:	3701      	adds	r7, #1
 80032f8:	9305      	str	r3, [sp, #20]
 80032fa:	4638      	mov	r0, r7
 80032fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003300:	3a30      	subs	r2, #48	; 0x30
 8003302:	2a09      	cmp	r2, #9
 8003304:	d903      	bls.n	800330e <_svfiprintf_r+0x196>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0c8      	beq.n	800329c <_svfiprintf_r+0x124>
 800330a:	9105      	str	r1, [sp, #20]
 800330c:	e7c6      	b.n	800329c <_svfiprintf_r+0x124>
 800330e:	fb05 2101 	mla	r1, r5, r1, r2
 8003312:	2301      	movs	r3, #1
 8003314:	4607      	mov	r7, r0
 8003316:	e7f0      	b.n	80032fa <_svfiprintf_r+0x182>
 8003318:	ab03      	add	r3, sp, #12
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	4622      	mov	r2, r4
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <_svfiprintf_r+0x1ec>)
 8003320:	a904      	add	r1, sp, #16
 8003322:	4640      	mov	r0, r8
 8003324:	f3af 8000 	nop.w
 8003328:	f1b0 3fff 	cmp.w	r0, #4294967295
 800332c:	4681      	mov	r9, r0
 800332e:	d1d6      	bne.n	80032de <_svfiprintf_r+0x166>
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	065b      	lsls	r3, r3, #25
 8003334:	f53f af35 	bmi.w	80031a2 <_svfiprintf_r+0x2a>
 8003338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800333a:	b01d      	add	sp, #116	; 0x74
 800333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003340:	ab03      	add	r3, sp, #12
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4622      	mov	r2, r4
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <_svfiprintf_r+0x1ec>)
 8003348:	a904      	add	r1, sp, #16
 800334a:	4640      	mov	r0, r8
 800334c:	f000 f882 	bl	8003454 <_printf_i>
 8003350:	e7ea      	b.n	8003328 <_svfiprintf_r+0x1b0>
 8003352:	bf00      	nop
 8003354:	080037c7 	.word	0x080037c7
 8003358:	080037cd 	.word	0x080037cd
 800335c:	080037d1 	.word	0x080037d1
 8003360:	00000000 	.word	0x00000000
 8003364:	080030c5 	.word	0x080030c5

08003368 <_printf_common>:
 8003368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800336c:	4691      	mov	r9, r2
 800336e:	461f      	mov	r7, r3
 8003370:	688a      	ldr	r2, [r1, #8]
 8003372:	690b      	ldr	r3, [r1, #16]
 8003374:	4606      	mov	r6, r0
 8003376:	4293      	cmp	r3, r2
 8003378:	bfb8      	it	lt
 800337a:	4613      	movlt	r3, r2
 800337c:	f8c9 3000 	str.w	r3, [r9]
 8003380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003384:	460c      	mov	r4, r1
 8003386:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800338a:	b112      	cbz	r2, 8003392 <_printf_common+0x2a>
 800338c:	3301      	adds	r3, #1
 800338e:	f8c9 3000 	str.w	r3, [r9]
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	0699      	lsls	r1, r3, #26
 8003396:	bf42      	ittt	mi
 8003398:	f8d9 3000 	ldrmi.w	r3, [r9]
 800339c:	3302      	addmi	r3, #2
 800339e:	f8c9 3000 	strmi.w	r3, [r9]
 80033a2:	6825      	ldr	r5, [r4, #0]
 80033a4:	f015 0506 	ands.w	r5, r5, #6
 80033a8:	d107      	bne.n	80033ba <_printf_common+0x52>
 80033aa:	f104 0a19 	add.w	sl, r4, #25
 80033ae:	68e3      	ldr	r3, [r4, #12]
 80033b0:	f8d9 2000 	ldr.w	r2, [r9]
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	42ab      	cmp	r3, r5
 80033b8:	dc29      	bgt.n	800340e <_printf_common+0xa6>
 80033ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80033be:	6822      	ldr	r2, [r4, #0]
 80033c0:	3300      	adds	r3, #0
 80033c2:	bf18      	it	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	0692      	lsls	r2, r2, #26
 80033c8:	d42e      	bmi.n	8003428 <_printf_common+0xc0>
 80033ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033ce:	4639      	mov	r1, r7
 80033d0:	4630      	mov	r0, r6
 80033d2:	47c0      	blx	r8
 80033d4:	3001      	adds	r0, #1
 80033d6:	d021      	beq.n	800341c <_printf_common+0xb4>
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	68e5      	ldr	r5, [r4, #12]
 80033dc:	f003 0306 	and.w	r3, r3, #6
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	bf18      	it	ne
 80033e4:	2500      	movne	r5, #0
 80033e6:	f8d9 2000 	ldr.w	r2, [r9]
 80033ea:	f04f 0900 	mov.w	r9, #0
 80033ee:	bf08      	it	eq
 80033f0:	1aad      	subeq	r5, r5, r2
 80033f2:	68a3      	ldr	r3, [r4, #8]
 80033f4:	6922      	ldr	r2, [r4, #16]
 80033f6:	bf08      	it	eq
 80033f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033fc:	4293      	cmp	r3, r2
 80033fe:	bfc4      	itt	gt
 8003400:	1a9b      	subgt	r3, r3, r2
 8003402:	18ed      	addgt	r5, r5, r3
 8003404:	341a      	adds	r4, #26
 8003406:	454d      	cmp	r5, r9
 8003408:	d11a      	bne.n	8003440 <_printf_common+0xd8>
 800340a:	2000      	movs	r0, #0
 800340c:	e008      	b.n	8003420 <_printf_common+0xb8>
 800340e:	2301      	movs	r3, #1
 8003410:	4652      	mov	r2, sl
 8003412:	4639      	mov	r1, r7
 8003414:	4630      	mov	r0, r6
 8003416:	47c0      	blx	r8
 8003418:	3001      	adds	r0, #1
 800341a:	d103      	bne.n	8003424 <_printf_common+0xbc>
 800341c:	f04f 30ff 	mov.w	r0, #4294967295
 8003420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003424:	3501      	adds	r5, #1
 8003426:	e7c2      	b.n	80033ae <_printf_common+0x46>
 8003428:	2030      	movs	r0, #48	; 0x30
 800342a:	18e1      	adds	r1, r4, r3
 800342c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003436:	4422      	add	r2, r4
 8003438:	3302      	adds	r3, #2
 800343a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800343e:	e7c4      	b.n	80033ca <_printf_common+0x62>
 8003440:	2301      	movs	r3, #1
 8003442:	4622      	mov	r2, r4
 8003444:	4639      	mov	r1, r7
 8003446:	4630      	mov	r0, r6
 8003448:	47c0      	blx	r8
 800344a:	3001      	adds	r0, #1
 800344c:	d0e6      	beq.n	800341c <_printf_common+0xb4>
 800344e:	f109 0901 	add.w	r9, r9, #1
 8003452:	e7d8      	b.n	8003406 <_printf_common+0x9e>

08003454 <_printf_i>:
 8003454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003458:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800345c:	460c      	mov	r4, r1
 800345e:	7e09      	ldrb	r1, [r1, #24]
 8003460:	b085      	sub	sp, #20
 8003462:	296e      	cmp	r1, #110	; 0x6e
 8003464:	4617      	mov	r7, r2
 8003466:	4606      	mov	r6, r0
 8003468:	4698      	mov	r8, r3
 800346a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800346c:	f000 80b3 	beq.w	80035d6 <_printf_i+0x182>
 8003470:	d822      	bhi.n	80034b8 <_printf_i+0x64>
 8003472:	2963      	cmp	r1, #99	; 0x63
 8003474:	d036      	beq.n	80034e4 <_printf_i+0x90>
 8003476:	d80a      	bhi.n	800348e <_printf_i+0x3a>
 8003478:	2900      	cmp	r1, #0
 800347a:	f000 80b9 	beq.w	80035f0 <_printf_i+0x19c>
 800347e:	2958      	cmp	r1, #88	; 0x58
 8003480:	f000 8083 	beq.w	800358a <_printf_i+0x136>
 8003484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003488:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800348c:	e032      	b.n	80034f4 <_printf_i+0xa0>
 800348e:	2964      	cmp	r1, #100	; 0x64
 8003490:	d001      	beq.n	8003496 <_printf_i+0x42>
 8003492:	2969      	cmp	r1, #105	; 0x69
 8003494:	d1f6      	bne.n	8003484 <_printf_i+0x30>
 8003496:	6820      	ldr	r0, [r4, #0]
 8003498:	6813      	ldr	r3, [r2, #0]
 800349a:	0605      	lsls	r5, r0, #24
 800349c:	f103 0104 	add.w	r1, r3, #4
 80034a0:	d52a      	bpl.n	80034f8 <_printf_i+0xa4>
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6011      	str	r1, [r2, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	da03      	bge.n	80034b2 <_printf_i+0x5e>
 80034aa:	222d      	movs	r2, #45	; 0x2d
 80034ac:	425b      	negs	r3, r3
 80034ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80034b2:	486f      	ldr	r0, [pc, #444]	; (8003670 <_printf_i+0x21c>)
 80034b4:	220a      	movs	r2, #10
 80034b6:	e039      	b.n	800352c <_printf_i+0xd8>
 80034b8:	2973      	cmp	r1, #115	; 0x73
 80034ba:	f000 809d 	beq.w	80035f8 <_printf_i+0x1a4>
 80034be:	d808      	bhi.n	80034d2 <_printf_i+0x7e>
 80034c0:	296f      	cmp	r1, #111	; 0x6f
 80034c2:	d020      	beq.n	8003506 <_printf_i+0xb2>
 80034c4:	2970      	cmp	r1, #112	; 0x70
 80034c6:	d1dd      	bne.n	8003484 <_printf_i+0x30>
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	f043 0320 	orr.w	r3, r3, #32
 80034ce:	6023      	str	r3, [r4, #0]
 80034d0:	e003      	b.n	80034da <_printf_i+0x86>
 80034d2:	2975      	cmp	r1, #117	; 0x75
 80034d4:	d017      	beq.n	8003506 <_printf_i+0xb2>
 80034d6:	2978      	cmp	r1, #120	; 0x78
 80034d8:	d1d4      	bne.n	8003484 <_printf_i+0x30>
 80034da:	2378      	movs	r3, #120	; 0x78
 80034dc:	4865      	ldr	r0, [pc, #404]	; (8003674 <_printf_i+0x220>)
 80034de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034e2:	e055      	b.n	8003590 <_printf_i+0x13c>
 80034e4:	6813      	ldr	r3, [r2, #0]
 80034e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034ea:	1d19      	adds	r1, r3, #4
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6011      	str	r1, [r2, #0]
 80034f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034f4:	2301      	movs	r3, #1
 80034f6:	e08c      	b.n	8003612 <_printf_i+0x1be>
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034fe:	6011      	str	r1, [r2, #0]
 8003500:	bf18      	it	ne
 8003502:	b21b      	sxthne	r3, r3
 8003504:	e7cf      	b.n	80034a6 <_printf_i+0x52>
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	6825      	ldr	r5, [r4, #0]
 800350a:	1d18      	adds	r0, r3, #4
 800350c:	6010      	str	r0, [r2, #0]
 800350e:	0628      	lsls	r0, r5, #24
 8003510:	d501      	bpl.n	8003516 <_printf_i+0xc2>
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	e002      	b.n	800351c <_printf_i+0xc8>
 8003516:	0668      	lsls	r0, r5, #25
 8003518:	d5fb      	bpl.n	8003512 <_printf_i+0xbe>
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	296f      	cmp	r1, #111	; 0x6f
 800351e:	bf14      	ite	ne
 8003520:	220a      	movne	r2, #10
 8003522:	2208      	moveq	r2, #8
 8003524:	4852      	ldr	r0, [pc, #328]	; (8003670 <_printf_i+0x21c>)
 8003526:	2100      	movs	r1, #0
 8003528:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800352c:	6865      	ldr	r5, [r4, #4]
 800352e:	2d00      	cmp	r5, #0
 8003530:	60a5      	str	r5, [r4, #8]
 8003532:	f2c0 8095 	blt.w	8003660 <_printf_i+0x20c>
 8003536:	6821      	ldr	r1, [r4, #0]
 8003538:	f021 0104 	bic.w	r1, r1, #4
 800353c:	6021      	str	r1, [r4, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d13d      	bne.n	80035be <_printf_i+0x16a>
 8003542:	2d00      	cmp	r5, #0
 8003544:	f040 808e 	bne.w	8003664 <_printf_i+0x210>
 8003548:	4665      	mov	r5, ip
 800354a:	2a08      	cmp	r2, #8
 800354c:	d10b      	bne.n	8003566 <_printf_i+0x112>
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	07db      	lsls	r3, r3, #31
 8003552:	d508      	bpl.n	8003566 <_printf_i+0x112>
 8003554:	6923      	ldr	r3, [r4, #16]
 8003556:	6862      	ldr	r2, [r4, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	bfde      	ittt	le
 800355c:	2330      	movle	r3, #48	; 0x30
 800355e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003562:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003566:	ebac 0305 	sub.w	r3, ip, r5
 800356a:	6123      	str	r3, [r4, #16]
 800356c:	f8cd 8000 	str.w	r8, [sp]
 8003570:	463b      	mov	r3, r7
 8003572:	aa03      	add	r2, sp, #12
 8003574:	4621      	mov	r1, r4
 8003576:	4630      	mov	r0, r6
 8003578:	f7ff fef6 	bl	8003368 <_printf_common>
 800357c:	3001      	adds	r0, #1
 800357e:	d14d      	bne.n	800361c <_printf_i+0x1c8>
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	b005      	add	sp, #20
 8003586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800358a:	4839      	ldr	r0, [pc, #228]	; (8003670 <_printf_i+0x21c>)
 800358c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003590:	6813      	ldr	r3, [r2, #0]
 8003592:	6821      	ldr	r1, [r4, #0]
 8003594:	1d1d      	adds	r5, r3, #4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6015      	str	r5, [r2, #0]
 800359a:	060a      	lsls	r2, r1, #24
 800359c:	d50b      	bpl.n	80035b6 <_printf_i+0x162>
 800359e:	07ca      	lsls	r2, r1, #31
 80035a0:	bf44      	itt	mi
 80035a2:	f041 0120 	orrmi.w	r1, r1, #32
 80035a6:	6021      	strmi	r1, [r4, #0]
 80035a8:	b91b      	cbnz	r3, 80035b2 <_printf_i+0x15e>
 80035aa:	6822      	ldr	r2, [r4, #0]
 80035ac:	f022 0220 	bic.w	r2, r2, #32
 80035b0:	6022      	str	r2, [r4, #0]
 80035b2:	2210      	movs	r2, #16
 80035b4:	e7b7      	b.n	8003526 <_printf_i+0xd2>
 80035b6:	064d      	lsls	r5, r1, #25
 80035b8:	bf48      	it	mi
 80035ba:	b29b      	uxthmi	r3, r3
 80035bc:	e7ef      	b.n	800359e <_printf_i+0x14a>
 80035be:	4665      	mov	r5, ip
 80035c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80035c4:	fb02 3311 	mls	r3, r2, r1, r3
 80035c8:	5cc3      	ldrb	r3, [r0, r3]
 80035ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80035ce:	460b      	mov	r3, r1
 80035d0:	2900      	cmp	r1, #0
 80035d2:	d1f5      	bne.n	80035c0 <_printf_i+0x16c>
 80035d4:	e7b9      	b.n	800354a <_printf_i+0xf6>
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	6825      	ldr	r5, [r4, #0]
 80035da:	1d18      	adds	r0, r3, #4
 80035dc:	6961      	ldr	r1, [r4, #20]
 80035de:	6010      	str	r0, [r2, #0]
 80035e0:	0628      	lsls	r0, r5, #24
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	d501      	bpl.n	80035ea <_printf_i+0x196>
 80035e6:	6019      	str	r1, [r3, #0]
 80035e8:	e002      	b.n	80035f0 <_printf_i+0x19c>
 80035ea:	066a      	lsls	r2, r5, #25
 80035ec:	d5fb      	bpl.n	80035e6 <_printf_i+0x192>
 80035ee:	8019      	strh	r1, [r3, #0]
 80035f0:	2300      	movs	r3, #0
 80035f2:	4665      	mov	r5, ip
 80035f4:	6123      	str	r3, [r4, #16]
 80035f6:	e7b9      	b.n	800356c <_printf_i+0x118>
 80035f8:	6813      	ldr	r3, [r2, #0]
 80035fa:	1d19      	adds	r1, r3, #4
 80035fc:	6011      	str	r1, [r2, #0]
 80035fe:	681d      	ldr	r5, [r3, #0]
 8003600:	6862      	ldr	r2, [r4, #4]
 8003602:	2100      	movs	r1, #0
 8003604:	4628      	mov	r0, r5
 8003606:	f000 f847 	bl	8003698 <memchr>
 800360a:	b108      	cbz	r0, 8003610 <_printf_i+0x1bc>
 800360c:	1b40      	subs	r0, r0, r5
 800360e:	6060      	str	r0, [r4, #4]
 8003610:	6863      	ldr	r3, [r4, #4]
 8003612:	6123      	str	r3, [r4, #16]
 8003614:	2300      	movs	r3, #0
 8003616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800361a:	e7a7      	b.n	800356c <_printf_i+0x118>
 800361c:	6923      	ldr	r3, [r4, #16]
 800361e:	462a      	mov	r2, r5
 8003620:	4639      	mov	r1, r7
 8003622:	4630      	mov	r0, r6
 8003624:	47c0      	blx	r8
 8003626:	3001      	adds	r0, #1
 8003628:	d0aa      	beq.n	8003580 <_printf_i+0x12c>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	079b      	lsls	r3, r3, #30
 800362e:	d413      	bmi.n	8003658 <_printf_i+0x204>
 8003630:	68e0      	ldr	r0, [r4, #12]
 8003632:	9b03      	ldr	r3, [sp, #12]
 8003634:	4298      	cmp	r0, r3
 8003636:	bfb8      	it	lt
 8003638:	4618      	movlt	r0, r3
 800363a:	e7a3      	b.n	8003584 <_printf_i+0x130>
 800363c:	2301      	movs	r3, #1
 800363e:	464a      	mov	r2, r9
 8003640:	4639      	mov	r1, r7
 8003642:	4630      	mov	r0, r6
 8003644:	47c0      	blx	r8
 8003646:	3001      	adds	r0, #1
 8003648:	d09a      	beq.n	8003580 <_printf_i+0x12c>
 800364a:	3501      	adds	r5, #1
 800364c:	68e3      	ldr	r3, [r4, #12]
 800364e:	9a03      	ldr	r2, [sp, #12]
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	42ab      	cmp	r3, r5
 8003654:	dcf2      	bgt.n	800363c <_printf_i+0x1e8>
 8003656:	e7eb      	b.n	8003630 <_printf_i+0x1dc>
 8003658:	2500      	movs	r5, #0
 800365a:	f104 0919 	add.w	r9, r4, #25
 800365e:	e7f5      	b.n	800364c <_printf_i+0x1f8>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1ac      	bne.n	80035be <_printf_i+0x16a>
 8003664:	7803      	ldrb	r3, [r0, #0]
 8003666:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800366a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800366e:	e76c      	b.n	800354a <_printf_i+0xf6>
 8003670:	080037d8 	.word	0x080037d8
 8003674:	080037e9 	.word	0x080037e9

08003678 <_sbrk_r>:
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	2300      	movs	r3, #0
 800367c:	4c05      	ldr	r4, [pc, #20]	; (8003694 <_sbrk_r+0x1c>)
 800367e:	4605      	mov	r5, r0
 8003680:	4608      	mov	r0, r1
 8003682:	6023      	str	r3, [r4, #0]
 8003684:	f7fd fbec 	bl	8000e60 <_sbrk>
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	d102      	bne.n	8003692 <_sbrk_r+0x1a>
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	b103      	cbz	r3, 8003692 <_sbrk_r+0x1a>
 8003690:	602b      	str	r3, [r5, #0]
 8003692:	bd38      	pop	{r3, r4, r5, pc}
 8003694:	20000188 	.word	0x20000188

08003698 <memchr>:
 8003698:	b510      	push	{r4, lr}
 800369a:	b2c9      	uxtb	r1, r1
 800369c:	4402      	add	r2, r0
 800369e:	4290      	cmp	r0, r2
 80036a0:	4603      	mov	r3, r0
 80036a2:	d101      	bne.n	80036a8 <memchr+0x10>
 80036a4:	2300      	movs	r3, #0
 80036a6:	e003      	b.n	80036b0 <memchr+0x18>
 80036a8:	781c      	ldrb	r4, [r3, #0]
 80036aa:	3001      	adds	r0, #1
 80036ac:	428c      	cmp	r4, r1
 80036ae:	d1f6      	bne.n	800369e <memchr+0x6>
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd10      	pop	{r4, pc}

080036b4 <memcpy>:
 80036b4:	b510      	push	{r4, lr}
 80036b6:	1e43      	subs	r3, r0, #1
 80036b8:	440a      	add	r2, r1
 80036ba:	4291      	cmp	r1, r2
 80036bc:	d100      	bne.n	80036c0 <memcpy+0xc>
 80036be:	bd10      	pop	{r4, pc}
 80036c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036c8:	e7f7      	b.n	80036ba <memcpy+0x6>

080036ca <memmove>:
 80036ca:	4288      	cmp	r0, r1
 80036cc:	b510      	push	{r4, lr}
 80036ce:	eb01 0302 	add.w	r3, r1, r2
 80036d2:	d807      	bhi.n	80036e4 <memmove+0x1a>
 80036d4:	1e42      	subs	r2, r0, #1
 80036d6:	4299      	cmp	r1, r3
 80036d8:	d00a      	beq.n	80036f0 <memmove+0x26>
 80036da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80036e2:	e7f8      	b.n	80036d6 <memmove+0xc>
 80036e4:	4283      	cmp	r3, r0
 80036e6:	d9f5      	bls.n	80036d4 <memmove+0xa>
 80036e8:	1881      	adds	r1, r0, r2
 80036ea:	1ad2      	subs	r2, r2, r3
 80036ec:	42d3      	cmn	r3, r2
 80036ee:	d100      	bne.n	80036f2 <memmove+0x28>
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80036fa:	e7f7      	b.n	80036ec <memmove+0x22>

080036fc <__malloc_lock>:
 80036fc:	4770      	bx	lr

080036fe <__malloc_unlock>:
 80036fe:	4770      	bx	lr

08003700 <_free_r>:
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	4605      	mov	r5, r0
 8003704:	2900      	cmp	r1, #0
 8003706:	d043      	beq.n	8003790 <_free_r+0x90>
 8003708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800370c:	1f0c      	subs	r4, r1, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	bfb8      	it	lt
 8003712:	18e4      	addlt	r4, r4, r3
 8003714:	f7ff fff2 	bl	80036fc <__malloc_lock>
 8003718:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <_free_r+0x94>)
 800371a:	6813      	ldr	r3, [r2, #0]
 800371c:	4610      	mov	r0, r2
 800371e:	b933      	cbnz	r3, 800372e <_free_r+0x2e>
 8003720:	6063      	str	r3, [r4, #4]
 8003722:	6014      	str	r4, [r2, #0]
 8003724:	4628      	mov	r0, r5
 8003726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800372a:	f7ff bfe8 	b.w	80036fe <__malloc_unlock>
 800372e:	42a3      	cmp	r3, r4
 8003730:	d90b      	bls.n	800374a <_free_r+0x4a>
 8003732:	6821      	ldr	r1, [r4, #0]
 8003734:	1862      	adds	r2, r4, r1
 8003736:	4293      	cmp	r3, r2
 8003738:	bf01      	itttt	eq
 800373a:	681a      	ldreq	r2, [r3, #0]
 800373c:	685b      	ldreq	r3, [r3, #4]
 800373e:	1852      	addeq	r2, r2, r1
 8003740:	6022      	streq	r2, [r4, #0]
 8003742:	6063      	str	r3, [r4, #4]
 8003744:	6004      	str	r4, [r0, #0]
 8003746:	e7ed      	b.n	8003724 <_free_r+0x24>
 8003748:	4613      	mov	r3, r2
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	b10a      	cbz	r2, 8003752 <_free_r+0x52>
 800374e:	42a2      	cmp	r2, r4
 8003750:	d9fa      	bls.n	8003748 <_free_r+0x48>
 8003752:	6819      	ldr	r1, [r3, #0]
 8003754:	1858      	adds	r0, r3, r1
 8003756:	42a0      	cmp	r0, r4
 8003758:	d10b      	bne.n	8003772 <_free_r+0x72>
 800375a:	6820      	ldr	r0, [r4, #0]
 800375c:	4401      	add	r1, r0
 800375e:	1858      	adds	r0, r3, r1
 8003760:	4282      	cmp	r2, r0
 8003762:	6019      	str	r1, [r3, #0]
 8003764:	d1de      	bne.n	8003724 <_free_r+0x24>
 8003766:	6810      	ldr	r0, [r2, #0]
 8003768:	6852      	ldr	r2, [r2, #4]
 800376a:	4401      	add	r1, r0
 800376c:	6019      	str	r1, [r3, #0]
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	e7d8      	b.n	8003724 <_free_r+0x24>
 8003772:	d902      	bls.n	800377a <_free_r+0x7a>
 8003774:	230c      	movs	r3, #12
 8003776:	602b      	str	r3, [r5, #0]
 8003778:	e7d4      	b.n	8003724 <_free_r+0x24>
 800377a:	6820      	ldr	r0, [r4, #0]
 800377c:	1821      	adds	r1, r4, r0
 800377e:	428a      	cmp	r2, r1
 8003780:	bf01      	itttt	eq
 8003782:	6811      	ldreq	r1, [r2, #0]
 8003784:	6852      	ldreq	r2, [r2, #4]
 8003786:	1809      	addeq	r1, r1, r0
 8003788:	6021      	streq	r1, [r4, #0]
 800378a:	6062      	str	r2, [r4, #4]
 800378c:	605c      	str	r4, [r3, #4]
 800378e:	e7c9      	b.n	8003724 <_free_r+0x24>
 8003790:	bd38      	pop	{r3, r4, r5, pc}
 8003792:	bf00      	nop
 8003794:	200000bc 	.word	0x200000bc

08003798 <_malloc_usable_size_r>:
 8003798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800379c:	1f18      	subs	r0, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bfbc      	itt	lt
 80037a2:	580b      	ldrlt	r3, [r1, r0]
 80037a4:	18c0      	addlt	r0, r0, r3
 80037a6:	4770      	bx	lr

080037a8 <_init>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	bf00      	nop
 80037ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ae:	bc08      	pop	{r3}
 80037b0:	469e      	mov	lr, r3
 80037b2:	4770      	bx	lr

080037b4 <_fini>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	bf00      	nop
 80037b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ba:	bc08      	pop	{r3}
 80037bc:	469e      	mov	lr, r3
 80037be:	4770      	bx	lr
