
led_control.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c2c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001d5c  08001d5c  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001d5c  08001d5c  000202e4  2**0
                  CONTENTS
  4 .ARM          00000000  08001d5c  08001d5c  000202e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d5c  08001d5c  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d5c  08001d5c  00011d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d60  08001d60  00011d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08001d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  200002e4  08002048  000202e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08002048  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000652a  00000000  00000000  0002030d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001062  00000000  00000000  00026837  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002a8  00000000  00000000  000278a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000220  00000000  00000000  00027b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000010f9  00000000  00000000  00027d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003d6f  00000000  00000000  00028e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ac10  00000000  00000000  0002cbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000377e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009f4  00000000  00000000  0003785c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200002e4 	.word	0x200002e4
 800014c:	00000000 	.word	0x00000000
 8000150:	08001d44 	.word	0x08001d44

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200002e8 	.word	0x200002e8
 800016c:	08001d44 	.word	0x08001d44

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	d1ed      	bne.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d101      	bne.n	800076c <getposition+0x14>
		rval =0;
 8000768:	2300      	movs	r3, #0
 800076a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d101      	bne.n	8000776 <getposition+0x1e>
		rval =4;
 8000772:	2304      	movs	r3, #4
 8000774:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d101      	bne.n	8000780 <getposition+0x28>
		rval =8;
 800077c:	2308      	movs	r3, #8
 800077e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d101      	bne.n	800078a <getposition+0x32>
		rval =12;
 8000786:	230c      	movs	r3, #12
 8000788:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d101      	bne.n	8000794 <getposition+0x3c>
		rval =16;
 8000790:	2310      	movs	r3, #16
 8000792:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	2b05      	cmp	r3, #5
 8000798:	d101      	bne.n	800079e <getposition+0x46>
		rval =20;
 800079a:	2314      	movs	r3, #20
 800079c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	d101      	bne.n	80007a8 <getposition+0x50>
		rval =24;
 80007a4:	2318      	movs	r3, #24
 80007a6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	2b07      	cmp	r3, #7
 80007ac:	d101      	bne.n	80007b2 <getposition+0x5a>
		rval =28;
 80007ae:	231c      	movs	r3, #28
 80007b0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d101      	bne.n	80007bc <getposition+0x64>
		rval =0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	2b09      	cmp	r3, #9
 80007c0:	d101      	bne.n	80007c6 <getposition+0x6e>
		rval =4;
 80007c2:	2304      	movs	r3, #4
 80007c4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	2b0a      	cmp	r3, #10
 80007ca:	d101      	bne.n	80007d0 <getposition+0x78>
		rval =8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	2b0b      	cmp	r3, #11
 80007d4:	d101      	bne.n	80007da <getposition+0x82>
		rval =12;
 80007d6:	230c      	movs	r3, #12
 80007d8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	2b0c      	cmp	r3, #12
 80007de:	d101      	bne.n	80007e4 <getposition+0x8c>
		rval =16;
 80007e0:	2310      	movs	r3, #16
 80007e2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	2b0d      	cmp	r3, #13
 80007e8:	d101      	bne.n	80007ee <getposition+0x96>
		rval =20;
 80007ea:	2314      	movs	r3, #20
 80007ec:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	2b0e      	cmp	r3, #14
 80007f2:	d101      	bne.n	80007f8 <getposition+0xa0>
		rval =24;
 80007f4:	2318      	movs	r3, #24
 80007f6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	d101      	bne.n	8000802 <getposition+0xaa>
		rval =28;
 80007fe:	231c      	movs	r3, #28
 8000800:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000802:	7bfb      	ldrb	r3, [r7, #15]


}
 8000804:	4618      	mov	r0, r3
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
	...

08000810 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	460b      	mov	r3, r1
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4a69      	ldr	r2, [pc, #420]	; (80009c8 <pinmode+0x1b8>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d106      	bne.n	8000834 <pinmode+0x24>
		GPIOA_Clock_Enable();
 8000826:	4b69      	ldr	r3, [pc, #420]	; (80009cc <pinmode+0x1bc>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	4a68      	ldr	r2, [pc, #416]	; (80009cc <pinmode+0x1bc>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6193      	str	r3, [r2, #24]
 8000832:	e010      	b.n	8000856 <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4a66      	ldr	r2, [pc, #408]	; (80009d0 <pinmode+0x1c0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d106      	bne.n	800084a <pinmode+0x3a>
		GPIOB_Clock_Enable();
 800083c:	4b63      	ldr	r3, [pc, #396]	; (80009cc <pinmode+0x1bc>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a62      	ldr	r2, [pc, #392]	; (80009cc <pinmode+0x1bc>)
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	e005      	b.n	8000856 <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 800084a:	4b60      	ldr	r3, [pc, #384]	; (80009cc <pinmode+0x1bc>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a5f      	ldr	r2, [pc, #380]	; (80009cc <pinmode+0x1bc>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8000856:	897b      	ldrh	r3, [r7, #10]
 8000858:	2b07      	cmp	r3, #7
 800085a:	d856      	bhi.n	800090a <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 800085c:	897b      	ldrh	r3, [r7, #10]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff7a 	bl	8000758 <getposition>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	230f      	movs	r3, #15
 800086a:	4093      	lsls	r3, r2
 800086c:	43da      	mvns	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	401a      	ands	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b08      	cmp	r3, #8
 800087c:	d002      	beq.n	8000884 <pinmode+0x74>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b18      	cmp	r3, #24
 8000882:	d133      	bne.n	80008ec <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b18      	cmp	r3, #24
 8000888:	d117      	bne.n	80008ba <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 800088a:	897b      	ldrh	r3, [r7, #10]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff63 	bl	8000758 <getposition>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	2308      	movs	r3, #8
 8000898:	fa03 f202 	lsl.w	r2, r3, r2
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	431a      	orrs	r2, r3
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	897a      	ldrh	r2, [r7, #10]
 80008ac:	2101      	movs	r1, #1
 80008ae:	fa01 f202 	lsl.w	r2, r1, r2
 80008b2:	431a      	orrs	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80008b8:	e081      	b.n	80009be <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 80008ba:	897b      	ldrh	r3, [r7, #10]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff4b 	bl	8000758 <getposition>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	2308      	movs	r3, #8
 80008c8:	fa03 f202 	lsl.w	r2, r3, r2
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	431a      	orrs	r2, r3
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	897a      	ldrh	r2, [r7, #10]
 80008dc:	2101      	movs	r1, #1
 80008de:	fa01 f202 	lsl.w	r2, r1, r2
 80008e2:	43d2      	mvns	r2, r2
 80008e4:	401a      	ands	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80008ea:	e068      	b.n	80009be <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 80008ec:	897b      	ldrh	r3, [r7, #10]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff32 	bl	8000758 <getposition>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	fa03 f202 	lsl.w	r2, r3, r2
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	431a      	orrs	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	601a      	str	r2, [r3, #0]

	}



}
 8000908:	e059      	b.n	80009be <pinmode+0x1ae>
	else if(pin>7){
 800090a:	897b      	ldrh	r3, [r7, #10]
 800090c:	2b07      	cmp	r3, #7
 800090e:	d956      	bls.n	80009be <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 8000910:	897b      	ldrh	r3, [r7, #10]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff20 	bl	8000758 <getposition>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	230f      	movs	r3, #15
 800091e:	4093      	lsls	r3, r2
 8000920:	43da      	mvns	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	401a      	ands	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b08      	cmp	r3, #8
 8000930:	d002      	beq.n	8000938 <pinmode+0x128>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b18      	cmp	r3, #24
 8000936:	d133      	bne.n	80009a0 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b18      	cmp	r3, #24
 800093c:	d117      	bne.n	800096e <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800093e:	897b      	ldrh	r3, [r7, #10]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff09 	bl	8000758 <getposition>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	2308      	movs	r3, #8
 800094c:	fa03 f202 	lsl.w	r2, r3, r2
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	431a      	orrs	r2, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	897a      	ldrh	r2, [r7, #10]
 8000960:	2101      	movs	r1, #1
 8000962:	fa01 f202 	lsl.w	r2, r1, r2
 8000966:	431a      	orrs	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800096c:	e027      	b.n	80009be <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800096e:	897b      	ldrh	r3, [r7, #10]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fef1 	bl	8000758 <getposition>
 8000976:	4603      	mov	r3, r0
 8000978:	461a      	mov	r2, r3
 800097a:	2308      	movs	r3, #8
 800097c:	fa03 f202 	lsl.w	r2, r3, r2
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	431a      	orrs	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	897a      	ldrh	r2, [r7, #10]
 8000990:	2101      	movs	r1, #1
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	43d2      	mvns	r2, r2
 8000998:	401a      	ands	r2, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800099e:	e00e      	b.n	80009be <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 80009a0:	897b      	ldrh	r3, [r7, #10]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fed8 	bl	8000758 <getposition>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	fa03 f202 	lsl.w	r2, r3, r2
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	431a      	orrs	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	605a      	str	r2, [r3, #4]
}
 80009bc:	e7ff      	b.n	80009be <pinmode+0x1ae>
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40010800 	.word	0x40010800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <READ_PIN>:
 * @param [in]      - Pin: GPIOx PIN Number
 * @retval          - uint8_t
 * Note             - none
 */

uint8_t READ_PIN(GPIO_typeDef* GPIOx, uint16_t pin){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	807b      	strh	r3, [r7, #2]
	return (GPIOx->GPIOx_IDR>>pin)&1;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689a      	ldr	r2, [r3, #8]
 80009e4:	887b      	ldrh	r3, [r7, #2]
 80009e6:	fa22 f303 	lsr.w	r3, r2, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	b2db      	uxtb	r3, r3
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(float time,uint8_t U,uint32_t clk){
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b08b      	sub	sp, #44	; 0x2c
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	460b      	mov	r3, r1
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	72fb      	strb	r3, [r7, #11]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 8000a0a:	4b66      	ldr	r3, [pc, #408]	; (8000ba4 <delay+0x1a8>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a65      	ldr	r2, [pc, #404]	; (8000ba4 <delay+0x1a8>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8000a16:	4b64      	ldr	r3, [pc, #400]	; (8000ba8 <delay+0x1ac>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b62      	ldr	r3, [pc, #392]	; (8000ba8 <delay+0x1ac>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f022 0201 	bic.w	r2, r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61fb      	str	r3, [r7, #28]
	uint32_t unit =1000;
 8000a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a38:	61bb      	str	r3, [r7, #24]
	uint8_t  increase=2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	75fb      	strb	r3, [r7, #23]

	if (U == 0){
 8000a3e:	7afb      	ldrb	r3, [r7, #11]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10f      	bne.n	8000a64 <delay+0x68>
		unit = 1000;
 8000a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a48:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 100;
 8000a4a:	4958      	ldr	r1, [pc, #352]	; (8000bac <delay+0x1b0>)
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f7ff fe59 	bl	8000704 <__aeabi_fcmpgt>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <delay+0x62>
 8000a58:	2364      	movs	r3, #100	; 0x64
 8000a5a:	75fb      	strb	r3, [r7, #23]
 8000a5c:	e045      	b.n	8000aea <delay+0xee>
		else increase = 10;
 8000a5e:	230a      	movs	r3, #10
 8000a60:	75fb      	strb	r3, [r7, #23]
 8000a62:	e042      	b.n	8000aea <delay+0xee>
	}
	else {
		unit = 1000000;
 8000a64:	4b52      	ldr	r3, [pc, #328]	; (8000bb0 <delay+0x1b4>)
 8000a66:	61bb      	str	r3, [r7, #24]
		if (time > 3000)increase = 10;
 8000a68:	4950      	ldr	r1, [pc, #320]	; (8000bac <delay+0x1b0>)
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff fe4a 	bl	8000704 <__aeabi_fcmpgt>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <delay+0x80>
 8000a76:	230a      	movs	r3, #10
 8000a78:	75fb      	strb	r3, [r7, #23]
 8000a7a:	e036      	b.n	8000aea <delay+0xee>
		else increase = 5;
 8000a7c:	2305      	movs	r3, #5
 8000a7e:	75fb      	strb	r3, [r7, #23]
	}

	while(user_flage==1){
 8000a80:	e033      	b.n	8000aea <delay+0xee>
		user_top = (clk/unit*time)/( user_pre );
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fc26 	bl	80002dc <__aeabi_ui2f>
 8000a90:	4603      	mov	r3, r0
 8000a92:	68f9      	ldr	r1, [r7, #12]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fc79 	bl	800038c <__aeabi_fmul>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461c      	mov	r4, r3
 8000a9e:	69f8      	ldr	r0, [r7, #28]
 8000aa0:	f7ff fc1c 	bl	80002dc <__aeabi_ui2f>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	f7ff fd23 	bl	80004f4 <__aeabi_fdiv>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fe31 	bl	8000718 <__aeabi_f2uiz>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	623b      	str	r3, [r7, #32]
		if(user_top>=32000){
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000ac0:	d310      	bcc.n	8000ae4 <delay+0xe8>

			if(user_pre>65530){
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d906      	bls.n	8000ada <delay+0xde>
				user_pre=65530;
 8000acc:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8000ad0:	61fb      	str	r3, [r7, #28]
				user_flage=0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ad8:	e007      	b.n	8000aea <delay+0xee>
			}
			else user_pre+=increase;
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
 8000adc:	69fa      	ldr	r2, [r7, #28]
 8000ade:	4413      	add	r3, r2
 8000ae0:	61fb      	str	r3, [r7, #28]
 8000ae2:	e002      	b.n	8000aea <delay+0xee>

		}
		else{
			user_flage=0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(user_flage==1){
 8000aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d0c7      	beq.n	8000a82 <delay+0x86>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <delay+0x1ac>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <delay+0x1ac>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f022 0201 	bic.w	r2, r2, #1
 8000b00:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <delay+0x1ac>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <delay+0x1ac>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f042 0204 	orr.w	r2, r2, #4
 8000b10:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <delay+0x1ac>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68da      	ldr	r2, [r3, #12]
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <delay+0x1ac>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f042 0201 	orr.w	r2, r2, #1
 8000b20:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <delay+0x1ac>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6a3a      	ldr	r2, [r7, #32]
 8000b28:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <delay+0x1ac>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	3a01      	subs	r2, #1
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <delay+0x1ac>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	695a      	ldr	r2, [r3, #20]
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <delay+0x1ac>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f042 0201 	orr.w	r2, r2, #1
 8000b42:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <delay+0x1ac>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <delay+0x1ac>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f042 0201 	orr.w	r2, r2, #1
 8000b52:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <delay+0x1b8>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <delay+0x1bc>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <delay+0x1bc>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 8000b66:	e015      	b.n	8000b94 <delay+0x198>
		if((!(delay_TIMER->TIMx_CR1 & 1)||(delay_TIMER->TIMx_ARR==0)||((NVIC_ISER0>>28)&1)==0)){
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <delay+0x1ac>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00b      	beq.n	8000b8e <delay+0x192>
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <delay+0x1ac>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <delay+0x192>
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <delay+0x1bc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	0f1b      	lsrs	r3, r3, #28
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d102      	bne.n	8000b94 <delay+0x198>
			delay_flag=0;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <delay+0x1b8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
	while(delay_flag){
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <delay+0x1b8>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1e5      	bne.n	8000b68 <delay+0x16c>
		}
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	372c      	adds	r7, #44	; 0x2c
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	2000001c 	.word	0x2000001c
 8000bac:	453b8000 	.word	0x453b8000
 8000bb0:	000f4240 	.word	0x000f4240
 8000bb4:	20000018 	.word	0x20000018
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <TIMER_ISR>:

//==================================================================================================

void TIMER_ISR(TIMERS_typeDef* ISR_TIMER,uint16_t time_ms,uint8_t U,uint32_t clk,void (*calback) (void)){
 8000bbc:	b480      	push	{r7}
 8000bbe:	b08b      	sub	sp, #44	; 0x2c
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	817b      	strh	r3, [r7, #10]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	727b      	strb	r3, [r7, #9]

	TIMER3_CLOCK_Enable();//enable timer3 clock
 8000bce:	4b49      	ldr	r3, [pc, #292]	; (8000cf4 <TIMER_ISR+0x138>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a48      	ldr	r2, [pc, #288]	; (8000cf4 <TIMER_ISR+0x138>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	61d3      	str	r3, [r2, #28]
	ISR_TIMER->TIMx_CR1 &=~(1<<0);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f023 0201 	bic.w	r2, r3, #1
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	601a      	str	r2, [r3, #0]
	ISRcalback[0] = calback;
 8000be6:	4a44      	ldr	r2, [pc, #272]	; (8000cf8 <TIMER_ISR+0x13c>)
 8000be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bea:	6013      	str	r3, [r2, #0]
	ISR_TIMER_COPY=ISR_TIMER;
 8000bec:	4a43      	ldr	r2, [pc, #268]	; (8000cfc <TIMER_ISR+0x140>)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6013      	str	r3, [r2, #0]

	char user_flage=1;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t user_top=0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
	uint32_t user_pre=1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
	uint8_t  increase=2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	76fb      	strb	r3, [r7, #27]
	uint32_t unit =1000;
 8000c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c08:	617b      	str	r3, [r7, #20]
	if (U == 0){
 8000c0a:	7a7b      	ldrb	r3, [r7, #9]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d10d      	bne.n	8000c2c <TIMER_ISR+0x70>
			unit = 1000;
 8000c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c14:	617b      	str	r3, [r7, #20]
			if (time_ms > 3000)increase = 100;
 8000c16:	897b      	ldrh	r3, [r7, #10]
 8000c18:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d902      	bls.n	8000c26 <TIMER_ISR+0x6a>
 8000c20:	2364      	movs	r3, #100	; 0x64
 8000c22:	76fb      	strb	r3, [r7, #27]
 8000c24:	e032      	b.n	8000c8c <TIMER_ISR+0xd0>
			else increase = 10;
 8000c26:	230a      	movs	r3, #10
 8000c28:	76fb      	strb	r3, [r7, #27]
 8000c2a:	e02f      	b.n	8000c8c <TIMER_ISR+0xd0>
		}
		else {
			unit = 1000000;
 8000c2c:	4b34      	ldr	r3, [pc, #208]	; (8000d00 <TIMER_ISR+0x144>)
 8000c2e:	617b      	str	r3, [r7, #20]
			if (time_ms > 3000)increase = 10;
 8000c30:	897b      	ldrh	r3, [r7, #10]
 8000c32:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d902      	bls.n	8000c40 <TIMER_ISR+0x84>
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	76fb      	strb	r3, [r7, #27]
 8000c3e:	e025      	b.n	8000c8c <TIMER_ISR+0xd0>
			else increase = 5;
 8000c40:	2305      	movs	r3, #5
 8000c42:	76fb      	strb	r3, [r7, #27]
		}

		while(user_flage==1){
 8000c44:	e022      	b.n	8000c8c <TIMER_ISR+0xd0>
			user_top = (clk/unit*time_ms)/( user_pre );
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	897a      	ldrh	r2, [r7, #10]
 8000c50:	fb02 f203 	mul.w	r2, r2, r3
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	623b      	str	r3, [r7, #32]
			if(user_top>=32000){
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000c62:	d310      	bcc.n	8000c86 <TIMER_ISR+0xca>

				if(user_pre>65530){
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d906      	bls.n	8000c7c <TIMER_ISR+0xc0>
					user_pre=65530;
 8000c6e:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8000c72:	61fb      	str	r3, [r7, #28]
					user_flage=0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c7a:	e007      	b.n	8000c8c <TIMER_ISR+0xd0>
				}
				else user_pre+=increase;
 8000c7c:	7efb      	ldrb	r3, [r7, #27]
 8000c7e:	69fa      	ldr	r2, [r7, #28]
 8000c80:	4413      	add	r3, r2
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	e002      	b.n	8000c8c <TIMER_ISR+0xd0>

			}
			else{
				user_flage=0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(user_flage==1){
 8000c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d0d8      	beq.n	8000c46 <TIMER_ISR+0x8a>
			}
		}



	ISR_TIMER->TIMx_CR1 &=~(1<<0);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f023 0201 	bic.w	r2, r3, #1
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	601a      	str	r2, [r3, #0]

	ISR_TIMER->TIMx_CR1  |=(1<<2);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f043 0204 	orr.w	r2, r3, #4
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	601a      	str	r2, [r3, #0]

	ISR_TIMER->TIMx_DIER |=(1<<0);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	f043 0201 	orr.w	r2, r3, #1
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	60da      	str	r2, [r3, #12]

	ISR_TIMER->TIMx_ARR=user_top;//frec peak value
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6a3a      	ldr	r2, [r7, #32]
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c

	ISR_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	1e5a      	subs	r2, r3, #1
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28

	ISR_TIMER->TIMx_EGR |=(1<<0);//		Bit 0 UG: Update generation
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f043 0201 	orr.w	r2, r3, #1
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	615a      	str	r2, [r3, #20]

	ISR_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f043 0201 	orr.w	r2, r3, #1
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	601a      	str	r2, [r3, #0]

	NVIC_TIM3_global_interrupt_Enable;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <TIMER_ISR+0x148>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <TIMER_ISR+0x148>)
 8000ce4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ce8:	6013      	str	r3, [r2, #0]

}
 8000cea:	bf00      	nop
 8000cec:	372c      	adds	r7, #44	; 0x2c
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	20000338 	.word	0x20000338
 8000cfc:	20000344 	.word	0x20000344
 8000d00:	000f4240 	.word	0x000f4240
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 8000d16:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0201 	bic.w	r2, r2, #1
 8000d24:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 8000d26:	78fb      	ldrb	r3, [r7, #3]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d12f      	bne.n	8000d8c <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 8000d2c:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	699a      	ldr	r2, [r3, #24]
 8000d32:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d3a:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	699a      	ldr	r2, [r3, #24]
 8000d42:	4b31      	ldr	r3, [pc, #196]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000d4a:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	699a      	ldr	r2, [r3, #24]
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0208 	orr.w	r2, r2, #8
 8000d5a:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	699a      	ldr	r2, [r3, #24]
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000d6a:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 8000d6c:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6a1a      	ldr	r2, [r3, #32]
 8000d72:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0210 	orr.w	r2, r2, #16
 8000d7a:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6a1a      	ldr	r2, [r3, #32]
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 0201 	orr.w	r2, r2, #1
 8000d8a:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d9a:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dca:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0201 	orr.w	r2, r2, #1
 8000dda:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	695a      	ldr	r2, [r3, #20]
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f042 0201 	orr.w	r2, r2, #1
 8000dea:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SPWM_timer_INIT+0x100>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f042 0201 	orr.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000000 	.word	0x20000000

08000e0c <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <TIM2_IRQHandler+0x34>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <TIM2_IRQHandler+0x34>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0201 	bic.w	r2, r2, #1
 8000e1e:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <TIM2_IRQHandler+0x38>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <TIM2_IRQHandler+0x34>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <TIM2_IRQHandler+0x34>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0201 	bic.w	r2, r2, #1
 8000e34:	601a      	str	r2, [r3, #0]

}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2000001c 	.word	0x2000001c
 8000e44:	20000018 	.word	0x20000018

08000e48 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <TIM3_IRQHandler+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d119      	bne.n	8000e88 <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <TIM3_IRQHandler+0x70>)
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <TIM3_IRQHandler+0x70>)
 8000e5a:	f023 0301 	bic.w	r3, r3, #1
 8000e5e:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <TIM3_IRQHandler+0x74>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d005      	beq.n	8000e74 <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <TIM3_IRQHandler+0x74>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <TIM3_IRQHandler+0x74>)
 8000e70:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 8000e72:	e01c      	b.n	8000eae <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <TIM3_IRQHandler+0x6c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <TIM3_IRQHandler+0x70>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <TIM3_IRQHandler+0x70>)
 8000e80:	f023 0301 	bic.w	r3, r3, #1
 8000e84:	6013      	str	r3, [r2, #0]
}
 8000e86:	e012      	b.n	8000eae <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <TIM3_IRQHandler+0x78>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <TIM3_IRQHandler+0x78>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <TIM3_IRQHandler+0x78>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <TIM3_IRQHandler+0x78>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 0201 	bic.w	r2, r2, #1
 8000ea6:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <TIM3_IRQHandler+0x7c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4798      	blx	r3
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000308 	.word	0x20000308
 8000eb8:	40000400 	.word	0x40000400
 8000ebc:	20000304 	.word	0x20000304
 8000ec0:	20000344 	.word	0x20000344
 8000ec4:	20000338 	.word	0x20000338

08000ec8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <TIM4_IRQHandler+0x24>)
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <TIM4_IRQHandler+0x24>)
 8000ed2:	f023 0301 	bic.w	r3, r3, #1
 8000ed6:	6113      	str	r3, [r2, #16]
	overflowtims++;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <TIM4_IRQHandler+0x28>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <TIM4_IRQHandler+0x28>)
 8000ee2:	801a      	strh	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40000800 	.word	0x40000800
 8000ef0:	20000302 	.word	0x20000302

08000ef4 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 8000ef8:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <TIM1_UP_IRQHandler+0x17c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <TIM1_UP_IRQHandler+0x180>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d911      	bls.n	8000f28 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 8000f04:	4b5c      	ldr	r3, [pc, #368]	; (8001078 <TIM1_UP_IRQHandler+0x184>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
		flage1=0;
 8000f0a:	4b5c      	ldr	r3, [pc, #368]	; (800107c <TIM1_UP_IRQHandler+0x188>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 8000f10:	4b58      	ldr	r3, [pc, #352]	; (8001074 <TIM1_UP_IRQHandler+0x180>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a5a      	ldr	r2, [pc, #360]	; (8001080 <TIM1_UP_IRQHandler+0x18c>)
 8000f16:	7812      	ldrb	r2, [r2, #0]
 8000f18:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f1c:	4b55      	ldr	r3, [pc, #340]	; (8001074 <TIM1_UP_IRQHandler+0x180>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a53      	ldr	r2, [pc, #332]	; (8001070 <TIM1_UP_IRQHandler+0x17c>)
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e018      	b.n	8000f5a <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 8000f28:	4b51      	ldr	r3, [pc, #324]	; (8001070 <TIM1_UP_IRQHandler+0x17c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b63      	cmp	r3, #99	; 0x63
 8000f2e:	d814      	bhi.n	8000f5a <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 8000f30:	4b51      	ldr	r3, [pc, #324]	; (8001078 <TIM1_UP_IRQHandler+0x184>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
		flage1=1;
 8000f36:	4b51      	ldr	r3, [pc, #324]	; (800107c <TIM1_UP_IRQHandler+0x188>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 8000f3c:	4b51      	ldr	r3, [pc, #324]	; (8001084 <TIM1_UP_IRQHandler+0x190>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	f083 0301 	eor.w	r3, r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b4f      	ldr	r3, [pc, #316]	; (8001084 <TIM1_UP_IRQHandler+0x190>)
 8000f48:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 8000f4a:	4b4a      	ldr	r3, [pc, #296]	; (8001074 <TIM1_UP_IRQHandler+0x180>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a4c      	ldr	r2, [pc, #304]	; (8001080 <TIM1_UP_IRQHandler+0x18c>)
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f56:	4a46      	ldr	r2, [pc, #280]	; (8001070 <TIM1_UP_IRQHandler+0x17c>)
 8000f58:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 8000f5a:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <TIM1_UP_IRQHandler+0x190>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d110      	bne.n	8000f84 <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 8000f62:	4b49      	ldr	r3, [pc, #292]	; (8001088 <TIM1_UP_IRQHandler+0x194>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6a1a      	ldr	r2, [r3, #32]
 8000f68:	4b47      	ldr	r3, [pc, #284]	; (8001088 <TIM1_UP_IRQHandler+0x194>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 8000f72:	4b45      	ldr	r3, [pc, #276]	; (8001088 <TIM1_UP_IRQHandler+0x194>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	4b43      	ldr	r3, [pc, #268]	; (8001088 <TIM1_UP_IRQHandler+0x194>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0210 	orr.w	r2, r2, #16
 8000f80:	621a      	str	r2, [r3, #32]
 8000f82:	e013      	b.n	8000fac <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 8000f84:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <TIM1_UP_IRQHandler+0x190>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10f      	bne.n	8000fac <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 8000f8c:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <TIM1_UP_IRQHandler+0x194>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6a1a      	ldr	r2, [r3, #32]
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <TIM1_UP_IRQHandler+0x194>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0210 	bic.w	r2, r2, #16
 8000f9a:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <TIM1_UP_IRQHandler+0x194>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6a1a      	ldr	r2, [r3, #32]
 8000fa2:	4b39      	ldr	r3, [pc, #228]	; (8001088 <TIM1_UP_IRQHandler+0x194>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0201 	orr.w	r2, r2, #1
 8000faa:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <TIM1_UP_IRQHandler+0x188>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d11c      	bne.n	8000fee <TIM1_UP_IRQHandler+0xfa>
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <TIM1_UP_IRQHandler+0x184>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d118      	bne.n	8000fee <TIM1_UP_IRQHandler+0xfa>
		top=c;
 8000fbc:	4b33      	ldr	r3, [pc, #204]	; (800108c <TIM1_UP_IRQHandler+0x198>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a2c      	ldr	r2, [pc, #176]	; (8001074 <TIM1_UP_IRQHandler+0x180>)
 8000fc2:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8000fc4:	4b32      	ldr	r3, [pc, #200]	; (8001090 <TIM1_UP_IRQHandler+0x19c>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	4b29      	ldr	r3, [pc, #164]	; (8001070 <TIM1_UP_IRQHandler+0x17c>)
 8000fca:	6819      	ldr	r1, [r3, #0]
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <TIM1_UP_IRQHandler+0x180>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f7ff fe99 	bl	8000d08 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 8000fd6:	4b27      	ldr	r3, [pc, #156]	; (8001074 <TIM1_UP_IRQHandler+0x180>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a29      	ldr	r2, [pc, #164]	; (8001080 <TIM1_UP_IRQHandler+0x18c>)
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	fbb3 f2f2 	udiv	r2, r3, r2
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <TIM1_UP_IRQHandler+0x17c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a21      	ldr	r2, [pc, #132]	; (8001070 <TIM1_UP_IRQHandler+0x17c>)
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e035      	b.n	800105a <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <TIM1_UP_IRQHandler+0x184>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d129      	bne.n	800104a <TIM1_UP_IRQHandler+0x156>
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <TIM1_UP_IRQHandler+0x188>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d125      	bne.n	800104a <TIM1_UP_IRQHandler+0x156>
		top=c;
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <TIM1_UP_IRQHandler+0x198>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <TIM1_UP_IRQHandler+0x180>)
 8001004:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <TIM1_UP_IRQHandler+0x17c>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <TIM1_UP_IRQHandler+0x180>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	491c      	ldr	r1, [pc, #112]	; (8001080 <TIM1_UP_IRQHandler+0x18c>)
 8001010:	7809      	ldrb	r1, [r1, #0]
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	4a15      	ldr	r2, [pc, #84]	; (8001070 <TIM1_UP_IRQHandler+0x17c>)
 800101a:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <TIM1_UP_IRQHandler+0x19c>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <TIM1_UP_IRQHandler+0x17c>)
 8001022:	6819      	ldr	r1, [r3, #0]
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <TIM1_UP_IRQHandler+0x180>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	f7ff fe6d 	bl	8000d08 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <TIM1_UP_IRQHandler+0x180>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a13      	ldr	r2, [pc, #76]	; (8001080 <TIM1_UP_IRQHandler+0x18c>)
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	fbb3 f2f2 	udiv	r2, r3, r2
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <TIM1_UP_IRQHandler+0x17c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d10b      	bne.n	800105a <TIM1_UP_IRQHandler+0x166>
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <TIM1_UP_IRQHandler+0x17c>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	e007      	b.n	800105a <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <TIM1_UP_IRQHandler+0x194>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <TIM1_UP_IRQHandler+0x194>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <TIM1_UP_IRQHandler+0x194>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <TIM1_UP_IRQHandler+0x194>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0201 	bic.w	r2, r2, #1
 8001068:	611a      	str	r2, [r3, #16]
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000014 	.word	0x20000014
 8001074:	20000008 	.word	0x20000008
 8001078:	20000300 	.word	0x20000300
 800107c:	20000004 	.word	0x20000004
 8001080:	20000340 	.word	0x20000340
 8001084:	20000005 	.word	0x20000005
 8001088:	20000000 	.word	0x20000000
 800108c:	20000010 	.word	0x20000010
 8001090:	2000000c 	.word	0x2000000c

08001094 <sendByte>:

//=====================================================

//=====================================================

void sendByte(uint8_t byte) {
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i < 8; i++){
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e02c      	b.n	80010fe <sendByte+0x6a>

		//send bit
		if (((byte >> i) & 1)) {
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	fa42 f303 	asr.w	r3, r2, r3
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d015      	beq.n	80010e0 <sendByte+0x4c>
			WS2812b_LED_PORT->GPIOx_ODR |=(1<<WS2812b_LED_PIN);// time --> 800 ns high
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <sendByte+0x7c>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	4a15      	ldr	r2, [pc, #84]	; (8001110 <sendByte+0x7c>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	60d3      	str	r3, [r2, #12]
			for(int i=0;i<1;i++);
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	e002      	b.n	80010cc <sendByte+0x38>
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	3301      	adds	r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	ddf9      	ble.n	80010c6 <sendByte+0x32>
			WS2812b_LED_PORT->GPIOx_ODR &=~(1<<WS2812b_LED_PIN);// time --> 880 ns low
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <sendByte+0x7c>)
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <sendByte+0x7c>)
 80010d8:	f023 0302 	bic.w	r3, r3, #2
 80010dc:	60d3      	str	r3, [r2, #12]
 80010de:	e00b      	b.n	80010f8 <sendByte+0x64>
		} else {
			WS2812b_LED_PORT->GPIOx_ODR |=(1<<WS2812b_LED_PIN);// time --> 320 ns high
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <sendByte+0x7c>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <sendByte+0x7c>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	60d3      	str	r3, [r2, #12]
			WS2812b_LED_PORT->GPIOx_ODR &=~(1<<WS2812b_LED_PIN);// time --> 880 ns low
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <sendByte+0x7c>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <sendByte+0x7c>)
 80010f2:	f023 0302 	bic.w	r3, r3, #2
 80010f6:	60d3      	str	r3, [r2, #12]
	for (int i = 0; i < 8; i++){
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b07      	cmp	r3, #7
 8001102:	ddcf      	ble.n	80010a4 <sendByte+0x10>
		}

	}

}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40010800 	.word	0x40010800

08001114 <sendColor>:

void sendColor(uint8_t r, uint8_t g, uint8_t b) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	460b      	mov	r3, r1
 8001120:	71bb      	strb	r3, [r7, #6]
 8001122:	4613      	mov	r3, r2
 8001124:	717b      	strb	r3, [r7, #5]
	sendByte(g);
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ffb3 	bl	8001094 <sendByte>
	sendByte(r);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ffaf 	bl	8001094 <sendByte>
	sendByte(b);
 8001136:	797b      	ldrb	r3, [r7, #5]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffab 	bl	8001094 <sendByte>
	delay(5, U_us, clk);
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <sendColor+0x3c>)
 8001140:	2101      	movs	r1, #1
 8001142:	4804      	ldr	r0, [pc, #16]	; (8001154 <sendColor+0x40>)
 8001144:	f7ff fc5a 	bl	80009fc <delay>
	//time --> 40us
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	02255100 	.word	0x02255100
 8001154:	40a00000 	.word	0x40a00000

08001158 <WS2812b_LED_INIT>:

//===============================================================
void WS2812b_LED_INIT(){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 800115c:	2100      	movs	r1, #0
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f898 	bl	8001294 <MCAL_speed_init>
	pinmode(WS2812b_LED_PORT, WS2812b_LED_PIN,GPIO_MODE_OUTPUT_push_pull_Speed50);
 8001164:	2203      	movs	r2, #3
 8001166:	2101      	movs	r1, #1
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <WS2812b_LED_INIT+0x24>)
 800116a:	f7ff fb51 	bl	8000810 <pinmode>
	pinmode(WS2812b_SENSOR_PORT,WS2812b_SENSOR_PIN,GPIO_MODE_INPUT_PU);
 800116e:	2218      	movs	r2, #24
 8001170:	2104      	movs	r1, #4
 8001172:	4802      	ldr	r0, [pc, #8]	; (800117c <WS2812b_LED_INIT+0x24>)
 8001174:	f7ff fb4c 	bl	8000810 <pinmode>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40010800 	.word	0x40010800

08001180 <WS2812b_print_srting>:
//===============================================================
void WS2812b_print_srting(uint8_t (*(POV_STRING[]))[8][5],uint8_t color[][3]){
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	if(!READ_PIN(WS2812b_SENSOR_PORT, WS2812b_SENSOR_PIN))
 800118a:	2104      	movs	r1, #4
 800118c:	483d      	ldr	r0, [pc, #244]	; (8001284 <WS2812b_print_srting+0x104>)
 800118e:	f7ff fc21 	bl	80009d4 <READ_PIN>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d15a      	bne.n	800124e <WS2812b_print_srting+0xce>
	{
		//=========PRINT===========
		while( (*POV_STRING[INDEX])!=0)
 8001198:	e050      	b.n	800123c <WS2812b_print_srting+0xbc>
		{
			for(int j=0;j<5;j++)
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	e044      	b.n	800122a <WS2812b_print_srting+0xaa>
			{
				for (int i = 0; i < 8; i++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	e036      	b.n	8001214 <WS2812b_print_srting+0x94>
				{
					if((*POV_STRING[INDEX])[i][j]){
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <WS2812b_print_srting+0x108>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	4413      	add	r3, r2
 80011b0:	6819      	ldr	r1, [r3, #0]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	18ca      	adds	r2, r1, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d01e      	beq.n	8001204 <WS2812b_print_srting+0x84>
						sendColor(color[INDEX][0],color[INDEX][1],color[INDEX][2]);//time --> 40us
 80011c6:	4b30      	ldr	r3, [pc, #192]	; (8001288 <WS2812b_print_srting+0x108>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	7818      	ldrb	r0, [r3, #0]
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <WS2812b_print_srting+0x108>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	7859      	ldrb	r1, [r3, #1]
 80011ea:	4b27      	ldr	r3, [pc, #156]	; (8001288 <WS2812b_print_srting+0x108>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	789b      	ldrb	r3, [r3, #2]
 80011fc:	461a      	mov	r2, r3
 80011fe:	f7ff ff89 	bl	8001114 <sendColor>
 8001202:	e004      	b.n	800120e <WS2812b_print_srting+0x8e>
					}
					else{
						sendColor(0,0,0);//time --> 40us
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff ff83 	bl	8001114 <sendColor>
				for (int i = 0; i < 8; i++)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	3301      	adds	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2b07      	cmp	r3, #7
 8001218:	ddc5      	ble.n	80011a6 <WS2812b_print_srting+0x26>
					}

				}//time --> 450us
				delay(TIME_DELAY, U_us, clk);//note time mine 55 us
 800121a:	4a1c      	ldr	r2, [pc, #112]	; (800128c <WS2812b_print_srting+0x10c>)
 800121c:	2101      	movs	r1, #1
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <WS2812b_print_srting+0x110>)
 8001220:	f7ff fbec 	bl	80009fc <delay>
			for(int j=0;j<5;j++)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3301      	adds	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2b04      	cmp	r3, #4
 800122e:	ddb7      	ble.n	80011a0 <WS2812b_print_srting+0x20>
			}
			INDEX++;
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <WS2812b_print_srting+0x108>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <WS2812b_print_srting+0x108>)
 800123a:	701a      	strb	r2, [r3, #0]
		while( (*POV_STRING[INDEX])!=0)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <WS2812b_print_srting+0x108>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1a6      	bne.n	800119a <WS2812b_print_srting+0x1a>
 800124c:	e012      	b.n	8001274 <WS2812b_print_srting+0xf4>
		}
	}
	else
	{
		for (int i = 0; i < 8; i++)
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e007      	b.n	8001264 <WS2812b_print_srting+0xe4>
		{
			sendColor(0,0,0);//time --> 40us
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff ff5b 	bl	8001114 <sendColor>
		for (int i = 0; i < 8; i++)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3301      	adds	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b07      	cmp	r3, #7
 8001268:	ddf4      	ble.n	8001254 <WS2812b_print_srting+0xd4>
		}
		delay(TIME_DELAY, U_us, clk);
 800126a:	4a08      	ldr	r2, [pc, #32]	; (800128c <WS2812b_print_srting+0x10c>)
 800126c:	2101      	movs	r1, #1
 800126e:	4808      	ldr	r0, [pc, #32]	; (8001290 <WS2812b_print_srting+0x110>)
 8001270:	f7ff fbc4 	bl	80009fc <delay>
	}
	INDEX=0;
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <WS2812b_print_srting+0x108>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]

}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40010800 	.word	0x40010800
 8001288:	20000309 	.word	0x20000309
 800128c:	02255100 	.word	0x02255100
 8001290:	42700000 	.word	0x42700000

08001294 <MCAL_speed_init>:
 *      Author: mo
 */

#include "stm32_speed_DRIVER.h"

void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	460a      	mov	r2, r1
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	4613      	mov	r3, r2
 80012a2:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d139      	bne.n	800131e <MCAL_speed_init+0x8a>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d175      	bne.n	800139c <MCAL_speed_init+0x108>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 80012b0:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <MCAL_speed_init+0x114>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4a3c      	ldr	r2, [pc, #240]	; (80013a8 <MCAL_speed_init+0x114>)
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 80012bc:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <MCAL_speed_init+0x114>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a39      	ldr	r2, [pc, #228]	; (80013a8 <MCAL_speed_init+0x114>)
 80012c2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80012c6:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 80012c8:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <MCAL_speed_init+0x114>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a36      	ldr	r2, [pc, #216]	; (80013a8 <MCAL_speed_init+0x114>)
 80012ce:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80012d2:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 80012d4:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <MCAL_speed_init+0x114>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <MCAL_speed_init+0x114>)
 80012da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012de:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MCAL_speed_init+0x114>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <MCAL_speed_init+0x114>)
 80012e6:	f023 0303 	bic.w	r3, r3, #3
 80012ea:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MCAL_speed_init+0x114>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4a2d      	ldr	r2, [pc, #180]	; (80013a8 <MCAL_speed_init+0x114>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 80012f8:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <MCAL_speed_init+0x114>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4a2a      	ldr	r2, [pc, #168]	; (80013a8 <MCAL_speed_init+0x114>)
 80012fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001302:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <MCAL_speed_init+0x114>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <MCAL_speed_init+0x114>)
 800130a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800130e:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <MCAL_speed_init+0x114>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <MCAL_speed_init+0x114>)
 8001316:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800131a:	6053      	str	r3, [r2, #4]

		}
	}


}
 800131c:	e03e      	b.n	800139c <MCAL_speed_init+0x108>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d13b      	bne.n	800139c <MCAL_speed_init+0x108>
			RCC->RCC_CR &=~(1<<18);
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <MCAL_speed_init+0x114>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <MCAL_speed_init+0x114>)
 800132a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132e:	6013      	str	r3, [r2, #0]
			RCC->RCC_CR|=(1<<16);
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MCAL_speed_init+0x114>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <MCAL_speed_init+0x114>)
 8001336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR|=(1<<16);
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MCAL_speed_init+0x114>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <MCAL_speed_init+0x114>)
 8001342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001346:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MCAL_speed_init+0x114>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <MCAL_speed_init+0x114>)
 800134e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001352:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MCAL_speed_init+0x114>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <MCAL_speed_init+0x114>)
 800135a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135e:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MCAL_speed_init+0x114>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <MCAL_speed_init+0x114>)
 8001366:	f023 0303 	bic.w	r3, r3, #3
 800136a:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MCAL_speed_init+0x114>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <MCAL_speed_init+0x114>)
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MCAL_speed_init+0x114>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <MCAL_speed_init+0x114>)
 800137e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001382:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MCAL_speed_init+0x114>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <MCAL_speed_init+0x114>)
 800138a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800138e:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <MCAL_speed_init+0x114>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <MCAL_speed_init+0x114>)
 8001396:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800139a:	6053      	str	r3, [r2, #4]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000

080013ac <EXTI0_IRQHandler>:
	Enable_NVIC(pin);
}



void EXTI0_IRQHandler(void){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <EXTI0_IRQHandler+0x20>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	4a05      	ldr	r2, [pc, #20]	; (80013cc <EXTI0_IRQHandler+0x20>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0](ARR_INTERRUPT_TRACK,0);
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <EXTI0_IRQHandler+0x24>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2100      	movs	r1, #0
 80013c2:	4804      	ldr	r0, [pc, #16]	; (80013d4 <EXTI0_IRQHandler+0x28>)
 80013c4:	4798      	blx	r3
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40010400 	.word	0x40010400
 80013d0:	20000348 	.word	0x20000348
 80013d4:	20000384 	.word	0x20000384

080013d8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <EXTI1_IRQHandler+0x20>)
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <EXTI1_IRQHandler+0x20>)
 80013e2:	f043 0302 	orr.w	r3, r3, #2
 80013e6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1](ARR_INTERRUPT_TRACK,1);
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <EXTI1_IRQHandler+0x24>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2101      	movs	r1, #1
 80013ee:	4804      	ldr	r0, [pc, #16]	; (8001400 <EXTI1_IRQHandler+0x28>)
 80013f0:	4798      	blx	r3

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40010400 	.word	0x40010400
 80013fc:	20000348 	.word	0x20000348
 8001400:	20000384 	.word	0x20000384

08001404 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <EXTI2_IRQHandler+0x20>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	4a05      	ldr	r2, [pc, #20]	; (8001424 <EXTI2_IRQHandler+0x20>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2](ARR_INTERRUPT_TRACK,2);
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <EXTI2_IRQHandler+0x24>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2102      	movs	r1, #2
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <EXTI2_IRQHandler+0x28>)
 800141c:	4798      	blx	r3
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40010400 	.word	0x40010400
 8001428:	20000348 	.word	0x20000348
 800142c:	20000384 	.word	0x20000384

08001430 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <EXTI3_IRQHandler+0x20>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	4a05      	ldr	r2, [pc, #20]	; (8001450 <EXTI3_IRQHandler+0x20>)
 800143a:	f043 0308 	orr.w	r3, r3, #8
 800143e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3](ARR_INTERRUPT_TRACK,3);
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <EXTI3_IRQHandler+0x24>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2103      	movs	r1, #3
 8001446:	4804      	ldr	r0, [pc, #16]	; (8001458 <EXTI3_IRQHandler+0x28>)
 8001448:	4798      	blx	r3
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40010400 	.word	0x40010400
 8001454:	20000348 	.word	0x20000348
 8001458:	20000384 	.word	0x20000384

0800145c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <EXTI4_IRQHandler+0x20>)
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <EXTI4_IRQHandler+0x20>)
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4](ARR_INTERRUPT_TRACK,4);
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <EXTI4_IRQHandler+0x24>)
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2104      	movs	r1, #4
 8001472:	4804      	ldr	r0, [pc, #16]	; (8001484 <EXTI4_IRQHandler+0x28>)
 8001474:	4798      	blx	r3
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40010400 	.word	0x40010400
 8001480:	20000348 	.word	0x20000348
 8001484:	20000384 	.word	0x20000384

08001488 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5](ARR_INTERRUPT_TRACK,5);  }
 800148c:	4b2b      	ldr	r3, [pc, #172]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	f003 0320 	and.w	r3, r3, #32
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00a      	beq.n	80014ae <EXTI9_5_IRQHandler+0x26>
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	4a27      	ldr	r2, [pc, #156]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 800149e:	f043 0320 	orr.w	r3, r3, #32
 80014a2:	6153      	str	r3, [r2, #20]
 80014a4:	4b26      	ldr	r3, [pc, #152]	; (8001540 <EXTI9_5_IRQHandler+0xb8>)
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	2105      	movs	r1, #5
 80014aa:	4826      	ldr	r0, [pc, #152]	; (8001544 <EXTI9_5_IRQHandler+0xbc>)
 80014ac:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6](ARR_INTERRUPT_TRACK,6);  }
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00a      	beq.n	80014d0 <EXTI9_5_IRQHandler+0x48>
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	4a1f      	ldr	r2, [pc, #124]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 80014c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c4:	6153      	str	r3, [r2, #20]
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <EXTI9_5_IRQHandler+0xb8>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2106      	movs	r1, #6
 80014cc:	481d      	ldr	r0, [pc, #116]	; (8001544 <EXTI9_5_IRQHandler+0xbc>)
 80014ce:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7](ARR_INTERRUPT_TRACK,7);  }
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00a      	beq.n	80014f2 <EXTI9_5_IRQHandler+0x6a>
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	4a16      	ldr	r2, [pc, #88]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 80014e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e6:	6153      	str	r3, [r2, #20]
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <EXTI9_5_IRQHandler+0xb8>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	2107      	movs	r1, #7
 80014ee:	4815      	ldr	r0, [pc, #84]	; (8001544 <EXTI9_5_IRQHandler+0xbc>)
 80014f0:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8](ARR_INTERRUPT_TRACK,8);  }
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00a      	beq.n	8001514 <EXTI9_5_IRQHandler+0x8c>
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6153      	str	r3, [r2, #20]
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <EXTI9_5_IRQHandler+0xb8>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	2108      	movs	r1, #8
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <EXTI9_5_IRQHandler+0xbc>)
 8001512:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9](ARR_INTERRUPT_TRACK,9);  }
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00a      	beq.n	8001536 <EXTI9_5_IRQHandler+0xae>
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	4a05      	ldr	r2, [pc, #20]	; (800153c <EXTI9_5_IRQHandler+0xb4>)
 8001526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152a:	6153      	str	r3, [r2, #20]
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <EXTI9_5_IRQHandler+0xb8>)
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	2109      	movs	r1, #9
 8001532:	4804      	ldr	r0, [pc, #16]	; (8001544 <EXTI9_5_IRQHandler+0xbc>)
 8001534:	4798      	blx	r3
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40010400 	.word	0x40010400
 8001540:	20000348 	.word	0x20000348
 8001544:	20000384 	.word	0x20000384

08001548 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10](ARR_INTERRUPT_TRACK,10);  }
 800154c:	4b33      	ldr	r3, [pc, #204]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00a      	beq.n	800156e <EXTI15_10_IRQHandler+0x26>
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	4a2f      	ldr	r2, [pc, #188]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001562:	6153      	str	r3, [r2, #20]
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <EXTI15_10_IRQHandler+0xd8>)
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	210a      	movs	r1, #10
 800156a:	482e      	ldr	r0, [pc, #184]	; (8001624 <EXTI15_10_IRQHandler+0xdc>)
 800156c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11](ARR_INTERRUPT_TRACK,11);  }
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00a      	beq.n	8001590 <EXTI15_10_IRQHandler+0x48>
 800157a:	4b28      	ldr	r3, [pc, #160]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	4a27      	ldr	r2, [pc, #156]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 8001580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001584:	6153      	str	r3, [r2, #20]
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <EXTI15_10_IRQHandler+0xd8>)
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	210b      	movs	r1, #11
 800158c:	4825      	ldr	r0, [pc, #148]	; (8001624 <EXTI15_10_IRQHandler+0xdc>)
 800158e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12](ARR_INTERRUPT_TRACK,12);  }
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00a      	beq.n	80015b2 <EXTI15_10_IRQHandler+0x6a>
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	4a1e      	ldr	r2, [pc, #120]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 80015a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a6:	6153      	str	r3, [r2, #20]
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <EXTI15_10_IRQHandler+0xd8>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	210c      	movs	r1, #12
 80015ae:	481d      	ldr	r0, [pc, #116]	; (8001624 <EXTI15_10_IRQHandler+0xdc>)
 80015b0:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13](ARR_INTERRUPT_TRACK,13);  }
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00a      	beq.n	80015d4 <EXTI15_10_IRQHandler+0x8c>
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4a16      	ldr	r2, [pc, #88]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 80015c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c8:	6153      	str	r3, [r2, #20]
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <EXTI15_10_IRQHandler+0xd8>)
 80015cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ce:	210d      	movs	r1, #13
 80015d0:	4814      	ldr	r0, [pc, #80]	; (8001624 <EXTI15_10_IRQHandler+0xdc>)
 80015d2:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14](ARR_INTERRUPT_TRACK,14);  }
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00a      	beq.n	80015f6 <EXTI15_10_IRQHandler+0xae>
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 80015e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ea:	6153      	str	r3, [r2, #20]
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <EXTI15_10_IRQHandler+0xd8>)
 80015ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f0:	210e      	movs	r1, #14
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <EXTI15_10_IRQHandler+0xdc>)
 80015f4:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15](ARR_INTERRUPT_TRACK,15);  }
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00a      	beq.n	8001618 <EXTI15_10_IRQHandler+0xd0>
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <EXTI15_10_IRQHandler+0xd4>)
 8001608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800160c:	6153      	str	r3, [r2, #20]
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <EXTI15_10_IRQHandler+0xd8>)
 8001610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001612:	210f      	movs	r1, #15
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <EXTI15_10_IRQHandler+0xdc>)
 8001616:	4798      	blx	r3

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40010400 	.word	0x40010400
 8001620:	20000348 	.word	0x20000348
 8001624:	20000384 	.word	0x20000384

08001628 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	//slave only todo
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
	//slave only todo
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <USART_SEND>:
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );


}
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	0b1b      	lsrs	r3, r3, #12
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	d106      	bne.n	8001666 <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 8001664:	e004      	b.n	8001670 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	605a      	str	r2, [r3, #4]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
	...

0800167c <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8001682:	4b56      	ldr	r3, [pc, #344]	; (80017dc <USART1_IRQHandler+0x160>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	09db      	lsrs	r3, r3, #7
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b01      	cmp	r3, #1
 8001690:	d122      	bne.n	80016d8 <USART1_IRQHandler+0x5c>
 8001692:	4b52      	ldr	r3, [pc, #328]	; (80017dc <USART1_IRQHandler+0x160>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	09db      	lsrs	r3, r3, #7
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d11a      	bne.n	80016d8 <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 80016a2:	4b4f      	ldr	r3, [pc, #316]	; (80017e0 <USART1_IRQHandler+0x164>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00d      	beq.n	80016c8 <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 80016ac:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <USART1_IRQHandler+0x160>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b4b      	ldr	r3, [pc, #300]	; (80017e0 <USART1_IRQHandler+0x164>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	4610      	mov	r0, r2
 80016b8:	f7ff ffc2 	bl	8001640 <USART_SEND>
			++arr_data[0];
 80016bc:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <USART1_IRQHandler+0x164>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a47      	ldr	r2, [pc, #284]	; (80017e0 <USART1_IRQHandler+0x164>)
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e007      	b.n	80016d8 <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 80016c8:	4b44      	ldr	r3, [pc, #272]	; (80017dc <USART1_IRQHandler+0x160>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	4b43      	ldr	r3, [pc, #268]	; (80017dc <USART1_IRQHandler+0x160>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d6:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 80016d8:	4b40      	ldr	r3, [pc, #256]	; (80017dc <USART1_IRQHandler+0x160>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d166      	bne.n	80017b6 <USART1_IRQHandler+0x13a>
 80016e8:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <USART1_IRQHandler+0x160>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d15e      	bne.n	80017b6 <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 80016f8:	4b38      	ldr	r3, [pc, #224]	; (80017dc <USART1_IRQHandler+0x160>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	0b1b      	lsrs	r3, r3, #12
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d117      	bne.n	8001738 <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8001708:	4b34      	ldr	r3, [pc, #208]	; (80017dc <USART1_IRQHandler+0x160>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	0a9b      	lsrs	r3, r3, #10
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d108      	bne.n	800172a <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8001718:	4b30      	ldr	r3, [pc, #192]	; (80017dc <USART1_IRQHandler+0x160>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	b29b      	uxth	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	b29a      	uxth	r2, r3
 8001724:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <USART1_IRQHandler+0x168>)
 8001726:	801a      	strh	r2, [r3, #0]
 8001728:	e020      	b.n	800176c <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <USART1_IRQHandler+0x160>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	b29a      	uxth	r2, r3
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <USART1_IRQHandler+0x168>)
 8001734:	801a      	strh	r2, [r3, #0]
 8001736:	e019      	b.n	800176c <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <USART1_IRQHandler+0x160>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	0a9b      	lsrs	r3, r3, #10
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b01      	cmp	r3, #1
 8001746:	d109      	bne.n	800175c <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <USART1_IRQHandler+0x160>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	b29b      	uxth	r3, r3
 8001750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <USART1_IRQHandler+0x168>)
 8001758:	801a      	strh	r2, [r3, #0]
 800175a:	e007      	b.n	800176c <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <USART1_IRQHandler+0x160>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	b29b      	uxth	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <USART1_IRQHandler+0x168>)
 800176a:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <USART1_IRQHandler+0x16c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	e002      	b.n	800177e <USART1_IRQHandler+0x102>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3301      	adds	r3, #1
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001784:	4293      	cmp	r3, r2
 8001786:	ddf7      	ble.n	8001778 <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <USART1_IRQHandler+0x160>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <USART1_IRQHandler+0x160>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0220 	bic.w	r2, r2, #32
 8001796:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <USART1_IRQHandler+0x160>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <USART1_IRQHandler+0x170>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <USART1_IRQHandler+0x160>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <USART1_IRQHandler+0x160>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0220 	bic.w	r2, r2, #32
 80017b4:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <USART1_IRQHandler+0x160>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <USART1_IRQHandler+0x170>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <USART1_IRQHandler+0x160>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <USART1_IRQHandler+0x160>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0220 	bic.w	r2, r2, #32
 80017d2:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200003a4 	.word	0x200003a4
 80017e0:	200003b8 	.word	0x200003b8
 80017e4:	200003b0 	.word	0x200003b0
 80017e8:	200003c4 	.word	0x200003c4
 80017ec:	40013800 	.word	0x40013800

080017f0 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80017f6:	4b56      	ldr	r3, [pc, #344]	; (8001950 <USART2_IRQHandler+0x160>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	09db      	lsrs	r3, r3, #7
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b01      	cmp	r3, #1
 8001804:	d122      	bne.n	800184c <USART2_IRQHandler+0x5c>
 8001806:	4b52      	ldr	r3, [pc, #328]	; (8001950 <USART2_IRQHandler+0x160>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	09db      	lsrs	r3, r3, #7
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d11a      	bne.n	800184c <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 8001816:	4b4f      	ldr	r3, [pc, #316]	; (8001954 <USART2_IRQHandler+0x164>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00d      	beq.n	800183c <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 8001820:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <USART2_IRQHandler+0x160>)
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <USART2_IRQHandler+0x164>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f7ff ff08 	bl	8001640 <USART_SEND>
			++arr_data[1];
 8001830:	4b48      	ldr	r3, [pc, #288]	; (8001954 <USART2_IRQHandler+0x164>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	3301      	adds	r3, #1
 8001836:	4a47      	ldr	r2, [pc, #284]	; (8001954 <USART2_IRQHandler+0x164>)
 8001838:	6053      	str	r3, [r2, #4]
 800183a:	e007      	b.n	800184c <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 800183c:	4b44      	ldr	r3, [pc, #272]	; (8001950 <USART2_IRQHandler+0x160>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	4b43      	ldr	r3, [pc, #268]	; (8001950 <USART2_IRQHandler+0x160>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800184a:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 800184c:	4b40      	ldr	r3, [pc, #256]	; (8001950 <USART2_IRQHandler+0x160>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b01      	cmp	r3, #1
 800185a:	d166      	bne.n	800192a <USART2_IRQHandler+0x13a>
 800185c:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <USART2_IRQHandler+0x160>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d15e      	bne.n	800192a <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 800186c:	4b38      	ldr	r3, [pc, #224]	; (8001950 <USART2_IRQHandler+0x160>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	0b1b      	lsrs	r3, r3, #12
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d117      	bne.n	80018ac <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 800187c:	4b34      	ldr	r3, [pc, #208]	; (8001950 <USART2_IRQHandler+0x160>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	0a9b      	lsrs	r3, r3, #10
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d108      	bne.n	800189e <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <USART2_IRQHandler+0x160>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	b29b      	uxth	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	b29a      	uxth	r2, r3
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <USART2_IRQHandler+0x168>)
 800189a:	805a      	strh	r2, [r3, #2]
 800189c:	e020      	b.n	80018e0 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <USART2_IRQHandler+0x160>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <USART2_IRQHandler+0x168>)
 80018a8:	805a      	strh	r2, [r3, #2]
 80018aa:	e019      	b.n	80018e0 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <USART2_IRQHandler+0x160>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	0a9b      	lsrs	r3, r3, #10
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d109      	bne.n	80018d0 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 80018bc:	4b24      	ldr	r3, [pc, #144]	; (8001950 <USART2_IRQHandler+0x160>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	4b23      	ldr	r3, [pc, #140]	; (8001958 <USART2_IRQHandler+0x168>)
 80018cc:	805a      	strh	r2, [r3, #2]
 80018ce:	e007      	b.n	80018e0 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 80018d0:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <USART2_IRQHandler+0x160>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <USART2_IRQHandler+0x168>)
 80018de:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <USART2_IRQHandler+0x16c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	e002      	b.n	80018f2 <USART2_IRQHandler+0x102>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3301      	adds	r3, #1
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018f8:	4293      	cmp	r3, r2
 80018fa:	ddf7      	ble.n	80018ec <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <USART2_IRQHandler+0x160>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <USART2_IRQHandler+0x160>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f022 0220 	bic.w	r2, r2, #32
 800190a:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <USART2_IRQHandler+0x160>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <USART2_IRQHandler+0x170>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	b29b      	uxth	r3, r3
 8001918:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <USART2_IRQHandler+0x160>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <USART2_IRQHandler+0x160>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f022 0220 	bic.w	r2, r2, #32
 8001928:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <USART2_IRQHandler+0x160>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <USART2_IRQHandler+0x170>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	b29b      	uxth	r3, r3
 8001936:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <USART2_IRQHandler+0x160>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <USART2_IRQHandler+0x160>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f022 0220 	bic.w	r2, r2, #32
 8001946:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200003a4 	.word	0x200003a4
 8001954:	200003b8 	.word	0x200003b8
 8001958:	200003b0 	.word	0x200003b0
 800195c:	200003c4 	.word	0x200003c4
 8001960:	40004400 	.word	0x40004400

08001964 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800196a:	4b56      	ldr	r3, [pc, #344]	; (8001ac4 <USART3_IRQHandler+0x160>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	09db      	lsrs	r3, r3, #7
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d122      	bne.n	80019c0 <USART3_IRQHandler+0x5c>
 800197a:	4b52      	ldr	r3, [pc, #328]	; (8001ac4 <USART3_IRQHandler+0x160>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	09db      	lsrs	r3, r3, #7
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b01      	cmp	r3, #1
 8001988:	d11a      	bne.n	80019c0 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 800198a:	4b4f      	ldr	r3, [pc, #316]	; (8001ac8 <USART3_IRQHandler+0x164>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00d      	beq.n	80019b0 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 8001994:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4b4b      	ldr	r3, [pc, #300]	; (8001ac8 <USART3_IRQHandler+0x164>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f7ff fe4e 	bl	8001640 <USART_SEND>
			++arr_data[2];
 80019a4:	4b48      	ldr	r3, [pc, #288]	; (8001ac8 <USART3_IRQHandler+0x164>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	3301      	adds	r3, #1
 80019aa:	4a47      	ldr	r2, [pc, #284]	; (8001ac8 <USART3_IRQHandler+0x164>)
 80019ac:	6093      	str	r3, [r2, #8]
 80019ae:	e007      	b.n	80019c0 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 80019b0:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <USART3_IRQHandler+0x160>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <USART3_IRQHandler+0x160>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019be:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 80019c0:	4b40      	ldr	r3, [pc, #256]	; (8001ac4 <USART3_IRQHandler+0x160>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d166      	bne.n	8001a9e <USART3_IRQHandler+0x13a>
 80019d0:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <USART3_IRQHandler+0x160>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d15e      	bne.n	8001a9e <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 80019e0:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <USART3_IRQHandler+0x160>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	0b1b      	lsrs	r3, r3, #12
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d117      	bne.n	8001a20 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 80019f0:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <USART3_IRQHandler+0x160>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	0a9b      	lsrs	r3, r3, #10
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8001a00:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <USART3_IRQHandler+0x168>)
 8001a0e:	809a      	strh	r2, [r3, #4]
 8001a10:	e020      	b.n	8001a54 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 8001a12:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <USART3_IRQHandler+0x168>)
 8001a1c:	809a      	strh	r2, [r3, #4]
 8001a1e:	e019      	b.n	8001a54 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8001a20:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	0a9b      	lsrs	r3, r3, #10
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d109      	bne.n	8001a44 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <USART3_IRQHandler+0x168>)
 8001a40:	809a      	strh	r2, [r3, #4]
 8001a42:	e007      	b.n	8001a54 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <USART3_IRQHandler+0x168>)
 8001a52:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <USART3_IRQHandler+0x16c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	e002      	b.n	8001a66 <USART3_IRQHandler+0x102>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3301      	adds	r3, #1
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	ddf7      	ble.n	8001a60 <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f022 0220 	bic.w	r2, r2, #32
 8001a7e:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <USART3_IRQHandler+0x170>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f022 0220 	bic.w	r2, r2, #32
 8001a9c:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <USART3_IRQHandler+0x170>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <USART3_IRQHandler+0x160>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f022 0220 	bic.w	r2, r2, #32
 8001aba:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200003a4 	.word	0x200003a4
 8001ac8:	200003b8 	.word	0x200003b8
 8001acc:	200003b0 	.word	0x200003b0
 8001ad0:	200003c4 	.word	0x200003c4
 8001ad4:	40004800 	.word	0x40004800

08001ad8 <CLOCK>:
uint8_t color[][3]={{255,0,0},{0,0,0},{227,100,80},{0,0,0},{227,255,80},{0,0,0},{0,0,255}
,{0,0,0},{0,255,255},{0,0,0},{227,0,255},{0,0,0},{0,255,255},{0,0,0},{0,0,255},{0,0,0},{0,0,0},{255,0,255},{0,0,0},{0,0,255}};

static uint8_t (*(NUMBERS[]))[8][5]={O,N_1,N_2,N_3,N_4,N_5,N_6,N_7,N_8,N_9};
uint8_t second=0,second_ONS,second_TENS ,minute=50,minute_ONS,minute_TENS, hour=12,hour_ONS,hour_TENS ;
void CLOCK(){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af02      	add	r7, sp, #8
	second++;
 8001ade:	4b54      	ldr	r3, [pc, #336]	; (8001c30 <CLOCK+0x158>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <CLOCK+0x158>)
 8001ae8:	701a      	strb	r2, [r3, #0]
	if(second>=60){
 8001aea:	4b51      	ldr	r3, [pc, #324]	; (8001c30 <CLOCK+0x158>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b3b      	cmp	r3, #59	; 0x3b
 8001af0:	d908      	bls.n	8001b04 <CLOCK+0x2c>
		minute++;
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <CLOCK+0x15c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <CLOCK+0x15c>)
 8001afc:	701a      	strb	r2, [r3, #0]
		second=0;
 8001afe:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <CLOCK+0x158>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
	}
	if(minute>=60){
 8001b04:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <CLOCK+0x15c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b3b      	cmp	r3, #59	; 0x3b
 8001b0a:	d908      	bls.n	8001b1e <CLOCK+0x46>
		hour++;
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <CLOCK+0x160>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b48      	ldr	r3, [pc, #288]	; (8001c38 <CLOCK+0x160>)
 8001b16:	701a      	strb	r2, [r3, #0]
		minute=0;
 8001b18:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <CLOCK+0x15c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
	}
	if(hour>12){
 8001b1e:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <CLOCK+0x160>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d902      	bls.n	8001b2c <CLOCK+0x54>
		hour=1;
 8001b26:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <CLOCK+0x160>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
	}

	second_ONS=second%10;
 8001b2c:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <CLOCK+0x158>)
 8001b2e:	781a      	ldrb	r2, [r3, #0]
 8001b30:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <CLOCK+0x164>)
 8001b32:	fba3 1302 	umull	r1, r3, r3, r2
 8001b36:	08d9      	lsrs	r1, r3, #3
 8001b38:	460b      	mov	r3, r1
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <CLOCK+0x168>)
 8001b46:	701a      	strb	r2, [r3, #0]
	second_TENS=second/10;
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <CLOCK+0x158>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <CLOCK+0x164>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <CLOCK+0x16c>)
 8001b58:	701a      	strb	r2, [r3, #0]

	minute_ONS=minute%10;
 8001b5a:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <CLOCK+0x15c>)
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <CLOCK+0x164>)
 8001b60:	fba3 1302 	umull	r1, r3, r3, r2
 8001b64:	08d9      	lsrs	r1, r3, #3
 8001b66:	460b      	mov	r3, r1
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b35      	ldr	r3, [pc, #212]	; (8001c48 <CLOCK+0x170>)
 8001b74:	701a      	strb	r2, [r3, #0]
	minute_TENS=minute/10;
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <CLOCK+0x15c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4a30      	ldr	r2, [pc, #192]	; (8001c3c <CLOCK+0x164>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	08db      	lsrs	r3, r3, #3
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <CLOCK+0x174>)
 8001b86:	701a      	strb	r2, [r3, #0]

	hour_ONS=hour%10;
 8001b88:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <CLOCK+0x160>)
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <CLOCK+0x164>)
 8001b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b92:	08d9      	lsrs	r1, r3, #3
 8001b94:	460b      	mov	r3, r1
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <CLOCK+0x178>)
 8001ba2:	701a      	strb	r2, [r3, #0]
	hour_TENS=hour/10;
 8001ba4:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <CLOCK+0x160>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <CLOCK+0x164>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	08db      	lsrs	r3, r3, #3
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <CLOCK+0x17c>)
 8001bb4:	701a      	strb	r2, [r3, #0]

	POV_STRING[12]=NUMBERS[second_TENS];
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <CLOCK+0x16c>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <CLOCK+0x180>)
 8001bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc2:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <CLOCK+0x184>)
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
	POV_STRING[14]=NUMBERS[second_ONS];
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <CLOCK+0x168>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <CLOCK+0x180>)
 8001bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd2:	4a22      	ldr	r2, [pc, #136]	; (8001c5c <CLOCK+0x184>)
 8001bd4:	6393      	str	r3, [r2, #56]	; 0x38

	POV_STRING[6]=NUMBERS[minute_TENS];
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <CLOCK+0x174>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <CLOCK+0x180>)
 8001bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be2:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <CLOCK+0x184>)
 8001be4:	6193      	str	r3, [r2, #24]
	POV_STRING[8]=NUMBERS[minute_ONS];
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <CLOCK+0x170>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <CLOCK+0x180>)
 8001bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf2:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <CLOCK+0x184>)
 8001bf4:	6213      	str	r3, [r2, #32]

	POV_STRING[0]=NUMBERS[hour_TENS];
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <CLOCK+0x17c>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <CLOCK+0x180>)
 8001bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c02:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <CLOCK+0x184>)
 8001c04:	6013      	str	r3, [r2, #0]
	POV_STRING[2]=NUMBERS[hour_ONS];
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <CLOCK+0x178>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <CLOCK+0x180>)
 8001c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <CLOCK+0x184>)
 8001c14:	6093      	str	r3, [r2, #8]

	TIMER_ISR(TIM3,999, U_ms, clk, CLOCK);
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <CLOCK+0x188>)
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <CLOCK+0x18c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001c22:	4811      	ldr	r0, [pc, #68]	; (8001c68 <CLOCK+0x190>)
 8001c24:	f7fe ffca 	bl	8000bbc <TIMER_ISR>
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000334 	.word	0x20000334
 8001c34:	200002e0 	.word	0x200002e0
 8001c38:	200002e1 	.word	0x200002e1
 8001c3c:	cccccccd 	.word	0xcccccccd
 8001c40:	200003e1 	.word	0x200003e1
 8001c44:	200003dc 	.word	0x200003dc
 8001c48:	200003e0 	.word	0x200003e0
 8001c4c:	200003de 	.word	0x200003de
 8001c50:	200003dd 	.word	0x200003dd
 8001c54:	200003df 	.word	0x200003df
 8001c58:	200002b8 	.word	0x200002b8
 8001c5c:	20000228 	.word	0x20000228
 8001c60:	08001ad9 	.word	0x08001ad9
 8001c64:	02255100 	.word	0x02255100
 8001c68:	40000400 	.word	0x40000400

08001c6c <main>:
int main(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af02      	add	r7, sp, #8
	WS2812b_LED_INIT();
 8001c72:	f7ff fa71 	bl	8001158 <WS2812b_LED_INIT>
	TIMER_ISR(TIM3,1000, U_ms, clk, CLOCK);
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <main+0x28>)
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <main+0x2c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c82:	4806      	ldr	r0, [pc, #24]	; (8001c9c <main+0x30>)
 8001c84:	f7fe ff9a 	bl	8000bbc <TIMER_ISR>

	while(1){
		//WS2812b_Graphics_Print(PHOTO_ARR);
		WS2812b_print_srting(POV_STRING, color);
 8001c88:	4905      	ldr	r1, [pc, #20]	; (8001ca0 <main+0x34>)
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <main+0x38>)
 8001c8c:	f7ff fa78 	bl	8001180 <WS2812b_print_srting>
 8001c90:	e7fa      	b.n	8001c88 <main+0x1c>
 8001c92:	bf00      	nop
 8001c94:	08001ad9 	.word	0x08001ad9
 8001c98:	02255100 	.word	0x02255100
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	2000027c 	.word	0x2000027c
 8001ca4:	20000228 	.word	0x20000228

08001ca8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001caa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001cac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb0:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cb2:	490d      	ldr	r1, [pc, #52]	; (8001ce8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <LoopForever+0xe>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	; (8001cf4 <LoopForever+0x16>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cd6:	f000 f811 	bl	8001cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cda:	f7ff ffc7 	bl	8001c6c <main>

08001cde <LoopForever>:

LoopForever:
    b LoopForever
 8001cde:	e7fe      	b.n	8001cde <LoopForever>
  ldr   r0, =_estack
 8001ce0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce8:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8001cec:	08001d64 	.word	0x08001d64
  ldr r2, =_sbss
 8001cf0:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8001cf4:	200003e4 	.word	0x200003e4

08001cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC1_2_IRQHandler>
	...

08001cfc <__libc_init_array>:
 8001cfc:	b570      	push	{r4, r5, r6, lr}
 8001cfe:	2500      	movs	r5, #0
 8001d00:	4e0c      	ldr	r6, [pc, #48]	; (8001d34 <__libc_init_array+0x38>)
 8001d02:	4c0d      	ldr	r4, [pc, #52]	; (8001d38 <__libc_init_array+0x3c>)
 8001d04:	1ba4      	subs	r4, r4, r6
 8001d06:	10a4      	asrs	r4, r4, #2
 8001d08:	42a5      	cmp	r5, r4
 8001d0a:	d109      	bne.n	8001d20 <__libc_init_array+0x24>
 8001d0c:	f000 f81a 	bl	8001d44 <_init>
 8001d10:	2500      	movs	r5, #0
 8001d12:	4e0a      	ldr	r6, [pc, #40]	; (8001d3c <__libc_init_array+0x40>)
 8001d14:	4c0a      	ldr	r4, [pc, #40]	; (8001d40 <__libc_init_array+0x44>)
 8001d16:	1ba4      	subs	r4, r4, r6
 8001d18:	10a4      	asrs	r4, r4, #2
 8001d1a:	42a5      	cmp	r5, r4
 8001d1c:	d105      	bne.n	8001d2a <__libc_init_array+0x2e>
 8001d1e:	bd70      	pop	{r4, r5, r6, pc}
 8001d20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d24:	4798      	blx	r3
 8001d26:	3501      	adds	r5, #1
 8001d28:	e7ee      	b.n	8001d08 <__libc_init_array+0xc>
 8001d2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d2e:	4798      	blx	r3
 8001d30:	3501      	adds	r5, #1
 8001d32:	e7f2      	b.n	8001d1a <__libc_init_array+0x1e>
 8001d34:	08001d5c 	.word	0x08001d5c
 8001d38:	08001d5c 	.word	0x08001d5c
 8001d3c:	08001d5c 	.word	0x08001d5c
 8001d40:	08001d60 	.word	0x08001d60

08001d44 <_init>:
 8001d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d46:	bf00      	nop
 8001d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d4a:	bc08      	pop	{r3}
 8001d4c:	469e      	mov	lr, r3
 8001d4e:	4770      	bx	lr

08001d50 <_fini>:
 8001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d52:	bf00      	nop
 8001d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d56:	bc08      	pop	{r3}
 8001d58:	469e      	mov	lr, r3
 8001d5a:	4770      	bx	lr
